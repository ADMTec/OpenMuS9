; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\Weapon.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B DB 03eH	; WEAPON_CS_ATTACKER
	DB	067H
	DB	048H
	DB	070H
	DB	058H
	DB	068H
	DB	07cH
	DB	06fH
	DB	074H
	DB	069H
	DB	07cH
	DB	070H
	DB	049H
	DB	056H
	DB	069H
	DB	067H
?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B DB 03dH	; WEAPON_CS_DEFENSER
	DB	058H
	DB	05dH
	DB	06cH
	DB	05cH
	DB	059H
	DB	07fH
	DB	06fH
	DB	054H
	DB	034H
	DB	066H
	DB	042H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CWeapon@@QAE@XZ				; CWeapon::CWeapon
PUBLIC	??1CWeapon@@UAE@XZ				; CWeapon::~CWeapon
PUBLIC	?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z	; CWeapon::SetWeaponCalDamageInfo
PUBLIC	?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z	; CWeapon::GetWeaponCalDamageInfo
PUBLIC	?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z	; CWeapon::AddWeaponDamagedTargetInfo
PUBLIC	?WeaponAttackProc@CWeapon@@QAEXXZ		; CWeapon::WeaponAttackProc
PUBLIC	?WeaponAct@CWeapon@@QAEXH@Z			; CWeapon::WeaponAct
PUBLIC	?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
PUBLIC	?GetAttackDamage@CWeapon@@QAEHH@Z		; CWeapon::GetAttackDamage
PUBLIC	?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z	; CWeapon::GetTargetPointXY
PUBLIC	?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
PUBLIC	??_GCWeapon@@UAEPAXI@Z				; CWeapon::`scalar deleting destructor'
PUBLIC	??_7CWeapon@@6B@				; CWeapon::`vftable'
PUBLIC	?g_CsNPC_Weapon@@3VCWeapon@@A			; g_CsNPC_Weapon
PUBLIC	??_R4CWeapon@@6B@				; CWeapon::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWeapon@@@8				; CWeapon `RTTI Type Descriptor'
PUBLIC	??_R3CWeapon@@8					; CWeapon::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWeapon@@8					; CWeapon::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWeapon@@8			; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@41200000
PUBLIC	__real@42c80000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_rand:PROC
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?GensMap@CGensSystem@@QAEHH@Z:PROC		; CGensSystem::GensMap
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	?GCManaSend@@YAXHFEEG@Z:PROC			; GCManaSend
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	??_ECWeapon@@UAEPAXI@Z:PROC			; CWeapon::`vector deleting destructor'
EXTRN	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjDenorantSprite
EXTRN	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDarkHorse
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetTotalValueOfEffect
EXTRN	?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjGetValueOfBuffIndex
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gGensSystem@@3VCGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_CsNPC_Weapon@@3VCWeapon@@A DB 0a2cH DUP (?)		; g_CsNPC_Weapon
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CsNPC_Weapon$initializer$@@3P6AXXZA DD FLAT:??__Eg_CsNPC_Weapon@@YAXXZ ; g_CsNPC_Weapon$initializer$
CRT$XCU	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CWeapon@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWeapon@@8 DD FLAT:??_R0?AVCWeapon@@@8	; CWeapon::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R2CWeapon@@8
rdata$r	SEGMENT
??_R2CWeapon@@8 DD FLAT:??_R1A@?0A@EA@CWeapon@@8	; CWeapon::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWeapon@@8
rdata$r	SEGMENT
??_R3CWeapon@@8 DD 00H					; CWeapon::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWeapon@@@8
data$r	SEGMENT
??_R0?AVCWeapon@@@8 DD FLAT:??_7type_info@@6B@		; CWeapon `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWeapon@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWeapon@@6B@
rdata$r	SEGMENT
??_R4CWeapon@@6B@ DD 00H				; CWeapon::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWeapon@@@8
	DD	FLAT:??_R3CWeapon@@8
rdata$r	ENDS
;	COMDAT ??_7CWeapon@@6B@
CONST	SEGMENT
??_7CWeapon@@6B@ DD FLAT:??_R4CWeapon@@6B@		; CWeapon::`vftable'
	DD	FLAT:??_ECWeapon@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CsNPC_Weapon@@YAXXZ
text$yd	SEGMENT
??__Fg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CsNPC_Weapon'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  00005	e9 00 00 00 00	 jmp	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
??__Fg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CsNPC_Weapon''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ??__Eg_CsNPC_Weapon@@YAXXZ
text$di	SEGMENT
??__Eg_CsNPC_Weapon@@YAXXZ PROC				; `dynamic initializer for 'g_CsNPC_Weapon'', COMDAT

; 11   : CWeapon g_CsNPC_Weapon;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CsNPC_Weapon@@3VCWeapon@@A ; g_CsNPC_Weapon
  00005	e8 00 00 00 00	 call	 ??0CWeapon@@QAE@XZ	; CWeapon::CWeapon
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CsNPC_Weapon@@YAXXZ ; `dynamic atexit destructor for 'g_CsNPC_Weapon''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CsNPC_Weapon@@YAXXZ ENDP				; `dynamic initializer for 'g_CsNPC_Weapon''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCWeapon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWeapon@@UAEPAXI@Z PROC				; CWeapon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWeapon@@UAE@XZ	; CWeapon::~CWeapon
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 2c 0a 00 00	 push	 2604			; 00000a2cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCWeapon@@UAEPAXI@Z ENDP				; CWeapon::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_iSkill$ = 16						; size = 4
_iSkillSuccess$ = 20					; size = 4
_bAllMiss$ = 24						; size = 4
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z PROC	; CWeapon::MissCheck, COMDAT
; _this$ = ecx

; 171  : 	return TRUE;

  00000	b8 01 00 00 00	 mov	 eax, 1

; 172  : }

  00005	c2 14 00	 ret	 20			; 00000014H
?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ENDP	; CWeapon::MissCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z
_TEXT	SEGMENT
_iObjClass$ = 8						; size = 4
_iTargetPointIndex$ = 12				; size = 4
_btX$ = 16						; size = 4
_btY$ = 20						; size = 4
_bRandomPos$ = 24					; size = 4
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z PROC		; CWeapon::GetTargetPointXY, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 124  : 	if ( iObjClass == 221 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iObjClass$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	3d dd 00 00 00	 cmp	 eax, 221		; 000000ddH
  0000e	0f 85 99 00 00
	00		 jne	 $LN5@GetTargetP

; 125  : 	{
; 126  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  00014	8b 75 0c	 mov	 esi, DWORD PTR _iTargetPointIndex$[ebp]
  00017	83 fe 03	 cmp	 esi, 3
  0001a	0f 87 25 01 00
	00		 ja	 $LN12@GetTargetP

; 127  : 		{
; 128  : 			int tx = WEAPON_CS_ATTACKER[iTargetPointIndex].btXEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin;

  00020	8a 0c b5 00 00
	00 00		 mov	 cl, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4]
  00027	0f b6 3c b5 02
	00 00 00	 movzx	 edi, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4+2]

; 129  : 			int ty = WEAPON_CS_ATTACKER[iTargetPointIndex].btYEnd - WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin;

  0002f	0f b6 1c b5 03
	00 00 00	 movzx	 ebx, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4+3]
  00037	0f b6 c1	 movzx	 eax, cl
  0003a	2b f8		 sub	 edi, eax
  0003c	0f b6 04 b5 01
	00 00 00	 movzx	 eax, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4+1]
  00044	2b d8		 sub	 ebx, eax

; 130  : 
; 131  : 			if ( bRandomPos != FALSE )

  00046	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  0004a	74 34		 je	 SHORT $LN4@GetTargetP

; 132  : 			{
; 133  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + rand() % tx;

  0004c	e8 00 00 00 00	 call	 _rand
  00051	99		 cdq
  00052	f7 ff		 idiv	 edi
  00054	8b 45 10	 mov	 eax, DWORD PTR _btX$[ebp]
  00057	02 14 b5 00 00
	00 00		 add	 dl, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4]
  0005e	88 10		 mov	 BYTE PTR [eax], dl

; 134  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + rand() % ty;

  00060	e8 00 00 00 00	 call	 _rand
  00065	99		 cdq
  00066	f7 fb		 idiv	 ebx
  00068	8b 45 14	 mov	 eax, DWORD PTR _btY$[ebp]
  0006b	02 14 b5 01 00
	00 00		 add	 dl, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4+1]
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	88 10		 mov	 BYTE PTR [eax], dl

; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : 
; 164  : 	return TRUE;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	5b		 pop	 ebx

; 165  : }

  0007c	5d		 pop	 ebp
  0007d	c2 14 00	 ret	 20			; 00000014H
$LN4@GetTargetP:

; 135  : 			}
; 136  : 			else
; 137  : 			{
; 138  : 				btX = WEAPON_CS_ATTACKER[iTargetPointIndex].btXBegin + tx / 2;

  00080	8b c7		 mov	 eax, edi
  00082	99		 cdq
  00083	2b c2		 sub	 eax, edx
  00085	d1 f8		 sar	 eax, 1
  00087	02 c1		 add	 al, cl
  00089	8b 4d 10	 mov	 ecx, DWORD PTR _btX$[ebp]
  0008c	5f		 pop	 edi
  0008d	88 01		 mov	 BYTE PTR [ecx], al

; 139  : 				btY = WEAPON_CS_ATTACKER[iTargetPointIndex].btYBegin + ty / 2;

  0008f	8b c3		 mov	 eax, ebx

; 159  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + ty / 2;

  00091	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  00094	99		 cdq
  00095	2b c2		 sub	 eax, edx
  00097	d1 f8		 sar	 eax, 1
  00099	02 04 b5 01 00
	00 00		 add	 al, BYTE PTR ?WEAPON_CS_ATTACKER@@3QBUST_CS_WEAPON@@B[esi*4+1]
  000a0	5e		 pop	 esi
  000a1	88 01		 mov	 BYTE PTR [ecx], al

; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : 
; 164  : 	return TRUE;

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	5b		 pop	 ebx

; 165  : }

  000a9	5d		 pop	 ebp
  000aa	c2 14 00	 ret	 20			; 00000014H
$LN5@GetTargetP:

; 140  : 			}
; 141  : 		}
; 142  : 	}
; 143  : 
; 144  : 	if ( iObjClass == 222 )

  000ad	3d de 00 00 00	 cmp	 eax, 222		; 000000deH
  000b2	0f 85 8d 00 00
	00		 jne	 $LN12@GetTargetP

; 145  : 	{
; 146  : 		if ( iTargetPointIndex >= 0 && iTargetPointIndex < MAX_ST_CS_WEAPON )

  000b8	8b 75 0c	 mov	 esi, DWORD PTR _iTargetPointIndex$[ebp]
  000bb	83 fe 03	 cmp	 esi, 3
  000be	0f 87 81 00 00
	00		 ja	 $LN12@GetTargetP

; 147  : 		{
; 148  : 			int tx = WEAPON_CS_DEFENSER[iTargetPointIndex].btXEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin;

  000c4	8a 0c b5 00 00
	00 00		 mov	 cl, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4]
  000cb	0f b6 3c b5 02
	00 00 00	 movzx	 edi, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4+2]

; 149  : 			int ty = WEAPON_CS_DEFENSER[iTargetPointIndex].btYEnd - WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin;

  000d3	0f b6 1c b5 03
	00 00 00	 movzx	 ebx, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4+3]
  000db	0f b6 c1	 movzx	 eax, cl
  000de	2b f8		 sub	 edi, eax
  000e0	0f b6 04 b5 01
	00 00 00	 movzx	 eax, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4+1]
  000e8	2b d8		 sub	 ebx, eax

; 150  : 
; 151  : 			if ( bRandomPos != FALSE )

  000ea	83 7d 18 00	 cmp	 DWORD PTR _bRandomPos$[ebp], 0
  000ee	74 34		 je	 SHORT $LN8@GetTargetP

; 152  : 			{
; 153  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + rand() % tx;

  000f0	e8 00 00 00 00	 call	 _rand
  000f5	99		 cdq
  000f6	f7 ff		 idiv	 edi
  000f8	8b 45 10	 mov	 eax, DWORD PTR _btX$[ebp]
  000fb	02 14 b5 00 00
	00 00		 add	 dl, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4]
  00102	88 10		 mov	 BYTE PTR [eax], dl

; 154  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + rand() % ty;

  00104	e8 00 00 00 00	 call	 _rand
  00109	99		 cdq
  0010a	f7 fb		 idiv	 ebx
  0010c	8b 45 14	 mov	 eax, DWORD PTR _btY$[ebp]
  0010f	02 14 b5 01 00
	00 00		 add	 dl, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4+1]
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	88 10		 mov	 BYTE PTR [eax], dl

; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : 
; 164  : 	return TRUE;

  0011a	b8 01 00 00 00	 mov	 eax, 1
  0011f	5b		 pop	 ebx

; 165  : }

  00120	5d		 pop	 ebp
  00121	c2 14 00	 ret	 20			; 00000014H
$LN8@GetTargetP:

; 155  : 			}
; 156  : 			else
; 157  : 			{
; 158  : 				btX = WEAPON_CS_DEFENSER[iTargetPointIndex].btXBegin + tx / 2;

  00124	8b c7		 mov	 eax, edi
  00126	99		 cdq
  00127	2b c2		 sub	 eax, edx
  00129	d1 f8		 sar	 eax, 1
  0012b	02 c1		 add	 al, cl
  0012d	8b 4d 10	 mov	 ecx, DWORD PTR _btX$[ebp]
  00130	88 01		 mov	 BYTE PTR [ecx], al

; 159  : 				btY = WEAPON_CS_DEFENSER[iTargetPointIndex].btYBegin + ty / 2;

  00132	8b c3		 mov	 eax, ebx
  00134	8b 4d 14	 mov	 ecx, DWORD PTR _btY$[ebp]
  00137	99		 cdq
  00138	2b c2		 sub	 eax, edx
  0013a	d1 f8		 sar	 eax, 1
  0013c	02 04 b5 01 00
	00 00		 add	 al, BYTE PTR ?WEAPON_CS_DEFENSER@@3QBUST_CS_WEAPON@@B[esi*4+1]
  00143	88 01		 mov	 BYTE PTR [ecx], al
$LN12@GetTargetP:

; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : 
; 164  : 	return TRUE;

  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	5b		 pop	 ebx

; 165  : }

  0014d	5d		 pop	 ebp
  0014e	c2 14 00	 ret	 20			; 00000014H
?GetTargetPointXY@CWeapon@@QAEHHHAAE0H@Z ENDP		; CWeapon::GetTargetPointXY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?GetAttackDamage@CWeapon@@QAEHH@Z
_TEXT	SEGMENT
_iObjClass$ = 8						; size = 4
?GetAttackDamage@CWeapon@@QAEHH@Z PROC			; CWeapon::GetAttackDamage, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 105  : 	int iDamage = 0;
; 106  : 
; 107  : 	if ( iObjClass == 221 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iObjClass$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	3d dd 00 00 00	 cmp	 eax, 221		; 000000ddH
  0000d	75 09		 jne	 SHORT $LN2@GetAttackD

; 112  : 	{
; 113  : 		iDamage = 200;
; 114  : 	}
; 115  : 
; 116  : 	return iDamage;

  0000f	b8 2c 01 00 00	 mov	 eax, 300		; 0000012cH

; 117  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN2@GetAttackD:

; 108  : 	{
; 109  : 		iDamage = 300;
; 110  : 	}
; 111  : 	else if ( iObjClass == 222 )

  00018	3d de 00 00 00	 cmp	 eax, 222		; 000000deH
  0001d	ba c8 00 00 00	 mov	 edx, 200		; 000000c8H
  00022	0f 44 ca	 cmove	 ecx, edx

; 112  : 	{
; 113  : 		iDamage = 200;
; 114  : 	}
; 115  : 
; 116  : 	return iDamage;

  00025	8b c1		 mov	 eax, ecx

; 117  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetAttackDamage@CWeapon@@QAEHH@Z ENDP			; CWeapon::GetAttackDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_ManaChange$1$ = -8					; size = 4
_iSkill$1$ = -4						; size = 4
_MSBFlag$1$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_EffectVal1$1 = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
_EffectVal2$2 = 16					; size = 4
_bAllMiss$ = 16						; size = 4
_lpMagic$ = 16						; size = 4
_iCriticalDamage$ = 20					; size = 4
_iActionType$ = 24					; size = 4
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z PROC ; CWeapon::Attack, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 179  : 	int iSkill = 0;
; 180  : 	int iSkillSuccess = TRUE;
; 181  : 	BYTE MsgDamage = 0;
; 182  : 	int ManaChange = 0;
; 183  : 
; 184  : 	if ( lpMagic != NULL )

  00006	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iSkill$1$[ebp], 0
  00010	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ManaChange$1$[ebp], 0
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	89 7d f4	 mov	 DWORD PTR _this$1$[ebp], edi
  0001e	85 c0		 test	 eax, eax
  00020	74 06		 je	 SHORT $LN2@Attack

; 185  : 	{
; 186  : 		iSkill = lpMagic->m_Skill;

  00022	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00025	89 45 fc	 mov	 DWORD PTR _iSkill$1$[ebp], eax
$LN2@Attack:

; 187  : 	}
; 188  : 
; 189  : 	if ( (lpTargetObj->Authority & 2) == 2 )

  00028	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  0002b	f6 86 bc 01 00
	00 02		 test	 BYTE PTR [esi+444], 2
  00032	74 0a		 je	 SHORT $LN3@Attack

; 190  : 	{
; 191  : 		return FALSE;

  00034	5f		 pop	 edi
  00035	33 c0		 xor	 eax, eax
  00037	5e		 pop	 esi

; 429  : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 14 00	 ret	 20			; 00000014H
$LN3@Attack:
  0003e	53		 push	 ebx

; 192  : 	}
; 193  : 
; 194  : 	if ( lpObj->MapNumber != lpTargetObj->MapNumber )

  0003f	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00042	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  00048	3a 86 23 01 00
	00		 cmp	 al, BYTE PTR [esi+291]
  0004e	0f 85 b0 00 00
	00		 jne	 $LN56@Attack

; 195  : 	{
; 196  : 		return FALSE;
; 197  : 	}
; 198  : 
; 199  : #if (__GENS_SYSTEM__ == 1)
; 200  : 	if (gGensSystem.GetFriendlyFire() && gGensSystem.GensMap(lpObj->MapNumber)) {

  00054	80 3d 38 00 00
	00 00		 cmp	 BYTE PTR ?gGensSystem@@3VCGensSystem@@A+56, 0
  0005b	74 2c		 je	 SHORT $LN6@Attack
  0005d	0f b6 c0	 movzx	 eax, al
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VCGensSystem@@A ; gGensSystem
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?GensMap@CGensSystem@@QAEHH@Z ; CGensSystem::GensMap
  0006b	85 c0		 test	 eax, eax
  0006d	74 1a		 je	 SHORT $LN6@Attack

; 201  : 		if (lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER
; 202  : 			&& lpObj->m_GensInfo.btFamily == lpTargetObj->m_GensInfo.btFamily) {

  0006f	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00073	75 14		 jne	 SHORT $LN6@Attack
  00075	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00079	75 0e		 jne	 SHORT $LN6@Attack
  0007b	8a 83 ac 26 00
	00		 mov	 al, BYTE PTR [ebx+9900]
  00081	3a 86 ac 26 00
	00		 cmp	 al, BYTE PTR [esi+9900]
  00087	74 7b		 je	 SHORT $LN56@Attack
$LN6@Attack:

; 203  : 			return false;
; 204  : 		}
; 205  : 	}
; 206  : #endif
; 207  : 	
; 208  : 	if ( lpObj->MapNumber == MAP_INDEX_PKFIELD && lpObj->m_iDuelUser == -1)

  00089	80 bb 23 01 00
	00 40		 cmp	 BYTE PTR [ebx+291], 64	; 00000040H
  00090	75 09		 jne	 SHORT $LN7@Attack
  00092	83 bb 50 12 00
	00 ff		 cmp	 DWORD PTR [ebx+4688], -1
  00099	74 69		 je	 SHORT $LN56@Attack
$LN7@Attack:

; 209  : 	{
; 210  : 		return FALSE;
; 211  : 	}
; 212  : 
; 213  : 	if ( lpTargetObj->Type == OBJ_USER )

  0009b	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0009f	75 0d		 jne	 SHORT $LN9@Attack

; 214  : 	{
; 215  : 		if ( gObjIsConnected(lpTargetObj) == FALSE )

  000a1	56		 push	 esi
  000a2	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000a7	83 c4 04	 add	 esp, 4
  000aa	85 c0		 test	 eax, eax
  000ac	74 56		 je	 SHORT $LN56@Attack
$LN9@Attack:

; 216  : 		{
; 217  : 			return FALSE;
; 218  : 		}
; 219  : 	}
; 220  : 
; 221  : 	if ( gObjAttackQ(lpTargetObj) == 0 )

  000ae	56		 push	 esi
  000af	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  000b4	83 c4 04	 add	 esp, 4
  000b7	85 c0		 test	 eax, eax
  000b9	74 49		 je	 SHORT $LN56@Attack

; 222  : 	{
; 223  : 		return FALSE;
; 224  : 	}
; 225  : 
; 226  : 	int MSBFlag = 0;
; 227  : 
; 228  : 	if ( iCriticalDamage != 0 )

  000bb	8b 45 14	 mov	 eax, DWORD PTR _iCriticalDamage$[ebp]

; 229  : 	{
; 230  : 		MsgDamage = 3;
; 231  : 	}
; 232  : 	else
; 233  : 	{
; 234  : 		MsgDamage = 0;
; 235  : 	}
; 236  : 
; 237  : 	int iAttackDamage = this->GetAttackDamage(lpObj->Class);

  000be	8b cf		 mov	 ecx, edi
  000c0	f7 d8		 neg	 eax
  000c2	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _MSBFlag$1$[ebp], 0
  000c9	1a c0		 sbb	 al, al
  000cb	25 03 ff ff ff	 and	 eax, -253		; ffffff03H
  000d0	89 45 14	 mov	 DWORD PTR _iCriticalDamage$[ebp], eax
  000d3	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?GetAttackDamage@CWeapon@@QAEHH@Z ; CWeapon::GetAttackDamage

; 238  : 	int iTargetDefense = lpTargetObj->m_Defense;
; 239  : 	int iDefenseDown = gObjGetTotalValueOfEffect(lpObj,ADD_OPTION_DEFENSEDOWN);

  000e0	6a 17		 push	 23			; 00000017H
  000e2	53		 push	 ebx
  000e3	8b f8		 mov	 edi, eax
  000e5	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect

; 240  : 	iTargetDefense -= (iTargetDefense * iDefenseDown)/100;
; 241  : 
; 242  : 	BOOL bAllMiss = FALSE;
; 243  : 	
; 244  : 	if ( this->MissCheck(lpObj, lpTargetObj, iSkill, iSkillSuccess, bAllMiss) == FALSE )

  000ea	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ed	8d 45 10	 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  000f0	83 c4 08	 add	 esp, 8
  000f3	50		 push	 eax
  000f4	6a 01		 push	 1
  000f6	ff 75 fc	 push	 DWORD PTR _iSkill$1$[ebp]
  000f9	56		 push	 esi
  000fa	53		 push	 ebx
  000fb	e8 00 00 00 00	 call	 ?MissCheck@CWeapon@@QAEHPAUOBJECTSTRUCT@@0HHAAH@Z ; CWeapon::MissCheck
  00100	85 c0		 test	 eax, eax
  00102	75 0b		 jne	 SHORT $LN14@Attack
$LN56@Attack:
  00104	5b		 pop	 ebx
  00105	5f		 pop	 edi

; 245  : 	{
; 246  : 		return FALSE;

  00106	33 c0		 xor	 eax, eax
  00108	5e		 pop	 esi

; 429  : }

  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 14 00	 ret	 20			; 00000014H
$LN14@Attack:

; 247  : 	}
; 248  : 
; 249  : 	if ( bAllMiss != FALSE )
; 250  : 	{
; 251  : 		iAttackDamage = (iAttackDamage * 30)/100;
; 252  : 	}
; 253  : 
; 254  : 	if ( lpTargetObj->DamageMinus != 0 )

  0010f	8a 86 48 01 00
	00		 mov	 al, BYTE PTR [esi+328]
  00115	84 c0		 test	 al, al
  00117	74 19		 je	 SHORT $LN15@Attack

; 255  : 	{
; 256  : 		int lc11 = iAttackDamage;
; 257  : 		iAttackDamage -= (iAttackDamage * lpTargetObj->DamageMinus)/100;

  00119	0f b6 c8	 movzx	 ecx, al
  0011c	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00121	0f af cf	 imul	 ecx, edi
  00124	f7 e9		 imul	 ecx
  00126	c1 fa 05	 sar	 edx, 5
  00129	8b c2		 mov	 eax, edx
  0012b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012e	03 c2		 add	 eax, edx
  00130	03 f8		 add	 edi, eax
$LN15@Attack:

; 258  : 	}
; 259  : 
; 260  : 	int iTargetLevel = lpObj->Level / 10;

  00132	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  00139	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0013e	f7 e9		 imul	 ecx

; 261  : 
; 262  : 	if ( iAttackDamage < iTargetLevel )

  00140	b9 01 00 00 00	 mov	 ecx, 1
  00145	c1 fa 02	 sar	 edx, 2
  00148	8b c2		 mov	 eax, edx
  0014a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0014d	03 c2		 add	 eax, edx
  0014f	3b f8		 cmp	 edi, eax
  00151	7d 07		 jge	 SHORT $LN16@Attack

; 263  : 	{
; 264  : 		if ( iTargetLevel < 1 )

  00153	3b c1		 cmp	 eax, ecx
  00155	8b f8		 mov	 edi, eax
  00157	0f 4c f9	 cmovl	 edi, ecx
$LN16@Attack:

; 265  : 		{
; 266  : 			iTargetLevel = 1;
; 267  : 		}
; 268  : 
; 269  : 		iAttackDamage = iTargetLevel;
; 270  : 	}
; 271  : 
; 272  : 	if ( lpTargetObj->m_SkillNumber == 18 )

  0015a	66 83 be b8 05
	00 00 12	 cmp	 WORD PTR [esi+1464], 18	; 00000012H
  00162	75 07		 jne	 SHORT $LN19@Attack

; 273  : 	{
; 274  : 		if ( iAttackDamage > 1 )

  00164	83 ff 01	 cmp	 edi, 1
  00167	7e 02		 jle	 SHORT $LN19@Attack

; 275  : 		{
; 276  : 			iAttackDamage = iAttackDamage >> 1;

  00169	d1 ff		 sar	 edi, 1
$LN19@Attack:

; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	if ( gObjAngelSprite(lpTargetObj) == TRUE )

  0016b	56		 push	 esi
  0016c	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  00171	83 c4 04	 add	 esp, 4
  00174	83 f8 01	 cmp	 eax, 1
  00177	75 1e		 jne	 SHORT $LN21@Attack

; 281  : 	{
; 282  : 		if ( iAttackDamage > 1 )

  00179	3b f8		 cmp	 edi, eax
  0017b	7e 1a		 jle	 SHORT $LN21@Attack

; 283  : 		{
; 284  : 			float lc13 = (float)(iAttackDamage * 8 ) / 10.0f;

  0017d	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00184	66 0f 6e c0	 movd	 xmm0, eax
  00188	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0018b	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000

; 285  : 			iAttackDamage = (int)( lc13 );

  00193	f3 0f 2c f8	 cvttss2si edi, xmm0
$LN21@Attack:

; 286  : 		}
; 287  : 	}
; 288  : 
; 289  : 	if ( gObjWingSprite(lpTargetObj) == TRUE )

  00197	56		 push	 esi
  00198	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  0019d	83 c4 04	 add	 esp, 4
  001a0	83 f8 01	 cmp	 eax, 1
  001a3	75 4d		 jne	 SHORT $LN25@Attack

; 290  : 	{
; 291  : 		CItem * Wing = &lpTargetObj->pInventory[7];

  001a5	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]

; 292  : 
; 293  : 		if ( iAttackDamage > 1 )

  001ab	83 ff 01	 cmp	 edi, 1
  001ae	7e 42		 jle	 SHORT $LN25@Attack

; 294  : 		{
; 295  : 			if( Wing->m_Type > ITEMGET(12,2) )

  001b0	b9 02 18 00 00	 mov	 ecx, 6146		; 00001802H
  001b5	66 39 88 d2 05
	00 00		 cmp	 WORD PTR [eax+1490], cx

; 296  : 			{
; 297  : 				float damage = iAttackDamage * (75 - Wing->m_Level*2) / 100.0f;

  001bc	0f bf 80 d4 05
	00 00		 movsx	 eax, WORD PTR [eax+1492]
  001c3	7e 0e		 jle	 SHORT $LN24@Attack
  001c5	03 c0		 add	 eax, eax
  001c7	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  001cc	2b c8		 sub	 ecx, eax
  001ce	0f af cf	 imul	 ecx, edi

; 298  : 				iAttackDamage = (int)damage;
; 299  : 			}
; 300  : 			else

  001d1	eb 0c		 jmp	 SHORT $LN54@Attack
$LN24@Attack:

; 301  : 			{
; 302  : 				float damage = iAttackDamage * (88 - Wing->m_Level*2) / 100.0f;

  001d3	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  001d8	2b c8		 sub	 ecx, eax
  001da	0f af cf	 imul	 ecx, edi
  001dd	03 c9		 add	 ecx, ecx
$LN54@Attack:
  001df	66 0f 6e c1	 movd	 xmm0, ecx
  001e3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001e6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000

; 303  : 				iAttackDamage = (int)damage;

  001ee	f3 0f 2c f8	 cvttss2si edi, xmm0
$LN25@Attack:

; 304  : 			}
; 305  : 		}
; 306  : 	}
; 307  : 
; 308  : 	if ( gObjDenorantSprite(lpTargetObj) != FALSE )

  001f2	56		 push	 esi
  001f3	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  001f8	83 c4 04	 add	 esp, 4
  001fb	85 c0		 test	 eax, eax
  001fd	74 7d		 je	 SHORT $LN26@Attack

; 309  : 	{
; 310  : 		CItem * Dino = &lpTargetObj->pInventory[8];

  001ff	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00205	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H

; 311  : 
; 312  : 		int ReduceDamage = 90 - Dino->IsDinorantReduceAttackDamaege();

  0020b	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege

; 313  : 
; 314  : 		lpObj->Life -= 1.0f;

  00210	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  00218	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0021d	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00225	0f 57 c9	 xorps	 xmm1, xmm1
  00228	2b c8		 sub	 ecx, eax

; 315  : 
; 316  : 		if ( lpObj->Life < 0.0f )

  0022a	0f 2f c8	 comiss	 xmm1, xmm0
  0022d	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0
  00235	76 0c		 jbe	 SHORT $LN27@Attack

; 317  : 		{
; 318  : 			lpObj->Life = 0;

  00237	c7 83 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+216], 0

; 319  : 		}
; 320  : 		else

  00241	eb 14		 jmp	 SHORT $LN28@Attack
$LN27@Attack:

; 321  : 		{
; 322  : 			iAttackDamage = (iAttackDamage * ReduceDamage)/100;

  00243	0f af cf	 imul	 ecx, edi
  00246	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0024b	f7 e9		 imul	 ecx
  0024d	c1 fa 05	 sar	 edx, 5
  00250	8b fa		 mov	 edi, edx
  00252	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00255	03 fa		 add	 edi, edx
$LN28@Attack:

; 323  : 		}
; 324  : 
; 325  : 		GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, (BYTE)-1, 0, lpObj->iShield);

  00257	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  0025e	50		 push	 eax
  0025f	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  00267	6a 00		 push	 0
  00269	68 ff 00 00 00	 push	 255			; 000000ffH
  0026e	0f b7 c0	 movzx	 eax, ax
  00271	50		 push	 eax
  00272	ff 33		 push	 DWORD PTR [ebx]
  00274	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  00279	83 c4 14	 add	 esp, 20			; 00000014H
$LN26@Attack:

; 326  : 	}
; 327  : 
; 328  : 	if ( gObjDarkHorse(lpTargetObj) != FALSE )

  0027c	56		 push	 esi
  0027d	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  00282	83 c4 04	 add	 esp, 4
  00285	85 c0		 test	 eax, eax
  00287	0f 84 80 00 00
	00		 je	 $LN29@Attack

; 329  : 	{
; 330  : 		CItem * DarkHorse = &lpTargetObj->pInventory[8];
; 331  : 
; 332  : 		int DHPercent = 100-(DarkHorse->m_PetItem_Level+30)/2;

  0028d	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00293	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H

; 333  : 
; 334  : 		lpTargetObj->Life -= 1.0f;

  00298	f3 0f 10 86 d8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+216]
  002a0	0f 57 c9	 xorps	 xmm1, xmm1
  002a3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  002ab	8b 80 58 07 00
	00		 mov	 eax, DWORD PTR [eax+1880]
  002b1	83 c0 1e	 add	 eax, 30			; 0000001eH
  002b4	99		 cdq
  002b5	2b c2		 sub	 eax, edx
  002b7	f3 0f 11 86 d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm0
  002bf	d1 f8		 sar	 eax, 1
  002c1	2b c8		 sub	 ecx, eax

; 335  : 
; 336  : 		if ( lpTargetObj->Life < 0.0f )

  002c3	0f 2f c8	 comiss	 xmm1, xmm0
  002c6	76 0c		 jbe	 SHORT $LN30@Attack

; 337  : 		{
; 338  : 			lpTargetObj->Life = 0;

  002c8	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0

; 339  : 		}
; 340  : 		else

  002d2	eb 14		 jmp	 SHORT $LN31@Attack
$LN30@Attack:

; 341  : 		{
; 342  : 			iAttackDamage = (iAttackDamage * DHPercent)/100;

  002d4	0f af cf	 imul	 ecx, edi
  002d7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002dc	f7 e9		 imul	 ecx
  002de	c1 fa 05	 sar	 edx, 5
  002e1	8b fa		 mov	 edi, edx
  002e3	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  002e6	03 fa		 add	 edi, edx
$LN31@Attack:

; 343  : 		}
; 344  : 
; 345  : 		GCReFillSend(lpTargetObj->m_Index, (WORD)lpTargetObj->Life, (BYTE)-1, 0, lpTargetObj->iShield);

  002e8	0f b7 86 2c 01
	00 00		 movzx	 eax, WORD PTR [esi+300]
  002ef	50		 push	 eax
  002f0	f3 0f 2c 86 d8
	00 00 00	 cvttss2si eax, DWORD PTR [esi+216]
  002f8	6a 00		 push	 0
  002fa	68 ff 00 00 00	 push	 255			; 000000ffH
  002ff	0f b7 c0	 movzx	 eax, ax
  00302	50		 push	 eax
  00303	ff 36		 push	 DWORD PTR [esi]
  00305	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  0030a	83 c4 14	 add	 esp, 20			; 00000014H
$LN29@Attack:

; 346  : 	}
; 347  : 
; 348  : 	if ( lpTargetObj->Live != FALSE )

  0030d	80 7e 51 00	 cmp	 BYTE PTR [esi+81], 0
  00311	0f 84 df 00 00
	00		 je	 $LN38@Attack

; 349  : 	{
; 350  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_MANASHIELD) == TRUE && iAttackDamage > 0 )

  00317	6a 04		 push	 4
  00319	56		 push	 esi
  0031a	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0031f	83 c4 08	 add	 esp, 8
  00322	3c 01		 cmp	 al, 1
  00324	0f 85 9f 00 00
	00		 jne	 $LN36@Attack
  0032a	85 ff		 test	 edi, edi
  0032c	0f 8e 97 00 00
	00		 jle	 $LN36@Attack

; 351  : 		{
; 352  : 			int EffectVal1 = 0;
; 353  : 			int EffectVal2 = 0;
; 354  : 
; 355  : 			gObjGetValueOfBuffIndex(lpTargetObj,BUFF_MANASHIELD,&EffectVal1,&EffectVal2);

  00332	8d 45 10	 lea	 eax, DWORD PTR _EffectVal2$2[ebp]
  00335	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _EffectVal1$1[ebp], 0
  0033c	50		 push	 eax
  0033d	8d 45 0c	 lea	 eax, DWORD PTR _EffectVal1$1[ebp]
  00340	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _EffectVal2$2[ebp], 0
  00347	50		 push	 eax
  00348	6a 04		 push	 4
  0034a	56		 push	 esi
  0034b	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 356  : 
; 357  : 			int replacemana = 0;
; 358  : 
; 359  : 			if( EffectVal2 > 0 )
; 360  : 			{
; 361  : 				replacemana = ((WORD)lpTargetObj->Mana * EffectVal2) / 1000;

  00350	f3 0f 10 86 ec
	00 00 00	 movss	 xmm0, DWORD PTR [esi+236]
  00358	83 c4 10	 add	 esp, 16			; 00000010H
  0035b	8b 55 10	 mov	 edx, DWORD PTR _EffectVal2$2[ebp]
  0035e	f3 0f 2c c0	 cvttss2si eax, xmm0
  00362	0f b7 c8	 movzx	 ecx, ax
  00365	85 d2		 test	 edx, edx
  00367	7e 0f		 jle	 SHORT $LN34@Attack
  00369	0f af ca	 imul	 ecx, edx
  0036c	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00371	f7 e9		 imul	 ecx
  00373	c1 fa 06	 sar	 edx, 6

; 362  : 			}
; 363  : 			else

  00376	eb 0c		 jmp	 SHORT $LN55@Attack
$LN34@Attack:

; 364  : 			{
; 365  : 				replacemana = ((WORD)lpTargetObj->Mana * 2) / 100;

  00378	03 c9		 add	 ecx, ecx
  0037a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0037f	f7 e9		 imul	 ecx
  00381	c1 fa 05	 sar	 edx, 5
$LN55@Attack:
  00384	8b c2		 mov	 eax, edx
  00386	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00389	03 c2		 add	 eax, edx
  0038b	66 0f 6e c8	 movd	 xmm1, eax

; 366  : 			}
; 367  : 
; 368  : 			if ( replacemana < lpTargetObj->Mana )

  0038f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00392	0f 2f c1	 comiss	 xmm0, xmm1
  00395	76 32		 jbe	 SHORT $LN36@Attack

; 369  : 			{
; 370  : 				lpTargetObj->Mana -= replacemana;
; 371  : 				int decattackdamage = 0;
; 372  : 				
; 373  : 				if( EffectVal1 > 0 )

  00397	8b 55 0c	 mov	 edx, DWORD PTR _EffectVal1$1[ebp]
  0039a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0039e	33 c9		 xor	 ecx, ecx
  003a0	f3 0f 11 86 ec
	00 00 00	 movss	 DWORD PTR [esi+236], xmm0
  003a8	85 d2		 test	 edx, edx
  003aa	7e 14		 jle	 SHORT $LN37@Attack

; 374  : 				{
; 375  : 					decattackdamage = iAttackDamage * EffectVal1 / 100;

  003ac	0f af d7	 imul	 edx, edi
  003af	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003b4	f7 ea		 imul	 edx
  003b6	c1 fa 05	 sar	 edx, 5
  003b9	8b ca		 mov	 ecx, edx
  003bb	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003be	03 ca		 add	 ecx, edx
$LN37@Attack:

; 376  : 				}
; 377  : 				iAttackDamage -= decattackdamage;

  003c0	2b f9		 sub	 edi, ecx

; 378  : 				ManaChange = TRUE;

  003c2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ManaChange$1$[ebp], 1
$LN36@Attack:

; 379  : 			}
; 380  : 		}
; 381  : 
; 382  : 		lpTargetObj->Life -= iAttackDamage;

  003c9	f3 0f 10 8e d8
	00 00 00	 movss	 xmm1, DWORD PTR [esi+216]
  003d1	66 0f 6e c7	 movd	 xmm0, edi
  003d5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003d8	f3 0f 5c c8	 subss	 xmm1, xmm0
  003dc	0f 57 c0	 xorps	 xmm0, xmm0

; 383  : 
; 384  : 		if ( lpTargetObj->Life < 0.0f )

  003df	0f 2f c1	 comiss	 xmm0, xmm1
  003e2	f3 0f 11 8e d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm1
  003ea	76 0a		 jbe	 SHORT $LN38@Attack

; 385  : 		{
; 386  : 			lpTargetObj->Life = 0;

  003ec	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
$LN38@Attack:

; 387  : 		}
; 388  : 	}
; 389  : 
; 390  : 	if ( iAttackDamage >= 1 )

  003f6	83 ff 01	 cmp	 edi, 1
  003f9	7c 10		 jl	 SHORT $LN40@Attack

; 391  : 	{
; 392  : 		if ( lpTargetObj->Type == OBJ_USER )

  003fb	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  003ff	75 0a		 jne	 SHORT $LN40@Attack

; 393  : 		{
; 394  : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  00401	53		 push	 ebx
  00402	56		 push	 esi
  00403	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  00408	83 c4 08	 add	 esp, 8
$LN40@Attack:

; 395  : 		}
; 396  : 	}
; 397  : 
; 398  : 	if ( iAttackDamage >= 5 )

  0040b	83 ff 05	 cmp	 edi, 5
  0040e	7c 54		 jl	 SHORT $LN46@Attack

; 399  : 	{
; 400  : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  00410	80 7e 50 02	 cmp	 BYTE PTR [esi+80], 2
  00414	75 23		 jne	 SHORT $LN42@Attack

; 401  : 		{
; 402  : 			if ( (rand()%26) == 0 )

  00416	e8 00 00 00 00	 call	 _rand
  0041b	99		 cdq
  0041c	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00421	f7 f9		 idiv	 ecx
  00423	85 d2		 test	 edx, edx
  00425	75 3d		 jne	 SHORT $LN46@Attack

; 403  : 			{
; 404  : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  00427	52		 push	 edx
  00428	6a 64		 push	 100			; 00000064H
  0042a	ff 33		 push	 DWORD PTR [ebx]
  0042c	6a 04		 push	 4
  0042e	56		 push	 esi
  0042f	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00434	83 c4 14	 add	 esp, 20			; 00000014H

; 405  : 			}
; 406  : 		}

  00437	eb 2b		 jmp	 SHORT $LN46@Attack
$LN42@Attack:

; 407  : 		else if ( (rand()%4) == 0 )

  00439	e8 00 00 00 00	 call	 _rand
  0043e	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00443	79 05		 jns	 SHORT $LN53@Attack
  00445	48		 dec	 eax
  00446	83 c8 fc	 or	 eax, -4			; fffffffcH
  00449	40		 inc	 eax
$LN53@Attack:
  0044a	75 18		 jne	 SHORT $LN46@Attack

; 408  : 		{
; 409  : 			if ( gObjUniriaSprite(lpTargetObj) == FALSE )

  0044c	56		 push	 esi
  0044d	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  00452	33 c9		 xor	 ecx, ecx
  00454	83 c4 04	 add	 esp, 4
  00457	85 c0		 test	 eax, eax
  00459	b8 01 00 00 00	 mov	 eax, 1
  0045e	0f 44 c8	 cmove	 ecx, eax
  00461	89 4d 08	 mov	 DWORD PTR _MSBFlag$1$[ebp], ecx
$LN46@Attack:

; 410  : 			{
; 411  : 				MSBFlag = TRUE;
; 412  : 			}
; 413  : 		}
; 414  : 	}
; 415  : 
; 416  : 	if ( ManaChange != FALSE )

  00464	83 7d f8 00	 cmp	 DWORD PTR _ManaChange$1$[ebp], 0
  00468	74 25		 je	 SHORT $LN47@Attack

; 417  : 	{
; 418  : 		GCManaSend(lpTargetObj->m_Index,(WORD) lpTargetObj->Mana, (BYTE)-1, 0, lpTargetObj->BP);

  0046a	0f b7 86 04 01
	00 00		 movzx	 eax, WORD PTR [esi+260]
  00471	50		 push	 eax
  00472	f3 0f 2c 86 ec
	00 00 00	 cvttss2si eax, DWORD PTR [esi+236]
  0047a	6a 00		 push	 0
  0047c	68 ff 00 00 00	 push	 255			; 000000ffH
  00481	0f b7 c0	 movzx	 eax, ax
  00484	50		 push	 eax
  00485	ff 36		 push	 DWORD PTR [esi]
  00487	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  0048c	83 c4 14	 add	 esp, 20			; 00000014H
$LN47@Attack:

; 419  : 	}
; 420  : 
; 421  : 	lpObj->m_Rest = 0;

  0048f	c6 83 d4 01 00
	00 00		 mov	 BYTE PTR [ebx+468], 0

; 422  : 
; 423  : 	if ( iAttackDamage > 0 )

  00496	85 ff		 test	 edi, edi
  00498	7e 1c		 jle	 SHORT $LN48@Attack

; 424  : 	{
; 425  : 		gObjLifeCheck(lpTargetObj, lpObj, iAttackDamage, 0, MSBFlag, MsgDamage, iSkill, 0);

  0049a	8b 45 14	 mov	 eax, DWORD PTR _iCriticalDamage$[ebp]
  0049d	6a 00		 push	 0
  0049f	ff 75 fc	 push	 DWORD PTR _iSkill$1$[ebp]
  004a2	0f b6 c0	 movzx	 eax, al
  004a5	50		 push	 eax
  004a6	ff 75 08	 push	 DWORD PTR _MSBFlag$1$[ebp]
  004a9	6a 00		 push	 0
  004ab	57		 push	 edi
  004ac	53		 push	 ebx
  004ad	56		 push	 esi
  004ae	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck
  004b3	83 c4 20	 add	 esp, 32			; 00000020H
$LN48@Attack:

; 426  : 	}
; 427  : 
; 428  : 	return TRUE;

  004b6	5b		 pop	 ebx
  004b7	5f		 pop	 edi
  004b8	b8 01 00 00 00	 mov	 eax, 1
  004bd	5e		 pop	 esi

; 429  : }

  004be	8b e5		 mov	 esp, ebp
  004c0	5d		 pop	 ebp
  004c1	c2 14 00	 ret	 20			; 00000014H
?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ENDP ; CWeapon::Attack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?WeaponAct@CWeapon@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?WeaponAct@CWeapon@@QAEXH@Z PROC			; CWeapon::WeaponAct, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 491  : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8d b1 4c 06 00
	00		 lea	 esi, DWORD PTR [ecx+1612]
  0000f	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
$LL4@WeaponAct:

; 492  : 	{
; 493  : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE )

  00014	83 7e 08 01	 cmp	 DWORD PTR [esi+8], 1
  00018	75 32		 jne	 SHORT $LN2@WeaponAct

; 494  : 		{
; 495  : 			if ( this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == iIndex )

  0001a	39 5e f8	 cmp	 DWORD PTR [esi-8], ebx
  0001d	75 2d		 jne	 SHORT $LN2@WeaponAct

; 496  : 			{
; 497  : 				if ( this->m_WeaponCalDamageInfo[i].m_iLimitTime < GetTickCount() )

  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00025	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  00028	73 22		 jae	 SHORT $LN2@WeaponAct
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 42   : 		this->m_iWeaponObjIndex = -1;

  0002a	c7 46 f8 ff ff
	ff ff		 mov	 DWORD PTR [esi-8], -1

; 43   : 		this->m_iTargetX = -1;

  00031	c7 46 fc ff ff
	ff ff		 mov	 DWORD PTR [esi-4], -1

; 44   : 		this->m_iTargetY = -1;

  00038	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 45   : 		this->m_iLimitTime = 0;

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 46   : 		this->m_IsUsed = FALSE;

  00045	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@WeaponAct:
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 491  : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  0004c	83 c6 14	 add	 esi, 20			; 00000014H
  0004f	83 ef 01	 sub	 edi, 1
  00052	75 c0		 jne	 SHORT $LL4@WeaponAct
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx

; 498  : 				{
; 499  : 					this->m_WeaponCalDamageInfo[i].RESET();
; 500  : 				}
; 501  : 			}
; 502  : 		}
; 503  : 	}
; 504  : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?WeaponAct@CWeapon@@QAEXH@Z ENDP			; CWeapon::WeaponAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?WeaponAttackProc@CWeapon@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv587 = -4						; size = 4
?WeaponAttackProc@CWeapon@@QAEXXZ PROC			; CWeapon::WeaponAttackProc, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b c1		 mov	 eax, ecx

; 455  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00009	bb 64 00 00 00	 mov	 ebx, 100		; 00000064H
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00013	8d 70 0c	 lea	 esi, DWORD PTR [eax+12]
  00016	89 5d fc	 mov	 DWORD PTR tv587[ebp], ebx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@WeaponAtta:

; 456  : 	{
; 457  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == TRUE )

  00020	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  00024	75 74		 jne	 SHORT $LN2@WeaponAtta

; 458  : 		{
; 459  : 			if ( this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime > GetTickCount() )

  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002c	39 06		 cmp	 DWORD PTR [esi], eax
  0002e	77 6a		 ja	 SHORT $LN2@WeaponAtta

; 460  : 			{
; 461  : 				continue;
; 462  : 			}
; 463  : 
; 464  : 			LPOBJ lpTargetObj = &gObj[this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex];

  00030	69 5e fc 40 27
	00 00		 imul	 ebx, DWORD PTR [esi-4], 10048

; 465  : 			LPOBJ lpWeaponObj = & gObj[this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex];

  00037	69 7e f8 40 27
	00 00		 imul	 edi, DWORD PTR [esi-8], 10048
  0003e	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00044	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 466  : 
; 467  : 			if ( gObjIsConnected(lpTargetObj) == FALSE )

  0004a	53		 push	 ebx
  0004b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00050	83 c4 04	 add	 esp, 4
  00053	85 c0		 test	 eax, eax
  00055	74 25		 je	 SHORT $LN22@WeaponAtta

; 468  : 			{
; 469  : 				this->m_WeaponDamagedTargetInfo[i].RESET();
; 470  : 				continue;
; 471  : 			}
; 472  : 
; 473  : 			if (  OBJMAX_RANGE(lpWeaponObj->m_Index) == FALSE )

  00057	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00059	85 c9		 test	 ecx, ecx
  0005b	78 1f		 js	 SHORT $LN22@WeaponAtta
  0005d	33 c0		 xor	 eax, eax
  0005f	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00065	0f 9e c0	 setle	 al
  00068	85 c0		 test	 eax, eax
  0006a	74 10		 je	 SHORT $LN22@WeaponAtta

; 474  : 			{
; 475  : 				this->m_WeaponDamagedTargetInfo[i].RESET();
; 476  : 				continue;
; 477  : 			}
; 478  : 
; 479  : 			this->Attack(lpWeaponObj, lpTargetObj, NULL, FALSE, 0);

  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006f	6a 00		 push	 0
  00071	6a 00		 push	 0
  00073	6a 00		 push	 0
  00075	53		 push	 ebx
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ?Attack@CWeapon@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HH@Z ; CWeapon::Attack
$LN22@WeaponAtta:
  0007c	8b 5d fc	 mov	 ebx, DWORD PTR tv587[ebp]
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 28   : 		this->m_IsUsed = FALSE;

  0007f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00086	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0008c	c7 46 fc ff ff
	ff ff		 mov	 DWORD PTR [esi-4], -1
  00093	c7 46 f8 ff ff
	ff ff		 mov	 DWORD PTR [esi-8], -1
$LN2@WeaponAtta:
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 455  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0009a	83 c6 10	 add	 esi, 16			; 00000010H
  0009d	83 eb 01	 sub	 ebx, 1
  000a0	89 5d fc	 mov	 DWORD PTR tv587[ebp], ebx
  000a3	0f 85 77 ff ff
	ff		 jne	 $LL4@WeaponAtta
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 480  : 
; 481  : 			this->m_WeaponDamagedTargetInfo[i].RESET();
; 482  : 		}
; 483  : 	}
; 484  : 
; 485  : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?WeaponAttackProc@CWeapon@@QAEXXZ ENDP			; CWeapon::WeaponAttackProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z
_TEXT	SEGMENT
_iWeaponIndex$ = 8					; size = 4
_iTargetIndex$ = 12					; size = 4
_iDelayTime$ = 16					; size = 4
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z PROC	; CWeapon::AddWeaponDamagedTargetInfo, COMDAT
; _this$ = ecx

; 434  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 435  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00003	33 c0		 xor	 eax, eax
  00005	8d 51 10	 lea	 edx, DWORD PTR [ecx+16]
$LL4@AddWeaponD:

; 436  : 	{
; 437  : 		if ( this->m_WeaponDamagedTargetInfo[i].m_IsUsed == FALSE )

  00008	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0000b	74 0f		 je	 SHORT $LN8@AddWeaponD

; 435  : 	for ( int i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  0000d	40		 inc	 eax
  0000e	83 c2 10	 add	 edx, 16			; 00000010H
  00011	83 f8 64	 cmp	 eax, 100		; 00000064H
  00014	7c f2		 jl	 SHORT $LL4@AddWeaponD

; 445  : 		}
; 446  : 	}
; 447  : 
; 448  : 	return FALSE;

  00016	33 c0		 xor	 eax, eax

; 449  : }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
$LN8@AddWeaponD:

; 438  : 		{
; 439  : 			this->m_WeaponDamagedTargetInfo[i].m_iWeaponObjIndex = iWeaponIndex;

  0001c	03 c0		 add	 eax, eax
  0001e	56		 push	 esi
  0001f	8d 34 c1	 lea	 esi, DWORD PTR [ecx+eax*8]
  00022	8b 45 08	 mov	 eax, DWORD PTR _iWeaponIndex$[ebp]
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 440  : 			this->m_WeaponDamagedTargetInfo[i].m_iTargetObjIndex = iTargetIndex;

  00028	8b 45 0c	 mov	 eax, DWORD PTR _iTargetIndex$[ebp]
  0002b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 441  : 			this->m_WeaponDamagedTargetInfo[i].m_iDamageDealingTime = GetTickCount() + iDelayTime;

  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00034	03 45 10	 add	 eax, DWORD PTR _iDelayTime$[ebp]
  00037	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 442  : 			this->m_WeaponDamagedTargetInfo[i].m_IsUsed = TRUE;
; 443  : 
; 444  : 			return TRUE;

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1
  00046	5e		 pop	 esi

; 449  : }

  00047	5d		 pop	 ebp
  00048	c2 0c 00	 ret	 12			; 0000000cH
?AddWeaponDamagedTargetInfo@CWeapon@@QAEHHHH@Z ENDP	; CWeapon::AddWeaponDamagedTargetInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z
_TEXT	SEGMENT
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 4
_btTargetY$ = 16					; size = 4
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z PROC	; CWeapon::GetWeaponCalDamageInfo, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 85   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00004	66 8b 75 08	 mov	 si, WORD PTR _wObjIndex$[ebp]
  00008	33 d2		 xor	 edx, edx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8d 87 44 06 00
	00		 lea	 eax, DWORD PTR [edi+1604]
$LL4@GetWeaponC:

; 86   : 	{
; 87   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == TRUE && this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex == wObjIndex)

  00013	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  00017	75 07		 jne	 SHORT $LN2@GetWeaponC
  00019	0f b7 ce	 movzx	 ecx, si
  0001c	39 08		 cmp	 DWORD PTR [eax], ecx
  0001e	74 11		 je	 SHORT $LN10@GetWeaponC
$LN2@GetWeaponC:

; 85   : 	for( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00020	42		 inc	 edx
  00021	83 c0 14	 add	 eax, 20			; 00000014H
  00024	83 fa 32	 cmp	 edx, 50			; 00000032H
  00027	7c ea		 jl	 SHORT $LL4@GetWeaponC

; 95   : 		}
; 96   : 	}
; 97   : 
; 98   : 	return FALSE;

  00029	5f		 pop	 edi
  0002a	33 c0		 xor	 eax, eax
  0002c	5e		 pop	 esi

; 99   : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
$LN10@GetWeaponC:

; 88   : 		{
; 89   : 			btTargetX = this->m_WeaponCalDamageInfo[i].m_iTargetX;

  00031	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  00034	0f b6 8c 87 48
	06 00 00	 movzx	 ecx, BYTE PTR [edi+eax*4+1608]
  0003c	8d 14 87	 lea	 edx, DWORD PTR [edi+eax*4]
  0003f	8b 45 0c	 mov	 eax, DWORD PTR _btTargetX$[ebp]
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	88 08		 mov	 BYTE PTR [eax], cl

; 90   : 			btTargetY = this->m_WeaponCalDamageInfo[i].m_iTargetY;

  00046	0f b6 8a 4c 06
	00 00		 movzx	 ecx, BYTE PTR [edx+1612]
  0004d	8b 45 10	 mov	 eax, DWORD PTR _btTargetY$[ebp]
  00050	88 08		 mov	 BYTE PTR [eax], cl

; 91   : 
; 92   : 			this->m_WeaponCalDamageInfo[i].RESET();
; 93   : 
; 94   : 			return TRUE;

  00052	b8 01 00 00 00	 mov	 eax, 1
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 42   : 		this->m_iWeaponObjIndex = -1;

  00057	c7 82 44 06 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+1604], -1

; 43   : 		this->m_iTargetX = -1;

  00061	c7 82 48 06 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+1608], -1

; 44   : 		this->m_iTargetY = -1;

  0006b	c7 82 4c 06 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+1612], -1

; 45   : 		this->m_iLimitTime = 0;

  00075	c7 82 50 06 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1616], 0

; 46   : 		this->m_IsUsed = FALSE;

  0007f	c7 82 54 06 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1620], 0
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 99   : }

  00089	5d		 pop	 ebp
  0008a	c2 0c 00	 ret	 12			; 0000000cH
?GetWeaponCalDamageInfo@CWeapon@@QAEHGAAE0@Z ENDP	; CWeapon::GetWeaponCalDamageInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z
_TEXT	SEGMENT
_wObjIndex$ = 8						; size = 2
_btTargetX$ = 12					; size = 1
_btTargetY$ = 16					; size = 1
_iDelayTime$ = 20					; size = 4
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z PROC	; CWeapon::SetWeaponCalDamageInfo, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 65   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00007	33 f6		 xor	 esi, esi
  00009	8d 83 54 06 00
	00		 lea	 eax, DWORD PTR [ebx+1620]
  0000f	90		 npad	 1
$LL4@SetWeaponC:

; 66   : 	{
; 67   : 		if ( this->m_WeaponCalDamageInfo[i].m_IsUsed == FALSE )

  00010	83 38 00	 cmp	 DWORD PTR [eax], 0
  00013	74 11		 je	 SHORT $LN8@SetWeaponC

; 65   : 	for ( int i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00015	46		 inc	 esi
  00016	83 c0 14	 add	 eax, 20			; 00000014H
  00019	83 fe 32	 cmp	 esi, 50			; 00000032H
  0001c	7c f2		 jl	 SHORT $LL4@SetWeaponC

; 76   : 		}
; 77   : 	}
; 78   : 
; 79   : 	return FALSE;

  0001e	5e		 pop	 esi
  0001f	33 c0		 xor	 eax, eax
  00021	5b		 pop	 ebx

; 80   : }

  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
$LN8@SetWeaponC:

; 68   : 		{
; 69   : 			this->m_WeaponCalDamageInfo[i].m_iWeaponObjIndex = wObjIndex;

  00026	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  00029	57		 push	 edi
  0002a	8d 3c 83	 lea	 edi, DWORD PTR [ebx+eax*4]
  0002d	0f b7 45 08	 movzx	 eax, WORD PTR _wObjIndex$[ebp]
  00031	89 87 44 06 00
	00		 mov	 DWORD PTR [edi+1604], eax

; 70   : 			this->m_WeaponCalDamageInfo[i].m_iTargetX = btTargetX;

  00037	0f b6 45 0c	 movzx	 eax, BYTE PTR _btTargetX$[ebp]
  0003b	89 87 48 06 00
	00		 mov	 DWORD PTR [edi+1608], eax

; 71   : 			this->m_WeaponCalDamageInfo[i].m_iTargetY = btTargetY;

  00041	0f b6 45 10	 movzx	 eax, BYTE PTR _btTargetY$[ebp]
  00045	89 87 4c 06 00
	00		 mov	 DWORD PTR [edi+1612], eax

; 72   : 			this->m_WeaponCalDamageInfo[i].m_iLimitTime = GetTickCount() + iDelayTime;

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00051	03 45 14	 add	 eax, DWORD PTR _iDelayTime$[ebp]
  00054	89 87 50 06 00
	00		 mov	 DWORD PTR [edi+1616], eax

; 73   : 			this->m_WeaponCalDamageInfo[i].m_IsUsed = TRUE;

  0005a	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0005d	5f		 pop	 edi
  0005e	c7 84 83 54 06
	00 00 01 00 00
	00		 mov	 DWORD PTR [ebx+eax*4+1620], 1

; 74   : 
; 75   : 			return TRUE;

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 80   : }

  00070	5d		 pop	 ebp
  00071	c2 10 00	 ret	 16			; 00000010H
?SetWeaponCalDamageInfo@CWeapon@@QAEHGEEH@Z ENDP	; CWeapon::SetWeaponCalDamageInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ??1CWeapon@@UAE@XZ
_TEXT	SEGMENT
??1CWeapon@@UAE@XZ PROC					; CWeapon::~CWeapon, COMDAT
; _this$ = ecx

; 58   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWeapon@@6B@

; 59   : 	return;
; 60   : }

  00006	c3		 ret	 0
??1CWeapon@@UAE@XZ ENDP					; CWeapon::~CWeapon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ??0CWeapon@@QAE@XZ
_TEXT	SEGMENT
??0CWeapon@@QAE@XZ PROC					; CWeapon::CWeapon, COMDAT
; _this$ = ecx

; 40   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CWeapon@@6B@
  0000e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
$LL4@CWeapon:
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 25   : 		this->m_iWeaponObjIndex = -1;

  00011	c7 40 f8 ff ff
	ff ff		 mov	 DWORD PTR [eax-8], -1
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 42   : 	for ( i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00018	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 26   : 		this->m_iTargetObjIndex = -1;

  0001b	c7 40 ec ff ff
	ff ff		 mov	 DWORD PTR [eax-20], -1

; 27   : 		this->m_iDamageDealingTime = 0;

  00022	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 28   : 		this->m_IsUsed = FALSE;

  00029	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 42   : 	for ( i=0;i<MAX_WEAPON_DAMAGED_TARGET_INFO;i++)

  00030	83 ea 01	 sub	 edx, 1
  00033	75 dc		 jne	 SHORT $LL4@CWeapon

; 47   : 	for ( i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00035	8d 86 4c 06 00
	00		 lea	 eax, DWORD PTR [esi+1612]
  0003b	8d 4a 32	 lea	 ecx, DWORD PTR [edx+50]
  0003e	66 90		 npad	 2
$LL7@CWeapon:
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 42   : 		this->m_iWeaponObjIndex = -1;

  00040	c7 40 f8 ff ff
	ff ff		 mov	 DWORD PTR [eax-8], -1
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 47   : 	for ( i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00047	8d 40 14	 lea	 eax, DWORD PTR [eax+20]
; File c:\users\michel\desktop\source\gameserver\source\weapon.h

; 43   : 		this->m_iTargetX = -1;

  0004a	c7 40 e8 ff ff
	ff ff		 mov	 DWORD PTR [eax-24], -1

; 44   : 		this->m_iTargetY = -1;

  00051	c7 40 ec ff ff
	ff ff		 mov	 DWORD PTR [eax-20], -1

; 45   : 		this->m_iLimitTime = 0;

  00058	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 46   : 		this->m_IsUsed = FALSE;

  0005f	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp

; 47   : 	for ( i=0;i<MAX_WEAPON_CAL_DAMAGER_INFO;i++)

  00066	83 e9 01	 sub	 ecx, 1
  00069	75 d5		 jne	 SHORT $LL7@CWeapon

; 48   : 	{
; 49   : 		this->m_WeaponCalDamageInfo[i].RESET();
; 50   : 	}
; 51   : }

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	c3		 ret	 0
??0CWeapon@@QAE@XZ ENDP					; CWeapon::CWeapon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
;	COMDAT ?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ
_TEXT	SEGMENT
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ PROC		; ST_WEAPON_CAL_DAMAGER_INFO::RESET, COMDAT
; _this$ = ecx

; 42   : 		this->m_iWeaponObjIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 43   : 		this->m_iTargetX = -1;

  00006	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 44   : 		this->m_iTargetY = -1;

  0000d	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 45   : 		this->m_iLimitTime = 0;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 46   : 		this->m_IsUsed = FALSE;

  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 47   : 	}

  00022	c3		 ret	 0
?RESET@ST_WEAPON_CAL_DAMAGER_INFO@@QAEXXZ ENDP		; ST_WEAPON_CAL_DAMAGER_INFO::RESET
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.h
;	COMDAT ?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ
_TEXT	SEGMENT
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ PROC	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET, COMDAT
; _this$ = ecx

; 25   : 		this->m_iWeaponObjIndex = -1;

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 26   : 		this->m_iTargetObjIndex = -1;

  00006	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 27   : 		this->m_iDamageDealingTime = 0;

  0000d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 28   : 		this->m_IsUsed = FALSE;

  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 29   : 	}

  0001b	c3		 ret	 0
?RESET@ST_WEAPON_DAMAGED_TARGET_INFO@@QAEXXZ ENDP	; ST_WEAPON_DAMAGED_TARGET_INFO::RESET
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildclass.h
;	COMDAT ?GetFriendlyFire@CGensSystem@@QAEHXZ
_TEXT	SEGMENT
?GetFriendlyFire@CGensSystem@@QAEHXZ PROC		; CGensSystem::GetFriendlyFire, COMDAT
; _this$ = ecx

; 276  : 	int GetFriendlyFire(){ return this->m_FriendlyFire; };

  00000	0f b6 41 38	 movzx	 eax, BYTE PTR [ecx+56]
  00004	c3		 ret	 0
?GetFriendlyFire@CGensSystem@@QAEHXZ ENDP		; CGensSystem::GetFriendlyFire
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\weapon.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 505  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
