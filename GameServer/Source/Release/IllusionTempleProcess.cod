; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\IllusionTempleProcess.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	?Reset@CIllusionTempleProcess@@QAEXH@Z		; CIllusionTempleProcess::Reset
PUBLIC	?UserInit@CIllusionTempleProcess@@QAEXH@Z	; CIllusionTempleProcess::UserInit
PUBLIC	?CheckSync@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::CheckSync
PUBLIC	?Run@CIllusionTempleProcess@@QAEXH@Z		; CIllusionTempleProcess::Run
PUBLIC	?ProcState_CLOSE@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_CLOSE
PUBLIC	?ProcState_PREPARE@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_PREPARE
PUBLIC	?ProcState_PLAY@CIllusionTempleProcess@@QAEXH@Z	; CIllusionTempleProcess::ProcState_PLAY
PUBLIC	?ProcState_PLAYEND@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_PLAYEND
PUBLIC	?SetState@CIllusionTempleProcess@@QAEXH@Z	; CIllusionTempleProcess::SetState
PUBLIC	?SetState_CLOSED@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SetState_CLOSED
PUBLIC	?SetState_PREPARE@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetState_PREPARE
PUBLIC	?SetState_PLAY@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SetState_PLAY
PUBLIC	?SetState_PLAYEND@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetState_PLAYEND
PUBLIC	?UserResetPoints@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::UserResetPoints
PUBLIC	?GetRemainTime@CIllusionTempleProcess@@QAEEXZ	; CIllusionTempleProcess::GetRemainTime
PUBLIC	?GetRemainTime2@CIllusionTempleProcess@@QAEEXZ	; CIllusionTempleProcess::GetRemainTime2
PUBLIC	?PickUpRelic@CIllusionTempleProcess@@QAEXHE@Z	; CIllusionTempleProcess::PickUpRelic
PUBLIC	?PickUpRelicSend@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::PickUpRelicSend
PUBLIC	?GetState@CIllusionTempleProcess@@QAEEXZ	; CIllusionTempleProcess::GetState
PUBLIC	?CheckUsers@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::CheckUsers
PUBLIC	?EnterUser@CIllusionTempleProcess@@QAEHHEE@Z	; CIllusionTempleProcess::EnterUser
PUBLIC	?SendState@CIllusionTempleProcess@@QAEXEH@Z	; CIllusionTempleProcess::SendState
PUBLIC	?ClickToStatus@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::ClickToStatus
PUBLIC	?ClickAlliedNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::ClickAlliedNpc
PUBLIC	?ClickIllusionNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::ClickIllusionNpc
PUBLIC	?GetEnterItem@CIllusionTempleProcess@@QAEHH@Z	; CIllusionTempleProcess::GetEnterItem
PUBLIC	?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::DeleteRelic
PUBLIC	?DropRelic@CIllusionTempleProcess@@QAEXH@Z	; CIllusionTempleProcess::DropRelic
PUBLIC	?AddNpc@CIllusionTempleProcess@@QAEXHH@Z	; CIllusionTempleProcess::AddNpc
PUBLIC	?AddMonster@CIllusionTempleProcess@@QAEXHH@Z	; CIllusionTempleProcess::AddMonster
PUBLIC	?ResetObject@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::ResetObject
PUBLIC	?AddPlayerKillCount@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddPlayerKillCount
PUBLIC	?AddMonsterKillCount@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddMonsterKillCount
PUBLIC	?AddUseSkillCnt@CIllusionTempleProcess@@QAEXH@Z	; CIllusionTempleProcess::AddUseSkillCnt
PUBLIC	?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z	; CIllusionTempleProcess::AddKillPts
PUBLIC	?GetKillPts@CIllusionTempleProcess@@QAEEH@Z	; CIllusionTempleProcess::GetKillPts
PUBLIC	?SetKillPts@CIllusionTempleProcess@@QAEHHE@Z	; CIllusionTempleProcess::SetKillPts
PUBLIC	?UseSkill@CIllusionTempleProcess@@QAEXHGHE@Z	; CIllusionTempleProcess::UseSkill
PUBLIC	?SkillProc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SkillProc
PUBLIC	?UserDie@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::UserDie
PUBLIC	?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SetProtect
PUBLIC	?SetImobilize@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::SetImobilize
PUBLIC	?SetTeleport@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SetTeleport
PUBLIC	?SetShield@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::SetShield
PUBLIC	?ItemDrop@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::ItemDrop
PUBLIC	?DropReward@CIllusionTempleProcess@@QAEXH@Z	; CIllusionTempleProcess::DropReward
PUBLIC	?GetLeftTime@CIllusionTempleProcess@@QAEEXZ	; CIllusionTempleProcess::GetLeftTime
PUBLIC	?Is1stSkillActive@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::Is1stSkillActive
PUBLIC	?Is2ndSkillActive@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::Is2ndSkillActive
PUBLIC	?GetTeam@CIllusionTempleProcess@@QAEEH@Z	; CIllusionTempleProcess::GetTeam
PUBLIC	?LeaveUser@CIllusionTempleProcess@@QAEHH@Z	; CIllusionTempleProcess::LeaveUser
PUBLIC	?MonsterRegen@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::MonsterRegen
PUBLIC	?SendAllUserAnyMsg@CIllusionTempleProcess@@QAEXPAEH@Z ; CIllusionTempleProcess::SendAllUserAnyMsg
PUBLIC	?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z	; CIllusionTempleProcess::OperateMiniMap
PUBLIC	?RegetStatue@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::RegetStatue
PUBLIC	?CalcWinRewardExp@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CalcWinRewardExp
PUBLIC	?SendRewardExp@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SendRewardExp
PUBLIC	?LevelUp@CIllusionTempleProcess@@QAEHHH@Z	; CIllusionTempleProcess::LevelUp
PUBLIC	?SpawnStatue@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SpawnStatue
PUBLIC	?SpawnTeamNpc@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SpawnTeamNpc
PUBLIC	?SpawnMonster@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SpawnMonster
PUBLIC	?SetStatueTime@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::SetStatueTime
PUBLIC	?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
PUBLIC	?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z ; CIllusionTempleProcess::GCSendUseSkill
PUBLIC	?RemoveEventInfo@CIllusionTempleProcess@@QAEXXZ	; CIllusionTempleProcess::RemoveEventInfo
PUBLIC	?AddSuccessRelic@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddSuccessRelic
PUBLIC	?GetRelicPos@CIllusionTempleProcess@@QAEHH@Z	; CIllusionTempleProcess::GetRelicPos
PUBLIC	?ChangeTempleUserInformation@CIllusionTempleProcess@@QAEHHHH@Z ; CIllusionTempleProcess::ChangeTempleUserInformation
PUBLIC	?GetSkillPoint@CIllusionTempleProcess@@QAEEH@Z	; CIllusionTempleProcess::GetSkillPoint
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@ ; `string'
PUBLIC	??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0CM@GMBNLABJ@Error?5?3?5Illusion?5Temple?5StartTim@ ; `string'
PUBLIC	??_C@_0DG@NJOPLNIL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Sync?5Open@ ; `string'
PUBLIC	??_C@_0ED@OJGCKKPO@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@ ; `string'
PUBLIC	??_C@_0EI@LKEJODBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@ ; `string'
PUBLIC	??_C@_0EH@FBNKCLFD@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Failed?5to@ ; `string'
PUBLIC	??_C@_0CF@JIFCGMEK@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLAlliedTe@ ; `string'
PUBLIC	??_C@_0CI@JGHENCNJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLIllusion@ ; `string'
PUBLIC	??_C@_0DG@NEAACFEP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Cre@ ; `string'
PUBLIC	??_C@_0DD@OHOGJPCE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Add@ ; `string'
PUBLIC	??_C@_09MJCPIION@?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ ; `string'
PUBLIC	??_C@_0GG@JOEGADPL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Allied?5Te@ ; `string'
PUBLIC	??_C@_0GI@CGKCOMHN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Illusion?5@ ; `string'
PUBLIC	??_C@_0CG@IGMLEOMK@Enter?5Error?3?5IllusionTempleIndex@ ; `string'
PUBLIC	??_C@_0CL@PJKIAECJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5LeaveUser@ ; `string'
PUBLIC	??_C@_0DN@KNCFCJAC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0EM@NAJEPMDL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@ ; `string'
PUBLIC	??_C@_0EO@HGHKGJCL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@ ; `string'
PUBLIC	??_C@_0EC@KBKIJFJA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@ ; `string'
PUBLIC	??_C@_04BGCMBJDA@Item?$AA@			; `string'
PUBLIC	??_C@_0EA@DBPKHFEA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@ ; `string'
PUBLIC	??_C@_0DP@FKJKOPFE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@ ; `string'
PUBLIC	??_C@_0CI@HGNLGIPA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Statu@ ; `string'
PUBLIC	??_C@_0EI@FFEIEJHB@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@ ; `string'
PUBLIC	??_C@_0DB@DDAFNEAA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Allie@ ; `string'
PUBLIC	??_C@_0EK@PBPNIPFI@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@ ; `string'
PUBLIC	??_C@_0DD@CJHIKDCG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Illus@ ; `string'
PUBLIC	??_C@_0CJ@ILDHLMNE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Monst@ ; `string'
PUBLIC	??_C@_0DK@GOBHOKIP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveSta@ ; `string'
PUBLIC	??_C@_0ED@JCDEDHOA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveAll@ ; `string'
PUBLIC	??_C@_0EF@COBKKPEE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveIll@ ; `string'
PUBLIC	??_C@_0CJ@NGMJKIGG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Remove?5Al@ ; `string'
PUBLIC	??_C@_0DN@NHMDPHGH@?$FLIllusion?5Temple?$FN?5RegenStatue?5Fa@ ; `string'
PUBLIC	??_C@_0FD@FFJHAHAN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RegenStat@ ; `string'
PUBLIC	??_C@_0DM@DBHFAIH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@ ; `string'
PUBLIC	??_C@_0DG@DAAGPJBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@ ; `string'
PUBLIC	??_C@_0DM@JLNJCFEN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Result?5?$CIW@ ; `string'
PUBLIC	??_C@_0DA@OJELECPN@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@ ; `string'
PUBLIC	??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@ ; `string'
PUBLIC	??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@ ; `string'
PUBLIC	??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ ; `string'
PUBLIC	??_C@_0JI@DILJDNAH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RewardExp@ ; `string'
PUBLIC	__real@3f800000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_rand:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	?CheckKillCount@CMagicDamage@@QAEHHH@Z:PROC	; CMagicDamage::CheckKillCount
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z:PROC ; CJewelOfHarmonySystem::GetItemStrengthenOption
EXTRN	?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z:PROC ; CJewelOfHarmonySystem::GetItemOptionLevel
EXTRN	?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z:PROC ; CSocketItems::GetItemOptions
EXTRN	?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEPAEE@Z:PROC ; MapClass::ItemDrop
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCLevelUpMsgSend@@YAXHH@Z:PROC			; GCLevelUpMsgSend
EXTRN	?CGPartyListAll@@YAXH@Z:PROC			; CGPartyListAll
EXTRN	?CGPartyDelUser@@YAXPAUPMSG_PARTYDELUSER@@H@Z:PROC ; CGPartyDelUser
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?GCIllusionSendPoint@@YAXHE@Z:PROC		; GCIllusionSendPoint
EXTRN	?GCSendExp@@YAXHH_JHH@Z:PROC			; GCSendExp
EXTRN	?gObjSetBP@@YAXH@Z:PROC				; gObjSetBP
EXTRN	?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z:PROC	; ItemIsBufExOption
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjNextExpCal@@YAXPAUOBJECTSTRUCT@@@Z:PROC	; gObjNextExpCal
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	?gObjInventoryDeleteItem@@YAEHH@Z:PROC		; gObjInventoryDeleteItem
EXTRN	?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolCreate
EXTRN	?gObjTeleportMagicUse@@YAXHEE@Z:PROC		; gObjTeleportMagicUse
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObjCheckTeleportArea@@YAHHEE@Z:PROC		; gObjCheckTeleportArea
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?gObjSetExpPetItem@@YAXHH@Z:PROC		; gObjSetExpPetItem
EXTRN	?gCheckSkillDistance@@YAHHHH@Z:PROC		; gCheckSkillDistance
EXTRN	?OpenState@CIllusionTempleProcess@@QAEHXZ:PROC	; CIllusionTempleProcess::OpenState
EXTRN	?Create@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::Create
EXTRN	?Add@PartyClass@@QAEHHHHH@Z:PROC		; PartyClass::Add
EXTRN	?GetPartyCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetPartyCount
EXTRN	?GetIndex@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::GetIndex
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; CheckItemOptForGetExpEx
EXTRN	?LevelUp@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@_J@Z:PROC ; CMasterExperience::LevelUp
EXTRN	?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterExperience::IsEnabled
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z:PROC ; ClassCalc::GetLevelPoint
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	_memset:PROC
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A:BYTE ; g_kJewelOfHarmonySystem
EXTRN	?g_SocketItem@@3VCSocketItems@@A:BYTE		; g_SocketItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A:QWORD ; m_IllusionStartTime
EXTRN	?m_iIT_TIME_MIN_OPEN@@3HA:DWORD			; m_iIT_TIME_MIN_OPEN
EXTRN	?m_iIT_TIME_MIN_PREPARE@@3HA:DWORD		; m_iIT_TIME_MIN_PREPARE
EXTRN	?m_iIT_TIME_MIN_PLAY@@3HA:DWORD			; m_iIT_TIME_MIN_PLAY
EXTRN	?m_iIT_TIME_MIN_CLOSE@@3HA:DWORD		; m_iIT_TIME_MIN_CLOSE
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?DCInfo@@3Vclassdef@@A:BYTE			; DCInfo
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_IllusionRewardPerc@@3HA:DWORD		; g_IllusionRewardPerc
EXTRN	?g_IllusionUseSkillCnt@@3HA:DWORD		; g_IllusionUseSkillCnt
EXTRN	?g_MasterExp@@3VCMasterExperience@@A:BYTE	; g_MasterExp
EXTRN	?g_ClassCalc@@3VClassCalc@@A:BYTE		; g_ClassCalc
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0JI@DILJDNAH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RewardExp@
CONST	SEGMENT
??_C@_0JI@DILJDNAH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RewardExp@ DB '['
	DB	'Illusion Temple] (%d) RewardExp Result  (Account:%s, Name:%s,'
	DB	' Team:%d, Class:%d, UserKillCount:%d, RelicsMoveCount:%d, Rew'
	DB	'ardExp:%d, RankingPoint: %d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
CONST	SEGMENT
??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ DB ',(%s)(%s) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@
CONST	SEGMENT
??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@ DB '4'
	DB	'00 LevelUp (%s)(%s) Party ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@
CONST	SEGMENT
??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@ DB '['
	DB	'%s][%s] LevelUp PlusStatQuest Clear AddStat %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OJELECPN@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@
CONST	SEGMENT
??_C@_0DA@OJELECPN@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@ DB 'E'
	DB	'xperience : Map[%d]-(%d,%d) [%s][%s](%d) %u %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JLNJCFEN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Result?5?$CIW@
CONST	SEGMENT
??_C@_0DM@JLNJCFEN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Result?5?$CIW@ DB '['
	DB	'Illusion Temple] (%d) Result (WinTeam: %d)(Score:[%d][%d])', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DAAGPJBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@
CONST	SEGMENT
??_C@_0DG@DAAGPJBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@ DB '['
	DB	'Illusion Temple] (%d) Use Skill (%d), (%s)(%s), (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@DBHFAIH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@
CONST	SEGMENT
??_C@_0DM@DBHFAIH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@ DB '['
	DB	'Illusion Temple] (%d) Use Skill KillCount Error (Skill:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@FFJHAHAN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RegenStat@
CONST	SEGMENT
??_C@_0FD@FFJHAHAN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RegenStat@ DB '['
	DB	'Illusion Temple] (%d) RegenStatus Name: %s, (%d: %d/%d), PosN'
	DB	'um(%d), connected:%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@NHMDPHGH@?$FLIllusion?5Temple?$FN?5RegenStatue?5Fa@
CONST	SEGMENT
??_C@_0DN@NHMDPHGH@?$FLIllusion?5Temple?$FN?5RegenStatue?5Fa@ DB '[Illusi'
	DB	'on Temple] RegenStatue Failed m_STATUE_NPC_COUNT <= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGMJKIGG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Remove?5Al@
CONST	SEGMENT
??_C@_0CJ@NGMJKIGG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Remove?5Al@ DB '['
	DB	'Illusion Temple] (%d) Remove All Object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@COBKKPEE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveIll@
CONST	SEGMENT
??_C@_0EF@COBKKPEE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveIll@ DB '['
	DB	'Illusion Temple] (%d) RemoveIllusionRelicsBox Name: %s, (%d: '
	DB	'%d/%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@JCDEDHOA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveAll@
CONST	SEGMENT
??_C@_0ED@JCDEDHOA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveAll@ DB '['
	DB	'Illusion Temple] (%d) RemoveAlliedRelicsBox Name: %s, (%d: %d'
	DB	'/%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@GOBHOKIP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveSta@
CONST	SEGMENT
??_C@_0DK@GOBHOKIP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveSta@ DB '['
	DB	'Illusion Temple] (%d) RemoveStatus Name: %s, (%d: %d/%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ILDHLMNE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Monst@
CONST	SEGMENT
??_C@_0CJ@ILDHLMNE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Monst@ DB '['
	DB	'Illusion Temple] (%d) Add Monster Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CJHIKDCG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Illus@
CONST	SEGMENT
??_C@_0DD@CJHIKDCG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Illus@ DB '['
	DB	'Illusion Temple] (%d) Add IllusionRelicsBox Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@PBPNIPFI@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@
CONST	SEGMENT
??_C@_0EK@PBPNIPFI@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@ DB '['
	DB	'Illusion Temple] (%d) Create NPC IllusionRelicsBox Name: %s, '
	DB	'(%d: %d/%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DDAFNEAA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Allie@
CONST	SEGMENT
??_C@_0DB@DDAFNEAA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Allie@ DB '['
	DB	'Illusion Temple] (%d) Add AlliedRelicsBox Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@FFEIEJHB@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@
CONST	SEGMENT
??_C@_0EI@FFEIEJHB@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@ DB '['
	DB	'Illusion Temple] (%d) Create NPC AlliedRelicsBox Name: %s, (%'
	DB	'd: %d/%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HGNLGIPA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Statu@
CONST	SEGMENT
??_C@_0CI@HGNLGIPA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Statu@ DB '['
	DB	'Illusion Temple] (%d) Add Statue Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@FKJKOPFE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@
CONST	SEGMENT
??_C@_0DP@FKJKOPFE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@ DB '['
	DB	'Illusion Temple] (%d) Create NPC Statue Name: %s, (%d: %d/%d)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@DBPKHFEA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@
CONST	SEGMENT
??_C@_0EA@DBPKHFEA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@ DB '['
	DB	'Illusion Temple] (%d) (%s)(%s) to Drop Relics Item [Serial:%u'
	DB	']', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGCMBJDA@Item?$AA@
CONST	SEGMENT
??_C@_04BGCMBJDA@Item?$AA@ DB 'Item', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@KBKIJFJA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@
CONST	SEGMENT
??_C@_0EC@KBKIJFJA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@ DB '['
	DB	'Illusion Temple] (%d) (%s)(%s) to Delete Relics Item [Serial:'
	DB	'%u]', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@HGHKGJCL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@
CONST	SEGMENT
??_C@_0EO@HGHKGJCL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@ DB '['
	DB	'Illusion Temple] (%d) Increase IllusionTeam Relics Point: (%s'
	DB	')(%s)(Score:%d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@NAJEPMDL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@
CONST	SEGMENT
??_C@_0EM@NAJEPMDL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@ DB '['
	DB	'Illusion Temple] (%d) Increase AlliedTeam Relics Point: (%s)('
	DB	'%s)(Score:%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@KNCFCJAC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0DN@KNCFCJAC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	'Illusion Temple] (%d) [%s][%s] Click To Status (X:%d, Y:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PJKIAECJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5LeaveUser@
CONST	SEGMENT
??_C@_0CL@PJKIAECJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5LeaveUser@ DB '['
	DB	'Illusion Temple] (%d) LeaveUser: (%s)(%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IGMLEOMK@Enter?5Error?3?5IllusionTempleIndex@
CONST	SEGMENT
??_C@_0CG@IGMLEOMK@Enter?5Error?3?5IllusionTempleIndex@ DB 'Enter Error: '
	DB	'IllusionTempleIndex Fail', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@CGKCOMHN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Illusion?5@
CONST	SEGMENT
??_C@_0GI@CGKCOMHN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Illusion?5@ DB '['
	DB	'Illusion Temple] (%d) Illusion Team CLASS_DW(%d),CLASS_DK(%d)'
	DB	', CLASS_FE(%d),CLASS_MG(%d), CLASS_DL(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GG@JOEGADPL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Allied?5Te@
CONST	SEGMENT
??_C@_0GG@JOEGADPL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Allied?5Te@ DB '['
	DB	'Illusion Temple] (%d) Allied Team CLASS_DW(%d),CLASS_DK(%d), '
	DB	'CLASS_FE(%d),CLASS_MG(%d), CLASS_DL(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MJCPIION@?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
CONST	SEGMENT
??_C@_09MJCPIION@?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@ DB '(%s)(%s) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OHOGJPCE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Add@
CONST	SEGMENT
??_C@_0DD@OHOGJPCE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Add@ DB '['
	DB	'Illusion Temple] (%d) Party Add Error, (Team: %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NEAACFEP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Cre@
CONST	SEGMENT
??_C@_0DG@NEAACFEP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Cre@ DB '['
	DB	'Illusion Temple] (%d) Party Create Error, (Team: %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JGHENCNJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLIllusion@
CONST	SEGMENT
??_C@_0CI@JGHENCNJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLIllusion@ DB '['
	DB	'Illusion Temple] (%d) [IllusiondTeam] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JIFCGMEK@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLAlliedTe@
CONST	SEGMENT
??_C@_0CF@JIFCGMEK@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLAlliedTe@ DB '['
	DB	'Illusion Temple] (%d) [AlliedTeam] ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@FBNKCLFD@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Failed?5to@
CONST	SEGMENT
??_C@_0EH@FBNKCLFD@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Failed?5to@ DB '['
	DB	'Illusion Temple] (%d) Failed to Start Illusion Temple (UserCo'
	DB	'unt: %d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@LKEJODBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@
CONST	SEGMENT
??_C@_0EI@LKEJODBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@ DB '['
	DB	'Illusion Temple] (%d) Payback to User Failed (%s)(%s) Scroll '
	DB	'Not Found', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@OJGCKKPO@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@
CONST	SEGMENT
??_C@_0ED@OJGCKKPO@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@ DB '['
	DB	'Illusion Temple] (%d) Payback to User (%s)(%s) Ticket (Serial'
	DB	':%u)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJOPLNIL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Sync?5Open@
CONST	SEGMENT
??_C@_0DG@NJOPLNIL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Sync?5Open@ DB '['
	DB	'Illusion Temple] (%d) Sync Open Time. [%d]min remain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GMBNLABJ@Error?5?3?5Illusion?5Temple?5StartTim@
CONST	SEGMENT
??_C@_0CM@GMBNLABJ@Error?5?3?5Illusion?5Temple?5StartTim@ DB 'Error : Ill'
	DB	'usion Temple StartTime size is 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@ DB 'return %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
CONST	SEGMENT
??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@ DB 'IllusionTempleProce'
	DB	'ss.cpp', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?IT_REWARD_A@@3PAHA DD 0493e0H				; IT_REWARD_A
	DD	053020H
	DD	05cc60H
	DD	0668a0H
	DD	0704e0H
	DD	07a120H
?IT_REWARD_B@@3PAHA DD 0c350H				; IT_REWARD_B
	DD	0ea60H
	DD	011170H
	DD	013880H
	DD	015f90H
	DD	0186a0H
?IT_REWARD_C@@3PAHA DD 0258H				; IT_REWARD_C
	DD	04b0H
	DD	0708H
	DD	0960H
	DD	0bb8H
	DD	0e10H
?IT_REWARD_D@@3PAHA DD 04b0H				; IT_REWARD_D
	DD	0960H
	DD	0e10H
	DD	012c0H
	DD	01770H
	DD	01c20H
?IT_REWARD_E@@3PAHA DD 0aH				; IT_REWARD_E
	DD	014H
	DD	01eH
	DD	028H
	DD	032H
	DD	03cH
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 376  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 377  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 373  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBEAAUILLUSION_TIME@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBEAAUILLUSION_TIME@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBEAAUILLUSION_TIME@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx

; 343  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 344  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 338  : 		{	// construct with null node
; 339  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 300  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 301  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 301  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 302  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 297  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 241  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 242  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBEABUILLUSION_TIME@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBEABUILLUSION_TIME@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QBEABUILLUSION_TIME@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 188  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 183  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 40   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?size@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QBEIXZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::size, COMDAT
; _this$ = ecx

; 1239 : 		return (this->_Mysize());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1240 : 		}

  00003	c3		 ret	 0
?size@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QBEIXZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?end@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::end, COMDAT
; _this$ = ecx

; 1127 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?begin@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::begin, COMDAT
; _this$ = ecx

; 1115 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mylist::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		_Ptr = _Mylist::_Nextnode(_Ptr);
; 61   : 		return (*this);
; 62   : 		}
; 63   : 
; 64   : 	_Myiter operator++(int)
; 65   : 		{	// postincrement
; 66   : 		_Myiter _Tmp = *this;
; 67   : 		++*this;
; 68   : 		return (_Tmp);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter& operator--()
; 72   : 		{	// predecrement
; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);
; 74   : 		return (*this);
; 75   : 		}
; 76   : 
; 77   : 	_Myiter operator--(int)
; 78   : 		{	// postdecrement
; 79   : 		_Myiter _Tmp = *this;
; 80   : 		--*this;
; 81   : 		return (_Tmp);
; 82   : 		}
; 83   : 
; 84   : 	bool operator==(const _Myiter& _Right) const
; 85   : 		{	// test for iterator equality
; 86   : 		return (_Ptr == _Right._Ptr);
; 87   : 		}
; 88   : 
; 89   : 	bool operator!=(const _Myiter& _Right) const
; 90   : 		{	// test for iterator inequality
; 91   : 		return (!(*this == _Right));
; 92   : 		}
; 93   : 
; 94   : 	_Nodeptr _Mynode() const
; 95   : 		{	// return node pointer
; 96   : 		return (_Ptr);
; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Myval, COMDAT

; 540  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 542  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Nextnode, COMDAT

; 530  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 532  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABIXZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Mysize, COMDAT
; _this$ = ecx

; 797  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 798  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABIXZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Myhead, COMDAT
; _this$ = ecx

; 782  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 783  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 777  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 778  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 772  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 773  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Nextnode, COMDAT

; 580  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 582  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetSkillPoint@CIllusionTempleProcess@@QAEEH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetSkillPoint@CIllusionTempleProcess@@QAEEH@Z PROC	; CIllusionTempleProcess::GetSkillPoint, COMDAT
; _this$ = ecx

; 2674 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2675 : 	if( !OBJMAX_RANGE(nIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 41		 js	 SHORT $LN7@GetSkillPo
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 32		 je	 SHORT $LN7@GetSkillPo

; 2679 : 	}
; 2680 : 
; 2681 : 	if( gObj[nIndex].iTempleIndex != -1 &&
; 2682 : 		this->m_PlayerData[gObj[nIndex].iTempleIndex].m_Index == nIndex &&

  0001c	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00022	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 33		 je	 SHORT $LN3@GetSkillPo
  00033	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00036	c1 e0 04	 shl	 eax, 4
  00039	39 54 30 20	 cmp	 DWORD PTR [eax+esi+32], edx
  0003d	75 27		 jne	 SHORT $LN3@GetSkillPo
  0003f	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00043	7e 21		 jle	 SHORT $LN3@GetSkillPo

; 2683 : 		gObj[nIndex].Connected > PLAYER_LOGGED )
; 2684 : 	{
; 2685 : 		return this->m_PlayerData[gObj[nIndex].iTempleIndex].m_SkillPts;

  00045	8a 44 30 25	 mov	 al, BYTE PTR [eax+esi+37]
  00049	5e		 pop	 esi

; 2686 : 	}
; 2687 : 	return 0;
; 2688 : }

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN7@GetSkillPo:

; 2676 : 	{
; 2677 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0004e	68 75 0a 00 00	 push	 2677			; 00000a75H
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GetSkillPo:

; 2678 : 		return 0;

  00066	32 c0		 xor	 al, al
  00068	5e		 pop	 esi

; 2686 : 	}
; 2687 : 	return 0;
; 2688 : }

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?GetSkillPoint@CIllusionTempleProcess@@QAEEH@Z ENDP	; CIllusionTempleProcess::GetSkillPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ChangeTempleUserInformation@CIllusionTempleProcess@@QAEHHHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iIllusionTempleIndex$ = 12				; size = 4
_iCurIndex$ = 16					; size = 4
?ChangeTempleUserInformation@CIllusionTempleProcess@@QAEHHHH@Z PROC ; CIllusionTempleProcess::ChangeTempleUserInformation, COMDAT
; _this$ = ecx

; 2659 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 2660 : 	EnterCriticalSection(&this->m_CritSec);

  00007	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0000a	57		 push	 edi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 2661 : 
; 2662 : 	if( this->m_PlayerData[iIllusionTempleIndex].m_Index == iUserIndex )

  00011	8b 45 0c	 mov	 eax, DWORD PTR _iIllusionTempleIndex$[ebp]

; 2665 : 		LeaveCriticalSection(&this->m_CritSec);

  00014	57		 push	 edi
  00015	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00018	03 c9		 add	 ecx, ecx
  0001a	8b 44 ce 20	 mov	 eax, DWORD PTR [esi+ecx*8+32]
  0001e	3b 45 08	 cmp	 eax, DWORD PTR _iUserIndex$[ebp]
  00021	75 18		 jne	 SHORT $LN2@ChangeTemp

; 2663 : 	{
; 2664 : 		this->m_PlayerData[iIllusionTempleIndex].m_Index = iCurIndex;

  00023	8b 45 10	 mov	 eax, DWORD PTR _iCurIndex$[ebp]
  00026	89 44 ce 20	 mov	 DWORD PTR [esi+ecx*8+32], eax

; 2665 : 		LeaveCriticalSection(&this->m_CritSec);

  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00030	5f		 pop	 edi

; 2666 : 		return true;

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	5e		 pop	 esi

; 2671 : }

  00037	5d		 pop	 ebp
  00038	c2 0c 00	 ret	 12			; 0000000cH
$LN2@ChangeTemp:

; 2667 : 	}
; 2668 : 
; 2669 : 	LeaveCriticalSection(&this->m_CritSec);

  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00041	5f		 pop	 edi

; 2670 : 	return false;

  00042	33 c0		 xor	 eax, eax
  00044	5e		 pop	 esi

; 2671 : }

  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?ChangeTempleUserInformation@CIllusionTempleProcess@@QAEHHHH@Z ENDP ; CIllusionTempleProcess::ChangeTempleUserInformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetRelicPos@CIllusionTempleProcess@@QAEHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?GetRelicPos@CIllusionTempleProcess@@QAEHH@Z PROC	; CIllusionTempleProcess::GetRelicPos, COMDAT
; _this$ = ecx

; 1132 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1133 : 	if( OBJMAX_RANGE(aIndex) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 74		 js	 SHORT $LN15@GetRelicPo
  0000a	33 c0		 xor	 eax, eax
  0000c	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 65		 je	 SHORT $LN15@GetRelicPo

; 1137 : 	}
; 1138 : 
; 1139 : 	for(int i = 0; i < INVENTORY_SIZE; i++)

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048
  00022	33 ff		 xor	 edi, edi
  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	33 f6		 xor	 esi, esi
  0002c	0f 1f 40 00	 npad	 4
$LL4@GetRelicPo:

; 1140 : 	{
; 1141 : 		if( gObj[aIndex].pInventory[i].IsItem() == TRUE &&

  00030	8b 8c 0b c0 11
	00 00		 mov	 ecx, DWORD PTR [ebx+ecx+4544]
  00037	03 ce		 add	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00044	83 f8 01	 cmp	 eax, 1
  00047	75 13		 jne	 SHORT $LN2@GetRelicPo
  00049	8b 84 0b c0 11
	00 00		 mov	 eax, DWORD PTR [ebx+ecx+4544]
  00050	ba 40 1c 00 00	 mov	 edx, 7232		; 00001c40H
  00055	66 39 54 30 06	 cmp	 WORD PTR [eax+esi+6], dx
  0005a	74 19		 je	 SHORT $LN11@GetRelicPo
$LN2@GetRelicPo:

; 1137 : 	}
; 1138 : 
; 1139 : 	for(int i = 0; i < INVENTORY_SIZE; i++)

  0005c	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00062	47		 inc	 edi
  00063	81 fe 44 c4 00
	00		 cmp	 esi, 50244		; 0000c444H
  00069	7c c5		 jl	 SHORT $LL4@GetRelicPo

; 1145 : 		}
; 1146 : 	}
; 1147 : return -1;

  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	83 c8 ff	 or	 eax, -1
  00070	5b		 pop	 ebx

; 1148 : }

  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN11@GetRelicPo:

; 1142 : 			gObj[aIndex].pInventory[i].m_Type == ITEMGET(14,64) )
; 1143 : 		{
; 1144 : 			return i;

  00075	8b c7		 mov	 eax, edi
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 1148 : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN15@GetRelicPo:

; 1134 : 	{
; 1135 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0007e	68 6f 04 00 00	 push	 1135			; 0000046fH
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1136 : 		return -1;

  00096	83 c8 ff	 or	 eax, -1

; 1148 : }

  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
?GetRelicPos@CIllusionTempleProcess@@QAEHH@Z ENDP	; CIllusionTempleProcess::GetRelicPos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddSuccessRelic@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddSuccessRelic@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::AddSuccessRelic, COMDAT
; _this$ = ecx

; 1818 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1819 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 4e		 js	 SHORT $LN9@AddSuccess
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 3f		 je	 SHORT $LN9@AddSuccess

; 1822 : 		return;
; 1823 : 	}
; 1824 : 
; 1825 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001c	56		 push	 esi
  0001d	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00023	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	74 21		 je	 SHORT $LN10@AddSuccess
  00034	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00037	c1 e0 04	 shl	 eax, 4
  0003a	39 54 38 20	 cmp	 DWORD PTR [eax+edi+32], edx
  0003e	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00041	74 06		 je	 SHORT $LN4@AddSuccess
  00043	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00047	7e 0c		 jle	 SHORT $LN10@AddSuccess
$LN4@AddSuccess:

; 1826 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1827 : 	{
; 1828 : 		if( m_PlayerData[gObj[iIndex].iTempleIndex].m_RelicSuccess >= 255 )

  00049	8a 41 32	 mov	 al, BYTE PTR [ecx+50]
  0004c	3c ff		 cmp	 al, 255			; 000000ffH
  0004e	73 05		 jae	 SHORT $LN10@AddSuccess

; 1829 : 		{
; 1830 : 			return;
; 1831 : 		}
; 1832 : 
; 1833 : 		m_PlayerData[gObj[iIndex].iTempleIndex].m_RelicSuccess++;

  00050	fe c0		 inc	 al
  00052	88 41 32	 mov	 BYTE PTR [ecx+50], al
$LN10@AddSuccess:
  00055	5e		 pop	 esi
  00056	5f		 pop	 edi

; 1834 : 	}
; 1835 : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN9@AddSuccess:

; 1820 : 	{
; 1821 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0005b	68 1d 07 00 00	 push	 1821			; 0000071dH
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	5f		 pop	 edi

; 1834 : 	}
; 1835 : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?AddSuccessRelic@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::AddSuccessRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?RemoveEventInfo@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?RemoveEventInfo@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::RemoveEventInfo, COMDAT
; _this$ = ecx

; 1481 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1482 : 	int i;
; 1483 : 	for(i = 0; i < m_STATUE_NPC_COUNT; i++)

  00004	33 db		 xor	 ebx, ebx
  00006	57		 push	 edi
  00007	39 9e c0 03 00
	00		 cmp	 DWORD PTR [esi+960], ebx
  0000d	7e 65		 jle	 SHORT $LN3@RemoveEven
  0000f	8d be 30 02 00
	00		 lea	 edi, DWORD PTR [esi+560]
$LL4@RemoveEven:

; 1484 : 	{
; 1485 : 		if( m_STATUE_NPC[i].m_Index != -1 )

  00015	8b 07		 mov	 eax, DWORD PTR [edi]
  00017	83 f8 ff	 cmp	 eax, -1
  0001a	74 4c		 je	 SHORT $LN2@RemoveEven

; 1486 : 		{
; 1487 : 			LogAddTD("[Illusion Temple] (%d) RemoveStatus Name: %s, (%d: %d/%d)",

  0001c	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00022	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0002f	50		 push	 eax
  00030	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00037	50		 push	 eax
  00038	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0003f	50		 push	 eax
  00040	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00043	50		 push	 eax
  00044	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0004b	40		 inc	 eax
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@GOBHOKIP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveSta@
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1488 : 				Temple+1,gObj[m_STATUE_NPC[i].m_Index].Name,gObj[m_STATUE_NPC[i].m_Index].MapNumber,
; 1489 : 				gObj[m_STATUE_NPC[i].m_Index].X,gObj[m_STATUE_NPC[i].m_Index].Y);
; 1490 : 
; 1491 : 			gObjDel(m_STATUE_NPC[i].m_Index);

  00058	ff 37		 push	 DWORD PTR [edi]
  0005a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0005f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1492 : 			m_STATUE_NPC[i].m_Index = -1;

  00062	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1
$LN2@RemoveEven:

; 1482 : 	int i;
; 1483 : 	for(i = 0; i < m_STATUE_NPC_COUNT; i++)

  00068	43		 inc	 ebx
  00069	83 c7 08	 add	 edi, 8
  0006c	3b 9e c0 03 00
	00		 cmp	 ebx, DWORD PTR [esi+960]
  00072	7c a1		 jl	 SHORT $LL4@RemoveEven
$LN3@RemoveEven:

; 1493 : 		}
; 1494 : 	}
; 1495 : 
; 1496 : 	if( m_ALLIED_NPC.m_Index != -1 )

  00074	8b 86 40 02 00
	00		 mov	 eax, DWORD PTR [esi+576]
  0007a	83 f8 ff	 cmp	 eax, -1
  0007d	74 54		 je	 SHORT $LN9@RemoveEven

; 1497 : 	{
; 1498 : 		LogAddTD("[Illusion Temple] (%d) RemoveAlliedRelicsBox Name: %s, (%d: %d/%d)",

  0007f	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00085	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008b	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00092	50		 push	 eax
  00093	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  0009a	50		 push	 eax
  0009b	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  000a2	50		 push	 eax
  000a3	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000a6	50		 push	 eax
  000a7	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000ae	40		 inc	 eax
  000af	50		 push	 eax
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@JCDEDHOA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveAll@
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1499 : 			Temple+1,gObj[m_ALLIED_NPC.m_Index].Name,gObj[m_ALLIED_NPC.m_Index].MapNumber,
; 1500 : 			gObj[m_ALLIED_NPC.m_Index].X,gObj[m_ALLIED_NPC.m_Index].Y);
; 1501 : 		gObjDel(m_ALLIED_NPC.m_Index);

  000bb	ff b6 40 02 00
	00		 push	 DWORD PTR [esi+576]
  000c1	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  000c6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1502 : 		m_ALLIED_NPC.m_Index = -1;

  000c9	c7 86 40 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+576], -1
$LN9@RemoveEven:

; 1503 : 	}
; 1504 : 
; 1505 : 	if( m_ILLUSION_NPC.m_Index != -1 )

  000d3	8b 86 48 02 00
	00		 mov	 eax, DWORD PTR [esi+584]
  000d9	83 f8 ff	 cmp	 eax, -1
  000dc	74 54		 je	 SHORT $LN10@RemoveEven

; 1506 : 	{
; 1507 : 		LogAddTD("[Illusion Temple] (%d) RemoveIllusionRelicsBox Name: %s, (%d: %d/%d)",

  000de	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  000e4	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ea	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000f1	50		 push	 eax
  000f2	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  000f9	50		 push	 eax
  000fa	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  00101	50		 push	 eax
  00102	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00105	50		 push	 eax
  00106	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0010d	40		 inc	 eax
  0010e	50		 push	 eax
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@COBKKPEE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RemoveIll@
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1508 : 			Temple+1,gObj[m_ILLUSION_NPC.m_Index].Name,gObj[m_ILLUSION_NPC.m_Index].MapNumber,
; 1509 : 			gObj[m_ILLUSION_NPC.m_Index].X,gObj[m_ILLUSION_NPC.m_Index].Y);
; 1510 : 		gObjDel(m_ILLUSION_NPC.m_Index);

  0011a	ff b6 48 02 00
	00		 push	 DWORD PTR [esi+584]
  00120	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00125	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1511 : 		m_ILLUSION_NPC.m_Index = -1;

  00128	c7 86 48 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+584], -1
$LN10@RemoveEven:

; 1512 : 	}
; 1513 : 
; 1514 : 	for(i = 0; i < m_NPC_COUNT; i++)

  00132	33 db		 xor	 ebx, ebx
  00134	39 9e c4 03 00
	00		 cmp	 DWORD PTR [esi+964], ebx
  0013a	7e 28		 jle	 SHORT $LN6@RemoveEven
  0013c	8d be 50 02 00
	00		 lea	 edi, DWORD PTR [esi+592]
$LL7@RemoveEven:

; 1515 : 	{
; 1516 : 		if( m_MONSTER_NPC[i].m_Index != -1 )

  00142	8b 07		 mov	 eax, DWORD PTR [edi]
  00144	83 f8 ff	 cmp	 eax, -1
  00147	74 0f		 je	 SHORT $LN5@RemoveEven

; 1517 : 		{
; 1518 : 			gObjDel(m_MONSTER_NPC[i].m_Index);

  00149	50		 push	 eax
  0014a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0014f	83 c4 04	 add	 esp, 4

; 1519 : 			m_MONSTER_NPC[i].m_Index = -1;

  00152	c7 07 ff ff ff
	ff		 mov	 DWORD PTR [edi], -1
$LN5@RemoveEven:

; 1512 : 	}
; 1513 : 
; 1514 : 	for(i = 0; i < m_NPC_COUNT; i++)

  00158	43		 inc	 ebx
  00159	83 c7 08	 add	 edi, 8
  0015c	3b 9e c4 03 00
	00		 cmp	 ebx, DWORD PTR [esi+964]
  00162	7c de		 jl	 SHORT $LL7@RemoveEven
$LN6@RemoveEven:

; 1520 : 		}
; 1521 : 	}
; 1522 : 
; 1523 : 	LogAddTD("[Illusion Temple] (%d) Remove All Object",Temple+1);

  00164	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0016b	40		 inc	 eax
  0016c	50		 push	 eax
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@NGMJKIGG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Remove?5Al@
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00178	83 c4 08	 add	 esp, 8
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx

; 1524 : }

  0017e	c3		 ret	 0
?RemoveEventInfo@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::RemoveEventInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_iTargetIndex$ = 12					; size = 4
_skill$ = 16						; size = 2
_bSuccess$ = 20						; size = 4
?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z PROC	; CIllusionTempleProcess::GCSendUseSkill, COMDAT
; _this$ = ecx

; 2153 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]

; 2154 : 	PMSG_ILLUSIONTEMPLE_USESKILL pMsg;
; 2155 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,0x02,sizeof(pMsg));

  00015	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	6a 0c		 push	 12			; 0000000cH
  0001a	6a 02		 push	 2
  0001c	68 bf 00 00 00	 push	 191			; 000000bfH
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 2156 : 	pMsg.result = bSuccess;
; 2157 : 	pMsg.MagicH = SET_NUMBERH(skill);

  00027	8b 4d 10	 mov	 ecx, DWORD PTR _skill$[ebp]
  0002a	8b c1		 mov	 eax, ecx
  0002c	8b 5d 14	 mov	 ebx, DWORD PTR _bSuccess$[ebp]
  0002f	c1 e8 08	 shr	 eax, 8
  00032	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 2158 : 	pMsg.MagicL = SET_NUMBERL(skill);
; 2159 : 	pMsg.Index = iIndex;
; 2160 : 	pMsg.TargetIndex = iTargetIndex;

  00035	66 8b 45 0c	 mov	 ax, WORD PTR _iTargetIndex$[ebp]
  00039	66 89 45 fa	 mov	 WORD PTR _pMsg$[ebp+10], ax

; 2161 : 
; 2162 : 	DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);

  0003d	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00041	50		 push	 eax
  00042	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00045	88 5d f4	 mov	 BYTE PTR _pMsg$[ebp+4], bl
  00048	50		 push	 eax
  00049	56		 push	 esi
  0004a	88 4d f6	 mov	 BYTE PTR _pMsg$[ebp+6], cl
  0004d	66 89 75 f8	 mov	 WORD PTR _pMsg$[ebp+8], si
  00051	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00056	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2163 : 	if( bSuccess == TRUE )

  00059	83 fb 01	 cmp	 ebx, 1
  0005c	75 1e		 jne	 SHORT $LN2@GCSendUseS

; 2164 : 	{
; 2165 : 		MsgSendV2(&gObj[iIndex],(LPBYTE)&pMsg,pMsg.h.size);

  0005e	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00062	50		 push	 eax
  00063	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00066	50		 push	 eax
  00067	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  0006d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@GCSendUseS:

; 2166 : 	}
; 2167 : }

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007f	5e		 pop	 esi
  00080	33 cd		 xor	 ecx, ebp
  00082	5b		 pop	 ebx
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 10 00	 ret	 16			; 00000010H
?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z ENDP	; CIllusionTempleProcess::GCSendUseSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 8
_lpObj$ = 8						; size = 4
_skill$ = 12						; size = 4
?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z PROC ; CIllusionTempleProcess::GCSendUseSkill, COMDAT
; _this$ = ecx

; 2029 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 2030 : 	PMSG_ILLUSIONTEMPLE_USESKILLEND pMsg;
; 2031 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,0x07,sizeof(pMsg));

  00007	6a 08		 push	 8
  00009	6a 07		 push	 7
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000e	68 bf 00 00 00	 push	 191			; 000000bfH
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 2032 : 
; 2033 : 	pMsg.MagicH = SET_NUMBERH(skill);

  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _skill$[ebp]
  0001c	8b c1		 mov	 eax, ecx

; 2034 : 	pMsg.MagicL = SET_NUMBERL(skill);
; 2035 : 	pMsg.Index = lpObj->m_Index;

  0001e	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00021	c1 e8 08	 shr	 eax, 8
  00024	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  00027	88 4d fd	 mov	 BYTE PTR _pMsg$[ebp+5], cl
  0002a	66 8b 06	 mov	 ax, WORD PTR [esi]
  0002d	66 89 45 fe	 mov	 WORD PTR _pMsg$[ebp+6], ax

; 2036 : 
; 2037 : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00031	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00035	50		 push	 eax
  00036	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00039	50		 push	 eax
  0003a	ff 36		 push	 DWORD PTR [esi]
  0003c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 2038 : 	MsgSendV2(lpObj,(LPBYTE)&pMsg,pMsg.h.size);

  00041	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00045	50		 push	 eax
  00046	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  00050	83 c4 28	 add	 esp, 40			; 00000028H
  00053	5e		 pop	 esi

; 2039 : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ENDP ; CIllusionTempleProcess::GCSendUseSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetStatueTime@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SetStatueTime@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SetStatueTime, COMDAT
; _this$ = ecx

; 1527 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1528 : 	iNPC_TICK_COUNT = GetTickCount() + 5000;

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	05 88 13 00 00	 add	 eax, 5000		; 00001388H
  0000e	89 86 94 03 00
	00		 mov	 DWORD PTR [esi+916], eax
  00014	5e		 pop	 esi

; 1529 : }

  00015	c3		 ret	 0
?SetStatueTime@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SetStatueTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SpawnMonster@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
tv297 = -8						; size = 4
_result$1$ = -4						; size = 4
?SpawnMonster@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SpawnMonster, COMDAT
; _this$ = ecx

; 1452 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1453 : 	for(int i = 0; i < m_NPC_COUNT; i++)

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 9e c4 03 00
	00		 cmp	 DWORD PTR [esi+964], ebx
  00012	0f 8e e3 00 00
	00		 jle	 $LN3@SpawnMonst
  00018	57		 push	 edi
  00019	8d be 54 02 00
	00		 lea	 edi, DWORD PTR [esi+596]
  0001f	89 7d f8	 mov	 DWORD PTR tv297[ebp], edi
$LL4@SpawnMonst:

; 1454 : 	{
; 1455 : 		int result = gObjAddMonster(Temple+MAP_INDEX_ILLUSIONTEMPLE1);

  00022	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00029	83 c0 2d	 add	 eax, 45			; 0000002dH
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00032	0f bf c8	 movsx	 ecx, ax
  00035	83 c4 04	 add	 esp, 4
  00038	89 4d fc	 mov	 DWORD PTR _result$1$[ebp], ecx

; 1456 : 
; 1457 : 		if( result >= 0 )

  0003b	85 c9		 test	 ecx, ecx
  0003d	0f 88 8d 00 00
	00		 js	 $LN5@SpawnMonst

; 1458 : 		{
; 1459 : 			gObjSetPosMonster(result,m_MONSTER_NPC[i].m_Num);

  00043	0f bf 07	 movsx	 eax, WORD PTR [edi]
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 1460 : 			gObjSetMonster(result,gMSetBase.m_Mp[m_MONSTER_NPC[i].m_Num].m_Type);

  0004d	0f bf 07	 movsx	 eax, WORD PTR [edi]
  00050	8b 7d fc	 mov	 edi, DWORD PTR _result$1$[ebp]
  00053	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00056	0f b7 04 85 06
	00 00 00	 movzx	 eax, WORD PTR ?gMSetBase@@3VCMonsterSetBase@@A[eax*4+6]
  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1461 : 
; 1462 : 			gObj[result].Dir = 1;

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1463 : 			gObj[result].m_PosNum = (short)-1;

  0006a	83 c9 ff	 or	 ecx, -1
  0006d	69 ff 40 27 00
	00		 imul	 edi, edi, 10048
  00073	83 c4 10	 add	 esp, 16			; 00000010H
  00076	c6 84 07 22 01
	00 00 01	 mov	 BYTE PTR [edi+eax+290], 1
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00083	66 89 8c 07 98
	05 00 00	 mov	 WORD PTR [edi+eax+1432], cx

; 1464 : 			gObj[result].Live = 0;

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00090	c6 44 07 51 00	 mov	 BYTE PTR [edi+eax+81], 0

; 1465 : 			gObj[result].DieRegen = 0;

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	c6 84 07 8a 05
	00 00 00	 mov	 BYTE PTR [edi+eax+1418], 0

; 1466 : 			gObj[result].m_State = 4;

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a7	c7 84 07 d0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR [edi+eax+464], 4

; 1467 : 			gObj[result].RegenTime = GetTickCount();

  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000be	89 84 0f 90 05
	00 00		 mov	 DWORD PTR [edi+ecx+1424], eax

; 1468 : 
; 1469 : 			m_MONSTER_NPC[i].m_Index = result;

  000c5	8b 7d f8	 mov	 edi, DWORD PTR tv297[ebp]
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _result$1$[ebp]
  000cb	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 1470 : 
; 1471 : 
; 1472 : 		}
; 1473 : 		else

  000ce	eb 17		 jmp	 SHORT $LN2@SpawnMonst
$LN5@SpawnMonst:

; 1474 : 		{
; 1475 : 			LogAddTD("[Illusion Temple] (%d) Add Monster Error",Temple+1);

  000d0	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000d7	40		 inc	 eax
  000d8	50		 push	 eax
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@ILDHLMNE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Monst@
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e4	83 c4 08	 add	 esp, 8
$LN2@SpawnMonst:

; 1453 : 	for(int i = 0; i < m_NPC_COUNT; i++)

  000e7	43		 inc	 ebx
  000e8	83 c7 08	 add	 edi, 8
  000eb	89 7d f8	 mov	 DWORD PTR tv297[ebp], edi
  000ee	3b 9e c4 03 00
	00		 cmp	 ebx, DWORD PTR [esi+964]
  000f4	0f 8c 28 ff ff
	ff		 jl	 $LL4@SpawnMonst
  000fa	5f		 pop	 edi
$LN3@SpawnMonst:
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx

; 1476 : 		}
; 1477 : 	}
; 1478 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
?SpawnMonster@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SpawnMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SpawnTeamNpc@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SpawnTeamNpc@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SpawnTeamNpc, COMDAT
; _this$ = ecx

; 1401 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 1402 : 	int result = gObjAddMonster(Temple+MAP_INDEX_ILLUSIONTEMPLE1);

  00005	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0000c	83 c0 2d	 add	 eax, 45			; 0000002dH
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00015	0f bf f8	 movsx	 edi, ax
  00018	83 c4 04	 add	 esp, 4

; 1403 : 
; 1404 : 	if( result >= 0 )

  0001b	83 cb ff	 or	 ebx, -1
  0001e	85 ff		 test	 edi, edi
  00020	0f 88 a1 00 00
	00		 js	 $LN2@SpawnTeamN

; 1405 : 	{
; 1406 : 		gObjSetPosMonster(result,m_ALLIED_NPC.m_Num);

  00026	0f bf 86 44 02
	00 00		 movsx	 eax, WORD PTR [esi+580]
  0002d	50		 push	 eax
  0002e	57		 push	 edi
  0002f	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 1407 : 		gObjSetMonster(result,383);

  00034	68 7f 01 00 00	 push	 383			; 0000017fH
  00039	57		 push	 edi
  0003a	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1408 : 
; 1409 : 		gObj[result].Dir = 1;

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00044	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  0004a	c6 84 01 22 01
	00 00 01	 mov	 BYTE PTR [ecx+eax+290], 1

; 1410 : 		gObj[result].m_PosNum = (short)-1;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	66 89 9c 01 98
	05 00 00	 mov	 WORD PTR [ecx+eax+1432], bx

; 1411 : 		gObj[result].Live = TRUE;

  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00064	c6 44 01 51 01	 mov	 BYTE PTR [ecx+eax+81], 1

; 1412 : 		gObj[result].DieRegen = FALSE;

  00069	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	c6 84 01 8a 05
	00 00 00	 mov	 BYTE PTR [ecx+eax+1418], 0

; 1413 : 		gObj[result].m_State = 1;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007b	c7 84 01 d0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+464], 1

; 1414 : 
; 1415 : 		m_ALLIED_NPC.m_Index = result;

  00086	89 be 40 02 00
	00		 mov	 DWORD PTR [esi+576], edi

; 1416 : 
; 1417 : 
; 1418 : 		LogAddTD("[Illusion Temple] (%d) Create NPC AlliedRelicsBox Name: %s, (%d: %d/%d)",

  0008c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00092	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00099	50		 push	 eax
  0009a	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  000a1	50		 push	 eax
  000a2	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  000a9	50		 push	 eax
  000aa	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000ad	50		 push	 eax
  000ae	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000b5	40		 inc	 eax
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@FFEIEJHB@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c2	83 c4 28	 add	 esp, 40			; 00000028H

; 1419 : 			Temple+1,gObj[result].Name,gObj[result].MapNumber,gObj[result].X,gObj[result].Y);
; 1420 : 	}
; 1421 : 	else

  000c5	eb 17		 jmp	 SHORT $LN3@SpawnTeamN
$LN2@SpawnTeamN:

; 1422 : 	{
; 1423 : 		LogAddTD("[Illusion Temple] (%d) Add AlliedRelicsBox Error",Temple+1);

  000c7	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000ce	40		 inc	 eax
  000cf	50		 push	 eax
  000d0	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@DDAFNEAA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Allie@
  000d5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000db	83 c4 08	 add	 esp, 8
$LN3@SpawnTeamN:

; 1424 : 	}
; 1425 : 
; 1426 : 	result = gObjAddMonster(Temple+MAP_INDEX_ILLUSIONTEMPLE1);

  000de	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000e5	83 c0 2d	 add	 eax, 45			; 0000002dH
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  000ee	0f bf f8	 movsx	 edi, ax
  000f1	83 c4 04	 add	 esp, 4

; 1427 : 
; 1428 : 	if( result >= 0 )

  000f4	85 ff		 test	 edi, edi
  000f6	0f 88 a3 00 00
	00		 js	 $LN4@SpawnTeamN

; 1429 : 	{
; 1430 : 		gObjSetPosMonster(result,m_ILLUSION_NPC.m_Num);

  000fc	0f bf 86 4c 02
	00 00		 movsx	 eax, WORD PTR [esi+588]
  00103	50		 push	 eax
  00104	57		 push	 edi
  00105	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 1431 : 		gObjSetMonster(result,384);

  0010a	68 80 01 00 00	 push	 384			; 00000180H
  0010f	57		 push	 edi
  00110	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1432 : 
; 1433 : 		gObj[result].Dir = 1;

  00115	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011a	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00120	c6 84 01 22 01
	00 00 01	 mov	 BYTE PTR [ecx+eax+290], 1

; 1434 : 		gObj[result].m_PosNum = (short)-1;

  00128	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0012d	66 89 9c 01 98
	05 00 00	 mov	 WORD PTR [ecx+eax+1432], bx

; 1435 : 		gObj[result].Live = TRUE;

  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013a	c6 44 01 51 01	 mov	 BYTE PTR [ecx+eax+81], 1

; 1436 : 		gObj[result].DieRegen = FALSE;

  0013f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00144	c6 84 01 8a 05
	00 00 00	 mov	 BYTE PTR [ecx+eax+1418], 0

; 1437 : 		gObj[result].m_State = 1;

  0014c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00151	c7 84 01 d0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+464], 1

; 1438 : 
; 1439 : 		m_ILLUSION_NPC.m_Index = result;

  0015c	89 be 48 02 00
	00		 mov	 DWORD PTR [esi+584], edi

; 1440 : 
; 1441 : 
; 1442 : 		LogAddTD("[Illusion Temple] (%d) Create NPC IllusionRelicsBox Name: %s, (%d: %d/%d)",

  00162	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00168	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0016f	50		 push	 eax
  00170	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00177	50		 push	 eax
  00178	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0017f	50		 push	 eax
  00180	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00183	50		 push	 eax
  00184	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0018b	40		 inc	 eax
  0018c	50		 push	 eax
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@PBPNIPFI@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00198	83 c4 28	 add	 esp, 40			; 00000028H
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx

; 1448 : 	}
; 1449 : }

  0019e	c3		 ret	 0
$LN4@SpawnTeamN:

; 1443 : 			Temple+1,gObj[result].Name,gObj[result].MapNumber,gObj[result].X,gObj[result].Y);
; 1444 : 	}
; 1445 : 	else
; 1446 : 	{
; 1447 : 		LogAddTD("[Illusion Temple] (%d) Add IllusionRelicsBox Error",Temple+1);

  0019f	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  001a6	40		 inc	 eax
  001a7	50		 push	 eax
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@CJHIKDCG@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Illus@
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b3	83 c4 08	 add	 esp, 8
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	5b		 pop	 ebx

; 1448 : 	}
; 1449 : }

  001b9	c3		 ret	 0
?SpawnTeamNpc@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SpawnTeamNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SpawnStatue@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
_result$1$ = -8						; size = 4
tv314 = -4						; size = 4
?SpawnStatue@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SpawnStatue, COMDAT
; _this$ = ecx

; 1372 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1373 : 	for(int i = 0; i < m_STATUE_NPC_COUNT; i++)

  0000a	33 db		 xor	 ebx, ebx
  0000c	39 9e c0 03 00
	00		 cmp	 DWORD PTR [esi+960], ebx
  00012	0f 8e 0a 01 00
	00		 jle	 $LN3@SpawnStatu
  00018	57		 push	 edi
  00019	8d be 30 02 00
	00		 lea	 edi, DWORD PTR [esi+560]
  0001f	89 7d fc	 mov	 DWORD PTR tv314[ebp], edi
$LL4@SpawnStatu:

; 1374 : 	{
; 1375 : 		int result = gObjAddMonster(Temple+ MAP_INDEX_ILLUSIONTEMPLE1);

  00022	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00029	83 c0 2d	 add	 eax, 45			; 0000002dH
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00032	0f bf c8	 movsx	 ecx, ax
  00035	83 c4 04	 add	 esp, 4
  00038	89 4d f8	 mov	 DWORD PTR _result$1$[ebp], ecx

; 1376 : 
; 1377 : 		if( result >= 0 )

  0003b	85 c9		 test	 ecx, ecx
  0003d	0f 88 b4 00 00
	00		 js	 $LN5@SpawnStatu

; 1378 : 		{
; 1379 : 			gObjSetPosMonster(result,m_STATUE_NPC[i].m_Num);

  00043	0f bf 47 04	 movsx	 eax, WORD PTR [edi+4]
  00047	50		 push	 eax
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 1380 : 			gObjSetMonster(result,380);

  0004e	8b 7d f8	 mov	 edi, DWORD PTR _result$1$[ebp]
  00051	68 7c 01 00 00	 push	 380			; 0000017cH
  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1381 : 
; 1382 : 			gObj[result].m_PosNum = (WORD)-1;

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00061	83 c9 ff	 or	 ecx, -1
  00064	69 ff 40 27 00
	00		 imul	 edi, edi, 10048
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	66 89 8c 07 98
	05 00 00	 mov	 WORD PTR [edi+eax+1432], cx

; 1383 : 			gObj[result].Live = FALSE;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007a	c6 44 07 51 00	 mov	 BYTE PTR [edi+eax+81], 0

; 1384 : 			gObj[result].DieRegen = 2;

  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00084	c6 84 07 8a 05
	00 00 02	 mov	 BYTE PTR [edi+eax+1418], 2

; 1385 : 			gObj[result].m_State = 4;

  0008c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00091	c7 84 07 d0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR [edi+eax+464], 4

; 1386 : 			gObj[result].RegenTime = GetTickCount();

  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a8	89 84 0f 90 05
	00 00		 mov	 DWORD PTR [edi+ecx+1424], eax

; 1387 : 
; 1388 : 			m_STATUE_NPC[i].m_Index = result;

  000af	8b 45 fc	 mov	 eax, DWORD PTR tv314[ebp]
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _result$1$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx

; 1389 : 
; 1390 : 			LogAddTD("[Illusion Temple] (%d) Create NPC Statue Name: %s, (%d: %d/%d)",

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000bd	03 cf		 add	 ecx, edi
  000bf	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000c6	50		 push	 eax
  000c7	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  000ce	50		 push	 eax
  000cf	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  000d6	50		 push	 eax
  000d7	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000da	50		 push	 eax
  000db	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000e2	40		 inc	 eax
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@FKJKOPFE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Create?5NP@
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1391 : 				Temple+1,gObj[result].Name,gObj[result].MapNumber,gObj[result].X,gObj[result].Y);
; 1392 : 		}
; 1393 : 		else

  000ef	8b 7d fc	 mov	 edi, DWORD PTR tv314[ebp]
  000f2	83 c4 18	 add	 esp, 24			; 00000018H
  000f5	eb 17		 jmp	 SHORT $LN2@SpawnStatu
$LN5@SpawnStatu:

; 1394 : 		{
; 1395 : 			LogAddTD("[Illusion Temple] (%d) Add Statue Error",Temple+1);

  000f7	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000fe	40		 inc	 eax
  000ff	50		 push	 eax
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@HGNLGIPA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Add?5Statu@
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0010b	83 c4 08	 add	 esp, 8
$LN2@SpawnStatu:

; 1373 : 	for(int i = 0; i < m_STATUE_NPC_COUNT; i++)

  0010e	43		 inc	 ebx
  0010f	83 c7 08	 add	 edi, 8
  00112	89 7d fc	 mov	 DWORD PTR tv314[ebp], edi
  00115	3b 9e c0 03 00
	00		 cmp	 ebx, DWORD PTR [esi+960]
  0011b	0f 8c 01 ff ff
	ff		 jl	 $LL4@SpawnStatu
  00121	5f		 pop	 edi
$LN3@SpawnStatu:
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx

; 1396 : 		}
; 1397 : 	}
; 1398 : }

  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
?SpawnStatue@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SpawnStatue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?LevelUp@CIllusionTempleProcess@@QAEHHH@Z
_TEXT	SEGMENT
_iLEFT_EXP$1$ = -264					; size = 4
_szTmp$1 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_iUserIndex$ = 8					; size = 4
_iAddExp$ = 12						; size = 4
?LevelUp@CIllusionTempleProcess@@QAEHHH@Z PROC		; CIllusionTempleProcess::LevelUp, COMDAT
; _this$ = ecx

; 2447 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 08	 mov	 esi, DWORD PTR _iUserIndex$[ebp]

; 2448 : 	if ( !OBJMAX_RANGE(iUserIndex ) )

  00017	85 f6		 test	 esi, esi
  00019	0f 88 5b 03 00
	00		 js	 $LN20@LevelUp
  0001f	33 c0		 xor	 eax, eax
  00021	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00027	0f 9e c0	 setle	 al
  0002a	85 c0		 test	 eax, eax
  0002c	0f 84 48 03 00
	00		 je	 $LN20@LevelUp

; 2449 : 		return 0;
; 2450 : 
; 2451 : 	if( g_MasterExp.LevelUp(&gObj[iUserIndex],iAddExp) )

  00032	53		 push	 ebx
  00033	8b 5d 0c	 mov	 ebx, DWORD PTR _iAddExp$[ebp]
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  0003b	57		 push	 edi
  0003c	8b c3		 mov	 eax, ebx
  0003e	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  00044	99		 cdq
  00045	52		 push	 edx
  00046	50		 push	 eax
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004c	03 c7		 add	 eax, edi
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?LevelUp@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@_J@Z ; CMasterExperience::LevelUp
  00054	85 c0		 test	 eax, eax
  00056	0f 85 86 00 00
	00		 jne	 $LN26@LevelUp

; 2452 : 	{
; 2453 : 		return FALSE;
; 2454 : 	}
; 2455 : 
; 2456 : 	gObjSetExpPetItem(iUserIndex, iAddExp);

  0005c	53		 push	 ebx
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ?gObjSetExpPetItem@@YAXHH@Z ; gObjSetExpPetItem

; 2457 : 	int iLEFT_EXP = 0;
; 2458 : 
; 2459 : 	LogAddTD("Experience : Map[%d]-(%d,%d) [%s][%s](%d) %u %d",

  00063	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00069	33 f6		 xor	 esi, esi
  0006b	53		 push	 ebx
  0006c	ff b4 0f a0 00
	00 00		 push	 DWORD PTR [edi+ecx+160]
  00073	0f bf 84 0f 96
	00 00 00	 movsx	 eax, WORD PTR [edi+ecx+150]
  0007b	50		 push	 eax
  0007c	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0007f	03 c7		 add	 eax, edi
  00081	50		 push	 eax
  00082	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00085	03 c7		 add	 eax, edi
  00087	50		 push	 eax
  00088	0f b6 84 0f 21
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+289]
  00090	50		 push	 eax
  00091	0f b6 84 0f 20
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+288]
  00099	50		 push	 eax
  0009a	0f b6 84 0f 23
	01 00 00	 movzx	 eax, BYTE PTR [edi+ecx+291]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@OJELECPN@Experience?5?3?5Map?$FL?$CFd?$FN?9?$CI?$CFd?0?$CFd?$CJ?5?$FL?$CFs@
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2460 : 		gObj[iUserIndex].MapNumber, gObj[iUserIndex].X, gObj[iUserIndex].Y,
; 2461 : 		gObj[iUserIndex].AccountID, gObj[iUserIndex].Name,
; 2462 : 		gObj[iUserIndex].Level, gObj[iUserIndex].Experience, iAddExp);
; 2463 : 
; 2464 : 	if ( gObj[iUserIndex].Level >= MAX_CHAR_LEVEL )

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b3	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000b8	83 c4 2c	 add	 esp, 44			; 0000002cH
  000bb	66 39 8c 07 96
	00 00 00	 cmp	 WORD PTR [edi+eax+150], cx
  000c3	7c 32		 jl	 SHORT $LN7@LevelUp

; 2465 : 	{
; 2466 : 		GCServerMsgStringSend(lMsg.Get(MSGGET(4, 112)), gObj[iUserIndex].m_Index, 1);

  000c5	6a 01		 push	 1
  000c7	ff 34 07	 push	 DWORD PTR [edi+eax]
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000cf	68 70 04 00 00	 push	 1136			; 00000470H
  000d4	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  000df	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN26@LevelUp:

; 2467 : 		return 0;

  000e2	5f		 pop	 edi
  000e3	5b		 pop	 ebx
  000e4	33 c0		 xor	 eax, eax
  000e6	5e		 pop	 esi

; 2549 : }

  000e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ea	33 cd		 xor	 ecx, ebp
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 08 00	 ret	 8
$LN7@LevelUp:

; 2468 : 	}
; 2469 : 
; 2470 : 	if ( (gObj[iUserIndex].Experience + iAddExp) < gObj[iUserIndex].NextExp )

  000f7	8b 8c 07 a0 00
	00 00		 mov	 ecx, DWORD PTR [edi+eax+160]
  000fe	8b 94 07 a4 00
	00 00		 mov	 edx, DWORD PTR [edi+eax+164]
  00105	03 cb		 add	 ecx, ebx
  00107	3b ca		 cmp	 ecx, edx
  00109	73 1c		 jae	 SHORT $LN8@LevelUp

; 2471 : 	{
; 2472 : 		gObj[iUserIndex].Experience += iAddExp;

  0010b	89 8c 07 a0 00
	00 00		 mov	 DWORD PTR [edi+eax+160], ecx

; 2545 : 		}
; 2546 : 	}
; 2547 : 
; 2548 : 	return iLEFT_EXP;

  00112	8b c6		 mov	 eax, esi
  00114	5f		 pop	 edi
  00115	5b		 pop	 ebx
  00116	5e		 pop	 esi

; 2549 : }

  00117	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011a	33 cd		 xor	 ecx, ebp
  0011c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 08 00	 ret	 8
$LN8@LevelUp:

; 2473 : 	}
; 2474 : 	else
; 2475 : 	{
; 2476 : 		iLEFT_EXP = gObj[iUserIndex].Experience + iAddExp - gObj[iUserIndex].NextExp;

  00127	8b 8c 07 a0 00
	00 00		 mov	 ecx, DWORD PTR [edi+eax+160]

; 2477 : 		gObj[iUserIndex].Experience = gObj[iUserIndex].NextExp;

  0012e	89 94 07 a0 00
	00 00		 mov	 DWORD PTR [edi+eax+160], edx
  00135	2b ca		 sub	 ecx, edx

; 2478 : 		gObj[iUserIndex].Level++;

  00137	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013c	03 cb		 add	 ecx, ebx

; 2479 : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 2480 : 		gObj[iUserIndex].LevelUpPoint += g_ClassCalc.GetLevelPoint(&gObj[iUserIndex], 0, 0);

  0013e	6a 00		 push	 0
  00140	6a 00		 push	 0
  00142	89 8d f8 fe ff
	ff		 mov	 DWORD PTR _iLEFT_EXP$1$[ebp], ecx
  00148	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  0014d	66 ff 84 07 96
	00 00 00	 inc	 WORD PTR [edi+eax+150]
  00155	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
  00164	0f b7 c0	 movzx	 eax, ax
  00167	01 84 37 98 00
	00 00		 add	 DWORD PTR [edi+esi+152], eax

; 2481 : #else
; 2482 : 		if( gObj[iUserIndex].Class == CLASS_DARKLORD )
; 2483 : 		{
; 2484 : 			gObj[iUserIndex].LevelUpPoint += 7;
; 2485 : 		}
; 2486 : 		else if( gObj[iUserIndex].Class == CLASS_MAGUMSA )
; 2487 : 		{
; 2488 : 			gObj[iUserIndex].LevelUpPoint += 7;
; 2489 : 		}
; 2490 : 		else if( gObj[iUserIndex].Class == CLASS_FIGHTER )
; 2491 : 		{
; 2492 : 			gObj[iUserIndex].LevelUpPoint += 7;
; 2493 : 		}
; 2494 : 		else
; 2495 : 		{
; 2496 : 			gObj[iUserIndex].LevelUpPoint += 5;
; 2497 : 		}
; 2498 : #endif
; 2499 : 
; 2500 : 		if( gObj[iUserIndex].PlusStatQuestClear != false )

  0016e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00174	80 7c 37 7c 00	 cmp	 BYTE PTR [edi+esi+124], 0
  00179	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0017c	74 46		 je	 SHORT $LN10@LevelUp

; 2501 : 		{
; 2502 : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 2503 : 			gObj[iUserIndex].LevelUpPoint += g_ClassCalc.GetLevelPoint(&gObj[iUserIndex], 0, 1);

  0017e	6a 01		 push	 1
  00180	6a 00		 push	 0
  00182	50		 push	 eax
  00183	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  00188	e8 00 00 00 00	 call	 ?GetLevelPoint@ClassCalc@@QAEGPAUOBJECTSTRUCT@@EE@Z ; ClassCalc::GetLevelPoint
  0018d	0f b7 c0	 movzx	 eax, ax
  00190	01 84 37 98 00
	00 00		 add	 DWORD PTR [edi+esi+152], eax

; 2504 : #else
; 2505 : 			gObj[iUserIndex].LevelUpPoint += 1;
; 2506 : #endif
; 2507 : 			LogAddTD("[%s][%s] LevelUp PlusStatQuest Clear AddStat %d",

  00197	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0019d	ff b4 0f 98 00
	00 00		 push	 DWORD PTR [edi+ecx+152]
  001a4	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001a7	03 c7		 add	 eax, edi
  001a9	50		 push	 eax
  001aa	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001ad	03 c7		 add	 eax, edi
  001af	50		 push	 eax
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@KDBPKGIM@?$FL?$CFs?$FN?$FL?$CFs?$FN?5LevelUp?5PlusStatQuest?5C@
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001bb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c1	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@LevelUp:

; 2508 : 				gObj[iUserIndex].AccountID, gObj[iUserIndex].Name,
; 2509 : 				gObj[iUserIndex].LevelUpPoint);
; 2510 : 		}
; 2511 : 
; 2512 : 		gObj[iUserIndex].MaxLife += DCInfo.DefClass[gObj[iUserIndex].Class].LevelLife;

  001c4	0f b7 84 37 90
	00 00 00	 movzx	 eax, WORD PTR [edi+esi+144]
  001cc	69 c0 c8 0b 00
	00		 imul	 eax, eax, 3016
  001d2	f3 0f 10 80 10
	00 00 00	 movss	 xmm0, DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+16]
  001da	f3 0f 58 84 37
	dc 00 00 00	 addss	 xmm0, DWORD PTR [edi+esi+220]
  001e3	f3 0f 11 84 37
	dc 00 00 00	 movss	 DWORD PTR [edi+esi+220], xmm0

; 2513 : 		gObj[iUserIndex].MaxMana += DCInfo.DefClass[gObj[iUserIndex].Class].LevelMana;

  001ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f2	0f b7 84 0f 90
	00 00 00	 movzx	 eax, WORD PTR [edi+ecx+144]
  001fa	69 c0 c8 0b 00
	00		 imul	 eax, eax, 3016
  00200	f3 0f 10 80 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?DCInfo@@3Vclassdef@@A[eax+28]
  00208	f3 0f 58 84 0f
	f0 00 00 00	 addss	 xmm0, DWORD PTR [edi+ecx+240]
  00211	f3 0f 11 84 0f
	f0 00 00 00	 movss	 DWORD PTR [edi+ecx+240], xmm0

; 2514 : 		gObj[iUserIndex].Life = gObj[iUserIndex].MaxLife;

  0021a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00220	8b 84 0f dc 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+220]
  00227	89 84 0f d8 00
	00 00		 mov	 DWORD PTR [edi+ecx+216], eax

; 2515 : 		gObj[iUserIndex].Mana = gObj[iUserIndex].MaxMana;

  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00234	8b 84 0f f0 00
	00 00		 mov	 eax, DWORD PTR [edi+ecx+240]
  0023b	89 84 0f ec 00
	00 00		 mov	 DWORD PTR [edi+ecx+236], eax

; 2516 : 		gObjNextExpCal(&gObj[iUserIndex]);

  00242	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00247	03 c7		 add	 eax, edi
  00249	50		 push	 eax
  0024a	e8 00 00 00 00	 call	 ?gObjNextExpCal@@YAXPAUOBJECTSTRUCT@@@Z ; gObjNextExpCal

; 2517 : 		gObjSetBP(gObj[iUserIndex].m_Index);

  0024f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00254	ff 34 07	 push	 DWORD PTR [edi+eax]
  00257	e8 00 00 00 00	 call	 ?gObjSetBP@@YAXH@Z	; gObjSetBP

; 2518 : 		GCLevelUpMsgSend(gObj[iUserIndex].m_Index, 1);

  0025c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00261	6a 01		 push	 1
  00263	ff 34 07	 push	 DWORD PTR [edi+eax]
  00266	e8 00 00 00 00	 call	 ?GCLevelUpMsgSend@@YAXHH@Z ; GCLevelUpMsgSend

; 2519 : //		gObjCalcMaxLifePower(gObj[iUserIndex].m_Index);
; 2520 : 
; 2521 : 		LogAddTD(lMsg.Get(MSGGET(2, 8)), gObj[iUserIndex].AccountID,

  0026b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00271	83 c4 10	 add	 esp, 16			; 00000010H
  00274	0f bf 84 0f 96
	00 00 00	 movsx	 eax, WORD PTR [edi+ecx+150]
  0027c	50		 push	 eax
  0027d	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00280	03 c7		 add	 eax, edi
  00282	50		 push	 eax
  00283	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00286	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0028b	03 c7		 add	 eax, edi
  0028d	50		 push	 eax
  0028e	68 08 02 00 00	 push	 520			; 00000208H
  00293	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00298	50		 push	 eax
  00299	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 2522 : 			gObj[iUserIndex].Name, gObj[iUserIndex].Level);
; 2523 : 
; 2524 : 
; 2525 : 		if( gObj[iUserIndex].Level == 400 && gObj[iUserIndex].PartyNumber >= 0 )

  0029f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a5	b8 90 01 00 00	 mov	 eax, 400		; 00000190H
  002aa	83 c4 10	 add	 esp, 16			; 00000010H
  002ad	66 39 84 0f 96
	00 00 00	 cmp	 WORD PTR [edi+ecx+150], ax
  002b5	0f 85 a4 00 00
	00		 jne	 $LN23@LevelUp
  002bb	8b b4 0f 0c 06
	00 00		 mov	 esi, DWORD PTR [edi+ecx+1548]
  002c2	85 f6		 test	 esi, esi
  002c4	0f 88 95 00 00
	00		 js	 $LN23@LevelUp

; 2526 : 		{
; 2527 : 			int partynumber = gObj[iUserIndex].PartyNumber;
; 2528 : 			char szTmp[256];
; 2529 : 
; 2530 : 			sprintf(szTmp,"400 LevelUp (%s)(%s) Party ",gObj[iUserIndex].AccountID,gObj[iUserIndex].Name);

  002ca	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  002cd	03 c7		 add	 eax, edi
  002cf	50		 push	 eax
  002d0	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  002d3	03 c7		 add	 eax, edi
  002d5	50		 push	 eax
  002d6	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$1[ebp]
  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DJAOLMAF@400?5LevelUp?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5Party?5?$AA@
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 _sprintf
  002e7	8b c6		 mov	 eax, esi
  002e9	83 c4 10	 add	 esp, 16			; 00000010H
  002ec	c1 e0 04	 shl	 eax, 4
  002ef	bb 05 00 00 00	 mov	 ebx, 5
  002f4	2b c6		 sub	 eax, esi
  002f6	8d 3c 85 0c 00
	00 00		 lea	 edi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  002fd	0f 1f 00	 npad	 3
$LL4@LevelUp:

; 2535 : 			{
; 2536 : 				tObjNum = gParty.m_PartyS[partynumber].Number[i];

  00300	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2537 : 				if( tObjNum >= 0 )

  00302	85 c9		 test	 ecx, ecx
  00304	78 41		 js	 SHORT $LN2@LevelUp

; 2538 : 				{
; 2539 : 					int len = strlen(szTmp);

  00306	8d b5 fc fe ff
	ff		 lea	 esi, DWORD PTR _szTmp$1[ebp]
  0030c	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0030f	90		 npad	 1
$LL21@LevelUp:
  00310	8a 06		 mov	 al, BYTE PTR [esi]
  00312	46		 inc	 esi
  00313	84 c0		 test	 al, al
  00315	75 f9		 jne	 SHORT $LL21@LevelUp
  00317	2b f2		 sub	 esi, edx

; 2540 : 					sprintf(&szTmp[len],",(%s)(%s) ",gObj[tObjNum].AccountID,gObj[tObjNum].Name);

  00319	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  0031f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00325	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00328	03 c2		 add	 eax, edx
  0032a	50		 push	 eax
  0032b	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0032e	03 c2		 add	 eax, edx
  00330	50		 push	 eax
  00331	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$1[ebp]
  00337	03 c6		 add	 eax, esi
  00339	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MNKEEMGH@?0?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
  0033e	50		 push	 eax
  0033f	e8 00 00 00 00	 call	 _sprintf
  00344	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@LevelUp:

; 2531 : 
; 2532 : 			int tObjNum;
; 2533 : 
; 2534 : 			for(int i = 0; i < 5; i++)

  00347	83 c7 04	 add	 edi, 4
  0034a	83 eb 01	 sub	 ebx, 1
  0034d	75 b1		 jne	 SHORT $LL4@LevelUp

; 2541 : 				}
; 2542 : 			}
; 2543 : 
; 2544 : 			LogAddTD(szTmp);

  0034f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTmp$1[ebp]
  00355	50		 push	 eax
  00356	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0035c	83 c4 04	 add	 esp, 4
$LN23@LevelUp:

; 2545 : 		}
; 2546 : 	}
; 2547 : 
; 2548 : 	return iLEFT_EXP;

  0035f	8b b5 f8 fe ff
	ff		 mov	 esi, DWORD PTR _iLEFT_EXP$1$[ebp]
  00365	8b c6		 mov	 eax, esi
  00367	5f		 pop	 edi
  00368	5b		 pop	 ebx
  00369	5e		 pop	 esi

; 2549 : }

  0036a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036d	33 cd		 xor	 ecx, ebp
  0036f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00374	8b e5		 mov	 esp, ebp
  00376	5d		 pop	 ebp
  00377	c2 08 00	 ret	 8
$LN20@LevelUp:
  0037a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037d	33 c0		 xor	 eax, eax
  0037f	33 cd		 xor	 ecx, ebp
  00381	5e		 pop	 esi
  00382	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00387	8b e5		 mov	 esp, ebp
  00389	5d		 pop	 ebp
  0038a	c2 08 00	 ret	 8
?LevelUp@CIllusionTempleProcess@@QAEHHH@Z ENDP		; CIllusionTempleProcess::LevelUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SendRewardExp@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
_pMsgBody$1 = -312					; size = 20
tv791 = -292						; size = 4
tv802 = -288						; size = 4
_this$GSCopy$1$ = -284					; size = 4
_lOfs$1$ = -280						; size = 4
tv797 = -276						; size = 4
tv800 = -272						; size = 4
_pMsg$ = -268						; size = 7
_SendData$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
?SendRewardExp@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SendRewardExp, COMDAT
; _this$ = ecx

; 2608 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 38 01 00
	00		 sub	 esp, 312		; 00000138H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 2609 : 	int lOfs = 0;
; 2610 : 	BYTE SendData[256];
; 2611 : 	PMSG_ILLUSIONTEMPLE_SCOREINFO pMsg;
; 2612 : 
; 2613 : 	pMsg.Score[0] = m_ALLIED_TEAM_PTS;

  00013	0f b6 81 d0 03
	00 00		 movzx	 eax, BYTE PTR [ecx+976]
  0001a	ba 0a 00 00 00	 mov	 edx, 10			; 0000000aH
  0001f	88 85 f8 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+4], al

; 2614 : 	pMsg.Score[1] = m_ILLUSION_TEAM_PTS;

  00025	0f b6 81 d1 03
	00 00		 movzx	 eax, BYTE PTR [ecx+977]
  0002c	53		 push	 ebx
  0002d	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+5], al

; 2615 : 	pMsg.count = UserCount;

  00033	0f b6 81 28 02
	00 00		 movzx	 eax, BYTE PTR [ecx+552]
  0003a	56		 push	 esi
  0003b	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
  0003e	88 85 fa fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+6], al
  00044	8d 85 03 ff ff
	ff		 lea	 eax, DWORD PTR _SendData$[ebp+7]
  0004a	89 b5 dc fe ff
	ff		 mov	 DWORD PTR tv791[ebp], esi
  00050	8b de		 mov	 ebx, esi
  00052	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00058	57		 push	 edi

; 2616 : 
; 2617 : 	lOfs += sizeof(pMsg);

  00059	c7 85 e8 fe ff
	ff 07 00 00 00	 mov	 DWORD PTR _lOfs$1$[ebp], 7
  00063	8b f1		 mov	 esi, ecx
  00065	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv800[ebp], eax
  0006b	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv802[ebp], edx
$LL4@SendReward:

; 2621 : 	{
; 2622 : 		if( m_PlayerData[i].m_Index != -1 &&

  00071	8b 03		 mov	 eax, DWORD PTR [ebx]
  00073	83 f8 ff	 cmp	 eax, -1
  00076	0f 84 d2 00 00
	00		 je	 $LN2@SendReward
  0007c	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00087	03 c1		 add	 eax, ecx
  00089	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv797[ebp], eax
  0008f	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00093	0f 8e b5 00 00
	00		 jle	 $LN2@SendReward

; 2623 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED)
; 2624 : 		{
; 2625 : 			ILLUSIONTEMPLE_SCOREINFO pMsgBody;
; 2626 : 			memcpy(pMsgBody.Name,gObj[m_PlayerData[i].m_Index].Name,10);
; 2627 : 			pMsgBody.Map = Temple + MAP_INDEX_ILLUSIONTEMPLE1;

  00099	8a 96 2c 02 00
	00		 mov	 dl, BYTE PTR [esi+556]
  0009f	8d 78 5d	 lea	 edi, DWORD PTR [eax+93]
  000a2	66 8b 47 08	 mov	 ax, WORD PTR [edi+8]

; 2628 : 			pMsgBody.Team = m_PlayerData[i].m_Team;
; 2629 : 			pMsgBody.Class = (BYTE)gObj[m_PlayerData[i].m_Index].Class;
; 2630 : 			pMsgBody.Exp = (int)m_PlayerData[i].m_RewardExp;
; 2631 : 
; 2632 : 			memcpy(&SendData[lOfs],&pMsgBody,sizeof(pMsgBody));
; 2633 : 			lOfs += sizeof(pMsgBody);
; 2634 : 
; 2635 : 			LogAddTD("[Illusion Temple] (%d) RewardExp Result  (Account:%s, Name:%s, Team:%d, Class:%d, UserKillCount:%d, RelicsMoveCount:%d, RewardExp:%d, RankingPoint: %d)",

  000a6	ff 73 20	 push	 DWORD PTR [ebx+32]
  000a9	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  000ad	ff 73 1c	 push	 DWORD PTR [ebx+28]
  000b0	8a 4b 04	 mov	 cl, BYTE PTR [ebx+4]
  000b3	8b b5 f0 fe ff
	ff		 mov	 esi, DWORD PTR tv800[ebp]
  000b9	66 89 85 d0 fe
	ff ff		 mov	 WORD PTR _pMsgBody$1[ebp+8], ax
  000c0	8d 42 2d	 lea	 eax, DWORD PTR [edx+45]
  000c3	88 85 d2 fe ff
	ff		 mov	 BYTE PTR _pMsgBody$1[ebp+10], al
  000c9	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv797[ebp]
  000cf	66 0f d6 85 c8
	fe ff ff	 movq	 QWORD PTR _pMsgBody$1[ebp], xmm0
  000d7	88 8d d3 fe ff
	ff		 mov	 BYTE PTR _pMsgBody$1[ebp+11], cl
  000dd	83 85 e8 fe ff
	ff 14		 add	 DWORD PTR _lOfs$1$[ebp], 20 ; 00000014H
  000e4	8a 80 90 00 00
	00		 mov	 al, BYTE PTR [eax+144]
  000ea	88 85 d4 fe ff
	ff		 mov	 BYTE PTR _pMsgBody$1[ebp+12], al
  000f0	0f 10 85 c8 fe
	ff ff		 movups	 xmm0, XMMWORD PTR _pMsgBody$1[ebp]
  000f7	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  000fa	50		 push	 eax
  000fb	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000fe	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00101	0f b6 43 12	 movzx	 eax, BYTE PTR [ebx+18]
  00105	50		 push	 eax
  00106	0f b6 43 10	 movzx	 eax, BYTE PTR [ebx+16]
  0010a	50		 push	 eax
  0010b	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv797[ebp]
  00111	83 85 f0 fe ff
	ff 14		 add	 DWORD PTR tv800[ebp], 20 ; 00000014H
  00118	0f b6 80 92 00
	00 00		 movzx	 eax, BYTE PTR [eax+146]
  0011f	50		 push	 eax
  00120	0f b6 c1	 movzx	 eax, cl
  00123	50		 push	 eax
  00124	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR tv797[ebp]
  0012a	83 c0 52	 add	 eax, 82			; 00000052H
  0012d	57		 push	 edi
  0012e	50		 push	 eax
  0012f	0f b6 c2	 movzx	 eax, dl
  00132	40		 inc	 eax
  00133	50		 push	 eax
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0JI@DILJDNAH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RewardExp@
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013f	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR tv802[ebp]
  00145	83 c4 2c	 add	 esp, 44			; 0000002cH
  00148	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN2@SendReward:

; 2618 : 
; 2619 : 	int i;
; 2620 : 	for(i = 0; i < IT_MAXPLAYER; i++)

  0014e	83 c3 30	 add	 ebx, 48			; 00000030H
  00151	83 ea 01	 sub	 edx, 1
  00154	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv802[ebp], edx
  0015a	0f 85 11 ff ff
	ff		 jne	 $LL4@SendReward

; 2636 : 				Temple+1,gObj[m_PlayerData[i].m_Index].AccountID,gObj[m_PlayerData[i].m_Index].Name,
; 2637 : 				m_PlayerData[i].m_Team,gObj[m_PlayerData[i].m_Index].DbClass,m_PlayerData[i].m_PlayerKillCount,
; 2638 : 				m_PlayerData[i].m_RelicSuccess,m_PlayerData[i].m_RewardExp,m_PlayerData[i].m_RankPoint);
; 2639 : 		}
; 2640 : 	}
; 2641 : 
; 2642 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,0x04,lOfs);

  00160	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _lOfs$1$[ebp]
  00166	50		 push	 eax
  00167	6a 04		 push	 4
  00169	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0016f	68 bf 00 00 00	 push	 191			; 000000bfH
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 2643 : 	memcpy(&SendData[0],&pMsg,sizeof(pMsg));

  0017a	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR tv791[ebp]
  00189	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
  0018e	89 85 fc fe ff
	ff		 mov	 DWORD PTR _SendData$[ebp], eax
  00194	66 8b 85 f8 fe
	ff ff		 mov	 ax, WORD PTR _pMsg$[ebp+4]
  0019b	66 89 85 00 ff
	ff ff		 mov	 WORD PTR _SendData$[ebp+4], ax
  001a2	8a 85 fa fe ff
	ff		 mov	 al, BYTE PTR _pMsg$[ebp+6]
  001a8	88 85 02 ff ff
	ff		 mov	 BYTE PTR _SendData$[ebp+6], al
  001ae	66 90		 npad	 2
$LL7@SendReward:

; 2646 : 	{
; 2647 : 		if( m_PlayerData[i].m_Team == (BYTE)-1 )

  001b0	80 7e 04 ff	 cmp	 BYTE PTR [esi+4], 255	; 000000ffH
  001b4	74 31		 je	 SHORT $LN5@SendReward

; 2648 : 			continue;
; 2649 : 
; 2650 : 		if( m_PlayerData[i].m_Index != -1 &&

  001b6	8b 16		 mov	 edx, DWORD PTR [esi]
  001b8	83 fa ff	 cmp	 edx, -1
  001bb	74 2a		 je	 SHORT $LN5@SendReward
  001bd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001c2	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  001c8	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  001cd	7e 18		 jle	 SHORT $LN5@SendReward

; 2651 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED)
; 2652 : 		{
; 2653 : 			DataSend(m_PlayerData[i].m_Index,SendData,pMsg.h.size);

  001cf	0f b6 85 f5 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001d6	50		 push	 eax
  001d7	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _SendData$[ebp]
  001dd	50		 push	 eax
  001de	52		 push	 edx
  001df	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001e4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SendReward:

; 2644 : 
; 2645 : 	for(i = 0; i < IT_MAXPLAYER; i++)

  001e7	83 c6 30	 add	 esi, 48			; 00000030H
  001ea	83 ef 01	 sub	 edi, 1
  001ed	75 c1		 jne	 SHORT $LL7@SendReward

; 2654 : 		}
; 2655 : 	}
; 2656 : }

  001ef	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	33 cd		 xor	 ecx, ebp
  001f6	5b		 pop	 ebx
  001f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c3		 ret	 0
?SendRewardExp@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SendRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?CalcWinRewardExp@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
tv1052 = -16						; size = 4
tv1048 = -12						; size = 4
tv1047 = -12						; size = 4
tv1029 = -12						; size = 4
_iRET_EXP$1$ = -12					; size = 4
_PartyCount$1$ = -12					; size = 4
_AlliedReward$1$ = -8					; size = 4
_IllusionReward$1$ = -4					; size = 4
?CalcWinRewardExp@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::CalcWinRewardExp, COMDAT
; _this$ = ecx

; 2197 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx

; 2198 : 	CheckUsers();

  0000b	e8 00 00 00 00	 call	 ?CheckUsers@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CheckUsers

; 2199 : 	int AlliedReward = 0;
; 2200 : 	int IllusionReward = 0;
; 2201 : 
; 2202 : 	if( m_ALLIED_TEAM_PTS >= 2 && m_ALLIED_TEAM_PTS > m_ILLUSION_TEAM_PTS )

  00010	8a ab d0 03 00
	00		 mov	 ch, BYTE PTR [ebx+976]
  00016	80 fd 02	 cmp	 ch, 2
  00019	72 52		 jb	 SHORT $LN9@CalcWinRew
  0001b	8a 8b d1 03 00
	00		 mov	 cl, BYTE PTR [ebx+977]
  00021	3a e9		 cmp	 ch, cl
  00023	76 48		 jbe	 SHORT $LN9@CalcWinRew

; 2203 : 	{
; 2204 : 		m_WinTeam = IT_ALLIED_TEAM;
; 2205 : 		AlliedReward = (IT_REWARD_A[Temple] + (m_ALLIED_TEAM_PTS - m_ILLUSION_TEAM_PTS)*IT_REWARD_B[Temple])*2;

  00025	0f b6 93 2c 02
	00 00		 movzx	 edx, BYTE PTR [ebx+556]
  0002c	0f b6 c1	 movzx	 eax, cl
  0002f	89 45 f4	 mov	 DWORD PTR tv1048[ebp], eax
  00032	0f b6 c5	 movzx	 eax, ch
  00035	2b 45 f4	 sub	 eax, DWORD PTR tv1048[ebp]
  00038	8b 34 95 00 00
	00 00		 mov	 esi, DWORD PTR ?IT_REWARD_B@@3PAHA[edx*4]
  0003f	8b 3c 95 00 00
	00 00		 mov	 edi, DWORD PTR ?IT_REWARD_A@@3PAHA[edx*4]
  00046	0f af c6	 imul	 eax, esi
  00049	c6 83 d2 03 00
	00 00		 mov	 BYTE PTR [ebx+978], 0
  00050	89 7d fc	 mov	 DWORD PTR _IllusionReward$1$[ebp], edi
  00053	03 c7		 add	 eax, edi
  00055	03 c0		 add	 eax, eax
  00057	89 45 f8	 mov	 DWORD PTR _AlliedReward$1$[ebp], eax

; 2206 : 
; 2207 : 		if( m_ILLUSION_TEAM_PTS == 0 )

  0005a	84 c9		 test	 cl, cl
  0005c	0f 84 9c 00 00
	00		 je	 $LN20@CalcWinRew

; 2208 : 		{
; 2209 : 			IllusionReward = IT_REWARD_A[Temple];
; 2210 : 		}
; 2211 : 		else
; 2212 : 		{
; 2213 : 			IllusionReward = IT_REWARD_A[Temple] + m_ILLUSION_TEAM_PTS*IT_REWARD_B[Temple];

  00062	0f af 75 f4	 imul	 esi, DWORD PTR tv1048[ebp]
  00066	03 fe		 add	 edi, esi

; 2214 : 		}

  00068	e9 8e 00 00 00	 jmp	 $LN38@CalcWinRew
$LN9@CalcWinRew:

; 2215 : 	}
; 2216 : 	else if( m_ILLUSION_TEAM_PTS >= 2 && m_ILLUSION_TEAM_PTS > m_ALLIED_TEAM_PTS)

  0006d	8a 8b d1 03 00
	00		 mov	 cl, BYTE PTR [ebx+977]
  00073	80 f9 02	 cmp	 cl, 2
  00076	72 48		 jb	 SHORT $LN13@CalcWinRew
  00078	3a cd		 cmp	 cl, ch
  0007a	76 44		 jbe	 SHORT $LN13@CalcWinRew

; 2217 : 	{
; 2218 : 		m_WinTeam = IT_ILLUSION_TEAM;
; 2219 : 		IllusionReward = (IT_REWARD_A[Temple] + (m_ILLUSION_TEAM_PTS - m_ALLIED_TEAM_PTS)*IT_REWARD_B[Temple])*2;

  0007c	0f b6 93 2c 02
	00 00		 movzx	 edx, BYTE PTR [ebx+556]
  00083	0f b6 c5	 movzx	 eax, ch
  00086	89 45 f4	 mov	 DWORD PTR tv1047[ebp], eax
  00089	0f b6 f9	 movzx	 edi, cl
  0008c	2b 7d f4	 sub	 edi, DWORD PTR tv1047[ebp]
  0008f	8b 34 95 00 00
	00 00		 mov	 esi, DWORD PTR ?IT_REWARD_B@@3PAHA[edx*4]
  00096	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?IT_REWARD_A@@3PAHA[edx*4]
  0009d	0f af fe	 imul	 edi, esi
  000a0	c6 83 d2 03 00
	00 01		 mov	 BYTE PTR [ebx+978], 1
  000a7	89 45 f8	 mov	 DWORD PTR _AlliedReward$1$[ebp], eax
  000aa	03 f8		 add	 edi, eax
  000ac	03 ff		 add	 edi, edi
  000ae	89 7d fc	 mov	 DWORD PTR _IllusionReward$1$[ebp], edi

; 2220 : 
; 2221 : 		if( m_ALLIED_TEAM_PTS == 0 )

  000b1	84 ed		 test	 ch, ch
  000b3	74 49		 je	 SHORT $LN20@CalcWinRew

; 2222 : 		{
; 2223 : 			AlliedReward = IT_REWARD_A[Temple];
; 2224 : 		}
; 2225 : 		else
; 2226 : 		{
; 2227 : 			AlliedReward = IT_REWARD_A[Temple] + m_ALLIED_TEAM_PTS*IT_REWARD_B[Temple];

  000b5	0f af 75 f4	 imul	 esi, DWORD PTR tv1047[ebp]
  000b9	03 c6		 add	 eax, esi
  000bb	89 45 f8	 mov	 DWORD PTR _AlliedReward$1$[ebp], eax

; 2228 : 		}
; 2229 : 	}
; 2230 : 	else

  000be	eb 3e		 jmp	 SHORT $LN20@CalcWinRew
$LN13@CalcWinRew:

; 2231 : 	{
; 2232 : 		if( m_ALLIED_TEAM_PTS == 0 )
; 2233 : 		{
; 2234 : 			AlliedReward = IT_REWARD_A[Temple];

  000c0	0f b6 93 2c 02
	00 00		 movzx	 edx, BYTE PTR [ebx+556]
  000c7	8b 3c 95 00 00
	00 00		 mov	 edi, DWORD PTR ?IT_REWARD_A@@3PAHA[edx*4]
  000ce	89 7d fc	 mov	 DWORD PTR _IllusionReward$1$[ebp], edi
  000d1	84 ed		 test	 ch, ch
  000d3	75 05		 jne	 SHORT $LN17@CalcWinRew
  000d5	89 7d f8	 mov	 DWORD PTR _AlliedReward$1$[ebp], edi

; 2235 : 		}
; 2236 : 		else

  000d8	eb 10		 jmp	 SHORT $LN18@CalcWinRew
$LN17@CalcWinRew:

; 2237 : 		{
; 2238 : 			AlliedReward = IT_REWARD_A[Temple] + m_ALLIED_TEAM_PTS*IT_REWARD_B[Temple];

  000da	0f b6 c5	 movzx	 eax, ch
  000dd	0f af 04 95 00
	00 00 00	 imul	 eax, DWORD PTR ?IT_REWARD_B@@3PAHA[edx*4]
  000e5	03 c7		 add	 eax, edi
  000e7	89 45 f8	 mov	 DWORD PTR _AlliedReward$1$[ebp], eax
$LN18@CalcWinRew:

; 2239 : 		}
; 2240 : 
; 2241 : 		if( m_ILLUSION_TEAM_PTS == 0 )

  000ea	84 c9		 test	 cl, cl
  000ec	74 10		 je	 SHORT $LN20@CalcWinRew

; 2242 : 		{
; 2243 : 			IllusionReward = IT_REWARD_A[Temple];
; 2244 : 		}
; 2245 : 		else
; 2246 : 		{
; 2247 : 			IllusionReward = IT_REWARD_A[Temple] + m_ILLUSION_TEAM_PTS*IT_REWARD_B[Temple];

  000ee	0f b6 c1	 movzx	 eax, cl
  000f1	0f af 04 95 00
	00 00 00	 imul	 eax, DWORD PTR ?IT_REWARD_B@@3PAHA[edx*4]
  000f9	03 f8		 add	 edi, eax
$LN38@CalcWinRew:
  000fb	89 7d fc	 mov	 DWORD PTR _IllusionReward$1$[ebp], edi
$LN20@CalcWinRew:

; 2248 : 		}
; 2249 : 	}
; 2250 : 	LogAddTD("[Illusion Temple] (%d) Result (WinTeam: %d)(Score:[%d][%d])",

  000fe	0f b6 c1	 movzx	 eax, cl
  00101	50		 push	 eax
  00102	0f b6 c5	 movzx	 eax, ch
  00105	50		 push	 eax
  00106	0f b6 83 d2 03
	00 00		 movzx	 eax, BYTE PTR [ebx+978]
  0010d	50		 push	 eax
  0010e	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00111	50		 push	 eax
  00112	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@JLNJCFEN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Result?5?$CIW@
  00117	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011d	83 c4 14	 add	 esp, 20			; 00000014H
  00120	c7 45 f0 0a 00
	00 00		 mov	 DWORD PTR tv1052[ebp], 10 ; 0000000aH
  00127	8d 73 38	 lea	 esi, DWORD PTR [ebx+56]
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL4@CalcWinRew:

; 2254 : 	{
; 2255 : 		if( m_PlayerData[i].m_Team == (BYTE)-1 )

  00130	8a 56 ec	 mov	 dl, BYTE PTR [esi-20]
  00133	80 fa ff	 cmp	 dl, 255			; 000000ffH
  00136	0f 84 5c 01 00
	00		 je	 $LN2@CalcWinRew

; 2256 : 		{
; 2257 : 			continue;
; 2258 : 		}
; 2259 : 
; 2260 : 		if( m_PlayerData[i].m_Index != -1 &&
; 2261 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&
; 2262 : 			gObj[m_PlayerData[i].m_Index].MapNumber == Temple + MAP_INDEX_ILLUSIONTEMPLE1 &&

  0013c	8b 46 e8	 mov	 eax, DWORD PTR [esi-24]
  0013f	83 f8 ff	 cmp	 eax, -1
  00142	0f 84 50 01 00
	00		 je	 $LN2@CalcWinRew
  00148	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  0014e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00153	89 4d f4	 mov	 DWORD PTR tv1029[ebp], ecx
  00156	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  0015b	0f 8e 37 01 00
	00		 jle	 $LN2@CalcWinRew
  00161	8b 7d f4	 mov	 edi, DWORD PTR tv1029[ebp]
  00164	0f b6 8b 2c 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+556]
  0016b	83 c1 2d	 add	 ecx, 45			; 0000002dH
  0016e	0f b6 84 07 23
	01 00 00	 movzx	 eax, BYTE PTR [edi+eax+291]
  00176	8b 7d fc	 mov	 edi, DWORD PTR _IllusionReward$1$[ebp]
  00179	3b c1		 cmp	 eax, ecx
  0017b	0f 85 17 01 00
	00		 jne	 $LN2@CalcWinRew
  00181	0f b6 46 fb	 movzx	 eax, BYTE PTR [esi-5]
  00185	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?g_IllusionUseSkillCnt@@3HA ; g_IllusionUseSkillCnt
  0018b	0f 8c 07 01 00
	00		 jl	 $LN2@CalcWinRew

; 2263 : 			m_PlayerData[i].m_UseSkillCnt >= g_IllusionUseSkillCnt)
; 2264 : 		{
; 2265 : 			switch( m_PlayerData[i].m_Team )

  00191	0f b6 c2	 movzx	 eax, dl
  00194	83 e8 00	 sub	 eax, 0
  00197	74 09		 je	 SHORT $LN23@CalcWinRew
  00199	83 e8 01	 sub	 eax, 1
  0019c	75 0d		 jne	 SHORT $LN5@CalcWinRew

; 2269 : 				break;
; 2270 : 			case IT_ILLUSION_TEAM:
; 2271 : 				m_PlayerData[i].m_RewardExp = IllusionReward;

  0019e	8b c7		 mov	 eax, edi
  001a0	eb 03		 jmp	 SHORT $LN39@CalcWinRew
$LN23@CalcWinRew:

; 2266 : 			{
; 2267 : 			case IT_ALLIED_TEAM:
; 2268 : 				m_PlayerData[i].m_RewardExp = AlliedReward;

  001a2	8b 45 f8	 mov	 eax, DWORD PTR _AlliedReward$1$[ebp]
$LN39@CalcWinRew:
  001a5	99		 cdq
  001a6	89 56 04	 mov	 DWORD PTR [esi+4], edx
  001a9	89 06		 mov	 DWORD PTR [esi], eax
$LN5@CalcWinRew:

; 2272 : 				break;
; 2273 : 			}
; 2274 : 
; 2275 : 			m_PlayerData[i].m_RewardExp = m_PlayerData[i].m_RewardExp * g_IllusionRewardPerc / 100;

  001ab	ff 76 04	 push	 DWORD PTR [esi+4]
  001ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_IllusionRewardPerc@@3HA ; g_IllusionRewardPerc
  001b3	ff 36		 push	 DWORD PTR [esi]
  001b5	99		 cdq
  001b6	52		 push	 edx
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 __allmul
  001bd	6a 00		 push	 0
  001bf	6a 64		 push	 100			; 00000064H
  001c1	52		 push	 edx
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 __alldiv
  001c8	89 06		 mov	 DWORD PTR [esi], eax
  001ca	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 2276 : 			CheckItemOptForGetExpEx(&gObj[m_PlayerData[i].m_Index],m_PlayerData[i].m_RewardExp,TRUE);

  001cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d2	03 45 f4	 add	 eax, DWORD PTR tv1029[ebp]
  001d5	6a 01		 push	 1
  001d7	56		 push	 esi
  001d8	50		 push	 eax
  001d9	e8 00 00 00 00	 call	 ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx

; 2277 : 
; 2278 : 			int PartyCount = 0;
; 2279 : 
; 2280 : 			if( gObj[m_PlayerData[i].m_Index].PartyNumber >= 0 )

  001de	69 4e e8 40 27
	00 00		 imul	 ecx, DWORD PTR [esi-24], 10048
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ed	8b 84 01 0c 06
	00 00		 mov	 eax, DWORD PTR [ecx+eax+1548]
  001f4	85 c0		 test	 eax, eax
  001f6	78 10		 js	 SHORT $LN25@CalcWinRew

; 2281 : 			{
; 2282 : 				PartyCount = gParty.GetPartyCount(gObj[m_PlayerData[i].m_Index].PartyNumber);

  001f8	50		 push	 eax
  001f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  001fe	e8 00 00 00 00	 call	 ?GetPartyCount@PartyClass@@QAEHH@Z ; PartyClass::GetPartyCount
  00203	89 45 f4	 mov	 DWORD PTR _PartyCount$1$[ebp], eax

; 2283 : 			}
; 2284 : 			else

  00206	eb 07		 jmp	 SHORT $LN26@CalcWinRew
$LN25@CalcWinRew:

; 2285 : 			{
; 2286 : 				PartyCount = 1;

  00208	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _PartyCount$1$[ebp], 1
$LN26@CalcWinRew:

; 2287 : 			}
; 2288 : 
; 2289 : 			m_PlayerData[i].m_RankPoint = (int)(m_PlayerData[i].m_RewardExp + m_PlayerData[i].m_PlayerKillCount * IT_REWARD_C[Temple] + m_PlayerData[i].m_RelicSuccess * IT_REWARD_D[Temple] + IT_REWARD_E[PartyCount]);

  0020f	0f b6 8b 2c 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+556]
  00216	0f b6 56 fa	 movzx	 edx, BYTE PTR [esi-6]
  0021a	0f b6 46 f8	 movzx	 eax, BYTE PTR [esi-8]
  0021e	8b 3e		 mov	 edi, DWORD PTR [esi]
  00220	0f af 14 8d 00
	00 00 00	 imul	 edx, DWORD PTR ?IT_REWARD_D@@3PAHA[ecx*4]
  00228	0f af 04 8d 00
	00 00 00	 imul	 eax, DWORD PTR ?IT_REWARD_C@@3PAHA[ecx*4]
  00230	03 d0		 add	 edx, eax
  00232	8b 45 f4	 mov	 eax, DWORD PTR _PartyCount$1$[ebp]

; 2290 : 
; 2291 : 			int iCAL_EXP = (int)m_PlayerData[i].m_RewardExp;
; 2292 : 			int iRET_EXP = 0;

  00235	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _iRET_EXP$1$[ebp], 0
  0023c	03 14 85 00 00
	00 00		 add	 edx, DWORD PTR ?IT_REWARD_E@@3PAHA[eax*4]
  00243	03 d7		 add	 edx, edi
  00245	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2293 : 
; 2294 : 			while( iCAL_EXP > 0 )

  00248	85 ff		 test	 edi, edi
  0024a	7e 18		 jle	 SHORT $LN8@CalcWinRew
  0024c	0f 1f 40 00	 npad	 4
$LL7@CalcWinRew:

; 2295 : 			{
; 2296 : 				iRET_EXP = iCAL_EXP;
; 2297 : 				iCAL_EXP = LevelUp(m_PlayerData[i].m_Index,iCAL_EXP);

  00250	57		 push	 edi
  00251	ff 76 e8	 push	 DWORD PTR [esi-24]
  00254	8b cb		 mov	 ecx, ebx
  00256	89 7d f4	 mov	 DWORD PTR _iRET_EXP$1$[ebp], edi
  00259	e8 00 00 00 00	 call	 ?LevelUp@CIllusionTempleProcess@@QAEHHH@Z ; CIllusionTempleProcess::LevelUp
  0025e	8b f8		 mov	 edi, eax
  00260	85 ff		 test	 edi, edi
  00262	7f ec		 jg	 SHORT $LL7@CalcWinRew
$LN8@CalcWinRew:

; 2298 : 			}
; 2299 : 
; 2300 : 			int iIndex = m_PlayerData[i].m_Index;

  00264	8b 7e e8	 mov	 edi, DWORD PTR [esi-24]

; 2301 : 			if( g_MasterExp.IsEnabled(&gObj[iIndex]) == FALSE )

  00267	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  0026d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00273	51		 push	 ecx
  00274	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  00279	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  0027e	85 c0		 test	 eax, eax
  00280	75 16		 jne	 SHORT $LN2@CalcWinRew

; 2302 : 			{
; 2303 : 				GCSendExp(iIndex,(WORD)-1,iRET_EXP,0,0);

  00282	50		 push	 eax
  00283	50		 push	 eax
  00284	8b 45 f4	 mov	 eax, DWORD PTR _iRET_EXP$1$[ebp]
  00287	99		 cdq
  00288	52		 push	 edx
  00289	50		 push	 eax
  0028a	68 ff ff 00 00	 push	 65535			; 0000ffffH
  0028f	57		 push	 edi
  00290	e8 00 00 00 00	 call	 ?GCSendExp@@YAXHH_JHH@Z	; GCSendExp
  00295	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@CalcWinRew:

; 2251 : 		Temple+1,m_WinTeam,m_ALLIED_TEAM_PTS,m_ILLUSION_TEAM_PTS);
; 2252 : 
; 2253 : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  00298	83 c6 30	 add	 esi, 48			; 00000030H
  0029b	83 6d f0 01	 sub	 DWORD PTR tv1052[ebp], 1
  0029f	0f 85 8b fe ff
	ff		 jne	 $LL4@CalcWinRew
  002a5	5f		 pop	 edi
  002a6	5e		 pop	 esi
  002a7	5b		 pop	 ebx

; 2304 : 			}
; 2305 : 		}
; 2306 : 	}
; 2307 : }

  002a8	8b e5		 mov	 esp, ebp
  002aa	5d		 pop	 ebp
  002ab	c3		 ret	 0
?CalcWinRewardExp@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::CalcWinRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?RegetStatue@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?RegetStatue@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::RegetStatue, COMDAT
; _this$ = ecx

; 1532 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1533 : 	if( m_RELIC_PLAYER >= 0 )

  00003	83 be b8 03 00
	00 00		 cmp	 DWORD PTR [esi+952], 0
  0000a	0f 8d 9b 00 00
	00		 jge	 $LN1@RegetStatu

; 1534 : 		return;
; 1535 : 
; 1536 : 	if( m_STATUE_NPC_COUNT <= 0 )

  00010	83 be c0 03 00
	00 00		 cmp	 DWORD PTR [esi+960], 0
  00017	7f 10		 jg	 SHORT $LN3@RegetStatu

; 1537 : 	{
; 1538 : 		LogAddTD("[Illusion Temple] RegenStatue Failed m_STATUE_NPC_COUNT <= 0");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@NHMDPHGH@?$FLIllusion?5Temple?$FN?5RegenStatue?5Fa@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi

; 1553 : 		Temple+1,lpObj->Name,lpObj->MapNumber,lpObj->X,lpObj->Y,lpObj->m_PosNum,lpObj->Connected);
; 1554 : }

  00028	c3		 ret	 0
$LN3@RegetStatu:

; 1539 : 		return;
; 1540 : 	}
; 1541 : 
; 1542 : 	int StatuePos = rand()%m_STATUE_NPC_COUNT;

  00029	e8 00 00 00 00	 call	 _rand
  0002e	99		 cdq
  0002f	f7 be c0 03 00
	00		 idiv	 DWORD PTR [esi+960]

; 1543 : 
; 1544 : 	if( m_STATUE_NPC[StatuePos].m_Index == -1 )

  00035	8b 84 d6 30 02
	00 00		 mov	 eax, DWORD PTR [esi+edx*8+560]
  0003c	83 f8 ff	 cmp	 eax, -1
  0003f	74 6a		 je	 SHORT $LN1@RegetStatu

; 1545 : 		return;
; 1546 : 
; 1547 : 	LPOBJ lpObj = &gObj[m_STATUE_NPC[StatuePos].m_Index];

  00041	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048

; 1548 : 	lpObj->m_PosNum = m_STATUE_NPC[StatuePos].m_Num;

  00047	66 8b 84 d6 34
	02 00 00	 mov	 ax, WORD PTR [esi+edx*8+564]
  0004f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00055	66 89 81 98 05
	00 00		 mov	 WORD PTR [ecx+1432], ax

; 1549 : 	lpObj->DieRegen = 2;

  0005c	c6 81 8a 05 00
	00 02		 mov	 BYTE PTR [ecx+1418], 2

; 1550 : 	iNPC_TICK_COUNT = -1;

  00063	c7 86 94 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+916], -1

; 1551 : 
; 1552 : 	LogAddTD("[Illusion Temple] (%d) RegenStatus Name: %s, (%d: %d/%d), PosNum(%d), connected:%d",

  0006d	ff 71 04	 push	 DWORD PTR [ecx+4]
  00070	0f bf 81 98 05
	00 00		 movsx	 eax, WORD PTR [ecx+1432]
  00077	50		 push	 eax
  00078	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0007f	50		 push	 eax
  00080	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00087	50		 push	 eax
  00088	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0008f	50		 push	 eax
  00090	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00093	50		 push	 eax
  00094	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0009b	40		 inc	 eax
  0009c	50		 push	 eax
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@FFJHAHAN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5RegenStat@
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000a8	83 c4 20	 add	 esp, 32			; 00000020H
$LN1@RegetStatu:
  000ab	5e		 pop	 esi

; 1553 : 		Temple+1,lpObj->Name,lpObj->MapNumber,lpObj->X,lpObj->Y,lpObj->m_PosNum,lpObj->Connected);
; 1554 : }

  000ac	c3		 ret	 0
?RegetStatue@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::RegetStatue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -292					; size = 4
tv2273 = -288						; size = 4
tv2270 = -288						; size = 4
tv2267 = -288						; size = 4
tv2264 = -288						; size = 4
tv2260 = -288						; size = 4
tv2257 = -288						; size = 4
tv2254 = -288						; size = 4
tv2251 = -288						; size = 4
tv2247 = -288						; size = 4
tv2243 = -288						; size = 4
_pPlayerInfo$1 = -284					; size = 6
_pMsg$ = -276						; size = 14
_SENDBUFF$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_TEAM$ = 8						; size = 1
?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z PROC	; CIllusionTempleProcess::OperateMiniMap, COMDAT
; _this$ = ecx

; 1592 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	57		 push	 edi
  00018	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 1593 : 	int lOfs = 0;
; 1594 : 	BYTE SENDBUFF[256];
; 1595 : 	PMSG_ILLUSIONTEMPLE_INFO pMsg;
; 1596 : 
; 1597 : 	if( dwTICK_COUNT < 0 )

  0001e	83 be 9c 03 00
	00 00		 cmp	 DWORD PTR [esi+924], 0
  00025	7d 0a		 jge	 SHORT $LN8@OperateMin

; 1598 : 	{
; 1599 : 		dwTICK_COUNT = 0;

  00027	c7 86 9c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+924], 0
$LN8@OperateMin:

; 1600 : 	}
; 1601 : 
; 1602 : 	pMsg.Timer = dwTICK_COUNT / 1000;
; 1603 : 
; 1604 : 	if( m_RELIC_PLAYER != -1 )

  00031	8b 8e b8 03 00
	00		 mov	 ecx, DWORD PTR [esi+952]
  00037	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0003c	f7 ae 9c 03 00
	00		 imul	 DWORD PTR [esi+924]
  00042	c1 fa 06	 sar	 edx, 6
  00045	8b c2		 mov	 eax, edx
  00047	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004a	03 c2		 add	 eax, edx
  0004c	66 89 85 f0 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+4], ax
  00053	83 f9 ff	 cmp	 ecx, -1
  00056	74 34		 je	 SHORT $LN9@OperateMin

; 1605 : 	{
; 1606 : 		pMsg.hIndex = m_RELIC_PLAYER;

  00058	66 8b c1	 mov	 ax, cx
  0005b	66 89 85 f2 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+6], ax

; 1607 : 		pMsg.hX = gObj[m_RELIC_PLAYER].X;

  00062	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006e	03 c8		 add	 ecx, eax
  00070	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00077	88 85 f4 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+8], al

; 1608 : 		pMsg.hY = gObj[m_RELIC_PLAYER].Y;

  0007d	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00084	88 85 f5 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+9], al

; 1609 : 	}
; 1610 : 	else

  0008a	eb 13		 jmp	 SHORT $LN10@OperateMin
$LN9@OperateMin:

; 1611 : 	{
; 1612 : 		pMsg.hIndex = -1;

  0008c	83 c8 ff	 or	 eax, -1

; 1613 : 		pMsg.hX = -1;

  0008f	66 c7 85 f4 fe
	ff ff ff ff	 mov	 WORD PTR _pMsg$[ebp+8], 65535 ; 0000ffffH
  00098	66 89 85 f2 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+6], ax
$LN10@OperateMin:

; 1614 : 		pMsg.hY = -1;
; 1615 : 	}
; 1616 : 
; 1617 : 	pMsg.AlliedPts = m_ALLIED_TEAM_PTS;

  0009f	0f b6 86 d0 03
	00 00		 movzx	 eax, BYTE PTR [esi+976]

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  000a6	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]
  000a9	8a 5d 08	 mov	 bl, BYTE PTR _TEAM$[ebp]
  000ac	33 c9		 xor	 ecx, ecx
  000ae	88 85 f6 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+10], al
  000b4	ba 0e 00 00 00	 mov	 edx, 14			; 0000000eH
  000b9	0f b6 86 d1 03
	00 00		 movzx	 eax, BYTE PTR [esi+977]
  000c0	88 85 f7 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+11], al
  000c6	8b 07		 mov	 eax, DWORD PTR [edi]
  000c8	88 9d f8 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+12], bl
  000ce	83 f8 ff	 cmp	 eax, -1
  000d1	74 74		 je	 SHORT $LN2@OperateMin
  000d3	38 5e 24	 cmp	 BYTE PTR [esi+36], bl
  000d6	75 6f		 jne	 SHORT $LN2@OperateMin
  000d8	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  000de	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e4	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2273[ebp], eax
  000ea	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  000ee	7e 57		 jle	 SHORT $LN2@OperateMin

; 1634 : 			pPlayerInfo.MapNumber = gObj[m_PlayerData[i].m_Index].MapNumber;

  000f0	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv2273[ebp]
  000f6	0f b7 07	 movzx	 eax, WORD PTR [edi]
  000f9	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00100	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  00107	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al

; 1635 : 			pPlayerInfo.X = gObj[m_PlayerData[i].m_Index].X;

  0010d	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00114	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al

; 1636 : 			pPlayerInfo.Y = gObj[m_PlayerData[i].m_Index].Y;

  0011a	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]

; 1637 : 			count++;

  00121	8d 4a f3	 lea	 ecx, DWORD PTR [edx-13]
  00124	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  0012a	8d 51 13	 lea	 edx, DWORD PTR [ecx+19]
  0012d	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  00133	89 85 0a ff ff
	ff		 mov	 DWORD PTR _SENDBUFF$[ebp+14], eax
  00139	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  00140	66 89 85 0e ff
	ff ff		 mov	 WORD PTR _SENDBUFF$[ebp+18], ax
$LN2@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  00147	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0014a	83 f8 ff	 cmp	 eax, -1
  0014d	0f 84 8b 00 00
	00		 je	 $LN28@OperateMin
  00153	38 5e 54	 cmp	 BYTE PTR [esi+84], bl
  00156	0f 85 82 00 00
	00		 jne	 $LN28@OperateMin
  0015c	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  00162	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00168	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016e	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2270[ebp], eax
  00174	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00178	7e 64		 jle	 SHORT $LN28@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  0017a	0f b7 46 50	 movzx	 eax, WORD PTR [esi+80]

; 1637 : 			count++;

  0017e	41		 inc	 ecx
  0017f	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00186	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2270[ebp]
  0018c	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00193	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  00199	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2270[ebp]
  0019f	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  001a6	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  001ac	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2270[ebp]
  001b2	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  001b9	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  001bf	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  001c5	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  001cc	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  001d3	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  001db	83 c2 06	 add	 edx, 6
$LN28@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  001de	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  001e4	83 f8 ff	 cmp	 eax, -1
  001e7	0f 84 91 00 00
	00		 je	 $LN30@OperateMin
  001ed	38 9e 84 00 00
	00		 cmp	 BYTE PTR [esi+132], bl
  001f3	0f 85 85 00 00
	00		 jne	 $LN30@OperateMin
  001f9	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  001ff	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00205	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0020b	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2267[ebp], eax
  00211	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00215	7e 67		 jle	 SHORT $LN30@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  00217	0f b7 86 80 00
	00 00		 movzx	 eax, WORD PTR [esi+128]

; 1637 : 			count++;

  0021e	41		 inc	 ecx
  0021f	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00226	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2267[ebp]
  0022c	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00233	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  00239	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2267[ebp]
  0023f	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  00246	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  0024c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2267[ebp]
  00252	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  00259	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  0025f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  00265	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  0026c	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  00273	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  0027b	83 c2 06	 add	 edx, 6
$LN30@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  0027e	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]
  00284	83 f8 ff	 cmp	 eax, -1
  00287	0f 84 91 00 00
	00		 je	 $LN32@OperateMin
  0028d	38 9e b4 00 00
	00		 cmp	 BYTE PTR [esi+180], bl
  00293	0f 85 85 00 00
	00		 jne	 $LN32@OperateMin
  00299	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0029f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  002a5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002ab	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2264[ebp], eax
  002b1	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  002b5	7e 67		 jle	 SHORT $LN32@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  002b7	0f b7 86 b0 00
	00 00		 movzx	 eax, WORD PTR [esi+176]

; 1637 : 			count++;

  002be	41		 inc	 ecx
  002bf	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  002c6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2264[ebp]
  002cc	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  002d3	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  002d9	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2264[ebp]
  002df	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  002e6	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  002ec	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2264[ebp]
  002f2	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  002f9	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  002ff	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  00305	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  0030c	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  00313	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  0031b	83 c2 06	 add	 edx, 6
$LN32@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  0031e	8b 86 e0 00 00
	00		 mov	 eax, DWORD PTR [esi+224]
  00324	83 f8 ff	 cmp	 eax, -1
  00327	0f 84 91 00 00
	00		 je	 $LN34@OperateMin
  0032d	38 9e e4 00 00
	00		 cmp	 BYTE PTR [esi+228], bl
  00333	0f 85 85 00 00
	00		 jne	 $LN34@OperateMin
  00339	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0033f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00345	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0034b	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2260[ebp], eax
  00351	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00355	7e 67		 jle	 SHORT $LN34@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  00357	0f b7 86 e0 00
	00 00		 movzx	 eax, WORD PTR [esi+224]

; 1637 : 			count++;

  0035e	41		 inc	 ecx
  0035f	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00366	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2260[ebp]
  0036c	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00373	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  00379	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2260[ebp]
  0037f	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  00386	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  0038c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2260[ebp]
  00392	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  00399	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  0039f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  003a5	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  003ac	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  003b3	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  003bb	83 c2 06	 add	 edx, 6
$LN34@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  003be	8b 86 10 01 00
	00		 mov	 eax, DWORD PTR [esi+272]
  003c4	83 f8 ff	 cmp	 eax, -1
  003c7	0f 84 91 00 00
	00		 je	 $LN36@OperateMin
  003cd	38 9e 14 01 00
	00		 cmp	 BYTE PTR [esi+276], bl
  003d3	0f 85 85 00 00
	00		 jne	 $LN36@OperateMin
  003d9	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  003df	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  003e5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  003eb	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2257[ebp], eax
  003f1	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  003f5	7e 67		 jle	 SHORT $LN36@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  003f7	0f b7 86 10 01
	00 00		 movzx	 eax, WORD PTR [esi+272]

; 1637 : 			count++;

  003fe	41		 inc	 ecx
  003ff	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00406	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2257[ebp]
  0040c	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00413	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  00419	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2257[ebp]
  0041f	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  00426	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  0042c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2257[ebp]
  00432	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  00439	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  0043f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  00445	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  0044c	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  00453	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  0045b	83 c2 06	 add	 edx, 6
$LN36@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  0045e	8b 86 40 01 00
	00		 mov	 eax, DWORD PTR [esi+320]
  00464	83 f8 ff	 cmp	 eax, -1
  00467	0f 84 91 00 00
	00		 je	 $LN38@OperateMin
  0046d	38 9e 44 01 00
	00		 cmp	 BYTE PTR [esi+324], bl
  00473	0f 85 85 00 00
	00		 jne	 $LN38@OperateMin
  00479	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0047f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00485	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0048b	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2254[ebp], eax
  00491	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00495	7e 67		 jle	 SHORT $LN38@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  00497	0f b7 86 40 01
	00 00		 movzx	 eax, WORD PTR [esi+320]

; 1637 : 			count++;

  0049e	41		 inc	 ecx
  0049f	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  004a6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2254[ebp]
  004ac	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  004b3	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  004b9	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2254[ebp]
  004bf	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  004c6	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  004cc	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2254[ebp]
  004d2	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  004d9	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  004df	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  004e5	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  004ec	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  004f3	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  004fb	83 c2 06	 add	 edx, 6
$LN38@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  004fe	8b 86 70 01 00
	00		 mov	 eax, DWORD PTR [esi+368]
  00504	83 f8 ff	 cmp	 eax, -1
  00507	0f 84 91 00 00
	00		 je	 $LN40@OperateMin
  0050d	38 9e 74 01 00
	00		 cmp	 BYTE PTR [esi+372], bl
  00513	0f 85 85 00 00
	00		 jne	 $LN40@OperateMin
  00519	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0051f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00525	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0052b	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2251[ebp], eax
  00531	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00535	7e 67		 jle	 SHORT $LN40@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  00537	0f b7 86 70 01
	00 00		 movzx	 eax, WORD PTR [esi+368]

; 1637 : 			count++;

  0053e	41		 inc	 ecx
  0053f	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00546	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2251[ebp]
  0054c	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00553	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  00559	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2251[ebp]
  0055f	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  00566	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  0056c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2251[ebp]
  00572	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  00579	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  0057f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  00585	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  0058c	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  00593	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  0059b	83 c2 06	 add	 edx, 6
$LN40@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  0059e	8b 86 a0 01 00
	00		 mov	 eax, DWORD PTR [esi+416]
  005a4	83 f8 ff	 cmp	 eax, -1
  005a7	0f 84 91 00 00
	00		 je	 $LN42@OperateMin
  005ad	38 9e a4 01 00
	00		 cmp	 BYTE PTR [esi+420], bl
  005b3	0f 85 85 00 00
	00		 jne	 $LN42@OperateMin
  005b9	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  005bf	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  005c5	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  005cb	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2247[ebp], eax
  005d1	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  005d5	7e 67		 jle	 SHORT $LN42@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  005d7	0f b7 86 a0 01
	00 00		 movzx	 eax, WORD PTR [esi+416]

; 1637 : 			count++;

  005de	41		 inc	 ecx
  005df	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  005e6	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2247[ebp]
  005ec	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  005f3	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  005f9	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2247[ebp]
  005ff	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  00606	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  0060c	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2247[ebp]
  00612	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  00619	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  0061f	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  00625	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  0062c	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  00633	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  0063b	83 c2 06	 add	 edx, 6
$LN42@OperateMin:

; 1618 : 	pMsg.IllusionPts = m_ILLUSION_TEAM_PTS;
; 1619 : 	pMsg.Team = TEAM;
; 1620 : 
; 1621 : 	lOfs += sizeof(pMsg);
; 1622 : 	int count = 0;
; 1623 : 
; 1624 : 	int i;
; 1625 : 	for(i = 0; i < IT_MAXPLAYER;i++)
; 1626 : 	{
; 1627 : 		ILLUSIONTEMPLE_PLAYERINFO pPlayerInfo;
; 1628 : 
; 1629 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1630 : 			m_PlayerData[i].m_Team == TEAM &&

  0063e	8b 86 d0 01 00
	00		 mov	 eax, DWORD PTR [esi+464]
  00644	83 f8 ff	 cmp	 eax, -1
  00647	0f 84 91 00 00
	00		 je	 $LN44@OperateMin
  0064d	38 9e d4 01 00
	00		 cmp	 BYTE PTR [esi+468], bl
  00653	0f 85 85 00 00
	00		 jne	 $LN44@OperateMin
  00659	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0065f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00665	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0066b	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv2243[ebp], eax
  00671	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00675	7e 67		 jle	 SHORT $LN44@OperateMin

; 1631 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1632 : 		{
; 1633 : 			pPlayerInfo.aIndex = m_PlayerData[i].m_Index;

  00677	0f b7 86 d0 01
	00 00		 movzx	 eax, WORD PTR [esi+464]

; 1637 : 			count++;

  0067e	41		 inc	 ecx
  0067f	66 89 85 e4 fe
	ff ff		 mov	 WORD PTR _pPlayerInfo$1[ebp], ax
  00686	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2243[ebp]
  0068c	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00693	88 85 e6 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+2], al
  00699	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2243[ebp]
  0069f	0f b6 80 20 01
	00 00		 movzx	 eax, BYTE PTR [eax+288]
  006a6	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+3], al
  006ac	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv2243[ebp]
  006b2	0f b6 80 21 01
	00 00		 movzx	 eax, BYTE PTR [eax+289]
  006b9	88 85 e8 fe ff
	ff		 mov	 BYTE PTR _pPlayerInfo$1[ebp+4], al

; 1638 : 
; 1639 : 			memcpy(&SENDBUFF[lOfs],&pPlayerInfo,sizeof(pPlayerInfo));

  006bf	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _pPlayerInfo$1[ebp]
  006c5	89 84 15 fc fe
	ff ff		 mov	 DWORD PTR _SENDBUFF$[ebp+edx], eax
  006cc	0f b7 85 e8 fe
	ff ff		 movzx	 eax, WORD PTR _pPlayerInfo$1[ebp+4]
  006d3	66 89 84 15 00
	ff ff ff	 mov	 WORD PTR _SENDBUFF$[ebp+edx+4], ax

; 1640 : 			lOfs += sizeof(pPlayerInfo);

  006db	83 c2 06	 add	 edx, 6
$LN44@OperateMin:

; 1641 : 		}
; 1642 : 	}
; 1643 : 
; 1644 : 	if( TEAM == IT_ALLIED_TEAM )

  006de	84 db		 test	 bl, bl
  006e0	75 16		 jne	 SHORT $LN12@OperateMin

; 1645 : 	{
; 1646 : 		if( m_ALLIED_TEAM_COUNT != count )

  006e2	39 8e c8 03 00
	00		 cmp	 DWORD PTR [esi+968], ecx
  006e8	74 06		 je	 SHORT $LN14@OperateMin

; 1647 : 		{
; 1648 : 			m_ALLIED_TEAM_COUNT = count;

  006ea	89 8e c8 03 00
	00		 mov	 DWORD PTR [esi+968], ecx
$LN14@OperateMin:

; 1649 : 		}
; 1650 : 		pMsg.pCount = m_ALLIED_TEAM_COUNT;

  006f0	8a 86 c8 03 00
	00		 mov	 al, BYTE PTR [esi+968]

; 1651 : 	}
; 1652 : 	else

  006f6	eb 14		 jmp	 SHORT $LN46@OperateMin
$LN12@OperateMin:

; 1653 : 	{
; 1654 : 		if( m_ILLUSION_TEAM_COUNT != count )

  006f8	39 8e cc 03 00
	00		 cmp	 DWORD PTR [esi+972], ecx
  006fe	74 06		 je	 SHORT $LN15@OperateMin

; 1655 : 		{
; 1656 : 			m_ILLUSION_TEAM_COUNT = count;

  00700	89 8e cc 03 00
	00		 mov	 DWORD PTR [esi+972], ecx
$LN15@OperateMin:

; 1657 : 		}
; 1658 : 		pMsg.pCount = m_ILLUSION_TEAM_COUNT;

  00706	8a 86 cc 03 00
	00		 mov	 al, BYTE PTR [esi+972]
$LN46@OperateMin:

; 1659 : 	}
; 1660 : 
; 1661 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,1,lOfs);

  0070c	52		 push	 edx
  0070d	6a 01		 push	 1
  0070f	88 85 f9 fe ff
	ff		 mov	 BYTE PTR _pMsg$[ebp+13], al
  00715	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  0071b	68 bf 00 00 00	 push	 191			; 000000bfH
  00720	50		 push	 eax
  00721	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1662 : 	memcpy(&SENDBUFF[0],&pMsg,sizeof(pMsg));

  00726	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _pMsg$[ebp+8]
  0072c	83 c4 10	 add	 esp, 16			; 00000010H
  0072f	f3 0f 7e 85 ec
	fe ff ff	 movq	 xmm0, QWORD PTR _pMsg$[ebp]
  00737	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  0073c	89 85 04 ff ff
	ff		 mov	 DWORD PTR _SENDBUFF$[ebp+8], eax
  00742	66 8b 85 f8 fe
	ff ff		 mov	 ax, WORD PTR _pMsg$[ebp+12]
  00749	66 0f d6 85 fc
	fe ff ff	 movq	 QWORD PTR _SENDBUFF$[ebp], xmm0
  00751	66 89 85 08 ff
	ff ff		 mov	 WORD PTR _SENDBUFF$[ebp+12], ax
$LL7@OperateMin:

; 1665 : 	{
; 1666 : 		if( m_PlayerData[i].m_Index != -1 &&
; 1667 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&

  00758	8b 17		 mov	 edx, DWORD PTR [edi]
  0075a	83 fa ff	 cmp	 edx, -1
  0075d	74 2f		 je	 SHORT $LN5@OperateMin
  0075f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00764	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0076a	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  0076f	7e 1d		 jle	 SHORT $LN5@OperateMin
  00771	38 5f 04	 cmp	 BYTE PTR [edi+4], bl
  00774	75 18		 jne	 SHORT $LN5@OperateMin

; 1668 : 			m_PlayerData[i].m_Team == TEAM )
; 1669 : 		{
; 1670 : 			DataSend(m_PlayerData[i].m_Index,(LPBYTE)&SENDBUFF[0],pMsg.h.size);

  00776	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0077d	50		 push	 eax
  0077e	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _SENDBUFF$[ebp]
  00784	50		 push	 eax
  00785	52		 push	 edx
  00786	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0078b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@OperateMin:

; 1663 : 
; 1664 : 	for( i = 0; i < IT_MAXPLAYER; i++)

  0078e	83 c7 30	 add	 edi, 48			; 00000030H
  00791	83 ee 01	 sub	 esi, 1
  00794	75 c2		 jne	 SHORT $LL7@OperateMin

; 1671 : 		}
; 1672 : 	}
; 1673 : }

  00796	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00799	5f		 pop	 edi
  0079a	5e		 pop	 esi
  0079b	33 cd		 xor	 ecx, ebp
  0079d	5b		 pop	 ebx
  0079e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007a3	8b e5		 mov	 esp, ebp
  007a5	5d		 pop	 ebp
  007a6	c2 04 00	 ret	 4
?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ENDP	; CIllusionTempleProcess::OperateMiniMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SendAllUserAnyMsg@CIllusionTempleProcess@@QAEXPAEH@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_size$ = 12						; size = 4
?SendAllUserAnyMsg@CIllusionTempleProcess@@QAEXPAEH@Z PROC ; CIllusionTempleProcess::SendAllUserAnyMsg, COMDAT
; _this$ = ecx

; 2435 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 2436 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _size$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0000e	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL4@SendAllUse:

; 2437 : 	{
; 2438 : 		if( gObj[i].Connected == PLAYER_PLAYING &&

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00018	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0001d	75 14		 jne	 SHORT $LN2@SendAllUse
  0001f	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00024	75 0d		 jne	 SHORT $LN2@SendAllUse

; 2439 : 			gObj[i].Type == OBJ_USER)
; 2440 : 		{
; 2441 : 			DataSend(i,lpMsg,size);

  00026	53		 push	 ebx
  00027	ff 75 08	 push	 DWORD PTR _lpMsg$[ebp]
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendAllUse:

; 2436 : 	for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00033	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00039	47		 inc	 edi
  0003a	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00040	7c d1		 jl	 SHORT $LL4@SendAllUse
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 2442 : 		}
; 2443 : 	}
; 2444 : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
?SendAllUserAnyMsg@CIllusionTempleProcess@@QAEXPAEH@Z ENDP ; CIllusionTempleProcess::SendAllUserAnyMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?MonsterRegen@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?MonsterRegen@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::MonsterRegen, COMDAT
; _this$ = ecx

; 1557 : {

  00000	56		 push	 esi

; 1558 : 	for(int i = 0; i < IT_MAXMONSTER; i++)

  00001	8d 81 50 02 00
	00		 lea	 eax, DWORD PTR [ecx+592]
  00007	be 28 00 00 00	 mov	 esi, 40			; 00000028H
  0000c	0f 1f 40 00	 npad	 4
$LL4@MonsterReg:

; 1559 : 	{
; 1560 : 		if( m_MONSTER_NPC[i].m_Index != -1 &&

  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	83 f9 ff	 cmp	 ecx, -1
  00015	74 35		 je	 SHORT $LN2@MonsterReg
  00017	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  0001d	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00023	66 83 ba 98 05
	00 00 ff	 cmp	 WORD PTR [edx+1432], -1
  0002b	75 1f		 jne	 SHORT $LN2@MonsterReg

; 1561 : 			gObj[m_MONSTER_NPC[i].m_Index].m_PosNum == -1 )
; 1562 : 		{
; 1563 : 			gObj[m_MONSTER_NPC[i].m_Index].m_PosNum = m_MONSTER_NPC[i].m_Num;

  0002d	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00031	66 89 8a 98 05
	00 00		 mov	 WORD PTR [edx+1432], cx

; 1564 : 			gObj[m_MONSTER_NPC[i].m_Index].DieRegen = 2;

  00038	69 10 40 27 00
	00		 imul	 edx, DWORD PTR [eax], 10048
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00044	c6 84 0a 8a 05
	00 00 02	 mov	 BYTE PTR [edx+ecx+1418], 2
$LN2@MonsterReg:

; 1558 : 	for(int i = 0; i < IT_MAXMONSTER; i++)

  0004c	83 c0 08	 add	 eax, 8
  0004f	83 ee 01	 sub	 esi, 1
  00052	75 bc		 jne	 SHORT $LL4@MonsterReg
  00054	5e		 pop	 esi

; 1565 : 		}
; 1566 : 	}
; 1567 : }

  00055	c3		 ret	 0
?MonsterRegen@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::MonsterRegen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?LeaveUser@CIllusionTempleProcess@@QAEHH@Z
_TEXT	SEGMENT
_lpItem$1$ = -4						; size = 4
tv189 = 8						; size = 4
_pMsg$1 = 8						; size = 4
_aIndex$ = 8						; size = 4
?LeaveUser@CIllusionTempleProcess@@QAEHH@Z PROC		; CIllusionTempleProcess::LeaveUser, COMDAT
; _this$ = ecx

; 816  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 817  : 	if( OBJMAX_RANGE(aIndex) == FALSE )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	0f 88 0e 02 00
	00		 js	 $LN16@LeaveUser
  00013	33 c0		 xor	 eax, eax
  00015	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 fb 01 00
	00		 je	 $LN16@LeaveUser

; 821  : 	}
; 822  : 
; 823  : 	EnterCriticalSection(&this->m_CritSec);

  00026	57		 push	 edi
  00027	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0002a	50		 push	 eax
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 824  : 
; 825  : 	if( gObj[aIndex].iTempleIndex != -1 &&

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00037	69 fb 40 27 00
	00		 imul	 edi, ebx, 10048
  0003d	8b 84 0f 78 24
	00 00		 mov	 eax, DWORD PTR [edi+ecx+9336]
  00044	83 f8 ff	 cmp	 eax, -1
  00047	0f 84 5f 01 00
	00		 je	 $LN3@LeaveUser
  0004d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00050	c1 e0 04	 shl	 eax, 4
  00053	89 45 08	 mov	 DWORD PTR tv189[ebp], eax
  00056	3b 5c 30 20	 cmp	 ebx, DWORD PTR [eax+esi+32]
  0005a	0f 85 4c 01 00
	00		 jne	 $LN3@LeaveUser

; 826  : 		 aIndex == m_PlayerData[gObj[aIndex].iTempleIndex].m_Index )
; 827  : 	{
; 828  : 		IT_PLAYER_STRUCT* lpData = &m_PlayerData[gObj[aIndex].iTempleIndex];
; 829  : 
; 830  : 		if( lpData->m_TicketPos > -1 )

  00060	0f b6 44 30 48	 movzx	 eax, BYTE PTR [eax+esi+72]
  00065	83 f8 ff	 cmp	 eax, -1
  00068	7e 52		 jle	 SHORT $LN17@LeaveUser

; 831  : 		{
; 832  : 			CItem* lpItem = &gObj[aIndex].pInventory[lpData->m_TicketPos];

  0006a	69 c0 d4 00 00
	00		 imul	 eax, eax, 212
  00070	03 84 0f c0 11
	00 00		 add	 eax, DWORD PTR [edi+ecx+4544]
  00077	89 45 fc	 mov	 DWORD PTR _lpItem$1$[ebp], eax

; 833  : 
; 834  : 			if( lpItem != NULL && lpItem->IsItem() == TRUE && lpItem->m_Durability < 1.0f)

  0007a	74 40		 je	 SHORT $LN17@LeaveUser
  0007c	8b c8		 mov	 ecx, eax
  0007e	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00083	83 f8 01	 cmp	 eax, 1
  00086	75 34		 jne	 SHORT $LN17@LeaveUser
  00088	8b 45 fc	 mov	 eax, DWORD PTR _lpItem$1$[ebp]
  0008b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00093	0f 2f 40 24	 comiss	 xmm0, DWORD PTR [eax+36]
  00097	76 23		 jbe	 SHORT $LN17@LeaveUser

; 835  : 			{
; 836  : 				gObjInventoryDeleteItem(aIndex,lpData->m_TicketPos);

  00099	8b 45 08	 mov	 eax, DWORD PTR tv189[ebp]
  0009c	0f b6 44 30 48	 movzx	 eax, BYTE PTR [eax+esi+72]
  000a1	50		 push	 eax
  000a2	53		 push	 ebx
  000a3	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 837  : 				GCInventoryItemDeleteSend(aIndex,lpData->m_TicketPos,0);

  000a8	8b 45 08	 mov	 eax, DWORD PTR tv189[ebp]
  000ab	6a 00		 push	 0
  000ad	0f b6 44 30 48	 movzx	 eax, BYTE PTR [eax+esi+72]
  000b2	50		 push	 eax
  000b3	53		 push	 ebx
  000b4	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  000b9	83 c4 14	 add	 esp, 20			; 00000014H
$LN17@LeaveUser:

; 838  : 			}
; 839  : 		}
; 840  : 
; 841  : 		if( m_PlayerData[gObj[aIndex].iTempleIndex].m_Skill1Time > 0 )

  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c2	03 cf		 add	 ecx, edi
  000c4	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  000ca	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000cd	03 c0		 add	 eax, eax
  000cf	83 7c c6 28 00	 cmp	 DWORD PTR [esi+eax*8+40], 0
  000d4	76 1f		 jbe	 SHORT $LN6@LeaveUser

; 842  : 		{
; 843  : 			gObjRemoveBuffEffect(&gObj[aIndex],BUFF_IT_PROTECTION);

  000d6	6a 22		 push	 34			; 00000022H
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 844  : 			GCSendUseSkill(&gObj[aIndex],0xD2);

  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e3	83 c4 08	 add	 esp, 8
  000e6	03 c7		 add	 eax, edi
  000e8	8b ce		 mov	 ecx, esi
  000ea	68 d2 00 00 00	 push	 210			; 000000d2H
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN6@LeaveUser:

; 845  : 		}
; 846  : 
; 847  : 		if( m_PlayerData[gObj[aIndex].iTempleIndex].m_Skill2Time > 0 )

  000f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fb	03 cf		 add	 ecx, edi
  000fd	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  00103	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00106	03 c0		 add	 eax, eax
  00108	83 7c c6 2c 00	 cmp	 DWORD PTR [esi+eax*8+44], 0
  0010d	76 1f		 jbe	 SHORT $LN7@LeaveUser

; 848  : 		{
; 849  : 			gObjRemoveBuffEffect(&gObj[aIndex],BUFF_RESTRICTION);

  0010f	6a 41		 push	 65			; 00000041H
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 850  : 			GCSendUseSkill(&gObj[aIndex],0xD3);

  00117	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011c	83 c4 08	 add	 esp, 8
  0011f	03 c7		 add	 eax, edi
  00121	8b ce		 mov	 ecx, esi
  00123	68 d3 00 00 00	 push	 211			; 000000d3H
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN7@LeaveUser:

; 851  : 		}
; 852  : 
; 853  : 		if( m_PlayerData[gObj[aIndex].iTempleIndex].m_Team == IT_ALLIED_TEAM )

  0012e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00133	8b 84 07 78 24
	00 00		 mov	 eax, DWORD PTR [edi+eax+9336]
  0013a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0013d	c1 e0 04	 shl	 eax, 4
  00140	8a 44 30 24	 mov	 al, BYTE PTR [eax+esi+36]
  00144	84 c0		 test	 al, al
  00146	75 08		 jne	 SHORT $LN8@LeaveUser

; 854  : 		{
; 855  : 			m_ALLIED_TEAM_COUNT--;

  00148	ff 8e c8 03 00
	00		 dec	 DWORD PTR [esi+968]
  0014e	eb 0a		 jmp	 SHORT $LN10@LeaveUser
$LN8@LeaveUser:

; 856  : 		}
; 857  : 		else if( m_PlayerData[gObj[aIndex].iTempleIndex].m_Team == IT_ILLUSION_TEAM )

  00150	3c 01		 cmp	 al, 1
  00152	75 06		 jne	 SHORT $LN10@LeaveUser

; 858  : 		{
; 859  : 			m_ILLUSION_TEAM_COUNT--;

  00154	ff 8e cc 03 00
	00		 dec	 DWORD PTR [esi+972]
$LN10@LeaveUser:

; 860  : 		}
; 861  : 
; 862  : 		UserInit(gObj[aIndex].iTempleIndex);

  0015a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015f	8b ce		 mov	 ecx, esi
  00161	ff b4 07 78 24
	00 00		 push	 DWORD PTR [edi+eax+9336]
  00168	e8 00 00 00 00	 call	 ?UserInit@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::UserInit

; 863  : 		gObj[aIndex].iTempleIndex = -1;

  0016d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00172	c7 84 07 78 24
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [edi+eax+9336], -1

; 864  : 		UserCount--;

  0017d	ff 8e 28 02 00
	00		 dec	 DWORD PTR [esi+552]

; 865  : 
; 866  : 		LogAddTD("[Illusion Temple] (%d) LeaveUser: (%s)(%s)",

  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00189	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0018c	03 c7		 add	 eax, edi
  0018e	50		 push	 eax
  0018f	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00192	03 c7		 add	 eax, edi
  00194	50		 push	 eax
  00195	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0019c	40		 inc	 eax
  0019d	50		 push	 eax
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@PJKIAECJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5LeaveUser@
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001a9	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@LeaveUser:

; 867  : 			Temple+1,gObj[aIndex].AccountID,gObj[aIndex].Name);
; 868  : 	}
; 869  : 
; 870  : 	LeaveCriticalSection(&this->m_CritSec);

  001ac	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  001af	50		 push	 eax
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 871  : 
; 872  : 
; 873  : 	if( gObj[aIndex].PartyNumber >= 0 )

  001b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001bb	8b 8c 07 0c 06
	00 00		 mov	 ecx, DWORD PTR [edi+eax+1548]
  001c2	85 c9		 test	 ecx, ecx
  001c4	78 2d		 js	 SHORT $LN18@LeaveUser

; 874  : 	{
; 875  : 		PMSG_PARTYDELUSER pMsg;
; 876  : 		int index = gParty.GetIndex(gObj[aIndex].PartyNumber,gObj[aIndex].m_Index,gObj[aIndex].DBNumber);

  001c6	ff 74 07 30	 push	 DWORD PTR [edi+eax+48]
  001ca	ff 34 07	 push	 DWORD PTR [edi+eax]
  001cd	51		 push	 ecx
  001ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  001d3	e8 00 00 00 00	 call	 ?GetIndex@PartyClass@@QAEHHHH@Z ; PartyClass::GetIndex

; 877  : 
; 878  : 		if( index >= 0 )

  001d8	85 c0		 test	 eax, eax
  001da	78 17		 js	 SHORT $LN18@LeaveUser

; 879  : 		{
; 880  : 			pMsg.Number = index;

  001dc	88 45 0b	 mov	 BYTE PTR _pMsg$1[ebp+3], al

; 881  : 
; 882  : 			CGPartyDelUser(&pMsg,gObj[aIndex].m_Index);

  001df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e4	ff 34 07	 push	 DWORD PTR [edi+eax]
  001e7	8d 45 08	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  001ea	50		 push	 eax
  001eb	e8 00 00 00 00	 call	 ?CGPartyDelUser@@YAXPAUPMSG_PARTYDELUSER@@H@Z ; CGPartyDelUser
  001f0	83 c4 08	 add	 esp, 8
$LN18@LeaveUser:

; 883  : 		}
; 884  : 	}
; 885  : 
; 886  : 	gObj[aIndex].m_Change = -1;

  001f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001f8	c7 84 07 34 06
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [edi+eax+1588], -1

; 887  : 	gObjViewportListProtocolCreate(&gObj[aIndex]);

  00203	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00208	03 c7		 add	 eax, edi
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  00210	83 c4 04	 add	 esp, 4

; 888  : 	return true;

  00213	b8 01 00 00 00	 mov	 eax, 1
  00218	5f		 pop	 edi
  00219	5e		 pop	 esi
  0021a	5b		 pop	 ebx

; 889  : }

  0021b	8b e5		 mov	 esp, ebp
  0021d	5d		 pop	 ebp
  0021e	c2 04 00	 ret	 4
$LN16@LeaveUser:

; 818  : 	{
; 819  : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00221	68 33 03 00 00	 push	 819			; 00000333H
  00226	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00236	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  : 		return false;

  00239	33 c0		 xor	 eax, eax
  0023b	5e		 pop	 esi
  0023c	5b		 pop	 ebx

; 889  : }

  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c2 04 00	 ret	 4
?LeaveUser@CIllusionTempleProcess@@QAEHH@Z ENDP		; CIllusionTempleProcess::LeaveUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetTeam@CIllusionTempleProcess@@QAEEH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?GetTeam@CIllusionTempleProcess@@QAEEH@Z PROC		; CIllusionTempleProcess::GetTeam, COMDAT
; _this$ = ecx

; 1699 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1700 : 	if( OBJMAX_RANGE(aIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 41		 js	 SHORT $LN8@GetTeam
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 32		 je	 SHORT $LN8@GetTeam

; 1704 : 	}
; 1705 : 
; 1706 : 	if( gObj[aIndex].iTempleIndex != -1 &&

  0001c	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00022	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 33		 je	 SHORT $LN3@GetTeam
  00033	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00036	c1 e0 04	 shl	 eax, 4
  00039	39 54 30 20	 cmp	 DWORD PTR [eax+esi+32], edx
  0003d	74 06		 je	 SHORT $LN4@GetTeam
  0003f	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00043	7e 21		 jle	 SHORT $LN3@GetTeam
$LN4@GetTeam:

; 1707 : 		(m_PlayerData[gObj[aIndex].iTempleIndex].m_Index == aIndex ||
; 1708 : 		gObj[aIndex].Connected > PLAYER_LOGGED ))
; 1709 : 	{
; 1710 : 		return m_PlayerData[gObj[aIndex].iTempleIndex].m_Team;

  00045	8a 44 30 24	 mov	 al, BYTE PTR [eax+esi+36]
  00049	5e		 pop	 esi

; 1711 : 	}
; 1712 : 	return -1;
; 1713 : }

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN8@GetTeam:

; 1701 : 	{
; 1702 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0004e	68 a6 06 00 00	 push	 1702			; 000006a6H
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GetTeam:

; 1703 : 		return -1;

  00066	0c ff		 or	 al, 255			; 000000ffH
  00068	5e		 pop	 esi

; 1711 : 	}
; 1712 : 	return -1;
; 1713 : }

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?GetTeam@CIllusionTempleProcess@@QAEEH@Z ENDP		; CIllusionTempleProcess::GetTeam
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?Is2ndSkillActive@CIllusionTempleProcess@@QAEHH@Z
_TEXT	SEGMENT
_iEventIndex$ = 8					; size = 4
?Is2ndSkillActive@CIllusionTempleProcess@@QAEHH@Z PROC	; CIllusionTempleProcess::Is2ndSkillActive, COMDAT
; _this$ = ecx

; 2576 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2577 : 	if( IT_PLAYER_RANGE(iEventIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iEventIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 28		 js	 SHORT $LN7@Is2ndSkill
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 09	 cmp	 edx, 9
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN7@Is2ndSkill

; 2580 : 	}
; 2581 : 
; 2582 : 	if( m_PlayerData[iEventIndex].m_Index != -1 &&

  00016	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00019	03 c0		 add	 eax, eax
  0001b	83 7c c1 20 ff	 cmp	 DWORD PTR [ecx+eax*8+32], -1
  00020	74 10		 je	 SHORT $LN7@Is2ndSkill
  00022	83 7c c1 2c 00	 cmp	 DWORD PTR [ecx+eax*8+44], 0
  00027	76 09		 jbe	 SHORT $LN7@Is2ndSkill

; 2583 : 		m_PlayerData[iEventIndex].m_Skill2Time > 0 )
; 2584 : 	{
; 2585 : 		return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 2586 : 	}
; 2587 : return FALSE;
; 2588 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN7@Is2ndSkill:

; 2578 : 	{
; 2579 : 		return FALSE;

  00032	33 c0		 xor	 eax, eax

; 2586 : 	}
; 2587 : return FALSE;
; 2588 : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?Is2ndSkillActive@CIllusionTempleProcess@@QAEHH@Z ENDP	; CIllusionTempleProcess::Is2ndSkillActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?Is1stSkillActive@CIllusionTempleProcess@@QAEHH@Z
_TEXT	SEGMENT
_iEventIndex$ = 8					; size = 4
?Is1stSkillActive@CIllusionTempleProcess@@QAEHH@Z PROC	; CIllusionTempleProcess::Is1stSkillActive, COMDAT
; _this$ = ecx

; 2561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2562 : 	if( IT_PLAYER_RANGE(iEventIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iEventIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 28		 js	 SHORT $LN7@Is1stSkill
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 09	 cmp	 edx, 9
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN7@Is1stSkill

; 2565 : 	}
; 2566 : 
; 2567 : 	if( m_PlayerData[iEventIndex].m_Index != -1 &&

  00016	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00019	03 c0		 add	 eax, eax
  0001b	83 7c c1 20 ff	 cmp	 DWORD PTR [ecx+eax*8+32], -1
  00020	74 10		 je	 SHORT $LN7@Is1stSkill
  00022	83 7c c1 28 00	 cmp	 DWORD PTR [ecx+eax*8+40], 0
  00027	76 09		 jbe	 SHORT $LN7@Is1stSkill

; 2568 : 		m_PlayerData[iEventIndex].m_Skill1Time > 0 )
; 2569 : 	{
; 2570 : 		return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 2571 : 	}
; 2572 : return FALSE;
; 2573 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
$LN7@Is1stSkill:

; 2563 : 	{
; 2564 : 		return FALSE;

  00032	33 c0		 xor	 eax, eax

; 2571 : 	}
; 2572 : return FALSE;
; 2573 : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?Is1stSkillActive@CIllusionTempleProcess@@QAEHH@Z ENDP	; CIllusionTempleProcess::Is1stSkillActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetLeftTime@CIllusionTempleProcess@@QAEEXZ
_TEXT	SEGMENT
_pTime$1 = -36						; size = 8
_ltime$2 = -36						; size = 8
_this$1$ = -28						; size = 4
_FIRST_TIME$1$ = -24					; size = 4
_today$1$ = -20						; size = 4
_NOW_TIME$1$ = -16					; size = 4
_pFirstTime$2$ = -12					; size = 4
_pFirstTime$1$ = -8					; size = 4
_pTime$2$ = -4						; size = 4
?GetLeftTime@CIllusionTempleProcess@@QAEEXZ PROC	; CIllusionTempleProcess::GetLeftTime, COMDAT
; _this$ = ecx

; 931  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	89 5d e4	 mov	 DWORD PTR _this$1$[ebp], ebx

; 932  : 	BYTE LeftTime = 0;
; 933  : 
; 934  : 	if( GetState() == IT_STATE_CLOSED && OpenState() == TRUE )

  0000c	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00011	84 c0		 test	 al, al
  00013	75 15		 jne	 SHORT $LN7@GetLeftTim
  00015	8b cb		 mov	 ecx, ebx
  00017	e8 00 00 00 00	 call	 ?OpenState@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::OpenState
  0001c	83 f8 01	 cmp	 eax, 1
  0001f	75 09		 jne	 SHORT $LN7@GetLeftTim

; 935  : 	{
; 936  : 		LeftTime = 0;

  00021	32 db		 xor	 bl, bl

; 1032 : 	}
; 1033 : 	
; 1034 : return LeftTime;

  00023	8a c3		 mov	 al, bl
  00025	5b		 pop	 ebx

; 1035 : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN7@GetLeftTim:

; 937  : 	}
; 938  : 	else if( GetState() == IT_STATE_CLOSED && OpenState() == FALSE )

  0002a	8b cb		 mov	 ecx, ebx
  0002c	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00031	84 c0		 test	 al, al
  00033	75 1e		 jne	 SHORT $LN9@GetLeftTim
  00035	8b cb		 mov	 ecx, ebx
  00037	e8 00 00 00 00	 call	 ?OpenState@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::OpenState
  0003c	85 c0		 test	 eax, eax
  0003e	75 13		 jne	 SHORT $LN9@GetLeftTim

; 939  : 	{
; 940  : 		LeftTime = m_iRemainMinute - m_iIT_TIME_MIN_OPEN;

  00040	8a 9b 98 03 00
	00		 mov	 bl, BYTE PTR [ebx+920]
  00046	2a 1d 00 00 00
	00		 sub	 bl, BYTE PTR ?m_iIT_TIME_MIN_OPEN@@3HA

; 1032 : 	}
; 1033 : 	
; 1034 : return LeftTime;

  0004c	8a c3		 mov	 al, bl
  0004e	5b		 pop	 ebx

; 1035 : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN9@GetLeftTim:

; 941  : 	}
; 942  : 	else 
; 943  : 	{
; 944  : 		std::list<ILLUSION_TIME>::iterator Itor_;
; 945  : 
; 946  : 		ILLUSION_TIME pFirstTime;
; 947  : 		ILLUSION_TIME pTime;
; 948  : 
; 949  : 		DWORD FIRST_TIME = 0;
; 950  : 		DWORD CHECK_TIME = 0;
; 951  : 		DWORD NOW_TIME = 0;
; 952  : 
; 953  : 		tm * today;
; 954  : 		time_t ltime;
; 955  : 	
; 956  : 		if( m_IllusionStartTime.size() == 0 )

  00053	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A+4, 0
  0005a	75 14		 jne	 SHORT $LN11@GetLeftTim

; 957  : 		{
; 958  : 			MsgBox("Error : Illusion Temple StartTime size is 0");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GMBNLABJ@Error?5?3?5Illusion?5Temple?5StartTim@
  00061	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00066	83 c4 04	 add	 esp, 4

; 959  : 			return false;

  00069	32 c0		 xor	 al, al
  0006b	5b		 pop	 ebx

; 1035 : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN11@GetLeftTim:
  00070	56		 push	 esi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00071	8d 45 dc	 lea	 eax, DWORD PTR _ltime$2[ebp]
  00074	57		 push	 edi
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  0007b	8d 45 dc	 lea	 eax, DWORD PTR _ltime$2[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 __localtime64
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 43   : 		: _Ptr(_Pnode)

  00084	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 963  : 		today = localtime(&ltime);

  0008a	8b c8		 mov	 ecx, eax
  0008c	89 4d ec	 mov	 DWORD PTR _today$1$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  0008f	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 965  : 		NOW_TIME = today->tm_hour * 60 + today->tm_min;

  00092	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00095	c1 e2 04	 shl	 edx, 4
  00098	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  0009b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0009e	8d 1c 91	 lea	 ebx, DWORD PTR [ecx+edx*4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 43   : 		: _Ptr(_Pnode)

  000a1	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 965  : 		NOW_TIME = today->tm_hour * 60 + today->tm_min;

  000a3	89 5d f0	 mov	 DWORD PTR _NOW_TIME$1$[ebp], ebx

; 966  : 	
; 967  : 		pFirstTime = *m_IllusionStartTime.begin();

  000a6	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000a9	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000ac	89 45 f8	 mov	 DWORD PTR _pFirstTime$1$[ebp], eax
  000af	89 55 f4	 mov	 DWORD PTR _pFirstTime$2$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000b2	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 969  : 		for( Itor_ = m_IllusionStartTime.begin() ; Itor_ != m_IllusionStartTime.end(); ++Itor_ )

  000b4	74 58		 je	 SHORT $LN283@GetLeftTim
$LL4@GetLeftTim:

; 970  : 		{
; 971  : 			pTime = *Itor_;
; 972  : 	
; 973  : 			FIRST_TIME = pFirstTime.iHour * 60 + pFirstTime.iMinute;

  000b6	8b 75 f4	 mov	 esi, DWORD PTR _pFirstTime$2$[ebp]
  000b9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000bc	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
  000bf	c1 e0 04	 shl	 eax, 4
  000c2	2b 45 f8	 sub	 eax, DWORD PTR _pFirstTime$1$[ebp]
  000c5	89 7d fc	 mov	 DWORD PTR _pTime$2$[ebp], edi
  000c8	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]

; 974  : 			CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;
; 975  : 	
; 976  : 			if( FIRST_TIME == CHECK_TIME )

  000cb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
  000d1	89 45 e8	 mov	 DWORD PTR _FIRST_TIME$1$[ebp], eax
  000d4	8b c2		 mov	 eax, edx
  000d6	c1 e0 04	 shl	 eax, 4
  000d9	2b c2		 sub	 eax, edx
  000db	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000de	8b 7d e8	 mov	 edi, DWORD PTR _FIRST_TIME$1$[ebp]
  000e1	3b f8		 cmp	 edi, eax
  000e3	75 09		 jne	 SHORT $LN12@GetLeftTim

; 977  : 			{
; 978  : 				if( NOW_TIME < CHECK_TIME )

  000e5	3b d8		 cmp	 ebx, eax
  000e7	72 20		 jb	 SHORT $LN274@GetLeftTim

; 981  : 					break;
; 982  : 				}
; 983  : 				continue;

  000e9	8b 45 f8	 mov	 eax, DWORD PTR _pFirstTime$1$[ebp]
  000ec	eb 13		 jmp	 SHORT $LN2@GetLeftTim
$LN12@GetLeftTim:

; 984  : 			}
; 985  : 	
; 986  : 			if( NOW_TIME >= FIRST_TIME &&

  000ee	3b df		 cmp	 ebx, edi
  000f0	72 04		 jb	 SHORT $LN14@GetLeftTim
  000f2	3b d8		 cmp	 ebx, eax
  000f4	72 21		 jb	 SHORT $LN282@GetLeftTim
$LN14@GetLeftTim:

; 987  : 				NOW_TIME < CHECK_TIME )
; 988  : 			{
; 989  : 				break;
; 990  : 			}
; 991  : 	
; 992  : 			pFirstTime = *Itor_;

  000f6	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
  000f9	8b c2		 mov	 eax, edx
  000fb	89 45 f8	 mov	 DWORD PTR _pFirstTime$1$[ebp], eax
  000fe	89 7d f4	 mov	 DWORD PTR _pFirstTime$2$[ebp], edi
$LN2@GetLeftTim:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00101	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00103	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 969  : 		for( Itor_ = m_IllusionStartTime.begin() ; Itor_ != m_IllusionStartTime.end(); ++Itor_ )

  00105	75 af		 jne	 SHORT $LL4@GetLeftTim
  00107	eb 0e		 jmp	 SHORT $LN282@GetLeftTim
$LN274@GetLeftTim:

; 979  : 				{
; 980  : 					pTime = *Itor_;

  00109	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0010c	eb 06		 jmp	 SHORT $LN284@GetLeftTim
$LN283@GetLeftTim:
  0010e	8b 45 e0	 mov	 eax, DWORD PTR _pTime$1[ebp+4]
  00111	8b 55 dc	 mov	 edx, DWORD PTR _pTime$1[ebp]
$LN284@GetLeftTim:
  00114	89 45 fc	 mov	 DWORD PTR _pTime$2$[ebp], eax
$LN282@GetLeftTim:

; 993  : 		}
; 994  : 	
; 995  : 		int CHECK_COUNT = 2;

  00117	bf 02 00 00 00	 mov	 edi, 2
  0011c	0f 1f 40 00	 npad	 4
$LL5@GetLeftTim:

; 996  : 	
; 997  : 		while( CHECK_COUNT-- )

  00120	4f		 dec	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00121	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 999  : 			if( Itor_ == m_IllusionStartTime.end() )

  00123	75 0b		 jne	 SHORT $LN15@GetLeftTim

; 1000 : 			{
; 1001 : 				Itor_ = m_IllusionStartTime.begin();

  00125	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1002 : 				pTime = *Itor_;

  00127	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0012a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0012d	89 45 fc	 mov	 DWORD PTR _pTime$2$[ebp], eax
$LN15@GetLeftTim:

; 1003 : 			}
; 1004 : 	
; 1005 : 			CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;

  00130	8b 5d fc	 mov	 ebx, DWORD PTR _pTime$2$[ebp]
  00133	8b c2		 mov	 eax, edx
  00135	c1 e0 04	 shl	 eax, 4
  00138	2b c2		 sub	 eax, edx
  0013a	8d 1c 83	 lea	 ebx, DWORD PTR [ebx+eax*4]

; 1006 : 	
; 1007 : 			if( today->tm_hour <= pTime.iHour )

  0013d	8b 45 ec	 mov	 eax, DWORD PTR _today$1$[ebp]

; 1008 : 			{
; 1009 : 				LeftTime = (BYTE)(CHECK_TIME - NOW_TIME);

  00140	2a 5d f0	 sub	 bl, BYTE PTR _NOW_TIME$1$[ebp]
  00143	39 50 08	 cmp	 DWORD PTR [eax+8], edx
  00146	7e 03		 jle	 SHORT $LN17@GetLeftTim

; 1010 : 			}
; 1011 : 			else
; 1012 : 			{
; 1013 : 				LeftTime = (BYTE)(1440 - NOW_TIME + CHECK_TIME);

  00148	80 eb 60	 sub	 bl, 96			; 00000060H
$LN17@GetLeftTim:

; 1014 : 			}
; 1015 : 	
; 1016 : 			if( LeftTime <= m_iIT_TIME_MIN_OPEN )

  0014b	0f b6 c3	 movzx	 eax, bl
  0014e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_iIT_TIME_MIN_OPEN@@3HA ; m_iIT_TIME_MIN_OPEN
  00154	7f 15		 jg	 SHORT $LN18@GetLeftTim
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00156	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00158	3b ce		 cmp	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 1019 : 				if( Itor_ != m_IllusionStartTime.end() )

  0015a	74 09		 je	 SHORT $LN20@GetLeftTim

; 1020 : 				{
; 1021 : 					pTime = *Itor_;

  0015c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0015f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00162	89 45 fc	 mov	 DWORD PTR _pTime$2$[ebp], eax
$LN20@GetLeftTim:

; 996  : 	
; 997  : 		while( CHECK_COUNT-- )

  00165	85 ff		 test	 edi, edi
  00167	75 b7		 jne	 SHORT $LL5@GetLeftTim

; 984  : 			}
; 985  : 	
; 986  : 			if( NOW_TIME >= FIRST_TIME &&

  00169	eb 06		 jmp	 SHORT $LN277@GetLeftTim
$LN18@GetLeftTim:

; 1022 : 				}
; 1023 : 			}
; 1024 : 			else
; 1025 : 			{
; 1026 : 				LeftTime -= m_iIT_TIME_MIN_OPEN;

  0016b	2a 1d 00 00 00
	00		 sub	 bl, BYTE PTR ?m_iIT_TIME_MIN_OPEN@@3HA
$LN277@GetLeftTim:

; 1027 : 				break;
; 1028 : 			}
; 1029 : 		}
; 1030 : 		DWORD dwTICK_COUNT = GetTickCount();

  00171	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 1031 : 		dwTICK_COUNT3 = dwTICK_COUNT + ( 60000 - today->tm_sec * 1000 );

  00177	8b 55 ec	 mov	 edx, DWORD PTR _today$1$[ebp]
  0017a	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	2b 0a		 sub	 ecx, DWORD PTR [edx]
  00183	69 c9 e8 03 00
	00		 imul	 ecx, ecx, 1000
  00189	03 c8		 add	 ecx, eax
  0018b	8b 45 e4	 mov	 eax, DWORD PTR _this$1$[ebp]
  0018e	89 88 a4 03 00
	00		 mov	 DWORD PTR [eax+932], ecx

; 1032 : 	}
; 1033 : 	
; 1034 : return LeftTime;

  00194	8a c3		 mov	 al, bl
  00196	5b		 pop	 ebx

; 1035 : }

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
?GetLeftTime@CIllusionTempleProcess@@QAEEXZ ENDP	; CIllusionTempleProcess::GetLeftTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?DropReward@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
tv347 = 8						; size = 4
_iIndex$ = 8						; size = 4
?DropReward@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::DropReward, COMDAT
; _this$ = ecx

; 2310 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2311 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00005	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 88 79 01 00
	00		 js	 $LN2@DropReward
  00012	33 c0		 xor	 eax, eax
  00014	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 66 01 00
	00		 je	 $LN2@DropReward

; 2312 : 	{
; 2313 : 		return;
; 2314 : 	}
; 2315 : 
; 2316 : 	if( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index != gObj[iIndex].m_Index )

  00025	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  0002b	57		 push	 edi
  0002c	89 4d 08	 mov	 DWORD PTR tv347[ebp], ecx
  0002f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00035	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  0003b	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  0003e	c1 e7 04	 shl	 edi, 4
  00041	03 fb		 add	 edi, ebx
  00043	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00046	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00048	0f 85 3c 01 00
	00		 jne	 $LN20@DropReward

; 2317 : 	{
; 2318 : 		return;
; 2319 : 	}
; 2320 : 
; 2321 : 	if( GetState() != IT_STATE_PLAYEND )

  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00055	3c 03		 cmp	 al, 3
  00057	0f 85 2d 01 00
	00		 jne	 $LN20@DropReward

; 2322 : 	{
; 2323 : 		return;
; 2324 : 	}
; 2325 : 
; 2326 : 	if( m_PlayerData[gObj[iIndex].iTempleIndex].m_Team == 0xFF )

  0005d	8a 47 24	 mov	 al, BYTE PTR [edi+36]
  00060	3c ff		 cmp	 al, 255			; 000000ffH
  00062	0f 84 22 01 00
	00		 je	 $LN20@DropReward

; 2327 : 	{
; 2328 : 		return;
; 2329 : 	}
; 2330 : 
; 2331 : 	if( m_WinTeam == 0xFF )

  00068	8a 8b d2 03 00
	00		 mov	 cl, BYTE PTR [ebx+978]
  0006e	80 f9 ff	 cmp	 cl, 255			; 000000ffH
  00071	0f 84 13 01 00
	00		 je	 $LN20@DropReward

; 2332 : 	{
; 2333 : 		return;
; 2334 : 	}
; 2335 : 
; 2336 : 	if( m_PlayerData[gObj[iIndex].iTempleIndex].m_Team != m_WinTeam )

  00077	3a c1		 cmp	 al, cl
  00079	0f 85 0b 01 00
	00		 jne	 $LN20@DropReward

; 2337 : 	{
; 2338 : 		return;
; 2339 : 	}
; 2340 : 
; 2341 : 	if( m_PlayerData[gObj[iIndex].iTempleIndex].m_bReward == TRUE )

  0007f	83 7f 44 01	 cmp	 DWORD PTR [edi+68], 1
  00083	0f 84 01 01 00
	00		 je	 $LN20@DropReward

; 2342 : 	{
; 2343 : 		return;
; 2344 : 	}
; 2345 : 
; 2346 : 	m_PlayerData[gObj[iIndex].iTempleIndex].m_bReward = TRUE;
; 2347 : 
; 2348 : 
; 2349 : 	switch( (gObj[iIndex].MapNumber - MAP_INDEX_ILLUSIONTEMPLE1) )

  00089	8b 4d 08	 mov	 ecx, DWORD PTR tv347[ebp]
  0008c	c7 47 44 01 00
	00 00		 mov	 DWORD PTR [edi+68], 1
  00093	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	0f b6 91 23 01
	00 00		 movzx	 edx, BYTE PTR [ecx+291]
  000a0	8d 42 d3	 lea	 eax, DWORD PTR [edx-45]
  000a3	83 f8 05	 cmp	 eax, 5
  000a6	0f 87 de 00 00
	00		 ja	 $LN20@DropReward
  000ac	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@DropReward[eax*4]
$LN11@DropReward:

; 2350 : 	{
; 2351 : 	case 0:
; 2352 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple1, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  000b3	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000ba	50		 push	 eax
  000bb	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]

; 2365 : 		break;
; 2366 : 	case 5:
; 2367 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple6, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  000c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  000c7	50		 push	 eax
  000c8	52		 push	 edx
  000c9	56		 push	 esi
  000ca	6a 09		 push	 9
  000cc	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx

; 2368 : 		break;
; 2369 : 	}
; 2370 : }

  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN12@DropReward:

; 2353 : 		break;
; 2354 : 	case 1:
; 2355 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple2, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  000d8	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000df	50		 push	 eax
  000e0	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]

; 2365 : 		break;
; 2366 : 	case 5:
; 2367 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple6, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  000e7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  000ec	50		 push	 eax
  000ed	52		 push	 edx
  000ee	56		 push	 esi
  000ef	6a 0a		 push	 10			; 0000000aH
  000f1	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx

; 2368 : 		break;
; 2369 : 	}
; 2370 : }

  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
$LN13@DropReward:

; 2356 : 		break;
; 2357 : 	case 2:
; 2358 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple3, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  000fd	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00104	50		 push	 eax
  00105	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]

; 2365 : 		break;
; 2366 : 	case 5:
; 2367 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple6, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  0010c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  00111	50		 push	 eax
  00112	52		 push	 edx
  00113	56		 push	 esi
  00114	6a 0b		 push	 11			; 0000000bH
  00116	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  0011b	5f		 pop	 edi
  0011c	5e		 pop	 esi
  0011d	5b		 pop	 ebx

; 2368 : 		break;
; 2369 : 	}
; 2370 : }

  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
$LN14@DropReward:

; 2359 : 		break;
; 2360 : 	case 3:
; 2361 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple4, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  00122	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00129	50		 push	 eax
  0012a	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]

; 2365 : 		break;
; 2366 : 	case 5:
; 2367 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple6, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  00131	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  00136	50		 push	 eax
  00137	52		 push	 edx
  00138	56		 push	 esi
  00139	6a 0c		 push	 12			; 0000000cH
  0013b	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  00140	5f		 pop	 edi
  00141	5e		 pop	 esi
  00142	5b		 pop	 ebx

; 2368 : 		break;
; 2369 : 	}
; 2370 : }

  00143	5d		 pop	 ebp
  00144	c2 04 00	 ret	 4
$LN15@DropReward:

; 2362 : 		break;
; 2363 : 	case 4:
; 2364 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple5, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  00147	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0014e	50		 push	 eax
  0014f	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]

; 2365 : 		break;
; 2366 : 	case 5:
; 2367 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple6, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  00156	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  0015b	50		 push	 eax
  0015c	52		 push	 edx
  0015d	56		 push	 esi
  0015e	6a 0d		 push	 13			; 0000000dH
  00160	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx

; 2368 : 		break;
; 2369 : 	}
; 2370 : }

  00168	5d		 pop	 ebp
  00169	c2 04 00	 ret	 4
$LN16@DropReward:

; 2365 : 		break;
; 2366 : 	case 5:
; 2367 : 		g_EventItemBagManager.OpenSpecial(EventBagSpecial::IllusionTemple6, iIndex, gObj[iIndex].MapNumber, gObj[iIndex].X, gObj[iIndex].Y);

  0016c	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  00173	50		 push	 eax
  00174	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  0017b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  00180	50		 push	 eax
  00181	52		 push	 edx
  00182	56		 push	 esi
  00183	6a 0e		 push	 14			; 0000000eH
  00185	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial
$LN20@DropReward:
  0018a	5f		 pop	 edi
$LN2@DropReward:
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx

; 2368 : 		break;
; 2369 : 	}
; 2370 : }

  0018d	5d		 pop	 ebp
  0018e	c2 04 00	 ret	 4
  00191	0f 1f 00	 npad	 3
$LN23@DropReward:
  00194	00 00 00 00	 DD	 $LN11@DropReward
  00198	00 00 00 00	 DD	 $LN12@DropReward
  0019c	00 00 00 00	 DD	 $LN13@DropReward
  001a0	00 00 00 00	 DD	 $LN14@DropReward
  001a4	00 00 00 00	 DD	 $LN15@DropReward
  001a8	00 00 00 00	 DD	 $LN16@DropReward
?DropReward@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::DropReward
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ItemDrop@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ItemDrop@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::ItemDrop, COMDAT
; _this$ = ecx

; 2428 : 	if( m_PlayerData[lpObj->iTempleIndex].m_Index != lpObj->m_Index )
; 2429 : 		return;
; 2430 : 
; 2431 : 	//Item drop from player kill
; 2432 : }

  00000	c2 04 00	 ret	 4
?ItemDrop@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::ItemDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetShield@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?SetShield@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleProcess::SetShield, COMDAT
; _this$ = ecx

; 2121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2122 : 
; 2123 : 	if( gCheckSkillDistance(lpObj->m_Index,lpTargetObj->m_Index,0xD5) == FALSE )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000b	68 d5 00 00 00	 push	 213			; 000000d5H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	ff 37		 push	 DWORD PTR [edi]
  00014	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  00019	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001c	85 c0		 test	 eax, eax
  0001e	75 06		 jne	 SHORT $LN2@SetShield
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 2140 : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN2@SetShield:

; 2124 : 	{
; 2125 : 		return false;
; 2126 : 	}
; 2127 : 
; 2128 : 	lpTargetObj->lpAttackObj = lpObj;
; 2129 : 
; 2130 : 	if( lpTargetObj->iShield <= 1 )

  00026	8b 86 2c 01 00
	00		 mov	 eax, DWORD PTR [esi+300]
  0002c	89 be b4 05 00
	00		 mov	 DWORD PTR [esi+1460], edi
  00032	83 f8 01	 cmp	 eax, 1
  00035	7f 04		 jg	 SHORT $LN3@SetShield

; 2131 : 	{
; 2132 : 		GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  00037	6a 00		 push	 0

; 2133 : 		return true;

  00039	eb 0c		 jmp	 SHORT $LN5@SetShield
$LN3@SetShield:

; 2134 : 	}
; 2135 : 
; 2136 : 	int damage = lpTargetObj->iShield / 2;

  0003b	99		 cdq
  0003c	2b c2		 sub	 eax, edx
  0003e	d1 f8		 sar	 eax, 1

; 2137 : 	lpTargetObj->iShield = damage;

  00040	89 86 2c 01 00
	00		 mov	 DWORD PTR [esi+300], eax

; 2138 : 	GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,damage);

  00046	50		 push	 eax
$LN5@SetShield:
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	ff 36		 push	 DWORD PTR [esi]
  0004f	ff 37		 push	 DWORD PTR [edi]
  00051	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  00056	83 c4 18	 add	 esp, 24			; 00000018H

; 2139 : 	return true;

  00059	b8 01 00 00 00	 mov	 eax, 1
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi

; 2140 : }

  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?SetShield@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleProcess::SetShield
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetTeleport@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_y$1$ = -12						; size = 4
tv243 = -8						; size = 4
tv242 = -4						; size = 4
tv241 = 8						; size = 4
_lpObj$ = 8						; size = 4
?SetTeleport@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::SetTeleport, COMDAT
; _this$ = ecx

; 2067 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 2068 : 	if( gObjCheckUsedBuffEffect(lpObj,BUFF_STUN) == TRUE ||
; 2069 : 		gObjCheckUsedBuffEffect(lpObj,BUFF_SLEEP) == TRUE ||
; 2070 : 		gObjCheckUsedBuffEffect(lpObj,BUFF_FREEZE) == TRUE ||

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000a	57		 push	 edi
  0000b	6a 3d		 push	 61			; 0000003dH
  0000d	56		 push	 esi
  0000e	8b f9		 mov	 edi, ecx
  00010	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00015	83 c4 08	 add	 esp, 8
  00018	3c 01		 cmp	 al, 1
  0001a	0f 84 27 01 00
	00		 je	 $LN5@SetTelepor
  00020	6a 48		 push	 72			; 00000048H
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00028	83 c4 08	 add	 esp, 8
  0002b	3c 01		 cmp	 al, 1
  0002d	0f 84 14 01 00
	00		 je	 $LN5@SetTelepor
  00033	68 92 00 00 00	 push	 146			; 00000092H
  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0003e	83 c4 08	 add	 esp, 8
  00041	3c 01		 cmp	 al, 1
  00043	0f 84 fe 00 00
	00		 je	 $LN5@SetTelepor
  00049	68 93 00 00 00	 push	 147			; 00000093H
  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00054	83 c4 08	 add	 esp, 8
  00057	3c 01		 cmp	 al, 1
  00059	0f 84 e8 00 00
	00		 je	 $LN5@SetTelepor

; 2075 : 	}
; 2076 : 
; 2077 : 	int RelicPlayer = m_RELIC_PLAYER;
; 2078 : 
; 2079 : 	if( RelicPlayer == -1 )
; 2080 : 	{
; 2081 : 		GCSendUseSkill(lpObj->m_Index,lpObj->m_Index,0xD4,FALSE);

  0005f	8b 06		 mov	 eax, DWORD PTR [esi]
  00061	8b cf		 mov	 ecx, edi
  00063	53		 push	 ebx
  00064	8b 9f b8 03 00
	00		 mov	 ebx, DWORD PTR [edi+952]
  0006a	83 fb ff	 cmp	 ebx, -1
  0006d	74 04		 je	 SHORT $LN20@SetTelepor

; 2082 : 		return false;
; 2083 : 	}
; 2084 : 
; 2085 : 	if( RelicPlayer == lpObj->m_Index )

  0006f	3b d8		 cmp	 ebx, eax
  00071	75 19		 jne	 SHORT $LN7@SetTelepor
$LN20@SetTelepor:

; 2086 : 	{
; 2087 : 		GCSendUseSkill(lpObj->m_Index,lpObj->m_Index,0xD4,FALSE);

  00073	6a 00		 push	 0
  00075	68 d4 00 00 00	 push	 212			; 000000d4H
  0007a	50		 push	 eax
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z ; CIllusionTempleProcess::GCSendUseSkill
  00081	5b		 pop	 ebx
  00082	5f		 pop	 edi
  00083	33 c0		 xor	 eax, eax
  00085	5e		 pop	 esi

; 2118 : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
$LN7@SetTelepor:

; 2088 : 		return false;
; 2089 : 	}
; 2090 : 
; 2091 : 	GCSendUseSkill(lpObj->m_Index,lpObj->m_Index,0xD4,TRUE);

  0008c	6a 01		 push	 1
  0008e	68 d4 00 00 00	 push	 212			; 000000d4H
  00093	50		 push	 eax
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z ; CIllusionTempleProcess::GCSendUseSkill
  0009a	69 c3 40 27 00
	00		 imul	 eax, ebx, 10048

; 2092 : 
; 2093 : 	int x = 0;
; 2094 : 	int y = 0;
; 2095 : 	int count = 50;

  000a0	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
  000a5	89 45 f8	 mov	 DWORD PTR tv243[ebp], eax
  000a8	8d 98 20 01 00
	00		 lea	 ebx, DWORD PTR [eax+288]
  000ae	05 21 01 00 00	 add	 eax, 289		; 00000121H
  000b3	89 5d fc	 mov	 DWORD PTR tv242[ebp], ebx
  000b6	89 45 08	 mov	 DWORD PTR tv241[ebp], eax
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@SetTelepor:

; 2096 : 	int bSuccess = FALSE;
; 2097 : 
; 2098 : 	while( count-- != 0 )

  000c0	4f		 dec	 edi

; 2099 : 	{
; 2100 : 		x = gObj[RelicPlayer].X + rand()%3 - 1;

  000c1	e8 00 00 00 00	 call	 _rand
  000c6	99		 cdq
  000c7	b9 03 00 00 00	 mov	 ecx, 3
  000cc	f7 f9		 idiv	 ecx
  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d3	4a		 dec	 edx
  000d4	0f b6 1c 03	 movzx	 ebx, BYTE PTR [ebx+eax]
  000d8	03 da		 add	 ebx, edx

; 2101 : 		y = gObj[RelicPlayer].Y + rand()%3 - 1;

  000da	e8 00 00 00 00	 call	 _rand
  000df	99		 cdq
  000e0	b9 03 00 00 00	 mov	 ecx, 3
  000e5	f7 f9		 idiv	 ecx
  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR tv241[ebp]
  000ef	0f b6 04 01	 movzx	 eax, BYTE PTR [ecx+eax]
  000f3	48		 dec	 eax
  000f4	03 c2		 add	 eax, edx

; 2102 : 
; 2103 : 		if( gObjCheckTeleportArea(lpObj->m_Index,x,y) )

  000f6	50		 push	 eax
  000f7	53		 push	 ebx
  000f8	ff 36		 push	 DWORD PTR [esi]
  000fa	89 45 f4	 mov	 DWORD PTR _y$1$[ebp], eax
  000fd	e8 00 00 00 00	 call	 ?gObjCheckTeleportArea@@YAHHEE@Z ; gObjCheckTeleportArea
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 21		 jne	 SHORT $LN17@SetTelepor

; 2096 : 	int bSuccess = FALSE;
; 2097 : 
; 2098 : 	while( count-- != 0 )

  00109	8b 5d fc	 mov	 ebx, DWORD PTR tv242[ebp]
  0010c	85 ff		 test	 edi, edi
  0010e	75 b0		 jne	 SHORT $LL2@SetTelepor

; 2104 : 		{
; 2105 : 			bSuccess = TRUE;
; 2106 : 			break;
; 2107 : 		}
; 2108 : 	}
; 2109 : 
; 2110 : 	if( bSuccess == FALSE )
; 2111 : 	{
; 2112 : 		x = gObj[RelicPlayer].X;

  00110	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00115	8b 4d f8	 mov	 ecx, DWORD PTR tv243[ebp]
  00118	0f b6 9c 01 20
	01 00 00	 movzx	 ebx, BYTE PTR [ecx+eax+288]

; 2113 : 		y = gObj[RelicPlayer].Y;

  00120	0f b6 84 01 21
	01 00 00	 movzx	 eax, BYTE PTR [ecx+eax+289]
  00128	eb 03		 jmp	 SHORT $LN9@SetTelepor
$LN17@SetTelepor:
  0012a	8b 45 f4	 mov	 eax, DWORD PTR _y$1$[ebp]
$LN9@SetTelepor:

; 2114 : 	}
; 2115 : 
; 2116 : 	gObjTeleportMagicUse(lpObj->m_Index,x,y);

  0012d	50		 push	 eax
  0012e	53		 push	 ebx
  0012f	ff 36		 push	 DWORD PTR [esi]
  00131	e8 00 00 00 00	 call	 ?gObjTeleportMagicUse@@YAXHEE@Z ; gObjTeleportMagicUse
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2117 : 	return true;

  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	5b		 pop	 ebx
  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi

; 2118 : }

  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 04 00	 ret	 4
$LN5@SetTelepor:

; 2071 : 		gObjCheckUsedBuffEffect(lpObj,BUFF_EARTHBINDS) == TRUE )
; 2072 : 	{
; 2073 : 		GCSendUseSkill(lpObj->m_Index,lpObj->m_Index,0xD4,FALSE);

  00147	8b 06		 mov	 eax, DWORD PTR [esi]
  00149	8b cf		 mov	 ecx, edi
  0014b	6a 00		 push	 0
  0014d	68 d4 00 00 00	 push	 212			; 000000d4H
  00152	50		 push	 eax
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z ; CIllusionTempleProcess::GCSendUseSkill
  00159	5f		 pop	 edi

; 2074 : 		return false;

  0015a	33 c0		 xor	 eax, eax
  0015c	5e		 pop	 esi

; 2118 : }

  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	c2 04 00	 ret	 4
?SetTeleport@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::SetTeleport
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetImobilize@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?SetImobilize@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleProcess::SetImobilize, COMDAT
; _this$ = ecx

; 2049 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2050 : 	if( gCheckSkillDistance(lpObj->m_Index,lpTargetObj->m_Index,0xD3) == FALSE )

  00005	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0000e	68 d3 00 00 00	 push	 211			; 000000d3H
  00013	ff 36		 push	 DWORD PTR [esi]
  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gCheckSkillDistance@@YAHHHH@Z ; gCheckSkillDistance
  0001c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001f	85 c0		 test	 eax, eax
  00021	75 07		 jne	 SHORT $LN2@SetImobili
  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx

; 2064 : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN2@SetImobili:

; 2051 : 	{
; 2052 : 		return false;
; 2053 : 	}
; 2054 : 
; 2055 : 	m_PlayerData[lpTargetObj->iTempleIndex].m_Skill2Time = 15;

  0002a	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]

; 2056 : 	lpTargetObj->lpAttackObj = lpObj;
; 2057 : 	gObjAddBuffEffect(lpTargetObj,BUFF_RESTRICTION,0,0,0,0,-10);

  00030	6a f6		 push	 -10			; fffffff6H
  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00039	6a 00		 push	 0
  0003b	03 c0		 add	 eax, eax
  0003d	6a 00		 push	 0
  0003f	6a 41		 push	 65			; 00000041H
  00041	56		 push	 esi
  00042	c7 44 c3 2c 0f
	00 00 00	 mov	 DWORD PTR [ebx+eax*8+44], 15 ; 0000000fH
  0004a	89 be b4 05 00
	00		 mov	 DWORD PTR [esi+1460], edi
  00050	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2058 : 	
; 2059 : 	lpTargetObj->PathCount = 0;
; 2060 : 	lpTargetObj->PathStartEnd = 0;
; 2061 : 
; 2062 : 	gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  00055	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  0005c	50		 push	 eax
  0005d	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00064	50		 push	 eax
  00065	ff 36		 push	 DWORD PTR [esi]
  00067	c7 86 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+344], 0
  00071	c6 86 60 01 00
	00 00		 mov	 BYTE PTR [esi+352], 0
  00078	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0007d	83 c4 28	 add	 esp, 40			; 00000028H

; 2063 : return true;

  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 2064 : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?SetImobilize@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleProcess::SetImobilize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::SetProtect, COMDAT
; _this$ = ecx

; 2042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2043 : 	m_PlayerData[lpObj->iTempleIndex].m_Skill1Time = 15;

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]

; 2044 : 	gObjAddBuffEffect(lpObj,BUFF_IT_PROTECTION,0,0,0,0,-10);

  00006	6a f6		 push	 -10			; fffffff6H
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	8b 82 78 24 00
	00		 mov	 eax, DWORD PTR [edx+9336]
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	6a 22		 push	 34			; 00000022H
  00018	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001b	03 c0		 add	 eax, eax
  0001d	52		 push	 edx
  0001e	c7 44 c1 28 0f
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+40], 15 ; 0000000fH
  00026	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0002b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2045 : 	return true;

  0002e	b8 01 00 00 00	 mov	 eax, 1

; 2046 : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::SetProtect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?UserDie@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?UserDie@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::UserDie, COMDAT
; _this$ = ecx

; 2170 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2171 : 	if( lpObj->iTempleIndex == -1 ||

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  00010	83 f8 ff	 cmp	 eax, -1
  00013	0f 84 99 00 00
	00		 je	 $LN3@UserDie
  00019	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001e	03 c0		 add	 eax, eax
  00020	39 4c c7 20	 cmp	 DWORD PTR [edi+eax*8+32], ecx
  00024	0f 85 88 00 00
	00		 jne	 $LN3@UserDie

; 2172 : 		m_PlayerData[lpObj->iTempleIndex].m_Index != lpObj->m_Index )
; 2173 : 	{
; 2174 : 		return;
; 2175 : 	}
; 2176 : 
; 2177 : 	DropRelic(lpObj->m_Index);

  0002a	51		 push	 ecx
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?DropRelic@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::DropRelic

; 2178 : 	m_PlayerData[lpObj->iTempleIndex].m_SkillPts = 10;

  00032	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]

; 2179 : 	GCIllusionSendPoint(lpObj->m_Index,10);

  00038	6a 0a		 push	 10			; 0000000aH
  0003a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0003d	03 c0		 add	 eax, eax
  0003f	c6 44 c7 25 0a	 mov	 BYTE PTR [edi+eax*8+37], 10 ; 0000000aH
  00044	ff 36		 push	 DWORD PTR [esi]
  00046	e8 00 00 00 00	 call	 ?GCIllusionSendPoint@@YAXHE@Z ; GCIllusionSendPoint

; 2180 : 
; 2181 : 	if( m_PlayerData[lpObj->iTempleIndex].m_Skill1Time > 0 )

  0004b	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  00051	83 c4 08	 add	 esp, 8
  00054	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00057	03 c0		 add	 eax, eax
  00059	83 7c c7 28 00	 cmp	 DWORD PTR [edi+eax*8+40], 0
  0005e	76 20		 jbe	 SHORT $LN4@UserDie

; 2182 : 	{
; 2183 : 		m_PlayerData[lpObj->iTempleIndex].m_Skill1Time = 0;
; 2184 : 		gObjRemoveBuffEffect(lpObj,BUFF_IT_PROTECTION);

  00060	6a 22		 push	 34			; 00000022H
  00062	56		 push	 esi
  00063	c7 44 c7 28 00
	00 00 00	 mov	 DWORD PTR [edi+eax*8+40], 0
  0006b	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00070	83 c4 08	 add	 esp, 8

; 2185 : 		GCSendUseSkill(lpObj,0xD2);

  00073	8b cf		 mov	 ecx, edi
  00075	68 d2 00 00 00	 push	 210			; 000000d2H
  0007a	56		 push	 esi
  0007b	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN4@UserDie:

; 2186 : 	}
; 2187 : 
; 2188 : 	if( m_PlayerData[lpObj->iTempleIndex].m_Skill2Time > 0 )

  00080	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  00086	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00089	03 c0		 add	 eax, eax
  0008b	83 7c c7 2c 00	 cmp	 DWORD PTR [edi+eax*8+44], 0
  00090	76 20		 jbe	 SHORT $LN3@UserDie

; 2189 : 	{
; 2190 : 		m_PlayerData[lpObj->iTempleIndex].m_Skill2Time = 0;
; 2191 : 		gObjRemoveBuffEffect(lpObj,BUFF_RESTRICTION);

  00092	6a 41		 push	 65			; 00000041H
  00094	56		 push	 esi
  00095	c7 44 c7 2c 00
	00 00 00	 mov	 DWORD PTR [edi+eax*8+44], 0
  0009d	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  000a2	83 c4 08	 add	 esp, 8

; 2192 : 		GCSendUseSkill(lpObj,0xD3);

  000a5	8b cf		 mov	 ecx, edi
  000a7	68 d3 00 00 00	 push	 211			; 000000d3H
  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN3@UserDie:
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi

; 2193 : 	}
; 2194 : }

  000b4	5d		 pop	 ebp
  000b5	c2 04 00	 ret	 4
?UserDie@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::UserDie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SkillProc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?SkillProc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::SkillProc, COMDAT
; _this$ = ecx

; 1991 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1992 : 	if( m_PlayerData[lpObj->iTempleIndex].m_Index != lpObj->m_Index )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  00010	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00013	03 c9		 add	 ecx, ecx
  00015	8b 44 cf 20	 mov	 eax, DWORD PTR [edi+ecx*8+32]
  00019	3b 06		 cmp	 eax, DWORD PTR [esi]
  0001b	0f 85 89 00 00
	00		 jne	 $LN6@SkillProc

; 1993 : 		return;
; 1994 : 
; 1995 : 	if( m_PlayerData[lpObj->iTempleIndex].m_Skill1Time > 0 )

  00021	8b 44 cf 28	 mov	 eax, DWORD PTR [edi+ecx*8+40]
  00025	85 c0		 test	 eax, eax
  00027	74 37		 je	 SHORT $LN4@SkillProc

; 1996 : 	{
; 1997 : 		m_PlayerData[lpObj->iTempleIndex].m_Skill1Time--;

  00029	48		 dec	 eax
  0002a	89 44 cf 28	 mov	 DWORD PTR [edi+ecx*8+40], eax

; 1998 : 
; 1999 : 		if( m_PlayerData[lpObj->iTempleIndex].m_Skill1Time <= 0 )

  0002e	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  00034	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00037	03 c0		 add	 eax, eax
  00039	83 7c c7 28 00	 cmp	 DWORD PTR [edi+eax*8+40], 0
  0003e	77 20		 ja	 SHORT $LN4@SkillProc

; 2000 : 		{
; 2001 : 			m_PlayerData[lpObj->iTempleIndex].m_Skill1Time = 0;
; 2002 : 			gObjRemoveBuffEffect(lpObj,BUFF_IT_PROTECTION);

  00040	6a 22		 push	 34			; 00000022H
  00042	56		 push	 esi
  00043	c7 44 c7 28 00
	00 00 00	 mov	 DWORD PTR [edi+eax*8+40], 0
  0004b	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00050	83 c4 08	 add	 esp, 8

; 2003 : 			GCSendUseSkill(lpObj,0xD2);

  00053	8b cf		 mov	 ecx, edi
  00055	68 d2 00 00 00	 push	 210			; 000000d2H
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN4@SkillProc:

; 2004 : 		}
; 2005 : 	}
; 2006 : 
; 2007 : 	if( m_PlayerData[lpObj->iTempleIndex].m_Skill2Time > 0 )

  00060	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  00066	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00069	03 c9		 add	 ecx, ecx
  0006b	8b 44 cf 2c	 mov	 eax, DWORD PTR [edi+ecx*8+44]
  0006f	85 c0		 test	 eax, eax
  00071	74 37		 je	 SHORT $LN6@SkillProc

; 2008 : 	{
; 2009 : 		m_PlayerData[lpObj->iTempleIndex].m_Skill2Time--;

  00073	48		 dec	 eax
  00074	89 44 cf 2c	 mov	 DWORD PTR [edi+ecx*8+44], eax

; 2010 : 
; 2011 : 		if( m_PlayerData[lpObj->iTempleIndex].m_Skill2Time <= 0 )

  00078	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  0007e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00081	03 c0		 add	 eax, eax
  00083	83 7c c7 2c 00	 cmp	 DWORD PTR [edi+eax*8+44], 0
  00088	77 20		 ja	 SHORT $LN6@SkillProc

; 2012 : 		{
; 2013 : 			m_PlayerData[lpObj->iTempleIndex].m_Skill2Time = 0;
; 2014 : 			gObjRemoveBuffEffect(lpObj,BUFF_RESTRICTION);

  0008a	6a 41		 push	 65			; 00000041H
  0008c	56		 push	 esi
  0008d	c7 44 c7 2c 00
	00 00 00	 mov	 DWORD PTR [edi+eax*8+44], 0
  00095	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  0009a	83 c4 08	 add	 esp, 8

; 2015 : 			GCSendUseSkill(lpObj,0xD3);

  0009d	8b cf		 mov	 ecx, edi
  0009f	68 d3 00 00 00	 push	 211			; 000000d3H
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN6@SkillProc:
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi

; 2016 : 		}
; 2017 : 	}
; 2018 : }

  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?SkillProc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::SkillProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?UseSkill@CIllusionTempleProcess@@QAEXHGHE@Z
_TEXT	SEGMENT
_bSuccess$1$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_skill$ = 12						; size = 2
_bCheck$1$ = 16						; size = 4
_iTargetIndex$ = 16					; size = 4
_State$ = 20						; size = 1
?UseSkill@CIllusionTempleProcess@@QAEXHGHE@Z PROC	; CIllusionTempleProcess::UseSkill, COMDAT
; _this$ = ecx

; 1858 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1859 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00004	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	85 d2		 test	 edx, edx
  0000c	0f 88 56 02 00
	00		 js	 $LN34@UseSkill
  00012	33 c0		 xor	 eax, eax
  00014	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 43 02 00
	00		 je	 $LN34@UseSkill

; 1862 : 		return;
; 1863 : 	}
; 1864 : 
; 1865 : 	if( OBJMAX_RANGE(iTargetIndex) == FALSE )

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _iTargetIndex$[ebp]
  00028	85 c9		 test	 ecx, ecx
  0002a	0f 88 19 02 00
	00		 js	 $LN35@UseSkill
  00030	33 c0		 xor	 eax, eax
  00032	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00038	0f 9e c0	 setle	 al
  0003b	85 c0		 test	 eax, eax
  0003d	0f 84 06 02 00
	00		 je	 $LN35@UseSkill

; 1868 : 		return;
; 1869 : 	}
; 1870 : 
; 1871 : 	LPOBJ lpObj = &gObj[iIndex];
; 1872 : 	LPOBJ lpTargetObj = &gObj[iTargetIndex];

  00043	53		 push	 ebx
  00044	57		 push	 edi
  00045	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048

; 1873 : 
; 1874 : 	if( GetState() != IT_STATE_PLAYING )

  0004b	8b ce		 mov	 ecx, esi
  0004d	69 fa 40 27 00
	00		 imul	 edi, edx, 10048
  00053	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00059	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005f	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00064	3c 02		 cmp	 al, 2
  00066	0f 85 d6 01 00
	00		 jne	 $LN8@UseSkill

; 1875 : 	{
; 1876 : 		GCSendUseSkill(lpObj->m_Index,lpTargetObj->m_Index,skill,FALSE);
; 1877 : 		return;
; 1878 : 	}
; 1879 : 
; 1880 : 	if( lpObj->Connected <= PLAYER_LOGGED ||

  0006c	83 7f 04 02	 cmp	 DWORD PTR [edi+4], 2
  00070	0f 8e cc 01 00
	00		 jle	 $LN8@UseSkill
  00076	83 7b 04 02	 cmp	 DWORD PTR [ebx+4], 2
  0007a	0f 8e c2 01 00
	00		 jle	 $LN8@UseSkill

; 1881 : 		lpTargetObj->Connected <= PLAYER_LOGGED )
; 1882 : 	{
; 1883 : 		GCSendUseSkill(lpObj->m_Index,lpTargetObj->m_Index,skill,FALSE);
; 1884 : 		return;
; 1885 : 	}
; 1886 : 
; 1887 : 	if( lpObj->MapNumber != lpTargetObj->MapNumber )

  00080	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00086	3a 83 23 01 00
	00		 cmp	 al, BYTE PTR [ebx+291]
  0008c	0f 85 b0 01 00
	00		 jne	 $LN8@UseSkill

; 1888 : 	{
; 1889 : 		GCSendUseSkill(lpObj->m_Index,lpTargetObj->m_Index,skill,FALSE);
; 1890 : 		return;
; 1891 : 	}
; 1892 : 
; 1893 : 	if( lpObj->iTempleIndex == -1 ||

  00092	83 bf 78 24 00
	00 ff		 cmp	 DWORD PTR [edi+9336], -1
  00099	0f 84 a3 01 00
	00		 je	 $LN8@UseSkill
  0009f	83 bb 78 24 00
	00 ff		 cmp	 DWORD PTR [ebx+9336], -1
  000a6	0f 84 96 01 00
	00		 je	 $LN8@UseSkill

; 1894 : 		lpTargetObj->iTempleIndex == -1 )
; 1895 : 	{
; 1896 : 		GCSendUseSkill(lpObj->m_Index,lpTargetObj->m_Index,skill,FALSE);
; 1897 : 		return;
; 1898 : 	}
; 1899 : 
; 1900 : 	int bCheck = -1;
; 1901 : 	int bSuccess = TRUE;
; 1902 : 
; 1903 : 	switch( skill )

  000ac	8b 45 0c	 mov	 eax, DWORD PTR _skill$[ebp]
  000af	0f b7 c0	 movzx	 eax, ax
  000b2	05 2e ff ff ff	 add	 eax, -210		; ffffff2eH
  000b7	83 f8 03	 cmp	 eax, 3
  000ba	77 4a		 ja	 SHORT $LN24@UseSkill
  000bc	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN43@UseSkill[eax*4]
$LN12@UseSkill:

; 1904 : 	{
; 1905 : 	case 0xD2:
; 1906 : 		bCheck = MagicDamageC.CheckKillCount(0xD2,this->GetKillPts(lpObj->m_Index));

  000c3	ff 37		 push	 DWORD PTR [edi]
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 ?GetKillPts@CIllusionTempleProcess@@QAEEH@Z ; CIllusionTempleProcess::GetKillPts
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  000d4	50		 push	 eax
  000d5	68 d2 00 00 00	 push	 210			; 000000d2H
  000da	e8 00 00 00 00	 call	 ?CheckKillCount@CMagicDamage@@QAEHHH@Z ; CMagicDamage::CheckKillCount
  000df	89 45 10	 mov	 DWORD PTR _bCheck$1$[ebp], eax

; 1907 : 
; 1908 : 		if( bCheck < 0 )

  000e2	85 c0		 test	 eax, eax
  000e4	79 52		 jns	 SHORT $LN13@UseSkill
$LN39@UseSkill:

; 1909 : 		{
; 1910 : 			bSuccess = FALSE;
; 1911 : 			LogAddTD("[Illusion Temple] (%d) Use Skill KillCount Error (Skill:%d)",

  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _skill$[ebp]
  000e9	33 c0		 xor	 eax, eax
  000eb	0f b7 c1	 movzx	 eax, cx
  000ee	50		 push	 eax
  000ef	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  000f6	40		 inc	 eax
  000f7	50		 push	 eax
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@DBHFAIH@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@
  000fd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN24@UseSkill:

; 1963 : 		}
; 1964 : 		break;
; 1965 : 	default:
; 1966 : 		bSuccess = FALSE;

  00106	33 c0		 xor	 eax, eax
$LN25@UseSkill:

; 1977 : 			Temple+1,skill,lpObj->AccountID,lpObj->Name,bCheck);
; 1978 : 	}
; 1979 : 
; 1980 : 	if( skill != 0xD4 && bSuccess == TRUE )

  00108	b9 d4 00 00 00	 mov	 ecx, 212		; 000000d4H
  0010d	66 39 4d 0c	 cmp	 WORD PTR _skill$[ebp], cx
  00111	0f 84 23 01 00
	00		 je	 $LN26@UseSkill
  00117	83 f8 01	 cmp	 eax, 1
  0011a	0f 85 1a 01 00
	00		 jne	 $LN26@UseSkill

; 1981 : 	{
; 1982 : 		GCSendUseSkill(lpObj->m_Index,lpTargetObj->m_Index,skill,TRUE);

  00120	50		 push	 eax
$LN40@UseSkill:
  00121	ff 75 0c	 push	 DWORD PTR _skill$[ebp]
  00124	8b ce		 mov	 ecx, esi
  00126	ff 33		 push	 DWORD PTR [ebx]
  00128	ff 37		 push	 DWORD PTR [edi]
  0012a	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXHHGH@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN36@UseSkill:
  0012f	5f		 pop	 edi
  00130	5b		 pop	 ebx
  00131	5e		 pop	 esi

; 1987 : 	}
; 1988 : }

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 10 00	 ret	 16			; 00000010H
$LN13@UseSkill:

; 1912 : 				Temple+1,skill);
; 1913 : 			break;
; 1914 : 		}
; 1915 : 		else
; 1916 : 		{
; 1917 : 			bSuccess = SetProtect(lpObj);

  00138	57		 push	 edi
  00139	8b ce		 mov	 ecx, esi
  0013b	e8 00 00 00 00	 call	 ?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SetProtect

; 1918 : 		}
; 1919 : 		break;

  00140	e9 93 00 00 00	 jmp	 $LN38@UseSkill
$LN15@UseSkill:

; 1920 : 	case 0xD3:
; 1921 : 		bCheck = MagicDamageC.CheckKillCount(0xD3,this->GetKillPts(lpObj->m_Index));

  00145	ff 37		 push	 DWORD PTR [edi]
  00147	8b ce		 mov	 ecx, esi
  00149	e8 00 00 00 00	 call	 ?GetKillPts@CIllusionTempleProcess@@QAEEH@Z ; CIllusionTempleProcess::GetKillPts
  0014e	0f b6 c0	 movzx	 eax, al
  00151	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00156	50		 push	 eax
  00157	68 d3 00 00 00	 push	 211			; 000000d3H
  0015c	e8 00 00 00 00	 call	 ?CheckKillCount@CMagicDamage@@QAEHHH@Z ; CMagicDamage::CheckKillCount
  00161	89 45 10	 mov	 DWORD PTR _bCheck$1$[ebp], eax

; 1922 : 
; 1923 : 		if( bCheck < 0 )

  00164	85 c0		 test	 eax, eax
  00166	0f 88 7a ff ff
	ff		 js	 $LN39@UseSkill

; 1924 : 		{
; 1925 : 			bSuccess = FALSE;
; 1926 : 			LogAddTD("[Illusion Temple] (%d) Use Skill KillCount Error (Skill:%d)",
; 1927 : 				Temple+1,skill);
; 1928 : 			break;
; 1929 : 		}
; 1930 : 		else
; 1931 : 		{
; 1932 : 			bSuccess = SetImobilize(lpObj,lpTargetObj);

  0016c	53		 push	 ebx
  0016d	57		 push	 edi
  0016e	8b ce		 mov	 ecx, esi
  00170	e8 00 00 00 00	 call	 ?SetImobilize@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::SetImobilize

; 1933 : 		}
; 1934 : 		break;

  00175	eb 61		 jmp	 SHORT $LN38@UseSkill
$LN18@UseSkill:

; 1935 : 	case 0xD4:
; 1936 : 		bCheck = MagicDamageC.CheckKillCount(0xD4,this->GetKillPts(lpObj->m_Index));

  00177	ff 37		 push	 DWORD PTR [edi]
  00179	8b ce		 mov	 ecx, esi
  0017b	e8 00 00 00 00	 call	 ?GetKillPts@CIllusionTempleProcess@@QAEEH@Z ; CIllusionTempleProcess::GetKillPts
  00180	0f b6 c0	 movzx	 eax, al
  00183	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00188	50		 push	 eax
  00189	68 d4 00 00 00	 push	 212			; 000000d4H
  0018e	e8 00 00 00 00	 call	 ?CheckKillCount@CMagicDamage@@QAEHHH@Z ; CMagicDamage::CheckKillCount
  00193	89 45 10	 mov	 DWORD PTR _bCheck$1$[ebp], eax

; 1937 : 
; 1938 : 		if( bCheck < 0 )

  00196	85 c0		 test	 eax, eax
  00198	0f 88 48 ff ff
	ff		 js	 $LN39@UseSkill

; 1939 : 		{
; 1940 : 			bSuccess = FALSE;
; 1941 : 			LogAddTD("[Illusion Temple] (%d) Use Skill KillCount Error (Skill:%d)",
; 1942 : 				Temple+1,skill);
; 1943 : 			break;
; 1944 : 		}
; 1945 : 		else
; 1946 : 		{
; 1947 : 			bSuccess = SetTeleport(lpObj);

  0019e	57		 push	 edi
  0019f	8b ce		 mov	 ecx, esi
  001a1	e8 00 00 00 00	 call	 ?SetTeleport@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SetTeleport

; 1948 : 		}
; 1949 : 		break;

  001a6	eb 30		 jmp	 SHORT $LN38@UseSkill
$LN21@UseSkill:

; 1950 : 	case 0xD5:
; 1951 : 		bCheck = MagicDamageC.CheckKillCount(0xD5,this->GetKillPts(lpObj->m_Index));

  001a8	ff 37		 push	 DWORD PTR [edi]
  001aa	8b ce		 mov	 ecx, esi
  001ac	e8 00 00 00 00	 call	 ?GetKillPts@CIllusionTempleProcess@@QAEEH@Z ; CIllusionTempleProcess::GetKillPts
  001b1	0f b6 c0	 movzx	 eax, al
  001b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001b9	50		 push	 eax
  001ba	68 d5 00 00 00	 push	 213			; 000000d5H
  001bf	e8 00 00 00 00	 call	 ?CheckKillCount@CMagicDamage@@QAEHHH@Z ; CMagicDamage::CheckKillCount
  001c4	89 45 10	 mov	 DWORD PTR _bCheck$1$[ebp], eax

; 1952 : 
; 1953 : 		if( bCheck < 0 )

  001c7	85 c0		 test	 eax, eax
  001c9	0f 88 17 ff ff
	ff		 js	 $LN39@UseSkill

; 1954 : 		{
; 1955 : 			bSuccess = FALSE;
; 1956 : 			LogAddTD("[Illusion Temple] (%d) Use Skill KillCount Error (Skill:%d)",
; 1957 : 				Temple+1,skill);
; 1958 : 			break;
; 1959 : 		}
; 1960 : 		else
; 1961 : 		{
; 1962 : 			bSuccess = SetShield(lpObj,lpTargetObj);

  001cf	53		 push	 ebx
  001d0	57		 push	 edi
  001d1	8b ce		 mov	 ecx, esi
  001d3	e8 00 00 00 00	 call	 ?SetShield@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::SetShield
$LN38@UseSkill:
  001d8	89 45 fc	 mov	 DWORD PTR _bSuccess$1$[ebp], eax

; 1967 : 		break;
; 1968 : 	}
; 1969 : 
; 1970 : 	if( bSuccess == TRUE )

  001db	83 f8 01	 cmp	 eax, 1
  001de	0f 85 24 ff ff
	ff		 jne	 $LN25@UseSkill

; 1971 : 	{
; 1972 : 		int bSetPts = SetKillPts(iIndex,bCheck);

  001e4	ff 75 10	 push	 DWORD PTR _bCheck$1$[ebp]
  001e7	8b ce		 mov	 ecx, esi
  001e9	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  001ec	e8 00 00 00 00	 call	 ?SetKillPts@CIllusionTempleProcess@@QAEHHE@Z ; CIllusionTempleProcess::SetKillPts

; 1973 : 		GCIllusionSendPoint(iIndex,bCheck);

  001f1	ff 75 10	 push	 DWORD PTR _bCheck$1$[ebp]
  001f4	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  001f7	e8 00 00 00 00	 call	 ?GCIllusionSendPoint@@YAXHE@Z ; GCIllusionSendPoint
  001fc	83 c4 08	 add	 esp, 8

; 1974 : 		AddUseSkillCnt(iIndex);

  001ff	8b ce		 mov	 ecx, esi
  00201	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  00204	e8 00 00 00 00	 call	 ?AddUseSkillCnt@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddUseSkillCnt

; 1975 : 
; 1976 : 		LogAddTD("[Illusion Temple] (%d) Use Skill (%d), (%s)(%s), (%d)",

  00209	ff 75 10	 push	 DWORD PTR _bCheck$1$[ebp]
  0020c	8b 4d 0c	 mov	 ecx, DWORD PTR _skill$[ebp]
  0020f	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00212	50		 push	 eax
  00213	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00216	50		 push	 eax
  00217	0f b7 c1	 movzx	 eax, cx
  0021a	50		 push	 eax
  0021b	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00222	40		 inc	 eax
  00223	50		 push	 eax
  00224	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@DAAGPJBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Use?5Skill@
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0022f	8b 45 fc	 mov	 eax, DWORD PTR _bSuccess$1$[ebp]
  00232	83 c4 18	 add	 esp, 24			; 00000018H
  00235	e9 ce fe ff ff	 jmp	 $LN25@UseSkill
$LN26@UseSkill:

; 1983 : 	}
; 1984 : 	else if( bSuccess == FALSE )

  0023a	85 c0		 test	 eax, eax
  0023c	0f 85 ed fe ff
	ff		 jne	 $LN36@UseSkill
$LN8@UseSkill:

; 1985 : 	{
; 1986 : 		GCSendUseSkill(lpObj->m_Index,lpTargetObj->m_Index,skill,FALSE);

  00242	6a 00		 push	 0
  00244	e9 d8 fe ff ff	 jmp	 $LN40@UseSkill
$LN35@UseSkill:

; 1866 : 	{
; 1867 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00249	68 4b 07 00 00	 push	 1867			; 0000074bH
$LN41@UseSkill:
  0024e	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00253	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  00258	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0025e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00261	5e		 pop	 esi

; 1987 : 	}
; 1988 : }

  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c2 10 00	 ret	 16			; 00000010H
$LN34@UseSkill:

; 1860 : 	{
; 1861 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00268	68 45 07 00 00	 push	 1861			; 00000745H
  0026d	eb df		 jmp	 SHORT $LN41@UseSkill
  0026f	90		 npad	 1
$LN43@UseSkill:

; 1987 : 	}
; 1988 : }

  00270	00 00 00 00	 DD	 $LN12@UseSkill
  00274	00 00 00 00	 DD	 $LN15@UseSkill
  00278	00 00 00 00	 DD	 $LN18@UseSkill
  0027c	00 00 00 00	 DD	 $LN21@UseSkill
?UseSkill@CIllusionTempleProcess@@QAEXHGHE@Z ENDP	; CIllusionTempleProcess::UseSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetKillPts@CIllusionTempleProcess@@QAEHHE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_Pts$ = 12						; size = 1
?SetKillPts@CIllusionTempleProcess@@QAEHHE@Z PROC	; CIllusionTempleProcess::SetKillPts, COMDAT
; _this$ = ecx

; 1753 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1754 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 49		 js	 SHORT $LN8@SetKillPts
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 3a		 je	 SHORT $LN8@SetKillPts

; 1758 : 	}
; 1759 : 
; 1760 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001c	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00022	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 3b		 je	 SHORT $LN3@SetKillPts
  00033	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00036	c1 e0 04	 shl	 eax, 4
  00039	03 f0		 add	 esi, eax
  0003b	39 56 20	 cmp	 DWORD PTR [esi+32], edx
  0003e	74 06		 je	 SHORT $LN4@SetKillPts
  00040	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00044	7e 28		 jle	 SHORT $LN3@SetKillPts
$LN4@SetKillPts:

; 1761 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1762 : 	{
; 1763 : 		m_PlayerData[gObj[iIndex].iTempleIndex].m_SkillPts = Pts;

  00046	8a 45 0c	 mov	 al, BYTE PTR _Pts$[ebp]
  00049	88 46 25	 mov	 BYTE PTR [esi+37], al

; 1764 : 		return true;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	5e		 pop	 esi

; 1765 : 	}
; 1766 : return false;
; 1767 : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN8@SetKillPts:

; 1755 : 	{
; 1756 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00056	68 dc 06 00 00	 push	 1756			; 000006dcH
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SetKillPts:

; 1757 : 		return false;

  0006e	33 c0		 xor	 eax, eax
  00070	5e		 pop	 esi

; 1765 : 	}
; 1766 : return false;
; 1767 : }

  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
?SetKillPts@CIllusionTempleProcess@@QAEHHE@Z ENDP	; CIllusionTempleProcess::SetKillPts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetKillPts@CIllusionTempleProcess@@QAEEH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?GetKillPts@CIllusionTempleProcess@@QAEEH@Z PROC	; CIllusionTempleProcess::GetKillPts, COMDAT
; _this$ = ecx

; 1737 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1738 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 41		 js	 SHORT $LN8@GetKillPts
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 32		 je	 SHORT $LN8@GetKillPts

; 1742 : 	}
; 1743 : 
; 1744 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001c	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00022	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	8b 81 78 24 00
	00		 mov	 eax, DWORD PTR [ecx+9336]
  0002e	83 f8 ff	 cmp	 eax, -1
  00031	74 33		 je	 SHORT $LN3@GetKillPts
  00033	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00036	c1 e0 04	 shl	 eax, 4
  00039	39 54 30 20	 cmp	 DWORD PTR [eax+esi+32], edx
  0003d	74 06		 je	 SHORT $LN4@GetKillPts
  0003f	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00043	7e 21		 jle	 SHORT $LN3@GetKillPts
$LN4@GetKillPts:

; 1745 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1746 : 	{
; 1747 : 		return m_PlayerData[gObj[iIndex].iTempleIndex].m_SkillPts;

  00045	8a 44 30 25	 mov	 al, BYTE PTR [eax+esi+37]
  00049	5e		 pop	 esi

; 1748 : 	}
; 1749 : return false;
; 1750 : }

  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN8@GetKillPts:

; 1739 : 	{
; 1740 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0004e	68 cc 06 00 00	 push	 1740			; 000006ccH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@GetKillPts:

; 1741 : 		return false;

  00066	32 c0		 xor	 al, al
  00068	5e		 pop	 esi

; 1748 : 	}
; 1749 : return false;
; 1750 : }

  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
?GetKillPts@CIllusionTempleProcess@@QAEEH@Z ENDP	; CIllusionTempleProcess::GetKillPts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_Pts$ = 12						; size = 1
?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z PROC	; CIllusionTempleProcess::AddKillPts, COMDAT
; _this$ = ecx

; 1716 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1717 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 8a 00 00
	00		 js	 $LN9@AddKillPts
  0000e	33 c0		 xor	 eax, eax
  00010	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 7b		 je	 SHORT $LN9@AddKillPts

; 1721 : 	}
; 1722 : 
; 1723 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001d	53		 push	 ebx
  0001e	56		 push	 esi
  0001f	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00025	57		 push	 edi
  00026	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	8b 84 37 78 24
	00 00		 mov	 eax, DWORD PTR [edi+esi+9336]
  00033	83 f8 ff	 cmp	 eax, -1
  00036	74 57		 je	 SHORT $LN3@AddKillPts
  00038	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0003b	c1 e0 04	 shl	 eax, 4
  0003e	39 54 08 20	 cmp	 DWORD PTR [eax+ecx+32], edx
  00042	8d 1c 08	 lea	 ebx, DWORD PTR [eax+ecx]
  00045	74 07		 je	 SHORT $LN4@AddKillPts
  00047	83 7c 37 04 02	 cmp	 DWORD PTR [edi+esi+4], 2
  0004c	7e 41		 jle	 SHORT $LN3@AddKillPts
$LN4@AddKillPts:

; 1724 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1725 : 	{
; 1726 : 		m_PlayerData[gObj[iIndex].iTempleIndex].m_SkillPts += Pts;

  0004e	8a 45 0c	 mov	 al, BYTE PTR _Pts$[ebp]
  00051	00 43 25	 add	 BYTE PTR [ebx+37], al

; 1727 : 		if( m_PlayerData[gObj[iIndex].iTempleIndex].m_SkillPts > 90 )

  00054	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005a	8b 84 16 78 24
	00 00		 mov	 eax, DWORD PTR [esi+edx+9336]
  00061	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00064	03 c0		 add	 eax, eax
  00066	80 7c c1 25 5a	 cmp	 BYTE PTR [ecx+eax*8+37], 90 ; 0000005aH
  0006b	76 0b		 jbe	 SHORT $LN5@AddKillPts

; 1728 : 		{
; 1729 : 			m_PlayerData[gObj[iIndex].iTempleIndex].m_SkillPts = 90;

  0006d	c6 44 c1 25 5a	 mov	 BYTE PTR [ecx+eax*8+37], 90 ; 0000005aH
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN5@AddKillPts:

; 1730 : 		}
; 1731 : 		return m_PlayerData[gObj[iIndex].iTempleIndex].m_SkillPts;

  00078	8b 84 16 78 24
	00 00		 mov	 eax, DWORD PTR [esi+edx+9336]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00085	03 c0		 add	 eax, eax
  00087	8a 44 c1 25	 mov	 al, BYTE PTR [ecx+eax*8+37]

; 1734 : }

  0008b	5d		 pop	 ebp
  0008c	c2 08 00	 ret	 8
$LN3@AddKillPts:
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi

; 1732 : 	}
; 1733 : return FALSE;

  00091	32 c0		 xor	 al, al
  00093	5b		 pop	 ebx

; 1734 : }

  00094	5d		 pop	 ebp
  00095	c2 08 00	 ret	 8
$LN9@AddKillPts:

; 1718 : 	{
; 1719 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00098	68 b7 06 00 00	 push	 1719			; 000006b7H
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1720 : 		return false;

  000b0	32 c0		 xor	 al, al

; 1734 : }

  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z ENDP	; CIllusionTempleProcess::AddKillPts
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddUseSkillCnt@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddUseSkillCnt@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::AddUseSkillCnt, COMDAT
; _this$ = ecx

; 1838 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1839 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 4e		 js	 SHORT $LN9@AddUseSkil
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 3f		 je	 SHORT $LN9@AddUseSkil

; 1842 : 		return;
; 1843 : 	}
; 1844 : 
; 1845 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001c	56		 push	 esi
  0001d	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00023	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	74 21		 je	 SHORT $LN10@AddUseSkil
  00034	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00037	c1 e0 04	 shl	 eax, 4
  0003a	39 54 38 20	 cmp	 DWORD PTR [eax+edi+32], edx
  0003e	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00041	74 06		 je	 SHORT $LN4@AddUseSkil
  00043	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00047	7e 0c		 jle	 SHORT $LN10@AddUseSkil
$LN4@AddUseSkil:

; 1846 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1847 : 	{
; 1848 : 		if( m_PlayerData[gObj[iIndex].iTempleIndex].m_UseSkillCnt >= 255 )

  00049	8a 41 33	 mov	 al, BYTE PTR [ecx+51]
  0004c	3c ff		 cmp	 al, 255			; 000000ffH
  0004e	73 05		 jae	 SHORT $LN10@AddUseSkil

; 1849 : 		{
; 1850 : 			return;
; 1851 : 		}
; 1852 : 
; 1853 : 		m_PlayerData[gObj[iIndex].iTempleIndex].m_UseSkillCnt++;

  00050	fe c0		 inc	 al
  00052	88 41 33	 mov	 BYTE PTR [ecx+51], al
$LN10@AddUseSkil:
  00055	5e		 pop	 esi
  00056	5f		 pop	 edi

; 1854 : 	}
; 1855 : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN9@AddUseSkil:

; 1840 : 	{
; 1841 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0005b	68 31 07 00 00	 push	 1841			; 00000731H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	5f		 pop	 edi

; 1854 : 	}
; 1855 : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?AddUseSkillCnt@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::AddUseSkillCnt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddMonsterKillCount@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddMonsterKillCount@CIllusionTempleProcess@@QAEXH@Z PROC ; CIllusionTempleProcess::AddMonsterKillCount, COMDAT
; _this$ = ecx

; 1798 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1799 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 4e		 js	 SHORT $LN9@AddMonster
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 3f		 je	 SHORT $LN9@AddMonster

; 1802 : 		return;
; 1803 : 	}
; 1804 : 
; 1805 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001c	56		 push	 esi
  0001d	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00023	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	74 21		 je	 SHORT $LN10@AddMonster
  00034	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00037	c1 e0 04	 shl	 eax, 4
  0003a	39 54 38 20	 cmp	 DWORD PTR [eax+edi+32], edx
  0003e	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00041	74 06		 je	 SHORT $LN4@AddMonster
  00043	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00047	7e 0c		 jle	 SHORT $LN10@AddMonster
$LN4@AddMonster:

; 1806 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1807 : 	{
; 1808 : 		if( m_PlayerData[gObj[iIndex].iTempleIndex].m_MonsterKillCount >= 255 )

  00049	8a 41 31	 mov	 al, BYTE PTR [ecx+49]
  0004c	3c ff		 cmp	 al, 255			; 000000ffH
  0004e	73 05		 jae	 SHORT $LN10@AddMonster

; 1809 : 		{
; 1810 : 			return;
; 1811 : 		}
; 1812 : 
; 1813 : 		m_PlayerData[gObj[iIndex].iTempleIndex].m_MonsterKillCount++;

  00050	fe c0		 inc	 al
  00052	88 41 31	 mov	 BYTE PTR [ecx+49], al
$LN10@AddMonster:
  00055	5e		 pop	 esi
  00056	5f		 pop	 edi

; 1814 : 	}
; 1815 : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN9@AddMonster:

; 1800 : 	{
; 1801 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0005b	68 09 07 00 00	 push	 1801			; 00000709H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	5f		 pop	 edi

; 1814 : 	}
; 1815 : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?AddMonsterKillCount@CIllusionTempleProcess@@QAEXH@Z ENDP ; CIllusionTempleProcess::AddMonsterKillCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddPlayerKillCount@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddPlayerKillCount@CIllusionTempleProcess@@QAEXH@Z PROC ; CIllusionTempleProcess::AddPlayerKillCount, COMDAT
; _this$ = ecx

; 1778 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1779 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 4e		 js	 SHORT $LN9@AddPlayerK
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 3f		 je	 SHORT $LN9@AddPlayerK

; 1782 : 		return;
; 1783 : 	}
; 1784 : 
; 1785 : 	if( gObj[iIndex].iTempleIndex != -1 &&

  0001c	56		 push	 esi
  0001d	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  00023	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	8b 86 78 24 00
	00		 mov	 eax, DWORD PTR [esi+9336]
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	74 21		 je	 SHORT $LN10@AddPlayerK
  00034	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00037	c1 e0 04	 shl	 eax, 4
  0003a	39 54 38 20	 cmp	 DWORD PTR [eax+edi+32], edx
  0003e	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00041	74 06		 je	 SHORT $LN4@AddPlayerK
  00043	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  00047	7e 0c		 jle	 SHORT $LN10@AddPlayerK
$LN4@AddPlayerK:

; 1786 : 		( m_PlayerData[gObj[iIndex].iTempleIndex].m_Index == iIndex || gObj[iIndex].Connected > PLAYER_LOGGED ) )
; 1787 : 	{
; 1788 : 		if( m_PlayerData[gObj[iIndex].iTempleIndex].m_PlayerKillCount >= 255 )

  00049	8a 41 30	 mov	 al, BYTE PTR [ecx+48]
  0004c	3c ff		 cmp	 al, 255			; 000000ffH
  0004e	73 05		 jae	 SHORT $LN10@AddPlayerK

; 1789 : 		{
; 1790 : 			return;
; 1791 : 		}
; 1792 : 
; 1793 : 		m_PlayerData[gObj[iIndex].iTempleIndex].m_PlayerKillCount++;

  00050	fe c0		 inc	 al
  00052	88 41 30	 mov	 BYTE PTR [ecx+48], al
$LN10@AddPlayerK:
  00055	5e		 pop	 esi
  00056	5f		 pop	 edi

; 1794 : 	}
; 1795 : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN9@AddPlayerK:

; 1780 : 	{
; 1781 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  0005b	68 f5 06 00 00	 push	 1781			; 000006f5H
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	5f		 pop	 edi

; 1794 : 	}
; 1795 : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?AddPlayerKillCount@CIllusionTempleProcess@@QAEXH@Z ENDP ; CIllusionTempleProcess::AddPlayerKillCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ResetObject@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?ResetObject@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::ResetObject, COMDAT
; _this$ = ecx

; 1351 : 	int i;
; 1352 : 	for(i = 0; i < IT_MAXSTATUE;i++)
; 1353 : 	{
; 1354 : 		m_STATUE_NPC[i].m_Index = -1;
; 1355 : 		m_STATUE_NPC[i].m_Num = (WORD)-1;

  00000	83 ca ff	 or	 edx, -1
  00003	c7 81 30 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+560], -1
  0000d	66 89 91 34 02
	00 00		 mov	 WORD PTR [ecx+564], dx
  00014	8d 81 54 02 00
	00		 lea	 eax, DWORD PTR [ecx+596]
  0001a	89 91 38 02 00
	00		 mov	 DWORD PTR [ecx+568], edx
  00020	66 89 91 3c 02
	00 00		 mov	 WORD PTR [ecx+572], dx

; 1356 : 	}
; 1357 : 
; 1358 : 	m_STATUE_NPC_COUNT = 0;

  00027	c7 81 c0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+960], 0

; 1359 : 	m_ALLIED_NPC.m_Index = -1;

  00031	89 91 40 02 00
	00		 mov	 DWORD PTR [ecx+576], edx

; 1360 : 	m_ALLIED_NPC.m_Num = (WORD)-1;

  00037	66 89 91 44 02
	00 00		 mov	 WORD PTR [ecx+580], dx

; 1361 : 	m_ILLUSION_NPC.m_Index = -1;

  0003e	89 91 48 02 00
	00		 mov	 DWORD PTR [ecx+584], edx

; 1362 : 	m_ILLUSION_NPC.m_Num = (WORD)-1;

  00044	66 89 91 4c 02
	00 00		 mov	 WORD PTR [ecx+588], dx
  0004b	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
$LL7@ResetObjec:

; 1363 : 
; 1364 : 	for(i = 0; i < IT_MAXMONSTER; i++)
; 1365 : 	{
; 1366 : 		m_MONSTER_NPC[i].m_Index = -1;

  00050	c7 40 fc ff ff
	ff ff		 mov	 DWORD PTR [eax-4], -1
  00057	8d 40 08	 lea	 eax, DWORD PTR [eax+8]

; 1367 : 		m_MONSTER_NPC[i].m_Num = (WORD)-1;

  0005a	66 89 50 f8	 mov	 WORD PTR [eax-8], dx
  0005e	83 e9 01	 sub	 ecx, 1
  00061	75 ed		 jne	 SHORT $LL7@ResetObjec

; 1368 : 	}
; 1369 : }

  00063	c3		 ret	 0
?ResetObject@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::ResetObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddMonster@CIllusionTempleProcess@@QAEXHH@Z
_TEXT	SEGMENT
_Class$ = 8						; size = 4
_Number$ = 12						; size = 4
?AddMonster@CIllusionTempleProcess@@QAEXHH@Z PROC	; CIllusionTempleProcess::AddMonster, COMDAT
; _this$ = ecx

; 1338 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1339 : 	if( m_NPC_COUNT > IT_MAXMONSTER )

  00003	8b 81 c4 03 00
	00		 mov	 eax, DWORD PTR [ecx+964]
  00009	83 f8 28	 cmp	 eax, 40			; 00000028H
  0000c	7f 23		 jg	 SHORT $LN1@AddMonster

; 1340 : 	{
; 1341 : 		return;
; 1342 : 	}
; 1343 : 
; 1344 : 	m_MONSTER_NPC[m_NPC_COUNT].m_Index = -1;

  0000e	c7 84 c1 50 02
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax*8+592], -1

; 1345 : 	m_MONSTER_NPC[m_NPC_COUNT].m_Num = Number;

  00019	8b 91 c4 03 00
	00		 mov	 edx, DWORD PTR [ecx+964]
  0001f	66 8b 45 0c	 mov	 ax, WORD PTR _Number$[ebp]
  00023	66 89 84 d1 54
	02 00 00	 mov	 WORD PTR [ecx+edx*8+596], ax

; 1346 : 	m_NPC_COUNT++;

  0002b	ff 81 c4 03 00
	00		 inc	 DWORD PTR [ecx+964]
$LN1@AddMonster:

; 1347 : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?AddMonster@CIllusionTempleProcess@@QAEXHH@Z ENDP	; CIllusionTempleProcess::AddMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?AddNpc@CIllusionTempleProcess@@QAEXHH@Z
_TEXT	SEGMENT
_Class$ = 8						; size = 4
_Number$ = 12						; size = 4
?AddNpc@CIllusionTempleProcess@@QAEXHH@Z PROC		; CIllusionTempleProcess::AddNpc, COMDAT
; _this$ = ecx

; 1313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1314 : 	if( Class == 380 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _Class$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	3d 7c 01 00 00	 cmp	 eax, 380		; 0000017cH
  0000d	75 32		 jne	 SHORT $LN2@AddNpc

; 1315 : 	{
; 1316 : 		if( m_STATUE_NPC_COUNT > 2 )

  0000f	8b 82 c0 03 00
	00		 mov	 eax, DWORD PTR [edx+960]
  00015	83 f8 02	 cmp	 eax, 2
  00018	7f 63		 jg	 SHORT $LN7@AddNpc

; 1317 : 		{
; 1318 : 			return;
; 1319 : 		}
; 1320 : 
; 1321 : 		m_STATUE_NPC[m_STATUE_NPC_COUNT].m_Index = -1;

  0001a	c7 84 c2 30 02
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [edx+eax*8+560], -1

; 1322 : 		m_STATUE_NPC[m_STATUE_NPC_COUNT].m_Num = Number;

  00025	8b 8a c0 03 00
	00		 mov	 ecx, DWORD PTR [edx+960]
  0002b	66 8b 45 0c	 mov	 ax, WORD PTR _Number$[ebp]
  0002f	66 89 84 ca 34
	02 00 00	 mov	 WORD PTR [edx+ecx*8+564], ax

; 1323 : 		m_STATUE_NPC_COUNT++;

  00037	ff 82 c0 03 00
	00		 inc	 DWORD PTR [edx+960]

; 1334 : 	}
; 1335 : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN2@AddNpc:

; 1324 : 	}
; 1325 : 	else if( Class == 383 )

  00041	3d 7f 01 00 00	 cmp	 eax, 383		; 0000017fH
  00046	75 19		 jne	 SHORT $LN5@AddNpc

; 1326 : 	{
; 1327 : 		m_ALLIED_NPC.m_Index = -1;
; 1328 : 		m_ALLIED_NPC.m_Num = Number;

  00048	66 8b 45 0c	 mov	 ax, WORD PTR _Number$[ebp]
  0004c	c7 82 40 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+576], -1
  00056	66 89 82 44 02
	00 00		 mov	 WORD PTR [edx+580], ax

; 1334 : 	}
; 1335 : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
$LN5@AddNpc:

; 1329 : 	}
; 1330 : 	else if( Class == 384 )

  00061	3d 80 01 00 00	 cmp	 eax, 384		; 00000180H
  00066	75 15		 jne	 SHORT $LN7@AddNpc

; 1331 : 	{
; 1332 : 		m_ILLUSION_NPC.m_Index = -1;
; 1333 : 		m_ILLUSION_NPC.m_Num = Number;

  00068	66 8b 45 0c	 mov	 ax, WORD PTR _Number$[ebp]
  0006c	c7 82 48 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+584], -1
  00076	66 89 82 4c 02
	00 00		 mov	 WORD PTR [edx+588], ax
$LN7@AddNpc:

; 1334 : 	}
; 1335 : }

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
?AddNpc@CIllusionTempleProcess@@QAEXHH@Z ENDP		; CIllusionTempleProcess::AddNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?DropRelic@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_s_num$1$ = -160					; size = 4
tv478 = -156						; size = 4
_NOption$ = -152					; size = 1
_item_number$1$ = -148					; size = 4
_PetLevel$1$ = -144					; size = 4
_PetExp$1$ = -140					; size = 4
_iIndex$GSCopy$1$ = -136				; size = 4
_this$GSCopy$1$ = -132					; size = 4
_type$1$ = -128						; size = 4
_level$1$ = -124					; size = 4
_Option1$ = -120					; size = 1
_Option2$ = -116					; size = 1
_Option3$ = -112					; size = 1
_dur$1$ = -108						; size = 4
_SOption$ = -104					; size = 1
_ItemEffectEx$ = -100					; size = 1
_iItemPos$1$ = -96					; size = 4
_SocketBonus$ = -92					; size = 1
tv685 = -88						; size = 4
_pResult$ = -84						; size = 5
_ItemExOption$1$ = -74					; size = 1
_ItemExLevel$1$ = -73					; size = 1
_szItemName$ = -72					; size = 50
_NewOption$ = -20					; size = 8
_SocketOption$ = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
?DropRelic@CIllusionTempleProcess@@QAEXH@Z PROC		; CIllusionTempleProcess::DropRelic, COMDAT
; _this$ = ecx

; 1163 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00016	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001c	89 95 78 ff ff
	ff		 mov	 DWORD PTR _iIndex$GSCopy$1$[ebp], edx

; 1164 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00022	85 d2		 test	 edx, edx
  00024	0f 88 b9 03 00
	00		 js	 $LN14@DropRelic
  0002a	33 c0		 xor	 eax, eax
  0002c	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00032	0f 9e c0	 setle	 al
  00035	85 c0		 test	 eax, eax
  00037	0f 84 a6 03 00
	00		 je	 $LN14@DropRelic

; 1167 : 		return;
; 1168 : 	}
; 1169 : 
; 1170 : 	if( m_RELIC_PLAYER != iIndex )

  0003d	39 91 b8 03 00
	00		 cmp	 DWORD PTR [ecx+952], edx
  00043	0f 85 8a 03 00
	00		 jne	 $LN1@DropRelic

; 1171 : 	{
; 1172 : 		return;
; 1173 : 	}
; 1174 : 
; 1175 : 	LPOBJ lpObj = &gObj[iIndex];

  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004e	53		 push	 ebx

; 1176 : 
; 1177 : 	if( m_RELIC_POS == -1 )

  0004f	0f b6 99 bd 03
	00 00		 movzx	 ebx, BYTE PTR [ecx+957]
  00056	56		 push	 esi
  00057	69 f2 40 27 00
	00		 imul	 esi, edx, 10048
  0005d	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv478[ebp], eax
  00063	89 5d a0	 mov	 DWORD PTR _iItemPos$1$[ebp], ebx
  00066	89 75 a8	 mov	 DWORD PTR tv685[ebp], esi
  00069	83 fb ff	 cmp	 ebx, -1
  0006c	0f 84 5f 03 00
	00		 je	 $LN15@DropRelic

; 1178 : 	{
; 1179 : 		return;
; 1180 : 	}
; 1181 : 
; 1182 : 	if( lpObj->pInventory[m_RELIC_POS].m_Type != ITEMGET(14,64) )

  00072	8b 84 06 c0 11
	00 00		 mov	 eax, DWORD PTR [esi+eax+4544]
  00079	ba 40 1c 00 00	 mov	 edx, 7232		; 00001c40H
  0007e	69 cb d4 00 00
	00		 imul	 ecx, ebx, 212
  00084	66 39 54 01 06	 cmp	 WORD PTR [ecx+eax+6], dx
  00089	0f 85 42 03 00
	00		 jne	 $LN15@DropRelic

; 1183 : 	{
; 1184 : 		return;
; 1185 : 	}
; 1186 : 
; 1187 : 	int iItemPos = m_RELIC_POS;
; 1188 : 	PMSG_ITEMTHROW_RESULT pResult;
; 1189 : 	PHeadSetB((LPBYTE)&pResult, 0x23, sizeof(pResult));

  0008f	57		 push	 edi
  00090	6a 05		 push	 5
  00092	8d 45 ac	 lea	 eax, DWORD PTR _pResult$[ebp]
  00095	6a 23		 push	 35			; 00000023H
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 1190 : 
; 1191 : 	pResult.Result = TRUE;
; 1192 : 	pResult.Ipos = iItemPos;
; 1193 : 
; 1194 : 	int map_num = gObj[iIndex].MapNumber;

  0009d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1195 : 	int type = gObj[iIndex].pInventory[iItemPos].m_Type;

  000a5	69 7d a0 d4 00
	00 00		 imul	 edi, DWORD PTR _iItemPos$1$[ebp], 212
  000ac	c6 45 af 01	 mov	 BYTE PTR _pResult$[ebp+3], 1
  000b0	88 5d b0	 mov	 BYTE PTR _pResult$[ebp+4], bl
  000b3	8b 8c 06 c0 11
	00 00		 mov	 ecx, DWORD PTR [esi+eax+4544]
  000ba	0f b6 9c 06 23
	01 00 00	 movzx	 ebx, BYTE PTR [esi+eax+291]
  000c2	03 cf		 add	 ecx, edi
  000c4	0f bf 41 06	 movsx	 eax, WORD PTR [ecx+6]

; 1196 : 	int level = gObj[iIndex].pInventory[iItemPos].m_Level;
; 1197 : 	float dur = gObj[iIndex].pInventory[iItemPos].m_Durability;

  000c8	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  000cd	89 45 80	 mov	 DWORD PTR _type$1$[ebp], eax
  000d0	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  000d4	89 45 84	 mov	 DWORD PTR _level$1$[ebp], eax
  000d7	f3 0f 11 45 94	 movss	 DWORD PTR _dur$1$[ebp], xmm0

; 1198 : 	BOOL ret = gObj[iIndex].pInventory[iItemPos].IsItem();

  000dc	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem

; 1199 : 	BYTE Option1 = gObj[iIndex].pInventory[iItemPos].m_Option1;

  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e6	8b 8c 06 c0 11
	00 00		 mov	 ecx, DWORD PTR [esi+eax+4544]
  000ed	8a 84 39 90 00
	00 00		 mov	 al, BYTE PTR [ecx+edi+144]
  000f4	03 cf		 add	 ecx, edi
  000f6	88 45 88	 mov	 BYTE PTR _Option1$[ebp], al

; 1200 : 	BYTE Option2 = gObj[iIndex].pInventory[iItemPos].m_Option2;
; 1201 : 	BYTE Option3 = gObj[iIndex].pInventory[iItemPos].m_Option3;
; 1202 : 	BYTE NOption = gObj[iIndex].pInventory[iItemPos].m_NewOption;
; 1203 : 	DWORD s_num = gObj[iIndex].pInventory[iItemPos].m_Number;
; 1204 : 	BYTE ItemExOption = g_kJewelOfHarmonySystem.GetItemStrengthenOption(&gObj[iIndex].pInventory[iItemPos]);

  000f9	51		 push	 ecx
  000fa	8a 81 91 00 00
	00		 mov	 al, BYTE PTR [ecx+145]
  00100	88 45 8c	 mov	 BYTE PTR _Option2$[ebp], al
  00103	8a 81 92 00 00
	00		 mov	 al, BYTE PTR [ecx+146]
  00109	88 45 90	 mov	 BYTE PTR _Option3$[ebp], al
  0010c	8a 81 93 00 00
	00		 mov	 al, BYTE PTR [ecx+147]
  00112	88 85 68 ff ff
	ff		 mov	 BYTE PTR _NOption$[ebp], al
  00118	8b 01		 mov	 eax, DWORD PTR [ecx]
  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  0011f	89 85 60 ff ff
	ff		 mov	 DWORD PTR _s_num$1$[ebp], eax
  00125	e8 00 00 00 00	 call	 ?GetItemStrengthenOption@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemStrengthenOption

; 1205 : 	BYTE ItemExLevel = g_kJewelOfHarmonySystem.GetItemOptionLevel(&gObj[iIndex].pInventory[iItemPos]);

  0012a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00130	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_kJewelOfHarmonySystem@@3VCJewelOfHarmonySystem@@A ; g_kJewelOfHarmonySystem
  00135	88 45 b6	 mov	 BYTE PTR _ItemExOption$1$[ebp], al
  00138	8b 94 16 c0 11
	00 00		 mov	 edx, DWORD PTR [esi+edx+4544]
  0013f	03 d7		 add	 edx, edi
  00141	52		 push	 edx
  00142	e8 00 00 00 00	 call	 ?GetItemOptionLevel@CJewelOfHarmonySystem@@QAEEPAVCItem@@@Z ; CJewelOfHarmonySystem::GetItemOptionLevel

; 1206 : 
; 1207 : 	BYTE NewOption[MAX_EXOPTION_SIZE];
; 1208 : 	::ItemIsBufExOption(NewOption, &gObj[iIndex].pInventory[iItemPos]);

  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0014d	88 45 b7	 mov	 BYTE PTR _ItemExLevel$1$[ebp], al
  00150	8d 45 ec	 lea	 eax, DWORD PTR _NewOption$[ebp]
  00153	8b 8c 0e c0 11
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+4544]
  0015a	03 cf		 add	 ecx, edi
  0015c	51		 push	 ecx
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?ItemIsBufExOption@@YAXPAEPAVCItem@@@Z ; ItemIsBufExOption

; 1209 : 	int PetLevel = gObj[iIndex].pInventory[iItemPos].m_PetItem_Level;

  00163	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00169	8b 45 a8	 mov	 eax, DWORD PTR tv685[ebp]

; 1210 : 	int PetExp = gObj[iIndex].pInventory[iItemPos].m_PetItem_Exp;
; 1211 : 	BYTE SOption = gObj[iIndex].pInventory[iItemPos].m_SetOption;
; 1212 : 	BYTE ItemEffectEx = gObj[iIndex].pInventory[iItemPos].m_ItemOptionEx;
; 1213 : 	int item_number = gObj[iIndex].pInventory[iItemPos].m_Number;
; 1214 : 	char szItemName[50] = "Item";

  0016c	6a 2d		 push	 45			; 0000002dH
  0016e	6a 00		 push	 0
  00170	8b 84 30 c0 11
	00 00		 mov	 eax, DWORD PTR [eax+esi+4544]
  00177	8b 8c 38 b8 00
	00 00		 mov	 ecx, DWORD PTR [eax+edi+184]
  0017e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _PetLevel$1$[ebp], ecx
  00184	8b 8c 38 bc 00
	00 00		 mov	 ecx, DWORD PTR [eax+edi+188]
  0018b	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _PetExp$1$[ebp], ecx
  00191	8a 8c 38 aa 00
	00 00		 mov	 cl, BYTE PTR [eax+edi+170]
  00198	88 4d 98	 mov	 BYTE PTR _SOption$[ebp], cl
  0019b	8a 8c 38 c6 00
	00 00		 mov	 cl, BYTE PTR [eax+edi+198]
  001a2	88 4d 9c	 mov	 BYTE PTR _ItemEffectEx$[ebp], cl
  001a5	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  001a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04BGCMBJDA@Item?$AA@
  001ad	89 45 b8	 mov	 DWORD PTR _szItemName$[ebp], eax
  001b0	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04BGCMBJDA@Item?$AA@+4
  001b5	88 45 bc	 mov	 BYTE PTR _szItemName$[ebp+4], al
  001b8	8d 45 bd	 lea	 eax, DWORD PTR _szItemName$[ebp+5]
  001bb	50		 push	 eax
  001bc	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _item_number$1$[ebp], ecx
  001c2	e8 00 00 00 00	 call	 _memset
  001c7	83 c4 14	 add	 esp, 20			; 00000014H

; 1215 : 	int aAntiLootIndex = -1;
; 1216 : 
; 1217 : 	BYTE SocketOption[MAX_SOCKET_COUNT];
; 1218 : 	SocketOption[0] = 0xFF;

  001ca	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _SocketOption$[ebp], -1

; 1219 : 	SocketOption[1] = 0xFF;
; 1220 : 	SocketOption[2] = 0xFF;
; 1221 : 	SocketOption[3] = 0xFF;
; 1222 : 	SocketOption[4] = 0xFF;
; 1223 : 	BYTE SocketBonus = 0;
; 1224 : 
; 1225 : 	g_SocketItem.GetItemOptions(&gObj[iIndex].pInventory[iItemPos],&SocketOption[0],&SocketBonus);

  001d1	8d 45 a4	 lea	 eax, DWORD PTR _SocketBonus$[ebp]
  001d4	c6 45 f8 ff	 mov	 BYTE PTR _SocketOption$[ebp+4], 255 ; 000000ffH
  001d8	c6 45 a4 00	 mov	 BYTE PTR _SocketBonus$[ebp], 0
  001dc	50		 push	 eax
  001dd	8d 45 f4	 lea	 eax, DWORD PTR _SocketOption$[ebp]
  001e0	50		 push	 eax
  001e1	8b 45 a8	 mov	 eax, DWORD PTR tv685[ebp]
  001e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  001e9	8b 84 30 c0 11
	00 00		 mov	 eax, DWORD PTR [eax+esi+4544]
  001f0	03 c7		 add	 eax, edi
  001f2	50		 push	 eax
  001f3	e8 00 00 00 00	 call	 ?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z ; CSocketItems::GetItemOptions

; 1226 : 
; 1227 : 	short x = 0;
; 1228 : 	short y = 0;
; 1229 : 
; 1230 : 	BYTE attr = MapC[map_num].GetAttr(gObj[iIndex].X,gObj[iIndex].Y);

  001f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001fe	69 c3 28 38 05
	00		 imul	 eax, ebx, 342056
  00204	8b 5d a8	 mov	 ebx, DWORD PTR tv685[ebp]
  00207	8d b0 00 00 00
	00		 lea	 esi, DWORD PTR ?MapC@@3PAVMapClass@@A[eax]
  0020d	0f b6 84 0b 21
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+289]
  00215	50		 push	 eax
  00216	0f b6 84 0b 20
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+288]
  0021e	8b ce		 mov	 ecx, esi
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr
  00226	a8 0c		 test	 al, 12			; 0000000cH

; 1231 : 
; 1232 : 	if( (attr & 4) == 4 || (attr&8) == 8 )

  00228	75 18		 jne	 SHORT $LN8@DropRelic

; 1236 : 	}
; 1237 : 	else
; 1238 : 	{
; 1239 : 		x = gObj[iIndex].X;

  0022a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00230	0f b6 94 0b 20
	01 00 00	 movzx	 edx, BYTE PTR [ebx+ecx+288]

; 1240 : 		y = gObj[iIndex].Y;

  00238	0f b6 84 0b 21
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+289]
  00240	eb 08		 jmp	 SHORT $LN7@DropRelic
$LN8@DropRelic:

; 1233 : 	{
; 1234 : 		x = 168;

  00242	ba a8 00 00 00	 mov	 edx, 168		; 000000a8H

; 1235 : 		y = 85;

  00247	8d 42 ad	 lea	 eax, DWORD PTR [edx-83]
$LN7@DropRelic:

; 1241 : 	}
; 1242 : 
; 1243 : 	if ( MapC[map_num].ItemDrop(type, level, dur, x, y,Option1, Option2, Option3, NOption, SOption, item_number, aAntiLootIndex, PetLevel, PetExp, ItemEffectEx,SocketOption,SocketBonus) == TRUE )

  0024a	ff 75 a4	 push	 DWORD PTR _SocketBonus$[ebp]
  0024d	8d 4d f4	 lea	 ecx, DWORD PTR _SocketOption$[ebp]
  00250	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _dur$1$[ebp]
  00255	51		 push	 ecx
  00256	ff 75 9c	 push	 DWORD PTR _ItemEffectEx$[ebp]
  00259	98		 cwde
  0025a	ff b5 74 ff ff
	ff		 push	 DWORD PTR _PetExp$1$[ebp]
  00260	ff b5 70 ff ff
	ff		 push	 DWORD PTR _PetLevel$1$[ebp]
  00266	6a ff		 push	 -1
  00268	ff b5 6c ff ff
	ff		 push	 DWORD PTR _item_number$1$[ebp]
  0026e	ff 75 98	 push	 DWORD PTR _SOption$[ebp]
  00271	ff b5 68 ff ff
	ff		 push	 DWORD PTR _NOption$[ebp]
  00277	ff 75 90	 push	 DWORD PTR _Option3$[ebp]
  0027a	ff 75 8c	 push	 DWORD PTR _Option2$[ebp]
  0027d	ff 75 88	 push	 DWORD PTR _Option1$[ebp]
  00280	50		 push	 eax
  00281	0f bf c2	 movsx	 eax, dx
  00284	50		 push	 eax
  00285	51		 push	 ecx
  00286	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028b	8b ce		 mov	 ecx, esi
  0028d	ff 75 84	 push	 DWORD PTR _level$1$[ebp]
  00290	ff 75 80	 push	 DWORD PTR _type$1$[ebp]
  00293	e8 00 00 00 00	 call	 ?ItemDrop@MapClass@@QAEHHHMHHEEEEEKHHHEPAEE@Z ; MapClass::ItemDrop

; 1244 : 	{
; 1245 : 		LogAddTD("[Illusion Temple] (%d) (%s)(%s) to Drop Relics Item [Serial:%u]",

  00298	8b b5 7c ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0029e	83 f8 01	 cmp	 eax, 1
  002a1	0f 85 fa 00 00
	00		 jne	 $LN9@DropRelic
  002a7	0f b6 86 bd 03
	00 00		 movzx	 eax, BYTE PTR [esi+957]
  002ae	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR tv478[ebp]
  002b4	69 c8 d4 00 00
	00		 imul	 ecx, eax, 212
  002ba	8b 84 13 c0 11
	00 00		 mov	 eax, DWORD PTR [ebx+edx+4544]
  002c1	ff 34 01	 push	 DWORD PTR [ecx+eax]
  002c4	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  002c7	03 c3		 add	 eax, ebx
  002c9	50		 push	 eax
  002ca	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  002cd	03 c3		 add	 eax, ebx
  002cf	50		 push	 eax
  002d0	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  002d7	40		 inc	 eax
  002d8	50		 push	 eax
  002d9	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@DBPKHFEA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@
  002de	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1246 : 			Temple+1,lpObj->AccountID,lpObj->Name,lpObj->pInventory[m_RELIC_POS].m_Number);
; 1247 : 
; 1248 : 		::gObjInventoryDeleteItem(iIndex, iItemPos);

  002e4	ff 75 a0	 push	 DWORD PTR _iItemPos$1$[ebp]
  002e7	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _iIndex$GSCopy$1$[ebp]
  002ed	57		 push	 edi
  002ee	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 1249 : 		pResult.Result = TRUE;
; 1250 : 
; 1251 : 		LogAddTD(lMsg.Get(MSGGET(1, 223)), gObj[iIndex].AccountID, gObj[iIndex].Name, gObj[iIndex].MapNumber,

  002f3	0f b6 45 b7	 movzx	 eax, BYTE PTR _ItemExLevel$1$[ebp]
  002f7	83 c4 1c	 add	 esp, 28			; 0000001cH
  002fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00300	c6 45 af 01	 mov	 BYTE PTR _pResult$[ebp+3], 1
  00304	50		 push	 eax
  00305	0f b6 45 b6	 movzx	 eax, BYTE PTR _ItemExOption$1$[ebp]
  00309	50		 push	 eax
  0030a	0f b6 45 9c	 movzx	 eax, BYTE PTR _ItemEffectEx$[ebp]
  0030e	c1 e8 07	 shr	 eax, 7
  00311	50		 push	 eax
  00312	0f b6 45 98	 movzx	 eax, BYTE PTR _SOption$[ebp]
  00316	50		 push	 eax
  00317	0f b6 45 f2	 movzx	 eax, BYTE PTR _NewOption$[ebp+6]
  0031b	50		 push	 eax
  0031c	0f b6 45 f1	 movzx	 eax, BYTE PTR _NewOption$[ebp+5]
  00320	50		 push	 eax
  00321	0f b6 45 f0	 movzx	 eax, BYTE PTR _NewOption$[ebp+4]
  00325	50		 push	 eax
  00326	0f b6 45 ef	 movzx	 eax, BYTE PTR _NewOption$[ebp+3]
  0032a	50		 push	 eax
  0032b	0f b6 45 ee	 movzx	 eax, BYTE PTR _NewOption$[ebp+2]
  0032f	50		 push	 eax
  00330	0f b6 45 ed	 movzx	 eax, BYTE PTR _NewOption$[ebp+1]
  00334	50		 push	 eax
  00335	0f b6 45 ec	 movzx	 eax, BYTE PTR _NewOption$[ebp]
  00339	50		 push	 eax
  0033a	f3 0f 2c 45 94	 cvttss2si eax, DWORD PTR _dur$1$[ebp]
  0033f	50		 push	 eax
  00340	0f b6 45 90	 movzx	 eax, BYTE PTR _Option3$[ebp]
  00344	50		 push	 eax
  00345	0f b6 45 8c	 movzx	 eax, BYTE PTR _Option2$[ebp]
  00349	50		 push	 eax
  0034a	0f b6 45 88	 movzx	 eax, BYTE PTR _Option1$[ebp]
  0034e	50		 push	 eax
  0034f	ff 75 84	 push	 DWORD PTR _level$1$[ebp]
  00352	8d 45 b8	 lea	 eax, DWORD PTR _szItemName$[ebp]
  00355	ff 75 80	 push	 DWORD PTR _type$1$[ebp]
  00358	50		 push	 eax
  00359	ff b5 60 ff ff
	ff		 push	 DWORD PTR _s_num$1$[ebp]
  0035f	0f b6 84 0b 21
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+289]
  00367	50		 push	 eax
  00368	0f b6 84 0b 20
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+288]
  00370	50		 push	 eax
  00371	0f b6 84 0b 23
	01 00 00	 movzx	 eax, BYTE PTR [ebx+ecx+291]
  00379	50		 push	 eax
  0037a	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0037d	03 c3		 add	 eax, ebx
  0037f	50		 push	 eax
  00380	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00383	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00388	03 c3		 add	 eax, ebx
  0038a	50		 push	 eax
  0038b	68 df 01 00 00	 push	 479			; 000001dfH
  00390	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00395	50		 push	 eax
  00396	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0039c	83 c4 64	 add	 esp, 100		; 00000064H

; 1252 : 			gObj[iIndex].X, gObj[iIndex].Y, s_num, szItemName, type, level, Option1, Option2, Option3, (int)dur, NewOption[0],
; 1253 : 			NewOption[1], NewOption[2], NewOption[3], NewOption[4], NewOption[5], NewOption[6], SOption,
; 1254 : 			ItemEffectEx>>7, ItemExOption, ItemExLevel);
; 1255 : 	}
; 1256 : 	else

  0039f	eb 0a		 jmp	 SHORT $LN10@DropRelic
$LN9@DropRelic:
  003a1	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _iIndex$GSCopy$1$[ebp]

; 1257 : 	{
; 1258 : 		pResult.Result = FALSE;

  003a7	c6 45 af 00	 mov	 BYTE PTR _pResult$[ebp+3], 0
$LN10@DropRelic:

; 1259 : 	}
; 1260 : 
; 1261 : 	m_RELIC_PLAYER = -1;
; 1262 : 	m_RELIC_POS = (BYTE)-1;
; 1263 : 	m_RELIC_TEAM = (BYTE)-1;
; 1264 : 
; 1265 : 	DataSend(iIndex,(LPBYTE)&pResult,pResult.h.size);

  003ab	0f b6 45 ad	 movzx	 eax, BYTE PTR _pResult$[ebp+1]
  003af	50		 push	 eax
  003b0	8d 45 ac	 lea	 eax, DWORD PTR _pResult$[ebp]
  003b3	c7 86 b8 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+952], -1
  003bd	50		 push	 eax
  003be	57		 push	 edi
  003bf	66 c7 86 bc 03
	00 00 ff ff	 mov	 WORD PTR [esi+956], 65535 ; 0000ffffH
  003c8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  003cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  003d0	5f		 pop	 edi
$LN15@DropRelic:
  003d1	5e		 pop	 esi
  003d2	5b		 pop	 ebx
$LN1@DropRelic:

; 1266 : }

  003d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d6	33 cd		 xor	 ecx, ebp
  003d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003dd	8b e5		 mov	 esp, ebp
  003df	5d		 pop	 ebp
  003e0	c2 04 00	 ret	 4
$LN14@DropRelic:

; 1165 : 	{
; 1166 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  003e3	68 8e 04 00 00	 push	 1166			; 0000048eH
  003e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  003ed	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  003f2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1266 : }

  003f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  003fe	33 cd		 xor	 ecx, ebp
  00400	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00405	8b e5		 mov	 esp, ebp
  00407	5d		 pop	 ebp
  00408	c2 04 00	 ret	 4
?DropRelic@CIllusionTempleProcess@@QAEXH@Z ENDP		; CIllusionTempleProcess::DropRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::DeleteRelic, COMDAT
; _this$ = ecx

; 1151 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1152 : 	if( lpObj->pInventory[m_RELIC_POS].m_Type == ITEMGET(14,64) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	b9 40 1c 00 00	 mov	 ecx, 7232		; 00001c40H
  0000f	0f b6 87 bd 03
	00 00		 movzx	 eax, BYTE PTR [edi+957]
  00016	69 d0 d4 00 00
	00		 imul	 edx, eax, 212
  0001c	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  00022	66 39 4c 02 06	 cmp	 WORD PTR [edx+eax+6], cx
  00027	75 42		 jne	 SHORT $LN2@DeleteReli

; 1153 : 	{
; 1154 : 		LogAddTD("[Illusion Temple] (%d) (%s)(%s) to Delete Relics Item [Serial:%u]",

  00029	ff 34 02	 push	 DWORD PTR [edx+eax]
  0002c	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0002f	50		 push	 eax
  00030	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00033	50		 push	 eax
  00034	0f b6 87 2c 02
	00 00		 movzx	 eax, BYTE PTR [edi+556]
  0003b	40		 inc	 eax
  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@KBKIJFJA@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1155 : 			Temple+1,lpObj->AccountID,lpObj->Name,lpObj->pInventory[m_RELIC_POS].m_Number);
; 1156 : 
; 1157 : 		gObjInventoryDeleteItem(lpObj->m_Index,m_RELIC_POS);

  00048	0f b6 87 bd 03
	00 00		 movzx	 eax, BYTE PTR [edi+957]
  0004f	50		 push	 eax
  00050	ff 36		 push	 DWORD PTR [esi]
  00052	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 1158 : 		GCInventoryItemDeleteSend(lpObj->m_Index,m_RELIC_POS,0);

  00057	0f b6 87 bd 03
	00 00		 movzx	 eax, BYTE PTR [edi+957]
  0005e	6a 00		 push	 0
  00060	50		 push	 eax
  00061	ff 36		 push	 DWORD PTR [esi]
  00063	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  00068	83 c4 28	 add	 esp, 40			; 00000028H
$LN2@DeleteReli:
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi

; 1159 : 	}
; 1160 : }

  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::DeleteRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetEnterItem@CIllusionTempleProcess@@QAEHH@Z
_TEXT	SEGMENT
tv206 = -8						; size = 4
_this$1$ = -4						; size = 4
_aIndex$ = 8						; size = 4
?GetEnterItem@CIllusionTempleProcess@@QAEHH@Z PROC	; CIllusionTempleProcess::GetEnterItem, COMDAT
; _this$ = ecx

; 2374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 2375 : 	if( OBJMAX_RANGE(aIndex) == FALSE )

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  0000c	85 c9		 test	 ecx, ecx
  0000e	0f 88 ce 00 00
	00		 js	 $LN23@GetEnterIt
  00014	33 c0		 xor	 eax, eax
  00016	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0001c	0f 9e c0	 setle	 al
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 bb 00 00
	00		 je	 $LN23@GetEnterIt

; 2379 : 	}
; 2380 : 
; 2381 : 	int pos = -1;
; 2382 : 
; 2383 : 
; 2384 : 	for(int n = 0; n < INVENTORY_SIZE; n++)

  00027	53		 push	 ebx
  00028	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  0002e	56		 push	 esi
  0002f	57		 push	 edi
  00030	33 ff		 xor	 edi, edi
  00032	33 db		 xor	 ebx, ebx
  00034	89 4d f8	 mov	 DWORD PTR tv206[ebp], ecx
  00037	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@GetEnterIt:

; 2385 : 	{
; 2386 : 		CItem* lpItem = &gObj[aIndex].pInventory[n];

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	8b b4 01 c0 11
	00 00		 mov	 esi, DWORD PTR [ecx+eax+4544]
  0004c	03 f3		 add	 esi, ebx

; 2387 : 
; 2388 : 		if( lpItem->IsItem() == TRUE )

  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00055	83 f8 01	 cmp	 eax, 1
  00058	75 5a		 jne	 SHORT $LN2@GetEnterIt

; 2389 : 		{
; 2390 : 			if( lpItem->m_Type == ITEMGET(13,51) &&

  0005a	b8 33 1a 00 00	 mov	 eax, 6707		; 00001a33H
  0005f	66 39 46 06	 cmp	 WORD PTR [esi+6], ax
  00063	75 37		 jne	 SHORT $LN9@GetEnterIt
  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00068	0f b6 88 2c 02
	00 00		 movzx	 ecx, BYTE PTR [eax+556]
  0006f	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  00073	41		 inc	 ecx
  00074	3b c1		 cmp	 eax, ecx
  00076	75 24		 jne	 SHORT $LN9@GetEnterIt

; 2391 : 				lpItem->m_Level == Temple+1 )
; 2392 : 			{
; 2393 : 				if( lpItem->m_Durability > 0.0f )

  00078	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  0007d	0f 57 c9	 xorps	 xmm1, xmm1
  00080	0f 2f c1	 comiss	 xmm0, xmm1
  00083	77 46		 ja	 SHORT $LN18@GetEnterIt

; 2396 : 					break;
; 2397 : 				}
; 2398 : 				else
; 2399 : 				{
; 2400 : 					gObjInventoryDeleteItem(aIndex,n);

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00089	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 2401 : 					GCInventoryItemDeleteSend(aIndex,n,0);

  0008e	6a 00		 push	 0
  00090	57		 push	 edi
  00091	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00094	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  00099	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@GetEnterIt:

; 2402 : 				}
; 2403 : 			}
; 2404 : 
; 2405 : 			if( lpItem->m_Type == ITEMGET(13,61) )

  0009c	b8 3d 1a 00 00	 mov	 eax, 6717		; 00001a3dH
  000a1	66 39 46 06	 cmp	 WORD PTR [esi+6], ax
  000a5	75 0d		 jne	 SHORT $LN2@GetEnterIt

; 2406 : 			{
; 2407 : 				if( lpItem->m_Durability > 0.0f )

  000a7	f3 0f 10 46 24	 movss	 xmm0, DWORD PTR [esi+36]
  000ac	0f 57 c9	 xorps	 xmm1, xmm1
  000af	0f 2f c1	 comiss	 xmm0, xmm1
  000b2	77 17		 ja	 SHORT $LN18@GetEnterIt
$LN2@GetEnterIt:

; 2379 : 	}
; 2380 : 
; 2381 : 	int pos = -1;
; 2382 : 
; 2383 : 
; 2384 : 	for(int n = 0; n < INVENTORY_SIZE; n++)

  000b4	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  000ba	47		 inc	 edi
  000bb	81 fb 44 c4 00
	00		 cmp	 ebx, 50244		; 0000c444H
  000c1	7d 13		 jge	 SHORT $LN26@GetEnterIt
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR tv206[ebp]
  000c6	e9 75 ff ff ff	 jmp	 $LL4@GetEnterIt
$LN18@GetEnterIt:

; 2394 : 				{
; 2395 : 					pos = n;

  000cb	8b c7		 mov	 eax, edi
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx

; 2408 : 				{
; 2409 : 					if( lpItem->m_Durability > 0.0f )
; 2410 : 					{
; 2411 : 						pos = n;
; 2412 : 						break;
; 2413 : 					}
; 2414 : 					else
; 2415 : 					{
; 2416 : 						gObjInventoryDeleteItem(aIndex,n);
; 2417 : 						GCInventoryItemDeleteSend(aIndex,n,0);
; 2418 : 					}
; 2419 : 				}
; 2420 : 			}
; 2421 : 		}
; 2422 : 	}
; 2423 : return pos;
; 2424 : }

  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c2 04 00	 ret	 4
$LN26@GetEnterIt:
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
  000d8	83 c8 ff	 or	 eax, -1
  000db	5b		 pop	 ebx
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 04 00	 ret	 4
$LN23@GetEnterIt:

; 2376 : 	{
; 2377 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  000e2	68 49 09 00 00	 push	 2377			; 00000949H
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2378 : 		return -1;

  000fa	83 c8 ff	 or	 eax, -1

; 2408 : 				{
; 2409 : 					if( lpItem->m_Durability > 0.0f )
; 2410 : 					{
; 2411 : 						pos = n;
; 2412 : 						break;
; 2413 : 					}
; 2414 : 					else
; 2415 : 					{
; 2416 : 						gObjInventoryDeleteItem(aIndex,n);
; 2417 : 						GCInventoryItemDeleteSend(aIndex,n,0);
; 2418 : 					}
; 2419 : 				}
; 2420 : 			}
; 2421 : 		}
; 2422 : 	}
; 2423 : return pos;
; 2424 : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
?GetEnterItem@CIllusionTempleProcess@@QAEHH@Z ENDP	; CIllusionTempleProcess::GetEnterItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ClickIllusionNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?ClickIllusionNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleProcess::ClickIllusionNpc, COMDAT
; _this$ = ecx

; 1106 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1107 : 	if( m_RELIC_TEAM == (BYTE)-1 ||
; 1108 : 		m_RELIC_TEAM != IT_ILLUSION_TEAM ||

  00006	8a 86 bc 03 00
	00		 mov	 al, BYTE PTR [esi+956]
  0000c	3c ff		 cmp	 al, 255			; 000000ffH
  0000e	0f 84 8e 00 00
	00		 je	 $LN3@ClickIllus
  00014	3c 01		 cmp	 al, 1
  00016	0f 85 86 00 00
	00		 jne	 $LN3@ClickIllus
  0001c	57		 push	 edi
  0001d	8b 7d 0c	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00020	8b 07		 mov	 eax, DWORD PTR [edi]
  00022	3b 86 b8 03 00
	00		 cmp	 eax, DWORD PTR [esi+952]
  00028	75 77		 jne	 SHORT $LN6@ClickIllus

; 1109 : 		lpObj->m_Index != m_RELIC_PLAYER )
; 1110 : 	{
; 1111 : 		return;
; 1112 : 	}
; 1113 : 
; 1114 : 	if( lpObj->pInventory[m_RELIC_POS].m_Type == ITEMGET(14,64) )

  0002a	0f b6 86 bd 03
	00 00		 movzx	 eax, BYTE PTR [esi+957]
  00031	ba 40 1c 00 00	 mov	 edx, 7232		; 00001c40H
  00036	69 c8 d4 00 00
	00		 imul	 ecx, eax, 212
  0003c	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00042	66 39 54 01 06	 cmp	 WORD PTR [ecx+eax+6], dx
  00047	75 51		 jne	 SHORT $LN4@ClickIllus

; 1115 : 	{
; 1116 : 		m_ILLUSION_TEAM_PTS++;

  00049	fe 86 d1 03 00
	00		 inc	 BYTE PTR [esi+977]

; 1117 : 		DeleteRelic(lpObj);

  0004f	8b ce		 mov	 ecx, esi
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::DeleteRelic

; 1118 : 		m_RELIC_TEAM = (BYTE)-1;

  00057	66 c7 86 bc 03
	00 00 ff ff	 mov	 WORD PTR [esi+956], 65535 ; 0000ffffH

; 1119 : 		m_RELIC_PLAYER = -1;
; 1120 : 		m_RELIC_POS = (BYTE)-1;
; 1121 : 
; 1122 : 		AddSuccessRelic(lpObj->m_Index);

  00060	8b ce		 mov	 ecx, esi
  00062	c7 86 b8 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+952], -1
  0006c	ff 37		 push	 DWORD PTR [edi]
  0006e	e8 00 00 00 00	 call	 ?AddSuccessRelic@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddSuccessRelic

; 1123 : 
; 1124 : 		LogAddTD("[Illusion Temple] (%d) Increase IllusionTeam Relics Point: (%s)(%s)(Score:%d)",

  00073	0f b6 86 d1 03
	00 00		 movzx	 eax, BYTE PTR [esi+977]
  0007a	50		 push	 eax
  0007b	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0007e	50		 push	 eax
  0007f	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00082	50		 push	 eax
  00083	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0008a	40		 inc	 eax
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@HGHKGJCL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00097	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@ClickIllus:

; 1125 : 			Temple+1,lpObj->AccountID,lpObj->Name,m_ILLUSION_TEAM_PTS);
; 1126 : 	}
; 1127 : 
; 1128 : 	SetStatueTime();

  0009a	8b ce		 mov	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?SetStatueTime@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetStatueTime
$LN6@ClickIllus:
  000a1	5f		 pop	 edi
$LN3@ClickIllus:
  000a2	5e		 pop	 esi

; 1129 : }

  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
?ClickIllusionNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleProcess::ClickIllusionNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ClickAlliedNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?ClickAlliedNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleProcess::ClickAlliedNpc, COMDAT
; _this$ = ecx

; 1080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1081 : 	if( m_RELIC_TEAM == (BYTE)-1 ||
; 1082 : 		m_RELIC_TEAM != IT_ALLIED_TEAM ||

  00006	8a 86 bc 03 00
	00		 mov	 al, BYTE PTR [esi+956]
  0000c	3c ff		 cmp	 al, 255			; 000000ffH
  0000e	0f 84 8e 00 00
	00		 je	 $LN3@ClickAllie
  00014	84 c0		 test	 al, al
  00016	0f 85 86 00 00
	00		 jne	 $LN3@ClickAllie
  0001c	57		 push	 edi
  0001d	8b 7d 0c	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00020	8b 07		 mov	 eax, DWORD PTR [edi]
  00022	3b 86 b8 03 00
	00		 cmp	 eax, DWORD PTR [esi+952]
  00028	75 77		 jne	 SHORT $LN6@ClickAllie

; 1083 : 		lpObj->m_Index != m_RELIC_PLAYER )
; 1084 : 	{
; 1085 : 		return;
; 1086 : 	}
; 1087 : 
; 1088 : 	if( lpObj->pInventory[m_RELIC_POS].m_Type == ITEMGET(14,64) )

  0002a	0f b6 86 bd 03
	00 00		 movzx	 eax, BYTE PTR [esi+957]
  00031	ba 40 1c 00 00	 mov	 edx, 7232		; 00001c40H
  00036	69 c8 d4 00 00
	00		 imul	 ecx, eax, 212
  0003c	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00042	66 39 54 01 06	 cmp	 WORD PTR [ecx+eax+6], dx
  00047	75 51		 jne	 SHORT $LN4@ClickAllie

; 1089 : 	{
; 1090 : 		m_ALLIED_TEAM_PTS++;

  00049	fe 86 d0 03 00
	00		 inc	 BYTE PTR [esi+976]

; 1091 : 		DeleteRelic(lpObj);

  0004f	8b ce		 mov	 ecx, esi
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::DeleteRelic

; 1092 : 		m_RELIC_TEAM = (BYTE)-1;

  00057	66 c7 86 bc 03
	00 00 ff ff	 mov	 WORD PTR [esi+956], 65535 ; 0000ffffH

; 1093 : 		m_RELIC_PLAYER = -1;
; 1094 : 		m_RELIC_POS = (BYTE)-1;
; 1095 : 
; 1096 : 		AddSuccessRelic(lpObj->m_Index);

  00060	8b ce		 mov	 ecx, esi
  00062	c7 86 b8 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+952], -1
  0006c	ff 37		 push	 DWORD PTR [edi]
  0006e	e8 00 00 00 00	 call	 ?AddSuccessRelic@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddSuccessRelic

; 1097 : 
; 1098 : 		LogAddTD("[Illusion Temple] (%d) Increase AlliedTeam Relics Point: (%s)(%s)(Score:%d)",

  00073	0f b6 86 d0 03
	00 00		 movzx	 eax, BYTE PTR [esi+976]
  0007a	50		 push	 eax
  0007b	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0007e	50		 push	 eax
  0007f	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00082	50		 push	 eax
  00083	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0008a	40		 inc	 eax
  0008b	50		 push	 eax
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@NAJEPMDL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Increase?5@
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00097	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@ClickAllie:

; 1099 : 			Temple+1,lpObj->AccountID,lpObj->Name,m_ALLIED_TEAM_PTS);
; 1100 : 	}
; 1101 : 
; 1102 : 	SetStatueTime();

  0009a	8b ce		 mov	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?SetStatueTime@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetStatueTime
$LN6@ClickAllie:
  000a1	5f		 pop	 edi
$LN3@ClickAllie:
  000a2	5e		 pop	 esi

; 1103 : }

  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
?ClickAlliedNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleProcess::ClickAlliedNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ClickToStatus@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?ClickToStatus@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleProcess::ClickToStatus, COMDAT
; _this$ = ecx

; 1038 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1039 : 	if( lpNpc->m_State == 0 || lpNpc->m_PosNum == -1 )

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpNpc$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	83 be d0 01 00
	00 00		 cmp	 DWORD PTR [esi+464], 0
  00011	0f 84 ec 00 00
	00		 je	 $LN5@ClickToSta
  00017	66 83 be 98 05
	00 00 ff	 cmp	 WORD PTR [esi+1432], -1
  0001f	0f 84 de 00 00
	00		 je	 $LN5@ClickToSta

; 1040 : 	{
; 1041 : 		return;
; 1042 : 	}
; 1043 : 
; 1044 : 	if( abs(lpObj->Y -lpNpc->Y) > 3 ||

  00025	0f b6 8e 21 01
	00 00		 movzx	 ecx, BYTE PTR [esi+289]
  0002c	57		 push	 edi
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00030	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  00037	2b c1		 sub	 eax, ecx
  00039	99		 cdq
  0003a	33 c2		 xor	 eax, edx
  0003c	2b c2		 sub	 eax, edx
  0003e	83 f8 03	 cmp	 eax, 3
  00041	0f 8f bb 00 00
	00		 jg	 $LN7@ClickToSta
  00047	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  0004e	0f b6 8e 20 01
	00 00		 movzx	 ecx, BYTE PTR [esi+288]
  00055	2b c1		 sub	 eax, ecx
  00057	99		 cdq
  00058	33 c2		 xor	 eax, edx
  0005a	2b c2		 sub	 eax, edx
  0005c	83 f8 03	 cmp	 eax, 3
  0005f	0f 8f 9d 00 00
	00		 jg	 $LN7@ClickToSta

; 1045 : 		abs(lpObj->X -lpNpc->X) > 3 )
; 1046 : 	{
; 1047 : 		return;
; 1048 : 	}
; 1049 : 
; 1050 : 	lpNpc->m_PosNum = (short)-1;
; 1051 : 	lpNpc->Life = 0.0f;
; 1052 : 
; 1053 : 	gObjLifeCheck(lpNpc,lpObj,0,1,0,0,0,0);

  00065	6a 00		 push	 0
  00067	6a 00		 push	 0
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	6a 01		 push	 1
  0006f	6a 00		 push	 0
  00071	83 c8 ff	 or	 eax, -1
  00074	c7 86 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+216], 0
  0007e	57		 push	 edi
  0007f	56		 push	 esi
  00080	66 89 86 98 05
	00 00		 mov	 WORD PTR [esi+1432], ax
  00087	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck

; 1054 : 
; 1055 : 	BYTE dur = 0;
; 1056 : 	int type = 0;
; 1057 : 	int level = 0;
; 1058 : 	int Option1 = 0;
; 1059 : 	int Option2 = 0;
; 1060 : 	int Option3 = 0;
; 1061 : 	int unk1 = 0;
; 1062 : 	int unk2 = 0; 
; 1063 : 	int NewOption  =0;
; 1064 : 
; 1065 : 	type = ItemGetNumberMake(14,64);

  0008c	6a 40		 push	 64			; 00000040H
  0008e	6a 0e		 push	 14			; 0000000eH
  00090	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake

; 1066 : 	Option1 = 0;
; 1067 : 	Option2 = 0;
; 1068 : 	Option3 = 0;
; 1069 : 	level = 0;
; 1070 : 
; 1071 : 	ItemSerialCreateSend(lpObj->m_Index,lpObj->MapNumber,lpNpc->X,lpNpc->Y,type,level,dur,Option1,Option2,Option3,lpObj->m_Index,NewOption,0);

  00095	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	51		 push	 ecx
  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	6a 00		 push	 0
  000a6	6a 00		 push	 0
  000a8	6a 00		 push	 0
  000aa	50		 push	 eax
  000ab	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  000b2	50		 push	 eax
  000b3	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  000ba	50		 push	 eax
  000bb	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  000c2	50		 push	 eax
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1072 : 
; 1073 : 	LogAddTD("[Illusion Temple] (%d) [%s][%s] Click To Status (X:%d, Y:%d)",

  000c9	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  000d0	83 c4 64	 add	 esp, 100		; 00000064H
  000d3	50		 push	 eax
  000d4	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  000db	50		 push	 eax
  000dc	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000df	50		 push	 eax
  000e0	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000e3	50		 push	 eax
  000e4	0f b6 83 2c 02
	00 00		 movzx	 eax, BYTE PTR [ebx+556]
  000eb	40		 inc	 eax
  000ec	50		 push	 eax
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@KNCFCJAC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f8	83 c4 18	 add	 esp, 24			; 00000018H

; 1074 : 		Temple+1,lpObj->AccountID,lpObj->Name,lpNpc->X,lpNpc->Y);
; 1075 : 
; 1076 : 	MonsterRegen();

  000fb	8b cb		 mov	 ecx, ebx
  000fd	e8 00 00 00 00	 call	 ?MonsterRegen@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::MonsterRegen
$LN7@ClickToSta:
  00102	5f		 pop	 edi
$LN5@ClickToSta:
  00103	5e		 pop	 esi
  00104	5b		 pop	 ebx

; 1077 : }

  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
?ClickToStatus@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleProcess::ClickToStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SendState@CIllusionTempleProcess@@QAEXEH@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
_btState$ = 8						; size = 1
_aIndex$ = 12						; size = 4
?SendState@CIllusionTempleProcess@@QAEXEH@Z PROC	; CIllusionTempleProcess::SendState, COMDAT
; _this$ = ecx

; 1676 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1677 : 	PMSG_ILLUSIONTEMPLE_STATESEND pMsg;
; 1678 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,0x09,sizeof(pMsg));

  00007	6a 06		 push	 6
  00009	6a 09		 push	 9
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000e	8b f1		 mov	 esi, ecx
  00010	68 bf 00 00 00	 push	 191			; 000000bfH
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1679 : 	pMsg.Temple = Temple;

  0001b	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 1680 : 	pMsg.State = btState;
; 1681 : 
; 1682 : 	if( aIndex != -1 )

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _aIndex$[ebp]
  00028	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
  0002b	8a 45 08	 mov	 al, BYTE PTR _btState$[ebp]
  0002e	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  00031	83 f9 ff	 cmp	 ecx, -1
  00034	74 19		 je	 SHORT $LN5@SendState

; 1683 : 	{
; 1684 : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);

  00036	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0003a	50		 push	 eax
  0003b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	5e		 pop	 esi

; 1694 : 		}
; 1695 : 	}
; 1696 : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN5@SendState:
  0004f	57		 push	 edi

; 1685 : 		return;
; 1686 : 	}
; 1687 : 
; 1688 : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  00050	83 c6 20	 add	 esi, 32			; 00000020H
  00053	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
$LL4@SendState:

; 1689 : 	{
; 1690 : 		if( m_PlayerData[i].m_Index != -1 &&

  00058	8b 16		 mov	 edx, DWORD PTR [esi]
  0005a	83 fa ff	 cmp	 edx, -1
  0005d	74 24		 je	 SHORT $LN2@SendState
  0005f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00064	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0006a	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  0006f	7e 12		 jle	 SHORT $LN2@SendState

; 1691 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1692 : 		{
; 1693 : 			DataSend(m_PlayerData[i].m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  00071	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00075	50		 push	 eax
  00076	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00079	50		 push	 eax
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendState:

; 1685 : 		return;
; 1686 : 	}
; 1687 : 
; 1688 : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  00083	83 c6 30	 add	 esi, 48			; 00000030H
  00086	83 ef 01	 sub	 edi, 1
  00089	75 cd		 jne	 SHORT $LL4@SendState
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi

; 1694 : 		}
; 1695 : 	}
; 1696 : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?SendState@CIllusionTempleProcess@@QAEXEH@Z ENDP	; CIllusionTempleProcess::SendState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?EnterUser@CIllusionTempleProcess@@QAEHHEE@Z
_TEXT	SEGMENT
_bResult$1$ = -4					; size = 4
tv251 = 8						; size = 4
_aIndex$ = 8						; size = 4
_Temple$ = 12						; size = 1
_Pos$ = 16						; size = 1
?EnterUser@CIllusionTempleProcess@@QAEHHEE@Z PROC	; CIllusionTempleProcess::EnterUser, COMDAT
; _this$ = ecx

; 764  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 765  : 	if( OBJMAX_RANGE(aIndex) == FALSE )

  00005	8b 75 08	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	85 f6		 test	 esi, esi
  0000d	0f 88 0d 01 00
	00		 js	 $LN19@EnterUser
  00013	33 c0		 xor	 eax, eax
  00015	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 fa 00 00
	00		 je	 $LN19@EnterUser

; 769  : 	}
; 770  : 
; 771  : 	if( GetState() >= IT_STATE_PREPARE )

  00026	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  0002b	3c 01		 cmp	 al, 1
  0002d	0f 83 05 01 00
	00		 jae	 $LN20@EnterUser

; 772  : 	{
; 773  : 		return false;
; 774  : 	}
; 775  : 
; 776  : 	if( gObj[aIndex].iTempleIndex != -1 )

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00038	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  0003e	89 4d 08	 mov	 DWORD PTR tv251[ebp], ecx
  00041	83 bc 01 78 24
	00 00 ff	 cmp	 DWORD PTR [ecx+eax+9336], -1
  00049	74 18		 je	 SHORT $LN7@EnterUser

; 777  : 	{
; 778  : 		LogAdd("Enter Error: IllusionTempleIndex Fail");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@IGMLEOMK@Enter?5Error?3?5IllusionTempleIndex@
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00056	83 c4 04	 add	 esp, 4
  00059	33 c0		 xor	 eax, eax
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 813  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 0c 00	 ret	 12			; 0000000cH
$LN7@EnterUser:
  00063	53		 push	 ebx

; 779  : 		return false;
; 780  : 	}
; 781  : 
; 782  : 	int RelicPos = GetRelicPos(aIndex);

  00064	56		 push	 esi
  00065	8b cf		 mov	 ecx, edi
  00067	e8 00 00 00 00	 call	 ?GetRelicPos@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::GetRelicPos
  0006c	8b d8		 mov	 ebx, eax

; 783  : 
; 784  : 	if( RelicPos >= 0 )

  0006e	85 db		 test	 ebx, ebx
  00070	78 35		 js	 SHORT $LN9@EnterUser

; 785  : 	{
; 786  : 		if( gObj[aIndex].pInventory[RelicPos].m_Type == ITEMGET(14,64) )

  00072	8b 45 08	 mov	 eax, DWORD PTR tv251[ebp]
  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007b	69 d3 d4 00 00
	00		 imul	 edx, ebx, 212
  00081	8b 8c 08 c0 11
	00 00		 mov	 ecx, DWORD PTR [eax+ecx+4544]
  00088	b8 40 1c 00 00	 mov	 eax, 7232		; 00001c40H
  0008d	66 39 44 11 06	 cmp	 WORD PTR [ecx+edx+6], ax
  00092	75 13		 jne	 SHORT $LN9@EnterUser

; 787  : 		{
; 788  : 			gObjInventoryDeleteItem(aIndex,RelicPos);

  00094	53		 push	 ebx
  00095	56		 push	 esi
  00096	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 789  : 			GCInventoryItemDeleteSend(aIndex,RelicPos,0);

  0009b	6a 00		 push	 0
  0009d	53		 push	 ebx
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  000a4	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@EnterUser:

; 790  : 		}
; 791  : 	}
; 792  : 
; 793  : 	int bResult = FALSE;
; 794  : 
; 795  : 	EnterCriticalSection(&this->m_CritSec);

  000a7	8d 5f 08	 lea	 ebx, DWORD PTR [edi+8]
  000aa	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bResult$1$[ebp], 0
  000b1	53		 push	 ebx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 796  : 
; 797  : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  000b8	33 c9		 xor	 ecx, ecx
  000ba	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  000bd	0f 1f 00	 npad	 3
$LL4@EnterUser:

; 798  : 	{
; 799  : 		if( m_PlayerData[i].m_Index == -1 )

  000c0	83 38 ff	 cmp	 DWORD PTR [eax], -1
  000c3	74 1c		 je	 SHORT $LN15@EnterUser

; 796  : 
; 797  : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  000c5	41		 inc	 ecx
  000c6	83 c0 30	 add	 eax, 48			; 00000030H
  000c9	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  000cc	7c f2		 jl	 SHORT $LL4@EnterUser

; 805  : 			m_PlayerData[i].m_TicketPos = Pos;
; 806  : 			break;
; 807  : 		}
; 808  : 	}
; 809  : 
; 810  : 	LeaveCriticalSection(&this->m_CritSec);

  000ce	53		 push	 ebx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 811  : 
; 812  : return bResult;

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _bResult$1$[ebp]
  000d8	5b		 pop	 ebx
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi

; 813  : }

  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 0c 00	 ret	 12			; 0000000cH
$LN15@EnterUser:

; 800  : 		{
; 801  : 			m_PlayerData[i].m_Index = aIndex;

  000e1	8d 14 49	 lea	 edx, DWORD PTR [ecx+ecx*2]

; 802  : 			UserCount++;
; 803  : 			gObj[aIndex].iTempleIndex = i;
; 804  : 			bResult = TRUE;

  000e4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _bResult$1$[ebp], 1
  000eb	03 d2		 add	 edx, edx

; 805  : 			m_PlayerData[i].m_TicketPos = Pos;
; 806  : 			break;
; 807  : 		}
; 808  : 	}
; 809  : 
; 810  : 	LeaveCriticalSection(&this->m_CritSec);

  000ed	53		 push	 ebx
  000ee	89 74 d7 20	 mov	 DWORD PTR [edi+edx*8+32], esi
  000f2	ff 87 28 02 00
	00		 inc	 DWORD PTR [edi+552]
  000f8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000fd	8b 75 08	 mov	 esi, DWORD PTR tv251[ebp]
  00100	89 8c 06 78 24
	00 00		 mov	 DWORD PTR [esi+eax+9336], ecx
  00107	8a 4d 10	 mov	 cl, BYTE PTR _Pos$[ebp]
  0010a	88 4c d7 48	 mov	 BYTE PTR [edi+edx*8+72], cl
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 811  : 
; 812  : return bResult;

  00114	8b 45 fc	 mov	 eax, DWORD PTR _bResult$1$[ebp]
  00117	5b		 pop	 ebx
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi

; 813  : }

  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 0c 00	 ret	 12			; 0000000cH
$LN19@EnterUser:

; 766  : 	{
; 767  : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00120	68 ff 02 00 00	 push	 767			; 000002ffH
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00135	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@EnterUser:

; 768  : 		return false;

  00138	5f		 pop	 edi
  00139	33 c0		 xor	 eax, eax
  0013b	5e		 pop	 esi

; 813  : }

  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 0c 00	 ret	 12			; 0000000cH
?EnterUser@CIllusionTempleProcess@@QAEHHEE@Z ENDP	; CIllusionTempleProcess::EnterUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?CheckUsers@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
tv301 = -4						; size = 4
?CheckUsers@CIllusionTempleProcess@@QAEXXZ PROC		; CIllusionTempleProcess::CheckUsers, COMDAT
; _this$ = ecx

; 892  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 893  : 	EnterCriticalSection(&this->m_CritSec);

  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0000c	50		 push	 eax
  0000d	89 45 fc	 mov	 DWORD PTR tv301[ebp], eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 894  : 
; 895  : 	UserCount = 0;

  00016	c7 86 28 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+552], 0
  00020	8d 5e 20	 lea	 ebx, DWORD PTR [esi+32]

; 896  : 
; 897  : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  00023	33 ff		 xor	 edi, edi
$LL4@CheckUsers:

; 898  : 	{
; 899  : 		if( m_PlayerData[i].m_Index != -1 )

  00025	8b 03		 mov	 eax, DWORD PTR [ebx]
  00027	83 f8 ff	 cmp	 eax, -1
  0002a	74 68		 je	 SHORT $LN2@CheckUsers

; 900  : 		{
; 901  : 			if( gObjIsConnected( m_PlayerData[i].m_Index ) == FALSE )

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00032	83 c4 04	 add	 esp, 4
  00035	85 c0		 test	 eax, eax
  00037	75 20		 jne	 SHORT $LN6@CheckUsers

; 902  : 			{
; 903  : 				gObj[ m_PlayerData[i].m_Index ].iTempleIndex = -1;

  00039	69 0b 40 27 00
	00		 imul	 ecx, DWORD PTR [ebx], 10048
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 904  : 				UserInit(i);

  00044	57		 push	 edi
  00045	c7 84 01 78 24
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+9336], -1
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?UserInit@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::UserInit
  00057	eb 3b		 jmp	 SHORT $LN2@CheckUsers
$LN6@CheckUsers:

; 905  : 			}
; 906  : 			else if( gObj[ m_PlayerData[i].m_Index ].MapNumber != Temple + MAP_INDEX_ILLUSIONTEMPLE1 )

  00059	69 13 40 27 00
	00		 imul	 edx, DWORD PTR [ebx], 10048
  0005f	0f b6 8e 2c 02
	00 00		 movzx	 ecx, BYTE PTR [esi+556]
  00066	83 c1 2d	 add	 ecx, 45			; 0000002dH
  00069	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006f	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00076	3b c1		 cmp	 eax, ecx
  00078	74 14		 je	 SHORT $LN8@CheckUsers

; 907  : 			{
; 908  : 				gObj[ m_PlayerData[i].m_Index ].iTempleIndex = -1;
; 909  : 				UserInit(i);

  0007a	57		 push	 edi
  0007b	8b ce		 mov	 ecx, esi
  0007d	c7 82 78 24 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+9336], -1
  00087	e8 00 00 00 00	 call	 ?UserInit@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::UserInit

; 910  : 			}
; 911  : 			else

  0008c	eb 06		 jmp	 SHORT $LN2@CheckUsers
$LN8@CheckUsers:

; 912  : 			{
; 913  : 				UserCount++;

  0008e	ff 86 28 02 00
	00		 inc	 DWORD PTR [esi+552]
$LN2@CheckUsers:

; 896  : 
; 897  : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  00094	47		 inc	 edi
  00095	83 c3 30	 add	 ebx, 48			; 00000030H
  00098	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0009b	7c 88		 jl	 SHORT $LL4@CheckUsers

; 914  : 			}
; 915  : 		}
; 916  : 	}
; 917  : 
; 918  : 	LeaveCriticalSection(&this->m_CritSec);

  0009d	ff 75 fc	 push	 DWORD PTR tv301[ebp]
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx

; 919  : }

  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
?CheckUsers@CIllusionTempleProcess@@QAEXXZ ENDP		; CIllusionTempleProcess::CheckUsers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetState@CIllusionTempleProcess@@QAEEXZ
_TEXT	SEGMENT
?GetState@CIllusionTempleProcess@@QAEEXZ PROC		; CIllusionTempleProcess::GetState, COMDAT
; _this$ = ecx

; 683  : 	return State;

  00000	8a 81 2d 02 00
	00		 mov	 al, BYTE PTR [ecx+557]

; 684  : }

  00006	c3		 ret	 0
?GetState@CIllusionTempleProcess@@QAEEXZ ENDP		; CIllusionTempleProcess::GetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?PickUpRelicSend@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?PickUpRelicSend@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleProcess::PickUpRelicSend, COMDAT
; _this$ = ecx

; 1295 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 1296 : 	PMSG_ILLUSIONTEMPLE_PICKRELICSEND pMsg;
; 1297 : 
; 1298 : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,8,sizeof(pMsg));

  00014	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00017	57		 push	 edi
  00018	6a 10		 push	 16			; 00000010H
  0001a	6a 08		 push	 8
  0001c	68 bf 00 00 00	 push	 191			; 000000bfH
  00021	50		 push	 eax
  00022	8b f9		 mov	 edi, ecx
  00024	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1299 : 	pMsg.Index = lpObj->m_Index;

  00029	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0002c	83 c4 10	 add	 esp, 16			; 00000010H

; 1300 : 	memcpy(pMsg.Name,lpObj->Name,10);

  0002f	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00034	83 c7 20	 add	 edi, 32			; 00000020H
  00037	66 89 45 f0	 mov	 WORD PTR _pMsg$[ebp+4], ax
  0003b	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  0003f	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  00044	66 0f d6 45 f2	 movq	 QWORD PTR _pMsg$[ebp+6], xmm0
  00049	66 89 45 fa	 mov	 WORD PTR _pMsg$[ebp+14], ax
  0004d	0f 1f 00	 npad	 3
$LL4@PickUpReli:

; 1303 : 	{
; 1304 : 		if( m_PlayerData[i].m_Index != -1 &&

  00050	8b 07		 mov	 eax, DWORD PTR [edi]
  00052	83 f8 ff	 cmp	 eax, -1
  00055	74 25		 je	 SHORT $LN2@PickUpReli
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005d	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  00063	83 7c 0a 04 02	 cmp	 DWORD PTR [edx+ecx+4], 2
  00068	7e 12		 jle	 SHORT $LN2@PickUpReli

; 1305 : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED )
; 1306 : 		{
; 1307 : 			DataSend(m_PlayerData[i].m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  0006a	0f b6 4d ed	 movzx	 ecx, BYTE PTR _pMsg$[ebp+1]
  0006e	51		 push	 ecx
  0006f	8d 4d ec	 lea	 ecx, DWORD PTR _pMsg$[ebp]
  00072	51		 push	 ecx
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@PickUpReli:

; 1301 : 
; 1302 : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  0007c	83 c7 30	 add	 edi, 48			; 00000030H
  0007f	83 ee 01	 sub	 esi, 1
  00082	75 cc		 jne	 SHORT $LL4@PickUpReli

; 1308 : 		}
; 1309 : 	}
; 1310 : }

  00084	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00087	5f		 pop	 edi
  00088	33 cd		 xor	 ecx, ebp
  0008a	5e		 pop	 esi
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
?PickUpRelicSend@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleProcess::PickUpRelicSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?PickUpRelic@CIllusionTempleProcess@@QAEXHE@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Pos$ = 12						; size = 1
?PickUpRelic@CIllusionTempleProcess@@QAEXHE@Z PROC	; CIllusionTempleProcess::PickUpRelic, COMDAT
; _this$ = ecx

; 1269 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1270 : 	if( OBJMAX_RANGE(aIndex) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 56		 js	 SHORT $LN7@PickUpReli
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 47		 je	 SHORT $LN7@PickUpReli

; 1273 : 		return;
; 1274 : 	}
; 1275 : 
; 1276 : 	m_RELIC_PLAYER = aIndex;
; 1277 : 	m_RELIC_POS = Pos;

  0001c	8a 45 0c	 mov	 al, BYTE PTR _Pos$[ebp]

; 1278 : 
; 1279 : 	if( gObj[aIndex].iTempleIndex != -1 &&
; 1280 : 		m_PlayerData[gObj[aIndex].iTempleIndex].m_Index != -1 &&

  0001f	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00025	89 96 b8 03 00
	00		 mov	 DWORD PTR [esi+952], edx
  0002b	88 86 bd 03 00
	00		 mov	 BYTE PTR [esi+957], al
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	8b 84 01 78 24
	00 00		 mov	 eax, DWORD PTR [ecx+eax+9336]
  0003d	83 f8 ff	 cmp	 eax, -1
  00040	74 39		 je	 SHORT $LN3@PickUpReli
  00042	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00045	03 c0		 add	 eax, eax
  00047	8b 4c c6 20	 mov	 ecx, DWORD PTR [esi+eax*8+32]
  0004b	83 f9 ff	 cmp	 ecx, -1
  0004e	74 2b		 je	 SHORT $LN3@PickUpReli
  00050	3b ca		 cmp	 ecx, edx
  00052	75 27		 jne	 SHORT $LN3@PickUpReli

; 1281 : 		m_PlayerData[gObj[aIndex].iTempleIndex].m_Index == aIndex)
; 1282 : 	{
; 1283 : 		m_RELIC_TEAM = m_PlayerData[gObj[aIndex].iTempleIndex].m_Team;

  00054	8a 44 c6 24	 mov	 al, BYTE PTR [esi+eax*8+36]
  00058	88 86 bc 03 00
	00		 mov	 BYTE PTR [esi+956], al
  0005e	5e		 pop	 esi

; 1284 : 	}
; 1285 : }

  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN7@PickUpReli:

; 1271 : 	{
; 1272 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00063	68 f8 04 00 00	 push	 1272			; 000004f8H
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@PickUpReli:
  0007b	5e		 pop	 esi

; 1284 : 	}
; 1285 : }

  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
?PickUpRelic@CIllusionTempleProcess@@QAEXHE@Z ENDP	; CIllusionTempleProcess::PickUpRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetRemainTime2@CIllusionTempleProcess@@QAEEXZ
_TEXT	SEGMENT
?GetRemainTime2@CIllusionTempleProcess@@QAEEXZ PROC	; CIllusionTempleProcess::GetRemainTime2, COMDAT
; _this$ = ecx

; 2552 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2553 : 	if( GetState() == IT_STATE_CLOSED)

  00003	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00008	84 c0		 test	 al, al
  0000a	75 08		 jne	 SHORT $LN2@GetRemainT

; 2554 : 	{
; 2555 : 		return m_iRemainMinute;

  0000c	8a 86 98 03 00
	00		 mov	 al, BYTE PTR [esi+920]
  00012	5e		 pop	 esi

; 2558 : }

  00013	c3		 ret	 0
$LN2@GetRemainT:

; 2556 : 	}
; 2557 : return FALSE;

  00014	32 c0		 xor	 al, al
  00016	5e		 pop	 esi

; 2558 : }

  00017	c3		 ret	 0
?GetRemainTime2@CIllusionTempleProcess@@QAEEXZ ENDP	; CIllusionTempleProcess::GetRemainTime2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?GetRemainTime@CIllusionTempleProcess@@QAEEXZ
_TEXT	SEGMENT
?GetRemainTime@CIllusionTempleProcess@@QAEEXZ PROC	; CIllusionTempleProcess::GetRemainTime, COMDAT
; _this$ = ecx

; 922  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 923  : 	if( GetState() == IT_STATE_CLOSED && OpenState() == TRUE )

  00003	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00008	84 c0		 test	 al, al
  0000a	75 14		 jne	 SHORT $LN2@GetRemainT
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?OpenState@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::OpenState
  00013	83 f8 01	 cmp	 eax, 1
  00016	75 08		 jne	 SHORT $LN2@GetRemainT

; 924  : 	{
; 925  : 		return m_iRemainMinute;

  00018	8a 86 98 03 00
	00		 mov	 al, BYTE PTR [esi+920]
  0001e	5e		 pop	 esi

; 928  : }

  0001f	c3		 ret	 0
$LN2@GetRemainT:

; 926  : 	}
; 927  : return FALSE;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 928  : }

  00023	c3		 ret	 0
?GetRemainTime@CIllusionTempleProcess@@QAEEXZ ENDP	; CIllusionTempleProcess::GetRemainTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?UserResetPoints@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?UserResetPoints@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::UserResetPoints, COMDAT
; _this$ = ecx

; 1771 : 	for(int i = 0; i < IT_MAXPLAYER; i++)
; 1772 : 	{
; 1773 : 		m_PlayerData[i].m_SkillPts = 10;

  00000	c6 41 25 0a	 mov	 BYTE PTR [ecx+37], 10	; 0000000aH
  00004	c6 41 55 0a	 mov	 BYTE PTR [ecx+85], 10	; 0000000aH
  00008	c6 81 85 00 00
	00 0a		 mov	 BYTE PTR [ecx+133], 10	; 0000000aH
  0000f	c6 81 b5 00 00
	00 0a		 mov	 BYTE PTR [ecx+181], 10	; 0000000aH
  00016	c6 81 e5 00 00
	00 0a		 mov	 BYTE PTR [ecx+229], 10	; 0000000aH
  0001d	c6 81 15 01 00
	00 0a		 mov	 BYTE PTR [ecx+277], 10	; 0000000aH
  00024	c6 81 45 01 00
	00 0a		 mov	 BYTE PTR [ecx+325], 10	; 0000000aH
  0002b	c6 81 75 01 00
	00 0a		 mov	 BYTE PTR [ecx+373], 10	; 0000000aH
  00032	c6 81 a5 01 00
	00 0a		 mov	 BYTE PTR [ecx+421], 10	; 0000000aH
  00039	c6 81 d5 01 00
	00 0a		 mov	 BYTE PTR [ecx+469], 10	; 0000000aH

; 1774 : 	}
; 1775 : }

  00040	c3		 ret	 0
?UserResetPoints@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::UserResetPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetState_PLAYEND@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SetState_PLAYEND@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SetState_PLAYEND, COMDAT
; _this$ = ecx

; 734  : 	dwTICK_COUNT = m_iIT_TIME_MIN_CLOSE * 60 * 1000;

  00000	69 05 00 00 00
	00 60 ea 00 00	 imul	 eax, DWORD PTR ?m_iIT_TIME_MIN_CLOSE@@3HA, 60000 ; m_iIT_TIME_MIN_CLOSE
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f9		 mov	 edi, ecx

; 735  : 
; 736  : 	SendState(IT_STATE_PLAYEND,-1);

  0000f	6a ff		 push	 -1
  00011	6a 03		 push	 3
  00013	89 87 9c 03 00
	00		 mov	 DWORD PTR [edi+924], eax
  00019	e8 00 00 00 00	 call	 ?SendState@CIllusionTempleProcess@@QAEXEH@Z ; CIllusionTempleProcess::SendState
  0001e	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  00021	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@SetState_P:

; 739  : 	{
; 740  : 		if( m_PlayerData[i].m_Index != -1 &&
; 741  : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	83 f8 ff	 cmp	 eax, -1
  00035	0f 84 a1 00 00
	00		 je	 $LN2@SetState_P
  0003b	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	83 7c 02 04 02	 cmp	 DWORD PTR [edx+eax+4], 2
  0004b	0f 8e 8b 00 00
	00		 jle	 $LN2@SetState_P
  00051	0f b6 8f 2c 02
	00 00		 movzx	 ecx, BYTE PTR [edi+556]
  00058	0f b6 84 02 23
	01 00 00	 movzx	 eax, BYTE PTR [edx+eax+291]
  00060	83 c1 2d	 add	 ecx, 45			; 0000002dH
  00063	3b c1		 cmp	 eax, ecx
  00065	75 75		 jne	 SHORT $LN2@SetState_P

; 742  : 			gObj[m_PlayerData[i].m_Index].MapNumber == Temple + MAP_INDEX_ILLUSIONTEMPLE1)
; 743  : 		{
; 744  : 			if( m_PlayerData[i].m_Skill1Time > 0 )

  00067	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0006b	76 32		 jbe	 SHORT $LN6@SetState_P

; 745  : 			{
; 746  : 				m_PlayerData[i].m_Skill1Time = 0;

  0006d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 747  : 				gObjRemoveBuffEffect(&gObj[m_PlayerData[i].m_Index],BUFF_IT_PROTECTION);

  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00079	03 c2		 add	 eax, edx
  0007b	6a 22		 push	 34			; 00000022H
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 748  : 				GCSendUseSkill(&gObj[m_PlayerData[i].m_Index],0xD2);

  00083	69 06 40 27 00
	00		 imul	 eax, DWORD PTR [esi], 10048
  00089	83 c4 08	 add	 esp, 8
  0008c	8b cf		 mov	 ecx, edi
  0008e	68 d2 00 00 00	 push	 210			; 000000d2H
  00093	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN6@SetState_P:

; 749  : 			}
; 750  : 
; 751  : 			if( m_PlayerData[i].m_Skill2Time > 0 )

  0009f	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  000a3	76 37		 jbe	 SHORT $LN2@SetState_P

; 752  : 			{
; 753  : 				m_PlayerData[i].m_Skill2Time = 0;
; 754  : 				gObjRemoveBuffEffect(&gObj[m_PlayerData[i].m_Index],BUFF_RESTRICTION);

  000a5	69 06 40 27 00
	00		 imul	 eax, DWORD PTR [esi], 10048
  000ab	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000b2	6a 41		 push	 65			; 00000041H
  000b4	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 755  : 				GCSendUseSkill(&gObj[m_PlayerData[i].m_Index],0xD3);

  000c0	69 06 40 27 00
	00		 imul	 eax, DWORD PTR [esi], 10048
  000c6	83 c4 08	 add	 esp, 8
  000c9	8b cf		 mov	 ecx, edi
  000cb	68 d3 00 00 00	 push	 211			; 000000d3H
  000d0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?GCSendUseSkill@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@H@Z ; CIllusionTempleProcess::GCSendUseSkill
$LN2@SetState_P:

; 737  : 
; 738  : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  000dc	83 c6 30	 add	 esi, 48			; 00000030H
  000df	83 eb 01	 sub	 ebx, 1
  000e2	0f 85 48 ff ff
	ff		 jne	 $LL4@SetState_P

; 756  : 			}
; 757  : 		}
; 758  : 	}
; 759  : 
; 760  : 	RemoveEventInfo();

  000e8	8b cf		 mov	 ecx, edi
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	e9 00 00 00 00	 jmp	 ?RemoveEventInfo@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::RemoveEventInfo
?SetState_PLAYEND@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SetState_PLAYEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetState_PLAY@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SetState_PLAY@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SetState_PLAY, COMDAT
; _this$ = ecx

; 722  : 	dwTICK_COUNT = m_iIT_TIME_MIN_PLAY * 60 * 1000;

  00000	69 05 00 00 00
	00 60 ea 00 00	 imul	 eax, DWORD PTR ?m_iIT_TIME_MIN_PLAY@@3HA, 60000 ; m_iIT_TIME_MIN_PLAY
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 86 9c 03 00
	00		 mov	 DWORD PTR [esi+924], eax

; 723  : 
; 724  : 	SpawnStatue();

  00013	e8 00 00 00 00	 call	 ?SpawnStatue@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SpawnStatue

; 725  : 	SpawnTeamNpc();

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?SpawnTeamNpc@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SpawnTeamNpc

; 726  : 	SpawnMonster();

  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?SpawnMonster@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SpawnMonster

; 727  : 	SetStatueTime();

  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 ?SetStatueTime@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetStatueTime

; 728  : 
; 729  : 	SendState(IT_STATE_PLAYING,-1);

  0002d	6a ff		 push	 -1
  0002f	6a 02		 push	 2
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?SendState@CIllusionTempleProcess@@QAEXEH@Z ; CIllusionTempleProcess::SendState
  00038	5e		 pop	 esi

; 730  : }

  00039	c3		 ret	 0
?SetState_PLAY@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SetState_PLAY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetState_PREPARE@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SetState_PREPARE@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SetState_PREPARE, COMDAT
; _this$ = ecx

; 705  : 	dwTICK_COUNT = m_iIT_TIME_MIN_PREPARE * 60 * 1000;

  00000	69 05 00 00 00
	00 60 ea 00 00	 imul	 eax, DWORD PTR ?m_iIT_TIME_MIN_PREPARE@@3HA, 60000 ; m_iIT_TIME_MIN_PREPARE
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b d9		 mov	 ebx, ecx

; 706  : 
; 707  : 	SendState(IT_STATE_PREPARE,-1);

  0000f	6a ff		 push	 -1
  00011	6a 01		 push	 1
  00013	89 83 9c 03 00
	00		 mov	 DWORD PTR [ebx+924], eax
  00019	e8 00 00 00 00	 call	 ?SendState@CIllusionTempleProcess@@QAEXEH@Z ; CIllusionTempleProcess::SendState
  0001e	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
  00021	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
$LL4@SetState_P:

; 710  : 	{
; 711  : 		if( m_PlayerData[i].m_Index != -1 &&
; 712  : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&

  00026	8b 06		 mov	 eax, DWORD PTR [esi]
  00028	83 f8 ff	 cmp	 eax, -1
  0002b	74 34		 je	 SHORT $LN2@SetState_P
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  00039	03 ca		 add	 ecx, edx
  0003b	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  0003f	7e 20		 jle	 SHORT $LN2@SetState_P
  00041	0f b6 93 2c 02
	00 00		 movzx	 edx, BYTE PTR [ebx+556]
  00048	0f b6 89 23 01
	00 00		 movzx	 ecx, BYTE PTR [ecx+291]
  0004f	83 c2 2d	 add	 edx, 45			; 0000002dH
  00052	3b ca		 cmp	 ecx, edx
  00054	75 0b		 jne	 SHORT $LN2@SetState_P

; 713  : 			gObj[m_PlayerData[i].m_Index].MapNumber == Temple + MAP_INDEX_ILLUSIONTEMPLE1)
; 714  : 		{
; 715  : 			GCIllusionSendPoint(m_PlayerData[i].m_Index,10);

  00056	6a 0a		 push	 10			; 0000000aH
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GCIllusionSendPoint@@YAXHE@Z ; GCIllusionSendPoint
  0005e	83 c4 08	 add	 esp, 8
$LN2@SetState_P:

; 708  : 
; 709  : 	for(int i = 0; i < IT_MAXPLAYER; i++)

  00061	83 c6 30	 add	 esi, 48			; 00000030H
  00064	83 ef 01	 sub	 edi, 1
  00067	75 bd		 jne	 SHORT $LL4@SetState_P

; 716  : 		}
; 717  : 	}
; 718  : }

  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	c3		 ret	 0
?SetState_PREPARE@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SetState_PREPARE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetState_CLOSED@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SetState_CLOSED@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SetState_CLOSED, COMDAT
; _this$ = ecx

; 687  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 688  : 	SendState(IT_STATE_CLOSED,-1);

  00003	6a ff		 push	 -1
  00005	6a 00		 push	 0
  00007	8b d9		 mov	 ebx, ecx
  00009	e8 00 00 00 00	 call	 ?SendState@CIllusionTempleProcess@@QAEXEH@Z ; CIllusionTempleProcess::SendState
  0000e	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
  00011	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
$LL4@SetState_C:

; 691  : 	{
; 692  : 		if( m_PlayerData[i].m_Index != -1 &&
; 693  : 			gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&

  00016	8b 16		 mov	 edx, DWORD PTR [esi]
  00018	83 fa ff	 cmp	 edx, -1
  0001b	74 36		 je	 SHORT $LN2@SetState_C
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00022	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00028	03 c1		 add	 eax, ecx
  0002a	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  0002e	7e 23		 jle	 SHORT $LN2@SetState_C
  00030	0f b6 8b 2c 02
	00 00		 movzx	 ecx, BYTE PTR [ebx+556]
  00037	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  0003e	83 c1 2d	 add	 ecx, 45			; 0000002dH
  00041	3b c1		 cmp	 eax, ecx
  00043	75 0e		 jne	 SHORT $LN2@SetState_C

; 694  : 			gObj[m_PlayerData[i].m_Index].MapNumber == Temple + MAP_INDEX_ILLUSIONTEMPLE1)
; 695  : 		{
; 696  : 			gObjMoveGate(m_PlayerData[i].m_Index,267);

  00045	68 0b 01 00 00	 push	 267			; 0000010bH
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00050	83 c4 08	 add	 esp, 8
$LN2@SetState_C:

; 689  : 
; 690  : 	for(int i = 0; i < IT_MAXPLAYER;i++)

  00053	83 c6 30	 add	 esi, 48			; 00000030H
  00056	83 ef 01	 sub	 edi, 1
  00059	75 bb		 jne	 SHORT $LL4@SetState_C

; 697  : 		}
; 698  : 	}
; 699  : 
; 700  : 	Reset(Temple);

  0005b	0f b6 83 2c 02
	00 00		 movzx	 eax, BYTE PTR [ebx+556]
  00062	8b cb		 mov	 ecx, ebx
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ?Reset@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::Reset
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx

; 701  : }

  0006d	c3		 ret	 0
?SetState_CLOSED@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SetState_CLOSED
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?SetState@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iState$ = 8						; size = 4
?SetState@CIllusionTempleProcess@@QAEXH@Z PROC		; CIllusionTempleProcess::SetState, COMDAT
; _this$ = ecx

; 661  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 662  : 	State = iState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iState$[ebp]
  00006	88 81 2d 02 00
	00		 mov	 BYTE PTR [ecx+557], al

; 663  : 
; 664  : 	switch(iState)

  0000c	83 f8 03	 cmp	 eax, 3
  0000f	77 27		 ja	 SHORT $LN2@SetState
  00011	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@SetState[eax*4]
$LN4@SetState:

; 665  : 	{
; 666  : 	case IT_STATE_CLOSED:
; 667  : 		SetState_CLOSED();

  00018	e8 00 00 00 00	 call	 ?SetState_CLOSED@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetState_CLOSED

; 677  : 		break;
; 678  : 	}
; 679  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN5@SetState:

; 668  : 		break;
; 669  : 	case IT_STATE_PREPARE:
; 670  : 		SetState_PREPARE();

  00021	e8 00 00 00 00	 call	 ?SetState_PREPARE@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetState_PREPARE

; 677  : 		break;
; 678  : 	}
; 679  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN6@SetState:

; 671  : 		break;
; 672  : 	case IT_STATE_PLAYING:
; 673  : 		SetState_PLAY();

  0002a	e8 00 00 00 00	 call	 ?SetState_PLAY@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetState_PLAY

; 677  : 		break;
; 678  : 	}
; 679  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN7@SetState:

; 674  : 		break;
; 675  : 	case IT_STATE_PLAYEND:
; 676  : 		SetState_PLAYEND();

  00033	e8 00 00 00 00	 call	 ?SetState_PLAYEND@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetState_PLAYEND
$LN2@SetState:

; 677  : 		break;
; 678  : 	}
; 679  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN10@SetState:
  0003c	00 00 00 00	 DD	 $LN4@SetState
  00040	00 00 00 00	 DD	 $LN5@SetState
  00044	00 00 00 00	 DD	 $LN6@SetState
  00048	00 00 00 00	 DD	 $LN7@SetState
?SetState@CIllusionTempleProcess@@QAEXH@Z ENDP		; CIllusionTempleProcess::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ProcState_PLAYEND@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
tv611 = 8						; size = 4
_TICK_COUNT$ = 8					; size = 4
?ProcState_PLAYEND@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::ProcState_PLAYEND, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 595  : 	int iTICK_COUNT = TICK_COUNT - dwTICK_COUNT2;

  00003	8b 55 08	 mov	 edx, DWORD PTR _TICK_COUNT$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	2b 86 a0 03 00
	00		 sub	 eax, DWORD PTR [esi+928]

; 596  : 
; 597  : 	if( iTICK_COUNT >= 1000 )

  00011	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00016	0f 8c 4a 01 00
	00		 jl	 $LN20@ProcState_

; 598  : 	{
; 599  : 		dwTICK_COUNT -= iTICK_COUNT;

  0001c	29 86 9c 03 00
	00		 sub	 DWORD PTR [esi+924], eax
  00022	8b 8e 9c 03 00
	00		 mov	 ecx, DWORD PTR [esi+924]

; 600  : 		dwTICK_COUNT2 = TICK_COUNT;

  00028	89 96 a0 03 00
	00		 mov	 DWORD PTR [esi+928], edx

; 601  : 
; 602  : 		if( dwTICK_COUNT <= (m_iIT_TIME_MIN_CLOSE * 60 * 1000 - 3000) &&
; 603  : 			dwTICK_COUNT > 0 &&

  0002e	69 05 00 00 00
	00 60 ea 00 00	 imul	 eax, DWORD PTR ?m_iIT_TIME_MIN_CLOSE@@3HA, 60000 ; m_iIT_TIME_MIN_CLOSE
  00038	2d b8 0b 00 00	 sub	 eax, 3000		; 00000bb8H
  0003d	3b c8		 cmp	 ecx, eax
  0003f	0f 8f 21 01 00
	00		 jg	 $LN20@ProcState_
  00045	85 c9		 test	 ecx, ecx
  00047	0f 8e 19 01 00
	00		 jle	 $LN20@ProcState_
  0004d	83 be ac 03 00
	00 00		 cmp	 DWORD PTR [esi+940], 0
  00054	0f 85 0c 01 00
	00		 jne	 $LN20@ProcState_

; 604  : 			m_IT_END_MOVE == FALSE)
; 605  : 		{
; 606  : 			m_IT_END_MOVE = TRUE;

  0005a	53		 push	 ebx
  0005b	57		 push	 edi
  0005c	c7 86 ac 03 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+940], 1
  00066	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]
  00069	c7 45 08 0a 00
	00 00		 mov	 DWORD PTR tv611[ebp], 10 ; 0000000aH
$LL4@ProcState_:

; 609  : 			{
; 610  : 				if( m_PlayerData[i].m_Index != -1 &&
; 611  : 					gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&

  00070	8b 17		 mov	 edx, DWORD PTR [edi]
  00072	83 fa ff	 cmp	 edx, -1
  00075	74 72		 je	 SHORT $LN2@ProcState_
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007c	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00082	83 7c 01 04 02	 cmp	 DWORD PTR [ecx+eax+4], 2
  00087	7e 60		 jle	 SHORT $LN2@ProcState_
  00089	0f b6 9e 2c 02
	00 00		 movzx	 ebx, BYTE PTR [esi+556]
  00090	0f b6 8c 01 23
	01 00 00	 movzx	 ecx, BYTE PTR [ecx+eax+291]
  00098	8d 43 2d	 lea	 eax, DWORD PTR [ebx+45]
  0009b	3b c8		 cmp	 ecx, eax
  0009d	75 4a		 jne	 SHORT $LN2@ProcState_

; 612  : 					gObj[m_PlayerData[i].m_Index].MapNumber == Temple + MAP_INDEX_ILLUSIONTEMPLE1)
; 613  : 				{
; 614  : 					if( m_PlayerData[i].m_Team == IT_ALLIED_TEAM )

  0009f	8a 47 04	 mov	 al, BYTE PTR [edi+4]
  000a2	84 c0		 test	 al, al
  000a4	75 08		 jne	 SHORT $LN8@ProcState_

; 615  : 					{
; 616  : 						gObjMoveGate(m_PlayerData[i].m_Index,148+Temple);

  000a6	8d 83 94 00 00
	00		 lea	 eax, DWORD PTR [ebx+148]
  000ac	eb 0a		 jmp	 SHORT $LN21@ProcState_
$LN8@ProcState_:

; 617  : 					}
; 618  : 					else if( m_PlayerData[i].m_Team == IT_ILLUSION_TEAM )

  000ae	3c 01		 cmp	 al, 1
  000b0	75 10		 jne	 SHORT $LN10@ProcState_

; 619  : 					{
; 620  : 						gObjMoveGate(m_PlayerData[i].m_Index,154+Temple);

  000b2	8d 83 9a 00 00
	00		 lea	 eax, DWORD PTR [ebx+154]
$LN21@ProcState_:
  000b8	50		 push	 eax
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000bf	83 c4 08	 add	 esp, 8
$LN10@ProcState_:

; 621  : 					}
; 622  : 
; 623  : 					gObjSetPosition(m_PlayerData[i].m_Index,gObj[m_PlayerData[i].m_Index].X,gObj[m_PlayerData[i].m_Index].Y);

  000c2	8b 17		 mov	 edx, DWORD PTR [edi]
  000c4	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  000ca	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d0	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000d7	50		 push	 eax
  000d8	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  000df	50		 push	 eax
  000e0	52		 push	 edx
  000e1	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcState_:

; 607  : 
; 608  : 			for(int i = 0; i < IT_MAXPLAYER;i++)

  000e9	83 c7 30	 add	 edi, 48			; 00000030H
  000ec	83 6d 08 01	 sub	 DWORD PTR tv611[ebp], 1
  000f0	0f 85 7a ff ff
	ff		 jne	 $LL4@ProcState_

; 624  : 				}
; 625  : 			}
; 626  : 
; 627  : 			if( m_RELIC_PLAYER >= 0 &&

  000f6	8b be b8 03 00
	00		 mov	 edi, DWORD PTR [esi+952]
  000fc	85 ff		 test	 edi, edi
  000fe	78 5d		 js	 SHORT $LN12@ProcState_

; 628  : 				m_RELIC_POS >= 0 )
; 629  : 			{
; 630  : 				if( gObj[m_RELIC_PLAYER].pInventory[m_RELIC_POS].m_Type == ITEMGET(14,64) )

  00100	0f b6 9e bd 03
	00 00		 movzx	 ebx, BYTE PTR [esi+957]
  00107	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010c	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00112	69 d3 d4 00 00
	00		 imul	 edx, ebx, 212
  00118	8b 84 01 c0 11
	00 00		 mov	 eax, DWORD PTR [ecx+eax+4544]
  0011f	b9 40 1c 00 00	 mov	 ecx, 7232		; 00001c40H
  00124	66 39 4c 10 06	 cmp	 WORD PTR [eax+edx+6], cx
  00129	75 32		 jne	 SHORT $LN12@ProcState_

; 631  : 				{
; 632  : 					gObjInventoryDeleteItem(m_RELIC_PLAYER, m_RELIC_POS);

  0012b	53		 push	 ebx
  0012c	57		 push	 edi
  0012d	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 633  : 					GCInventoryItemDeleteSend(m_RELIC_PLAYER,m_RELIC_POS,0);

  00132	0f b6 86 bd 03
	00 00		 movzx	 eax, BYTE PTR [esi+957]
  00139	6a 00		 push	 0
  0013b	50		 push	 eax
  0013c	ff b6 b8 03 00
	00		 push	 DWORD PTR [esi+952]
  00142	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  00147	83 c4 14	 add	 esp, 20			; 00000014H

; 634  : 	
; 635  : 					m_RELIC_PLAYER = -1;

  0014a	c7 86 b8 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+952], -1

; 636  : 					m_RELIC_POS = -1;
; 637  : 					m_RELIC_TEAM = -1;

  00154	66 c7 86 bc 03
	00 00 ff ff	 mov	 WORD PTR [esi+956], 65535 ; 0000ffffH
$LN12@ProcState_:

; 638  : 				}
; 639  : 			}
; 640  : 
; 641  : 			CalcWinRewardExp();

  0015d	8b ce		 mov	 ecx, esi
  0015f	e8 00 00 00 00	 call	 ?CalcWinRewardExp@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CalcWinRewardExp
  00164	5f		 pop	 edi
  00165	5b		 pop	 ebx
$LN20@ProcState_:

; 642  : 		}
; 643  : 	}
; 644  : 
; 645  : 	if( dwTICK_COUNT <= m_iIT_TIME_MIN_CLOSE * 60 * 1000 - 6000 &&
; 646  : 		dwTICK_COUNT > 0 &&
; 647  : 		m_IT_END_MOVE == TRUE &&

  00166	69 05 00 00 00
	00 60 ea 00 00	 imul	 eax, DWORD PTR ?m_iIT_TIME_MIN_CLOSE@@3HA, 60000 ; m_iIT_TIME_MIN_CLOSE
  00170	8b 8e 9c 03 00
	00		 mov	 ecx, DWORD PTR [esi+924]
  00176	2d 70 17 00 00	 sub	 eax, 6000		; 00001770H
  0017b	3b c8		 cmp	 ecx, eax
  0017d	7f 27		 jg	 SHORT $LN13@ProcState_
  0017f	85 c9		 test	 ecx, ecx
  00181	7e 23		 jle	 SHORT $LN13@ProcState_
  00183	83 be ac 03 00
	00 01		 cmp	 DWORD PTR [esi+940], 1
  0018a	75 1a		 jne	 SHORT $LN13@ProcState_
  0018c	83 be e8 03 00
	00 00		 cmp	 DWORD PTR [esi+1000], 0
  00193	75 11		 jne	 SHORT $LN13@ProcState_

; 648  : 		m_IT_REWARD_SENT == FALSE )
; 649  : 	{
; 650  : 		SendRewardExp();

  00195	8b ce		 mov	 ecx, esi
  00197	e8 00 00 00 00	 call	 ?SendRewardExp@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SendRewardExp

; 651  : 		m_IT_REWARD_SENT = TRUE;

  0019c	c7 86 e8 03 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+1000], 1
$LN13@ProcState_:

; 652  : 	}
; 653  : 
; 654  : 	if( dwTICK_COUNT <= 0 )

  001a6	83 be 9c 03 00
	00 00		 cmp	 DWORD PTR [esi+924], 0
  001ad	7f 09		 jg	 SHORT $LN14@ProcState_

; 655  : 	{
; 656  : 		SetState(IT_STATE_CLOSED);

  001af	6a 00		 push	 0
  001b1	8b ce		 mov	 ecx, esi
  001b3	e8 00 00 00 00	 call	 ?SetState@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::SetState
$LN14@ProcState_:
  001b8	5e		 pop	 esi

; 657  : 	}
; 658  : }

  001b9	5d		 pop	 ebp
  001ba	c2 04 00	 ret	 4
?ProcState_PLAYEND@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::ProcState_PLAYEND
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ProcState_PLAY@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_TICK_COUNT$ = 8					; size = 4
?ProcState_PLAY@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::ProcState_PLAY, COMDAT
; _this$ = ecx

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 541  : 	int iTICK_COUNT = TICK_COUNT - dwTICK_COUNT2;

  00007	8b 7d 08	 mov	 edi, DWORD PTR _TICK_COUNT$[ebp]
  0000a	8b c7		 mov	 eax, edi
  0000c	2b 86 a0 03 00
	00		 sub	 eax, DWORD PTR [esi+928]

; 542  : 
; 543  : 	if( iTICK_COUNT >= 1000 )

  00012	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00017	7c 3b		 jl	 SHORT $LN5@ProcState_

; 544  : 	{
; 545  : 		dwTICK_COUNT -= iTICK_COUNT;

  00019	29 86 9c 03 00
	00		 sub	 DWORD PTR [esi+924], eax

; 546  : 		dwTICK_COUNT2 = TICK_COUNT;
; 547  : 
; 548  : 		if( dwTICK_COUNT > 0 )

  0001f	83 be 9c 03 00
	00 00		 cmp	 DWORD PTR [esi+924], 0
  00026	89 be a0 03 00
	00		 mov	 DWORD PTR [esi+928], edi
  0002c	7e 10		 jle	 SHORT $LN3@ProcState_

; 549  : 		{
; 550  : 			OperateMiniMap(IT_ALLIED_TEAM);

  0002e	6a 00		 push	 0
  00030	e8 00 00 00 00	 call	 ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ; CIllusionTempleProcess::OperateMiniMap

; 551  : 			OperateMiniMap(IT_ILLUSION_TEAM);

  00035	6a 01		 push	 1
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ; CIllusionTempleProcess::OperateMiniMap
$LN3@ProcState_:

; 552  : 		}
; 553  : 
; 554  : 		if( iNPC_TICK_COUNT != -1 )

  0003e	8b 86 94 03 00
	00		 mov	 eax, DWORD PTR [esi+916]
  00044	83 f8 ff	 cmp	 eax, -1
  00047	74 0b		 je	 SHORT $LN5@ProcState_

; 555  : 		{
; 556  : 			if( iNPC_TICK_COUNT < TICK_COUNT )

  00049	3b c7		 cmp	 eax, edi
  0004b	7d 07		 jge	 SHORT $LN5@ProcState_

; 557  : 			{
; 558  : 				RegetStatue();

  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ?RegetStatue@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::RegetStatue
$LN5@ProcState_:

; 559  : 			}
; 560  : 		}
; 561  : 	}
; 562  : 
; 563  : 	if( UserCount == 0 )

  00054	83 be 28 02 00
	00 00		 cmp	 DWORD PTR [esi+552], 0
  0005b	74 79		 je	 SHORT $LN14@ProcState_

; 564  : 	{
; 565  : 		SetState(IT_STATE_PLAYEND);
; 566  : 		return;
; 567  : 	}
; 568  : 
; 569  : 	if( dwTICK_COUNT <= 0 ||
; 570  : 		m_ALLIED_TEAM_PTS >= 7 || 
; 571  : 		m_ILLUSION_TEAM_PTS >= 7 ||
; 572  : 		m_ALLIED_TEAM_COUNT == 0 ||

  0005d	8b 8e 9c 03 00
	00		 mov	 ecx, DWORD PTR [esi+924]
  00063	85 c9		 test	 ecx, ecx
  00065	7e 24		 jle	 SHORT $LN8@ProcState_
  00067	80 be d0 03 00
	00 07		 cmp	 BYTE PTR [esi+976], 7
  0006e	73 2d		 jae	 SHORT $LN10@ProcState_
  00070	80 be d1 03 00
	00 07		 cmp	 BYTE PTR [esi+977], 7
  00077	73 12		 jae	 SHORT $LN8@ProcState_
  00079	83 be c8 03 00
	00 00		 cmp	 DWORD PTR [esi+968], 0
  00080	74 09		 je	 SHORT $LN8@ProcState_
  00082	83 be cc 03 00
	00 00		 cmp	 DWORD PTR [esi+972], 0
  00089	75 54		 jne	 SHORT $LN7@ProcState_
$LN8@ProcState_:

; 573  : 		m_ILLUSION_TEAM_COUNT == 0 )
; 574  : 	{
; 575  : 		if( m_ALLIED_TEAM_PTS >= 7 || m_ILLUSION_TEAM_PTS >= 7 )

  0008b	80 be d0 03 00
	00 07		 cmp	 BYTE PTR [esi+976], 7
  00092	73 09		 jae	 SHORT $LN10@ProcState_
  00094	80 be d1 03 00
	00 07		 cmp	 BYTE PTR [esi+977], 7
  0009b	72 27		 jb	 SHORT $LN12@ProcState_
$LN10@ProcState_:

; 576  : 		{
; 577  : 			if( dwTICK_COUNT <= 0 )

  0009d	85 c9		 test	 ecx, ecx
  0009f	7f 0c		 jg	 SHORT $LN11@ProcState_

; 578  : 			{
; 579  : 				iUNK_SECONDS = 0;

  000a1	c7 86 a8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+936], 0

; 580  : 			}
; 581  : 			else

  000ab	eb 17		 jmp	 SHORT $LN12@ProcState_
$LN11@ProcState_:

; 582  : 			{
; 583  : 				iUNK_SECONDS = dwTICK_COUNT / 1000;

  000ad	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000b2	f7 e9		 imul	 ecx
  000b4	c1 fa 06	 sar	 edx, 6
  000b7	8b c2		 mov	 eax, edx
  000b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000bc	03 c2		 add	 eax, edx
  000be	89 86 a8 03 00
	00		 mov	 DWORD PTR [esi+936], eax
$LN12@ProcState_:

; 584  : 			}
; 585  : 		}
; 586  : 
; 587  : 		OperateMiniMap(IT_ALLIED_TEAM);

  000c4	6a 00		 push	 0
  000c6	8b ce		 mov	 ecx, esi
  000c8	e8 00 00 00 00	 call	 ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ; CIllusionTempleProcess::OperateMiniMap

; 588  : 		OperateMiniMap(IT_ILLUSION_TEAM);

  000cd	6a 01		 push	 1
  000cf	8b ce		 mov	 ecx, esi
  000d1	e8 00 00 00 00	 call	 ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ; CIllusionTempleProcess::OperateMiniMap
$LN14@ProcState_:

; 589  : 		SetState(IT_STATE_PLAYEND);

  000d6	6a 03		 push	 3
  000d8	8b ce		 mov	 ecx, esi
  000da	e8 00 00 00 00	 call	 ?SetState@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::SetState
$LN7@ProcState_:
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi

; 590  : 	}
; 591  : }

  000e1	5d		 pop	 ebp
  000e2	c2 04 00	 ret	 4
?ProcState_PLAY@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::ProcState_PLAY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ProcState_PREPARE@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_pMsg$1 = 8						; size = 4
_TICK_COUNT$ = 8					; size = 4
?ProcState_PREPARE@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::ProcState_PREPARE, COMDAT
; _this$ = ecx

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 500  : 	int iTICK_COUNT = TICK_COUNT - dwTICK_COUNT2;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _TICK_COUNT$[ebp]
  00009	8b c1		 mov	 eax, ecx
  0000b	2b 86 a0 03 00
	00		 sub	 eax, DWORD PTR [esi+928]

; 501  : 
; 502  : 	if( iTICK_COUNT >= 1000 )

  00011	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00016	0f 8c a4 00 00
	00		 jl	 $LN3@ProcState_

; 503  : 	{
; 504  : 		dwTICK_COUNT -= iTICK_COUNT;

  0001c	29 86 9c 03 00
	00		 sub	 DWORD PTR [esi+924], eax
  00022	8b 86 9c 03 00
	00		 mov	 eax, DWORD PTR [esi+924]

; 505  : 		dwTICK_COUNT2 = TICK_COUNT;

  00028	89 8e a0 03 00
	00		 mov	 DWORD PTR [esi+928], ecx

; 506  : 
; 507  : 		if( dwTICK_COUNT <= 30000 && dwTICK_COUNT > 0 && m_IT_MSG_BEFORE_START == FALSE )

  0002e	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  00033	0f 8f 87 00 00
	00		 jg	 $LN3@ProcState_
  00039	85 c0		 test	 eax, eax
  0003b	0f 8e 7f 00 00
	00		 jle	 $LN3@ProcState_
  00041	83 be b4 03 00
	00 00		 cmp	 DWORD PTR [esi+948], 0
  00048	75 76		 jne	 SHORT $LN3@ProcState_

; 508  : 		{
; 509  : 			m_IT_MSG_BEFORE_START = TRUE;
; 510  : 
; 511  : 			PMSG_SET_DEVILSQUARE pMsg;
; 512  : 			PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  0004a	53		 push	 ebx
  0004b	57		 push	 edi
  0004c	6a 04		 push	 4
  0004e	8d 45 08	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00051	c7 86 b4 03 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+948], 1
  0005b	68 92 00 00 00	 push	 146			; 00000092H
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 513  : 			pMsg.Type = 15;

  00069	c6 45 0b 0f	 mov	 BYTE PTR _pMsg$1[ebp+3], 15 ; 0000000fH
  0006d	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]
  00070	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
$LL4@ProcState_:

; 516  : 			{
; 517  : 				if( m_PlayerData[i].m_Index != -1 &&
; 518  : 					gObj[m_PlayerData[i].m_Index].Connected > PLAYER_LOGGED &&

  00075	8b 17		 mov	 edx, DWORD PTR [edi]
  00077	83 fa ff	 cmp	 edx, -1
  0007a	74 3a		 je	 SHORT $LN2@ProcState_
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00087	03 c1		 add	 eax, ecx
  00089	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  0008d	7e 27		 jle	 SHORT $LN2@ProcState_
  0008f	0f b6 8e 2c 02
	00 00		 movzx	 ecx, BYTE PTR [esi+556]
  00096	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  0009d	83 c1 2d	 add	 ecx, 45			; 0000002dH
  000a0	3b c1		 cmp	 eax, ecx
  000a2	75 12		 jne	 SHORT $LN2@ProcState_

; 519  : 					gObj[m_PlayerData[i].m_Index].MapNumber == Temple+ MAP_INDEX_ILLUSIONTEMPLE1)
; 520  : 				{
; 521  : 					DataSend(m_PlayerData[i].m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  000a4	0f b6 45 09	 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  000a8	50		 push	 eax
  000a9	8d 45 08	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000ac	50		 push	 eax
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcState_:

; 514  : 
; 515  : 			for(int i = 0; i < IT_MAXPLAYER; i++)

  000b6	83 c7 30	 add	 edi, 48			; 00000030H
  000b9	83 eb 01	 sub	 ebx, 1
  000bc	75 b7		 jne	 SHORT $LL4@ProcState_
  000be	5f		 pop	 edi
  000bf	5b		 pop	 ebx
$LN3@ProcState_:

; 522  : 				}
; 523  : 			}
; 524  : 		}
; 525  : 	}
; 526  : 
; 527  : 	if( UserCount == 0 )

  000c0	83 be 28 02 00
	00 00		 cmp	 DWORD PTR [esi+552], 0
  000c7	75 0e		 jne	 SHORT $LN8@ProcState_

; 528  : 	{
; 529  : 		SetState(IT_STATE_PLAYEND);

  000c9	6a 03		 push	 3
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?SetState@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::SetState
  000d2	5e		 pop	 esi

; 536  : 	}
; 537  : }

  000d3	5d		 pop	 ebp
  000d4	c2 04 00	 ret	 4
$LN8@ProcState_:

; 530  : 	}
; 531  : 	else if( dwTICK_COUNT <= 0 )

  000d7	83 be 9c 03 00
	00 00		 cmp	 DWORD PTR [esi+924], 0
  000de	7f 1b		 jg	 SHORT $LN10@ProcState_

; 532  : 	{
; 533  : 		SetState(IT_STATE_PLAYING);

  000e0	6a 02		 push	 2
  000e2	8b ce		 mov	 ecx, esi
  000e4	e8 00 00 00 00	 call	 ?SetState@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::SetState

; 534  : 		OperateMiniMap(IT_ALLIED_TEAM);

  000e9	6a 00		 push	 0
  000eb	8b ce		 mov	 ecx, esi
  000ed	e8 00 00 00 00	 call	 ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ; CIllusionTempleProcess::OperateMiniMap

; 535  : 		OperateMiniMap(IT_ILLUSION_TEAM);

  000f2	6a 01		 push	 1
  000f4	8b ce		 mov	 ecx, esi
  000f6	e8 00 00 00 00	 call	 ?OperateMiniMap@CIllusionTempleProcess@@QAEXE@Z ; CIllusionTempleProcess::OperateMiniMap
$LN10@ProcState_:
  000fb	5e		 pop	 esi

; 536  : 	}
; 537  : }

  000fc	5d		 pop	 ebp
  000fd	c2 04 00	 ret	 4
?ProcState_PREPARE@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::ProcState_PREPARE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?ProcState_CLOSE@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
tv2684 = -548						; size = 4
_i$1$ = -544						; size = 4
_Pos$1$ = -544						; size = 4
tv2830 = -540						; size = 4
tv2829 = -540						; size = 4
_AlliedParty$1$ = -540					; size = 4
tv2847 = -536						; size = 4
_IllusionParty$1$ = -536				; size = 4
_pMsg$1 = -536						; size = 4
_pNotice$2 = -532					; size = 272
_pNotice$3 = -532					; size = 272
_szIllusionTeam$4 = -516				; size = 256
_szAlliedTeam$5 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_TICK_COUNT$ = 8					; size = 4
?ProcState_CLOSE@CIllusionTempleProcess@@QAEXH@Z PROC	; CIllusionTempleProcess::ProcState_CLOSE, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx

; 199  : 	int iTICK_DIFF = TICK_COUNT - dwTICK_COUNT2;

  00014	8b 5d 08	 mov	 ebx, DWORD PTR _TICK_COUNT$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	57		 push	 edi
  0001b	8b fb		 mov	 edi, ebx
  0001d	2b be a0 03 00
	00		 sub	 edi, DWORD PTR [esi+928]

; 200  : 
; 201  : 	if( dwTICK_COUNT3 < TICK_COUNT )

  00023	39 9e a4 03 00
	00		 cmp	 DWORD PTR [esi+932], ebx
  00029	7d 65		 jge	 SHORT $LN12@ProcState_

; 202  : 	{
; 203  : 		m_iRemainMinute--;

  0002b	ff 8e 98 03 00
	00		 dec	 DWORD PTR [esi+920]

; 204  : 		dwTICK_COUNT3 = TICK_COUNT + 60000;

  00031	8d 83 60 ea 00
	00		 lea	 eax, DWORD PTR [ebx+60000]
  00037	8b 8e 98 03 00
	00		 mov	 ecx, DWORD PTR [esi+920]
  0003d	89 86 a4 03 00
	00		 mov	 DWORD PTR [esi+932], eax

; 205  : 
; 206  : 		if( m_iRemainMinute <= m_iIT_TIME_MIN_OPEN &&
; 207  : 			m_iRemainMinute > 0 &&

  00043	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?m_iIT_TIME_MIN_OPEN@@3HA ; m_iIT_TIME_MIN_OPEN
  00049	7f 45		 jg	 SHORT $LN12@ProcState_
  0004b	85 c9		 test	 ecx, ecx
  0004d	7e 41		 jle	 SHORT $LN12@ProcState_
  0004f	80 be 2c 02 00
	00 00		 cmp	 BYTE PTR [esi+556], 0
  00056	75 38		 jne	 SHORT $LN12@ProcState_

; 208  : 			Temple == 0)
; 209  : 		{
; 210  : 			PMSG_NOTICE pNotice;
; 211  : 			TNotice::MakeNoticeMsgEx(&pNotice, 0,lMsg.Get(MSGGET(13,66)),m_iRemainMinute);

  00058	51		 push	 ecx
  00059	68 42 0d 00 00	 push	 3394			; 00000d42H
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00063	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00068	50		 push	 eax
  00069	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp]
  0006f	6a 00		 push	 0
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 212  : 			SendAllUserAnyMsg((BYTE *)&pNotice, pNotice.h.size);

  00077	0f b6 85 ed fd
	ff ff		 movzx	 eax, BYTE PTR _pNotice$3[ebp+1]
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	8b ce		 mov	 ecx, esi
  00083	50		 push	 eax
  00084	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp]
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CIllusionTempleProcess@@QAEXPAEH@Z ; CIllusionTempleProcess::SendAllUserAnyMsg
$LN12@ProcState_:

; 213  : 		}
; 214  : 	}
; 215  : 
; 216  : 	if( iTICK_DIFF >= 1000 )

  00090	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00096	0f 8c 9e 01 00
	00		 jl	 $LN20@ProcState_

; 217  : 	{
; 218  : 		if( dwTICK_COUNT > 0 )

  0009c	8b 86 9c 03 00
	00		 mov	 eax, DWORD PTR [esi+924]
  000a2	85 c0		 test	 eax, eax
  000a4	7e 08		 jle	 SHORT $LN14@ProcState_

; 219  : 		{
; 220  : 			dwTICK_COUNT -= iTICK_DIFF;

  000a6	2b c7		 sub	 eax, edi
  000a8	89 86 9c 03 00
	00		 mov	 DWORD PTR [esi+924], eax
$LN14@ProcState_:

; 221  : 		}
; 222  : 		dwTICK_COUNT2 = TICK_COUNT;
; 223  : 
; 224  : 		if( m_iRemainMinute <= (m_iIT_TIME_MIN_OPEN + 1) &&

  000ae	8b 96 98 03 00
	00		 mov	 edx, DWORD PTR [esi+920]
  000b4	89 9e a0 03 00
	00		 mov	 DWORD PTR [esi+928], ebx
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iIT_TIME_MIN_OPEN@@3HA ; m_iIT_TIME_MIN_OPEN
  000c0	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000c3	3b d0		 cmp	 edx, eax
  000c5	7f 1e		 jg	 SHORT $LN15@ProcState_
  000c7	83 be 9c 03 00
	00 ff		 cmp	 DWORD PTR [esi+924], -1
  000ce	75 15		 jne	 SHORT $LN15@ProcState_

; 225  : 			dwTICK_COUNT == -1)
; 226  : 		{
; 227  : 			dwTICK_COUNT = (m_iIT_TIME_MIN_OPEN + 1) * 60 * 1000;

  000d0	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000d3	69 c0 60 ea 00
	00		 imul	 eax, eax, 60000
  000d9	89 86 9c 03 00
	00		 mov	 DWORD PTR [esi+924], eax
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_iIT_TIME_MIN_OPEN@@3HA ; m_iIT_TIME_MIN_OPEN
$LN15@ProcState_:

; 228  : 		}
; 229  : 
; 230  : 		if( m_iRemainMinute <= m_iIT_TIME_MIN_OPEN &&
; 231  : 			dwTICK_COUNT > 5000 &&

  000e5	3b d1		 cmp	 edx, ecx
  000e7	7f 1f		 jg	 SHORT $LN16@ProcState_
  000e9	81 be 9c 03 00
	00 88 13 00 00	 cmp	 DWORD PTR [esi+924], 5000 ; 00001388H
  000f3	7e 13		 jle	 SHORT $LN16@ProcState_
  000f5	83 be 90 03 00
	00 00		 cmp	 DWORD PTR [esi+912], 0
  000fc	75 0a		 jne	 SHORT $LN16@ProcState_

; 232  : 			m_OpenState == FALSE)
; 233  : 		{
; 234  : 			m_OpenState = TRUE;

  000fe	c7 86 90 03 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+912], 1
$LN16@ProcState_:

; 235  : 		}
; 236  : 
; 237  : 		if( dwTICK_COUNT <= 30000 &&
; 238  : 			dwTICK_COUNT > 0 &&
; 239  : 			Temple == 0 && 

  00108	8b 86 9c 03 00
	00		 mov	 eax, DWORD PTR [esi+924]
  0010e	3d 30 75 00 00	 cmp	 eax, 30000		; 00007530H
  00113	0f 8f c2 00 00
	00		 jg	 $LN3@ProcState_
  00119	85 c0		 test	 eax, eax
  0011b	0f 8e ba 00 00
	00		 jle	 $LN3@ProcState_
  00121	80 be 2c 02 00
	00 00		 cmp	 BYTE PTR [esi+556], 0
  00128	0f 85 ad 00 00
	00		 jne	 $LN3@ProcState_
  0012e	83 be b0 03 00
	00 00		 cmp	 DWORD PTR [esi+944], 0
  00135	0f 85 a0 00 00
	00		 jne	 $LN3@ProcState_

; 240  : 			m_IT_MSG_BEFORE_ENTER == FALSE)
; 241  : 		{
; 242  : 			m_IT_MSG_BEFORE_ENTER = TRUE;
; 243  : 
; 244  : 			PMSG_SET_DEVILSQUARE pMsg;
; 245  : 			PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  0013b	6a 04		 push	 4
  0013d	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00143	c7 86 b0 03 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+944], 1
  0014d	68 92 00 00 00	 push	 146			; 00000092H
  00152	50		 push	 eax
  00153	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00158	83 c4 0c	 add	 esp, 12			; 0000000cH

; 246  : 			pMsg.Type = 14;

  0015b	c6 85 eb fd ff
	ff 0e		 mov	 BYTE PTR _pMsg$1[ebp+3], 14 ; 0000000eH

; 247  : 
; 248  : 			for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  00162	bb 04 29 00 00	 mov	 ebx, 10500		; 00002904H
  00167	bf 00 dd 49 06	 mov	 edi, 105504000		; 0649dd00H
  0016c	0f 1f 40 00	 npad	 4
$LL4@ProcState_:

; 249  : 			{
; 250  : 				if( gObj[i].Connected == PLAYER_PLAYING &&
; 251  : 					gObj[i].Type == OBJ_USER &&
; 252  : 					BC_MAP_RANGE( gObj[i].MapNumber ) == FALSE &&

  00170	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00175	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  0017a	75 50		 jne	 SHORT $LN2@ProcState_
  0017c	80 7c 07 50 01	 cmp	 BYTE PTR [edi+eax+80], 1
  00181	75 49		 jne	 SHORT $LN2@ProcState_
  00183	8a 8c 07 23 01
	00 00		 mov	 cl, BYTE PTR [edi+eax+291]
  0018a	80 f9 34	 cmp	 cl, 52			; 00000034H
  0018d	74 3d		 je	 SHORT $LN2@ProcState_
  0018f	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00192	72 0b		 jb	 SHORT $LN82@ProcState_
  00194	b0 11		 mov	 al, 17			; 00000011H
  00196	3a c1		 cmp	 al, cl
  00198	1b c0		 sbb	 eax, eax
  0019a	83 c0 01	 add	 eax, 1
  0019d	75 2d		 jne	 SHORT $LN2@ProcState_
$LN82@ProcState_:
  0019f	80 f9 35	 cmp	 cl, 53			; 00000035H
  001a2	74 28		 je	 SHORT $LN2@ProcState_
  001a4	80 f9 12	 cmp	 cl, 18			; 00000012H
  001a7	72 0b		 jb	 SHORT $LN83@ProcState_
  001a9	b0 17		 mov	 al, 23			; 00000017H
  001ab	3a c1		 cmp	 al, cl
  001ad	1b c0		 sbb	 eax, eax
  001af	83 c0 01	 add	 eax, 1
  001b2	75 18		 jne	 SHORT $LN2@ProcState_
$LN83@ProcState_:

; 253  : 					CC_MAP_RANGE( gObj[i].MapNumber ) == FALSE )
; 254  : 				{
; 255  : 					DataSend(i,(LPBYTE)&pMsg,pMsg.h.size);

  001b4	0f b6 85 e9 fd
	ff ff		 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  001bb	50		 push	 eax
  001bc	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  001c2	50		 push	 eax
  001c3	53		 push	 ebx
  001c4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001c9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcState_:

; 247  : 
; 248  : 			for(int i = OBJ_STARTUSERINDEX; i < OBJMAX; i++)

  001cc	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  001d2	43		 inc	 ebx
  001d3	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  001d9	7c 95		 jl	 SHORT $LL4@ProcState_
$LN3@ProcState_:

; 256  : 				}
; 257  : 			}
; 258  : 		}
; 259  : 
; 260  : 		if( dwTICK_COUNT <= 5000 && m_OpenState == TRUE)

  001db	81 be 9c 03 00
	00 88 13 00 00	 cmp	 DWORD PTR [esi+924], 5000 ; 00001388H
  001e5	7f 53		 jg	 SHORT $LN20@ProcState_
  001e7	83 be 90 03 00
	00 01		 cmp	 DWORD PTR [esi+912], 1
  001ee	75 4a		 jne	 SHORT $LN20@ProcState_

; 261  : 		{
; 262  : 			m_OpenState = FALSE;
; 263  : 			if( Temple == 0)

  001f0	80 be 2c 02 00
	00 00		 cmp	 BYTE PTR [esi+556], 0
  001f7	c7 86 90 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+912], 0
  00201	75 37		 jne	 SHORT $LN20@ProcState_

; 264  : 			{
; 265  : 				PMSG_NOTICE pNotice;
; 266  : 				TNotice::MakeNoticeMsgEx(&pNotice, 0,lMsg.Get(MSGGET(13,67)));

  00203	68 43 0d 00 00	 push	 3395			; 00000d43H
  00208	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0020d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00212	50		 push	 eax
  00213	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  00219	6a 00		 push	 0
  0021b	50		 push	 eax
  0021c	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 267  : 				SendAllUserAnyMsg((BYTE *)&pNotice, pNotice.h.size);

  00221	0f b6 85 ed fd
	ff ff		 movzx	 eax, BYTE PTR _pNotice$2[ebp+1]
  00228	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022b	8b ce		 mov	 ecx, esi
  0022d	50		 push	 eax
  0022e	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  00234	50		 push	 eax
  00235	e8 00 00 00 00	 call	 ?SendAllUserAnyMsg@CIllusionTempleProcess@@QAEXPAEH@Z ; CIllusionTempleProcess::SendAllUserAnyMsg
$LN20@ProcState_:

; 268  : 			}
; 269  : 		}
; 270  : 	}
; 271  : 
; 272  : 	if( m_iRemainMinute <= 0 &&

  0023a	83 be 98 03 00
	00 00		 cmp	 DWORD PTR [esi+920], 0
  00241	0f 8f 91 06 00
	00		 jg	 $LN21@ProcState_
  00247	83 be 9c 03 00
	00 00		 cmp	 DWORD PTR [esi+924], 0
  0024e	0f 8f 84 06 00
	00		 jg	 $LN21@ProcState_

; 273  : 		dwTICK_COUNT <= 0 )
; 274  : 	{
; 275  : 		m_OpenState = FALSE;
; 276  : 		CheckUsers();

  00254	8b ce		 mov	 ecx, esi
  00256	c7 86 90 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+912], 0
  00260	e8 00 00 00 00	 call	 ?CheckUsers@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CheckUsers

; 277  : 
; 278  : 		if( UserCount < 2 )

  00265	83 be 28 02 00
	00 02		 cmp	 DWORD PTR [esi+552], 2
  0026c	0f 8d 98 01 00
	00		 jge	 $LN22@ProcState_

; 279  : 		{
; 280  : 			for(int i = 0; i < IT_MAXPLAYER; i++)

  00272	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]
  00275	c7 85 e8 fd ff
	ff 0a 00 00 00	 mov	 DWORD PTR tv2847[ebp], 10 ; 0000000aH
  0027f	90		 npad	 1
$LL7@ProcState_:

; 281  : 			{
; 282  : 				if( m_PlayerData[i].m_Index != -1 &&
; 283  : 					gObj[ m_PlayerData[i].m_Index ].Connected > PLAYER_LOGGED &&

  00280	8b 07		 mov	 eax, DWORD PTR [edi]
  00282	83 f8 ff	 cmp	 eax, -1
  00285	0f 84 36 01 00
	00		 je	 $LN5@ProcState_
  0028b	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00291	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  00297	83 7c 1a 04 02	 cmp	 DWORD PTR [edx+ebx+4], 2
  0029c	0f 8e 1f 01 00
	00		 jle	 $LN5@ProcState_
  002a2	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  002a9	0f b6 8c 1a 23
	01 00 00	 movzx	 ecx, BYTE PTR [edx+ebx+291]
  002b1	89 85 e4 fd ff
	ff		 mov	 DWORD PTR tv2830[ebp], eax
  002b7	83 c0 2d	 add	 eax, 45			; 0000002dH
  002ba	3b c8		 cmp	 ecx, eax
  002bc	0f 85 ff 00 00
	00		 jne	 $LN5@ProcState_

; 284  : 					gObj[ m_PlayerData[i].m_Index ].MapNumber == Temple + MAP_INDEX_ILLUSIONTEMPLE1 )
; 285  : 				{
; 286  : 					int Pos = m_PlayerData[i].m_TicketPos;

  002c2	0f b6 47 28	 movzx	 eax, BYTE PTR [edi+40]
  002c6	89 85 e0 fd ff
	ff		 mov	 DWORD PTR _Pos$1$[ebp], eax

; 287  : 
; 288  : 					if( Pos > -1 )

  002cc	83 f8 ff	 cmp	 eax, -1
  002cf	0f 8e bb 00 00
	00		 jle	 $LN24@ProcState_

; 289  : 					{
; 290  : 						if( gObj[ m_PlayerData[i].m_Index ] .pInventory[Pos].m_Type == ITEMGET(13,51) )

  002d5	69 c0 d4 00 00
	00		 imul	 eax, eax, 212
  002db	89 85 e4 fd ff
	ff		 mov	 DWORD PTR tv2829[ebp], eax
  002e1	8b 84 1a c0 11
	00 00		 mov	 eax, DWORD PTR [edx+ebx+4544]
  002e8	ba 33 1a 00 00	 mov	 edx, 6707		; 00001a33H
  002ed	8b 9d e4 fd ff
	ff		 mov	 ebx, DWORD PTR tv2829[ebp]
  002f3	0f b7 4c 18 06	 movzx	 ecx, WORD PTR [eax+ebx+6]
  002f8	66 3b ca	 cmp	 cx, dx
  002fb	75 0a		 jne	 SHORT $LN26@ProcState_

; 291  : 						{
; 292  : 							gObj[ m_PlayerData[i].m_Index ] .pInventory[Pos].m_Durability = 1.0f;

  002fd	c7 44 18 24 00
	00 80 3f	 mov	 DWORD PTR [eax+ebx+36], 1065353216 ; 3f800000H

; 293  : 							GCItemDurSend( gObj[ m_PlayerData[i].m_Index ].m_Index, Pos, (BYTE)gObj[ m_PlayerData[i].m_Index ] .pInventory[Pos].m_Durability, 0);

  00305	eb 1e		 jmp	 SHORT $LN87@ProcState_
$LN26@ProcState_:

; 294  : 						}
; 295  : 						else if( gObj[ m_PlayerData[i].m_Index ] .pInventory[Pos].m_Type == ITEMGET(13,61) )

  00307	ba 3d 1a 00 00	 mov	 edx, 6717		; 00001a3dH
  0030c	66 3b ca	 cmp	 cx, dx
  0030f	75 44		 jne	 SHORT $LN28@ProcState_

; 296  : 						{
; 297  : 							gObj[ m_PlayerData[i].m_Index ] .pInventory[Pos].m_Durability += 1.0f;

  00311	f3 0f 10 44 18
	24		 movss	 xmm0, DWORD PTR [eax+ebx+36]
  00317	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0031f	f3 0f 11 44 18
	24		 movss	 DWORD PTR [eax+ebx+36], xmm0
$LN87@ProcState_:

; 298  : 							GCItemDurSend( gObj[ m_PlayerData[i].m_Index ].m_Index, Pos, (BYTE)gObj[ m_PlayerData[i].m_Index ] .pInventory[Pos].m_Durability, 0);

  00325	69 17 40 27 00
	00		 imul	 edx, DWORD PTR [edi], 10048
  0032b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00331	6a 00		 push	 0
  00333	8b 84 0a c0 11
	00 00		 mov	 eax, DWORD PTR [edx+ecx+4544]
  0033a	f3 0f 2c 44 18
	24		 cvttss2si eax, DWORD PTR [eax+ebx+36]
  00340	0f b6 c0	 movzx	 eax, al
  00343	50		 push	 eax
  00344	ff b5 e0 fd ff
	ff		 push	 DWORD PTR _Pos$1$[ebp]
  0034a	ff 34 0a	 push	 DWORD PTR [edx+ecx]
  0034d	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  00352	83 c4 10	 add	 esp, 16			; 00000010H
$LN28@ProcState_:

; 299  : 						}
; 300  : 
; 301  : 						LogAddTD("[Illusion Temple] (%d) Payback to User (%s)(%s) Ticket (Serial:%u)",

  00355	69 17 40 27 00
	00		 imul	 edx, DWORD PTR [edi], 10048
  0035b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00361	8b 84 0a c0 11
	00 00		 mov	 eax, DWORD PTR [edx+ecx+4544]
  00368	ff 34 18	 push	 DWORD PTR [eax+ebx]
  0036b	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0036e	03 c2		 add	 eax, edx
  00370	50		 push	 eax
  00371	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00374	03 c2		 add	 eax, edx
  00376	50		 push	 eax
  00377	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0037e	40		 inc	 eax
  0037f	50		 push	 eax
  00380	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@OJGCKKPO@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@
  00385	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0038b	83 c4 14	 add	 esp, 20			; 00000014H

; 302  : 							Temple+1,gObj[ m_PlayerData[i].m_Index ].AccountID,gObj[ m_PlayerData[i].m_Index ].Name,gObj[ m_PlayerData[i].m_Index ].pInventory[Pos].m_Number );
; 303  : 
; 304  : 					}
; 305  : 					else

  0038e	eb 22		 jmp	 SHORT $LN25@ProcState_
$LN24@ProcState_:

; 306  : 					{
; 307  : 						LogAddTD("[Illusion Temple] (%d) Payback to User Failed (%s)(%s) Scroll Not Found",

  00390	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00393	03 c2		 add	 eax, edx
  00395	50		 push	 eax
  00396	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00399	03 c2		 add	 eax, edx
  0039b	50		 push	 eax
  0039c	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR tv2830[ebp]
  003a2	40		 inc	 eax
  003a3	50		 push	 eax
  003a4	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LKEJODBE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Payback?5t@
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003af	83 c4 10	 add	 esp, 16			; 00000010H
$LN25@ProcState_:

; 308  : 							Temple+1,gObj[ m_PlayerData[i].m_Index ].AccountID,gObj[ m_PlayerData[i].m_Index ].Name );
; 309  : 					}
; 310  : 
; 311  : 					gObjMoveGate(m_PlayerData[i].m_Index,267);

  003b2	68 0b 01 00 00	 push	 267			; 0000010bH
  003b7	ff 37		 push	 DWORD PTR [edi]
  003b9	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  003be	83 c4 08	 add	 esp, 8
$LN5@ProcState_:

; 279  : 		{
; 280  : 			for(int i = 0; i < IT_MAXPLAYER; i++)

  003c1	83 c7 30	 add	 edi, 48			; 00000030H
  003c4	83 ad e8 fd ff
	ff 01		 sub	 DWORD PTR tv2847[ebp], 1
  003cb	0f 85 af fe ff
	ff		 jne	 $LL7@ProcState_

; 312  : 				}
; 313  : 			}
; 314  : 
; 315  : 			LogAddTD("[Illusion Temple] (%d) Failed to Start Illusion Temple (UserCount: %d)",Temple+1,UserCount);

  003d1	ff b6 28 02 00
	00		 push	 DWORD PTR [esi+552]
  003d7	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  003de	40		 inc	 eax
  003df	50		 push	 eax
  003e0	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@FBNKCLFD@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Failed?5to@
  003e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 			SetState(IT_STATE_PLAYEND);

  003ee	8b ce		 mov	 ecx, esi
  003f0	6a 03		 push	 3
  003f2	e8 00 00 00 00	 call	 ?SetState@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::SetState
  003f7	5f		 pop	 edi
  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx

; 495  : 	}
; 496  : }

  003fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fd	33 cd		 xor	 ecx, ebp
  003ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00404	8b e5		 mov	 esp, ebp
  00406	5d		 pop	 ebp
  00407	c2 04 00	 ret	 4
$LN22@ProcState_:

; 317  : 			return;
; 318  : 		}
; 319  : 
; 320  : 		int Count = 0;
; 321  : 		int AlliedParty = -1;
; 322  : 		int IllusionParty = -1;
; 323  : 
; 324  : 		char szAlliedTeam[256];
; 325  : 		char szIllusionTeam[256];
; 326  : 
; 327  : 		sprintf(szAlliedTeam,"[Illusion Temple] (%d) [AlliedTeam] ",Temple+1);

  0040a	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00411	40		 inc	 eax
  00412	c7 85 e4 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _AlliedParty$1$[ebp], -1
  0041c	50		 push	 eax
  0041d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAlliedTeam$5[ebp]
  00423	c7 85 e8 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR _IllusionParty$1$[ebp], -1
  0042d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JIFCGMEK@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLAlliedTe@
  00432	50		 push	 eax
  00433	e8 00 00 00 00	 call	 _sprintf

; 328  : 		sprintf(szIllusionTeam,"[Illusion Temple] (%d) [IllusiondTeam] ",Temple+1);

  00438	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0043f	40		 inc	 eax
  00440	50		 push	 eax
  00441	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szIllusionTeam$4[ebp]
  00447	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JGHENCNJ@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5?$FLIllusion@
  0044c	50		 push	 eax
  0044d	e8 00 00 00 00	 call	 _sprintf
  00452	83 c4 18	 add	 esp, 24			; 00000018H
  00455	8d 7e 20	 lea	 edi, DWORD PTR [esi+32]

; 329  : 
; 330  : 		for(int i = 0; i < IT_MAXPLAYER; i++)

  00458	33 db		 xor	 ebx, ebx
  0045a	89 9d e0 fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
$LL10@ProcState_:

; 331  : 		{
; 332  : 			if( m_PlayerData[i].m_Index != -1 &&

  00460	8b 07		 mov	 eax, DWORD PTR [edi]
  00462	83 f8 ff	 cmp	 eax, -1
  00465	0f 84 a3 03 00
	00		 je	 $LN8@ProcState_
  0046b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00471	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00477	39 9c 11 78 24
	00 00		 cmp	 DWORD PTR [ecx+edx+9336], ebx
  0047e	0f 85 8a 03 00
	00		 jne	 $LN8@ProcState_

; 333  : 				gObj[ m_PlayerData[i].m_Index].iTempleIndex == i )
; 334  : 			{
; 335  : 				if( gObj[m_PlayerData[i].m_Index].Class >= MAX_TYPE_PLAYER ||

  00484	66 83 bc 11 90
	00 00 00 07	 cmp	 WORD PTR [ecx+edx+144], 7
  0048d	0f 83 7b 03 00
	00		 jae	 $LN8@ProcState_

; 336  : 					gObj[m_PlayerData[i].m_Index].Class < 0 )
; 337  : 				{
; 338  : 					continue;
; 339  : 				}
; 340  : 
; 341  : 				int Pos = m_PlayerData[i].m_TicketPos;

  00493	0f b6 5f 28	 movzx	 ebx, BYTE PTR [edi+40]

; 342  : 
; 343  : 				if( Pos > -1 )

  00497	83 fb ff	 cmp	 ebx, -1
  0049a	7e 4e		 jle	 SHORT $LN36@ProcState_

; 344  : 				{
; 345  : 					if( gObj[m_PlayerData[i].m_Index].pInventory[Pos].m_Durability <= 0.0f )

  0049c	8b 94 11 c0 11
	00 00		 mov	 edx, DWORD PTR [ecx+edx+4544]
  004a3	0f 57 c0	 xorps	 xmm0, xmm0
  004a6	69 c3 d4 00 00
	00		 imul	 eax, ebx, 212
  004ac	8b c8		 mov	 ecx, eax
  004ae	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv2684[ebp], eax
  004b4	8b 07		 mov	 eax, DWORD PTR [edi]
  004b6	0f 2f 44 0a 24	 comiss	 xmm0, DWORD PTR [edx+ecx+36]
  004bb	72 2d		 jb	 SHORT $LN36@ProcState_

; 346  : 					{
; 347  : 						if( gObj[m_PlayerData[i].m_Index].pInventory[Pos].m_Type == ITEMGET(13,51) )

  004bd	0f b7 4c 0a 06	 movzx	 ecx, WORD PTR [edx+ecx+6]
  004c2	ba 33 1a 00 00	 mov	 edx, 6707		; 00001a33H
  004c7	66 3b ca	 cmp	 cx, dx
  004ca	74 0a		 je	 SHORT $LN88@ProcState_

; 348  : 						{
; 349  : 							gObjInventoryDeleteItem(m_PlayerData[i].m_Index, Pos);
; 350  : 							GCInventoryItemDeleteSend(m_PlayerData[i].m_Index,Pos,0);
; 351  : 						}
; 352  : 						else if( gObj[m_PlayerData[i].m_Index].pInventory[Pos].m_Type == ITEMGET(13,61) &&

  004cc	ba 3d 1a 00 00	 mov	 edx, 6717		; 00001a3dH
  004d1	66 3b ca	 cmp	 cx, dx
  004d4	75 14		 jne	 SHORT $LN36@ProcState_
$LN88@ProcState_:

; 353  : 								 gObj[m_PlayerData[i].m_Index].pInventory[Pos].m_Durability <= 0.0f)
; 354  : 						{
; 355  : 							gObjInventoryDeleteItem(m_PlayerData[i].m_Index, Pos);

  004d6	53		 push	 ebx
  004d7	50		 push	 eax
  004d8	e8 00 00 00 00	 call	 ?gObjInventoryDeleteItem@@YAEHH@Z ; gObjInventoryDeleteItem

; 356  : 							GCInventoryItemDeleteSend(m_PlayerData[i].m_Index,Pos,0);

  004dd	6a 00		 push	 0
  004df	53		 push	 ebx
  004e0	ff 37		 push	 DWORD PTR [edi]
  004e2	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  004e7	83 c4 14	 add	 esp, 20			; 00000014H
$LN36@ProcState_:

; 357  : 						}
; 358  : 					}
; 359  : 				}
; 360  : 
; 361  : 				if( m_ALLIED_TEAM[gObj[ m_PlayerData[i].m_Index].Class] == m_ILLUSION_TEAM[gObj[ m_PlayerData[i].m_Index].Class] )

  004ea	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  004f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  004f5	0f b7 84 01 90
	00 00 00	 movzx	 eax, WORD PTR [ecx+eax+144]
  004fd	8a 8c 30 d3 03
	00 00		 mov	 cl, BYTE PTR [eax+esi+979]
  00504	8a 84 30 da 03
	00 00		 mov	 al, BYTE PTR [eax+esi+986]
  0050b	3a c8		 cmp	 cl, al

; 362  : 				{
; 363  : 					if( m_ALLIED_TEAM_COUNT == m_ILLUSION_TEAM_COUNT )

  0050d	8b 86 c8 03 00
	00		 mov	 eax, DWORD PTR [esi+968]
  00513	75 1d		 jne	 SHORT $LN89@ProcState_
  00515	8b 8e cc 03 00
	00		 mov	 ecx, DWORD PTR [esi+972]
  0051b	3b c1		 cmp	 eax, ecx
  0051d	75 1b		 jne	 SHORT $LN90@ProcState_

; 364  : 					{
; 365  : 						m_PlayerData[i].m_Team = rand()%2;

  0051f	e8 00 00 00 00	 call	 _rand
  00524	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00529	79 1d		 jns	 SHORT $LN86@ProcState_
  0052b	48		 dec	 eax
  0052c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0052f	40		 inc	 eax

; 366  : 					}
; 367  : 					else

  00530	eb 16		 jmp	 SHORT $LN86@ProcState_
$LN89@ProcState_:

; 368  : 					{
; 369  : 						if( m_ALLIED_TEAM_COUNT > m_ILLUSION_TEAM_COUNT )
; 370  : 						{
; 371  : 							m_PlayerData[i].m_Team = IT_ILLUSION_TEAM;
; 372  : 						}
; 373  : 						else
; 374  : 						{
; 375  : 							m_PlayerData[i].m_Team = IT_ALLIED_TEAM;
; 376  : 						}
; 377  : 					}
; 378  : 				}
; 379  : 				else
; 380  : 				{
; 381  : 					if( m_ALLIED_TEAM[gObj[ m_PlayerData[i].m_Index].Class] < m_ILLUSION_TEAM[gObj[ m_PlayerData[i].m_Index].Class] )

  00532	73 0b		 jae	 SHORT $LN43@ProcState_

; 382  : 					{
; 383  : 						if( m_ALLIED_TEAM_COUNT > m_ILLUSION_TEAM_COUNT )

  00534	3b 86 cc 03 00
	00		 cmp	 eax, DWORD PTR [esi+972]
$LN90@ProcState_:
  0053a	0f 9f c0	 setg	 al

; 384  : 						{
; 385  : 							m_PlayerData[i].m_Team = IT_ILLUSION_TEAM;
; 386  : 						}
; 387  : 						else
; 388  : 						{
; 389  : 							m_PlayerData[i].m_Team = IT_ALLIED_TEAM;
; 390  : 						}
; 391  : 					}
; 392  : 					else

  0053d	eb 09		 jmp	 SHORT $LN86@ProcState_
$LN43@ProcState_:

; 393  : 					{
; 394  : 						if( m_ALLIED_TEAM_COUNT < m_ILLUSION_TEAM_COUNT )

  0053f	3b 86 cc 03 00
	00		 cmp	 eax, DWORD PTR [esi+972]
  00545	0f 9d c0	 setge	 al
$LN86@ProcState_:

; 395  : 						{
; 396  : 							m_PlayerData[i].m_Team = IT_ALLIED_TEAM;
; 397  : 						}
; 398  : 						else
; 399  : 						{
; 400  : 							m_PlayerData[i].m_Team = IT_ILLUSION_TEAM;
; 401  : 						}
; 402  : 					}
; 403  : 				}
; 404  : 
; 405  : 				if( m_PlayerData[i].m_Team == IT_ALLIED_TEAM )
; 406  : 				{
; 407  : 					m_PlayerData[i].m_Team = IT_ALLIED_TEAM;
; 408  : 					m_ALLIED_TEAM[gObj[ m_PlayerData[i].m_Index].Class]++;

  00548	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  0054e	88 47 04	 mov	 BYTE PTR [edi+4], al
  00551	84 c0		 test	 al, al
  00553	0f 85 53 01 00
	00		 jne	 $LN49@ProcState_
  00559	88 47 04	 mov	 BYTE PTR [edi+4], al
  0055c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00561	0f b7 84 01 90
	00 00 00	 movzx	 eax, WORD PTR [ecx+eax+144]
  00569	fe 84 30 d3 03
	00 00		 inc	 BYTE PTR [eax+esi+979]

; 409  : 
; 410  : 					if( AlliedParty == -1 && gObj[m_PlayerData[i].m_Index].PartyNumber < 0 )

  00570	83 bd e4 fd ff
	ff ff		 cmp	 DWORD PTR _AlliedParty$1$[ebp], -1
  00577	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0057d	75 55		 jne	 SHORT $LN51@ProcState_
  0057f	8b 17		 mov	 edx, DWORD PTR [edi]
  00581	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00587	83 bc 19 0c 06
	00 00 00	 cmp	 DWORD PTR [ecx+ebx+1548], 0
  0058f	7d 43		 jge	 SHORT $LN51@ProcState_

; 411  : 					{
; 412  : 						AlliedParty = gParty.Create(m_PlayerData[i].m_Index,gObj[m_PlayerData[i].m_Index].DBNumber,gObj[m_PlayerData[i].m_Index].Level);

  00591	0f bf 84 19 96
	00 00 00	 movsx	 eax, WORD PTR [ecx+ebx+150]
  00599	50		 push	 eax
  0059a	ff 74 19 30	 push	 DWORD PTR [ecx+ebx+48]
  0059e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  005a3	52		 push	 edx
  005a4	e8 00 00 00 00	 call	 ?Create@PartyClass@@QAEHHHH@Z ; PartyClass::Create
  005a9	8b d8		 mov	 ebx, eax
  005ab	89 9d e4 fd ff
	ff		 mov	 DWORD PTR _AlliedParty$1$[ebp], ebx

; 413  : 
; 414  : 						if( AlliedParty == -1 )

  005b1	83 fb ff	 cmp	 ebx, -1
  005b4	75 49		 jne	 SHORT $LN53@ProcState_

; 415  : 						{
; 416  : 							LogAddTD("[Illusion Temple] (%d) Party Create Error, (Team: %d)",Temple+1,m_PlayerData[i].m_Team);

  005b6	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  005ba	51		 push	 ecx
  005bb	0f b6 8e 2c 02
	00 00		 movzx	 ecx, BYTE PTR [esi+556]
  005c2	41		 inc	 ecx
  005c3	51		 push	 ecx
  005c4	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NEAACFEP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Cre@
  005c9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  005cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 417  : 						}
; 418  : 						gObj[m_PlayerData[i].m_Index].PartyNumber = AlliedParty;
; 419  : 					}
; 420  : 					else

  005d2	eb 2b		 jmp	 SHORT $LN53@ProcState_
$LN51@ProcState_:

; 421  : 					{
; 422  : 						int bResult = gParty.Add(AlliedParty,m_PlayerData[i].m_Index,gObj[m_PlayerData[i].m_Index].DBNumber,gObj[m_PlayerData[i].m_Index].Level);

  005d4	8b 17		 mov	 edx, DWORD PTR [edi]
  005d6	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  005dc	0f bf 84 19 96
	00 00 00	 movsx	 eax, WORD PTR [ecx+ebx+150]
  005e4	50		 push	 eax
  005e5	ff 74 19 30	 push	 DWORD PTR [ecx+ebx+48]
  005e9	8b 9d e4 fd ff
	ff		 mov	 ebx, DWORD PTR _AlliedParty$1$[ebp]
  005ef	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  005f4	52		 push	 edx
  005f5	53		 push	 ebx
  005f6	e8 00 00 00 00	 call	 ?Add@PartyClass@@QAEHHHHH@Z ; PartyClass::Add

; 423  : 
; 424  : 						if( bResult >= 0 )

  005fb	85 c0		 test	 eax, eax
  005fd	78 14		 js	 SHORT $LN54@ProcState_
$LN53@ProcState_:

; 425  : 						{
; 426  : 							gObj[m_PlayerData[i].m_Index].PartyNumber = AlliedParty;

  005ff	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00605	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0060a	89 9c 01 0c 06
	00 00		 mov	 DWORD PTR [ecx+eax+1548], ebx

; 427  : 						}
; 428  : 						else

  00611	eb 1c		 jmp	 SHORT $LN55@ProcState_
$LN54@ProcState_:

; 429  : 						{
; 430  : 							LogAddTD("[Illusion Temple] (%d) Party Add Error, (Team: %d)",Temple+1,m_PlayerData[i].m_Team);

  00613	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00617	50		 push	 eax
  00618	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0061f	40		 inc	 eax
  00620	50		 push	 eax
  00621	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@OHOGJPCE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Add@
  00626	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0062c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN55@ProcState_:

; 431  : 						}
; 432  : 					}
; 433  : 
; 434  : 					gObjMoveGate(m_PlayerData[i].m_Index,148 + Temple);

  0062f	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00636	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0063b	50		 push	 eax
  0063c	ff 37		 push	 DWORD PTR [edi]
  0063e	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate

; 435  : 					gObj[m_PlayerData[i].m_Index].m_Change = 404;

  00643	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00649	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0064e	c7 84 01 34 06
	00 00 94 01 00
	00		 mov	 DWORD PTR [ecx+eax+1588], 404 ; 00000194H

; 436  : 					gObjViewportListProtocolCreate(&gObj[m_PlayerData[i].m_Index]);

  00659	69 07 40 27 00
	00		 imul	 eax, DWORD PTR [edi], 10048
  0065f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00665	50		 push	 eax
  00666	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate

; 437  : 					m_ALLIED_TEAM_COUNT++;
; 438  : 					Count++;
; 439  : 
; 440  : 					int szLen = strlen(szAlliedTeam);

  0066b	8d 9d fc fe ff
	ff		 lea	 ebx, DWORD PTR _szAlliedTeam$5[ebp]
  00671	83 c4 0c	 add	 esp, 12			; 0000000cH
  00674	ff 86 c8 03 00
	00		 inc	 DWORD PTR [esi+968]
  0067a	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0067d	0f 1f 00	 npad	 3
$LL84@ProcState_:
  00680	8a 03		 mov	 al, BYTE PTR [ebx]
  00682	43		 inc	 ebx
  00683	84 c0		 test	 al, al
  00685	75 f9		 jne	 SHORT $LL84@ProcState_

; 441  : 					sprintf(&szAlliedTeam[szLen],"(%s)(%s) ",gObj[m_PlayerData[i].m_Index].AccountID,gObj[m_PlayerData[i].m_Index].Name);

  00687	69 17 40 27 00
	00		 imul	 edx, DWORD PTR [edi], 10048
  0068d	2b d9		 sub	 ebx, ecx
  0068f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00695	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00698	03 c2		 add	 eax, edx
  0069a	50		 push	 eax
  0069b	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0069e	03 c2		 add	 eax, edx
  006a0	50		 push	 eax
  006a1	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAlliedTeam$5[ebp]

; 442  : 				}
; 443  : 				else

  006a7	e9 4c 01 00 00	 jmp	 $LN91@ProcState_
$LN49@ProcState_:

; 444  : 				{
; 445  : 					m_PlayerData[i].m_Team = IT_ILLUSION_TEAM;

  006ac	c6 47 04 01	 mov	 BYTE PTR [edi+4], 1

; 446  : 					m_ILLUSION_TEAM[gObj[ m_PlayerData[i].m_Index].Class]++;

  006b0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006b5	0f b7 84 01 90
	00 00 00	 movzx	 eax, WORD PTR [ecx+eax+144]
  006bd	fe 84 30 da 03
	00 00		 inc	 BYTE PTR [eax+esi+986]

; 447  : 
; 448  : 					if( IllusionParty == -1 && gObj[m_PlayerData[i].m_Index].PartyNumber < 0 )

  006c4	83 bd e8 fd ff
	ff ff		 cmp	 DWORD PTR _IllusionParty$1$[ebp], -1
  006cb	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  006d1	75 55		 jne	 SHORT $LN56@ProcState_
  006d3	8b 17		 mov	 edx, DWORD PTR [edi]
  006d5	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  006db	83 bc 19 0c 06
	00 00 00	 cmp	 DWORD PTR [ecx+ebx+1548], 0
  006e3	7d 43		 jge	 SHORT $LN56@ProcState_

; 449  : 					{
; 450  : 						IllusionParty = gParty.Create(m_PlayerData[i].m_Index,gObj[m_PlayerData[i].m_Index].DBNumber,gObj[m_PlayerData[i].m_Index].Level);

  006e5	0f bf 84 19 96
	00 00 00	 movsx	 eax, WORD PTR [ecx+ebx+150]
  006ed	50		 push	 eax
  006ee	ff 74 19 30	 push	 DWORD PTR [ecx+ebx+48]
  006f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  006f7	52		 push	 edx
  006f8	e8 00 00 00 00	 call	 ?Create@PartyClass@@QAEHHHH@Z ; PartyClass::Create
  006fd	8b d8		 mov	 ebx, eax
  006ff	89 9d e8 fd ff
	ff		 mov	 DWORD PTR _IllusionParty$1$[ebp], ebx

; 451  : 
; 452  : 						if( IllusionParty == -1 )

  00705	83 fb ff	 cmp	 ebx, -1
  00708	75 49		 jne	 SHORT $LN58@ProcState_

; 453  : 						{
; 454  : 							LogAddTD("[Illusion Temple] (%d) Party Create Error, (Team: %d)",Temple+1,m_PlayerData[i].m_Team);

  0070a	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0070e	51		 push	 ecx
  0070f	0f b6 8e 2c 02
	00 00		 movzx	 ecx, BYTE PTR [esi+556]
  00716	41		 inc	 ecx
  00717	51		 push	 ecx
  00718	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NEAACFEP@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Cre@
  0071d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00723	83 c4 0c	 add	 esp, 12			; 0000000cH

; 455  : 						}
; 456  : 						gObj[m_PlayerData[i].m_Index].PartyNumber = IllusionParty;
; 457  : 					}
; 458  : 					else

  00726	eb 2b		 jmp	 SHORT $LN58@ProcState_
$LN56@ProcState_:

; 459  : 					{
; 460  : 						int bResult = gParty.Add(IllusionParty,m_PlayerData[i].m_Index,gObj[m_PlayerData[i].m_Index].DBNumber,gObj[m_PlayerData[i].m_Index].Level);

  00728	8b 17		 mov	 edx, DWORD PTR [edi]
  0072a	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00730	0f bf 84 19 96
	00 00 00	 movsx	 eax, WORD PTR [ecx+ebx+150]
  00738	50		 push	 eax
  00739	ff 74 19 30	 push	 DWORD PTR [ecx+ebx+48]
  0073d	8b 9d e8 fd ff
	ff		 mov	 ebx, DWORD PTR _IllusionParty$1$[ebp]
  00743	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00748	52		 push	 edx
  00749	53		 push	 ebx
  0074a	e8 00 00 00 00	 call	 ?Add@PartyClass@@QAEHHHHH@Z ; PartyClass::Add

; 461  : 
; 462  : 						if( bResult >= 0 )

  0074f	85 c0		 test	 eax, eax
  00751	78 14		 js	 SHORT $LN59@ProcState_
$LN58@ProcState_:

; 463  : 						{
; 464  : 							gObj[m_PlayerData[i].m_Index].PartyNumber = IllusionParty;

  00753	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00759	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0075e	89 9c 01 0c 06
	00 00		 mov	 DWORD PTR [ecx+eax+1548], ebx

; 465  : 						}
; 466  : 						else

  00765	eb 1c		 jmp	 SHORT $LN60@ProcState_
$LN59@ProcState_:

; 467  : 						{
; 468  : 							LogAddTD("[Illusion Temple] (%d) Party Add Error, (Team: %d)",Temple+1,m_PlayerData[i].m_Team);

  00767	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  0076b	50		 push	 eax
  0076c	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00773	40		 inc	 eax
  00774	50		 push	 eax
  00775	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@OHOGJPCE@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Party?5Add@
  0077a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00780	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN60@ProcState_:

; 469  : 						}
; 470  : 					}
; 471  : 
; 472  : 					gObjMoveGate(m_PlayerData[i].m_Index,154 + Temple);

  00783	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  0078a	05 9a 00 00 00	 add	 eax, 154		; 0000009aH
  0078f	50		 push	 eax
  00790	ff 37		 push	 DWORD PTR [edi]
  00792	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate

; 473  : 					gObj[m_PlayerData[i].m_Index].m_Change = 405;

  00797	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  0079d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007a2	c7 84 01 34 06
	00 00 95 01 00
	00		 mov	 DWORD PTR [ecx+eax+1588], 405 ; 00000195H

; 474  : 					gObjViewportListProtocolCreate(&gObj[m_PlayerData[i].m_Index]);

  007ad	69 07 40 27 00
	00		 imul	 eax, DWORD PTR [edi], 10048
  007b3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007b9	50		 push	 eax
  007ba	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate

; 475  : 					m_ILLUSION_TEAM_COUNT++;
; 476  : 					Count++;
; 477  : 
; 478  : 					int szLen = strlen(szIllusionTeam);

  007bf	8d 9d fc fd ff
	ff		 lea	 ebx, DWORD PTR _szIllusionTeam$4[ebp]
  007c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  007c8	ff 86 cc 03 00
	00		 inc	 DWORD PTR [esi+972]
  007ce	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
$LL85@ProcState_:
  007d1	8a 03		 mov	 al, BYTE PTR [ebx]
  007d3	43		 inc	 ebx
  007d4	84 c0		 test	 al, al
  007d6	75 f9		 jne	 SHORT $LL85@ProcState_

; 479  : 					sprintf(&szIllusionTeam[szLen],"(%s)(%s) ",gObj[m_PlayerData[i].m_Index].AccountID,gObj[m_PlayerData[i].m_Index].Name);

  007d8	69 17 40 27 00
	00		 imul	 edx, DWORD PTR [edi], 10048
  007de	2b d9		 sub	 ebx, ecx
  007e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  007e6	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  007e9	03 c2		 add	 eax, edx
  007eb	50		 push	 eax
  007ec	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  007ef	03 c2		 add	 eax, edx
  007f1	50		 push	 eax
  007f2	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szIllusionTeam$4[ebp]
$LN91@ProcState_:
  007f8	03 c3		 add	 eax, ebx
  007fa	68 00 00 00 00	 push	 OFFSET ??_C@_09MJCPIION@?$CI?$CFs?$CJ?$CI?$CFs?$CJ?5?$AA@
  007ff	50		 push	 eax
  00800	e8 00 00 00 00	 call	 _sprintf
  00805	8b 9d e0 fd ff
	ff		 mov	 ebx, DWORD PTR _i$1$[ebp]
  0080b	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@ProcState_:

; 329  : 
; 330  : 		for(int i = 0; i < IT_MAXPLAYER; i++)

  0080e	43		 inc	 ebx
  0080f	83 c7 30	 add	 edi, 48			; 00000030H
  00812	89 9d e0 fd ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ebx
  00818	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  0081b	0f 8c 3f fc ff
	ff		 jl	 $LL10@ProcState_

; 480  : 				}
; 481  : 			}
; 482  : 		}
; 483  : 
; 484  : 		CGPartyListAll(AlliedParty);

  00821	ff b5 e4 fd ff
	ff		 push	 DWORD PTR _AlliedParty$1$[ebp]
  00827	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll

; 485  : 		CGPartyListAll(IllusionParty);

  0082c	ff b5 e8 fd ff
	ff		 push	 DWORD PTR _IllusionParty$1$[ebp]
  00832	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  00837	83 c4 08	 add	 esp, 8

; 486  : 		SetState(IT_STATE_PREPARE);

  0083a	8b ce		 mov	 ecx, esi
  0083c	6a 01		 push	 1
  0083e	e8 00 00 00 00	 call	 ?SetState@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::SetState

; 487  : 
; 488  : 		LogAddTD("[Illusion Temple] (%d) Allied Team CLASS_DW(%d),CLASS_DK(%d), CLASS_FE(%d),CLASS_MG(%d), CLASS_DL(%d)",

  00843	0f b6 86 d7 03
	00 00		 movzx	 eax, BYTE PTR [esi+983]
  0084a	50		 push	 eax
  0084b	0f b6 86 d6 03
	00 00		 movzx	 eax, BYTE PTR [esi+982]
  00852	50		 push	 eax
  00853	0f b6 86 d5 03
	00 00		 movzx	 eax, BYTE PTR [esi+981]
  0085a	50		 push	 eax
  0085b	0f b6 86 d4 03
	00 00		 movzx	 eax, BYTE PTR [esi+980]
  00862	50		 push	 eax
  00863	0f b6 86 d3 03
	00 00		 movzx	 eax, BYTE PTR [esi+979]
  0086a	50		 push	 eax
  0086b	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  00872	40		 inc	 eax
  00873	50		 push	 eax
  00874	68 00 00 00 00	 push	 OFFSET ??_C@_0GG@JOEGADPL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Allied?5Te@
  00879	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 489  : 			Temple+1,m_ALLIED_TEAM[0],m_ALLIED_TEAM[1],m_ALLIED_TEAM[2],m_ALLIED_TEAM[3],m_ALLIED_TEAM[4]);
; 490  : 		LogAddTD(szAlliedTeam);

  0087f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szAlliedTeam$5[ebp]
  00885	50		 push	 eax
  00886	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 491  : 
; 492  : 		LogAddTD("[Illusion Temple] (%d) Illusion Team CLASS_DW(%d),CLASS_DK(%d), CLASS_FE(%d),CLASS_MG(%d), CLASS_DL(%d)",

  0088c	0f b6 86 de 03
	00 00		 movzx	 eax, BYTE PTR [esi+990]
  00893	50		 push	 eax
  00894	0f b6 86 dd 03
	00 00		 movzx	 eax, BYTE PTR [esi+989]
  0089b	50		 push	 eax
  0089c	0f b6 86 dc 03
	00 00		 movzx	 eax, BYTE PTR [esi+988]
  008a3	50		 push	 eax
  008a4	0f b6 86 db 03
	00 00		 movzx	 eax, BYTE PTR [esi+987]
  008ab	50		 push	 eax
  008ac	0f b6 86 da 03
	00 00		 movzx	 eax, BYTE PTR [esi+986]
  008b3	50		 push	 eax
  008b4	0f b6 86 2c 02
	00 00		 movzx	 eax, BYTE PTR [esi+556]
  008bb	40		 inc	 eax
  008bc	50		 push	 eax
  008bd	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@CGKCOMHN@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Illusion?5@
  008c2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 493  : 			Temple+1,m_ILLUSION_TEAM[0],m_ILLUSION_TEAM[1],m_ILLUSION_TEAM[2],m_ILLUSION_TEAM[3],m_ILLUSION_TEAM[4]);
; 494  : 		LogAddTD(szIllusionTeam);

  008c8	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szIllusionTeam$4[ebp]
  008ce	50		 push	 eax
  008cf	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  008d5	83 c4 40	 add	 esp, 64			; 00000040H
$LN21@ProcState_:

; 495  : 	}
; 496  : }

  008d8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008db	5f		 pop	 edi
  008dc	5e		 pop	 esi
  008dd	33 cd		 xor	 ecx, ebp
  008df	5b		 pop	 ebx
  008e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008e5	8b e5		 mov	 esp, ebp
  008e7	5d		 pop	 ebp
  008e8	c2 04 00	 ret	 4
?ProcState_CLOSE@CIllusionTempleProcess@@QAEXH@Z ENDP	; CIllusionTempleProcess::ProcState_CLOSE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?Run@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iTICK_COUNT$ = 8					; size = 4
?Run@CIllusionTempleProcess@@QAEXH@Z PROC		; CIllusionTempleProcess::Run, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  : 	BYTE State = this->State;
; 179  : 
; 180  : 	switch( State )

  00003	0f b6 81 2d 02
	00 00		 movzx	 eax, BYTE PTR [ecx+557]
  0000a	83 f8 03	 cmp	 eax, 3
  0000d	77 1f		 ja	 SHORT $LN2@Run
  0000f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@Run[eax*4]
$LN4@Run:

; 193  : 		break;
; 194  : 	}
; 195  : }

  00016	5d		 pop	 ebp

; 181  : 	{
; 182  : 	case IT_STATE_CLOSED:
; 183  : 		ProcState_CLOSE(iTICK_COUNT);

  00017	e9 00 00 00 00	 jmp	 ?ProcState_CLOSE@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_CLOSE
$LN5@Run:

; 193  : 		break;
; 194  : 	}
; 195  : }

  0001c	5d		 pop	 ebp

; 184  : 		break;
; 185  : 	case IT_STATE_PREPARE:
; 186  : 		ProcState_PREPARE(iTICK_COUNT);

  0001d	e9 00 00 00 00	 jmp	 ?ProcState_PREPARE@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_PREPARE
$LN6@Run:

; 193  : 		break;
; 194  : 	}
; 195  : }

  00022	5d		 pop	 ebp

; 187  : 		break;
; 188  : 	case IT_STATE_PLAYING:
; 189  : 		ProcState_PLAY(iTICK_COUNT);

  00023	e9 00 00 00 00	 jmp	 ?ProcState_PLAY@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_PLAY
$LN7@Run:

; 193  : 		break;
; 194  : 	}
; 195  : }

  00028	5d		 pop	 ebp

; 190  : 		break;
; 191  : 	case IT_STATE_PLAYEND:
; 192  : 		ProcState_PLAYEND(iTICK_COUNT);

  00029	e9 00 00 00 00	 jmp	 ?ProcState_PLAYEND@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::ProcState_PLAYEND
$LN2@Run:

; 193  : 		break;
; 194  : 	}
; 195  : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
  00032	66 90		 npad	 2
$LN12@Run:
  00034	00 00 00 00	 DD	 $LN4@Run
  00038	00 00 00 00	 DD	 $LN5@Run
  0003c	00 00 00 00	 DD	 $LN6@Run
  00040	00 00 00 00	 DD	 $LN7@Run
?Run@CIllusionTempleProcess@@QAEXH@Z ENDP		; CIllusionTempleProcess::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?CheckSync@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
_pTime$ = -32						; size = 8
_ltime$ = -32						; size = 8
_FIRST_TIME$1$ = -24					; size = 4
_today$1$ = -20						; size = 4
_pFirstTime$2$ = -16					; size = 4
_pFirstTime$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
_pTime$2$ = -4						; size = 4
?CheckSync@CIllusionTempleProcess@@QAEXXZ PROC		; CIllusionTempleProcess::CheckSync, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 85   : 	std::list<ILLUSION_TIME>::iterator Itor_;
; 86   : 
; 87   : 	ILLUSION_TIME pFirstTime;
; 88   : 	ILLUSION_TIME pTime;
; 89   : 
; 90   : 	DWORD FIRST_TIME = 0;
; 91   : 	DWORD CHECK_TIME = 0;
; 92   : 	DWORD NOW_TIME = 0;
; 93   : 
; 94   : 	tm * today;
; 95   : 	time_t ltime;
; 96   : 
; 97   : 	if( m_IllusionStartTime.size() == 0 )

  00006	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A+4, 0
  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00010	75 11		 jne	 SHORT $LN7@CheckSync

; 98   : 	{
; 99   : 		MsgBox("Error : Illusion Temple StartTime size is 0");

  00012	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@GMBNLABJ@Error?5?3?5Illusion?5Temple?5StartTim@
  00017	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0001c	83 c4 04	 add	 esp, 4

; 174  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN7@CheckSync:
  00023	53		 push	 ebx
  00024	56		 push	 esi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00025	8d 45 e0	 lea	 eax, DWORD PTR _ltime$[ebp]
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  0002f	8d 45 e0	 lea	 eax, DWORD PTR _ltime$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 __localtime64
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 43   : 		: _Ptr(_Pnode)

  00038	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  0003e	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 104  : 	today = localtime(&ltime);

  00041	89 45 ec	 mov	 DWORD PTR _today$1$[ebp], eax

; 106  : 	NOW_TIME = today->tm_hour * 60 + today->tm_min;

  00044	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00047	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004a	c1 e2 04	 shl	 edx, 4
  0004d	2b 50 08	 sub	 edx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 43   : 		: _Ptr(_Pnode)

  00050	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 106  : 	NOW_TIME = today->tm_hour * 60 + today->tm_min;

  00052	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]

; 107  : 
; 108  : 	pFirstTime = *m_IllusionStartTime.begin();

  00055	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00058	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0005b	89 4d f4	 mov	 DWORD PTR _pFirstTime$1$[ebp], ecx
  0005e	89 55 f0	 mov	 DWORD PTR _pFirstTime$2$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00061	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 110  : 	for( Itor_ = m_IllusionStartTime.begin() ; Itor_ != m_IllusionStartTime.end(); ++Itor_ )

  00063	74 58		 je	 SHORT $LN279@CheckSync
$LL4@CheckSync:

; 111  : 	{
; 112  : 		pTime = *Itor_;
; 113  : 
; 114  : 		FIRST_TIME = pFirstTime.iHour * 60 + pFirstTime.iMinute;

  00065	8b 75 f0	 mov	 esi, DWORD PTR _pFirstTime$2$[ebp]
  00068	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0006b	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  0006e	c1 e1 04	 shl	 ecx, 4
  00071	2b 4d f4	 sub	 ecx, DWORD PTR _pFirstTime$1$[ebp]
  00074	89 5d fc	 mov	 DWORD PTR _pTime$2$[ebp], ebx
  00077	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]

; 115  : 		CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;
; 116  : 
; 117  : 		if( FIRST_TIME == CHECK_TIME )

  0007a	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
  00080	89 4d e8	 mov	 DWORD PTR _FIRST_TIME$1$[ebp], ecx
  00083	8b ca		 mov	 ecx, edx
  00085	c1 e1 04	 shl	 ecx, 4
  00088	2b ca		 sub	 ecx, edx
  0008a	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  0008d	8b 5d e8	 mov	 ebx, DWORD PTR _FIRST_TIME$1$[ebp]
  00090	3b d9		 cmp	 ebx, ecx
  00092	75 09		 jne	 SHORT $LN8@CheckSync

; 118  : 		{
; 119  : 			if( NOW_TIME < CHECK_TIME )

  00094	3b f9		 cmp	 edi, ecx
  00096	72 20		 jb	 SHORT $LN270@CheckSync

; 122  : 				break;
; 123  : 			}
; 124  : 			continue;

  00098	8b 4d f4	 mov	 ecx, DWORD PTR _pFirstTime$1$[ebp]
  0009b	eb 13		 jmp	 SHORT $LN2@CheckSync
$LN8@CheckSync:

; 125  : 		}
; 126  : 
; 127  : 		if( NOW_TIME >= FIRST_TIME &&

  0009d	3b fb		 cmp	 edi, ebx
  0009f	72 04		 jb	 SHORT $LN10@CheckSync
  000a1	3b f9		 cmp	 edi, ecx
  000a3	72 21		 jb	 SHORT $LN278@CheckSync
$LN10@CheckSync:

; 128  : 			NOW_TIME < CHECK_TIME )
; 129  : 		{
; 130  : 			break;
; 131  : 		}
; 132  : 
; 133  : 		pFirstTime = *Itor_;

  000a5	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  000a8	8b ca		 mov	 ecx, edx
  000aa	89 4d f4	 mov	 DWORD PTR _pFirstTime$1$[ebp], ecx
  000ad	89 5d f0	 mov	 DWORD PTR _pFirstTime$2$[ebp], ebx
$LN2@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  000b0	8b 00		 mov	 eax, DWORD PTR [eax]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000b2	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 110  : 	for( Itor_ = m_IllusionStartTime.begin() ; Itor_ != m_IllusionStartTime.end(); ++Itor_ )

  000b4	75 af		 jne	 SHORT $LL4@CheckSync
  000b6	eb 0e		 jmp	 SHORT $LN278@CheckSync
$LN270@CheckSync:

; 120  : 			{
; 121  : 				pTime = *Itor_;

  000b8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000bb	eb 06		 jmp	 SHORT $LN280@CheckSync
$LN279@CheckSync:
  000bd	8b 4d e4	 mov	 ecx, DWORD PTR _pTime$[ebp+4]
  000c0	8b 55 e0	 mov	 edx, DWORD PTR _pTime$[ebp]
$LN280@CheckSync:
  000c3	89 4d fc	 mov	 DWORD PTR _pTime$2$[ebp], ecx
$LN278@CheckSync:

; 134  : 	}
; 135  : 
; 136  : 	int CHECK_COUNT = 2;

  000c6	bb 02 00 00 00	 mov	 ebx, 2
  000cb	0f 1f 44 00 00	 npad	 5
$LL5@CheckSync:

; 137  : 
; 138  : 	while( CHECK_COUNT-- )

  000d0	4b		 dec	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000d1	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 140  : 		if( Itor_ == m_IllusionStartTime.end() )

  000d3	75 0b		 jne	 SHORT $LN11@CheckSync

; 141  : 		{
; 142  : 			Itor_ = m_IllusionStartTime.begin();

  000d5	8b 06		 mov	 eax, DWORD PTR [esi]

; 143  : 			pTime = *Itor_;

  000d7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000da	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000dd	89 4d fc	 mov	 DWORD PTR _pTime$2$[ebp], ecx
$LN11@CheckSync:

; 144  : 		}
; 145  : 
; 146  : 		CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;

  000e0	8b 75 fc	 mov	 esi, DWORD PTR _pTime$2$[ebp]
  000e3	8b ca		 mov	 ecx, edx
  000e5	c1 e1 04	 shl	 ecx, 4
  000e8	2b ca		 sub	 ecx, edx
  000ea	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]

; 147  : 
; 148  : 		if( today->tm_hour <= pTime.iHour )

  000ed	8b 75 ec	 mov	 esi, DWORD PTR _today$1$[ebp]

; 149  : 		{
; 150  : 			this->m_iRemainMinute = CHECK_TIME - NOW_TIME;

  000f0	2b cf		 sub	 ecx, edi
  000f2	39 56 08	 cmp	 DWORD PTR [esi+8], edx
  000f5	8b 75 f8	 mov	 esi, DWORD PTR _this$1$[ebp]
  000f8	7e 06		 jle	 SHORT $LN281@CheckSync

; 151  : 		}
; 152  : 		else
; 153  : 		{
; 154  : 			this->m_iRemainMinute = 1440 - NOW_TIME + CHECK_TIME;

  000fa	81 c1 a0 05 00
	00		 add	 ecx, 1440		; 000005a0H
$LN281@CheckSync:
  00100	89 8e 98 03 00
	00		 mov	 DWORD PTR [esi+920], ecx

; 155  : 		}
; 156  : 
; 157  : 		if( this->m_iRemainMinute <= m_iIT_TIME_MIN_OPEN )

  00106	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00109	8b 89 98 03 00
	00		 mov	 ecx, DWORD PTR [ecx+920]
  0010f	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?m_iIT_TIME_MIN_OPEN@@3HA ; m_iIT_TIME_MIN_OPEN
  00115	7f 19		 jg	 SHORT $LN14@CheckSync
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00117	8b 00		 mov	 eax, DWORD PTR [eax]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00119	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
  0011f	3b c6		 cmp	 eax, esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp

; 160  : 			if( Itor_ != m_IllusionStartTime.end() )

  00121	74 09		 je	 SHORT $LN16@CheckSync

; 161  : 			{
; 162  : 				pTime = *Itor_;

  00123	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00126	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00129	89 4d fc	 mov	 DWORD PTR _pTime$2$[ebp], ecx
$LN16@CheckSync:

; 137  : 
; 138  : 	while( CHECK_COUNT-- )

  0012c	85 db		 test	 ebx, ebx
  0012e	75 a0		 jne	 SHORT $LL5@CheckSync
$LN14@CheckSync:

; 163  : 			}
; 164  : 		}
; 165  : 		else
; 166  : 		{
; 167  : 			break;
; 168  : 		}
; 169  : 	}
; 170  : 
; 171  : 	DWORD dwTICK_COUNT = GetTickCount();

  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 172  : 	dwTICK_COUNT3 = dwTICK_COUNT + ( 60000 - today->tm_sec * 1000 );

  00136	8b 55 ec	 mov	 edx, DWORD PTR _today$1$[ebp]
  00139	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0013e	2b 0a		 sub	 ecx, DWORD PTR [edx]
  00140	69 c9 e8 03 00
	00		 imul	 ecx, ecx, 1000
  00146	03 c8		 add	 ecx, eax
  00148	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 173  : 	LogAddTD("[Illusion Temple] (%d) Sync Open Time. [%d]min remain",Temple+1,m_iRemainMinute);

  0014b	ff b0 98 03 00
	00		 push	 DWORD PTR [eax+920]
  00151	89 88 a4 03 00
	00		 mov	 DWORD PTR [eax+932], ecx
  00157	0f b6 80 2c 02
	00 00		 movzx	 eax, BYTE PTR [eax+556]
  0015e	40		 inc	 eax
  0015f	50		 push	 eax
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NJOPLNIL@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5Sync?5Open@
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016e	5f		 pop	 edi
  0016f	5e		 pop	 esi
  00170	5b		 pop	 ebx

; 174  : }

  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
?CheckSync@CIllusionTempleProcess@@QAEXXZ ENDP		; CIllusionTempleProcess::CheckSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?UserInit@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iUser$ = 8						; size = 4
?UserInit@CIllusionTempleProcess@@QAEXH@Z PROC		; CIllusionTempleProcess::UserInit, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 63   : 	if( OBJMAX_RANGE( iUser ) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iUser$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 68		 js	 SHORT $LN6@UserInit
  0000a	33 c0		 xor	 eax, eax
  0000c	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 59		 je	 SHORT $LN6@UserInit

; 66   : 		return;
; 67   : 	}
; 68   : 
; 69   : 	UserMap[iUser] = 0;

  00019	c7 84 91 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx*4+512], 0

; 70   : 	this->m_PlayerData[iUser].m_Skill1Time = 0;

  00024	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00027	03 c0		 add	 eax, eax
  00029	c7 44 c1 28 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+40], 0

; 71   : 	this->m_PlayerData[iUser].m_Skill2Time = 0;

  00031	c7 44 c1 2c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+44], 0

; 72   : 	this->m_PlayerData[iUser].m_Index = -1;

  00039	c7 44 c1 20 ff
	ff ff ff	 mov	 DWORD PTR [ecx+eax*8+32], -1

; 73   : 	this->m_PlayerData[iUser].m_Team = -1;

  00041	c6 44 c1 24 ff	 mov	 BYTE PTR [ecx+eax*8+36], 255 ; 000000ffH

; 74   : 	this->m_PlayerData[iUser].m_PlayerKillCount = 0;

  00046	c7 44 c1 30 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+48], 0

; 75   : 	this->m_PlayerData[iUser].m_MonsterKillCount = 0;
; 76   : 	this->m_PlayerData[iUser].m_RelicSuccess = 0;
; 77   : 	this->m_PlayerData[iUser].m_UseSkillCnt = 0;
; 78   : 	this->m_PlayerData[iUser].m_RewardExp = 0;

  0004e	c7 44 c1 38 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+56], 0
  00056	c7 44 c1 3c 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+60], 0

; 79   : 	this->m_PlayerData[iUser].m_RankPoint = 0;

  0005e	c7 44 c1 40 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+64], 0

; 80   : 	this->m_PlayerData[iUser].m_bReward = 0;

  00066	c7 44 c1 44 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+68], 0

; 81   : }

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
$LN6@UserInit:

; 64   : 	{
; 65   : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00072	6a 41		 push	 65			; 00000041H
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@DMGNFDO@IllusionTempleProcess?4cpp?$AA@
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 81   : }

  00087	5d		 pop	 ebp
  00088	c2 04 00	 ret	 4
?UserInit@CIllusionTempleProcess@@QAEXH@Z ENDP		; CIllusionTempleProcess::UserInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?Reset@CIllusionTempleProcess@@QAEXH@Z
_TEXT	SEGMENT
_iTemple$ = 8						; size = 4
?Reset@CIllusionTempleProcess@@QAEXH@Z PROC		; CIllusionTempleProcess::Reset, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 19   : 	if( this->Temple == 0xFF )

  00006	80 be 2c 02 00
	00 ff		 cmp	 BYTE PTR [esi+556], 255	; 000000ffH
  0000d	75 09		 jne	 SHORT $LN8@Reset

; 20   : 	{
; 21   : 		this->Temple = iTemple;

  0000f	8a 45 08	 mov	 al, BYTE PTR _iTemple$[ebp]
  00012	88 86 2c 02 00
	00		 mov	 BYTE PTR [esi+556], al
$LN8@Reset:

; 22   : 	}
; 23   : 
; 24   : 	int i;
; 25   : 	for(i = 0; i < IT_MAXPLAYER; i++)

  00018	57		 push	 edi
  00019	33 ff		 xor	 edi, edi
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@Reset:

; 26   : 	{
; 27   : 		UserInit(i);

  00020	57		 push	 edi
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?UserInit@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::UserInit
  00028	47		 inc	 edi
  00029	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  0002c	7c f2		 jl	 SHORT $LL4@Reset

; 28   : 	}
; 29   : 
; 30   : 	dwTICK_COUNT2 = GetTickCount();

  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 31   : 	m_RELIC_PLAYER = -1;
; 32   : 	m_RELIC_POS = -1;
; 33   : 	m_RELIC_TEAM = -1;
; 34   : 	m_ALLIED_TEAM_COUNT = 0;
; 35   : 	m_ILLUSION_TEAM_COUNT = 0;
; 36   : 	m_ALLIED_TEAM_PTS = 0;
; 37   : 	m_ILLUSION_TEAM_PTS = 0;
; 38   : 	iNPC_TICK_COUNT = -1;
; 39   : 	m_WinTeam = -1;
; 40   : 	m_OpenState = 0;
; 41   : 	dwTICK_COUNT = -1;
; 42   : 	m_IT_END_MOVE = 0;
; 43   : 	m_IT_MSG_BEFORE_ENTER = 0;
; 44   : 	m_IT_MSG_BEFORE_START = 0;
; 45   : 	iUNK_SECONDS = 0;
; 46   : 
; 47   : 	UserResetPoints();

  00034	8b ce		 mov	 ecx, esi
  00036	89 86 a0 03 00
	00		 mov	 DWORD PTR [esi+928], eax
  0003c	c7 86 b8 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+952], -1
  00046	66 c7 86 bc 03
	00 00 ff ff	 mov	 WORD PTR [esi+956], 65535 ; 0000ffffH
  0004f	c7 86 c8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+968], 0
  00059	c7 86 cc 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+972], 0
  00063	66 c7 86 d0 03
	00 00 00 00	 mov	 WORD PTR [esi+976], 0
  0006c	c7 86 94 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+916], -1
  00076	c6 86 d2 03 00
	00 ff		 mov	 BYTE PTR [esi+978], 255	; 000000ffH
  0007d	c7 86 90 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+912], 0
  00087	c7 86 9c 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+924], -1
  00091	c7 86 ac 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+940], 0
  0009b	c7 86 b0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+944], 0
  000a5	c7 86 b4 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+948], 0
  000af	c7 86 a8 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+936], 0
  000b9	e8 00 00 00 00	 call	 ?UserResetPoints@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::UserResetPoints

; 48   : 	CheckSync();

  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?CheckSync@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CheckSync

; 49   : 
; 50   : 	m_bIT_CHECKSYNC = FALSE;

  000c5	c7 86 e4 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+996], 0
  000cf	8d 86 da 03 00
	00		 lea	 eax, DWORD PTR [esi+986]
  000d5	b9 06 00 00 00	 mov	 ecx, 6
  000da	5f		 pop	 edi
  000db	0f 1f 44 00 00	 npad	 5
$LL7@Reset:

; 51   : 
; 52   : 	for(i = 0; i < IT_TEAMMAXPLAYER; i++)
; 53   : 	{
; 54   : 		m_ALLIED_TEAM[i] = 0;

  000e0	c6 40 f9 00	 mov	 BYTE PTR [eax-7], 0
  000e4	8d 40 01	 lea	 eax, DWORD PTR [eax+1]

; 55   : 		m_ILLUSION_TEAM[i] = 0;

  000e7	c6 40 ff 00	 mov	 BYTE PTR [eax-1], 0
  000eb	83 e9 01	 sub	 ecx, 1
  000ee	75 f0		 jne	 SHORT $LL7@Reset

; 56   : 	}
; 57   : 
; 58   : 	m_IT_REWARD_SENT = 0;

  000f0	89 8e e8 03 00
	00		 mov	 DWORD PTR [esi+1000], ecx
  000f6	5e		 pop	 esi

; 59   : }

  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
?Reset@CIllusionTempleProcess@@QAEXH@Z ENDP		; CIllusionTempleProcess::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT

; 508  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 512  :             #pragma warning(pop)
; 513  :         }

  00003	5d		 pop	 ebp

; 509  :             #pragma warning(push)
; 510  :             #pragma warning(disable: 4996)
; 511  :             return _localtime64(_Time);

  00004	e9 00 00 00 00	 jmp	 __localtime64
_localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 2689 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
