; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\Crywolf.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_bDBCrywolfOccupied@@3HA			; g_bDBCrywolfOccupied
_BSS	SEGMENT
?g_bDBCrywolfOccupied@@3HA DD 01H DUP (?)		; g_bDBCrywolfOccupied
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	??0CTime@ATL@@QAE@HHHHHHH@Z			; ATL::CTime::CTime
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CCrywolfStateTimeInfo@@QAE@XZ		; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
PUBLIC	?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckScheduleTime
PUBLIC	??0CCrywolf@@QAE@XZ				; CCrywolf::CCrywolf
PUBLIC	??1CCrywolf@@UAE@XZ				; CCrywolf::~CCrywolf
PUBLIC	?LoadData@CCrywolf@@QAEHPAD@Z			; CCrywolf::LoadData
PUBLIC	?Init@CCrywolf@@QAEXXZ				; CCrywolf::Init
PUBLIC	?Run@CCrywolf@@QAEXXZ				; CCrywolf::Run
PUBLIC	?DelAllData@CCrywolf@@QAEXXZ			; CCrywolf::DelAllData
PUBLIC	?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z	; CCrywolf::LoadCrywolfMapAttr
PUBLIC	?SetState@CCrywolf@@QAEXH@Z			; CCrywolf::SetState
PUBLIC	?SetNextState@CCrywolf@@QAEXH@Z			; CCrywolf::SetNextState
PUBLIC	?CheckStateTimeSync@CCrywolf@@QAEHXZ		; CCrywolf::CheckStateTimeSync
PUBLIC	?SetState_NONE@CCrywolf@@QAEXXZ			; CCrywolf::SetState_NONE
PUBLIC	?SetState_NOTIFY_1@CCrywolf@@QAEXXZ		; CCrywolf::SetState_NOTIFY_1
PUBLIC	?SetState_NOTIFY_2@CCrywolf@@QAEXXZ		; CCrywolf::SetState_NOTIFY_2
PUBLIC	?SetState_READY@CCrywolf@@QAEXXZ		; CCrywolf::SetState_READY
PUBLIC	?SetState_START@CCrywolf@@QAEXXZ		; CCrywolf::SetState_START
PUBLIC	?SetState_END@CCrywolf@@QAEXXZ			; CCrywolf::SetState_END
PUBLIC	?SetState_ENDCYCLE@CCrywolf@@QAEXXZ		; CCrywolf::SetState_ENDCYCLE
PUBLIC	?ProcState_NONE@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NONE
PUBLIC	?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NOTIFY_1
PUBLIC	?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_NOTIFY_2
PUBLIC	?ProcState_READY@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_READY
PUBLIC	?ProcState_START@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_START
PUBLIC	?ProcState_END@CCrywolf@@QAEXXZ			; CCrywolf::ProcState_END
PUBLIC	?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ		; CCrywolf::ProcState_ENDCYCLE
PUBLIC	?CrywolfNpcAct@CCrywolf@@QAEXH@Z		; CCrywolf::CrywolfNpcAct
PUBLIC	?CrywolfMonsterAct@CCrywolf@@QAEXH@Z		; CCrywolf::CrywolfMonsterAct
PUBLIC	?CrywolfSecondAct@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfSecondAct
PUBLIC	?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfCurrentState
PUBLIC	?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo
PUBLIC	?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfBossMonsterInfo
PUBLIC	?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfStateLeftTime
PUBLIC	?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z ; CCrywolf::NotifyCrywolfStageEffectOnOff
PUBLIC	?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ	; CCrywolf::NotifyCrywolfPersonalRank
PUBLIC	?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ		; CCrywolf::NotifyCrywolfHeroList
PUBLIC	?ChangeAI@CCrywolf@@QAEXH@Z			; CCrywolf::ChangeAI
PUBLIC	?TurnUpBoss@CCrywolf@@QAEXXZ			; CCrywolf::TurnUpBoss
PUBLIC	?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfCommonNPC
PUBLIC	?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z		; CCrywolf::SetCrywolfMapAttr
PUBLIC	?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z ; CCrywolf::SetCrywolfAllCommonMonsterState
PUBLIC	?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ	; CCrywolf::RemoveCrywolfCommonMonster
PUBLIC	?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ	; CCrywolf::CreateCrywolfCommonMonster
PUBLIC	?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z	; CCrywolf::CrywolfMonsterDieProc
PUBLIC	?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z	; CCrywolf::MakeRewardForAltarElf
PUBLIC	?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z	; CCrywolf::MakeRewardForHeroListTop5
PUBLIC	?OperateGmCommand@CCrywolf@@QAEXHH@Z		; CCrywolf::OperateGmCommand
PUBLIC	?CrywolfServerGroupSync@CCrywolf@@QAEXXZ	; CCrywolf::CrywolfServerGroupSync
PUBLIC	?CrywolfInfoDBSave@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfInfoDBSave
PUBLIC	?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ		; CCrywolf::CrywolfInfoDBLoad
PUBLIC	?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z		; CCrywolf::ApplyCrywolfDBInfo
PUBLIC	?CalcGettingScore@CCrywolf@@QAEHHHH@Z		; CCrywolf::CalcGettingScore
PUBLIC	?CalcGettingRank@CCrywolf@@QAEHH@Z		; CCrywolf::CalcGettingRank
PUBLIC	?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z	; CCrywolf::CalcGettingRewardExp
PUBLIC	?GiveRewardExp@CCrywolf@@QAEXHH@Z		; CCrywolf::GiveRewardExp
PUBLIC	?ResetAllUserMVPScore@CCrywolf@@QAEXXZ		; CCrywolf::ResetAllUserMVPScore
PUBLIC	??_GCCrywolf@@UAEPAXI@Z				; CCrywolf::`scalar deleting destructor'
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear
PUBLIC	?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
PUBLIC	??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator--
PUBLIC	??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_nohint<OBJECTSTRUCT *,std::_Nil>
PUBLIC	??$_Insert_at@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@_NPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_at<OBJECTSTRUCT *,std::_Nil>
PUBLIC	??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CCrywolf@@6B@				; CCrywolf::`vftable'
PUBLIC	?g_Crywolf@@3VCCrywolf@@A			; g_Crywolf
PUBLIC	??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@ ; `string'
PUBLIC	??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ ; `string'
PUBLIC	??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ ; `string'
PUBLIC	??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@ ; `string'
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
PUBLIC	??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@ ; `string'
PUBLIC	??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@ ; `string'
PUBLIC	??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@ ; `string'
PUBLIC	??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@ ; `string'
PUBLIC	??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ ; `string'
PUBLIC	??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ ; `string'
PUBLIC	??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@ ; `string'
PUBLIC	??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@ ; `string'
PUBLIC	??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@ ; `string'
PUBLIC	??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@ ; `string'
PUBLIC	??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@ ; `string'
PUBLIC	??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@ ; `string'
PUBLIC	??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@ ; `string'
PUBLIC	??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@ ; `string'
PUBLIC	??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@ ; `string'
PUBLIC	??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@ ; `string'
PUBLIC	??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@ ; `string'
PUBLIC	??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@ ; `string'
PUBLIC	??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@ ; `string'
PUBLIC	??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ ; `string'
PUBLIC	??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@ ; `string'
PUBLIC	??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@ ; `string'
PUBLIC	??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@ ; `string'
PUBLIC	??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@ ; `string'
PUBLIC	??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@ ; `string'
PUBLIC	??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CCrywolf@@6B@				; CCrywolf::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCrywolf@@@8				; CCrywolf `RTTI Type Descriptor'
PUBLIC	??_R3CCrywolf@@8				; CCrywolf::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCrywolf@@8				; CCrywolf::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCrywolf@@8			; CCrywolf::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@42c80000
PUBLIC	__xmm@ffffffffffffffffffffffffffffffff
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	__localtime64_s:PROC
EXTRN	__mktime64:PROC
EXTRN	__time64:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCSendExp@@YAXHH_JHH@Z:PROC			; GCSendExp
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	?LoadMapAttr@MapClass@@QAEXPADH@Z:PROC		; MapClass::LoadMapAttr
EXTRN	??0MapClass@@QAE@XZ:PROC			; MapClass::MapClass
EXTRN	??1MapClass@@UAE@XZ:PROC			; MapClass::~MapClass
EXTRN	??_ECCrywolf@@UAEPAXI@Z:PROC			; CCrywolf::`vector deleting destructor'
EXTRN	?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z:PROC	; CCrywolfAltar::CrywolfAltarAct
EXTRN	?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ:PROC ; CCrywolfAltar::SetAllAltarObjectIndex
EXTRN	?GetAltarState@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarState
EXTRN	?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z:PROC ; CCrywolfAltar::GetAltarRemainContractCount
EXTRN	?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z:PROC	; CCrywolfAltar::GetAltarUserIndex
EXTRN	?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ:PROC ; CCrywolfAltar::GetContractedAltarCount
EXTRN	?ResetAllAltar@CCrywolfAltar@@QAEXXZ:PROC	; CCrywolfAltar::ResetAllAltar
EXTRN	?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z:PROC ; CCrywolfAltar::SetAllAltarViewState
EXTRN	?CrywolfStatueAct@CCrywolfStatue@@QAEXH@Z:PROC	; CCrywolfStatue::CrywolfStatueAct
EXTRN	??0CCrywolfUtil@@QAE@XZ:PROC			; CCrywolfUtil::CCrywolfUtil
EXTRN	??1CCrywolfUtil@@UAE@XZ:PROC			; CCrywolfUtil::~CCrywolfUtil
EXTRN	?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ:PROC ; CCrywolfUtil::SendMapServerGroupMsg
EXTRN	?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z:PROC ; CCrywolfUtil::SendCrywolfUserAnyData
EXTRN	?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ:PROC ; CCrywolfUtil::SendCrywolfUserAnyMsg
EXTRN	?CrywolfMVPLevelUp@CCrywolfUtil@@QAEHHH@Z:PROC	; CCrywolfUtil::CrywolfMVPLevelUp
EXTRN	?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::CheckEnableCrywolf
EXTRN	?Init@TMonsterAIGroup@@SAXH@Z:PROC		; TMonsterAIGroup::Init
EXTRN	?DelGroupInstance@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::DelGroupInstance
EXTRN	?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z:PROC	; TMonsterAIGroup::ChangeAIOrder
EXTRN	?FindGroupLeader@TMonsterAIGroup@@SAHH@Z:PROC	; TMonsterAIGroup::FindGroupLeader
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; CheckItemOptForGetExpEx
EXTRN	?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterExperience::IsEnabled
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?GDReqCrywolfSync@@YAXHHH@Z:PROC		; GDReqCrywolfSync
EXTRN	?GDReqCrywolfInfoLoad@@YAXH@Z:PROC		; GDReqCrywolfInfoLoad
EXTRN	?GDReqCrywolfInfoSave@@YAXHHH@Z:PROC		; GDReqCrywolfInfoSave
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A:BYTE	; g_CrywolfNPC_Altar
EXTRN	?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A:BYTE	; g_CrywolfNPC_Statue
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?g_MasterExp@@3VCMasterExperience@@A:BYTE	; g_MasterExp
EXTRN	?g_MapServerManager@@3VCMapServerManager@@A:BYTE ; g_MapServerManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_Crywolf@@3VCCrywolf@@A DB 0fc0c4H DUP (?)		; g_Crywolf
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
?UTIL@@3VCCrywolfUtil@@A DD 01H DUP (?)			; UTIL
_BSS	ENDS
;	COMDAT ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA
_BSS	SEGMENT
?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfStateLeftTime'::`2'::dwTickCount
_BSS	ENDS
;	COMDAT ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA
_BSS	SEGMENT
?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfStatueAndAltarInfo'::`2'::dwTickCount
_BSS	ENDS
;	COMDAT ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA
_BSS	SEGMENT
?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA DD 01H DUP (?) ; `CCrywolf::NotifyCrywolfBossMonsterInfo'::`2'::dwTickCount
_BSS	ENDS
CRT$XCU	SEGMENT
?UTIL$initializer$@@3P6AXXZA DD FLAT:??__EUTIL@@YAXXZ	; UTIL$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@ffffffffffffffffffffffffffffffff
CONST	SEGMENT
__xmm@ffffffffffffffffffffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CCrywolf@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCrywolf@@8 DD FLAT:??_R0?AVCCrywolf@@@8	; CCrywolf::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_R2CCrywolf@@8
rdata$r	SEGMENT
??_R2CCrywolf@@8 DD FLAT:??_R1A@?0A@EA@CCrywolf@@8	; CCrywolf::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCrywolf@@8
rdata$r	SEGMENT
??_R3CCrywolf@@8 DD 00H					; CCrywolf::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCrywolf@@@8
data$r	SEGMENT
??_R0?AVCCrywolf@@@8 DD FLAT:??_7type_info@@6B@		; CCrywolf `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCrywolf@@', 00H
data$r	ENDS
;	COMDAT ??_R4CCrywolf@@6B@
rdata$r	SEGMENT
??_R4CCrywolf@@6B@ DD 00H				; CCrywolf::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCrywolf@@@8
	DD	FLAT:??_R3CCrywolf@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@
CONST	SEGMENT
??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@ DB '['
	DB	' Crywolf ][GiveRewardExp] LevelUp Error [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@
CONST	SEGMENT
??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@ DB '['
	DB	' Crywolf ][MVP] Plus MVP Score : %d, Accumulated : %d [%s][%s'
	DB	']', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@
CONST	SEGMENT
??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@ DB '['
	DB	' Crywolf ][Reward] [Hero List Top 5] [%s][%s] Success Reward '
	DB	'- Gem Of Bless', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@
CONST	SEGMENT
??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@ DB '['
	DB	' Crywolf ][Reward] [Altar Elf] [%s][%s] Success Reward - Gem '
	DB	'Of Bless', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [DarkElf Dead] by [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [Balgars Dead] by Unknown User', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
CONST	SEGMENT
??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@ DB '['
	DB	' Crywolf ][MVP] [Balgars Dead] by [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@
CONST	SEGMENT
??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@ DB '['
	DB	' Crywolf ][ ApplyDBInfo] OccupationState : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@ DB '['
	DB	' Crywolf ][Use GM Command] [%s][%s] Command : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
CONST	SEGMENT
??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@ DB '['
	DB	' Crywolf ][Hero List] [%s][%s] Score(%d) Ranking(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@
CONST	SEGMENT
??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@ DB '['
	DB	' Crywolf ][Personal Rank & Exp.] [%s][%s] Score(%d) Rank(%d) '
	DB	'Exp(%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@
CONST	SEGMENT
??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@ DB '['
	DB	' Crywolf ][Boss Monster Info] Balgars HP:%d, DarkElf:%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@
CONST	SEGMENT
??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@ DB '['
	DB	' Crywolf ][Altar Info] Altar(%d) Contractor: [%s][%s] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@
CONST	SEGMENT
??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@ DB '['
	DB	' Crywolf ][Statue Info] Statue HP : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@
CONST	SEGMENT
??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@ DB '['
	DB	' Crywolf ] War LeftTime - (%02d:%02d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@
CONST	SEGMENT
??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@ DB '[ Cr'
	DB	'ywolf ] SetState - StateInfo : Occupation/%d, State/%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@
CONST	SEGMENT
??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@ DB '['
	DB	' Crywolf ][MVP] Start Monster Rush !!!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@
CONST	SEGMENT
??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@ DB '['
	DB	' Crywolf ][MVP] Barlgars TurnUp !!!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@
CONST	SEGMENT
??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@ DB '['
	DB	' Crywolf ] State (%d) -> ENDCYCLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@
CONST	SEGMENT
??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@ DB '['
	DB	' Crywolf ][MVP] SUCCESS.......!!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@
CONST	SEGMENT
??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@ DB '['
	DB	' Crywolf ][MVP] FAIL.......!!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@
CONST	SEGMENT
??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> END', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@
CONST	SEGMENT
??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> START', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@
CONST	SEGMENT
??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> READY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
CONST	SEGMENT
??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ DB '['
	DB	' Crywolf ] State (%d) -> NOTIFY_2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
CONST	SEGMENT
??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@ DB '['
	DB	' Crywolf ] State (%d) -> NOTIFY_1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@
CONST	SEGMENT
??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@ DB '['
	DB	' Crywolf ] State (%d) -> NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@
CONST	SEGMENT
??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@ DB '[ Crywolf '
	DB	'] Start Crywolf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@
CONST	SEGMENT
??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@ DB '[ '
	DB	'Crywolf ] Fail - Chang Map Attribute (State:%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@
CONST	SEGMENT
??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@ DB '[Cry'
	DB	'wolf Main Job] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0K@8
data$r	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
data$r	ENDS
;	COMDAT ??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@
CONST	SEGMENT
??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@ DB '['
	DB	'Crywolf Main Job] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
CONST	SEGMENT
??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ DB '[Cry'
	DB	'wolf Main Job] - Invalid Monster Boss Group Number (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
CONST	SEGMENT
??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@ DB '[Cry'
	DB	'wolf Main Job] - Invalid Monster Group Number (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@
CONST	SEGMENT
??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@ DB '[Cr'
	DB	'ywolf Main Job] - Excced MAX StartTime (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@
CONST	SEGMENT
??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@ DB '[C'
	DB	'rywolf Main Job] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@
CONST	SEGMENT
??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@ DB '[Cry'
	DB	'wolf Main Job] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CCrywolf@@6B@
CONST	SEGMENT
??_7CCrywolf@@6B@ DD FLAT:??_R4CCrywolf@@6B@		; CCrywolf::`vftable'
	DD	FLAT:??_ECCrywolf@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z$42 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z$0
__unwindtable$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z$42
__ehfuncinfo$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$0
__ehfuncinfo$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@CCrywolf@@QAEHPAD@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LoadData@CCrywolf@@QAEHPAD@Z$0
__unwindtable$?LoadData@CCrywolf@@QAEHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@CCrywolf@@QAEHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@CCrywolf@@QAEHPAD@Z$2
__ehfuncinfo$?LoadData@CCrywolf@@QAEHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@CCrywolf@@QAEHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@CCrywolf@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CCrywolf@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?g_Crywolf$initializer$@@3P6AXXZA DD FLAT:??__Eg_Crywolf@@YAXXZ ; g_Crywolf$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@PAU1@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUOBJECTSTRUCT@@PAU1@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU2@@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAUOBJECTSTRUCT@@PAU1@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::construct<OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@PAU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAUOBJECTSTRUCT@@$$QAPAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAUOBJECTSTRUCT@@PAU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAUOBJECTSTRUCT@@$$QAPAU3@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAUOBJECTSTRUCT@@PAU1@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAUOBJECTSTRUCT@@$$QAPAU3@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAUOBJECTSTRUCT@@PAU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAUOBJECTSTRUCT@@PAU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<OBJECTSTRUCT *,OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAUOBJECTSTRUCT@@PAU1@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@$$QAPAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<OBJECTSTRUCT *,OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00003	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode0

; 602  : 		return ((reference)_Pnode->_Myval);

  00008	8d 50 10	 lea	 edx, DWORD PTR [eax+16]

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0000b	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 d2		 test	 edx, edx
  00013	74 07		 je	 SHORT $LN50@Buynode
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
  00018	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001a	89 0a		 mov	 DWORD PTR [edx], ecx
$LN50@Buynode:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 903  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::construct<std::_Tree_node<OBJECTSTRUCT *,void *> *,std::_Tree_node<OBJECTSTRUCT *,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::construct<std::_Tree_node<OBJECTSTRUCT *,void *> *,std::_Tree_node<OBJECTSTRUCT *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAUOBJECTSTRUCT@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAUOBJECTSTRUCT@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::destroy<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAUOBJECTSTRUCT@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::destroy<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0PAUOBJECTSTRUCT@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAUOBJECTSTRUCT@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> ><OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0PAUOBJECTSTRUCT@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> ><OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@PAUOBJECTSTRUCT@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@PAUOBJECTSTRUCT@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > ><std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@PAUOBJECTSTRUCT@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > ><std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::destroy<std::_Tree_node<OBJECTSTRUCT *,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::destroy<std::_Tree_node<OBJECTSTRUCT *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@U_Nil@1@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val$ = 12						; size = 4
??$_Buynode_if_nil@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@U_Nil@1@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode_if_nil<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 1663 : 		{	// node doesn't exist, make it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));

  00003	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>

; 1665 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 08 00	 ret	 8
??$_Buynode_if_nil@PAUOBJECTSTRUCT@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@U_Nil@1@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode_if_nil<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<std::_Tree_node<OBJECTSTRUCT *,void *> *,std::_Tree_node<OBJECTSTRUCT *,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<std::_Tree_node<OBJECTSTRUCT *,void *> *,std::_Tree_node<OBJECTSTRUCT *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<OBJECTSTRUCT *,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<OBJECTSTRUCT *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAUOBJECTSTRUCT@@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAUOBJECTSTRUCT@@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAUOBJECTSTRUCT@@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<OBJECTSTRUCT *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAUOBJECTSTRUCT@@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAUOBJECTSTRUCT@@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<OBJECTSTRUCT *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@PAUOBJECTSTRUCT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@PAUOBJECTSTRUCT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1><std::allocator<OBJECTSTRUCT *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@PAUOBJECTSTRUCT@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1><std::allocator<OBJECTSTRUCT *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAABV?$allocator@PAUOBJECTSTRUCT@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAABV?$allocator@PAUOBJECTSTRUCT@@@0@ABV10@@Z PROC ; std::forward<std::allocator<OBJECTSTRUCT *> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@YAABV?$allocator@PAUOBJECTSTRUCT@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<OBJECTSTRUCT *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABVCCrywolfScoreSort@@@std@@YAABVCCrywolfScoreSort@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVCCrywolfScoreSort@@@std@@YAABVCCrywolfScoreSort@@ABV1@@Z PROC ; std::forward<CCrywolfScoreSort const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVCCrywolfScoreSort@@@std@@YAABVCCrywolfScoreSort@@ABV1@@Z ENDP ; std::forward<CCrywolfScoreSort const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<std::_Tree_node<OBJECTSTRUCT *,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@1@PAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<std::_Tree_node<OBJECTSTRUCT *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_Tree_node<OBJECTSTRUCT *,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_Tree_node<OBJECTSTRUCT *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool>::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool><std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@_NPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 1
??$_Insert_at@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@_NPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_at<OBJECTSTRUCT *,std::_Nil>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00008	81 7f 04 cb cc
	cc 0c		 cmp	 DWORD PTR [edi+4], 214748363 ; 0ccccccbH
  0000f	0f 83 71 01 00
	00		 jae	 $LN688@Insert_at

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));

  00015	ff 75 14	 push	 DWORD PTR __Val$[ebp]
  00018	e8 00 00 00 00	 call	 ??$_Buynode@PAUOBJECTSTRUCT@@@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@@Z ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode<OBJECTSTRUCT *>

; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();

  0001d	ff 47 04	 inc	 DWORD PTR [edi+4]
  00020	8b d8		 mov	 ebx, eax

; 1865 : 		_Newnode->_Parent = _Wherenode;

  00022	8b 4d 10	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00025	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	3b c8		 cmp	 ecx, eax
  0002c	75 0b		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  0002e	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00031	8b 07		 mov	 eax, DWORD PTR [edi]

; 1870 : 			_Lmost() = _Newnode;

  00033	89 18		 mov	 DWORD PTR [eax], ebx

; 1871 : 			_Rmost() = _Newnode;

  00035	8b 07		 mov	 eax, DWORD PTR [edi]
  00037	eb 1c		 jmp	 SHORT $LN685@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  00039	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003d	74 0c		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  0003f	89 19		 mov	 DWORD PTR [ecx], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00041	8b 07		 mov	 eax, DWORD PTR [edi]

; 1876 : 			if (_Wherenode == _Lmost())

  00043	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00045	75 11		 jne	 SHORT $LN11@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  00047	89 18		 mov	 DWORD PTR [eax], ebx

; 1878 : 			}
; 1879 : 		else

  00049	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  0004b	89 59 08	 mov	 DWORD PTR [ecx+8], ebx

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0004e	8b 07		 mov	 eax, DWORD PTR [edi]

; 1882 : 			if (_Wherenode == _Rmost())

  00050	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00053	75 03		 jne	 SHORT $LN11@Insert_at
$LN685@Insert_at:

; 1883 : 				_Rmost() = _Newnode;

  00055	89 58 08	 mov	 DWORD PTR [eax+8], ebx
$LN11@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00058	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005b	8b f3		 mov	 esi, ebx
  0005d	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00061	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00067	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0006a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0006d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006f	3b c1		 cmp	 eax, ecx
  00071	75 74		 jne	 SHORT $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  00073	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  00076	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0007a	74 71		 je	 SHORT $LN687@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0007c	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0007f	75 0a		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  00081	8b f0		 mov	 esi, eax

; 1906 : 						_Lrotate(_Pnode);

  00083	8b cf		 mov	 ecx, edi
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  0008b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008e	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00092	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00095	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00098	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  0009c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000a2	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000a4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000a9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000ac	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b0	75 03		 jne	 SHORT $LN335@Insert_at

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000b2	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN335@Insert_at:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000b5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000bb	8b 07		 mov	 eax, DWORD PTR [edi]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  000bd	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000c0	75 0b		 jne	 SHORT $LN336@Insert_at

; 2148 : 			_Root() = _Pnode;

  000c2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000c5	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000c8	e9 94 00 00 00	 jmp	 $LN686@Insert_at
$LN336@Insert_at:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000cd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  000d0	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d3	75 0b		 jne	 SHORT $LN338@Insert_at

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000d5	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000d8	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000db	e9 81 00 00 00	 jmp	 $LN686@Insert_at
$LN338@Insert_at:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000e0	89 10		 mov	 DWORD PTR [eax], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000e2	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000e5	eb 7a		 jmp	 SHORT $LN686@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  000e7	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000eb	75 1a		 jne	 SHORT $LN17@Insert_at
$LN687@Insert_at:

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000ed	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  000f1	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000f5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000fb	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1926 : 					}
; 1927 : 				else

  00105	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00107	3b 30		 cmp	 esi, DWORD PTR [eax]
  00109	75 0a		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  0010b	8b f0		 mov	 esi, eax

; 1932 : 						_Rrotate(_Pnode);

  0010d	8b cf		 mov	 ecx, edi
  0010f	56		 push	 esi
  00110	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  00115	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00118	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0011c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0011f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00122	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00126	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00129	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0012c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0012f	8b 02		 mov	 eax, DWORD PTR [edx]
  00131	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00134	8b 02		 mov	 eax, DWORD PTR [edx]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00136	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0013a	75 03		 jne	 SHORT $LN534@Insert_at

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0013c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN534@Insert_at:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0013f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00142	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00145	8b 07		 mov	 eax, DWORD PTR [edi]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00147	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0014a	75 05		 jne	 SHORT $LN535@Insert_at

; 2118 : 			_Root() = _Pnode;

  0014c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0014f	eb 0e		 jmp	 SHORT $LN538@Insert_at
$LN535@Insert_at:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00151	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00154	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00156	75 04		 jne	 SHORT $LN537@Insert_at

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00158	89 10		 mov	 DWORD PTR [eax], edx

; 2121 : 		else

  0015a	eb 03		 jmp	 SHORT $LN538@Insert_at
$LN537@Insert_at:

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0015c	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN538@Insert_at:

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0015f	89 0a		 mov	 DWORD PTR [edx], ecx
$LN686@Insert_at:

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  00161	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00164	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00167	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0016b	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  00171	8b 07		 mov	 eax, DWORD PTR [edi]
  00173	5f		 pop	 edi
  00174	5e		 pop	 esi
  00175	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00178	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

  0017c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017f	89 18		 mov	 DWORD PTR [eax], ebx
  00181	5b		 pop	 ebx

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}

  00182	5d		 pop	 ebp
  00183	c2 14 00	 ret	 20			; 00000014H
$LN688@Insert_at:

; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");

  00186	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0018b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN690@Insert_at:
$LN684@Insert_at:
  00190	cc		 int	 3
??$_Insert_at@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@_NPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_at<OBJECTSTRUCT *,std::_Nil>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<std::_Tree_node<OBJECTSTRUCT *,void *> *,std::_Tree_node<OBJECTSTRUCT *,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::construct<std::_Tree_node<OBJECTSTRUCT *,void *> *,std::_Tree_node<OBJECTSTRUCT *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAUOBJECTSTRUCT@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAUOBJECTSTRUCT@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAUOBJECTSTRUCT@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::addressof<OBJECTSTRUCT *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAUOBJECTSTRUCT@@@std@@YAPAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::addressof<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABVCCrywolfScoreSort@@U_One_then_variadic_args_t@std@@ABV?$allocator@PAUOBJECTSTRUCT@@@2@@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABVCCrywolfScoreSort@@$$QAU21@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABVCCrywolfScoreSort@@U_One_then_variadic_args_t@std@@ABV?$allocator@PAUOBJECTSTRUCT@@@2@@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABVCCrywolfScoreSort@@$$QAU21@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1><CCrywolfScoreSort const &,std::_One_then_variadic_args_t,std::allocator<OBJECTSTRUCT *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABVCCrywolfScoreSort@@U_One_then_variadic_args_t@std@@ABV?$allocator@PAUOBJECTSTRUCT@@@2@@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAE@U_One_then_variadic_args_t@1@ABVCCrywolfScoreSort@@$$QAU21@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1><CCrywolfScoreSort const &,std::_One_then_variadic_args_t,std::allocator<OBJECTSTRUCT *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<std::_Tree_node<OBJECTSTRUCT *,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::destroy<std::_Tree_node<OBJECTSTRUCT *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<OBJECTSTRUCT *,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@YAPAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<OBJECTSTRUCT *,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z
_TEXT	SEGMENT
tv626 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Wherenode$1$ = 12					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 1
??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_nohint<OBJECTSTRUCT *,std::_Nil>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e8	 mov	 DWORD PTR _this$1$[ebp], edi

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b3 01		 mov	 bl, 1
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003b	8b f1		 mov	 esi, ecx

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  0003d	89 4d e4	 mov	 DWORD PTR tv626[ebp], ecx

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00040	88 5d ec	 mov	 BYTE PTR __Addleft$2[ebp], bl
  00043	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00046	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0004a	75 7e		 jne	 SHORT $LN3@Insert_noh
  0004c	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0004f	8a 7d 0c	 mov	 bh, BYTE PTR __Leftish$[ebp]
  00052	8b 30		 mov	 esi, DWORD PTR [eax]
$LL2@Insert_noh:

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  00054	8b 7a 10	 mov	 edi, DWORD PTR [edx+16]
  00057	89 55 0c	 mov	 DWORD PTR __Wherenode$1$[ebp], edx
  0005a	84 ff		 test	 bh, bh
  0005c	74 2b		 je	 SHORT $LN5@Insert_noh
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h

; 21   : 		bool bResult = ( lpObj1->m_iCrywolfMVPScore >= lpObj2->m_iCrywolfMVPScore ) ? TRUE : FALSE;

  0005e	8b 8f 18 24 00
	00		 mov	 ecx, DWORD PTR [edi+9240]
  00064	8b 86 18 24 00
	00		 mov	 eax, DWORD PTR [esi+9240]
  0006a	3b c8		 cmp	 ecx, eax
  0006c	0f 9d c3	 setge	 bl

; 22   : 
; 23   : 		if ( lpObj1->m_iCrywolfMVPScore == lpObj2->m_iCrywolfMVPScore )

  0006f	3b c8		 cmp	 ecx, eax
  00071	75 0f		 jne	 SHORT $LN77@Insert_noh

; 24   : 			bResult = ( lpObj1->Experience < lpObj2->Experience ) ? TRUE : FALSE;

  00073	8b 87 a0 00 00
	00		 mov	 eax, DWORD PTR [edi+160]
  00079	3b 86 a0 00 00
	00		 cmp	 eax, DWORD PTR [esi+160]
  0007f	0f 92 c3	 setb	 bl
$LN77@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  00082	84 db		 test	 bl, bl
  00084	0f 94 c3	 sete	 bl

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  00087	eb 24		 jmp	 SHORT $LN100@Insert_noh
$LN5@Insert_noh:
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h

; 21   : 		bool bResult = ( lpObj1->m_iCrywolfMVPScore >= lpObj2->m_iCrywolfMVPScore ) ? TRUE : FALSE;

  00089	8b 8e 18 24 00
	00		 mov	 ecx, DWORD PTR [esi+9240]
  0008f	8b 87 18 24 00
	00		 mov	 eax, DWORD PTR [edi+9240]
  00095	3b c8		 cmp	 ecx, eax
  00097	0f 9d c3	 setge	 bl

; 22   : 
; 23   : 		if ( lpObj1->m_iCrywolfMVPScore == lpObj2->m_iCrywolfMVPScore )

  0009a	3b c8		 cmp	 ecx, eax
  0009c	75 0f		 jne	 SHORT $LN100@Insert_noh

; 24   : 			bResult = ( lpObj1->Experience < lpObj2->Experience ) ? TRUE : FALSE;

  0009e	8b 86 a0 00 00
	00		 mov	 eax, DWORD PTR [esi+160]
  000a4	3b 87 a0 00 00
	00		 cmp	 eax, DWORD PTR [edi+160]
  000aa	0f 92 c3	 setb	 bl
$LN100@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  000ad	88 5d ec	 mov	 BYTE PTR __Addleft$2[ebp], bl

; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  000b0	84 db		 test	 bl, bl
  000b2	74 04		 je	 SHORT $LN16@Insert_noh
  000b4	8b 12		 mov	 edx, DWORD PTR [edx]
  000b6	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  000b8	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
$LN17@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  000bb	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000bf	74 93		 je	 SHORT $LL2@Insert_noh
  000c1	8b 75 0c	 mov	 esi, DWORD PTR __Wherenode$1$[ebp]
  000c4	8b 4d e4	 mov	 ecx, DWORD PTR tv626[ebp]
  000c7	8b 7d e8	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

  000ca	8b c6		 mov	 eax, esi
  000cc	89 45 0c	 mov	 DWORD PTR __Where$4[ebp], eax

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)

  000cf	84 db		 test	 bl, bl
  000d1	74 42		 je	 SHORT $LN12@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  000d3	3b 31		 cmp	 esi, DWORD PTR [ecx]

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  000d5	75 33		 jne	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  000d7	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000da	8b cf		 mov	 ecx, edi
  000dc	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  000df	56		 push	 esi
  000e0	6a 01		 push	 1
$LN247@Insert_noh:
  000e2	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ??$_Insert_at@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@1@_NPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_at<OBJECTSTRUCT *,std::_Nil>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000eb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ed	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f0	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000f2	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	5b		 pop	 ebx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  0010a	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  0010d	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator--
  00112	8b 45 0c	 mov	 eax, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  00115	8b 7d 10	 mov	 edi, DWORD PTR __Val$[ebp]
  00118	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0011b	8b 3f		 mov	 edi, DWORD PTR [edi]
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h

; 21   : 		bool bResult = ( lpObj1->m_iCrywolfMVPScore >= lpObj2->m_iCrywolfMVPScore ) ? TRUE : FALSE;

  0011d	8b 91 18 24 00
	00		 mov	 edx, DWORD PTR [ecx+9240]
  00123	8b 8f 18 24 00
	00		 mov	 ecx, DWORD PTR [edi+9240]
  00129	3b d1		 cmp	 edx, ecx
  0012b	0f 9d c3	 setge	 bl

; 22   : 
; 23   : 		if ( lpObj1->m_iCrywolfMVPScore == lpObj2->m_iCrywolfMVPScore )

  0012e	3b d1		 cmp	 edx, ecx
  00130	75 12		 jne	 SHORT $LN212@Insert_noh

; 24   : 			bResult = ( lpObj1->Experience < lpObj2->Experience ) ? TRUE : FALSE;

  00132	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00135	8b 89 a0 00 00
	00		 mov	 ecx, DWORD PTR [ecx+160]
  0013b	3b 8f a0 00 00
	00		 cmp	 ecx, DWORD PTR [edi+160]
  00141	0f 92 c3	 setb	 bl
$LN212@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  00144	84 db		 test	 bl, bl
  00146	74 18		 je	 SHORT $LN13@Insert_noh

; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00148	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0014b	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0014e	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00151	56		 push	 esi
  00152	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  00155	eb 8b		 jmp	 SHORT $LN247@Insert_noh
__catch$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z$0:

; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;

  00157	6a 00		 push	 0
  00159	6a 00		 push	 0
  0015b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN248@Insert_noh:
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00160	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00163	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1842 : 				return (_Pairib(_Where, false));

  00165	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00167	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  0016b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0016e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00175	59		 pop	 ecx
  00176	5f		 pop	 edi
  00177	5e		 pop	 esi
  00178	5b		 pop	 ebx
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 10 00	 ret	 16			; 00000010H
$LN245@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_nohint<OBJECTSTRUCT *,std::_Nil>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z PROC ; std::forward<OBJECTSTRUCT *>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@PAUOBJECTSTRUCT@@@std@@YA$$QAPAUOBJECTSTRUCT@@AAPAU1@@Z ENDP ; std::forward<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator!=, COMDAT
; _this$ = ecx

; 338  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 340  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 335  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator*, COMDAT
; _this$ = ecx

; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QBEABQAUOBJECTSTRUCT@@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:

; 608  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:

; 615  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::~set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set
;	COMDAT ?insert@?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@2@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@2@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::insert, COMDAT
; _this$ = ecx

; 150  : 		{	// insert a key value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1078 : 		return (_Insert_nohint(false,

  00003	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_nohint<OBJECTSTRUCT *,std::_Nil>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set

; 151  : 		return (_Mybase::insert(_STD forward<value_type>(_Val)));

  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 152  : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?insert@?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@2@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set
;	COMDAT ??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 70   : 		{	// construct empty set from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set

; 71   : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >::set<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEABQAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEABQAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 2206 : 		return ((const key_type&)this->_Kfn(this->_Myval(_Pnode)));
; 2207 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEABQAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEABQAUOBJECTSTRUCT@@ABQAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEABQAUOBJECTSTRUCT@@ABQAU3@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2201 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2202 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEABQAUOBJECTSTRUCT@@ABQAU3@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2195 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 43   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2196 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase

; 2197 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2139 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2148 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2156 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2156 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2156 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root, COMDAT
; _this$ = ecx

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost, COMDAT
; _this$ = ecx

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2109 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2118 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2126 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2126 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2126 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2105 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2106 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1d		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00028	8b fe		 mov	 edi, esi
  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e3		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXU_Nil@2@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1677 : 		}

  00000	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXU_Nil@2@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear, COMDAT
; _this$ = ecx

; 1472 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  0002c	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0002e	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00032	75 1d		 jne	 SHORT $LN23@clear
$LL24@clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00034	ff 76 08	 push	 DWORD PTR [esi+8]
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0003e	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00046	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00049	8b de		 mov	 ebx, esi
  0004b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004f	74 e3		 je	 SHORT $LL24@clear
$LN23@clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00051	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0005a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  0005c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  0005f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1482 : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase, COMDAT
; _this$ = ecx

; 1448 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1449 : 		if (_First == begin() && _Last == end())

  00007	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0000e	8b 37		 mov	 esi, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1449 : 		if (_First == begin() && _Last == end())

  00012	75 1a		 jne	 SHORT $LN168@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b d6		 cmp	 edx, esi

; 1449 : 		if (_First == begin() && _Last == end())

  00016	75 16		 jne	 SHORT $LN168@erase

; 1450 : 			{	// erase all
; 1451 : 			clear();

  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::clear

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 43   : 		: _Ptr(_Pnode)

  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1459 : 			}
; 1460 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
$LN168@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002e	3b c2		 cmp	 eax, edx

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  00030	74 5d		 je	 SHORT $LN3@erase
$LL2@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  00036	8b c8		 mov	 ecx, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00038	75 41		 jne	 SHORT $LN127@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0003d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00041	75 19		 jne	 SHORT $LN170@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 2d		 jne	 SHORT $LN180@erase
  0004b	0f 1f 44 00 00	 npad	 5
$LL138@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00050	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00052	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00054	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00058	74 f6		 je	 SHORT $LL138@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0005a	eb 1c		 jmp	 SHORT $LN180@erase
$LN170@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00063	75 13		 jne	 SHORT $LN180@erase
$LL122@erase:
  00065	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00068	75 0e		 jne	 SHORT $LN180@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0006a	8b c2		 mov	 eax, edx
  0006c	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0006f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	74 ed		 je	 SHORT $LL122@erase
$LN180@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00078	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN127@erase:

; 1457 : 				erase(_First++);

  0007b	51		 push	 ecx
  0007c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00087	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0008a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  0008d	75 a3		 jne	 SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  00096	8b c1		 mov	 eax, ecx

; 1459 : 			}
; 1460 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@@Z
_TEXT	SEGMENT
tv1162 = -8						; size = 4
tv1141 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase, COMDAT
; _this$ = ecx

; 1263 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1263 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN5@erase

; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN692@erase
$LN5@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN7@erase

; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1285 : 		else

  00034	eb 0e		 jmp	 SHORT $LN692@erase
$LN7@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN9@erase
$LN692@erase:

; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN11@erase

; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN12@erase

; 1298 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN14@erase

; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1301 : 			else

  00062	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1302 : 				this->_Right(_Fixnodeparent) =

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN16@erase

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00079	8b d7		 mov	 edx, edi

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN166@erase
$LL165@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN16@erase:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN373@erase

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  000ad	8b d7		 mov	 edx, edi

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:

; 608  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN18@erase

; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1324 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN20@erase

; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1331 : 				this->_Right(_Pnode) =

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN21@erase

; 1338 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN23@erase

; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else

  00106	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN25@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN3@erase
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN695@erase

; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN26@erase

; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1360 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN28@erase

; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN28@erase:

; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN696@erase

; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN31@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN697@erase
$LN31@erase:

; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN33@erase

; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1390 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1391 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN695@erase
$LN26@erase:

; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN34@erase

; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate

; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN34@erase:

; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN696@erase

; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN37@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN37@erase
$LN697@erase:

; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN696@erase:

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1412 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL4@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	eb 35		 jmp	 SHORT $LN695@erase
$LN37@erase:

; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN39@erase

; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Lrotate

; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1427 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Rrotate
$LN695@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN3@erase:

; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  00247	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0024a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1440 : 		if (0 < this->_Mysize())

  00250	85 c0		 test	 eax, eax
  00252	74 04		 je	 SHORT $LN694@erase

; 1441 : 			--this->_Mysize();

  00254	48		 dec	 eax
  00255	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN694@erase:

; 43   : 		: _Ptr(_Pnode)

  00258	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	89 08		 mov	 DWORD PTR [eax], ecx

; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}

  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size, COMDAT
; _this$ = ecx

; 1212 : 		return (this->_Getal().max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1213 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end, COMDAT
; _this$ = ecx

; 1156 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin, COMDAT
; _this$ = ecx

; 1146 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 1126 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1128 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@2@$$QAPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@2@$$QAPAUOBJECTSTRUCT@@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert, COMDAT
; _this$ = ecx

; 1077 : 		{	// try to insert node with value _Val, favoring right side

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1078 : 		return (_Insert_nohint(false,

  00003	ff 75 08	 push	 DWORD PTR $T1[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00009	6a 00		 push	 0
  0000b	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_nohint<OBJECTSTRUCT *,std::_Nil>
  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@2@$$QAPAUOBJECTSTRUCT@@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 1013 : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1014 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAEAAVCCrywolfScoreSort@@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAEAAVCCrywolfScoreSort@@XZ PROC ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@VCCrywolfScoreSort@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@$00@std@@QAEAAVCCrywolfScoreSort@@XZ ENDP ; std::_Compressed_pair<CCrywolfScoreSort,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >,std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Min, COMDAT

; 613  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 616  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 617  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Max, COMDAT

; 606  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 609  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 610  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Myval, COMDAT

; 601  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 603  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Right, COMDAT

; 596  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 598  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Parent, COMDAT

; 591  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 593  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Left, COMDAT

; 586  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 588  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Isnil, COMDAT

; 581  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 583  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Color, COMDAT

; 576  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 578  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >, COMDAT
; _this$ = ecx

; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 568  : 		this->_Mysize = 0;
; 569  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >::_Tree_val<std::_Tree_simple_types<OBJECTSTRUCT *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Mysize, COMDAT
; _this$ = ecx

; 948  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 949  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABQAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABQAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myhead, COMDAT
; _this$ = ecx

; 943  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 944  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABQAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myhead, COMDAT
; _this$ = ecx

; 938  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 939  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Get_data, COMDAT
; _this$ = ecx

; 933  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 934  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Get_data, COMDAT
; _this$ = ecx

; 928  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 929  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Getal, COMDAT
; _this$ = ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 924  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Getal, COMDAT
; _this$ = ecx

; 918  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 919  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAVCCrywolfScoreSort@@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAVCCrywolfScoreSort@@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 908  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 909  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEAAVCCrywolfScoreSort@@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 883  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00001	6a 14		 push	 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 856  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN208@Buynode0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN126@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN126@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN176@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN176@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 871  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 872  : 		}

  00030	c3		 ret	 0
$LN208@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@Buynode0:
$LN207@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 845  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00000	6a 14		 push	 20			; 00000014H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN102@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN140@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN140@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 839  : 		_Color(_Pnode) = _Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 723  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::~_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Construct, COMDAT
; _this$ = ecx

; 716  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 717  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 718  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >, COMDAT
; _this$ = ecx

; 703  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 567  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 704  : 		_Construct();
; 705  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE@ABVCCrywolfScoreSort@@ABV?$allocator@PAUOBJECTSTRUCT@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min, COMDAT

; 696  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  0001a	8b c1		 mov	 eax, ecx

; 698  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max, COMDAT

; 691  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  0001b	8b c1		 mov	 eax, ecx

; 693  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval, COMDAT

; 686  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAUOBJECTSTRUCT@@PAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right, COMDAT

; 681  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent, COMDAT

; 676  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left, COMDAT

; 671  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 673  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAAPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil, COMDAT

; 666  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color, COMDAT

; 661  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@SAAADPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00013	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@PAUOBJECTSTRUCT@@PAX@std@@@std@@QAEXPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<OBJECTSTRUCT *,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ PROC	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAUOBJECTSTRUCT@@@std@@QAE@XZ ENDP	; std::allocator<OBJECTSTRUCT *>::allocator<OBJECTSTRUCT *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\set
;	COMDAT ?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z PROC ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn, COMDAT

; 33   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   : 		return (_Val);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 35   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Kfn@?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@SAABQAUOBJECTSTRUCT@@ABQAU3@@Z ENDP ; std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0>::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_Crywolf@@YAXXZ
text$yd	SEGMENT
??__Fg_Crywolf@@YAXXZ PROC				; `dynamic atexit destructor for 'g_Crywolf'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolf@@UAE@XZ	; CCrywolf::~CCrywolf
??__Fg_Crywolf@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_Crywolf''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ??__Eg_Crywolf@@YAXXZ
text$di	SEGMENT
??__Eg_Crywolf@@YAXXZ PROC				; `dynamic initializer for 'g_Crywolf'', COMDAT

; 25   : CCrywolf g_Crywolf;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_Crywolf@@3VCCrywolf@@A ; g_Crywolf
  00005	e8 00 00 00 00	 call	 ??0CCrywolf@@QAE@XZ	; CCrywolf::CCrywolf
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_Crywolf@@YAXXZ ; `dynamic atexit destructor for 'g_Crywolf''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_Crywolf@@YAXXZ ENDP				; `dynamic initializer for 'g_Crywolf''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FUTIL@@YAXXZ
text$yd	SEGMENT
??__FUTIL@@YAXXZ PROC					; `dynamic atexit destructor for 'UTIL'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00005	e9 00 00 00 00	 jmp	 ??1CCrywolfUtil@@UAE@XZ	; CCrywolfUtil::~CCrywolfUtil
??__FUTIL@@YAXXZ ENDP					; `dynamic atexit destructor for 'UTIL''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ??__EUTIL@@YAXXZ
text$di	SEGMENT
??__EUTIL@@YAXXZ PROC					; `dynamic initializer for 'UTIL'', COMDAT

; 24   : static CCrywolfUtil UTIL;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00005	e8 00 00 00 00	 call	 ??0CCrywolfUtil@@QAE@XZ	; CCrywolfUtil::CCrywolfUtil
  0000a	68 00 00 00 00	 push	 OFFSET ??__FUTIL@@YAXXZ	; `dynamic atexit destructor for 'UTIL''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EUTIL@@YAXXZ ENDP					; `dynamic initializer for 'UTIL''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
;	COMDAT ?GetMapSvrGroup@CMapServerManager@@QAEHXZ
_TEXT	SEGMENT
?GetMapSvrGroup@CMapServerManager@@QAEHXZ PROC		; CMapServerManager::GetMapSvrGroup, COMDAT
; _this$ = ecx

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	8b 81 f8 6a 01
	00		 mov	 eax, DWORD PTR [ecx+92920]
  00006	85 c0		 test	 eax, eax
  00008	74 05		 je	 SHORT $LN2@GetMapSvrG

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]

; 60   : 	}

  0000e	c3		 ret	 0
$LN2@GetMapSvrG:

; 58   : 		}
; 59   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1

; 60   : 	}

  00012	c3		 ret	 0
?GetMapSvrGroup@CMapServerManager@@QAEHXZ ENDP		; CMapServerManager::GetMapSvrGroup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfutil.h
;	COMDAT ??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj1$ = 8						; size = 4
_lpObj2$ = 12						; size = 4
??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z PROC	; CCrywolfScoreSort::operator(), COMDAT
; _this$ = ecx

; 20   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   : 		bool bResult = ( lpObj1->m_iCrywolfMVPScore >= lpObj2->m_iCrywolfMVPScore ) ? TRUE : FALSE;

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj1$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 0c	 mov	 esi, DWORD PTR _lpObj2$[ebp]
  0000b	8b 8a 18 24 00
	00		 mov	 ecx, DWORD PTR [edx+9240]
  00011	8b 86 18 24 00
	00		 mov	 eax, DWORD PTR [esi+9240]
  00017	3b c8		 cmp	 ecx, eax
  00019	0f 9d c3	 setge	 bl

; 22   : 
; 23   : 		if ( lpObj1->m_iCrywolfMVPScore == lpObj2->m_iCrywolfMVPScore )

  0001c	3b c8		 cmp	 ecx, eax
  0001e	75 15		 jne	 SHORT $LN4@operator

; 24   : 			bResult = ( lpObj1->Experience < lpObj2->Experience ) ? TRUE : FALSE;

  00020	8b 82 a0 00 00
	00		 mov	 eax, DWORD PTR [edx+160]
  00026	3b 86 a0 00 00
	00		 cmp	 eax, DWORD PTR [esi+160]
  0002c	5e		 pop	 esi
  0002d	0f 92 c0	 setb	 al
  00030	5b		 pop	 ebx

; 27   : 	}

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN4@operator:
  00035	5e		 pop	 esi

; 25   : 
; 26   : 		return bResult;

  00036	8a c3		 mov	 al, bl
  00038	5b		 pop	 ebx

; 27   : 	}

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
??RCCrywolfScoreSort@@QAE_NQAUOBJECTSTRUCT@@0@Z ENDP	; CCrywolfScoreSort::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatue.h
;	COMDAT ?GetHPPercentage@CCrywolfShield@@QAEHXZ
_TEXT	SEGMENT
?GetHPPercentage@CCrywolfShield@@QAEHXZ PROC		; CCrywolfShield::GetHPPercentage, COMDAT
; _this$ = ecx

; 34   : 		if ( this->m_iShieldMaxHP )

  00000	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00003	74 08		 je	 SHORT $LN2@GetHPPerce

; 35   : 		{
; 36   : 			return (this->m_iShieldHP * 100) / this->m_iShieldMaxHP;

  00005	6b 41 04 64	 imul	 eax, DWORD PTR [ecx+4], 100
  00009	99		 cdq
  0000a	f7 39		 idiv	 DWORD PTR [ecx]

; 40   : 	}

  0000c	c3		 ret	 0
$LN2@GetHPPerce:

; 37   : 		}
; 38   : 
; 39   : 		return 0;

  0000d	33 c0		 xor	 eax, eax

; 40   : 	}

  0000f	c3		 ret	 0
?GetHPPercentage@CCrywolfShield@@QAEHXZ ENDP		; CCrywolfShield::GetHPPercentage
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCrywolf@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCrywolf@@UAEPAXI@Z PROC				; CCrywolf::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCrywolf@@UAE@XZ	; CCrywolf::~CCrywolf
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 c4 c0 0f 00	 push	 1032388			; 000fc0c4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCrywolf@@UAEPAXI@Z ENDP				; CCrywolf::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ResetAllUserMVPScore@CCrywolf@@QAEXXZ PROC		; CCrywolf::ResetAllUserMVPScore, COMDAT
; _this$ = ecx

; 1537 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00000	b9 00 dd 49 06	 mov	 ecx, 105504000		; 0649dd00H
  00005	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@ResetAllUs:

; 1538 : 	{
; 1539 : 		if ( gObj[i].Connected == PLAYER_PLAYING &&
; 1540 : 			 gObj[i].Type == OBJ_USER &&

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	83 7c 01 04 03	 cmp	 DWORD PTR [ecx+eax+4], 3
  0001a	75 1c		 jne	 SHORT $LN2@ResetAllUs
  0001c	80 7c 01 50 01	 cmp	 BYTE PTR [ecx+eax+80], 1
  00021	75 15		 jne	 SHORT $LN2@ResetAllUs
  00023	80 bc 01 23 01
	00 00 22	 cmp	 BYTE PTR [ecx+eax+291], 34 ; 00000022H
  0002b	75 0b		 jne	 SHORT $LN2@ResetAllUs

; 1541 : 			 gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)
; 1542 : 		{
; 1543 : 			gObj[i].m_iCrywolfMVPScore = 0;

  0002d	c7 84 01 18 24
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+9240], 0
$LN2@ResetAllUs:

; 1537 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00038	81 c1 40 27 00
	00		 add	 ecx, 10048		; 00002740H
  0003e	81 f9 00 2f e3
	06		 cmp	 ecx, 115552000		; 06e32f00H
  00044	7c ca		 jl	 SHORT $LL4@ResetAllUs

; 1544 : 		}
; 1545 : 	}
; 1546 : }

  00046	c3		 ret	 0
?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ResetAllUserMVPScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?GiveRewardExp@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
tv171 = 8						; size = 4
_iUserIndex$ = 8					; size = 4
_iRewardExp$ = 12					; size = 4
?GiveRewardExp@CCrywolf@@QAEXHH@Z PROC			; CCrywolf::GiveRewardExp, COMDAT
; _this$ = ecx

; 1490 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1491 : 	if ( !gObjIsConnected(iUserIndex))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]
  00007	53		 push	 ebx
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	0f 84 b1 00 00
	00		 je	 $LN10@GiveReward

; 1492 : 		return;
; 1493 : 
; 1494 : 	if ( iRewardExp <= -1 )

  00018	8b 45 0c	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  0001b	83 f8 ff	 cmp	 eax, -1
  0001e	0f 8e a5 00 00
	00		 jle	 $LN10@GiveReward

; 1495 : 		return;
; 1496 : 
; 1497 : 	int iRET_EXP = 0;
; 1498 : 	int iCAL_EXP = iRewardExp;
; 1499 : 	int iMAX_LEVCOUNT = 0;
; 1500 : 
; 1501 : 	if ( !gObjIsConnected(iUserIndex))

  00024	56		 push	 esi
  00025	57		 push	 edi
  00026	53		 push	 ebx
  00027	8b f0		 mov	 esi, eax
  00029	33 ff		 xor	 edi, edi
  0002b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00030	83 c4 04	 add	 esp, 4
  00033	85 c0		 test	 eax, eax
  00035	0f 84 8c 00 00
	00		 je	 $LN17@GiveReward

; 1502 : 		return;
; 1503 : 
; 1504 : 	iRET_EXP = iCAL_EXP;
; 1505 : 
; 1506 : 	if ( gObj[iUserIndex].Type == OBJ_USER )

  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00040	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048
  00046	89 4d 08	 mov	 DWORD PTR tv171[ebp], ecx
  00049	80 7c 01 50 01	 cmp	 BYTE PTR [ecx+eax+80], 1
  0004e	75 77		 jne	 SHORT $LN17@GiveReward

; 1507 : 	{
; 1508 : 		while ( iCAL_EXP > 0 )

  00050	85 f6		 test	 esi, esi
  00052	7e 44		 jle	 SHORT $LN16@GiveReward
$LN20@GiveReward:

; 1509 : 		{
; 1510 : 			if ( iCAL_EXP > 0 )
; 1511 : 			{
; 1512 : 				iCAL_EXP = UTIL.CrywolfMVPLevelUp(iUserIndex, iCAL_EXP);

  00054	56		 push	 esi
  00055	53		 push	 ebx
  00056	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0005b	e8 00 00 00 00	 call	 ?CrywolfMVPLevelUp@CCrywolfUtil@@QAEHHH@Z ; CCrywolfUtil::CrywolfMVPLevelUp

; 1513 : 			}
; 1514 : 
; 1515 : 			iMAX_LEVCOUNT++;

  00060	47		 inc	 edi
  00061	8b f0		 mov	 esi, eax

; 1516 : 
; 1517 : 			if ( iMAX_LEVCOUNT > 5 )

  00063	83 ff 05	 cmp	 edi, 5
  00066	7f 09		 jg	 SHORT $LN13@GiveReward

; 1507 : 	{
; 1508 : 		while ( iCAL_EXP > 0 )

  00068	85 f6		 test	 esi, esi
  0006a	7f e8		 jg	 SHORT $LN20@GiveReward

; 1516 : 
; 1517 : 			if ( iMAX_LEVCOUNT > 5 )

  0006c	8b 75 08	 mov	 esi, DWORD PTR tv171[ebp]
  0006f	eb 29		 jmp	 SHORT $LN3@GiveReward
$LN13@GiveReward:

; 1518 : 			{
; 1519 : 				LogAddTD("[ Crywolf ][GiveRewardExp] LevelUp Error [%s][%s]",

  00071	8b 75 08	 mov	 esi, DWORD PTR tv171[ebp]
  00074	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00077	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007d	50		 push	 eax
  0007e	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00081	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00087	50		 push	 eax
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@HNAJFEAL@?$FL?5Crywolf?5?$FN?$FLGiveRewardExp?$FN?5Level@
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	eb 02		 jmp	 SHORT $LN3@GiveReward
$LN16@GiveReward:
  00098	8b f1		 mov	 esi, ecx
$LN3@GiveReward:

; 1520 : 					gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);
; 1521 : 
; 1522 : 				break;
; 1523 : 			}
; 1524 : 		}
; 1525 : 
; 1526 : 		if( g_MasterExp.IsEnabled(&gObj[iUserIndex]) == FALSE )

  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a0	03 ce		 add	 ecx, esi
  000a2	51		 push	 ecx
  000a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  000a8	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  000ad	85 c0		 test	 eax, eax
  000af	75 16		 jne	 SHORT $LN17@GiveReward

; 1527 : 		{
; 1528 : 			GCSendExp(iUserIndex,(WORD)-1,iRewardExp,0,0);

  000b1	50		 push	 eax
  000b2	50		 push	 eax
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  000b6	99		 cdq
  000b7	52		 push	 edx
  000b8	50		 push	 eax
  000b9	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000be	53		 push	 ebx
  000bf	e8 00 00 00 00	 call	 ?GCSendExp@@YAXHH_JHH@Z	; GCSendExp
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
$LN17@GiveReward:
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
$LN10@GiveReward:
  000c9	5b		 pop	 ebx

; 1529 : 		}
; 1530 : 	}
; 1531 : }

  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
?GiveRewardExp@CCrywolf@@QAEXHH@Z ENDP			; CCrywolf::GiveRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z
_TEXT	SEGMENT
_iRewardExp$ = -8					; size = 8
_iUserIndex$ = 8					; size = 4
_iMVPRank$ = 12						; size = 4
?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z PROC		; CCrywolf::CalcGettingRewardExp, COMDAT
; _this$ = ecx

; 1453 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 1454 : 	if ( !gObjIsConnected(iUserIndex))

  00008	8b 7d 08	 mov	 edi, DWORD PTR _iUserIndex$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	74 78		 je	 SHORT $LN10@CalcGettin

; 1455 : 		return 0;
; 1456 : 
; 1457 : 	if ( CHECK_LIMIT(iMVPRank, 5) == FALSE )

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _iMVPRank$[ebp]
  0001d	85 c0		 test	 eax, eax
  0001f	78 71		 js	 SHORT $LN10@CalcGettin
  00021	33 c9		 xor	 ecx, ecx
  00023	83 f8 04	 cmp	 eax, 4
  00026	0f 9e c1	 setle	 cl
  00029	85 c9		 test	 ecx, ecx
  0002b	74 65		 je	 SHORT $LN10@CalcGettin

; 1459 : 
; 1460 : 	__int64 iRewardExp = this->m_iMVPRankExpTable[iMVPRank];
; 1461 : 
; 1462 : 	if ( this->GetOccupationState() == 1 )

  0002d	83 bb 90 a8 0f
	00 01		 cmp	 DWORD PTR [ebx+1026192], 1
  00034	8b 84 83 b0 c0
	0f 00		 mov	 eax, DWORD PTR [ebx+eax*4+1032368]
  0003b	99		 cdq
  0003c	56		 push	 esi
  0003d	8b f0		 mov	 esi, eax
  0003f	89 55 fc	 mov	 DWORD PTR _iRewardExp$[ebp+4], edx
  00042	89 75 f8	 mov	 DWORD PTR _iRewardExp$[ebp], esi
  00045	75 24		 jne	 SHORT $LN4@CalcGettin

; 1463 : 	{
; 1464 : 		iRewardExp = (iRewardExp * 10) / 100;

  00047	8b ca		 mov	 ecx, edx
  00049	0f a4 c1 02	 shld	 ecx, eax, 2
  0004d	6a 00		 push	 0
  0004f	c1 e0 02	 shl	 eax, 2
  00052	03 f0		 add	 esi, eax
  00054	6a 64		 push	 100			; 00000064H
  00056	13 d1		 adc	 edx, ecx
  00058	0f a4 f2 01	 shld	 edx, esi, 1
  0005c	03 f6		 add	 esi, esi
  0005e	52		 push	 edx
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 __alldiv
  00065	89 45 f8	 mov	 DWORD PTR _iRewardExp$[ebp], eax
  00068	89 55 fc	 mov	 DWORD PTR _iRewardExp$[ebp+4], edx
$LN4@CalcGettin:

; 1465 : 	}
; 1466 : 
; 1467 : 	CheckItemOptForGetExpEx(&gObj[iUserIndex],iRewardExp,1);

  0006b	6a 01		 push	 1
  0006d	8d 45 f8	 lea	 eax, DWORD PTR _iRewardExp$[ebp]
  00070	50		 push	 eax
  00071	69 c7 40 27 00
	00		 imul	 eax, edi, 10048
  00077	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx

; 1468 : 	return (int)iRewardExp;

  00083	8b 45 f8	 mov	 eax, DWORD PTR _iRewardExp$[ebp]
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	5e		 pop	 esi
  0008a	5f		 pop	 edi
  0008b	5b		 pop	 ebx

; 1469 : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
$LN10@CalcGettin:
  00092	5f		 pop	 edi

; 1458 : 		return 0;

  00093	33 c0		 xor	 eax, eax
  00095	5b		 pop	 ebx

; 1469 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z ENDP		; CCrywolf::CalcGettingRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CalcGettingRank@CCrywolf@@QAEHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
?CalcGettingRank@CCrywolf@@QAEHH@Z PROC			; CCrywolf::CalcGettingRank, COMDAT
; _this$ = ecx

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1474 : 	int iRank = 0;
; 1475 : 
; 1476 : 	for ( int i=0;i<=4;i++)
; 1477 : 	{
; 1478 : 		if ( gObj[iUserIndex].m_iCrywolfMVPScore < this->m_iMVPRankScoreTable[i] )

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	33 d2		 xor	 edx, edx
  0000a	56		 push	 esi
  0000b	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _iUserIndex$[ebp], 10048
  00012	57		 push	 edi
  00013	33 ff		 xor	 edi, edi
  00015	81 c1 9c c0 0f
	00		 add	 ecx, 1032348		; 000fc09cH
  0001b	8b 84 06 18 24
	00 00		 mov	 eax, DWORD PTR [esi+eax+9240]
$LL4@CalcGettin:
  00022	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00024	7c 0b		 jl	 SHORT $LN12@CalcGettin

; 1479 : 			break;
; 1480 : 
; 1481 : 		iRank = i;

  00026	8b fa		 mov	 edi, edx
  00028	83 c1 04	 add	 ecx, 4
  0002b	42		 inc	 edx
  0002c	83 fa 04	 cmp	 edx, 4
  0002f	7e f1		 jle	 SHORT $LL4@CalcGettin
$LN12@CalcGettin:

; 1482 : 	}
; 1483 : 
; 1484 : 	return iRank;

  00031	8b c7		 mov	 eax, edi
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi

; 1485 : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?CalcGettingRank@CCrywolf@@QAEHH@Z ENDP			; CCrywolf::CalcGettingRank
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CalcGettingScore@CCrywolf@@QAEHHHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iMonIndex$ = 12					; size = 4
_iScoreType$ = 16					; size = 4
?CalcGettingScore@CCrywolf@@QAEHHHH@Z PROC		; CCrywolf::CalcGettingScore, COMDAT
; _this$ = ecx

; 1405 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1406 : 	if ( !gObjIsConnected(iUserIndex))

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _iUserIndex$[ebp]
  00007	56		 push	 esi
  00008	53		 push	 ebx
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 09		 jne	 SHORT $LN4@CalcGettin

; 1407 : 		return -1;

  00017	5e		 pop	 esi
  00018	83 c8 ff	 or	 eax, -1
  0001b	5b		 pop	 ebx

; 1448 : }

  0001c	5d		 pop	 ebp
  0001d	c2 0c 00	 ret	 12			; 0000000cH
$LN4@CalcGettin:

; 1408 : 
; 1409 : 	int iAddMVPScore = 0;
; 1410 : 
; 1411 : 	if ( CHECK_LIMIT(iMonIndex, OBJ_MAXMONSTER) != FALSE )

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _iMonIndex$[ebp]
  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00029	57		 push	 edi
  0002a	33 ff		 xor	 edi, edi
  0002c	85 c9		 test	 ecx, ecx
  0002e	78 5c		 js	 SHORT $LN2@CalcGettin
  00030	33 c0		 xor	 eax, eax
  00032	81 f9 03 29 00
	00		 cmp	 ecx, 10499		; 00002903H
  00038	0f 9e c0	 setle	 al
  0003b	85 c0		 test	 eax, eax
  0003d	74 4d		 je	 SHORT $LN2@CalcGettin

; 1412 : 	{
; 1413 : 		switch ( gObj[iMonIndex].Class )

  0003f	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00045	0f b7 84 10 90
	00 00 00	 movzx	 eax, WORD PTR [eax+edx+144]
  0004d	05 ac fe ff ff	 add	 eax, -340		; fffffeacH
  00052	83 f8 09	 cmp	 eax, 9
  00055	77 35		 ja	 SHORT $LN2@CalcGettin
  00057	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@CalcGettin[eax*4]
$LN6@CalcGettin:

; 1414 : 		{
; 1415 : 			case 349:
; 1416 : 				iAddMVPScore = this->m_iMVPScoreTable[0];

  0005e	8b be 80 c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032320]

; 1417 : 				break;

  00064	eb 26		 jmp	 SHORT $LN2@CalcGettin
$LN7@CalcGettin:

; 1418 : 			case 340:
; 1419 : 				iAddMVPScore = this->m_iMVPScoreTable[1];

  00066	8b be 84 c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032324]

; 1420 : 				break;

  0006c	eb 1e		 jmp	 SHORT $LN2@CalcGettin
$LN8@CalcGettin:

; 1421 : 			case 344:
; 1422 : 				iAddMVPScore = this->m_iMVPScoreTable[2];

  0006e	8b be 88 c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032328]

; 1423 : 				break;

  00074	eb 16		 jmp	 SHORT $LN2@CalcGettin
$LN9@CalcGettin:

; 1424 : 			case 341:
; 1425 : 				iAddMVPScore = this->m_iMVPScoreTable[3];

  00076	8b be 8c c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032332]

; 1426 : 				break;

  0007c	eb 0e		 jmp	 SHORT $LN2@CalcGettin
$LN10@CalcGettin:

; 1427 : 			case 345:
; 1428 : 				iAddMVPScore = this->m_iMVPScoreTable[4];

  0007e	8b be 90 c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032336]

; 1429 : 				break;

  00084	eb 06		 jmp	 SHORT $LN2@CalcGettin
$LN11@CalcGettin:

; 1430 : 			case 348:
; 1431 : 				iAddMVPScore = this->m_iMVPScoreTable[5];

  00086	8b be 94 c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032340]
$LN2@CalcGettin:

; 1432 : 				break;
; 1433 : 		}
; 1434 : 	}
; 1435 : 
; 1436 : 	if ( iScoreType == 6 )

  0008c	83 7d 10 06	 cmp	 DWORD PTR _iScoreType$[ebp], 6
  00090	75 06		 jne	 SHORT $LN12@CalcGettin

; 1437 : 	{
; 1438 : 		iAddMVPScore = this->m_iMVPScoreTable[6];

  00092	8b be 98 c0 0f
	00		 mov	 edi, DWORD PTR [esi+1032344]
$LN12@CalcGettin:

; 1439 : 	}
; 1440 : 
; 1441 : 	gObj[iUserIndex].m_iCrywolfMVPScore += iAddMVPScore;

  00098	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  0009e	01 bc 16 18 24
	00 00		 add	 DWORD PTR [esi+edx+9240], edi

; 1442 : 
; 1443 : 	LogAddTD("[ Crywolf ][MVP] Plus MVP Score : %d, Accumulated : %d [%s][%s]",

  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ab	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  000ae	03 c6		 add	 eax, esi
  000b0	8d 4a 52	 lea	 ecx, DWORD PTR [edx+82]
  000b3	50		 push	 eax
  000b4	03 ce		 add	 ecx, esi
  000b6	51		 push	 ecx
  000b7	ff b4 32 18 24
	00 00		 push	 DWORD PTR [edx+esi+9240]
  000be	57		 push	 edi
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@JEAHHHGN@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Plus?5MVP?5Score?5@
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1444 : 		iAddMVPScore, gObj[iUserIndex].m_iCrywolfMVPScore,
; 1445 : 		gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);
; 1446 : 
; 1447 : 	return gObj[iUserIndex].m_iCrywolfMVPScore;

  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cf	83 c4 14	 add	 esp, 20			; 00000014H
  000d2	8b 84 06 18 24
	00 00		 mov	 eax, DWORD PTR [esi+eax+9240]
  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx

; 1448 : }

  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
$LN17@CalcGettin:
  000e0	00 00 00 00	 DD	 $LN7@CalcGettin
  000e4	00 00 00 00	 DD	 $LN9@CalcGettin
  000e8	00 00 00 00	 DD	 $LN2@CalcGettin
  000ec	00 00 00 00	 DD	 $LN2@CalcGettin
  000f0	00 00 00 00	 DD	 $LN8@CalcGettin
  000f4	00 00 00 00	 DD	 $LN10@CalcGettin
  000f8	00 00 00 00	 DD	 $LN2@CalcGettin
  000fc	00 00 00 00	 DD	 $LN2@CalcGettin
  00100	00 00 00 00	 DD	 $LN11@CalcGettin
  00104	00 00 00 00	 DD	 $LN6@CalcGettin
?CalcGettingScore@CCrywolf@@QAEHHHH@Z ENDP		; CCrywolf::CalcGettingScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
_iOccupationState$ = 12					; size = 4
?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::ApplyCrywolfDBInfo, COMDAT
; _this$ = ecx

; 1292 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00004	8b 75 0c	 mov	 esi, DWORD PTR _iOccupationState$[ebp]
  00007	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1292 : {

  00008	8b f9		 mov	 edi, ecx

; 1295 : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  0000a	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 95   : 	void SetDBDataLoad(BOOL bIsLoaded){this->m_bDBDataLoadOK = bIsLoaded;}

  0000b	c7 47 08 01 00
	00 00		 mov	 DWORD PTR [edi+8], 1

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00012	89 b7 90 a8 0f
	00		 mov	 DWORD PTR [edi+1026192], esi
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1295 : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  00018	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 1296 : 	this->SetCrywolfMapAttr(this->GetOccupationState());

  0001d	ff b7 90 a8 0f
	00		 push	 DWORD PTR [edi+1026192]
  00023	8b cf		 mov	 ecx, edi
  00025	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 1297 : 
; 1298 : 	LogAddTD("[ Crywolf ][ ApplyDBInfo] OccupationState : %d",

  0002a	56		 push	 esi
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BDMLPGIK@?$FL?5Crywolf?5?$FN?$FL?5ApplyDBInfo?$FN?5Occupa@
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00036	83 c4 08	 add	 esp, 8
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi

; 1299 : 		iOccupationState);
; 1300 : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?ApplyCrywolfDBInfo@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::ApplyCrywolfDBInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfInfoDBLoad, COMDAT
; _this$ = ecx

; 1284 : 	this->m_bDBDataLoading = TRUE;

  00000	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00007	a1 f8 6a 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+92920
  0000c	85 c0		 test	 eax, eax
  0000e	74 0c		 je	 SHORT $LN4@CrywolfInf

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  00010	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1286 : 	GDReqCrywolfInfoLoad(g_MapServerManager.GetMapSvrGroup());

  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoLoad@@YAXH@Z ; GDReqCrywolfInfoLoad
  0001a	59		 pop	 ecx

; 1287 : }

  0001b	c3		 ret	 0
$LN4@CrywolfInf:
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 59   : 		return -1;

  0001c	83 c8 ff	 or	 eax, -1
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1286 : 	GDReqCrywolfInfoLoad(g_MapServerManager.GetMapSvrGroup());

  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoLoad@@YAXH@Z ; GDReqCrywolfInfoLoad
  00025	59		 pop	 ecx

; 1287 : }

  00026	c3		 ret	 0
?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfInfoDBLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfInfoDBSave@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfInfoDBSave, COMDAT
; _this$ = ecx

; 1273 : 	if ( this->m_bDBDataLoadOK != FALSE )

  00000	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00004	74 27		 je	 SHORT $LN2@CrywolfInf
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00006	a1 f8 6a 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+92920
  0000b	85 c0		 test	 eax, eax
  0000d	74 06		 je	 SHORT $LN9@CrywolfInf

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  0000f	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00013	eb 03		 jmp	 SHORT $LN8@CrywolfInf
$LN9@CrywolfInf:

; 58   : 		}
; 59   : 		return -1;

  00015	83 c8 ff	 or	 eax, -1
$LN8@CrywolfInf:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1275 : 		GDReqCrywolfInfoSave(g_MapServerManager.GetMapSvrGroup(),

  00018	ff b1 90 a8 0f
	00		 push	 DWORD PTR [ecx+1026192]
  0001e	ff b1 8c a8 0f
	00		 push	 DWORD PTR [ecx+1026188]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?GDReqCrywolfInfoSave@@YAXHHH@Z ; GDReqCrywolfInfoSave
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@CrywolfInf:

; 1276 : 					 this->GetCrywolfState(),
; 1277 : 					 this->GetOccupationState());
; 1278 : 	}
; 1279 : }

  0002d	c3		 ret	 0
?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfInfoDBSave
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfServerGroupSync@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfServerGroupSync@CCrywolf@@QAEXXZ PROC		; CCrywolf::CrywolfServerGroupSync, COMDAT
; _this$ = ecx
; File c:\users\michel\desktop\source\gameserver\source\mapservermanager.h

; 55   : 		if ( this->m_lpThisMapSvrData != NULL )

  00000	a1 f8 6a 01 00	 mov	 eax, DWORD PTR ?g_MapServerManager@@3VCMapServerManager@@A+92920
  00005	85 c0		 test	 eax, eax
  00007	74 06		 je	 SHORT $LN8@CrywolfSer

; 56   : 		{
; 57   : 			return m_lpThisMapSvrData->m_btMAPSVR_GROUP;

  00009	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0000d	eb 03		 jmp	 SHORT $LN7@CrywolfSer
$LN8@CrywolfSer:

; 58   : 		}
; 59   : 		return -1;

  0000f	83 c8 ff	 or	 eax, -1
$LN7@CrywolfSer:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1264 : 	GDReqCrywolfSync(g_MapServerManager.GetMapSvrGroup(),

  00012	ff 35 90 a8 0f
	00		 push	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1026192
  00018	ff 35 8c a8 0f
	00		 push	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1026188
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ?GDReqCrywolfSync@@YAXHHH@Z ; GDReqCrywolfSync
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1265 : 					 g_Crywolf.GetCrywolfState(),
; 1266 : 					 g_Crywolf.GetOccupationState());
; 1267 : }

  00027	c3		 ret	 0
?CrywolfServerGroupSync@CCrywolf@@QAEXXZ ENDP		; CCrywolf::CrywolfServerGroupSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?OperateGmCommand@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iCommand$ = 12						; size = 4
?OperateGmCommand@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::OperateGmCommand, COMDAT
; _this$ = ecx

; 1225 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1226 : 	if ( !gObjIsConnected(iUserIndex))

  00006	8b 7d 08	 mov	 edi, DWORD PTR _iUserIndex$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00011	83 c4 04	 add	 esp, 4
  00014	85 c0		 test	 eax, eax
  00016	0f 84 94 00 00
	00		 je	 $LN2@OperateGmC

; 1227 : 		return;
; 1228 : 
; 1229 : 	LogAddTD("[ Crywolf ][Use GM Command] [%s][%s] Command : %d",

  0001c	8b 5d 0c	 mov	 ebx, DWORD PTR _iCommand$[ebp]
  0001f	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  00025	53		 push	 ebx
  00026	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002c	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0002f	50		 push	 eax
  00030	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00033	50		 push	 eax
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KNFDMILM@?$FL?5Crywolf?5?$FN?$FLUse?5GM?5Command?$FN?5?$FL?$CFs?$FN@
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0003f	83 c4 10	 add	 esp, 16			; 00000010H

; 1230 : 		gObj[iUserIndex].AccountID, gObj[iUserIndex].Name, iCommand);
; 1231 : 
; 1232 : 	switch ( iCommand )

  00042	83 fb 03	 cmp	 ebx, 3
  00045	77 69		 ja	 SHORT $LN2@OperateGmC
  00047	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN16@OperateGmC[ebx*4]
$LN5@OperateGmC:

; 1233 : 	{
; 1234 : 		case 0:
; 1235 : 			this->SetState(CRYWOLF_STATE_NOTIFY_2);

  0004e	6a 02		 push	 2

; 1250 : 			}
; 1251 : 			break;
; 1252 : 
; 1253 : 		case 3:
; 1254 : 			this->SetState(CRYWOLF_STATE_END);

  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx

; 1255 : 			break;
; 1256 : 	}
; 1257 : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN6@OperateGmC:

; 1236 : 			break;
; 1237 : 
; 1238 : 		case 1:
; 1239 : 			this->SetState(CRYWOLF_STATE_READY);

  0005e	6a 03		 push	 3

; 1250 : 			}
; 1251 : 			break;
; 1252 : 
; 1253 : 		case 3:
; 1254 : 			this->SetState(CRYWOLF_STATE_END);

  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 1255 : 			break;
; 1256 : 	}
; 1257 : }

  0006a	5d		 pop	 ebp
  0006b	c2 08 00	 ret	 8
$LN7@OperateGmC:

; 1240 : 			break;
; 1241 : 
; 1242 : 		case 2:
; 1243 : 			if ( this->GetCrywolfState() == CRYWOLF_STATE_READY )

  0006e	83 be 8c a8 0f
	00 03		 cmp	 DWORD PTR [esi+1026188], 3
  00075	75 10		 jne	 SHORT $LN8@OperateGmC

; 1244 : 			{
; 1245 : 				this->SetState(CRYWOLF_STATE_START);

  00077	6a 04		 push	 4

; 1250 : 			}
; 1251 : 			break;
; 1252 : 
; 1253 : 		case 3:
; 1254 : 			this->SetState(CRYWOLF_STATE_END);

  00079	8b ce		 mov	 ecx, esi
  0007b	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx

; 1255 : 			break;
; 1256 : 	}
; 1257 : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN8@OperateGmC:

; 1246 : 			}
; 1247 : 			else
; 1248 : 			{
; 1249 : 				MsgOutput(iUserIndex, lMsg.Get(MSGGET(12, 246)));

  00087	68 f6 0c 00 00	 push	 3318			; 00000cf6H
  0008c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00091	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00096	50		 push	 eax
  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0009d	83 c4 08	 add	 esp, 8
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi
  000a2	5b		 pop	 ebx

; 1255 : 			break;
; 1256 : 	}
; 1257 : }

  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
$LN10@OperateGmC:

; 1250 : 			}
; 1251 : 			break;
; 1252 : 
; 1253 : 		case 3:
; 1254 : 			this->SetState(CRYWOLF_STATE_END);

  000a7	6a 05		 push	 5
  000a9	8b ce		 mov	 ecx, esi
  000ab	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN2@OperateGmC:
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx

; 1255 : 			break;
; 1256 : 	}
; 1257 : }

  000b3	5d		 pop	 ebp
  000b4	c2 08 00	 ret	 8
  000b7	90		 npad	 1
$LN16@OperateGmC:
  000b8	00 00 00 00	 DD	 $LN5@OperateGmC
  000bc	00 00 00 00	 DD	 $LN6@OperateGmC
  000c0	00 00 00 00	 DD	 $LN7@OperateGmC
  000c4	00 00 00 00	 DD	 $LN10@OperateGmC
?OperateGmCommand@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::OperateGmCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z PROC	; CCrywolf::MakeRewardForHeroListTop5, COMDAT
; _this$ = ecx

; 1383 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1384 : #ifdef POINTEX
; 1385 : 	g_ShopPointEx.AddEventBonus(iUserIndex, ShopPointExEvent::CW);
; 1386 : #endif
; 1387 : 	int iItemNumber = ITEMGET(14,13);
; 1388 : 
; 1389 : 	ItemSerialCreateSend(gObj[iUserIndex].m_Index,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iUserIndex$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	56		 push	 esi
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	51		 push	 ecx
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	69 f1 40 27 00
	00		 imul	 esi, ecx, 10048
  00020	6a 00		 push	 0
  00022	03 d6		 add	 edx, esi
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  0002d	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  00034	50		 push	 eax
  00035	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  0003c	50		 push	 eax
  0003d	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00044	50		 push	 eax
  00045	ff 32		 push	 DWORD PTR [edx]
  00047	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1390 : 						 gObj[iUserIndex].MapNumber,
; 1391 : 						 gObj[iUserIndex].X,
; 1392 : 						 gObj[iUserIndex].Y,
; 1393 : 						 iItemNumber, 
; 1394 : 						 0, 0, 0, 0, 0,
; 1395 : 						 iUserIndex,
; 1396 : 						 0, 0);
; 1397 : 
; 1398 : 	LogAddTD("[ Crywolf ][Reward] [Hero List Top 5] [%s][%s] Success Reward - Gem Of Bless",

  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00052	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00055	03 c6		 add	 eax, esi
  00057	50		 push	 eax
  00058	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0005b	03 c1		 add	 eax, ecx
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@OIONDCPL@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLHero?5List?5T@
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00069	83 c4 48	 add	 esp, 72			; 00000048H
  0006c	5e		 pop	 esi

; 1399 : 		gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);
; 1400 : }

  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z ENDP	; CCrywolf::MakeRewardForHeroListTop5
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iAltarUserIndex$ = 8					; size = 4
?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z PROC		; CCrywolf::MakeRewardForAltarElf, COMDAT
; _this$ = ecx

; 1360 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1361 : #ifdef POINTEX
; 1362 : 	g_ShopPointEx.AddEventBonus(iAltarUserIndex, ShopPointExEvent::CW);
; 1363 : #endif
; 1364 : 	int iItemNumber = ITEMGET(14,13);
; 1365 : 
; 1366 : 	ItemSerialCreateSend(gObj[iAltarUserIndex].m_Index,

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iAltarUserIndex$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000c	56		 push	 esi
  0000d	6a 00		 push	 0
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	51		 push	 ecx
  00016	6a 00		 push	 0
  00018	6a 00		 push	 0
  0001a	69 f1 40 27 00
	00		 imul	 esi, ecx, 10048
  00020	6a 00		 push	 0
  00022	03 d6		 add	 edx, esi
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	68 0d 1c 00 00	 push	 7181			; 00001c0dH
  0002d	0f b6 82 21 01
	00 00		 movzx	 eax, BYTE PTR [edx+289]
  00034	50		 push	 eax
  00035	0f b6 82 20 01
	00 00		 movzx	 eax, BYTE PTR [edx+288]
  0003c	50		 push	 eax
  0003d	0f b6 82 23 01
	00 00		 movzx	 eax, BYTE PTR [edx+291]
  00044	50		 push	 eax
  00045	ff 32		 push	 DWORD PTR [edx]
  00047	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 1367 : 						 gObj[iAltarUserIndex].MapNumber,
; 1368 : 						 gObj[iAltarUserIndex].X,
; 1369 : 						 gObj[iAltarUserIndex].Y,
; 1370 : 						 iItemNumber, 
; 1371 : 						 0, 0, 0, 0, 0,
; 1372 : 						 iAltarUserIndex,
; 1373 : 						 0, 0);
; 1374 : 
; 1375 : 	LogAddTD("[ Crywolf ][Reward] [Altar Elf] [%s][%s] Success Reward - Gem Of Bless",

  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00052	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00055	03 c6		 add	 eax, esi
  00057	50		 push	 eax
  00058	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0005b	03 c1		 add	 eax, ecx
  0005d	50		 push	 eax
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@DPHGHGNH@?$FL?5Crywolf?5?$FN?$FLReward?$FN?5?$FLAltar?5Elf?$FN?5@
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00069	83 c4 48	 add	 esp, 72			; 00000048H
  0006c	5e		 pop	 esi

; 1376 : 		gObj[iAltarUserIndex].AccountID, gObj[iAltarUserIndex].Name);
; 1377 : }

  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::MakeRewardForAltarElf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_bExistKiller$1$ = -4					; size = 4
_iMonIndex$ = 8						; size = 4
_iKillerIndex$ = 12					; size = 4
?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z PROC		; CCrywolf::CrywolfMonsterDieProc, COMDAT
; _this$ = ecx

; 1305 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 1306 : 	LPOBJ lpMonObj = &gObj[iMonIndex];

  00008	69 7d 08 40 27
	00 00		 imul	 edi, DWORD PTR _iMonIndex$[ebp], 10048
  0000f	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1307 : 	LPOBJ lpKillerObj = &gObj[iKillerIndex];

  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _iKillerIndex$[ebp]
  00015	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048

; 1308 : 	BOOL bExistKiller = gObjIsConnected(iKillerIndex);

  0001b	51		 push	 ecx
  0001c	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00022	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00028	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 fc	 mov	 DWORD PTR _bExistKiller$1$[ebp], eax

; 1309 : 
; 1310 : 	if ( g_Crywolf.GetCrywolfState() == CRYWOLF_STATE_START )

  00033	83 3d 8c a8 0f
	00 04		 cmp	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1026188, 4
  0003a	0f 85 06 01 00
	00		 jne	 $LN10@CrywolfMon

; 1311 : 	{
; 1312 : 		if ( lpMonObj->MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE )

  00040	80 bf 23 01 00
	00 22		 cmp	 BYTE PTR [edi+291], 34	; 00000022H
  00047	0f 85 f9 00 00
	00		 jne	 $LN10@CrywolfMon

; 1313 : 		{
; 1314 : 			if ( lpMonObj->m_iCurrentAI != 0 )

  0004d	83 bf d0 20 00
	00 00		 cmp	 DWORD PTR [edi+8400], 0
  00054	0f 84 ec 00 00
	00		 je	 $LN10@CrywolfMon

; 1315 : 			{
; 1316 : 				if ( lpMonObj->Class == 349 )

  0005a	b9 5d 01 00 00	 mov	 ecx, 349		; 0000015dH
  0005f	56		 push	 esi
  00060	66 39 8f 90 00
	00 00		 cmp	 WORD PTR [edi+144], cx
  00067	75 61		 jne	 SHORT $LN7@CrywolfMon

; 1317 : 				{
; 1318 : 					if ( bExistKiller )
; 1319 : 					{
; 1320 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 247)), lpKillerObj->Name);

  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0006e	85 c0		 test	 eax, eax
  00070	74 30		 je	 SHORT $LN6@CrywolfMon
  00072	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  00075	56		 push	 esi
  00076	68 f7 0c 00 00	 push	 3319			; 00000cf7H
  0007b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00080	50		 push	 eax
  00081	6a 02		 push	 2
  00083	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00088	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 1321 : 
; 1322 : 						LogAddTD("[ Crywolf ][MVP] [Balgars Dead] by [%s][%s]",

  0008d	56		 push	 esi
  0008e	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LJMIJMJD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0009d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1323 : 							lpKillerObj->AccountID, lpKillerObj->Name);
; 1324 : 					}
; 1325 : 					else

  000a0	eb 25		 jmp	 SHORT $LN15@CrywolfMon
$LN6@CrywolfMon:

; 1326 : 					{
; 1327 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 248)));

  000a2	68 f8 0c 00 00	 push	 3320			; 00000cf8H
  000a7	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000ac	50		 push	 eax
  000ad	6a 02		 push	 2
  000af	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000b4	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 1328 : 
; 1329 : 						LogAddTD("[ Crywolf ][MVP] [Balgars Dead] by Unknown User");

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@MJIDIBEJ@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLBalgars?5Dead?$FN?5@
  000be	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@CrywolfMon:
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _bExistKiller$1$[ebp]
$LN7@CrywolfMon:

; 1330 : 					}
; 1331 : 				}
; 1332 : 
; 1333 : 				if ( lpMonObj->Class == 340 )

  000ca	b9 54 01 00 00	 mov	 ecx, 340		; 00000154H
  000cf	66 39 8f 90 00
	00 00		 cmp	 WORD PTR [edi+144], cx
  000d6	75 3d		 jne	 SHORT $LN9@CrywolfMon

; 1334 : 				{
; 1335 : 					if ( bExistKiller )

  000d8	85 c0		 test	 eax, eax
  000da	74 39		 je	 SHORT $LN9@CrywolfMon

; 1336 : 					{
; 1337 : 						UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 249)),

  000dc	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  000df	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000e4	56		 push	 esi
  000e5	ff b7 dc 20 00
	00		 push	 DWORD PTR [edi+8412]
  000eb	68 f9 0c 00 00	 push	 3321			; 00000cf9H
  000f0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000f5	50		 push	 eax
  000f6	6a 02		 push	 2
  000f8	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000fd	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 1338 : 							lpMonObj->m_iGroupNumber, lpKillerObj->Name);
; 1339 : 
; 1340 : 						LogAddTD("[ Crywolf ][MVP] [DarkElf Dead] by [%s][%s]",

  00102	56		 push	 esi
  00103	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00106	50		 push	 eax
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@BMPBNGOB@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5?$FLDarkElf?5Dead?$FN?5@
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00112	83 c4 20	 add	 esp, 32			; 00000020H
$LN9@CrywolfMon:

; 1341 : 							lpKillerObj->AccountID, lpKillerObj->Name);
; 1342 : 					}
; 1343 : 				}
; 1344 : 		
; 1345 : 				int iScore = this->CalcGettingScore(iKillerIndex, iMonIndex, 100);

  00115	8b 75 0c	 mov	 esi, DWORD PTR _iKillerIndex$[ebp]
  00118	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011b	6a 64		 push	 100			; 00000064H
  0011d	ff 75 08	 push	 DWORD PTR _iMonIndex$[ebp]
  00120	56		 push	 esi
  00121	e8 00 00 00 00	 call	 ?CalcGettingScore@CCrywolf@@QAEHHHH@Z ; CCrywolf::CalcGettingScore

; 1346 : 
; 1347 : 
; 1348 : 				if ( iScore != -1 )

  00126	83 f8 ff	 cmp	 eax, -1
  00129	74 1a		 je	 SHORT $LN14@CrywolfMon

; 1349 : 				{
; 1350 : 					MsgOutput(iKillerIndex, lMsg.Get(MSGGET(12, 250)), iScore);

  0012b	50		 push	 eax
  0012c	68 fa 0c 00 00	 push	 3322			; 00000cfaH
  00131	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00136	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0013b	50		 push	 eax
  0013c	56		 push	 esi
  0013d	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@CrywolfMon:
  00145	5e		 pop	 esi
$LN10@CrywolfMon:
  00146	5f		 pop	 edi
  00147	5b		 pop	 ebx

; 1351 : 				}
; 1352 : 			}
; 1353 : 		}
; 1354 : 	}
; 1355 : }

  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
?CrywolfMonsterDieProc@CCrywolf@@QAEXHH@Z ENDP		; CCrywolf::CrywolfMonsterDieProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ PROC	; CCrywolf::CreateCrywolfCommonMonster, COMDAT
; _this$ = ecx

; 436  : {

  00000	53		 push	 ebx

; 437  : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  00001	ba cc 00 00 00	 mov	 edx, 204		; 000000ccH
  00006	33 db		 xor	 ebx, ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	bf 06 00 00 00	 mov	 edi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+6
  0000f	8d 72 35	 lea	 esi, DWORD PTR [edx+53]
$LL4@CreateCryw:

; 438  : 	{
; 439  : 		if ( CHECK_CLASS(gMSetBase.m_Mp[n].m_MapNumber, MAP_INDEX_CRYWOLF_FIRSTZONE) )

  00012	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  00015	3c 22		 cmp	 al, 34			; 00000022H
  00017	0f 85 9c 00 00
	00		 jne	 $LN2@CreateCryw

; 440  : 		{
; 441  : 			if ( gMSetBase.m_Mp[n].m_Type >= 204 && gMSetBase.m_Mp[n].m_Type <= 257 )

  0001d	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00020	66 3b ca	 cmp	 cx, dx
  00023	72 09		 jb	 SHORT $LN6@CreateCryw
  00025	66 3b ce	 cmp	 cx, si
  00028	0f 86 8b 00 00
	00		 jbe	 $LN2@CreateCryw
$LN6@CreateCryw:

; 442  : 				continue;
; 443  : 
; 444  : 			int iIndex = gObjAddMonster(gMSetBase.m_Mp[n].m_MapNumber);

  0002e	0f b6 c0	 movzx	 eax, al
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00037	0f bf f0	 movsx	 esi, ax
  0003a	83 c4 04	 add	 esp, 4

; 445  : 
; 446  : 			if ( iIndex >= 0 )

  0003d	85 f6		 test	 esi, esi
  0003f	78 70		 js	 SHORT $LN22@CreateCryw

; 447  : 			{
; 448  : 				if ( gObjSetPosMonster(iIndex, n) == FALSE )

  00041	53		 push	 ebx
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster
  00048	83 c4 08	 add	 esp, 8
  0004b	85 c0		 test	 eax, eax
  0004d	75 0b		 jne	 SHORT $LN8@CreateCryw

; 449  : 				{
; 450  : 					gObjDel(iIndex);

  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00055	83 c4 04	 add	 esp, 4

; 451  : 					continue;

  00058	eb 57		 jmp	 SHORT $LN22@CreateCryw
$LN8@CreateCryw:

; 452  : 				}
; 453  : 				
; 454  : 				if ( gObjSetMonster(iIndex, gMSetBase.m_Mp[n].m_Type) == FALSE )

  0005a	0f b7 07	 movzx	 eax, WORD PTR [edi]
  0005d	50		 push	 eax
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  00064	83 c4 08	 add	 esp, 8
  00067	85 c0		 test	 eax, eax
  00069	75 0b		 jne	 SHORT $LN9@CreateCryw

; 455  : 				{
; 456  : 					gObjDel(iIndex);

  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00071	83 c4 04	 add	 esp, 4

; 457  : 					continue;

  00074	eb 3b		 jmp	 SHORT $LN22@CreateCryw
$LN9@CreateCryw:

; 458  : 				}
; 459  : 
; 460  : 				if ( gObj[iIndex].Type == OBJ_NPC )

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007b	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00081	8a 44 01 50	 mov	 al, BYTE PTR [ecx+eax+80]
  00085	3c 03		 cmp	 al, 3
  00087	75 0b		 jne	 SHORT $LN10@CreateCryw

; 461  : 				{
; 462  : 					gObjDel(iIndex);

  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0008f	83 c4 04	 add	 esp, 4

; 463  : 					continue;

  00092	eb 1d		 jmp	 SHORT $LN22@CreateCryw
$LN10@CreateCryw:

; 464  : 				}
; 465  : 
; 466  : 				if ( gObj[iIndex].Type == OBJ_MONSTER )

  00094	3c 02		 cmp	 al, 2
  00096	75 19		 jne	 SHORT $LN22@CreateCryw
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h

; 37   : 		if ( this->m_iObjCount >= MAX_CRYWOLF_OBJ_INFO )

  00098	a1 fc b1 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1028604
  0009d	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  000a2	7d 0d		 jge	 SHORT $LN22@CreateCryw

; 38   : 		{
; 39   : 			return FALSE;
; 40   : 		}
; 41   : 
; 42   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  000a4	89 34 85 00 b2
	0f 00		 mov	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A[eax*4+1028608], esi

; 43   : 		this->m_iObjCount++;

  000ab	ff 05 fc b1 0f
	00		 inc	 DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1028604
$LN22@CreateCryw:
  000b1	ba cc 00 00 00	 mov	 edx, 204		; 000000ccH
  000b6	8d 72 35	 lea	 esi, DWORD PTR [edx+53]
$LN2@CreateCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 437  : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  000b9	83 c7 14	 add	 edi, 20			; 00000014H
  000bc	43		 inc	 ebx
  000bd	81 ff 56 34 03
	00		 cmp	 edi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+210006
  000c3	0f 8c 49 ff ff
	ff		 jl	 $LL4@CreateCryw

; 467  : 				{
; 468  : 					g_Crywolf.m_ObjCommonMonster.AddObj(iIndex);
; 469  : 				}
; 470  : 			}
; 471  : 		}
; 472  : 	}
; 473  : }

  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	c3		 ret	 0
?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ ENDP	; CCrywolf::CreateCrywolfCommonMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ PROC	; CCrywolf::RemoveCrywolfCommonMonster, COMDAT
; _this$ = ecx

; 425  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 426  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  00004	33 f6		 xor	 esi, esi
  00006	57		 push	 edi
  00007	39 b3 fc b1 0f
	00		 cmp	 DWORD PTR [ebx+1028604], esi
  0000d	7e 1c		 jle	 SHORT $LN3@RemoveCryw
  0000f	8d bb 00 b2 0f
	00		 lea	 edi, DWORD PTR [ebx+1028608]
$LL4@RemoveCryw:

; 427  : 	{
; 428  : 		gObjDel(this->m_ObjCommonMonster.m_iObjIndex[i]);

  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  0001c	46		 inc	 esi
  0001d	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  00020	83 c4 04	 add	 esp, 4
  00023	3b b3 fc b1 0f
	00		 cmp	 esi, DWORD PTR [ebx+1028604]
  00029	7c ea		 jl	 SHORT $LL4@RemoveCryw
$LN3@RemoveCryw:

; 429  : 	}
; 430  : 
; 431  : 	this->m_ObjCommonMonster.Reset();

  0002b	8d bb 00 b2 0f
	00		 lea	 edi, DWORD PTR [ebx+1028608]
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h

; 29   : 			this->m_iObjIndex[i] = -1;

  00031	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00036	83 c8 ff	 or	 eax, -1
  00039	f3 ab		 rep stosd
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  0003d	c7 83 fc b1 0f
	00 00 00 00 00	 mov	 DWORD PTR [ebx+1028604], 0
  00047	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 432  : }

  00048	c3		 ret	 0
?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ENDP	; CCrywolf::RemoveCrywolfCommonMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z
_TEXT	SEGMENT
_iMonsterState$ = 8					; size = 4
_iMode$ = 12						; size = 4
?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z PROC ; CCrywolf::SetCrywolfAllCommonMonsterState, COMDAT
; _this$ = ecx

; 413  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 414  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  00004	33 f6		 xor	 esi, esi
  00006	39 b3 fc b1 0f
	00		 cmp	 DWORD PTR [ebx+1028604], esi
  0000c	7e 22		 jle	 SHORT $LN12@SetCrywolf
  0000e	57		 push	 edi
  0000f	8d bb 00 b2 0f
	00		 lea	 edi, DWORD PTR [ebx+1028608]
$LL4@SetCrywolf:

; 415  : 	{
; 416  : 		if ( !gObjIsConnected(this->m_ObjCommonMonster.m_iObjIndex[i]) )

  00015	ff 37		 push	 DWORD PTR [edi]
  00017	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0001c	83 c4 04	 add	 esp, 4
  0001f	85 c0		 test	 eax, eax
  00021	74 0c		 je	 SHORT $LN13@SetCrywolf

; 414  : 	for ( int i=0;i<this->m_ObjCommonMonster.m_iObjCount ; i++)

  00023	46		 inc	 esi
  00024	83 c7 04	 add	 edi, 4
  00027	3b b3 fc b1 0f
	00		 cmp	 esi, DWORD PTR [ebx+1028604]
  0002d	7c e6		 jl	 SHORT $LL4@SetCrywolf
$LN13@SetCrywolf:
  0002f	5f		 pop	 edi
$LN12@SetCrywolf:
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 417  : 			break;
; 418  : 
; 419  : 		LPOBJ lpObj = &gObj[this->m_ObjCommonMonster.m_iObjIndex[i]];
; 420  : 	}
; 421  : }

  00032	c2 08 00	 ret	 8
?SetCrywolfAllCommonMonsterState@CCrywolf@@QAEXHH@Z ENDP ; CCrywolf::SetCrywolfAllCommonMonsterState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iOccupationState$ = 8					; size = 4
?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfMapAttr, COMDAT
; _this$ = ecx

; 374  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 375  : 	if ( iOccupationState < 0 || iOccupationState >= 3 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iOccupationState$[ebp]
  00006	83 fa 02	 cmp	 edx, 2
  00009	77 3c		 ja	 SHORT $LN3@SetCrywolf

; 376  : 		return;
; 377  : 
; 378  : 	MapClass * CrywolfMap = &this->m_CrywolfMapAttr[iOccupationState];

  0000b	69 c2 28 38 05
	00		 imul	 eax, edx, 342056

; 379  : 
; 380  : 	if ( CHECK_CLASS(CrywolfMap->thisMapNumber, MAP_INDEX_CRYWOLF_FIRSTZONE) == FALSE )

  00011	83 bc 08 38 38
	05 00 22	 cmp	 DWORD PTR [eax+ecx+342072], 34 ; 00000022H
  00019	74 15		 je	 SHORT $LN4@SetCrywolf

; 381  : 	{
; 382  : 		LogAddC(2, "[ Crywolf ] Fail - Chang Map Attribute (State:%d) ", iOccupationState);

  0001b	52		 push	 edx
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@EKKMMEJN@?$FL?5Crywolf?5?$FN?5Fail?5?9?5Chang?5Map?5Att@
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 383  : 		return;
; 384  : 	}
; 385  : 
; 386  : 	memcpy(MapC[MAP_INDEX_CRYWOLF_FIRSTZONE].m_attrbuf, CrywolfMap->m_attrbuf, 256*256);

  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN4@SetCrywolf:

; 383  : 		return;
; 384  : 	}
; 385  : 
; 386  : 	memcpy(MapC[MAP_INDEX_CRYWOLF_FIRSTZONE].m_attrbuf, CrywolfMap->m_attrbuf, 256*256);

  00030	68 00 00 01 00	 push	 65536			; 00010000H
  00035	ff 74 08 24	 push	 DWORD PTR [eax+ecx+36]
  00039	ff 35 60 75 b1
	00		 push	 DWORD PTR ?MapC@@3PAVMapClass@@A+11629920
  0003f	e8 00 00 00 00	 call	 _memcpy
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SetCrywolf:

; 387  : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfMapAttr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iOccupationState$ = 8					; size = 4
?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfCommonNPC, COMDAT
; _this$ = ecx

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	57		 push	 edi

; 392  : 	for ( int i=0;i<this->m_ObjCommonNPC.m_iObjCount ; i++)

  00007	33 ff		 xor	 edi, edi
  00009	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000c	39 b8 94 a8 0f
	00		 cmp	 DWORD PTR [eax+1026196], edi
  00012	7e 67		 jle	 SHORT $LN16@SetCrywolf
  00014	53		 push	 ebx
  00015	8b 5d 08	 mov	 ebx, DWORD PTR _iOccupationState$[ebp]
  00018	56		 push	 esi
  00019	8d b0 98 a8 0f
	00		 lea	 esi, DWORD PTR [eax+1026200]
  0001f	90		 npad	 1
$LL4@SetCrywolf:

; 393  : 	{
; 394  : 		if ( !gObjIsConnected(this->m_ObjCommonNPC.m_iObjIndex[i]) )

  00020	ff 36		 push	 DWORD PTR [esi]
  00022	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00027	83 c4 04	 add	 esp, 4
  0002a	85 c0		 test	 eax, eax
  0002c	74 4b		 je	 SHORT $LN17@SetCrywolf

; 395  : 			break;
; 396  : 
; 397  : 		LPOBJ lpObj = &gObj[this->m_ObjCommonNPC.m_iObjIndex[i]];

  0002e	69 06 40 27 00
	00		 imul	 eax, DWORD PTR [esi], 10048
  00034	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 398  : 
; 399  : 		if( iOccupationState == CRYWOLF_STATE_NOTIFY_2 ||

  0003a	83 fb 02	 cmp	 ebx, 2
  0003d	74 16		 je	 SHORT $LN8@SetCrywolf
  0003f	83 fb 01	 cmp	 ebx, 1
  00042	74 11		 je	 SHORT $LN8@SetCrywolf

; 403  : 		}
; 404  : 		else if( iOccupationState == CRYWOLF_STATE_NONE )

  00044	85 db		 test	 ebx, ebx
  00046	75 22		 jne	 SHORT $LN2@SetCrywolf

; 405  : 		{
; 406  : 			gObjRemoveBuffEffect(lpObj,BUFF_CRYWOLF_TRANSPARENCY);

  00048	6a 1b		 push	 27			; 0000001bH
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  00050	83 c4 08	 add	 esp, 8
  00053	eb 15		 jmp	 SHORT $LN2@SetCrywolf
$LN8@SetCrywolf:

; 400  : 			iOccupationState == CRYWOLF_STATE_NOTIFY_1 )
; 401  : 		{
; 402  : 			gObjAddBuffEffect(lpObj,BUFF_CRYWOLF_TRANSPARENCY,0,0,0,0,-10);

  00055	6a f6		 push	 -10			; fffffff6H
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	6a 00		 push	 0
  0005d	6a 00		 push	 0
  0005f	6a 1b		 push	 27			; 0000001bH
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00067	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN2@SetCrywolf:

; 392  : 	for ( int i=0;i<this->m_ObjCommonNPC.m_iObjCount ; i++)

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0006d	47		 inc	 edi
  0006e	83 c6 04	 add	 esi, 4
  00071	3b b8 94 a8 0f
	00		 cmp	 edi, DWORD PTR [eax+1026196]
  00077	7c a7		 jl	 SHORT $LL4@SetCrywolf
$LN17@SetCrywolf:
  00079	5e		 pop	 esi
  0007a	5b		 pop	 ebx
$LN16@SetCrywolf:
  0007b	5f		 pop	 edi

; 407  : 		}
; 408  : 	}
; 409  : }

  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfCommonNPC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?TurnUpBoss@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?TurnUpBoss@CCrywolf@@QAEXXZ PROC			; CCrywolf::TurnUpBoss, COMDAT
; _this$ = ecx

; 488  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 489  : 	TMonsterAIGroup::Init(this->m_iBossGroupNumber);

  00003	ff b6 78 c0 0f
	00		 push	 DWORD PTR [esi+1032312]
  00009	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init

; 490  : 	TMonsterAIGroup::ChangeAIOrder(this->m_iBossGroupNumber, 1);

  0000e	6a 01		 push	 1
  00010	ff b6 78 c0 0f
	00		 push	 DWORD PTR [esi+1032312]
  00016	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder

; 491  : 	this->m_iBossIndex = TMonsterAIGroup::FindGroupLeader(this->m_iBossGroupNumber);

  0001b	ff b6 78 c0 0f
	00		 push	 DWORD PTR [esi+1032312]
  00021	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	89 86 74 c0 0f
	00		 mov	 DWORD PTR [esi+1032308], eax
  0002f	5e		 pop	 esi

; 492  : }

  00030	c3		 ret	 0
?TurnUpBoss@CCrywolf@@QAEXXZ ENDP			; CCrywolf::TurnUpBoss
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ChangeAI@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iAIOrder$ = 8						; size = 4
?ChangeAI@CCrywolf@@QAEXH@Z PROC			; CCrywolf::ChangeAI, COMDAT
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 479  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00007	33 f6		 xor	 esi, esi
  00009	39 b3 6c c0 0f
	00		 cmp	 DWORD PTR [ebx+1032300], esi
  0000f	7e 29		 jle	 SHORT $LN3@ChangeAI
  00011	57		 push	 edi
  00012	8d bb 1c c0 0f
	00		 lea	 edi, DWORD PTR [ebx+1032220]
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@ChangeAI:

; 480  : 	{
; 481  : 		TMonsterAIGroup::ChangeAIOrder(this->m_iMonsterGroupNumberArray[n], iAIOrder);

  00020	ff 75 08	 push	 DWORD PTR _iAIOrder$[ebp]
  00023	ff 37		 push	 DWORD PTR [edi]
  00025	e8 00 00 00 00	 call	 ?ChangeAIOrder@TMonsterAIGroup@@SAXHH@Z ; TMonsterAIGroup::ChangeAIOrder
  0002a	46		 inc	 esi
  0002b	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  0002e	83 c4 08	 add	 esp, 8
  00031	3b b3 6c c0 0f
	00		 cmp	 esi, DWORD PTR [ebx+1032300]
  00037	7c e7		 jl	 SHORT $LL4@ChangeAI
  00039	5f		 pop	 edi
$LN3@ChangeAI:
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx

; 482  : 	}
; 483  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?ChangeAI@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::ChangeAI
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
$T2 = -6044						; size = 8
_this$1$ = -6036					; size = 4
$T3 = -6036						; size = 1
$T4 = -6036						; size = 4
_iHeroCount$1$ = -6032					; size = 4
_HeroSet$ = -6028					; size = 8
_j$1$ = -6020						; size = 4
$T5 = -6020						; size = 4
_cBUFFER$ = -6016					; size = 6000
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ PROC		; CCrywolf::NotifyCrywolfHeroList, COMDAT
; _this$ = ecx

; 1172 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 90 17 00 00	 mov	 eax, 6032		; 00001790H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	89 8d 6c e8 ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx

; 1173 : using namespace std;
; 1174 : 	char cBUFFER[6000];
; 1175 : 	int iHeroCount = 0;

  00038	33 c0		 xor	 eax, eax

; 1176 : 	memset(cBUFFER, 0, sizeof(cBUFFER));

  0003a	68 70 17 00 00	 push	 6000			; 00001770H
  0003f	50		 push	 eax
  00040	89 85 70 e8 ff
	ff		 mov	 DWORD PTR _iHeroCount$1$[ebp], eax
  00046	8d 85 80 e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _memset
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00055	c7 85 74 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _HeroSet$[ebp], 0

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  0005f	8d 8d 74 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]

; 568  : 		this->_Mysize = 0;

  00065	c7 85 78 e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _HeroSet$[ebp+4], 0

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  0006f	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAEPAU?$_Tree_node@PAUOBJECTSTRUCT@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Buyheadnode
  00074	89 85 74 e8 ff
	ff		 mov	 DWORD PTR _HeroSet$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1179 : 	set<LPOBJ,CCrywolfScoreSort> HeroSet;

  0007a	8b bd 6c e8 ff
	ff		 mov	 edi, DWORD PTR $T3[ebp]
  00080	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00085	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008c	0f 1f 40 00	 npad	 4
$LL4@NotifyCryw:

; 1182 : 	{
; 1183 : 		if ( gObj[i].Connected == PLAYER_PLAYING &&
; 1184 : 			 gObj[i].Type == OBJ_USER &&

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00095	03 c6		 add	 eax, esi
  00097	83 78 04 03	 cmp	 DWORD PTR [eax+4], 3
  0009b	75 31		 jne	 SHORT $LN2@NotifyCryw
  0009d	80 78 50 01	 cmp	 BYTE PTR [eax+80], 1
  000a1	75 2b		 jne	 SHORT $LN2@NotifyCryw
  000a3	80 b8 23 01 00
	00 22		 cmp	 BYTE PTR [eax+291], 34	; 00000022H
  000aa	75 22		 jne	 SHORT $LN2@NotifyCryw

; 1185 : 			 gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)
; 1186 : 		{
; 1187 : 			HeroSet.insert(&gObj[i]);

  000ac	89 85 7c e8 ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1078 : 		return (_Insert_nohint(false,

  000b2	8d 8d 74 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  000b8	57		 push	 edi
  000b9	8d 85 7c e8 ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000bf	50		 push	 eax
  000c0	6a 00		 push	 0
  000c2	8d 85 64 e8 ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000c8	50		 push	 eax
  000c9	e8 00 00 00 00	 call	 ??$_Insert_nohint@PAUOBJECTSTRUCT@@U_Nil@std@@@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@std@@_N@1@_N$$QAPAUOBJECTSTRUCT@@U_Nil@1@@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::_Insert_nohint<OBJECTSTRUCT *,std::_Nil>
$LN2@NotifyCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1181 : 	for (int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000ce	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000d4	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  000da	7c b4		 jl	 SHORT $LL4@NotifyCryw
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  000dc	8b 85 74 e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp]
  000e2	8d bd 95 e8 ff
	ff		 lea	 edi, DWORD PTR _cBUFFER$[ebp+21]
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1193 : 	for(int j = 0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  000e8	c7 85 7c e8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$1$[ebp], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  000f2	8b 30		 mov	 esi, DWORD PTR [eax]
$LL112@NotifyCryw:

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  000f4	3b f0		 cmp	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1193 : 	for(int j = 0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  000f6	0f 84 d6 00 00
	00		 je	 $LN374@NotifyCryw

; 1194 : 	{
; 1195 : 		LPOBJ lpHeroObj = *_Itor;

  000fc	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 1196 : 
; 1197 : 		lpMsgBody[j].iRank = iHeroCount;

  000ff	8b 95 70 e8 ff
	ff		 mov	 edx, DWORD PTR _iHeroCount$1$[ebp]

; 1198 : 		lpMsgBody[j].btHeroClass = (BYTE)lpHeroObj->Class;
; 1199 : 		lpMsgBody[j].iHeroScore = lpHeroObj->m_iCrywolfMVPScore;
; 1200 : 		memcpy(lpMsgBody[j].szHeroName, lpHeroObj->Name, MAX_ACCOUNT_LEN);

  00105	8d 4b 5d	 lea	 ecx, DWORD PTR [ebx+93]
  00108	88 57 f0	 mov	 BYTE PTR [edi-16], dl

; 1201 : 		iHeroCount++;

  0010b	42		 inc	 edx

; 1202 : 
; 1203 : 		LogAddTD("[ Crywolf ][Hero List] [%s][%s] Score(%d) Ranking(%d)",

  0010c	52		 push	 edx
  0010d	8a 83 90 00 00
	00		 mov	 al, BYTE PTR [ebx+144]
  00113	88 07		 mov	 BYTE PTR [edi], al
  00115	8b 83 18 24 00
	00		 mov	 eax, DWORD PTR [ebx+9240]
  0011b	89 47 fc	 mov	 DWORD PTR [edi-4], eax
  0011e	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00122	66 0f d6 47 f1	 movq	 QWORD PTR [edi-15], xmm0
  00127	66 8b 41 08	 mov	 ax, WORD PTR [ecx+8]
  0012b	66 89 47 f9	 mov	 WORD PTR [edi-7], ax
  0012f	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00132	ff b3 18 24 00
	00		 push	 DWORD PTR [ebx+9240]
  00138	89 95 70 e8 ff
	ff		 mov	 DWORD PTR _iHeroCount$1$[ebp], edx
  0013e	51		 push	 ecx
  0013f	50		 push	 eax
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@NLAFNDEH@?$FL?5Crywolf?5?$FN?$FLHero?5List?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5@
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1204 : 			lpHeroObj->AccountID, lpHeroObj->Name, lpHeroObj->m_iCrywolfMVPScore, iHeroCount);
; 1205 : 
; 1206 : 		if ( this->GetOccupationState() != 1 )

  0014b	8b 85 6c e8 ff
	ff		 mov	 eax, DWORD PTR _this$1$[ebp]
  00151	83 c4 14	 add	 esp, 20			; 00000014H
  00154	83 b8 90 a8 0f
	00 01		 cmp	 DWORD PTR [eax+1026192], 1
  0015b	74 0f		 je	 SHORT $LN5@NotifyCryw

; 1207 : 		{
; 1208 : 			if ( lpMsgBody[j].iRank <= 5 )

  0015d	80 7f f0 05	 cmp	 BYTE PTR [edi-16], 5
  00161	77 09		 ja	 SHORT $LN5@NotifyCryw

; 1209 : 			{
; 1210 : 				this->MakeRewardForHeroListTop5(lpHeroObj->m_Index);

  00163	ff 33		 push	 DWORD PTR [ebx]
  00165	8b c8		 mov	 ecx, eax
  00167	e8 00 00 00 00	 call	 ?MakeRewardForHeroListTop5@CCrywolf@@QAEXH@Z ; CCrywolf::MakeRewardForHeroListTop5
$LN5@NotifyCryw:

; 1193 : 	for(int j = 0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  0016c	8b 8d 7c e8 ff
	ff		 mov	 ecx, DWORD PTR _j$1$[ebp]
  00172	83 c7 14	 add	 edi, 20			; 00000014H
  00175	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00176	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1193 : 	for(int j = 0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  0017a	89 8d 7c e8 ff
	ff		 mov	 DWORD PTR _j$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00180	75 40		 jne	 SHORT $LN361@NotifyCryw

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00182	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  00185	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00189	75 16		 jne	 SHORT $LN357@NotifyCryw

; 63   : 			_Ptr = _Mytree::_Min(

  0018b	8b f0		 mov	 esi, eax

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0018d	8b 06		 mov	 eax, DWORD PTR [esi]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0018f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00193	75 2d		 jne	 SHORT $LN361@NotifyCryw
$LL123@NotifyCryw:

; 615  : 			_Pnode = _Left(_Pnode);

  00195	8b f0		 mov	 esi, eax

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00197	8b 06		 mov	 eax, DWORD PTR [esi]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00199	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0019d	74 f6		 je	 SHORT $LL123@NotifyCryw

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0019f	eb 21		 jmp	 SHORT $LN361@NotifyCryw
$LN357@NotifyCryw:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  001a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001a4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001a8	75 16		 jne	 SHORT $LN108@NotifyCryw
  001aa	66 0f 1f 44 00
	00		 npad	 6
$LL107@NotifyCryw:
  001b0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  001b3	75 0b		 jne	 SHORT $LN108@NotifyCryw

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  001b5	8b f0		 mov	 esi, eax
  001b7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001be	74 f0		 je	 SHORT $LL107@NotifyCryw
$LN108@NotifyCryw:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  001c0	8b f0		 mov	 esi, eax
$LN361@NotifyCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1193 : 	for(int j = 0;j<5&& _Itor != HeroSet.end();j++, _Itor++)

  001c2	83 f9 05	 cmp	 ecx, 5
  001c5	7d 0b		 jge	 SHORT $LN374@NotifyCryw
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  001c7	8b 85 74 e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp]
  001cd	e9 22 ff ff ff	 jmp	 $LL112@NotifyCryw
$LN374@NotifyCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1215 : 	lpMsg->btCount = iHeroCount;

  001d2	8b 85 70 e8 ff
	ff		 mov	 eax, DWORD PTR _iHeroCount$1$[ebp]
  001d8	88 85 84 e8 ff
	ff		 mov	 BYTE PTR _cBUFFER$[ebp+4], al

; 1216 : 
; 1217 : 	PHeadSubSetB((LPBYTE)lpMsg, 0xBD, 0x08, iHeroCount*sizeof(PMSG_ANS_CRYWOLF_HERO_LIST_INFO) + sizeof(PMSG_ANS_CRYWOLF_HERO_LIST_INFO_COUNT));

  001de	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001e1	8d 04 85 05 00
	00 00		 lea	 eax, DWORD PTR [eax*4+5]
  001e8	50		 push	 eax
  001e9	6a 08		 push	 8
  001eb	8d 85 80 e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  001f1	68 bd 00 00 00	 push	 189			; 000000bdH
  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1218 : 
; 1219 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)lpMsg, lpMsg->h.size);

  001fc	0f b6 85 81 e8
	ff ff		 movzx	 eax, BYTE PTR _cBUFFER$[ebp+1]
  00203	83 c4 10	 add	 esp, 16			; 00000010H
  00206	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0020b	50		 push	 eax
  0020c	8d 85 80 e8 ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$[ebp]
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00218	8b 85 74 e8 ff
	ff		 mov	 eax, DWORD PTR _HeroSet$[ebp]

; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  0021e	8d 8d 74 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  00224	50		 push	 eax
  00225	ff 30		 push	 DWORD PTR [eax]
  00227	8d 85 6c e8 ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@$0A@@std@@@std@@QAE?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAUOBJECTSTRUCT@@@std@@@std@@@2@V32@0@Z ; std::_Tree<std::_Tset_traits<OBJECTSTRUCT *,CCrywolfScoreSort,std::allocator<OBJECTSTRUCT *>,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00233	ff b5 74 e8 ff
	ff		 push	 DWORD PTR _HeroSet$[ebp]
  00239	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0023e	83 c4 04	 add	 esp, 4
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1220 : }

  00241	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00244	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024b	59		 pop	 ecx
  0024c	5f		 pop	 edi
  0024d	5e		 pop	 esi
  0024e	5b		 pop	 ebx
  0024f	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00252	33 cd		 xor	 ecx, ebp
  00254	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ$0:
  00000	8d 8d 74 e8 ff
	ff		 lea	 ecx, DWORD PTR _HeroSet$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$set@PAUOBJECTSTRUCT@@VCCrywolfScoreSort@@V?$allocator@PAUOBJECTSTRUCT@@@std@@@std@@QAE@XZ
__ehhandler$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 60 e8 ff
	ff		 mov	 ecx, DWORD PTR [edx-6048]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ ENDP		; CCrywolf::NotifyCrywolfHeroList
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfPersonalRank, COMDAT
; _this$ = ecx

; 1116 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi

; 1117 : 	PMSG_ANS_CRYWOLF_PERSONAL_RANK pMsg;
; 1118 : 
; 1119 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x07, sizeof(pMsg));

  00013	6a 0c		 push	 12			; 0000000cH
  00015	6a 07		 push	 7
  00017	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0001a	8b d9		 mov	 ebx, ecx
  0001c	68 bd 00 00 00	 push	 189			; 000000bdH
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00027	83 c4 10	 add	 esp, 16			; 00000010H

; 1120 : 	pMsg.btRank = 0;

  0002a	c6 45 f4 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 1121 : 
; 1122 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0002e	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00033	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@NotifyCryw:

; 1123 : 	{
; 1124 : 		if ( gObj[i].Connected == PLAYER_PLAYING &&
; 1125 : 			 gObj[i].Type == OBJ_USER &&

  00040	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00045	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0004a	0f 85 ae 00 00
	00		 jne	 $LN2@NotifyCryw
  00050	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00055	0f 85 a3 00 00
	00		 jne	 $LN2@NotifyCryw
  0005b	80 bc 06 23 01
	00 00 22	 cmp	 BYTE PTR [esi+eax+291], 34 ; 00000022H
  00063	0f 85 95 00 00
	00		 jne	 $LN2@NotifyCryw

; 1126 : 			 gObj[i].MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE)
; 1127 : 		{
; 1128 : 			pMsg.btRank = this->CalcGettingRank(i);

  00069	57		 push	 edi
  0006a	8b cb		 mov	 ecx, ebx
  0006c	e8 00 00 00 00	 call	 ?CalcGettingRank@CCrywolf@@QAEHH@Z ; CCrywolf::CalcGettingRank
  00071	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1129 : 			pMsg.iGettingExp = this->CalcGettingRewardExp(i, pMsg.btRank);

  00074	8b cb		 mov	 ecx, ebx
  00076	0f b6 c0	 movzx	 eax, al
  00079	50		 push	 eax
  0007a	57		 push	 edi
  0007b	e8 00 00 00 00	 call	 ?CalcGettingRewardExp@CCrywolf@@QAEHHH@Z ; CCrywolf::CalcGettingRewardExp

; 1130 : 
; 1131 : 			this->GiveRewardExp(i, pMsg.iGettingExp);

  00080	50		 push	 eax
  00081	57		 push	 edi
  00082	8b cb		 mov	 ecx, ebx
  00084	89 45 f8	 mov	 DWORD PTR _pMsg$[ebp+8], eax
  00087	e8 00 00 00 00	 call	 ?GiveRewardExp@CCrywolf@@QAEXHH@Z ; CCrywolf::GiveRewardExp

; 1132 : 
; 1133 : 			MsgOutput(i, lMsg.Get(MSGGET(12, 244)), pMsg.btRank);

  0008c	0f b6 45 f4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00090	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00095	50		 push	 eax
  00096	68 f4 0c 00 00	 push	 3316			; 00000cf4H
  0009b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a0	50		 push	 eax
  000a1	57		 push	 edi
  000a2	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1134 : 			MsgOutput(i, lMsg.Get(MSGGET(12, 245)), pMsg.iGettingExp);

  000aa	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000af	ff 75 f8	 push	 DWORD PTR _pMsg$[ebp+8]
  000b2	68 f5 0c 00 00	 push	 3317			; 00000cf5H
  000b7	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000bc	50		 push	 eax
  000bd	57		 push	 edi
  000be	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput

; 1135 : 
; 1136 : 			LogAddTD("[ Crywolf ][Personal Rank & Exp.] [%s][%s] Score(%d) Rank(%d) Exp(%d)",

  000c3	ff 75 f8	 push	 DWORD PTR _pMsg$[ebp+8]
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000cc	0f b6 45 f4	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  000d0	50		 push	 eax
  000d1	ff b4 31 18 24
	00 00		 push	 DWORD PTR [ecx+esi+9240]
  000d8	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000db	03 c6		 add	 eax, esi
  000dd	50		 push	 eax
  000de	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000e1	03 c6		 add	 eax, esi
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@CKDIBNFA@?$FL?5Crywolf?5?$FN?$FLPersonal?5Rank?5?$CG?5Exp?4@
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1137 : 				gObj[i].AccountID, gObj[i].Name, gObj[i].m_iCrywolfMVPScore, pMsg.btRank, pMsg.iGettingExp);
; 1138 : 
; 1139 : 			DataSend(i, (LPBYTE)&pMsg, sizeof(pMsg));

  000ef	6a 0c		 push	 12			; 0000000cH
  000f1	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000f4	50		 push	 eax
  000f5	57		 push	 edi
  000f6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000fb	83 c4 30	 add	 esp, 48			; 00000030H
$LN2@NotifyCryw:

; 1121 : 
; 1122 : 	for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000fe	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00104	47		 inc	 edi
  00105	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0010b	0f 8c 2f ff ff
	ff		 jl	 $LL4@NotifyCryw

; 1140 : 		}
; 1141 : 	}
; 1142 : }

  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	33 cd		 xor	 ecx, ebp
  00118	5b		 pop	 ebx
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfPersonalRank
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z
_TEXT	SEGMENT
_pMsg$ = -8						; size = 5
_btOnOff$ = 8						; size = 1
?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z PROC	; CCrywolf::NotifyCrywolfStageEffectOnOff, COMDAT
; _this$ = ecx

; 1097 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1098 : 	PMSG_ANS_CRYWOLF_STAGE_EFFECT_ONOFF pMsg = {0};
; 1099 : 
; 1100 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x06, sizeof(pMsg));

  00006	6a 05		 push	 5
  00008	6a 06		 push	 6
  0000a	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000d	c6 45 f8 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  00011	68 bd 00 00 00	 push	 189			; 000000bdH
  00016	50		 push	 eax
  00017	c7 45 f9 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+1], 0
  0001e	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 1101 : 	pMsg.btStageEffectOnOff = btOnOff;

  00023	8a 45 08	 mov	 al, BYTE PTR _btOnOff$[ebp]
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 1102 : 
; 1103 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00031	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00034	6a 05		 push	 5
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1104 : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?NotifyCrywolfStageEffectOnOff@CCrywolf@@QAEXE@Z ENDP	; CCrywolf::NotifyCrywolfStageEffectOnOff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfStateLeftTime, COMDAT
; _this$ = ecx

; 970  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 971  : 	static DWORD dwTickCount = 0;
; 972  : 
; 973  : 	if ( (GetTickCount() - dwTickCount) < 20000 )

  00008	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0000e	8b d9		 mov	 ebx, ecx
  00010	ff d6		 call	 esi
  00012	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA
  00018	3d 20 4e 00 00	 cmp	 eax, 20000		; 00004e20H
  0001d	0f 82 20 01 00
	00		 jb	 $LN1@NotifyCryw

; 974  : 		return;
; 975  : 
; 976  : 	dwTickCount = GetTickCount();

  00023	57		 push	 edi
  00024	ff d6		 call	 esi

; 977  : 
; 978  : 	PMSG_ANS_CRYWOLF_LEFTTIME pMsg = {0};
; 979  : 
; 980  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x04, sizeof(pMsg));

  00026	6a 06		 push	 6
  00028	6a 04		 push	 4
  0002a	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ@4KA, eax
  0002f	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00032	68 bd 00 00 00	 push	 189			; 000000bdH
  00037	50		 push	 eax
  00038	c6 45 f8 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  0003c	c7 45 f9 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+1], 0
  00043	c6 45 fd 00	 mov	 BYTE PTR _pMsg$[ebp+5], 0
  00047	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 981  : 	pMsg.btHour = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 ) / 24;

  0004c	6b bb 8c a8 0f
	00 2c		 imul	 edi, DWORD PTR [ebx+1026188], 44
  00053	83 c4 10	 add	 esp, 16			; 00000010H
  00056	03 fb		 add	 edi, ebx
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00058	ff d6		 call	 esi
  0005a	2b 87 00 bf 0f
	00		 sub	 eax, DWORD PTR [edi+1031936]
  00060	3b 87 fc be 0f
	00		 cmp	 eax, DWORD PTR [edi+1031932]
  00066	77 1a		 ja	 SHORT $LN7@NotifyCryw

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}
; 56   : 
; 57   : 	BOOL CheckScheduleTime()
; 58   : 	{
; 59   : 		CTime tCurrentTime = CTime::GetTickCount();
; 60   : 
; 61   : 		int iYear = tCurrentTime.GetYear();
; 62   : 		int iMonth = tCurrentTime.GetMonth();
; 63   : 		int iDay = tCurrentTime.GetDay();
; 64   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();
; 65   : 		int iHour = tCurrentTime.GetHour();
; 66   : 		int iMinute = tCurrentTime.GetMinute();
; 67   : 		int iCrywolfState = -1;
; 68   : 
; 69   : 		CTimeSpan tTimeRange(0, 0, this->m_iContinuanceTime, 0);
; 70   : 
; 71   : 		if ( this->m_iMonth != -1 
; 72   : 			&& this->m_iMonth != iMonth)
; 73   : 		{
; 74   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;
; 75   : 
; 76   : 			if ( tCurrentTime < tConditionTime  ||
; 77   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 78   : 			{
; 79   : 				return FALSE;
; 80   : 			}
; 81   : 		}
; 82   : 
; 83   : 		if ( this->m_iDay != -1
; 84   : 			&& this->m_iDay != iDay)
; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;
; 87   : 
; 88   : 			if ( tCurrentTime < tConditionTime  ||
; 89   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 90   : 			{
; 91   : 				return FALSE;
; 92   : 			}
; 93   : 		}
; 94   : 
; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)
; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)
; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;
; 104  : 
; 105  : 			if ( tCurrentTime < tConditionTime  ||
; 106  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 107  : 			{
; 108  : 				return FALSE;
; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)
; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;
; 116  : 
; 117  : 			if ( tCurrentTime < tConditionTime  ||
; 118  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 119  : 			{
; 120  : 				return FALSE;
; 121  : 			}
; 122  : 		}
; 123  : 		return TRUE;
; 124  : 	}
; 125  : 
; 126  : 	int GetLeftTime()
; 127  : 	{
; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00068	ff d6		 call	 esi
  0006a	8b 8f 00 bf 0f
	00		 mov	 ecx, DWORD PTR [edi+1031936]
  00070	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  00072	b8 00 00 00 00	 mov	 eax, 0
  00077	03 8f fc be 0f
	00		 add	 ecx, DWORD PTR [edi+1031932]
  0007d	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  00080	eb 02		 jmp	 SHORT $LN6@NotifyCryw
$LN7@NotifyCryw:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  00082	33 c9		 xor	 ecx, ecx
$LN6@NotifyCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 981  : 	pMsg.btHour = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 ) / 24;

  00084	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H

; 982  : 	pMsg.btMinute = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 );

  00089	6b bb 8c a8 0f
	00 2c		 imul	 edi, DWORD PTR [ebx+1026188], 44
  00090	f7 e9		 imul	 ecx
  00092	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00097	03 fb		 add	 edi, ebx
  00099	c1 fa 06	 sar	 edx, 6
  0009c	8b ca		 mov	 ecx, edx
  0009e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a1	03 ca		 add	 ecx, edx
  000a3	f7 e9		 imul	 ecx
  000a5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000aa	03 d1		 add	 edx, ecx
  000ac	c1 fa 05	 sar	 edx, 5
  000af	8b ca		 mov	 ecx, edx
  000b1	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000b4	03 ca		 add	 ecx, edx
  000b6	f7 e9		 imul	 ecx
  000b8	c1 fa 02	 sar	 edx, 2
  000bb	8b c2		 mov	 eax, edx
  000bd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c0	03 c2		 add	 eax, edx
  000c2	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  000c5	ff d6		 call	 esi
  000c7	2b 87 00 bf 0f
	00		 sub	 eax, DWORD PTR [edi+1031936]
  000cd	3b 87 fc be 0f
	00		 cmp	 eax, DWORD PTR [edi+1031932]
  000d3	77 1a		 ja	 SHORT $LN16@NotifyCryw

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}
; 56   : 
; 57   : 	BOOL CheckScheduleTime()
; 58   : 	{
; 59   : 		CTime tCurrentTime = CTime::GetTickCount();
; 60   : 
; 61   : 		int iYear = tCurrentTime.GetYear();
; 62   : 		int iMonth = tCurrentTime.GetMonth();
; 63   : 		int iDay = tCurrentTime.GetDay();
; 64   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();
; 65   : 		int iHour = tCurrentTime.GetHour();
; 66   : 		int iMinute = tCurrentTime.GetMinute();
; 67   : 		int iCrywolfState = -1;
; 68   : 
; 69   : 		CTimeSpan tTimeRange(0, 0, this->m_iContinuanceTime, 0);
; 70   : 
; 71   : 		if ( this->m_iMonth != -1 
; 72   : 			&& this->m_iMonth != iMonth)
; 73   : 		{
; 74   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;
; 75   : 
; 76   : 			if ( tCurrentTime < tConditionTime  ||
; 77   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 78   : 			{
; 79   : 				return FALSE;
; 80   : 			}
; 81   : 		}
; 82   : 
; 83   : 		if ( this->m_iDay != -1
; 84   : 			&& this->m_iDay != iDay)
; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;
; 87   : 
; 88   : 			if ( tCurrentTime < tConditionTime  ||
; 89   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 90   : 			{
; 91   : 				return FALSE;
; 92   : 			}
; 93   : 		}
; 94   : 
; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)
; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)
; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;
; 104  : 
; 105  : 			if ( tCurrentTime < tConditionTime  ||
; 106  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 107  : 			{
; 108  : 				return FALSE;
; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)
; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;
; 116  : 
; 117  : 			if ( tCurrentTime < tConditionTime  ||
; 118  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 119  : 			{
; 120  : 				return FALSE;
; 121  : 			}
; 122  : 		}
; 123  : 		return TRUE;
; 124  : 	}
; 125  : 
; 126  : 	int GetLeftTime()
; 127  : 	{
; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  000d5	ff d6		 call	 esi
  000d7	8b 8f 00 bf 0f
	00		 mov	 ecx, DWORD PTR [edi+1031936]
  000dd	03 8f fc be 0f
	00		 add	 ecx, DWORD PTR [edi+1031932]
  000e3	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  000e5	b8 00 00 00 00	 mov	 eax, 0
  000ea	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  000ed	eb 02		 jmp	 SHORT $LN15@NotifyCryw
$LN16@NotifyCryw:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  000ef	33 c9		 xor	 ecx, ecx
$LN15@NotifyCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 982  : 	pMsg.btMinute = ( ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60 );

  000f1	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000f6	f7 e9		 imul	 ecx
  000f8	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  000fd	c1 fa 06	 sar	 edx, 6
  00100	8b ca		 mov	 ecx, edx
  00102	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00105	03 ca		 add	 ecx, edx
  00107	f7 e9		 imul	 ecx

; 983  : 
; 984  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  00109	6a 06		 push	 6
  0010b	03 d1		 add	 edx, ecx
  0010d	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00112	c1 fa 05	 sar	 edx, 5
  00115	8b c2		 mov	 eax, edx
  00117	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0011a	03 c2		 add	 eax, edx
  0011c	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  0011f	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 985  : 
; 986  : 	LogAddC(3, "[ Crywolf ] War LeftTime - (%02d:%02d)",

  00128	0f b6 45 fd	 movzx	 eax, BYTE PTR _pMsg$[ebp+5]
  0012c	50		 push	 eax
  0012d	0f b6 45 fc	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  00131	50		 push	 eax
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PEBIGCOC@?$FL?5Crywolf?5?$FN?5War?5LeftTime?5?9?5?$CI?$CF02d@
  00137	6a 03		 push	 3
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0013f	83 c4 10	 add	 esp, 16			; 00000010H
  00142	5f		 pop	 edi
$LN1@NotifyCryw:
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx

; 987  : 		pMsg.btHour, pMsg.btMinute);
; 988  : }

  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c3		 ret	 0
?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfStateLeftTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfBossMonsterInfo, COMDAT
; _this$ = ecx

; 1045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 1046 : 	static DWORD dwTickCount = 0;
; 1047 : 
; 1048 : 	if ( (GetTickCount() - dwTickCount) < 5000 )

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00017	ff d6		 call	 esi
  00019	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA
  0001f	3d 88 13 00 00	 cmp	 eax, 5000		; 00001388H
  00024	0f 82 cc 00 00
	00		 jb	 $LN1@NotifyCryw

; 1049 : 		return;
; 1050 : 
; 1051 : 	dwTickCount = GetTickCount();

  0002a	57		 push	 edi
  0002b	ff d6		 call	 esi

; 1052 : 
; 1053 : 	PMSG_ANS_CRYWOLF_BOSSMONSTER_INFO pMsg;
; 1054 : 
; 1055 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x05, sizeof(pMsg));

  0002d	6a 0c		 push	 12			; 0000000cH
  0002f	6a 05		 push	 5
  00031	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ@4KA, eax
  00036	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00039	68 bd 00 00 00	 push	 189			; 000000bdH
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 1056 : 	pMsg.iMonster1HP = -1;

  00047	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _pMsg$[ebp+4], -1

; 1057 : 	pMsg.btMonster2 = 0;
; 1058 : 
; 1059 : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  0004e	33 ff		 xor	 edi, edi
  00050	c6 45 f8 00	 mov	 BYTE PTR _pMsg$[ebp+8], 0
  00054	33 f6		 xor	 esi, esi
$LL4@NotifyCryw:

; 1060 : 	{
; 1061 : 		if (!gObjIsConnected(i))

  00056	57		 push	 edi
  00057	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0005c	83 c4 04	 add	 esp, 4
  0005f	85 c0		 test	 eax, eax
  00061	74 5d		 je	 SHORT $LN2@NotifyCryw

; 1062 : 			continue;
; 1063 : 
; 1064 : 		if ( gObj[i].MapNumber != MAP_INDEX_CRYWOLF_FIRSTZONE )

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00068	80 bc 06 23 01
	00 00 22	 cmp	 BYTE PTR [esi+eax+291], 34 ; 00000022H
  00070	75 4e		 jne	 SHORT $LN2@NotifyCryw

; 1065 : 			continue;
; 1066 : 
; 1067 : 		if ( !gObj[i].Live )

  00072	80 7c 06 51 00	 cmp	 BYTE PTR [esi+eax+81], 0
  00077	74 47		 je	 SHORT $LN2@NotifyCryw

; 1068 : 			continue;
; 1069 : 
; 1070 : 		switch ( gObj[i].Class )

  00079	0f b7 8c 06 90
	00 00 00	 movzx	 ecx, WORD PTR [esi+eax+144]
  00081	81 e9 54 01 00
	00		 sub	 ecx, 340		; 00000154H
  00087	74 34		 je	 SHORT $LN11@NotifyCryw
  00089	83 e9 09	 sub	 ecx, 9
  0008c	75 32		 jne	 SHORT $LN2@NotifyCryw

; 1074 : 				break;
; 1075 : 			case 349:
; 1076 : 				pMsg.iMonster1HP = (int)((gObj[i].Life * 100.0f) / (gObj[i].MaxLife + 1.0f));

  0008e	f3 0f 10 84 06
	dc 00 00 00	 movss	 xmm0, DWORD PTR [esi+eax+220]
  00097	f3 0f 10 8c 06
	d8 00 00 00	 movss	 xmm1, DWORD PTR [esi+eax+216]
  000a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  000a8	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42c80000
  000b0	f3 0f 5e c8	 divss	 xmm1, xmm0
  000b4	f3 0f 2c c1	 cvttss2si eax, xmm1
  000b8	89 45 f4	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  000bb	eb 03		 jmp	 SHORT $LN2@NotifyCryw
$LN11@NotifyCryw:

; 1071 : 		{
; 1072 : 			case 340:
; 1073 : 				pMsg.btMonster2++;

  000bd	fe 45 f8	 inc	 BYTE PTR _pMsg$[ebp+8]
$LN2@NotifyCryw:

; 1057 : 	pMsg.btMonster2 = 0;
; 1058 : 
; 1059 : 	for ( int i=0;i<OBJ_MAXMONSTER;i++)

  000c0	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000c6	47		 inc	 edi
  000c7	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  000cd	7c 87		 jl	 SHORT $LL4@NotifyCryw

; 1077 : 				break;
; 1078 : 		}
; 1079 : 	}
; 1080 : 
; 1081 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  000cf	6a 0c		 push	 12			; 0000000cH
  000d1	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1082 : 
; 1083 : 	LogAddTD("[ Crywolf ][Boss Monster Info] Balgars HP:%d, DarkElf:%d",

  000df	0f b6 45 f8	 movzx	 eax, BYTE PTR _pMsg$[ebp+8]
  000e3	50		 push	 eax
  000e4	ff 75 f4	 push	 DWORD PTR _pMsg$[ebp+4]
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@GBOALLL@?$FL?5Crywolf?5?$FN?$FLBoss?5Monster?5Info?$FN?5B@
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	5f		 pop	 edi
$LN1@NotifyCryw:

; 1084 : 		pMsg.iMonster1HP, pMsg.btMonster2);
; 1085 : }

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f9	33 cd		 xor	 ecx, ebp
  000fb	5e		 pop	 esi
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfBossMonsterInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatue.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatue.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfStatueAndAltarInfo, COMDAT
; _this$ = ecx

; 993  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 994  : 	static DWORD dwTickCount = 0;
; 995  : 
; 996  : 	if ( (GetTickCount() - dwTickCount) < 2000 )

  00011	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00017	ff d6		 call	 esi
  00019	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA
  0001f	3d d0 07 00 00	 cmp	 eax, 2000		; 000007d0H
  00024	0f 82 62 01 00
	00		 jb	 $LN3@NotifyCryw

; 997  : 		return;
; 998  : 
; 999  : 	dwTickCount = GetTickCount();

  0002a	ff d6		 call	 esi

; 1003 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x02, sizeof(pMsg));

  0002c	6a 10		 push	 16			; 00000010H
  0002e	6a 02		 push	 2
  00030	a3 00 00 00 00	 mov	 DWORD PTR ?dwTickCount@?1??NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ@4KA, eax
  00035	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00038	68 bd 00 00 00	 push	 189			; 000000bdH
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatue.h

; 34   : 		if ( this->m_iShieldMaxHP )

  00043	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A+4
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1003 : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x02, sizeof(pMsg));

  00049	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatue.h

; 34   : 		if ( this->m_iShieldMaxHP )

  0004c	85 c9		 test	 ecx, ecx
  0004e	74 0c		 je	 SHORT $LN9@NotifyCryw

; 35   : 		{
; 36   : 			return (this->m_iShieldHP * 100) / this->m_iShieldMaxHP;

  00050	6b 05 08 00 00
	00 64		 imul	 eax, DWORD PTR ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A+8, 100
  00057	99		 cdq
  00058	f7 f9		 idiv	 ecx
  0005a	eb 02		 jmp	 SHORT $LN8@NotifyCryw
$LN9@NotifyCryw:

; 37   : 		}
; 38   : 
; 39   : 		return 0;

  0005c	33 c0		 xor	 eax, eax
$LN8@NotifyCryw:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 1006 : 	pMsg.btAltarState1 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(205);

  0005e	68 cd 00 00 00	 push	 205			; 000000cdH
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00068	89 45 f0	 mov	 DWORD PTR _pMsg$[ebp+4], eax
  0006b	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 1007 : 	pMsg.btAltarState2 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(206);

  00070	68 ce 00 00 00	 push	 206			; 000000ceH
  00075	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0007a	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+8], al
  0007d	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 1008 : 	pMsg.btAltarState3 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(207);

  00082	68 cf 00 00 00	 push	 207			; 000000cfH
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0008c	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+9], al
  0008f	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 1009 : 	pMsg.btAltarState4 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(208);

  00094	68 d0 00 00 00	 push	 208			; 000000d0H
  00099	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0009e	88 45 f6	 mov	 BYTE PTR _pMsg$[ebp+10], al
  000a1	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 1010 : 	pMsg.btAltarState5 = g_CrywolfNPC_Altar.GetAltarRemainContractCount(209);

  000a6	68 d1 00 00 00	 push	 209			; 000000d1H
  000ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000b0	88 45 f7	 mov	 BYTE PTR _pMsg$[ebp+11], al
  000b3	e8 00 00 00 00	 call	 ?GetAltarRemainContractCount@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarRemainContractCount

; 1011 : 	pMsg.btAltarState1 |= g_CrywolfNPC_Altar.GetAltarState(205) << 4;

  000b8	68 cd 00 00 00	 push	 205			; 000000cdH
  000bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000c2	88 45 f8	 mov	 BYTE PTR _pMsg$[ebp+12], al
  000c5	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  000ca	c0 e0 04	 shl	 al, 4

; 1012 : 	pMsg.btAltarState2 |= g_CrywolfNPC_Altar.GetAltarState(206) << 4;

  000cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000d2	08 45 f4	 or	 BYTE PTR _pMsg$[ebp+8], al
  000d5	68 ce 00 00 00	 push	 206			; 000000ceH
  000da	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  000df	c0 e0 04	 shl	 al, 4

; 1013 : 	pMsg.btAltarState3 |= g_CrywolfNPC_Altar.GetAltarState(207) << 4;

  000e2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000e7	08 45 f5	 or	 BYTE PTR _pMsg$[ebp+9], al
  000ea	68 cf 00 00 00	 push	 207			; 000000cfH
  000ef	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  000f4	c0 e0 04	 shl	 al, 4

; 1014 : 	pMsg.btAltarState4 |= g_CrywolfNPC_Altar.GetAltarState(208) << 4;

  000f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  000fc	08 45 f6	 or	 BYTE PTR _pMsg$[ebp+10], al
  000ff	68 d0 00 00 00	 push	 208			; 000000d0H
  00104	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  00109	c0 e0 04	 shl	 al, 4

; 1015 : 	pMsg.btAltarState5 |= g_CrywolfNPC_Altar.GetAltarState(209) << 4;

  0010c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00111	08 45 f7	 or	 BYTE PTR _pMsg$[ebp+11], al
  00114	68 d1 00 00 00	 push	 209			; 000000d1H
  00119	e8 00 00 00 00	 call	 ?GetAltarState@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarState
  0011e	c0 e0 04	 shl	 al, 4

; 1016 : 
; 1017 : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  00121	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00126	08 45 f8	 or	 BYTE PTR _pMsg$[ebp+12], al
  00129	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0012c	6a 10		 push	 16			; 00000010H
  0012e	50		 push	 eax
  0012f	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 1018 : 
; 1019 : 	LogAddTD("[ Crywolf ][Statue Info] Statue HP : %d",

  00134	ff 75 f0	 push	 DWORD PTR _pMsg$[ebp+4]
  00137	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGJJGGGM@?$FL?5Crywolf?5?$FN?$FLStatue?5Info?$FN?5Statue?5@
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00142	83 c4 08	 add	 esp, 8

; 1020 : 		pMsg.iCrywolfStatueHP);
; 1021 : 
; 1022 : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar ++ )

  00145	be cd 00 00 00	 mov	 esi, 205		; 000000cdH
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL4@NotifyCryw:

; 1023 : 	{
; 1024 : 		int iUserIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(iAltar);

  00150	56		 push	 esi
  00151	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00156	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex

; 1025 : 
; 1026 : 		if ( iUserIndex != -1 )

  0015b	83 f8 ff	 cmp	 eax, -1
  0015e	74 23		 je	 SHORT $LN2@NotifyCryw

; 1027 : 		{
; 1028 : 			LogAddTD("[ Crywolf ][Altar Info] Altar(%d) Contractor: [%s][%s] ",

  00160	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048
  00166	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016c	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0016f	50		 push	 eax
  00170	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00173	50		 push	 eax
  00174	56		 push	 esi
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OGLOHLNC@?$FL?5Crywolf?5?$FN?$FLAltar?5Info?$FN?5Altar?$CI?$CFd@
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00180	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@NotifyCryw:

; 1020 : 		pMsg.iCrywolfStatueHP);
; 1021 : 
; 1022 : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar ++ )

  00183	46		 inc	 esi
  00184	81 fe d1 00 00
	00		 cmp	 esi, 209		; 000000d1H
  0018a	7e c4		 jle	 SHORT $LL4@NotifyCryw
$LN3@NotifyCryw:

; 1029 : 				iAltar, gObj[iUserIndex].AccountID, gObj[iUserIndex].Name);
; 1030 : 		}
; 1031 : 	}
; 1032 : }

  0018c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018f	33 cd		 xor	 ecx, ebp
  00191	5e		 pop	 esi
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfStatueAndAltarInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_pMsg$ = -8						; size = 6
?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ PROC	; CCrywolf::NotifyCrywolfCurrentState, COMDAT
; _this$ = ecx

; 955  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 956  : 	PMSG_ANS_CRYWOLF_INFO pMsg = {0};
; 957  : 
; 958  : 	PHeadSubSetB((LPBYTE)&pMsg, 0xBD, 0x00, sizeof(pMsg));

  00007	6a 06		 push	 6
  00009	6a 00		 push	 0
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0000e	c6 45 f8 00	 mov	 BYTE PTR _pMsg$[ebp], 0
  00012	68 bd 00 00 00	 push	 189			; 000000bdH
  00017	50		 push	 eax
  00018	8b f1		 mov	 esi, ecx
  0001a	c7 45 f9 00 00
	00 00		 mov	 DWORD PTR _pMsg$[ebp+1], 0
  00021	c6 45 fd 00	 mov	 BYTE PTR _pMsg$[ebp+5], 0
  00025	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 959  : 	pMsg.btOccupationState = this->GetOccupationState();

  0002a	0f b6 86 90 a8
	0f 00		 movzx	 eax, BYTE PTR [esi+1026192]
  00031	83 c4 10	 add	 esp, 16			; 00000010H
  00034	88 45 fc	 mov	 BYTE PTR _pMsg$[ebp+4], al

; 960  : 	pMsg.btCrywolfState = this->GetCrywolfState();
; 961  : 
; 962  : 	UTIL.SendCrywolfUserAnyData((LPBYTE)&pMsg,sizeof(pMsg));

  00037	b9 00 00 00 00	 mov	 ecx, OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0003c	0f b6 86 8c a8
	0f 00		 movzx	 eax, BYTE PTR [esi+1026188]
  00043	88 45 fd	 mov	 BYTE PTR _pMsg$[ebp+5], al
  00046	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00049	6a 06		 push	 6
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyData@CCrywolfUtil@@QAEXPAEH@Z ; CCrywolfUtil::SendCrywolfUserAnyData

; 963  : 
; 964  : 	LogAddC(3, "[ Crywolf ] SetState - StateInfo : Occupation/%d, State/%d",

  00051	0f b6 45 fd	 movzx	 eax, BYTE PTR _pMsg$[ebp+5]
  00055	50		 push	 eax
  00056	0f b6 45 fc	 movzx	 eax, BYTE PTR _pMsg$[ebp+4]
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@CNFGBEDJ@?$FL?5Crywolf?5?$FN?5SetState?5?9?5StateInfo@
  00060	6a 03		 push	 3
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	5e		 pop	 esi

; 965  : 		pMsg.btOccupationState, pMsg.btCrywolfState);
; 966  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ENDP	; CCrywolf::NotifyCrywolfCurrentState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iBossIndex$ = 8					; size = 4
?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetCrywolfBossIndex, COMDAT
; _this$ = ecx

; 99   : 	void SetCrywolfBossIndex(int iBossIndex){this->m_iBossIndex = iBossIndex;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iBossIndex$[ebp]
  00006	89 81 74 c0 0f
	00		 mov	 DWORD PTR [ecx+1032308], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrywolfBossIndex@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetCrywolfBossIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?SetOccupationState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iOccupationState$ = 8					; size = 4
?SetOccupationState@CCrywolf@@QAEXH@Z PROC		; CCrywolf::SetOccupationState, COMDAT
; _this$ = ecx

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  00006	89 81 90 a8 0f
	00		 mov	 DWORD PTR [ecx+1026192], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetOccupationState@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::SetOccupationState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z PROC	; CCrywolf::SetCrywolfStateAppliedTime, COMDAT
; _this$ = ecx

; 97   : 	void SetCrywolfStateAppliedTime(int iCrywolfState){this->m_StateTimeInfo[iCrywolfState].SetAppliedTime();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 97   : 	void SetCrywolfStateAppliedTime(int iCrywolfState){this->m_StateTimeInfo[iCrywolfState].SetAppliedTime();}

  0000c	6b 55 08 2c	 imul	 edx, DWORD PTR _iCrywolfState$[ebp], 44
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00010	89 84 32 00 bf
	0f 00		 mov	 DWORD PTR [edx+esi+1031936], eax
  00017	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 97   : 	void SetCrywolfStateAppliedTime(int iCrywolfState){this->m_StateTimeInfo[iCrywolfState].SetAppliedTime();}

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetCrywolfStateAppliedTime@CCrywolf@@QAEXH@Z ENDP	; CCrywolf::SetCrywolfStateAppliedTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?SetCrywolfState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
?SetCrywolfState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetCrywolfState, COMDAT
; _this$ = ecx

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]
  00006	89 81 8c a8 0f
	00		 mov	 DWORD PTR [ecx+1026188], eax
  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetCrywolfState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetCrywolfState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?SetDBDataLoad@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_bIsLoaded$ = 8						; size = 4
?SetDBDataLoad@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetDBDataLoad, COMDAT
; _this$ = ecx

; 95   : 	void SetDBDataLoad(BOOL bIsLoaded){this->m_bDBDataLoadOK = bIsLoaded;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _bIsLoaded$[ebp]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetDBDataLoad@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetDBDataLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?GetOccupationState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?GetOccupationState@CCrywolf@@QAEHXZ PROC		; CCrywolf::GetOccupationState, COMDAT
; _this$ = ecx

; 93   : 	int GetOccupationState(){return this->m_iOccupationState;}

  00000	8b 81 90 a8 0f
	00		 mov	 eax, DWORD PTR [ecx+1026192]
  00006	c3		 ret	 0
?GetOccupationState@CCrywolf@@QAEHXZ ENDP		; CCrywolf::GetOccupationState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?GetCrywolfState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?GetCrywolfState@CCrywolf@@QAEHXZ PROC			; CCrywolf::GetCrywolfState, COMDAT
; _this$ = ecx

; 92   : 	int GetCrywolfState(){return this->m_iCrywolfState;}

  00000	8b 81 8c a8 0f
	00		 mov	 eax, DWORD PTR [ecx+1026188]
  00006	c3		 ret	 0
?GetCrywolfState@CCrywolf@@QAEHXZ ENDP			; CCrywolf::GetCrywolfState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfSecondAct@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?CrywolfSecondAct@CCrywolf@@QAEXXZ PROC			; CCrywolf::CrywolfSecondAct, COMDAT
; _this$ = ecx

; 1570 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1571 : 	this->CrywolfServerGroupSync();

  00003	e8 00 00 00 00	 call	 ?CrywolfServerGroupSync@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfServerGroupSync

; 1572 : 
; 1573 : 	if ( this->m_bDBDataLoadOK == FALSE &&

  00008	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0000c	75 0e		 jne	 SHORT $LN2@CrywolfSec
  0000e	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00012	75 08		 jne	 SHORT $LN2@CrywolfSec

; 1574 : 		 this->m_bDBDataLoading == FALSE )
; 1575 : 	{
; 1576 : 		this->CrywolfInfoDBLoad();

  00014	8b ce		 mov	 ecx, esi
  00016	5e		 pop	 esi
  00017	e9 00 00 00 00	 jmp	 ?CrywolfInfoDBLoad@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBLoad
$LN2@CrywolfSec:
  0001c	5e		 pop	 esi

; 1577 : 	}
; 1578 : }

  0001d	c3		 ret	 0
?CrywolfSecondAct@CCrywolf@@QAEXXZ ENDP			; CCrywolf::CrywolfSecondAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfMonsterAct@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CrywolfMonsterAct@CCrywolf@@QAEXH@Z PROC		; CCrywolf::CrywolfMonsterAct, COMDAT
; _this$ = ecx

; 1564 : 	return;
; 1565 : }

  00000	c2 04 00	 ret	 4
?CrywolfMonsterAct@CCrywolf@@QAEXH@Z ENDP		; CCrywolf::CrywolfMonsterAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CrywolfNpcAct@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CrywolfNpcAct@CCrywolf@@QAEXH@Z PROC			; CCrywolf::CrywolfNpcAct, COMDAT
; _this$ = ecx

; 1551 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1552 : 	if ( this->GetCrywolfState() == CRYWOLF_STATE_READY ||

  00003	8b 81 8c a8 0f
	00		 mov	 eax, DWORD PTR [ecx+1026188]
  00009	83 f8 03	 cmp	 eax, 3
  0000c	74 05		 je	 SHORT $LN3@CrywolfNpc
  0000e	83 f8 04	 cmp	 eax, 4
  00011	75 18		 jne	 SHORT $LN2@CrywolfNpc
$LN3@CrywolfNpc:

; 1553 : 		 this->GetCrywolfState() == CRYWOLF_STATE_START )
; 1554 : 	{
; 1555 : 		g_CrywolfNPC_Statue.CrywolfStatueAct(iIndex);

  00013	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Statue@@3VCCrywolfStatue@@A ; g_CrywolfNPC_Statue
  0001b	e8 00 00 00 00	 call	 ?CrywolfStatueAct@CCrywolfStatue@@QAEXH@Z ; CCrywolfStatue::CrywolfStatueAct

; 1556 : 		g_CrywolfNPC_Altar.CrywolfAltarAct(iIndex);

  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar

; 1557 : 	}
; 1558 : }

  00025	5d		 pop	 ebp

; 1556 : 		g_CrywolfNPC_Altar.CrywolfAltarAct(iIndex);

  00026	e9 00 00 00 00	 jmp	 ?CrywolfAltarAct@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::CrywolfAltarAct
$LN2@CrywolfNpc:

; 1557 : 	}
; 1558 : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?CrywolfNpcAct@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::CrywolfNpcAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_ENDCYCLE, COMDAT
; _this$ = ecx

; 950  : 	return;
; 951  : }

  00000	c3		 ret	 0
?ProcState_ENDCYCLE@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_ENDCYCLE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_END@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_END@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_END, COMDAT
; _this$ = ecx

; 944  : 	return;
; 945  : }

  00000	c3		 ret	 0
?ProcState_END@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_END
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_START@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_START@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_START, COMDAT
; _this$ = ecx

; 890  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 891  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00008	e8 00 00 00 00	 call	 ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ; CCrywolfAltar::GetContractedAltarCount
  0000d	85 c0		 test	 eax, eax
  0000f	75 34		 jne	 SHORT $LN2@ProcState_

; 892  : 	{
; 893  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 240)));

  00011	68 f0 0c 00 00	 push	 3312			; 00000cf0H
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0001b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00020	50		 push	 eax
  00021	6a 02		 push	 2
  00023	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00028	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg

; 932  : 		{
; 933  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 243)));	

  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00030	c7 86 90 a8 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1026192], 1
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 936  : 			this->SetState(CRYWOLF_STATE_END);

  0003a	8b ce		 mov	 ecx, esi
  0003c	6a 05		 push	 5
  0003e	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00043	5e		 pop	 esi

; 937  : 		}
; 938  : 	}
; 939  : }

  00044	c3		 ret	 0
$LN2@ProcState_:

; 894  : 
; 895  : 		this->SetOccupationState(1);
; 896  : 		this->SetState(CRYWOLF_STATE_END);
; 897  : 
; 898  : 		return;
; 899  : 	}
; 900  : 
; 901  : 	this->NotifyCrywolfStatueAndAltarInfo();

  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo

; 902  : 	this->NotifyCrywolfBossMonsterInfo();

  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?NotifyCrywolfBossMonsterInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfBossMonsterInfo

; 903  : 	this->NotifyCrywolfStateLeftTime();

  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?NotifyCrywolfStateLeftTime@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStateLeftTime

; 904  : 
; 905  : 	if ( (GetTickCount() - this->m_dwCrywolfStartProcTick) > (DWORD)(this->m_iBossTurnUpTime * 1000) &&

  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00060	69 8e 7c c0 0f
	00 e8 03 00 00	 imul	 ecx, DWORD PTR [esi+1032316], 1000
  0006a	2b 86 10 c0 0f
	00		 sub	 eax, DWORD PTR [esi+1032208]
  00070	3b c1		 cmp	 eax, ecx
  00072	76 47		 jbe	 SHORT $LN3@ProcState_
  00074	83 be 14 c0 0f
	00 00		 cmp	 DWORD PTR [esi+1032212], 0
  0007b	75 3e		 jne	 SHORT $LN3@ProcState_

; 906  : 		 !this->m_bTurnUpBoss )
; 907  : 	{
; 908  : 		this->m_bTurnUpBoss = TRUE;
; 909  : 		
; 910  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 241)));

  0007d	68 f1 0c 00 00	 push	 3313			; 00000cf1H
  00082	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00087	c7 86 14 c0 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1032212], 1
  00091	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00096	50		 push	 eax
  00097	6a 02		 push	 2
  00099	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0009e	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  000a3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 911  : 
; 912  : 		this->TurnUpBoss();

  000a6	8b ce		 mov	 ecx, esi
  000a8	e8 00 00 00 00	 call	 ?TurnUpBoss@CCrywolf@@QAEXXZ ; CCrywolf::TurnUpBoss

; 913  : 		
; 914  : 		LogAddTD("[ Crywolf ][MVP] Barlgars TurnUp !!!");

  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FGEECLKO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Barlgars?5TurnUp@
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000b8	83 c4 04	 add	 esp, 4
$LN3@ProcState_:

; 915  : 	}
; 916  : 
; 917  : 	if ( (GetTickCount() - this->m_dwCrywolfStartProcTick) > (DWORD)(this->m_iMonsterGroupChangeAITime * 1000) &&

  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000c1	69 8e 70 c0 0f
	00 e8 03 00 00	 imul	 ecx, DWORD PTR [esi+1032304], 1000
  000cb	2b 86 10 c0 0f
	00		 sub	 eax, DWORD PTR [esi+1032208]
  000d1	3b c1		 cmp	 eax, ecx
  000d3	76 49		 jbe	 SHORT $LN4@ProcState_
  000d5	83 be 18 c0 0f
	00 00		 cmp	 DWORD PTR [esi+1032216], 0
  000dc	75 40		 jne	 SHORT $LN4@ProcState_

; 918  : 		 !this->m_bChangeAI )
; 919  : 	{
; 920  : 		this->m_bChangeAI = TRUE;
; 921  : 		
; 922  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 242)));

  000de	68 f2 0c 00 00	 push	 3314			; 00000cf2H
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000e8	c7 86 18 c0 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1032216], 1
  000f2	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000f7	50		 push	 eax
  000f8	6a 02		 push	 2
  000fa	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000ff	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH

; 923  : 
; 924  : 		this->ChangeAI(2);

  00107	8b ce		 mov	 ecx, esi
  00109	6a 02		 push	 2
  0010b	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 925  : 		
; 926  : 		LogAddTD("[ Crywolf ][MVP] Start Monster Rush !!!");

  00110	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BNLLPPPK@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5Start?5Monster?5R@
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011b	83 c4 04	 add	 esp, 4
$LN4@ProcState_:

; 927  : 	}
; 928  : 
; 929  : 	if ( this->m_bTurnUpBoss != FALSE && CHECK_LIMIT(this->m_iBossIndex, OBJ_MAXMONSTER) != FALSE )

  0011e	83 be 14 c0 0f
	00 00		 cmp	 DWORD PTR [esi+1032212], 0
  00125	74 5d		 je	 SHORT $LN6@ProcState_
  00127	8b 96 74 c0 0f
	00		 mov	 edx, DWORD PTR [esi+1032308]
  0012d	85 d2		 test	 edx, edx
  0012f	78 53		 js	 SHORT $LN6@ProcState_
  00131	33 c0		 xor	 eax, eax
  00133	81 fa 03 29 00
	00		 cmp	 edx, 10499		; 00002903H
  00139	0f 9e c0	 setle	 al
  0013c	85 c0		 test	 eax, eax
  0013e	74 44		 je	 SHORT $LN6@ProcState_

; 930  : 	{
; 931  : 		if ( gObj[this->m_iBossIndex].Live == FALSE )

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00145	69 d2 40 27 00
	00		 imul	 edx, edx, 10048
  0014b	80 7c 02 51 00	 cmp	 BYTE PTR [edx+eax+81], 0
  00150	75 32		 jne	 SHORT $LN6@ProcState_

; 932  : 		{
; 933  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 243)));	

  00152	68 f3 0c 00 00	 push	 3315			; 00000cf3H
  00157	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0015c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00161	50		 push	 eax
  00162	6a 02		 push	 2
  00164	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00169	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  0016e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00171	c7 86 90 a8 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1026192], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 936  : 			this->SetState(CRYWOLF_STATE_END);

  0017b	8b ce		 mov	 ecx, esi
  0017d	6a 05		 push	 5
  0017f	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN6@ProcState_:
  00184	5e		 pop	 esi

; 937  : 		}
; 938  : 	}
; 939  : }

  00185	c3		 ret	 0
?ProcState_START@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_START
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_READY@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_READY@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_READY, COMDAT
; _this$ = ecx

; 864  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 865  : 	this->NotifyCrywolfStatueAndAltarInfo();

  00004	e8 00 00 00 00	 call	 ?NotifyCrywolfStatueAndAltarInfo@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfStatueAndAltarInfo

; 866  : 
; 867  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  00009	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__GetTickCount@0
  0000f	ff d7		 call	 edi
  00011	2b 86 0c c0 0f
	00		 sub	 eax, DWORD PTR [esi+1032204]
  00017	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  0001c	0f 86 d1 00 00
	00		 jbe	 $LN2@ProcState_

; 869  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  00022	53		 push	 ebx
  00023	6b 9e 8c a8 0f
	00 2c		 imul	 ebx, DWORD PTR [esi+1026188], 44
  0002a	03 de		 add	 ebx, esi
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  0002c	ff d7		 call	 edi
  0002e	2b 83 00 bf 0f
	00		 sub	 eax, DWORD PTR [ebx+1031936]
  00034	3b 83 fc be 0f
	00		 cmp	 eax, DWORD PTR [ebx+1031932]
  0003a	77 1a		 ja	 SHORT $LN9@ProcState_

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}
; 56   : 
; 57   : 	BOOL CheckScheduleTime()
; 58   : 	{
; 59   : 		CTime tCurrentTime = CTime::GetTickCount();
; 60   : 
; 61   : 		int iYear = tCurrentTime.GetYear();
; 62   : 		int iMonth = tCurrentTime.GetMonth();
; 63   : 		int iDay = tCurrentTime.GetDay();
; 64   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();
; 65   : 		int iHour = tCurrentTime.GetHour();
; 66   : 		int iMinute = tCurrentTime.GetMinute();
; 67   : 		int iCrywolfState = -1;
; 68   : 
; 69   : 		CTimeSpan tTimeRange(0, 0, this->m_iContinuanceTime, 0);
; 70   : 
; 71   : 		if ( this->m_iMonth != -1 
; 72   : 			&& this->m_iMonth != iMonth)
; 73   : 		{
; 74   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;
; 75   : 
; 76   : 			if ( tCurrentTime < tConditionTime  ||
; 77   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 78   : 			{
; 79   : 				return FALSE;
; 80   : 			}
; 81   : 		}
; 82   : 
; 83   : 		if ( this->m_iDay != -1
; 84   : 			&& this->m_iDay != iDay)
; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;
; 87   : 
; 88   : 			if ( tCurrentTime < tConditionTime  ||
; 89   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 90   : 			{
; 91   : 				return FALSE;
; 92   : 			}
; 93   : 		}
; 94   : 
; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)
; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)
; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;
; 104  : 
; 105  : 			if ( tCurrentTime < tConditionTime  ||
; 106  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 107  : 			{
; 108  : 				return FALSE;
; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)
; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;
; 116  : 
; 117  : 			if ( tCurrentTime < tConditionTime  ||
; 118  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 119  : 			{
; 120  : 				return FALSE;
; 121  : 			}
; 122  : 		}
; 123  : 		return TRUE;
; 124  : 	}
; 125  : 
; 126  : 	int GetLeftTime()
; 127  : 	{
; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  0003c	ff d7		 call	 edi
  0003e	8b 8b 00 bf 0f
	00		 mov	 ecx, DWORD PTR [ebx+1031936]
  00044	03 8b fc be 0f
	00		 add	 ecx, DWORD PTR [ebx+1031932]
  0004a	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  0004c	b8 00 00 00 00	 mov	 eax, 0
  00051	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  00054	eb 02		 jmp	 SHORT $LN8@ProcState_
$LN9@ProcState_:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  00056	33 c9		 xor	 ecx, ecx
$LN8@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 869  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  00058	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  0005d	f7 e9		 imul	 ecx
  0005f	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00064	c1 fa 06	 sar	 edx, 6
  00067	8b ca		 mov	 ecx, edx
  00069	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006c	03 ca		 add	 ecx, edx
  0006e	f7 e9		 imul	 ecx
  00070	03 d1		 add	 edx, ecx
  00072	c1 fa 05	 sar	 edx, 5
  00075	8b c2		 mov	 eax, edx
  00077	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007a	03 c2		 add	 eax, edx

; 870  : 
; 871  : 		if ( iTime == 0 )

  0007c	75 4e		 jne	 SHORT $LN3@ProcState_

; 873  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  0007e	6b 9e 8c a8 0f
	00 2c		 imul	 ebx, DWORD PTR [esi+1026188], 44
  00085	03 de		 add	 ebx, esi
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00087	ff d7		 call	 edi
  00089	2b 83 00 bf 0f
	00		 sub	 eax, DWORD PTR [ebx+1031936]
  0008f	3b 83 fc be 0f
	00		 cmp	 eax, DWORD PTR [ebx+1031932]
  00095	77 1a		 ja	 SHORT $LN18@ProcState_

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}
; 56   : 
; 57   : 	BOOL CheckScheduleTime()
; 58   : 	{
; 59   : 		CTime tCurrentTime = CTime::GetTickCount();
; 60   : 
; 61   : 		int iYear = tCurrentTime.GetYear();
; 62   : 		int iMonth = tCurrentTime.GetMonth();
; 63   : 		int iDay = tCurrentTime.GetDay();
; 64   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();
; 65   : 		int iHour = tCurrentTime.GetHour();
; 66   : 		int iMinute = tCurrentTime.GetMinute();
; 67   : 		int iCrywolfState = -1;
; 68   : 
; 69   : 		CTimeSpan tTimeRange(0, 0, this->m_iContinuanceTime, 0);
; 70   : 
; 71   : 		if ( this->m_iMonth != -1 
; 72   : 			&& this->m_iMonth != iMonth)
; 73   : 		{
; 74   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;
; 75   : 
; 76   : 			if ( tCurrentTime < tConditionTime  ||
; 77   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 78   : 			{
; 79   : 				return FALSE;
; 80   : 			}
; 81   : 		}
; 82   : 
; 83   : 		if ( this->m_iDay != -1
; 84   : 			&& this->m_iDay != iDay)
; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;
; 87   : 
; 88   : 			if ( tCurrentTime < tConditionTime  ||
; 89   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 90   : 			{
; 91   : 				return FALSE;
; 92   : 			}
; 93   : 		}
; 94   : 
; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)
; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)
; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;
; 104  : 
; 105  : 			if ( tCurrentTime < tConditionTime  ||
; 106  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 107  : 			{
; 108  : 				return FALSE;
; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)
; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;
; 116  : 
; 117  : 			if ( tCurrentTime < tConditionTime  ||
; 118  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 119  : 			{
; 120  : 				return FALSE;
; 121  : 			}
; 122  : 		}
; 123  : 		return TRUE;
; 124  : 	}
; 125  : 
; 126  : 	int GetLeftTime()
; 127  : 	{
; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00097	ff d7		 call	 edi
  00099	8b 8b 00 bf 0f
	00		 mov	 ecx, DWORD PTR [ebx+1031936]
  0009f	03 8b fc be 0f
	00		 add	 ecx, DWORD PTR [ebx+1031932]
  000a5	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  000a7	b8 00 00 00 00	 mov	 eax, 0
  000ac	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  000af	eb 02		 jmp	 SHORT $LN17@ProcState_
$LN18@ProcState_:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  000b1	33 c9		 xor	 ecx, ecx
$LN17@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 873  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  000b3	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000b8	f7 e9		 imul	 ecx
  000ba	c1 fa 06	 sar	 edx, 6
  000bd	8b c2		 mov	 eax, edx
  000bf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c2	03 c2		 add	 eax, edx

; 874  : 
; 875  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 238)), iTime);

  000c4	50		 push	 eax
  000c5	68 ee 0c 00 00	 push	 3310			; 00000ceeH

; 876  : 		}
; 877  : 		else

  000ca	eb 06		 jmp	 SHORT $LN26@ProcState_
$LN3@ProcState_:

; 878  : 		{
; 879  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 239)), iTime);

  000cc	50		 push	 eax
  000cd	68 ef 0c 00 00	 push	 3311			; 00000cefH
$LN26@ProcState_:
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000d7	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000e2	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 880  : 		}
; 881  : 
; 882  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  000ea	ff d7		 call	 edi
  000ec	89 86 0c c0 0f
	00		 mov	 DWORD PTR [esi+1032204], eax
  000f2	5b		 pop	 ebx
$LN2@ProcState_:

; 883  : 	}
; 884  : }

  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	c3		 ret	 0
?ProcState_READY@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_READY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_NOTIFY_2, COMDAT
; _this$ = ecx

; 841  : {

  00000	56		 push	 esi

; 842  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  00001	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff d6		 call	 esi
  0000c	2b 87 0c c0 0f
	00		 sub	 eax, DWORD PTR [edi+1032204]
  00012	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  00017	0f 86 d1 00 00
	00		 jbe	 $LN2@ProcState_

; 844  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  0001d	53		 push	 ebx
  0001e	6b 9f 8c a8 0f
	00 2c		 imul	 ebx, DWORD PTR [edi+1026188], 44
  00025	03 df		 add	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00027	ff d6		 call	 esi
  00029	2b 83 00 bf 0f
	00		 sub	 eax, DWORD PTR [ebx+1031936]
  0002f	3b 83 fc be 0f
	00		 cmp	 eax, DWORD PTR [ebx+1031932]
  00035	77 1a		 ja	 SHORT $LN9@ProcState_

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}
; 56   : 
; 57   : 	BOOL CheckScheduleTime()
; 58   : 	{
; 59   : 		CTime tCurrentTime = CTime::GetTickCount();
; 60   : 
; 61   : 		int iYear = tCurrentTime.GetYear();
; 62   : 		int iMonth = tCurrentTime.GetMonth();
; 63   : 		int iDay = tCurrentTime.GetDay();
; 64   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();
; 65   : 		int iHour = tCurrentTime.GetHour();
; 66   : 		int iMinute = tCurrentTime.GetMinute();
; 67   : 		int iCrywolfState = -1;
; 68   : 
; 69   : 		CTimeSpan tTimeRange(0, 0, this->m_iContinuanceTime, 0);
; 70   : 
; 71   : 		if ( this->m_iMonth != -1 
; 72   : 			&& this->m_iMonth != iMonth)
; 73   : 		{
; 74   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;
; 75   : 
; 76   : 			if ( tCurrentTime < tConditionTime  ||
; 77   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 78   : 			{
; 79   : 				return FALSE;
; 80   : 			}
; 81   : 		}
; 82   : 
; 83   : 		if ( this->m_iDay != -1
; 84   : 			&& this->m_iDay != iDay)
; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;
; 87   : 
; 88   : 			if ( tCurrentTime < tConditionTime  ||
; 89   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 90   : 			{
; 91   : 				return FALSE;
; 92   : 			}
; 93   : 		}
; 94   : 
; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)
; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)
; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;
; 104  : 
; 105  : 			if ( tCurrentTime < tConditionTime  ||
; 106  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 107  : 			{
; 108  : 				return FALSE;
; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)
; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;
; 116  : 
; 117  : 			if ( tCurrentTime < tConditionTime  ||
; 118  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 119  : 			{
; 120  : 				return FALSE;
; 121  : 			}
; 122  : 		}
; 123  : 		return TRUE;
; 124  : 	}
; 125  : 
; 126  : 	int GetLeftTime()
; 127  : 	{
; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00037	ff d6		 call	 esi
  00039	8b 8b 00 bf 0f
	00		 mov	 ecx, DWORD PTR [ebx+1031936]
  0003f	03 8b fc be 0f
	00		 add	 ecx, DWORD PTR [ebx+1031932]
  00045	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  00047	b8 00 00 00 00	 mov	 eax, 0
  0004c	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  0004f	eb 02		 jmp	 SHORT $LN8@ProcState_
$LN9@ProcState_:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  00051	33 c9		 xor	 ecx, ecx
$LN8@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 844  : 		int iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 ) / 60;

  00053	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00058	f7 e9		 imul	 ecx
  0005a	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0005f	c1 fa 06	 sar	 edx, 6
  00062	8b ca		 mov	 ecx, edx
  00064	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00067	03 ca		 add	 ecx, edx
  00069	f7 e9		 imul	 ecx
  0006b	03 d1		 add	 edx, ecx
  0006d	c1 fa 05	 sar	 edx, 5
  00070	8b c2		 mov	 eax, edx
  00072	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00075	03 c2		 add	 eax, edx

; 845  : 
; 846  : 		if ( iTime == 0 )

  00077	75 4e		 jne	 SHORT $LN3@ProcState_

; 848  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  00079	6b 9f 8c a8 0f
	00 2c		 imul	 ebx, DWORD PTR [edi+1026188], 44
  00080	03 df		 add	 ebx, edi
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00082	ff d6		 call	 esi
  00084	2b 83 00 bf 0f
	00		 sub	 eax, DWORD PTR [ebx+1031936]
  0008a	3b 83 fc be 0f
	00		 cmp	 eax, DWORD PTR [ebx+1031932]
  00090	77 1a		 ja	 SHORT $LN18@ProcState_

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}
; 56   : 
; 57   : 	BOOL CheckScheduleTime()
; 58   : 	{
; 59   : 		CTime tCurrentTime = CTime::GetTickCount();
; 60   : 
; 61   : 		int iYear = tCurrentTime.GetYear();
; 62   : 		int iMonth = tCurrentTime.GetMonth();
; 63   : 		int iDay = tCurrentTime.GetDay();
; 64   : 		int iDayOfWeek = tCurrentTime.GetDayOfWeek();
; 65   : 		int iHour = tCurrentTime.GetHour();
; 66   : 		int iMinute = tCurrentTime.GetMinute();
; 67   : 		int iCrywolfState = -1;
; 68   : 
; 69   : 		CTimeSpan tTimeRange(0, 0, this->m_iContinuanceTime, 0);
; 70   : 
; 71   : 		if ( this->m_iMonth != -1 
; 72   : 			&& this->m_iMonth != iMonth)
; 73   : 		{
; 74   : 			CTime tConditionTime(iYear, this->m_iMonth, 0, 0, 0, 0, -1) ;
; 75   : 
; 76   : 			if ( tCurrentTime < tConditionTime  ||
; 77   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 78   : 			{
; 79   : 				return FALSE;
; 80   : 			}
; 81   : 		}
; 82   : 
; 83   : 		if ( this->m_iDay != -1
; 84   : 			&& this->m_iDay != iDay)
; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;
; 87   : 
; 88   : 			if ( tCurrentTime < tConditionTime  ||
; 89   : 				 tCurrentTime > tConditionTime+tTimeRange )
; 90   : 			{
; 91   : 				return FALSE;
; 92   : 			}
; 93   : 		}
; 94   : 
; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)
; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)
; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;
; 104  : 
; 105  : 			if ( tCurrentTime < tConditionTime  ||
; 106  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 107  : 			{
; 108  : 				return FALSE;
; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)
; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;
; 116  : 
; 117  : 			if ( tCurrentTime < tConditionTime  ||
; 118  : 				 tCurrentTime > tConditionTime+tTimeRange )
; 119  : 			{
; 120  : 				return FALSE;
; 121  : 			}
; 122  : 		}
; 123  : 		return TRUE;
; 124  : 	}
; 125  : 
; 126  : 	int GetLeftTime()
; 127  : 	{
; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00092	ff d6		 call	 esi
  00094	8b 8b 00 bf 0f
	00		 mov	 ecx, DWORD PTR [ebx+1031936]
  0009a	03 8b fc be 0f
	00		 add	 ecx, DWORD PTR [ebx+1031932]
  000a0	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  000a2	b8 00 00 00 00	 mov	 eax, 0
  000a7	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  000aa	eb 02		 jmp	 SHORT $LN17@ProcState_
$LN18@ProcState_:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  000ac	33 c9		 xor	 ecx, ecx
$LN17@ProcState_:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 848  : 			iTime = ( this->m_StateTimeInfo[this->GetCrywolfState()].GetLeftTime() / 1000 );

  000ae	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  000b3	f7 e9		 imul	 ecx
  000b5	c1 fa 06	 sar	 edx, 6
  000b8	8b c2		 mov	 eax, edx
  000ba	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000bd	03 c2		 add	 eax, edx

; 849  : 
; 850  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 236)), iTime);

  000bf	50		 push	 eax
  000c0	68 ec 0c 00 00	 push	 3308			; 00000cecH

; 851  : 		}
; 852  : 		else

  000c5	eb 06		 jmp	 SHORT $LN26@ProcState_
$LN3@ProcState_:

; 853  : 		{
; 854  : 			UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 237)), iTime);

  000c7	50		 push	 eax
  000c8	68 ed 0c 00 00	 push	 3309			; 00000cedH
$LN26@ProcState_:
  000cd	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000d2	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000d7	50		 push	 eax
  000d8	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000dd	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 855  : 		}
; 856  : 
; 857  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  000e5	ff d6		 call	 esi
  000e7	89 87 0c c0 0f
	00		 mov	 DWORD PTR [edi+1032204], eax
  000ed	5b		 pop	 ebx
$LN2@ProcState_:

; 858  : 	}
; 859  : }

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	c3		 ret	 0
?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_NOTIFY_2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ PROC		; CCrywolf::ProcState_NOTIFY_1, COMDAT
; _this$ = ecx

; 830  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 831  : 	if ( (GetTickCount() - this->m_dwCrywolfNotifyMsgStartTick) > 70000 )

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	2b 86 0c c0 0f
	00		 sub	 eax, DWORD PTR [esi+1032204]
  0000f	3d 70 11 01 00	 cmp	 eax, 70000		; 00011170H
  00014	76 29		 jbe	 SHORT $LN2@ProcState_

; 832  : 	{
; 833  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 228)));

  00016	68 e4 0c 00 00	 push	 3300			; 00000ce4H
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00020	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0002b	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
  00030	83 c4 08	 add	 esp, 8

; 834  : 		this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00039	89 86 0c c0 0f
	00		 mov	 DWORD PTR [esi+1032204], eax
$LN2@ProcState_:
  0003f	5e		 pop	 esi

; 835  : 	}
; 836  : }

  00040	c3		 ret	 0
?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ ENDP		; CCrywolf::ProcState_NOTIFY_1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?ProcState_NONE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?ProcState_NONE@CCrywolf@@QAEXXZ PROC			; CCrywolf::ProcState_NONE, COMDAT
; _this$ = ecx

; 824  : 	return;
; 825  : }

  00000	c3		 ret	 0
?ProcState_NONE@CCrywolf@@QAEXXZ ENDP			; CCrywolf::ProcState_NONE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_ENDCYCLE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_ENDCYCLE@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_ENDCYCLE, COMDAT
; _this$ = ecx

; 800  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	57		 push	 edi

; 801  : 	LogAddC(4, "[ Crywolf ] State (%d) -> ENDCYCLE", this->m_iCrywolfState);

  00004	ff b3 8c a8 0f
	00		 push	 DWORD PTR [ebx+1026188]
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JNFIGOIN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5ENDCYC@
  0000f	6a 04		 push	 4
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  0001a	c7 83 8c a8 0f
	00 06 00 00 00	 mov	 DWORD PTR [ebx+1026188], 6
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002a	89 83 08 c0 0f
	00		 mov	 DWORD PTR [ebx+1032200], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 805  : 	this->SetCrywolfMapAttr(this->GetOccupationState());

  00030	8b cb		 mov	 ecx, ebx
  00032	ff b3 90 a8 0f
	00		 push	 DWORD PTR [ebx+1026192]
  00038	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 806  : 	this->SetCrywolfCommonNPC(this->GetOccupationState());

  0003d	ff b3 90 a8 0f
	00		 push	 DWORD PTR [ebx+1026192]
  00043	8b cb		 mov	 ecx, ebx
  00045	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 807  : 
; 808  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  0004a	33 ff		 xor	 edi, edi
  0004c	39 bb 6c c0 0f
	00		 cmp	 DWORD PTR [ebx+1032300], edi
  00052	7e 23		 jle	 SHORT $LN3@SetState_E

; 801  : 	LogAddC(4, "[ Crywolf ] State (%d) -> ENDCYCLE", this->m_iCrywolfState);

  00054	56		 push	 esi
  00055	8d b3 1c c0 0f
	00		 lea	 esi, DWORD PTR [ebx+1032220]
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@SetState_E:

; 809  : 	{
; 810  : 		TMonsterAIGroup::DelGroupInstance(this->m_iMonsterGroupNumberArray[n]);

  00060	ff 36		 push	 DWORD PTR [esi]
  00062	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00067	47		 inc	 edi
  00068	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b bb 6c c0 0f
	00		 cmp	 edi, DWORD PTR [ebx+1032300]
  00074	7c ea		 jl	 SHORT $LL4@SetState_E
  00076	5e		 pop	 esi
$LN3@SetState_E:

; 811  : 	}
; 812  : 
; 813  : 	TMonsterAIGroup::DelGroupInstance(this->m_iBossGroupNumber);

  00077	ff b3 78 c0 0f
	00		 push	 DWORD PTR [ebx+1032312]
  0007d	e8 00 00 00 00	 call	 ?DelGroupInstance@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::DelGroupInstance
  00082	83 c4 04	 add	 esp, 4

; 814  : 
; 815  : 	this->CreateCrywolfCommonMonster();

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?CreateCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::CreateCrywolfCommonMonster

; 816  : 	this->NotifyCrywolfHeroList();

  0008c	8b cb		 mov	 ecx, ebx
  0008e	e8 00 00 00 00	 call	 ?NotifyCrywolfHeroList@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfHeroList
  00093	5f		 pop	 edi

; 817  : 	this->ResetAllUserMVPScore();

  00094	8b cb		 mov	 ecx, ebx
  00096	5b		 pop	 ebx
  00097	e9 00 00 00 00	 jmp	 ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ; CCrywolf::ResetAllUserMVPScore
?SetState_ENDCYCLE@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_ENDCYCLE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_END@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_END@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_END, COMDAT
; _this$ = ecx

; 740  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 741  : 	this->m_dwCrywolfStartProcTick = 0;
; 742  : 	this->m_bChangeAI = FALSE;
; 743  : 
; 744  : 	LogAddC(4, "[ Crywolf ] State (%d) -> END", this->m_iCrywolfState);

  00005	ff b6 8c a8 0f
	00		 push	 DWORD PTR [esi+1026188]
  0000b	c7 86 10 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032208], 0
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@ODFOLGAL@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5END?$AA@
  0001a	6a 04		 push	 4
  0001c	c7 86 18 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032216], 0
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 745  : 
; 746  : 	if ( this->m_bTurnUpBoss != FALSE && CHECK_LIMIT(this->m_iBossIndex, OBJ_MAXMONSTER) )

  0002f	83 be 14 c0 0f
	00 00		 cmp	 DWORD PTR [esi+1032212], 0
  00036	74 54		 je	 SHORT $LN6@SetState_E
  00038	8b 8e 74 c0 0f
	00		 mov	 ecx, DWORD PTR [esi+1032308]
  0003e	85 c9		 test	 ecx, ecx
  00040	78 4a		 js	 SHORT $LN6@SetState_E
  00042	33 c0		 xor	 eax, eax
  00044	81 f9 03 29 00
	00		 cmp	 ecx, 10499		; 00002903H
  0004a	0f 9e c0	 setle	 al
  0004d	85 c0		 test	 eax, eax
  0004f	74 3b		 je	 SHORT $LN6@SetState_E

; 747  : 	{
; 748  : 		if ( gObj[this->m_iBossIndex].Live != FALSE )

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00056	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  0005c	80 7c 01 51 00	 cmp	 BYTE PTR [ecx+eax+81], 0
  00061	74 29		 je	 SHORT $LN6@SetState_E

; 749  : 		{
; 750  : 			UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 233)));

  00063	68 e9 0c 00 00	 push	 3305			; 00000ce9H
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0006d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00072	50		 push	 eax
  00073	6a 02		 push	 2
  00075	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  0007a	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  00082	c7 86 90 a8 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1026192], 1
$LN6@SetState_E:
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 758  : 	if ( this->GetOccupationState() == 1 )

  0008c	83 be 90 a8 0f
	00 01		 cmp	 DWORD PTR [esi+1026192], 1

; 759  : 	{
; 760  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 234)));

  00093	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00098	c7 86 14 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032212], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 99   : 	void SetCrywolfBossIndex(int iBossIndex){this->m_iBossIndex = iBossIndex;}

  000a2	c7 86 74 c0 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032308], -1
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 758  : 	if ( this->GetOccupationState() == 1 )

  000ac	75 26		 jne	 SHORT $LN7@SetState_E

; 759  : 	{
; 760  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 234)));

  000ae	68 ea 0c 00 00	 push	 3306			; 00000ceaH
  000b3	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000b8	50		 push	 eax
  000b9	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000be	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  000c3	c7 86 90 a8 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1026192], 1
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 763  : 		LogAddTD("[ Crywolf ][MVP] FAIL.......!!");

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DKDMKFDD@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5FAIL?4?4?4?4?4?4?4?$CB?$CB?$AA@

; 764  : 	}
; 765  : 	else

  000d2	eb 24		 jmp	 SHORT $LN38@SetState_E
$LN7@SetState_E:

; 766  : 	{
; 767  : 		UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 235)));

  000d4	68 eb 0c 00 00	 push	 3307			; 00000cebH
  000d9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000de	50		 push	 eax
  000df	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  000e4	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  000e9	c7 86 90 a8 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1026192], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 770  : 		LogAddTD("[ Crywolf ][MVP] SUCCESS.......!!");

  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NKNCJPPO@?$FL?5Crywolf?5?$FN?$FLMVP?$FN?5SUCCESS?4?4?4?4?4?4?4?$CB@
$LN38@SetState_E:
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000fe	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00101	c7 86 8c a8 0f
	00 05 00 00 00	 mov	 DWORD PTR [esi+1026188], 5
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 775  : 	this->NotifyCrywolfCurrentState();

  00111	8b ce		 mov	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00113	89 86 dc bf 0f
	00		 mov	 DWORD PTR [esi+1032156], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 775  : 	this->NotifyCrywolfCurrentState();

  00119	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 776  : 	this->ChangeAI(0);

  0011e	6a 00		 push	 0
  00120	8b ce		 mov	 ecx, esi
  00122	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 777  : 	
; 778  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar++)

  00127	bf cd 00 00 00	 mov	 edi, 205		; 000000cdH
  0012c	0f 1f 40 00	 npad	 4
$LL4@SetState_E:

; 779  : 	{
; 780  : 		int iUserIndex = g_CrywolfNPC_Altar.GetAltarUserIndex(iAltar);

  00130	57		 push	 edi
  00131	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00136	e8 00 00 00 00	 call	 ?GetAltarUserIndex@CCrywolfAltar@@QAEHH@Z ; CCrywolfAltar::GetAltarUserIndex
  0013b	8b d8		 mov	 ebx, eax

; 781  : 
; 782  : 		if ( iUserIndex != -1 )

  0013d	83 fb ff	 cmp	 ebx, -1
  00140	74 1d		 je	 SHORT $LN2@SetState_E

; 783  : 		{
; 784  : 			this->CalcGettingScore(iUserIndex, -1, 6);

  00142	6a 06		 push	 6
  00144	6a ff		 push	 -1
  00146	53		 push	 ebx
  00147	8b ce		 mov	 ecx, esi
  00149	e8 00 00 00 00	 call	 ?CalcGettingScore@CCrywolf@@QAEHHHH@Z ; CCrywolf::CalcGettingScore

; 785  : 
; 786  : 			if ( this->GetOccupationState() != 1 )

  0014e	83 be 90 a8 0f
	00 01		 cmp	 DWORD PTR [esi+1026192], 1
  00155	74 08		 je	 SHORT $LN2@SetState_E

; 787  : 			{
; 788  : 				this->MakeRewardForAltarElf(iUserIndex);

  00157	53		 push	 ebx
  00158	8b ce		 mov	 ecx, esi
  0015a	e8 00 00 00 00	 call	 ?MakeRewardForAltarElf@CCrywolf@@QAEXH@Z ; CCrywolf::MakeRewardForAltarElf
$LN2@SetState_E:

; 777  : 	
; 778  : 	for ( int iAltar = 205 ; iAltar <= 209 ; iAltar++)

  0015f	47		 inc	 edi
  00160	81 ff d1 00 00
	00		 cmp	 edi, 209		; 000000d1H
  00166	7e c8		 jle	 SHORT $LL4@SetState_E

; 789  : 			}
; 790  : 		}
; 791  : 	}
; 792  : 
; 793  : 	g_CrywolfNPC_Altar.ResetAllAltar();

  00168	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  0016d	e8 00 00 00 00	 call	 ?ResetAllAltar@CCrywolfAltar@@QAEXXZ ; CCrywolfAltar::ResetAllAltar
  00172	5f		 pop	 edi

; 794  : 	this->NotifyCrywolfPersonalRank();

  00173	8b ce		 mov	 ecx, esi
  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	e9 00 00 00 00	 jmp	 ?NotifyCrywolfPersonalRank@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfPersonalRank
?SetState_END@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_END
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_START@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
tv392 = -8						; size = 4
_n$1$ = -4						; size = 4
?SetState_START@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_START, COMDAT
; _this$ = ecx

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 687  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 231)));

  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0000e	68 e7 0c 00 00	 push	 3303			; 00000ce7H
  00013	89 75 f4	 mov	 DWORD PTR _this$1$[ebp], esi
  00016	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0001b	50		 push	 eax
  0001c	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00021	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 688  : 	LogAddC(4, "[ Crywolf ] State (%d) -> START", this->m_iCrywolfState);

  00026	ff b6 8c a8 0f
	00		 push	 DWORD PTR [esi+1026188]
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LIBINADF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5START?$AA@
  00031	6a 04		 push	 4
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00039	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  0003c	c7 86 8c a8 0f
	00 04 00 00 00	 mov	 DWORD PTR [esi+1026188], 4
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 693  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  0004c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00051	89 86 b0 bf 0f
	00		 mov	 DWORD PTR [esi+1032112], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 693  : 	if ( g_CrywolfNPC_Altar.GetContractedAltarCount() == 0 )

  00057	e8 00 00 00 00	 call	 ?GetContractedAltarCount@CCrywolfAltar@@QAEHXZ ; CCrywolfAltar::GetContractedAltarCount
  0005c	85 c0		 test	 eax, eax
  0005e	75 37		 jne	 SHORT $LN8@SetState_S

; 694  : 	{
; 695  : 		UTIL.SendCrywolfUserAnyMsg(2, lMsg.Get(MSGGET(12, 232)));

  00060	68 e8 0c 00 00	 push	 3304			; 00000ce8H
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0006a	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0006f	50		 push	 eax
  00070	6a 02		 push	 2
  00072	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00077	e8 00 00 00 00	 call	 ?SendCrywolfUserAnyMsg@CCrywolfUtil@@QAAXHPADZZ ; CCrywolfUtil::SendCrywolfUserAnyMsg
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  0007f	c7 86 90 a8 0f
	00 01 00 00 00	 mov	 DWORD PTR [esi+1026192], 1
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 697  : 		this->SetState(CRYWOLF_STATE_END);

  00089	8b ce		 mov	 ecx, esi
  0008b	6a 05		 push	 5
  0008d	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00092	5e		 pop	 esi

; 735  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
$LN8@SetState_S:
  00097	57		 push	 edi

; 698  : 
; 699  : 		return;
; 700  : 	}
; 701  : 
; 702  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00098	33 ff		 xor	 edi, edi
  0009a	89 7d fc	 mov	 DWORD PTR _n$1$[ebp], edi
  0009d	39 be 6c c0 0f
	00		 cmp	 DWORD PTR [esi+1032300], edi
  000a3	0f 8e bb 00 00
	00		 jle	 $LN3@SetState_S
  000a9	8d 86 1c c0 0f
	00		 lea	 eax, DWORD PTR [esi+1032220]
  000af	89 45 f8	 mov	 DWORD PTR tv392[ebp], eax
  000b2	53		 push	 ebx
$LL4@SetState_S:

; 703  : 	{
; 704  : 		int iLeaderIndex = TMonsterAIGroup::FindGroupLeader(this->m_iMonsterGroupNumberArray[n]);

  000b3	ff 30		 push	 DWORD PTR [eax]
  000b5	e8 00 00 00 00	 call	 ?FindGroupLeader@TMonsterAIGroup@@SAHH@Z ; TMonsterAIGroup::FindGroupLeader
  000ba	83 c4 04	 add	 esp, 4

; 705  : 
; 706  : 		if ( !CHECK_LIMIT(iLeaderIndex, OBJ_MAXMONSTER) )

  000bd	85 c0		 test	 eax, eax
  000bf	0f 88 85 00 00
	00		 js	 $LN2@SetState_S
  000c5	33 c9		 xor	 ecx, ecx
  000c7	3d 03 29 00 00	 cmp	 eax, 10499		; 00002903H
  000cc	0f 9e c1	 setle	 cl
  000cf	85 c9		 test	 ecx, ecx
  000d1	74 77		 je	 SHORT $LN2@SetState_S

; 707  : 			continue;
; 708  : 
; 709  : 		if ( gObj[iLeaderIndex].Class != 340 )

  000d3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d9	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048
  000df	b8 54 01 00 00	 mov	 eax, 340		; 00000154H
  000e4	03 da		 add	 ebx, edx
  000e6	66 39 83 90 00
	00 00		 cmp	 WORD PTR [ebx+144], ax
  000ed	75 5b		 jne	 SHORT $LN2@SetState_S

; 710  : 			continue;
; 711  : 
; 712  : 		LPOBJ lpObj = &gObj[iLeaderIndex];

  000ef	8d b3 4a 0c 00
	00		 lea	 esi, DWORD PTR [ebx+3146]
  000f5	bf 4b 00 00 00	 mov	 edi, 75			; 0000004bH
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL7@SetState_S:

; 715  : 		{
; 716  : 			if ( lpObj->VpPlayer2[i].state )

  00100	80 7e fe 00	 cmp	 BYTE PTR [esi-2], 0
  00104	74 36		 je	 SHORT $LN5@SetState_S

; 717  : 			{
; 718  : 				int number = lpObj->VpPlayer2[i].number;

  00106	0f bf 0e	 movsx	 ecx, WORD PTR [esi]

; 719  : 
; 720  : 				if ( OBJMAX_RANGE(number) != FALSE )

  00109	85 c9		 test	 ecx, ecx
  0010b	78 2f		 js	 SHORT $LN5@SetState_S
  0010d	33 c0		 xor	 eax, eax
  0010f	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00115	0f 9e c0	 setle	 al
  00118	85 c0		 test	 eax, eax
  0011a	74 20		 je	 SHORT $LN5@SetState_S

; 721  : 				{
; 722  : 					if ( gObj[number].Type == OBJ_USER )

  0011c	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00122	03 c2		 add	 eax, edx
  00124	80 78 50 01	 cmp	 BYTE PTR [eax+80], 1
  00128	75 12		 jne	 SHORT $LN5@SetState_S

; 723  : 					{
; 724  : 						gObjBackSpring2(&gObj[number], lpObj, 3);

  0012a	6a 03		 push	 3
  0012c	53		 push	 ebx
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  00133	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00139	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SetState_S:

; 713  : 
; 714  : 		for ( int i=0;i<MAX_VIEWPORT;i++)

  0013c	83 c6 0c	 add	 esi, 12			; 0000000cH
  0013f	83 ef 01	 sub	 edi, 1
  00142	75 bc		 jne	 SHORT $LL7@SetState_S
  00144	8b 75 f4	 mov	 esi, DWORD PTR _this$1$[ebp]
  00147	8b 7d fc	 mov	 edi, DWORD PTR _n$1$[ebp]
$LN2@SetState_S:

; 698  : 
; 699  : 		return;
; 700  : 	}
; 701  : 
; 702  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  0014a	8b 45 f8	 mov	 eax, DWORD PTR tv392[ebp]
  0014d	47		 inc	 edi
  0014e	83 c0 04	 add	 eax, 4
  00151	89 7d fc	 mov	 DWORD PTR _n$1$[ebp], edi
  00154	89 45 f8	 mov	 DWORD PTR tv392[ebp], eax
  00157	3b be 6c c0 0f
	00		 cmp	 edi, DWORD PTR [esi+1032300]
  0015d	0f 8c 50 ff ff
	ff		 jl	 $LL4@SetState_S
  00163	5b		 pop	 ebx
$LN3@SetState_S:

; 725  : 					}
; 726  : 				}
; 727  : 			}
; 728  : 		}
; 729  : 	}
; 730  : 
; 731  : 	this->ChangeAI(1);

  00164	6a 01		 push	 1
  00166	8b ce		 mov	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?ChangeAI@CCrywolf@@QAEXH@Z ; CCrywolf::ChangeAI

; 732  : 	this->m_dwCrywolfStartProcTick = GetTickCount();

  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00173	5f		 pop	 edi
  00174	89 86 10 c0 0f
	00		 mov	 DWORD PTR [esi+1032208], eax

; 733  : 	this->m_bTurnUpBoss = FALSE;

  0017a	c7 86 14 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032212], 0

; 734  : 	this->m_bChangeAI = FALSE;

  00184	c7 86 18 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032216], 0
  0018e	5e		 pop	 esi

; 735  : }

  0018f	8b e5		 mov	 esp, ebp
  00191	5d		 pop	 ebp
  00192	c3		 ret	 0
?SetState_START@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_START
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_READY@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_READY@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_READY, COMDAT
; _this$ = ecx

; 661  : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b d9		 mov	 ebx, ecx

; 662  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 230)));

  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00009	68 e6 0c 00 00	 push	 3302			; 00000ce6H
  0000e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00013	50		 push	 eax
  00014	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00019	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 663  : 	LogAddC(4, "[ Crywolf ] State (%d) -> READY", this->m_iCrywolfState);

  0001e	ff b3 8c a8 0f
	00		 push	 DWORD PTR [ebx+1026188]
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IDMBBMCN@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5READY?$AA@
  00029	6a 04		 push	 4
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00031	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00034	c7 83 8c a8 0f
	00 03 00 00 00	 mov	 DWORD PTR [ebx+1026188], 3
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00044	89 83 84 bf 0f
	00		 mov	 DWORD PTR [ebx+1032068], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 668  : 	this->SetCrywolfCommonNPC(2);

  0004a	8b cb		 mov	 ecx, ebx
  0004c	6a 02		 push	 2
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  0004e	c7 83 90 a8 0f
	00 02 00 00 00	 mov	 DWORD PTR [ebx+1026192], 2
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 668  : 	this->SetCrywolfCommonNPC(2);

  00058	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 669  : 	this->SetCrywolfMapAttr(2);

  0005d	6a 02		 push	 2
  0005f	8b cb		 mov	 ecx, ebx
  00061	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 670  : 	this->RemoveCrywolfCommonMonster();

  00066	8b cb		 mov	 ecx, ebx
  00068	e8 00 00 00 00	 call	 ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::RemoveCrywolfCommonMonster

; 671  : 	g_CrywolfNPC_Altar.SetAllAltarObjectIndex();

  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00072	e8 00 00 00 00	 call	 ?SetAllAltarObjectIndex@CCrywolfAltar@@QAEXXZ ; CCrywolfAltar::SetAllAltarObjectIndex

; 672  : 	g_CrywolfNPC_Altar.SetAllAltarViewState(0x10000);

  00077	68 00 00 01 00	 push	 65536			; 00010000H
  0007c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfNPC_Altar@@3VCCrywolfAltar@@A ; g_CrywolfNPC_Altar
  00081	e8 00 00 00 00	 call	 ?SetAllAltarViewState@CCrywolfAltar@@QAEXH@Z ; CCrywolfAltar::SetAllAltarViewState

; 673  : 
; 674  : 	for ( int n=0;n<this->m_iMonsterGroupNumberCount;n++)

  00086	33 ff		 xor	 edi, edi
  00088	39 bb 6c c0 0f
	00		 cmp	 DWORD PTR [ebx+1032300], edi
  0008e	7e 1e		 jle	 SHORT $LN3@SetState_R

; 662  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 230)));

  00090	56		 push	 esi
  00091	8d b3 1c c0 0f
	00		 lea	 esi, DWORD PTR [ebx+1032220]
$LL4@SetState_R:

; 675  : 	{
; 676  : 		TMonsterAIGroup::Init(this->m_iMonsterGroupNumberArray[n]);

  00097	ff 36		 push	 DWORD PTR [esi]
  00099	e8 00 00 00 00	 call	 ?Init@TMonsterAIGroup@@SAXH@Z ; TMonsterAIGroup::Init
  0009e	47		 inc	 edi
  0009f	8d 76 04	 lea	 esi, DWORD PTR [esi+4]
  000a2	83 c4 04	 add	 esp, 4
  000a5	3b bb 6c c0 0f
	00		 cmp	 edi, DWORD PTR [ebx+1032300]
  000ab	7c ea		 jl	 SHORT $LL4@SetState_R
  000ad	5e		 pop	 esi
$LN3@SetState_R:

; 677  : 	}
; 678  : 
; 679  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000b4	5f		 pop	 edi
  000b5	89 83 0c c0 0f
	00		 mov	 DWORD PTR [ebx+1032204], eax

; 680  : 	this->ResetAllUserMVPScore();

  000bb	8b cb		 mov	 ecx, ebx
  000bd	5b		 pop	 ebx
  000be	e9 00 00 00 00	 jmp	 ?ResetAllUserMVPScore@CCrywolf@@QAEXXZ ; CCrywolf::ResetAllUserMVPScore
?SetState_READY@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_READY
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_NOTIFY_2@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_NOTIFY_2@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_NOTIFY_2, COMDAT
; _this$ = ecx

; 645  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 646  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 229)));

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00008	68 e5 0c 00 00	 push	 3301			; 00000ce5H
  0000d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00018	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 647  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NOTIFY_2", this->m_iCrywolfState);

  0001d	ff b7 8c a8 0f
	00		 push	 DWORD PTR [edi+1026188]
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@LGOIAKNG@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
  00028	6a 04		 push	 4
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00030	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00033	c7 87 8c a8 0f
	00 02 00 00 00	 mov	 DWORD PTR [edi+1026188], 2
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00043	89 87 58 bf 0f
	00		 mov	 DWORD PTR [edi+1032024], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 652  : 	this->SetCrywolfCommonNPC(2);

  00049	8b cf		 mov	 ecx, edi
  0004b	6a 02		 push	 2
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 98   : 	void SetOccupationState(int iOccupationState){this->m_iOccupationState = iOccupationState;}

  0004d	c7 87 90 a8 0f
	00 02 00 00 00	 mov	 DWORD PTR [edi+1026192], 2
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 652  : 	this->SetCrywolfCommonNPC(2);

  00057	e8 00 00 00 00	 call	 ?SetCrywolfCommonNPC@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfCommonNPC

; 653  : 	this->SetCrywolfMapAttr(2);

  0005c	6a 02		 push	 2
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ?SetCrywolfMapAttr@CCrywolf@@QAEXH@Z ; CCrywolf::SetCrywolfMapAttr

; 654  : 	this->RemoveCrywolfCommonMonster();

  00065	8b cf		 mov	 ecx, edi
  00067	e8 00 00 00 00	 call	 ?RemoveCrywolfCommonMonster@CCrywolf@@QAEXXZ ; CCrywolf::RemoveCrywolfCommonMonster

; 655  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00072	89 87 0c c0 0f
	00		 mov	 DWORD PTR [edi+1032204], eax
  00078	5f		 pop	 edi

; 656  : }

  00079	c3		 ret	 0
?SetState_NOTIFY_2@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_NOTIFY_2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_NOTIFY_1@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_NOTIFY_1@CCrywolf@@QAEXXZ PROC		; CCrywolf::SetState_NOTIFY_1, COMDAT
; _this$ = ecx

; 633  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 634  : 	UTIL.SendMapServerGroupMsg(lMsg.Get(MSGGET(12, 228)));

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00008	68 e4 0c 00 00	 push	 3300			; 00000ce4H
  0000d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00012	50		 push	 eax
  00013	68 00 00 00 00	 push	 OFFSET ?UTIL@@3VCCrywolfUtil@@A
  00018	e8 00 00 00 00	 call	 ?SendMapServerGroupMsg@CCrywolfUtil@@QAAXPADZZ ; CCrywolfUtil::SendMapServerGroupMsg

; 635  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NOTIFY_1", this->m_iCrywolfState);

  0001d	ff b7 8c a8 0f
	00		 push	 DWORD PTR [edi+1026188]
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JNMFFJBF@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NOTIFY@
  00028	6a 04		 push	 4
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00030	83 c4 14	 add	 esp, 20			; 00000014H
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00033	c7 87 8c a8 0f
	00 01 00 00 00	 mov	 DWORD PTR [edi+1026188], 1
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00043	89 87 2c bf 0f
	00		 mov	 DWORD PTR [edi+1031980], eax
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 639  : 	this->m_dwCrywolfNotifyMsgStartTick = GetTickCount();

  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0004f	89 87 0c c0 0f
	00		 mov	 DWORD PTR [edi+1032204], eax
  00055	5f		 pop	 edi

; 640  : }

  00056	c3		 ret	 0
?SetState_NOTIFY_1@CCrywolf@@QAEXXZ ENDP		; CCrywolf::SetState_NOTIFY_1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState_NONE@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?SetState_NONE@CCrywolf@@QAEXXZ PROC			; CCrywolf::SetState_NONE, COMDAT
; _this$ = ecx

; 623  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 624  : 	LogAddC(4, "[ Crywolf ] State (%d) -> NONE", this->m_iCrywolfState);

  00003	ff b6 8c a8 0f
	00		 push	 DWORD PTR [esi+1026188]
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NIMEOPNM@?$FL?5Crywolf?5?$FN?5State?5?$CI?$CFd?$CJ?5?9?$DO?5NONE?$AA@
  0000e	6a 04		 push	 4
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h

; 96   : 	void SetCrywolfState(int iCrywolfState){this->m_iCrywolfState = iCrywolfState;}

  00019	c7 86 8c a8 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1026188], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00029	89 86 00 bf 0f
	00		 mov	 DWORD PTR [esi+1031936], eax
  0002f	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 628  : }

  00030	c3		 ret	 0
?SetState_NONE@CCrywolf@@QAEXXZ ENDP			; CCrywolf::SetState_NONE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?CheckStateTimeSync@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?CheckStateTimeSync@CCrywolf@@QAEHXZ PROC		; CCrywolf::CheckStateTimeSync, COMDAT
; _this$ = ecx

; 497  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 498  : 	if (this->m_iCrywolfState != CRYWOLF_STATE_NONE )

  00005	8b 83 8c a8 0f
	00		 mov	 eax, DWORD PTR [ebx+1026188]
  0000b	85 c0		 test	 eax, eax
  0000d	0f 84 89 00 00
	00		 je	 $LN5@CheckState

; 499  : 	{
; 500  : 		if ( this->m_StateTimeInfo[this->m_iCrywolfState].m_bUsed == FALSE )

  00013	6b c0 2c	 imul	 eax, eax, 44
  00016	83 bc 18 d8 be
	0f 00 00	 cmp	 DWORD PTR [eax+ebx+1031896], 0
  0001e	75 07		 jne	 SHORT $LN6@CheckState

; 501  : 		{
; 502  : 			return -1;

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	83 c8 ff	 or	 eax, -1
  00025	5b		 pop	 ebx

; 540  : }

  00026	c3		 ret	 0
$LN6@CheckState:

; 503  : 		}
; 504  : 
; 505  : 		DWORD dwTime = GetTickCount();

  00027	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0002d	ff d6		 call	 esi

; 506  : 
; 507  : 		if ( this->m_StateTimeInfo[this->m_iCrywolfState].CheckContinuanceTime() == FALSE )

  0002f	6b bb 8c a8 0f
	00 2c		 imul	 edi, DWORD PTR [ebx+1026188], 44
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00036	ff d6		 call	 esi
  00038	2b 84 1f 00 bf
	0f 00		 sub	 eax, DWORD PTR [edi+ebx+1031936]
  0003f	3b 84 1f fc be
	0f 00		 cmp	 eax, DWORD PTR [edi+ebx+1031932]
  00046	76 4b		 jbe	 SHORT $LN9@CheckState
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 515  : 					this->SetState(CRYWOLF_STATE_NOTIFY_1);

  00048	6b 83 8c a8 0f
	00 2c		 imul	 eax, DWORD PTR [ebx+1026188], 44
  0004f	8b cb		 mov	 ecx, ebx
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 44   : 		this->m_dwAppliedTickCount = 0;

  00051	c7 84 18 00 bf
	0f 00 00 00 00
	00		 mov	 DWORD PTR [eax+ebx+1031936], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 511  : 			if ( this->m_iCrywolfState == CRYWOLF_STATE_ENDCYCLE )

  0005c	8b 83 8c a8 0f
	00		 mov	 eax, DWORD PTR [ebx+1026188]
  00062	83 f8 06	 cmp	 eax, 6
  00065	75 26		 jne	 SHORT $LN8@CheckState

; 512  : 			{
; 513  : 				if ( this->m_iScheduleMode == 1 )

  00067	83 7b 10 01	 cmp	 DWORD PTR [ebx+16], 1
  0006b	75 10		 jne	 SHORT $LN10@CheckState

; 515  : 					this->SetState(CRYWOLF_STATE_NOTIFY_1);

  0006d	6a 01		 push	 1
  0006f	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi

; 525  : 			}
; 526  : 		}
; 527  : 		return 1;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	5b		 pop	 ebx

; 540  : }

  0007c	c3		 ret	 0
$LN10@CheckState:

; 516  : 				}
; 517  : 				else
; 518  : 				{
; 519  : 					this->SetState(CRYWOLF_STATE_NONE);

  0007d	6a 00		 push	 0
  0007f	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi

; 525  : 			}
; 526  : 		}
; 527  : 		return 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	5b		 pop	 ebx

; 540  : }

  0008c	c3		 ret	 0
$LN8@CheckState:

; 520  : 				}
; 521  : 			}
; 522  : 			else
; 523  : 			{
; 524  : 				this->SetNextState(this->m_iCrywolfState);

  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?SetNextState@CCrywolf@@QAEXH@Z ; CCrywolf::SetNextState
$LN9@CheckState:

; 525  : 			}
; 526  : 		}
; 527  : 		return 1;

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	5b		 pop	 ebx

; 540  : }

  0009b	c3		 ret	 0
$LN5@CheckState:

; 528  : 	}
; 529  : 
; 530  : 	for ( int i=0;i<m_StartTimeInfoCount;i++)

  0009c	33 ff		 xor	 edi, edi
  0009e	39 bb d4 be 0f
	00		 cmp	 DWORD PTR [ebx+1031892], edi
  000a4	7e 39		 jle	 SHORT $LN3@CheckState
  000a6	8d b3 68 bb 0f
	00		 lea	 esi, DWORD PTR [ebx+1031016]
  000ac	0f 1f 40 00	 npad	 4
$LL4@CheckState:

; 531  : 	{
; 532  : 		if ( this->m_StartTimeInfo[i].CheckScheduleTime() != FALSE )

  000b0	8d 4e fc	 lea	 ecx, DWORD PTR [esi-4]
  000b3	e8 00 00 00 00	 call	 ?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ; CCrywolfStateTimeInfo::CheckScheduleTime
  000b8	85 c0		 test	 eax, eax
  000ba	74 17		 je	 SHORT $LN2@CheckState

; 533  : 		{
; 534  : 			LogAddTD("[ Crywolf ] Start Crywolf");

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@NGBLEMH@?$FL?5Crywolf?5?$FN?5Start?5Crywolf?$AA@
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c7	83 c4 04	 add	 esp, 4

; 535  : 			this->SetState(this->m_StartTimeInfo[i].m_iStateNumber);

  000ca	8b cb		 mov	 ecx, ebx
  000cc	ff 36		 push	 DWORD PTR [esi]
  000ce	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
$LN2@CheckState:

; 528  : 	}
; 529  : 
; 530  : 	for ( int i=0;i<m_StartTimeInfoCount;i++)

  000d3	47		 inc	 edi
  000d4	83 c6 2c	 add	 esi, 44			; 0000002cH
  000d7	3b bb d4 be 0f
	00		 cmp	 edi, DWORD PTR [ebx+1031892]
  000dd	7c d1		 jl	 SHORT $LL4@CheckState
$LN3@CheckState:
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi

; 536  : 		}
; 537  : 	}
; 538  : 
; 539  : 	return 0;

  000e1	33 c0		 xor	 eax, eax
  000e3	5b		 pop	 ebx

; 540  : }

  000e4	c3		 ret	 0
?CheckStateTimeSync@CCrywolf@@QAEHXZ ENDP		; CCrywolf::CheckStateTimeSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetNextState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCurrentState$ = 8					; size = 4
?SetNextState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetNextState, COMDAT
; _this$ = ecx

; 616  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 	int iNextState = iCurrentState + 1;

  00003	ff 45 08	 inc	 DWORD PTR _iCurrentState$[ebp]

; 619  : }

  00006	5d		 pop	 ebp

; 618  : 	this->SetState(iNextState);

  00007	e9 00 00 00 00	 jmp	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
?SetNextState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetNextState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?SetState@CCrywolf@@QAEXH@Z
_TEXT	SEGMENT
_iCrywolfState$ = 8					; size = 4
?SetState@CCrywolf@@QAEXH@Z PROC			; CCrywolf::SetState, COMDAT
; _this$ = ecx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : 	switch ( iCrywolfState )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iCrywolfState$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	83 f8 06	 cmp	 eax, 6
  0000c	0f 87 9c 00 00
	00		 ja	 $LN2@SetState
  00012	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@SetState[eax*4]
$LN4@SetState:

; 585  : 	{
; 586  : 		case CRYWOLF_STATE_NONE:
; 587  : 			this->SetState_NONE();

  00019	e8 00 00 00 00	 call	 ?SetState_NONE@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NONE

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  00025	8b ce		 mov	 ecx, esi
  00027	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  0002c	5e		 pop	 esi

; 611  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN5@SetState:

; 588  : 			break;
; 589  : 		case CRYWOLF_STATE_NOTIFY_1:
; 590  : 			this->SetState_NOTIFY_1();

  00031	e8 00 00 00 00	 call	 ?SetState_NOTIFY_1@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NOTIFY_1

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  00044	5e		 pop	 esi

; 611  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN6@SetState:

; 591  : 			break;
; 592  : 		case CRYWOLF_STATE_NOTIFY_2:
; 593  : 			this->SetState_NOTIFY_2();

  00049	e8 00 00 00 00	 call	 ?SetState_NOTIFY_2@CCrywolf@@QAEXXZ ; CCrywolf::SetState_NOTIFY_2

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  0005c	5e		 pop	 esi

; 611  : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN7@SetState:

; 594  : 			break;
; 595  : 		case CRYWOLF_STATE_READY:
; 596  : 			this->SetState_READY();

  00061	e8 00 00 00 00	 call	 ?SetState_READY@CCrywolf@@QAEXXZ ; CCrywolf::SetState_READY

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  00074	5e		 pop	 esi

; 611  : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN8@SetState:

; 597  : 			break;
; 598  : 		case CRYWOLF_STATE_START:
; 599  : 			this->SetState_START();

  00079	e8 00 00 00 00	 call	 ?SetState_START@CCrywolf@@QAEXXZ ; CCrywolf::SetState_START

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  0008c	5e		 pop	 esi

; 611  : }

  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
$LN9@SetState:

; 600  : 			break;
; 601  : 		case CRYWOLF_STATE_END:
; 602  : 			this->SetState_END();

  00091	e8 00 00 00 00	 call	 ?SetState_END@CCrywolf@@QAEXXZ ; CCrywolf::SetState_END

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  0009d	8b ce		 mov	 ecx, esi
  0009f	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  000a4	5e		 pop	 esi

; 611  : }

  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
$LN10@SetState:

; 603  : 			break;
; 604  : 		case CRYWOLF_STATE_ENDCYCLE:
; 605  : 			this->SetState_ENDCYCLE();

  000a9	e8 00 00 00 00	 call	 ?SetState_ENDCYCLE@CCrywolf@@QAEXXZ ; CCrywolf::SetState_ENDCYCLE
$LN2@SetState:

; 606  : 			break;
; 607  : 	}
; 608  : 
; 609  : 	this->NotifyCrywolfCurrentState();

  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 ?NotifyCrywolfCurrentState@CCrywolf@@QAEXXZ ; CCrywolf::NotifyCrywolfCurrentState

; 610  : 	this->CrywolfInfoDBSave();

  000b5	8b ce		 mov	 ecx, esi
  000b7	e8 00 00 00 00	 call	 ?CrywolfInfoDBSave@CCrywolf@@QAEXXZ ; CCrywolf::CrywolfInfoDBSave
  000bc	5e		 pop	 esi

; 611  : }

  000bd	5d		 pop	 ebp
  000be	c2 04 00	 ret	 4
  000c1	0f 1f 00	 npad	 3
$LN13@SetState:
  000c4	00 00 00 00	 DD	 $LN4@SetState
  000c8	00 00 00 00	 DD	 $LN5@SetState
  000cc	00 00 00 00	 DD	 $LN6@SetState
  000d0	00 00 00 00	 DD	 $LN7@SetState
  000d4	00 00 00 00	 DD	 $LN8@SetState
  000d8	00 00 00 00	 DD	 $LN9@SetState
  000dc	00 00 00 00	 DD	 $LN10@SetState
?SetState@CCrywolf@@QAEXH@Z ENDP			; CCrywolf::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z
_TEXT	SEGMENT
_lpszFileName$ = 8					; size = 4
_iOccupationState$ = 12					; size = 4
?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z PROC		; CCrywolf::LoadCrywolfMapAttr, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	if ( !lpszFileName )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 23		 je	 SHORT $LN4@LoadCrywol

; 364  : 		return;
; 365  : 
; 366  : 	if ( iOccupationState < 0 || iOccupationState >= 3 )

  0000a	8b 45 0c	 mov	 eax, DWORD PTR _iOccupationState$[ebp]
  0000d	83 f8 02	 cmp	 eax, 2
  00010	77 1b		 ja	 SHORT $LN4@LoadCrywol

; 367  : 		return;
; 368  : 
; 369  : 	this->m_CrywolfMapAttr[iOccupationState].LoadMapAttr(lpszFileName, MAP_INDEX_CRYWOLF_FIRSTZONE);

  00012	c7 45 0c 22 00
	00 00		 mov	 DWORD PTR _iOccupationState$[ebp], 34 ; 00000022H
  00019	89 55 08	 mov	 DWORD PTR _lpszFileName$[ebp], edx
  0001c	69 c0 28 38 05
	00		 imul	 eax, eax, 342056
  00022	83 c1 14	 add	 ecx, 20			; 00000014H
  00025	03 c8		 add	 ecx, eax

; 370  : }

  00027	5d		 pop	 ebp

; 367  : 		return;
; 368  : 
; 369  : 	this->m_CrywolfMapAttr[iOccupationState].LoadMapAttr(lpszFileName, MAP_INDEX_CRYWOLF_FIRSTZONE);

  00028	e9 00 00 00 00	 jmp	 ?LoadMapAttr@MapClass@@QAEXPADH@Z ; MapClass::LoadMapAttr
$LN4@LoadCrywol:

; 370  : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?LoadCrywolfMapAttr@CCrywolf@@QAEXPADH@Z ENDP		; CCrywolf::LoadCrywolfMapAttr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?DelAllData@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?DelAllData@CCrywolf@@QAEXXZ PROC			; CCrywolf::DelAllData, COMDAT
; _this$ = ecx

; 322  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 325  : 		this->m_StateTimeInfo[i].Reset();

  00003	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 24   : 		this->m_bUsed = FALSE;

  00008	c7 86 d8 be 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031896], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 325  : 		this->m_StateTimeInfo[i].Reset();

  00012	8d 86 6c bb 0f
	00		 lea	 eax, DWORD PTR [esi+1031020]
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 24   : 		this->m_bUsed = FALSE;

  00018	c7 86 04 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031940], 0

; 25   : 		this->m_iStateNumber = -1;	

  00022	c7 86 dc be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031900], -1

; 26   : 		this->m_iYear = -1;	

  0002c	c7 86 e0 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031904], -1

; 27   : 		this->m_iMonth = -1;	

  00036	c7 86 e4 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031908], -1

; 28   : 		this->m_iDay = -1;	

  00040	c7 86 e8 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031912], -1

; 29   : 		this->m_iDayOfWeek = -1;	

  0004a	c7 86 ec be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031916], -1

; 30   : 		this->m_iHour = -1;	

  00054	c7 86 f0 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031920], -1

; 31   : 		this->m_iMinute = -1;	

  0005e	c7 86 f4 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031924], -1

; 32   : 		this->m_iSecond = -1;	

  00068	c7 86 f8 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031928], -1

; 33   : 		this->m_iContinuanceTime = 0;	

  00072	c7 86 fc be 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031932], 0

; 34   : 		this->m_dwAppliedTickCount = 0;	

  0007c	c7 86 00 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031936], 0
  00086	c7 86 08 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031944], -1
  00090	c7 86 0c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031948], -1
  0009a	c7 86 10 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031952], -1
  000a4	c7 86 14 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031956], -1
  000ae	c7 86 18 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031960], -1
  000b8	c7 86 1c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031964], -1
  000c2	c7 86 20 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031968], -1
  000cc	c7 86 24 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031972], -1
  000d6	c7 86 28 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031976], 0
  000e0	c7 86 2c bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031980], 0
  000ea	c7 86 30 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1031984], 0
  000f4	c7 86 34 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031988], -1
  000fe	c7 86 38 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031992], -1
  00108	c7 86 3c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031996], -1
  00112	c7 86 40 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032000], -1
  0011c	c7 86 44 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032004], -1
  00126	c7 86 48 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032008], -1
  00130	c7 86 4c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032012], -1
  0013a	c7 86 50 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032016], -1
  00144	c7 86 54 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032020], 0
  0014e	c7 86 58 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032024], 0
  00158	c7 86 5c bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032028], 0
  00162	c7 86 60 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032032], -1
  0016c	c7 86 64 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032036], -1
  00176	c7 86 68 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032040], -1
  00180	c7 86 6c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032044], -1
  0018a	c7 86 70 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032048], -1
  00194	c7 86 74 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032052], -1
  0019e	c7 86 78 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032056], -1
  001a8	c7 86 7c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032060], -1
  001b2	c7 86 80 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032064], 0
  001bc	c7 86 84 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032068], 0
  001c6	c7 86 88 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032072], 0
  001d0	c7 86 8c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032076], -1
  001da	c7 86 90 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032080], -1
  001e4	c7 86 94 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032084], -1
  001ee	c7 86 98 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032088], -1
  001f8	c7 86 9c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032092], -1
  00202	c7 86 a0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032096], -1
  0020c	c7 86 a4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032100], -1
  00216	c7 86 a8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032104], -1
  00220	c7 86 ac bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032108], 0
  0022a	c7 86 b0 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032112], 0
  00234	c7 86 b4 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032116], 0
  0023e	c7 86 b8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032120], -1
  00248	c7 86 bc bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032124], -1
  00252	c7 86 c0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032128], -1
  0025c	c7 86 c4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032132], -1
  00266	c7 86 c8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032136], -1
  00270	c7 86 cc bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032140], -1
  0027a	c7 86 d0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032144], -1
  00284	c7 86 d4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032148], -1
  0028e	c7 86 d8 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032152], 0
  00298	c7 86 dc bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032156], 0
  002a2	c7 86 e0 bf 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032160], 0
  002ac	c7 86 e4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032164], -1
  002b6	c7 86 e8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032168], -1
  002c0	c7 86 ec bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032172], -1
  002ca	c7 86 f0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032176], -1
  002d4	c7 86 f4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032180], -1
  002de	c7 86 f8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032184], -1
  002e8	c7 86 fc bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032188], -1
  002f2	c7 86 00 c0 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032192], -1
  002fc	c7 86 04 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032196], 0
  00306	c7 86 08 c0 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1032200], 0
$LL7@DelAllData:

; 24   : 		this->m_bUsed = FALSE;

  00310	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 328  : 	for ( int j=0;j<MAX_CRYWOLF_STATE_TIME;j++)

  00317	8d 40 2c	 lea	 eax, DWORD PTR [eax+44]
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 25   : 		this->m_iStateNumber = -1;	

  0031a	c7 40 d0 ff ff
	ff ff		 mov	 DWORD PTR [eax-48], -1

; 26   : 		this->m_iYear = -1;	

  00321	c7 40 d4 ff ff
	ff ff		 mov	 DWORD PTR [eax-44], -1

; 27   : 		this->m_iMonth = -1;	

  00328	c7 40 d8 ff ff
	ff ff		 mov	 DWORD PTR [eax-40], -1

; 28   : 		this->m_iDay = -1;	

  0032f	c7 40 dc ff ff
	ff ff		 mov	 DWORD PTR [eax-36], -1

; 29   : 		this->m_iDayOfWeek = -1;	

  00336	c7 40 e0 ff ff
	ff ff		 mov	 DWORD PTR [eax-32], -1

; 30   : 		this->m_iHour = -1;	

  0033d	c7 40 e4 ff ff
	ff ff		 mov	 DWORD PTR [eax-28], -1

; 31   : 		this->m_iMinute = -1;	

  00344	c7 40 e8 ff ff
	ff ff		 mov	 DWORD PTR [eax-24], -1

; 32   : 		this->m_iSecond = -1;	

  0034b	c7 40 ec ff ff
	ff ff		 mov	 DWORD PTR [eax-20], -1

; 33   : 		this->m_iContinuanceTime = 0;	

  00352	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 34   : 		this->m_dwAppliedTickCount = 0;	

  00359	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 328  : 	for ( int j=0;j<MAX_CRYWOLF_STATE_TIME;j++)

  00360	83 e9 01	 sub	 ecx, 1
  00363	75 ab		 jne	 SHORT $LL7@DelAllData

; 329  : 	{
; 330  : 		this->m_StartTimeInfo[j].Reset();
; 331  : 	}
; 332  : 
; 333  : 	this->m_StartTimeInfoCount = 0;
; 334  : 
; 335  : 	for ( int k=0;k<MAX_CRYWOLF_MONSTER_GROUP;k++)
; 336  : 	{
; 337  : 		this->m_iMonsterGroupNumberArray[k] = -1;

  00365	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@ffffffffffffffffffffffffffffffff
  0036c	8d 86 80 c0 0f
	00		 lea	 eax, DWORD PTR [esi+1032320]
  00372	89 8e d4 be 0f
	00		 mov	 DWORD PTR [esi+1031892], ecx
  00378	0f 11 86 1c c0
	0f 00		 movups	 XMMWORD PTR [esi+1032220], xmm0
  0037f	6a 44		 push	 68			; 00000044H
  00381	0f 11 86 2c c0
	0f 00		 movups	 XMMWORD PTR [esi+1032236], xmm0
  00388	51		 push	 ecx
  00389	0f 11 86 3c c0
	0f 00		 movups	 XMMWORD PTR [esi+1032252], xmm0
  00390	50		 push	 eax
  00391	0f 11 86 4c c0
	0f 00		 movups	 XMMWORD PTR [esi+1032268], xmm0
  00398	0f 11 86 5c c0
	0f 00		 movups	 XMMWORD PTR [esi+1032284], xmm0

; 338  : 	}
; 339  : 
; 340  : 	this->m_iMonsterGroupNumberCount = 0;

  0039f	89 8e 6c c0 0f
	00		 mov	 DWORD PTR [esi+1032300], ecx

; 341  : 	this->m_iBossGroupNumber = 0;

  003a5	89 8e 78 c0 0f
	00		 mov	 DWORD PTR [esi+1032312], ecx

; 342  : 	this->m_iBossTurnUpTime = 0;

  003ab	89 8e 7c c0 0f
	00		 mov	 DWORD PTR [esi+1032316], ecx

; 343  : 	this->m_iMonsterGroupChangeAITime  = 0;

  003b1	89 8e 70 c0 0f
	00		 mov	 DWORD PTR [esi+1032304], ecx

; 344  : 	this->m_bDBDataLoadOK = FALSE;

  003b7	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 345  : 	this->m_bDBDataLoading = FALSE;

  003ba	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  003bd	e8 00 00 00 00	 call	 _memset
  003c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : 
; 347  : 	memset(this->m_iMVPScoreTable, 0, sizeof( m_iMVPScoreTable ));
; 348  : 	memset(this->m_iMVPRankScoreTable, 0, sizeof( m_iMVPRankScoreTable ));
; 349  : 	memset(this->m_iMVPRankExpTable, 0, sizeof( m_iMVPRankExpTable ));
; 350  : 
; 351  : 	this->SetState(CRYWOLF_STATE_NONE);

  003c5	8b ce		 mov	 ecx, esi
  003c7	6a 00		 push	 0
  003c9	e8 00 00 00 00	 call	 ?SetState@CCrywolf@@QAEXH@Z ; CCrywolf::SetState
  003ce	5e		 pop	 esi

; 352  : }

  003cf	c3		 ret	 0
?DelAllData@CCrywolf@@QAEXXZ ENDP			; CCrywolf::DelAllData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?Run@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?Run@CCrywolf@@QAEXXZ PROC				; CCrywolf::Run, COMDAT
; _this$ = ecx

; 545  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 546  : 	if ( !g_CrywolfSync.CheckEnableCrywolf())

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00008	e8 00 00 00 00	 call	 ?CheckEnableCrywolf@CCrywolfSync@@QAEHXZ ; CCrywolfSync::CheckEnableCrywolf
  0000d	85 c0		 test	 eax, eax
  0000f	74 42		 je	 SHORT $LN11@Run

; 547  : 		return;
; 548  : 
; 549  : 	if ( this->m_StartTimeInfo[0].m_bUsed == FALSE )

  00011	83 be 64 bb 0f
	00 00		 cmp	 DWORD PTR [esi+1031012], 0
  00018	74 39		 je	 SHORT $LN11@Run

; 550  : 		return;
; 551  : 
; 552  : 	this->CheckStateTimeSync();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?CheckStateTimeSync@CCrywolf@@QAEHXZ ; CCrywolf::CheckStateTimeSync

; 553  : 
; 554  : 	switch ( this->m_iCrywolfState )

  00021	8b 86 8c a8 0f
	00		 mov	 eax, DWORD PTR [esi+1026188]
  00027	83 f8 06	 cmp	 eax, 6
  0002a	77 27		 ja	 SHORT $LN11@Run
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@Run[eax*4]
$LN7@Run:

; 555  : 	{
; 556  : 		case CRYWOLF_STATE_NONE:
; 557  : 			this->ProcState_NONE();
; 558  : 			break;
; 559  : 		case CRYWOLF_STATE_NOTIFY_1:
; 560  : 			this->ProcState_NOTIFY_1();

  00033	8b ce		 mov	 ecx, esi
  00035	5e		 pop	 esi
  00036	e9 00 00 00 00	 jmp	 ?ProcState_NOTIFY_1@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NOTIFY_1
$LN8@Run:

; 561  : 			break;
; 562  : 		case CRYWOLF_STATE_NOTIFY_2:
; 563  : 			this->ProcState_NOTIFY_2();

  0003b	8b ce		 mov	 ecx, esi
  0003d	5e		 pop	 esi
  0003e	e9 00 00 00 00	 jmp	 ?ProcState_NOTIFY_2@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_NOTIFY_2
$LN9@Run:

; 564  : 			break;
; 565  : 		case CRYWOLF_STATE_READY:
; 566  : 			this->ProcState_READY();

  00043	8b ce		 mov	 ecx, esi
  00045	5e		 pop	 esi
  00046	e9 00 00 00 00	 jmp	 ?ProcState_READY@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_READY
$LN10@Run:

; 567  : 			break;
; 568  : 		case CRYWOLF_STATE_START:
; 569  : 			this->ProcState_START();

  0004b	8b ce		 mov	 ecx, esi
  0004d	5e		 pop	 esi
  0004e	e9 00 00 00 00	 jmp	 ?ProcState_START@CCrywolf@@QAEXXZ ; CCrywolf::ProcState_START
$LN11@Run:
  00053	5e		 pop	 esi

; 570  : 			break;
; 571  : 		case CRYWOLF_STATE_END:
; 572  : 			this->ProcState_END();
; 573  : 			break;
; 574  : 		case CRYWOLF_STATE_ENDCYCLE:
; 575  : 			this->ProcState_ENDCYCLE();
; 576  : 			break;
; 577  : 	}
; 578  : }

  00054	c3		 ret	 0
  00055	0f 1f 00	 npad	 3
$LN17@Run:
  00058	00 00 00 00	 DD	 $LN11@Run
  0005c	00 00 00 00	 DD	 $LN7@Run
  00060	00 00 00 00	 DD	 $LN8@Run
  00064	00 00 00 00	 DD	 $LN9@Run
  00068	00 00 00 00	 DD	 $LN10@Run
  0006c	00 00 00 00	 DD	 $LN11@Run
  00070	00 00 00 00	 DD	 $LN11@Run
?Run@CCrywolf@@QAEXXZ ENDP				; CCrywolf::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?Init@CCrywolf@@QAEXXZ
_TEXT	SEGMENT
?Init@CCrywolf@@QAEXXZ PROC				; CCrywolf::Init, COMDAT
; _this$ = ecx

; 357  : 	return;
; 358  : }

  00000	c3		 ret	 0
?Init@CCrywolf@@QAEXXZ ENDP				; CCrywolf::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?LoadData@CCrywolf@@QAEHPAD@Z
_TEXT	SEGMENT
_iContinuanceTime$1$ = -48				; size = 4
_iMinute$1$ = -44					; size = 4
_iHour$1$ = -40						; size = 4
_iDayOfWeek$1$ = -36					; size = 4
_iDay$1$ = -32						; size = 4
_iStateNumber$1$ = -28					; size = 4
_iMonth$1$ = -28					; size = 4
_this$ = -24						; size = 4
_iType$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@CCrywolf@@QAEHPAD@Z PROC			; CCrywolf::LoadData, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@CCrywolf@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 56   : 	this->m_bFileDataLoad = FALSE;
; 57   : 
; 58   : 	if ( !lpszFileName || !strcmp(lpszFileName, "") )

  00030	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003a	85 db		 test	 ebx, ebx
  0003c	0f 84 d1 06 00
	00		 je	 $LN7@LoadData
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00047	8b c3		 mov	 eax, ebx
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL46@LoadData:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN47@LoadData
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN48@LoadData
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN47@LoadData
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL46@LoadData
$LN48@LoadData:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN49@LoadData
$LN47@LoadData:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN49@LoadData:
  00075	85 c0		 test	 eax, eax
  00077	0f 84 96 06 00
	00		 je	 $LN7@LoadData

; 62   : 	}
; 63   : 
; 64   : 	try
; 65   : 	{
; 66   : 		SMDToken Token;
; 67   : 		SMDFile = fopen(lpszFileName, "r");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00082	53		 push	 ebx
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008a	e8 00 00 00 00	 call	 _fopen
  0008f	83 c4 08	 add	 esp, 8
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 68   : 
; 69   : 		if ( SMDFile == NULL )

  00097	85 c0		 test	 eax, eax
  00099	75 13		 jne	 SHORT $LN9@LoadData

; 70   : 		{
; 71   : 			MsgBox("[Crywolf Main Job] - Can't Open %s ", lpszFileName);

  0009b	53		 push	 ebx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MMCEAGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Can?8t?5Open?5@
  000a1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a6	83 c4 08	 add	 esp, 8

; 72   : 			return FALSE;

  000a9	e9 72 06 00 00	 jmp	 $LN84@LoadData
$LN9@LoadData:

; 73   : 		}
; 74   : 
; 75   : 		this->DelAllData();

  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 ?DelAllData@CCrywolf@@QAEXXZ ; CCrywolf::DelAllData
$LL2@LoadData:

; 76   : 		int iType = -1;
; 77   : 
; 78   : 		while ( true )
; 79   : 		{
; 80   : 			Token = GetToken();

  000b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 81   : 
; 82   : 			if ( Token == END )

  000ba	83 f8 02	 cmp	 eax, 2
  000bd	75 3a		 jne	 SHORT $LN10@LoadData

; 305  : 		}	// while ( true )
; 306  : 
; 307  : 		fclose(SMDFile);

  000bf	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000c5	e8 00 00 00 00	 call	 _fclose

; 308  : 		LogAddC(2, "[Crywolf Main Job] - %s file is Loaded", lpszFileName);

  000ca	53		 push	 ebx
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@NHMCKDPG@?$FLCrywolf?5Main?5Job?$FN?5?9?5?$CFs?5file?5is?5@
  000d0	6a 02		 push	 2
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 309  : 		this->m_bFileDataLoad = TRUE;

  000d8	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1
  000df	83 c4 10	 add	 esp, 16			; 00000010H

; 315  : 
; 316  : 	return this->m_bFileDataLoad;

  000e2	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 317  : }

  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	5b		 pop	 ebx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
$LN10@LoadData:

; 83   : 				break;
; 84   : 
; 85   : 			iType = (int)TokenNumber;

  000f9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00101	89 45 ec	 mov	 DWORD PTR _iType$1$[ebp], eax
$LL4@LoadData:

; 86   : 
; 87   : 			while ( true )
; 88   : 			{
; 89   : 				if ( iType == 0 )

  00104	85 c0		 test	 eax, eax
  00106	0f 85 6e 01 00
	00		 jne	 $LN11@LoadData

; 90   : 				{
; 91   : 					int iScheduleMode = 0;
; 92   : 					int iStateNumber = -1;
; 93   : 					int iMonth = -1;
; 94   : 					int iDay = -1;
; 95   : 					int iDayOfWeek = -1;
; 96   : 					int iHour = -1;
; 97   : 					int iMinute = -1;
; 98   : 					int iContinuanceTime = 0;
; 99   : 
; 100  : 					Token = GetToken();

  0010c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 
; 102  : 					if ( !strcmp("end", TokenString))

  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00116	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0011b	0f 1f 44 00 00	 npad	 5
$LL50@LoadData:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN51@LoadData
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN52@LoadData
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN51@LoadData
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL50@LoadData
$LN52@LoadData:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN53@LoadData
$LN51@LoadData:
  00140	1b c0		 sbb	 eax, eax
  00142	83 c8 01	 or	 eax, 1
$LN53@LoadData:
  00145	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00148	85 c0		 test	 eax, eax
  0014a	0f 84 65 ff ff
	ff		 je	 $LL2@LoadData

; 103  : 						break;
; 104  : 
; 105  : 					iScheduleMode = (int)TokenNumber;

  00150	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 106  : 
; 107  : 					Token = GetToken();

  00158	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 					iStateNumber = (int)TokenNumber;

  0015d	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 109  : 
; 110  : 					Token = GetToken();

  00165	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 					iMonth = (int)TokenNumber;

  0016a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00172	89 45 e4	 mov	 DWORD PTR _iMonth$1$[ebp], eax

; 112  : 
; 113  : 					Token = GetToken();

  00175	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					iDay = (int)TokenNumber;

  0017a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00182	89 45 e0	 mov	 DWORD PTR _iDay$1$[ebp], eax

; 115  : 
; 116  : 					Token = GetToken();

  00185	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 					iDayOfWeek = (int)TokenNumber;

  0018a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00192	89 45 dc	 mov	 DWORD PTR _iDayOfWeek$1$[ebp], eax

; 118  : 
; 119  : 					Token = GetToken();

  00195	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 					iHour = (int)TokenNumber;

  0019a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001a2	89 45 d8	 mov	 DWORD PTR _iHour$1$[ebp], eax

; 121  : 
; 122  : 					Token = GetToken();

  001a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 					iMinute = (int)TokenNumber;

  001aa	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001b2	89 45 d4	 mov	 DWORD PTR _iMinute$1$[ebp], eax

; 124  : 
; 125  : 					Token = GetToken();

  001b5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 					iContinuanceTime = (int)TokenNumber;

  001ba	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001c2	89 45 d0	 mov	 DWORD PTR _iContinuanceTime$1$[ebp], eax

; 127  : 
; 128  : 					if ( this->m_StartTimeInfoCount <= -1 || this->m_StartTimeInfoCount >= MAX_CRYWOLF_STATE_TIME )

  001c5	8b 86 d4 be 0f
	00		 mov	 eax, DWORD PTR [esi+1031892]
  001cb	83 f8 ff	 cmp	 eax, -1
  001ce	7e 05		 jle	 SHORT $LN14@LoadData
  001d0	83 f8 14	 cmp	 eax, 20			; 00000014H
  001d3	7c 0e		 jl	 SHORT $LN13@LoadData
$LN14@LoadData:

; 129  : 					{
; 130  : 						MsgBox("[Crywolf Main Job] - Excced MAX StartTime (%d)", this->m_StartTimeInfoCount);

  001d5	50		 push	 eax
  001d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BJEKHNIH@?$FLCrywolf?5Main?5Job?$FN?5?9?5Excced?5MAX?5@
  001db	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001e0	83 c4 08	 add	 esp, 8
$LN13@LoadData:

; 131  : 					}
; 132  : 
; 133  : 					this->m_iScheduleMode = iScheduleMode;
; 134  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iStateNumber = iStateNumber;

  001e3	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44

; 135  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iMonth = iMonth;

  001ea	8b 4d e4	 mov	 ecx, DWORD PTR _iMonth$1$[ebp]
  001ed	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  001f0	89 9c 30 68 bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031016], ebx
  001f7	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  001fe	89 8c 30 70 bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031024], ecx

; 136  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iDay = iDay;

  00205	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  0020c	8b 4d e0	 mov	 ecx, DWORD PTR _iDay$1$[ebp]
  0020f	89 8c 30 74 bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031028], ecx

; 137  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iDayOfWeek = iDayOfWeek;

  00216	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  0021d	8b 4d dc	 mov	 ecx, DWORD PTR _iDayOfWeek$1$[ebp]
  00220	89 8c 30 78 bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031032], ecx

; 138  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iHour = iHour;

  00227	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  0022e	8b 4d d8	 mov	 ecx, DWORD PTR _iHour$1$[ebp]
  00231	89 8c 30 7c bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031036], ecx

; 139  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iMinute = iMinute;

  00238	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  0023f	8b 4d d4	 mov	 ecx, DWORD PTR _iMinute$1$[ebp]
  00242	89 8c 30 80 bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031040], ecx

; 140  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_iContinuanceTime = iContinuanceTime;

  00249	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  00250	8b 4d d0	 mov	 ecx, DWORD PTR _iContinuanceTime$1$[ebp]
  00253	89 8c 30 88 bb
	0f 00		 mov	 DWORD PTR [eax+esi+1031048], ecx

; 141  : 					this->m_StartTimeInfo[this->m_StartTimeInfoCount].m_bUsed = TRUE;

  0025a	6b 86 d4 be 0f
	00 2c		 imul	 eax, DWORD PTR [esi+1031892], 44
  00261	c7 84 30 64 bb
	0f 00 01 00 00
	00		 mov	 DWORD PTR [eax+esi+1031012], 1

; 142  : 					this->m_StartTimeInfoCount++;

  0026c	ff 86 d4 be 0f
	00		 inc	 DWORD PTR [esi+1031892]

; 143  : 				}
; 144  : 
; 145  : 				if ( iType == 1 )

  00272	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00275	e9 8a fe ff ff	 jmp	 $LL4@LoadData
$LN11@LoadData:
  0027a	83 f8 01	 cmp	 eax, 1
  0027d	0f 85 d4 00 00
	00		 jne	 $LN15@LoadData

; 146  : 				{
; 147  : 					int iStateNumber = -1;
; 148  : 					int iHour = 0;
; 149  : 					int iMinute = 0;
; 150  : 					int iSecond = 0;
; 151  : 
; 152  : 					Token = GetToken();

  00283	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 153  : 
; 154  : 					if ( !strcmp("end", TokenString))

  00288	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0028d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL54@LoadData:
  00292	8a 10		 mov	 dl, BYTE PTR [eax]
  00294	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00296	75 1a		 jne	 SHORT $LN55@LoadData
  00298	84 d2		 test	 dl, dl
  0029a	74 12		 je	 SHORT $LN56@LoadData
  0029c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0029f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002a2	75 0e		 jne	 SHORT $LN55@LoadData
  002a4	83 c0 02	 add	 eax, 2
  002a7	83 c1 02	 add	 ecx, 2
  002aa	84 d2		 test	 dl, dl
  002ac	75 e4		 jne	 SHORT $LL54@LoadData
$LN56@LoadData:
  002ae	33 c0		 xor	 eax, eax
  002b0	eb 05		 jmp	 SHORT $LN57@LoadData
$LN55@LoadData:
  002b2	1b c0		 sbb	 eax, eax
  002b4	83 c8 01	 or	 eax, 1
$LN57@LoadData:
  002b7	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  002ba	85 c0		 test	 eax, eax
  002bc	0f 84 f3 fd ff
	ff		 je	 $LL2@LoadData

; 155  : 						break;
; 156  : 
; 157  : 					iStateNumber = (int)TokenNumber;

  002c2	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
  002ca	89 5d e4	 mov	 DWORD PTR _iStateNumber$1$[ebp], ebx

; 158  : 					
; 159  : 					Token = GetToken();

  002cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 160  : 					iHour = (int)TokenNumber;

  002d2	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 161  : 
; 162  : 					Token = GetToken();

  002da	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 163  : 					iMinute = (int)TokenNumber;

  002df	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 164  : 
; 165  : 					Token = GetToken();

  002e7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 166  : 					iSecond = (int)TokenNumber;
; 167  : 
; 168  : 					this->m_StateTimeInfo[iStateNumber].m_iStateNumber = iStateNumber;

  002ec	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ef	8b 45 e4	 mov	 eax, DWORD PTR _iStateNumber$1$[ebp]
  002f2	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?TokenNumber@@3MA
  002fa	6b db 2c	 imul	 ebx, ebx, 44
  002fd	89 84 0b dc be
	0f 00		 mov	 DWORD PTR [ebx+ecx+1031900], eax

; 169  : 					this->m_StateTimeInfo[iStateNumber].m_iHour = iHour;
; 170  : 					this->m_StateTimeInfo[iStateNumber].m_iMinute = iMinute;
; 171  : 					this->m_StateTimeInfo[iStateNumber].m_iSecond = iSecond;
; 172  : 					this->m_StateTimeInfo[iStateNumber].m_iContinuanceTime = iHour * 60 * 60 * 1000 + iMinute * 60 * 1000 + iSecond * 1000;

  00304	8b c7		 mov	 eax, edi
  00306	c1 e0 04	 shl	 eax, 4
  00309	2b c7		 sub	 eax, edi
  0030b	89 b4 0b f4 be
	0f 00		 mov	 DWORD PTR [ebx+ecx+1031924], esi
  00312	89 bc 0b f0 be
	0f 00		 mov	 DWORD PTR [ebx+ecx+1031920], edi
  00319	89 94 0b f8 be
	0f 00		 mov	 DWORD PTR [ebx+ecx+1031928], edx
  00320	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  00323	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]
  00326	8b c1		 mov	 eax, ecx
  00328	c1 e0 04	 shl	 eax, 4
  0032b	2b c1		 sub	 eax, ecx

; 173  : 					this->m_StateTimeInfo[iStateNumber].m_bUsed = TRUE;

  0032d	c7 84 33 d8 be
	0f 00 01 00 00
	00		 mov	 DWORD PTR [ebx+esi+1031896], 1
  00338	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0033b	69 c8 e8 03 00
	00		 imul	 ecx, eax, 1000
  00341	8b 45 e4	 mov	 eax, DWORD PTR _iStateNumber$1$[ebp]
  00344	05 9d 5b 00 00	 add	 eax, 23453		; 00005b9dH
  00349	6b c0 2c	 imul	 eax, eax, 44
  0034c	89 0c 30	 mov	 DWORD PTR [eax+esi], ecx

; 174  : 				}
; 175  : 
; 176  : 				if ( iType == 2 )

  0034f	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00352	e9 ad fd ff ff	 jmp	 $LL4@LoadData
$LN15@LoadData:
  00357	83 f8 02	 cmp	 eax, 2
  0035a	75 7f		 jne	 SHORT $LN17@LoadData

; 177  : 				{
; 178  : 					int iGroupNumber = -1;
; 179  : 
; 180  : 					Token = GetToken();

  0035c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 181  : 
; 182  : 					if ( !strcmp("end", TokenString))

  00361	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00366	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0036b	0f 1f 44 00 00	 npad	 5
$LL58@LoadData:
  00370	8a 10		 mov	 dl, BYTE PTR [eax]
  00372	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00374	75 1a		 jne	 SHORT $LN59@LoadData
  00376	84 d2		 test	 dl, dl
  00378	74 12		 je	 SHORT $LN60@LoadData
  0037a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0037d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00380	75 0e		 jne	 SHORT $LN59@LoadData
  00382	83 c0 02	 add	 eax, 2
  00385	83 c1 02	 add	 ecx, 2
  00388	84 d2		 test	 dl, dl
  0038a	75 e4		 jne	 SHORT $LL58@LoadData
$LN60@LoadData:
  0038c	33 c0		 xor	 eax, eax
  0038e	eb 05		 jmp	 SHORT $LN61@LoadData
$LN59@LoadData:
  00390	1b c0		 sbb	 eax, eax
  00392	83 c8 01	 or	 eax, 1
$LN61@LoadData:
  00395	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00398	85 c0		 test	 eax, eax
  0039a	0f 84 15 fd ff
	ff		 je	 $LL2@LoadData

; 183  : 						break;
; 184  : 
; 185  : 					iGroupNumber = (int)TokenNumber;

  003a0	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 186  : 
; 187  : 					if ( iGroupNumber <= -1 || iGroupNumber >= MAX_CRYWOLF_MONSTER_GROUP )

  003a8	83 ff ff	 cmp	 edi, -1
  003ab	7e 05		 jle	 SHORT $LN20@LoadData
  003ad	83 ff 14	 cmp	 edi, 20			; 00000014H
  003b0	7c 0e		 jl	 SHORT $LN19@LoadData
$LN20@LoadData:

; 188  : 					{
; 189  : 						MsgBox("[Crywolf Main Job] - Invalid Monster Group Number (%d)", iGroupNumber);

  003b2	57		 push	 edi
  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ILOPDGDB@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
  003b8	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  003bd	83 c4 08	 add	 esp, 8
$LN19@LoadData:

; 190  : 					}
; 191  : 
; 192  : 					this->m_iMonsterGroupNumberArray[this->m_iMonsterGroupNumberCount] = iGroupNumber;

  003c0	8b 86 6c c0 0f
	00		 mov	 eax, DWORD PTR [esi+1032300]
  003c6	89 bc 86 1c c0
	0f 00		 mov	 DWORD PTR [esi+eax*4+1032220], edi

; 193  : 					this->m_iMonsterGroupNumberCount++;

  003cd	ff 86 6c c0 0f
	00		 inc	 DWORD PTR [esi+1032300]

; 194  : 				}
; 195  : 
; 196  : 				if ( iType == 3 )

  003d3	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  003d6	e9 29 fd ff ff	 jmp	 $LL4@LoadData
$LN17@LoadData:
  003db	83 f8 03	 cmp	 eax, 3
  003de	0f 85 80 00 00
	00		 jne	 $LN21@LoadData

; 197  : 				{
; 198  : 					int iGroupNumber = -1;
; 199  : 					int iTurnUpTime = 0;
; 200  : 
; 201  : 					Token = GetToken();

  003e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 202  : 
; 203  : 					if ( !strcmp("end", TokenString))

  003e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  003ee	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL62@LoadData:
  003f3	8a 10		 mov	 dl, BYTE PTR [eax]
  003f5	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003f7	75 1a		 jne	 SHORT $LN63@LoadData
  003f9	84 d2		 test	 dl, dl
  003fb	74 12		 je	 SHORT $LN64@LoadData
  003fd	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00400	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00403	75 0e		 jne	 SHORT $LN63@LoadData
  00405	83 c0 02	 add	 eax, 2
  00408	83 c1 02	 add	 ecx, 2
  0040b	84 d2		 test	 dl, dl
  0040d	75 e4		 jne	 SHORT $LL62@LoadData
$LN64@LoadData:
  0040f	33 c0		 xor	 eax, eax
  00411	eb 05		 jmp	 SHORT $LN65@LoadData
$LN63@LoadData:
  00413	1b c0		 sbb	 eax, eax
  00415	83 c8 01	 or	 eax, 1
$LN65@LoadData:
  00418	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  0041b	85 c0		 test	 eax, eax
  0041d	0f 84 92 fc ff
	ff		 je	 $LL2@LoadData

; 204  : 						break;
; 205  : 
; 206  : 					iGroupNumber = (int)TokenNumber;

  00423	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 207  : 					
; 208  : 					Token = GetToken();

  0042b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 209  : 					iTurnUpTime = (int)TokenNumber;

  00430	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 210  : 
; 211  : 					if ( iGroupNumber <= -1 || iGroupNumber >= MAX_CRYWOLF_MONSTER_GROUP )

  00438	83 ff ff	 cmp	 edi, -1
  0043b	7e 05		 jle	 SHORT $LN24@LoadData
  0043d	83 ff 14	 cmp	 edi, 20			; 00000014H
  00440	7c 0e		 jl	 SHORT $LN23@LoadData
$LN24@LoadData:

; 212  : 					{
; 213  : 						MsgBox("[Crywolf Main Job] - Invalid Monster Boss Group Number (%d)", iGroupNumber);

  00442	57		 push	 edi
  00443	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@BMOJLOFF@?$FLCrywolf?5Main?5Job?$FN?5?9?5Invalid?5Mon@
  00448	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0044d	83 c4 08	 add	 esp, 8
$LN23@LoadData:

; 214  : 					}
; 215  : 
; 216  : 					this->m_iBossGroupNumber = iGroupNumber;
; 217  : 					this->m_iBossTurnUpTime = iTurnUpTime;
; 218  : 				}
; 219  : 
; 220  : 				if ( iType == 4 )

  00450	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00453	89 be 78 c0 0f
	00		 mov	 DWORD PTR [esi+1032312], edi
  00459	89 9e 7c c0 0f
	00		 mov	 DWORD PTR [esi+1032316], ebx
  0045f	e9 a0 fc ff ff	 jmp	 $LL4@LoadData
$LN21@LoadData:
  00464	83 f8 04	 cmp	 eax, 4
  00467	75 55		 jne	 SHORT $LN25@LoadData

; 221  : 				{
; 222  : 					int iChangeAITime = 0;
; 223  : 
; 224  : 					Token = GetToken();

  00469	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 225  : 
; 226  : 					if ( !strcmp("end", TokenString))

  0046e	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00473	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL66@LoadData:
  00478	8a 10		 mov	 dl, BYTE PTR [eax]
  0047a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0047c	75 1a		 jne	 SHORT $LN67@LoadData
  0047e	84 d2		 test	 dl, dl
  00480	74 12		 je	 SHORT $LN68@LoadData
  00482	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00485	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00488	75 0e		 jne	 SHORT $LN67@LoadData
  0048a	83 c0 02	 add	 eax, 2
  0048d	83 c1 02	 add	 ecx, 2
  00490	84 d2		 test	 dl, dl
  00492	75 e4		 jne	 SHORT $LL66@LoadData
$LN68@LoadData:
  00494	33 c0		 xor	 eax, eax
  00496	eb 05		 jmp	 SHORT $LN69@LoadData
$LN67@LoadData:
  00498	1b c0		 sbb	 eax, eax
  0049a	83 c8 01	 or	 eax, 1
$LN69@LoadData:
  0049d	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  004a0	85 c0		 test	 eax, eax
  004a2	0f 84 0d fc ff
	ff		 je	 $LL2@LoadData

; 227  : 						break;
; 228  : 
; 229  : 					iChangeAITime = (int)TokenNumber;

  004a8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 230  : 					this->m_iMonsterGroupChangeAITime = iChangeAITime;

  004b0	89 86 70 c0 0f
	00		 mov	 DWORD PTR [esi+1032304], eax

; 231  : 				}
; 232  : 
; 233  : 				if ( iType == 5 )

  004b6	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  004b9	e9 46 fc ff ff	 jmp	 $LL4@LoadData
$LN25@LoadData:
  004be	83 f8 05	 cmp	 eax, 5
  004c1	0f 85 c7 00 00
	00		 jne	 $LN27@LoadData

; 234  : 				{
; 235  : 					Token = GetToken();

  004c7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 236  : 
; 237  : 					if ( !strcmp("end", TokenString))

  004cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  004d1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL70@LoadData:
  004d6	8a 10		 mov	 dl, BYTE PTR [eax]
  004d8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  004da	75 1a		 jne	 SHORT $LN71@LoadData
  004dc	84 d2		 test	 dl, dl
  004de	74 12		 je	 SHORT $LN72@LoadData
  004e0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  004e3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  004e6	75 0e		 jne	 SHORT $LN71@LoadData
  004e8	83 c0 02	 add	 eax, 2
  004eb	83 c1 02	 add	 ecx, 2
  004ee	84 d2		 test	 dl, dl
  004f0	75 e4		 jne	 SHORT $LL70@LoadData
$LN72@LoadData:
  004f2	33 c0		 xor	 eax, eax
  004f4	eb 05		 jmp	 SHORT $LN73@LoadData
$LN71@LoadData:
  004f6	1b c0		 sbb	 eax, eax
  004f8	83 c8 01	 or	 eax, 1
$LN73@LoadData:
  004fb	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  004fe	85 c0		 test	 eax, eax
  00500	0f 84 af fb ff
	ff		 je	 $LL2@LoadData

; 238  : 						break;
; 239  : 
; 240  : 					this->m_iMVPScoreTable[0] = (int)TokenNumber;

  00506	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0050e	89 86 80 c0 0f
	00		 mov	 DWORD PTR [esi+1032320], eax

; 241  : 
; 242  : 					Token = GetToken();

  00514	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 243  : 					this->m_iMVPScoreTable[1] = (int)TokenNumber;

  00519	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00521	89 86 84 c0 0f
	00		 mov	 DWORD PTR [esi+1032324], eax

; 244  : 
; 245  : 					Token = GetToken();

  00527	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 246  : 					this->m_iMVPScoreTable[2] = (int)TokenNumber;

  0052c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00534	89 86 88 c0 0f
	00		 mov	 DWORD PTR [esi+1032328], eax

; 247  : 
; 248  : 					Token = GetToken();

  0053a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 249  : 					this->m_iMVPScoreTable[3] = (int)TokenNumber;

  0053f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00547	89 86 8c c0 0f
	00		 mov	 DWORD PTR [esi+1032332], eax

; 250  : 
; 251  : 					Token = GetToken();

  0054d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 252  : 					this->m_iMVPScoreTable[4] = (int)TokenNumber;

  00552	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0055a	89 86 90 c0 0f
	00		 mov	 DWORD PTR [esi+1032336], eax

; 253  : 
; 254  : 					Token = GetToken();

  00560	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 255  : 					this->m_iMVPScoreTable[5] = (int)TokenNumber;

  00565	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0056d	89 86 94 c0 0f
	00		 mov	 DWORD PTR [esi+1032340], eax

; 256  : 
; 257  : 					Token = GetToken();

  00573	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 258  : 					this->m_iMVPScoreTable[6] = (int)TokenNumber;

  00578	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00580	89 86 98 c0 0f
	00		 mov	 DWORD PTR [esi+1032344], eax

; 259  : 				}
; 260  : 
; 261  : 				if ( iType == 6 )

  00586	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00589	e9 76 fb ff ff	 jmp	 $LL4@LoadData
$LN27@LoadData:
  0058e	83 f8 06	 cmp	 eax, 6
  00591	0f 85 a1 00 00
	00		 jne	 $LN29@LoadData

; 262  : 				{
; 263  : 					Token = GetToken();

  00597	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 264  : 
; 265  : 					if ( !strcmp("end", TokenString))

  0059c	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  005a1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL74@LoadData:
  005a6	8a 10		 mov	 dl, BYTE PTR [eax]
  005a8	3a 11		 cmp	 dl, BYTE PTR [ecx]
  005aa	75 1a		 jne	 SHORT $LN75@LoadData
  005ac	84 d2		 test	 dl, dl
  005ae	74 12		 je	 SHORT $LN76@LoadData
  005b0	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  005b3	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  005b6	75 0e		 jne	 SHORT $LN75@LoadData
  005b8	83 c0 02	 add	 eax, 2
  005bb	83 c1 02	 add	 ecx, 2
  005be	84 d2		 test	 dl, dl
  005c0	75 e4		 jne	 SHORT $LL74@LoadData
$LN76@LoadData:
  005c2	33 c0		 xor	 eax, eax
  005c4	eb 05		 jmp	 SHORT $LN77@LoadData
$LN75@LoadData:
  005c6	1b c0		 sbb	 eax, eax
  005c8	83 c8 01	 or	 eax, 1
$LN77@LoadData:
  005cb	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  005ce	85 c0		 test	 eax, eax
  005d0	0f 84 df fa ff
	ff		 je	 $LL2@LoadData

; 266  : 						break;
; 267  : 
; 268  : 					this->m_iMVPRankScoreTable[0] = (int)TokenNumber;

  005d6	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  005de	89 86 9c c0 0f
	00		 mov	 DWORD PTR [esi+1032348], eax

; 269  : 
; 270  : 					Token = GetToken();

  005e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 271  : 					this->m_iMVPRankScoreTable[1] = (int)TokenNumber;

  005e9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  005f1	89 86 a0 c0 0f
	00		 mov	 DWORD PTR [esi+1032352], eax

; 272  : 
; 273  : 					Token = GetToken();

  005f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 274  : 					this->m_iMVPRankScoreTable[2] = (int)TokenNumber;

  005fc	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00604	89 86 a4 c0 0f
	00		 mov	 DWORD PTR [esi+1032356], eax

; 275  : 
; 276  : 					Token = GetToken();

  0060a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 277  : 					this->m_iMVPRankScoreTable[3] = (int)TokenNumber;

  0060f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00617	89 86 a8 c0 0f
	00		 mov	 DWORD PTR [esi+1032360], eax

; 278  : 
; 279  : 					Token = GetToken();

  0061d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 280  : 					this->m_iMVPRankScoreTable[4] = (int)TokenNumber;

  00622	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0062a	89 86 ac c0 0f
	00		 mov	 DWORD PTR [esi+1032364], eax

; 281  : 				}
; 282  : 
; 283  : 				if ( iType == 7 )

  00630	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00633	e9 cc fa ff ff	 jmp	 $LL4@LoadData
$LN29@LoadData:
  00638	83 f8 07	 cmp	 eax, 7
  0063b	0f 85 c3 fa ff
	ff		 jne	 $LL4@LoadData

; 284  : 				{
; 285  : 					Token = GetToken();

  00641	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 286  : 
; 287  : 					if ( !strcmp("end", TokenString))

  00646	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0064b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL78@LoadData:
  00650	8a 10		 mov	 dl, BYTE PTR [eax]
  00652	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00654	75 1a		 jne	 SHORT $LN79@LoadData
  00656	84 d2		 test	 dl, dl
  00658	74 12		 je	 SHORT $LN80@LoadData
  0065a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0065d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00660	75 0e		 jne	 SHORT $LN79@LoadData
  00662	83 c0 02	 add	 eax, 2
  00665	83 c1 02	 add	 ecx, 2
  00668	84 d2		 test	 dl, dl
  0066a	75 e4		 jne	 SHORT $LL78@LoadData
$LN80@LoadData:
  0066c	33 c0		 xor	 eax, eax
  0066e	eb 05		 jmp	 SHORT $LN81@LoadData
$LN79@LoadData:
  00670	1b c0		 sbb	 eax, eax
  00672	83 c8 01	 or	 eax, 1
$LN81@LoadData:
  00675	85 c0		 test	 eax, eax
  00677	74 62		 je	 SHORT $LN45@LoadData

; 288  : 						break;
; 289  : 
; 290  : 					this->m_iMVPRankExpTable[0] = (int)TokenNumber;

  00679	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00681	89 86 b0 c0 0f
	00		 mov	 DWORD PTR [esi+1032368], eax

; 291  : 
; 292  : 					Token = GetToken();

  00687	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 293  : 					this->m_iMVPRankExpTable[1] = (int)TokenNumber;

  0068c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00694	89 86 b4 c0 0f
	00		 mov	 DWORD PTR [esi+1032372], eax

; 294  : 
; 295  : 					Token = GetToken();

  0069a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 296  : 					this->m_iMVPRankExpTable[2] = (int)TokenNumber;

  0069f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  006a7	89 86 b8 c0 0f
	00		 mov	 DWORD PTR [esi+1032376], eax

; 297  : 
; 298  : 					Token = GetToken();

  006ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 299  : 					this->m_iMVPRankExpTable[3] = (int)TokenNumber;

  006b2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  006ba	89 86 bc c0 0f
	00		 mov	 DWORD PTR [esi+1032380], eax

; 300  : 
; 301  : 					Token = GetToken();

  006c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 302  : 					this->m_iMVPRankExpTable[4] = (int)TokenNumber;

  006c5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  006cd	89 86 c0 c0 0f
	00		 mov	 DWORD PTR [esi+1032384], eax

; 303  : 				}
; 304  : 			}	// while ( true )

  006d3	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  006d6	e9 29 fa ff ff	 jmp	 $LL4@LoadData
$LN45@LoadData:
  006db	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  006de	e9 d2 f9 ff ff	 jmp	 $LL2@LoadData
__catch$?LoadData@CCrywolf@@QAEHPAD@Z$0:

; 310  : 	}	// __try
; 311  : 	catch ( DWORD )
; 312  : 	{
; 313  : 		MsgBox("[Crywolf Main Job] - Loading Exception Error (%s) File. ", lpszFileName);

  006e3	ff 75 08	 push	 DWORD PTR _lpszFileName$[ebp]
  006e6	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LLALKACL@?$FLCrywolf?5Main?5Job?$FN?5?9?5Loading?5Exc@
  006eb	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  006f0	83 c4 08	 add	 esp, 8

; 314  : 	}

  006f3	b8 00 00 00 00	 mov	 eax, $LN82@LoadData
  006f8	c3		 ret	 0
$LN82@LoadData:
  006f9	8b 75 e8	 mov	 esi, DWORD PTR _this$[ebp]

; 315  : 
; 316  : 	return this->m_bFileDataLoad;

  006fc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 317  : }

  006ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00702	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00709	59		 pop	 ecx
  0070a	5f		 pop	 edi
  0070b	5e		 pop	 esi
  0070c	5b		 pop	 ebx
  0070d	8b e5		 mov	 esp, ebp
  0070f	5d		 pop	 ebp
  00710	c2 04 00	 ret	 4
$LN7@LoadData:

; 59   : 	{
; 60   : 		MsgBox("[Crywolf Main Job] - File load error : File Name Error");

  00713	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@HJJCALB@?$FLCrywolf?5Main?5Job?$FN?5?9?5File?5load?5e@
  00718	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0071d	83 c4 04	 add	 esp, 4
$LN84@LoadData:

; 61   : 		return FALSE;

  00720	33 c0		 xor	 eax, eax

; 317  : }

  00722	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00725	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0072c	59		 pop	 ecx
  0072d	5f		 pop	 edi
  0072e	5e		 pop	 esi
  0072f	5b		 pop	 ebx
  00730	8b e5		 mov	 esp, ebp
  00732	5d		 pop	 ebp
  00733	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@CCrywolf@@QAEHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@CCrywolf@@QAEHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@CCrywolf@@QAEHPAD@Z ENDP			; CCrywolf::LoadData
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ??1CCrywolf@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CCrywolf@@UAE@XZ PROC				; CCrywolf::~CCrywolf, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CCrywolf@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 50   : 	return;
; 51   : }

  00022	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  00027	6a 03		 push	 3
  00029	68 28 38 05 00	 push	 342056			; 00053828H
  0002e	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCrywolf@@6B@
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CCrywolf@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CCrywolf@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CCrywolf@@UAE@XZ ENDP				; CCrywolf::~CCrywolf
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ??0CCrywolf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCrywolf@@QAE@XZ PROC				; CCrywolf::CCrywolf, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	68 00 00 00 00	 push	 OFFSET ??1MapClass@@UAE@XZ ; MapClass::~MapClass
  0000b	8b f1		 mov	 esi, ecx
  0000d	68 00 00 00 00	 push	 OFFSET ??0MapClass@@QAE@XZ ; MapClass::MapClass
  00012	6a 03		 push	 3
  00014	68 28 38 05 00	 push	 342056			; 00053828H
  00019	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
  0001c	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0001f	50		 push	 eax
  00020	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCrywolf@@6B@
  00026	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h

; 29   : 			this->m_iObjIndex[i] = -1;

  0002b	83 c8 ff	 or	 eax, -1
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 32   : {

  0002e	8d be 98 a8 0f
	00		 lea	 edi, DWORD PTR [esi+1026200]
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h

; 29   : 			this->m_iObjIndex[i] = -1;

  00034	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00039	f3 ab		 rep stosd

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  0003b	c7 86 94 a8 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1026196], 0
  00045	8d be 4c ad 0f
	00		 lea	 edi, DWORD PTR [esi+1027404]

; 29   : 			this->m_iObjIndex[i] = -1;

  0004b	0b c0		 or	 eax, eax
  0004d	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00052	f3 ab		 rep stosd

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00054	c7 86 48 ad 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1027400], 0
  0005e	8d be 00 b2 0f
	00		 lea	 edi, DWORD PTR [esi+1028608]

; 29   : 			this->m_iObjIndex[i] = -1;

  00064	83 c8 ff	 or	 eax, -1
  00067	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0006c	f3 ab		 rep stosd
  0006e	0b c0		 or	 eax, eax

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00070	c7 86 fc b1 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1028604], 0
  0007a	8d be b4 b6 0f
	00		 lea	 edi, DWORD PTR [esi+1029812]

; 29   : 			this->m_iObjIndex[i] = -1;

  00080	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00085	f3 ab		 rep stosd

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00087	c7 86 b0 b6 0f
	00 00 00 00 00	 mov	 DWORD PTR [esi+1029808], 0
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 32   : {

  00091	8d 86 64 bb 0f
	00		 lea	 eax, DWORD PTR [esi+1031012]
  00097	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0009c	0f 1f 40 00	 npad	 4
$LL33@CCrywolf:
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 24   : 		this->m_bUsed = FALSE;

  000a0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000a6	8d 40 2c	 lea	 eax, DWORD PTR [eax+44]

; 25   : 		this->m_iStateNumber = -1;	

  000a9	c7 40 d8 ff ff
	ff ff		 mov	 DWORD PTR [eax-40], -1

; 26   : 		this->m_iYear = -1;	

  000b0	c7 40 dc ff ff
	ff ff		 mov	 DWORD PTR [eax-36], -1

; 27   : 		this->m_iMonth = -1;	

  000b7	c7 40 e0 ff ff
	ff ff		 mov	 DWORD PTR [eax-32], -1

; 28   : 		this->m_iDay = -1;	

  000be	c7 40 e4 ff ff
	ff ff		 mov	 DWORD PTR [eax-28], -1

; 29   : 		this->m_iDayOfWeek = -1;	

  000c5	c7 40 e8 ff ff
	ff ff		 mov	 DWORD PTR [eax-24], -1

; 30   : 		this->m_iHour = -1;	

  000cc	c7 40 ec ff ff
	ff ff		 mov	 DWORD PTR [eax-20], -1

; 31   : 		this->m_iMinute = -1;	

  000d3	c7 40 f0 ff ff
	ff ff		 mov	 DWORD PTR [eax-16], -1

; 32   : 		this->m_iSecond = -1;	

  000da	c7 40 f4 ff ff
	ff ff		 mov	 DWORD PTR [eax-12], -1

; 33   : 		this->m_iContinuanceTime = 0;	

  000e1	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0

; 34   : 		this->m_dwAppliedTickCount = 0;	

  000e8	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  000ef	83 e9 01	 sub	 ecx, 1
  000f2	75 ac		 jne	 SHORT $LL33@CCrywolf

; 24   : 		this->m_bUsed = FALSE;

  000f4	89 8e d8 be 0f
	00		 mov	 DWORD PTR [esi+1031896], ecx

; 25   : 		this->m_iStateNumber = -1;	

  000fa	c7 86 dc be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031900], -1

; 26   : 		this->m_iYear = -1;	

  00104	c7 86 e0 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031904], -1

; 27   : 		this->m_iMonth = -1;	

  0010e	c7 86 e4 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031908], -1

; 28   : 		this->m_iDay = -1;	

  00118	c7 86 e8 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031912], -1

; 29   : 		this->m_iDayOfWeek = -1;	

  00122	c7 86 ec be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031916], -1

; 30   : 		this->m_iHour = -1;	

  0012c	c7 86 f0 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031920], -1

; 31   : 		this->m_iMinute = -1;	

  00136	c7 86 f4 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031924], -1

; 32   : 		this->m_iSecond = -1;	

  00140	c7 86 f8 be 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031928], -1

; 33   : 		this->m_iContinuanceTime = 0;	

  0014a	89 8e fc be 0f
	00		 mov	 DWORD PTR [esi+1031932], ecx

; 34   : 		this->m_dwAppliedTickCount = 0;	

  00150	89 8e 00 bf 0f
	00		 mov	 DWORD PTR [esi+1031936], ecx
  00156	89 8e 04 bf 0f
	00		 mov	 DWORD PTR [esi+1031940], ecx
  0015c	c7 86 08 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031944], -1
  00166	c7 86 0c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031948], -1
  00170	c7 86 10 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031952], -1
  0017a	c7 86 14 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031956], -1
  00184	c7 86 18 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031960], -1
  0018e	c7 86 1c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031964], -1
  00198	c7 86 20 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031968], -1
  001a2	c7 86 24 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031972], -1
  001ac	89 8e 28 bf 0f
	00		 mov	 DWORD PTR [esi+1031976], ecx
  001b2	89 8e 2c bf 0f
	00		 mov	 DWORD PTR [esi+1031980], ecx
  001b8	89 8e 30 bf 0f
	00		 mov	 DWORD PTR [esi+1031984], ecx
  001be	c7 86 34 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031988], -1
  001c8	c7 86 38 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031992], -1
  001d2	c7 86 3c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1031996], -1
  001dc	c7 86 40 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032000], -1
  001e6	c7 86 44 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032004], -1
  001f0	c7 86 48 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032008], -1
  001fa	c7 86 4c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032012], -1
  00204	c7 86 50 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032016], -1
  0020e	89 8e 54 bf 0f
	00		 mov	 DWORD PTR [esi+1032020], ecx
  00214	89 8e 58 bf 0f
	00		 mov	 DWORD PTR [esi+1032024], ecx
  0021a	89 8e 5c bf 0f
	00		 mov	 DWORD PTR [esi+1032028], ecx
  00220	c7 86 60 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032032], -1
  0022a	c7 86 64 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032036], -1
  00234	c7 86 68 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032040], -1
  0023e	c7 86 6c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032044], -1
  00248	c7 86 70 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032048], -1
  00252	c7 86 74 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032052], -1
  0025c	c7 86 78 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032056], -1
  00266	c7 86 7c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032060], -1
  00270	89 8e 80 bf 0f
	00		 mov	 DWORD PTR [esi+1032064], ecx
  00276	89 8e 84 bf 0f
	00		 mov	 DWORD PTR [esi+1032068], ecx
  0027c	89 8e 88 bf 0f
	00		 mov	 DWORD PTR [esi+1032072], ecx
  00282	c7 86 8c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032076], -1
  0028c	c7 86 90 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032080], -1
  00296	c7 86 94 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032084], -1
  002a0	c7 86 98 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032088], -1
  002aa	c7 86 9c bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032092], -1
  002b4	c7 86 a0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032096], -1
  002be	c7 86 a4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032100], -1
  002c8	c7 86 a8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032104], -1
  002d2	89 8e ac bf 0f
	00		 mov	 DWORD PTR [esi+1032108], ecx
  002d8	89 8e b0 bf 0f
	00		 mov	 DWORD PTR [esi+1032112], ecx
  002de	89 8e b4 bf 0f
	00		 mov	 DWORD PTR [esi+1032116], ecx
  002e4	c7 86 b8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032120], -1
  002ee	c7 86 bc bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032124], -1
  002f8	c7 86 c0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032128], -1
  00302	c7 86 c4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032132], -1
  0030c	c7 86 c8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032136], -1
  00316	c7 86 cc bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032140], -1
  00320	c7 86 d0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032144], -1
  0032a	c7 86 d4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032148], -1
  00334	89 8e d8 bf 0f
	00		 mov	 DWORD PTR [esi+1032152], ecx
  0033a	89 8e dc bf 0f
	00		 mov	 DWORD PTR [esi+1032156], ecx
  00340	89 8e e0 bf 0f
	00		 mov	 DWORD PTR [esi+1032160], ecx
  00346	c7 86 e4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032164], -1
  00350	c7 86 e8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032168], -1
  0035a	c7 86 ec bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032172], -1
  00364	c7 86 f0 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032176], -1
  0036e	c7 86 f4 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032180], -1
  00378	c7 86 f8 bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032184], -1
  00382	c7 86 fc bf 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032188], -1
  0038c	c7 86 00 c0 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032192], -1
  00396	89 8e 04 c0 0f
	00		 mov	 DWORD PTR [esi+1032196], ecx
  0039c	89 8e 08 c0 0f
	00		 mov	 DWORD PTR [esi+1032200], ecx
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp

; 33   : 	this->m_bFileDataLoad = FALSE;

  003a2	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 34   : 	this->m_bDBDataLoadOK = FALSE;

  003a5	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 35   : 	this->m_bDBDataLoading = FALSE;

  003a8	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 36   : 	this->m_iCrywolfState = 0;

  003ab	89 8e 8c a8 0f
	00		 mov	 DWORD PTR [esi+1026188], ecx

; 37   : 	this->m_iScheduleMode =0;
; 38   : 	this->m_dwCrywolfNotifyMsgStartTick = 0;
; 39   : 	this->m_dwCrywolfStartProcTick = 0;
; 40   : 	this->m_bTurnUpBoss = FALSE;
; 41   : 	this->m_bChangeAI = FALSE ;	
; 42   : 	this->m_iBossIndex = -1;
; 43   : 	this->m_iBossGroupNumber = 0;
; 44   : 
; 45   : 	memset(m_iMonsterGroupNumberArray, 0, sizeof( m_iMonsterGroupNumberArray ) );

  003b1	6a 50		 push	 80			; 00000050H
  003b3	51		 push	 ecx
  003b4	8d 86 1c c0 0f
	00		 lea	 eax, DWORD PTR [esi+1032220]
  003ba	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  003bd	50		 push	 eax
  003be	89 8e 0c c0 0f
	00		 mov	 DWORD PTR [esi+1032204], ecx
  003c4	89 8e 10 c0 0f
	00		 mov	 DWORD PTR [esi+1032208], ecx
  003ca	89 8e 14 c0 0f
	00		 mov	 DWORD PTR [esi+1032212], ecx
  003d0	89 8e 18 c0 0f
	00		 mov	 DWORD PTR [esi+1032216], ecx
  003d6	c7 86 74 c0 0f
	00 ff ff ff ff	 mov	 DWORD PTR [esi+1032308], -1
  003e0	89 8e 78 c0 0f
	00		 mov	 DWORD PTR [esi+1032312], ecx
  003e6	e8 00 00 00 00	 call	 _memset
  003eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 46   : }

  003ee	8b c6		 mov	 eax, esi
  003f0	5f		 pop	 edi
  003f1	5e		 pop	 esi
  003f2	8b e5		 mov	 esp, ebp
  003f4	5d		 pop	 ebp
  003f5	c3		 ret	 0
??0CCrywolf@@QAE@XZ ENDP				; CCrywolf::CCrywolf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ PROC		; CCrywolfStateTimeInfo::GetLeftTime, COMDAT
; _this$ = ecx

; 127  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  0000c	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  0000f	77 1a		 ja	 SHORT $LN2@GetLeftTim

; 128  : 		if ( this->CheckContinuanceTime() )
; 129  : 		{
; 130  : 			int iLeftTime = this->m_iContinuanceTime - (GetTickCount() - this->m_dwAppliedTickCount);

  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00017	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0001a	2b c8		 sub	 ecx, eax

; 131  : 
; 132  : 			if ( iLeftTime < 0 )

  0001c	b8 00 00 00 00	 mov	 eax, 0
  00021	03 4e 24	 add	 ecx, DWORD PTR [esi+36]
  00024	5e		 pop	 esi
  00025	0f 48 c8	 cmovs	 ecx, eax

; 133  : 				iLeftTime = 0;
; 134  : 
; 135  : 			return iLeftTime;

  00028	8b c1		 mov	 eax, ecx

; 139  : 	}

  0002a	c3		 ret	 0
$LN2@GetLeftTim:

; 136  : 		}
; 137  : 
; 138  : 		return 0;

  0002b	33 c0		 xor	 eax, eax
  0002d	5e		 pop	 esi

; 139  : 	}

  0002e	c3		 ret	 0
?GetLeftTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP		; CCrywolfStateTimeInfo::GetLeftTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
_tConditionTime$1 = -80					; size = 8
_iMinute$1$ = -76					; size = 4
_tConditionTime$2 = -72					; size = 8
_iDayOfWeek$1$ = -68					; size = 4
_tTimeRange$2$ = -64					; size = 4
_tTimeRange$1$ = -60					; size = 4
_iDay$1$ = -56						; size = 4
_iHour$1$ = -52						; size = 4
_tCurrentTime$ = -48					; size = 8
_atm$3 = -40						; size = 36
_ttm$4 = -40						; size = 36
_ttm$5 = -40						; size = 36
_ttm$6 = -40						; size = 36
_ttm$7 = -40						; size = 36
_ttm$8 = -40						; size = 36
_ttm$9 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ PROC	; CCrywolfStateTimeInfo::CheckScheduleTime, COMDAT
; _this$ = ecx

; 58   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00013	6a 00		 push	 0
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 58   : 	{

  00015	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00017	e8 00 00 00 00	 call	 __time64
  0001c	83 c4 04	 add	 esp, 4

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  0001f	89 45 d0	 mov	 DWORD PTR _tCurrentTime$[ebp], eax

; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);

  00022	8d 45 d8	 lea	 eax, DWORD PTR _ttm$9[ebp]

; 375  : }
; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00025	89 55 d4	 mov	 DWORD PTR _tCurrentTime$[ebp+4], edx

; 574  : }
; 575  : 
; 576  : inline bool CTime::operator<=(_In_ CTime time) const throw()
; 577  : {
; 578  : 	return( m_time <= time.m_time );
; 579  : }
; 580  : 
; 581  : inline bool CTime::operator>=(_In_ CTime time) const throw()
; 582  : {
; 583  : 	return( m_time >= time.m_time );
; 584  : }
; 585  : 
; 586  : inline _Success_(return != NULL) struct tm* CTime::GetGmtTm(_Out_ struct tm* ptm) const
; 587  : {
; 588  : 	// Ensure ptm is valid
; 589  : 	ATLENSURE( ptm != NULL );
; 590  : 
; 591  : 	if (ptm != NULL)
; 592  : 	{
; 593  : 		struct tm ptmTemp;
; 594  : 		errno_t err = _gmtime64_s(&ptmTemp, &m_time);
; 595  : 
; 596  : 		// Be sure the call succeeded
; 597  : 		if(err != 0) { return NULL; }
; 598  : 
; 599  : 		*ptm = ptmTemp;
; 600  : 		return ptm;
; 601  : 	}
; 602  : 
; 603  : 	return NULL;
; 604  : }
; 605  : 
; 606  : inline _Success_(return != NULL) struct tm* CTime::GetLocalTm(_Out_ struct tm* ptm) const
; 607  : {
; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );
; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);
; 615  : 
; 616  : 		if (err != 0)
; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!
; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;
; 622  : 		return ptm;
; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }
; 627  : 
; 628  : inline _Success_(return != false) bool CTime::GetAsSystemTime(_Out_ SYSTEMTIME& timeDest) const throw()
; 629  : {
; 630  : 	struct tm ttm;
; 631  : 	struct tm* ptm;
; 632  : 
; 633  : 	ptm = GetLocalTm(&ttm);
; 634  : 	if(!ptm) 
; 635  : 	{ 
; 636  : 		return false; 
; 637  : 	}
; 638  : 
; 639  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);
; 640  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);
; 641  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;
; 642  : 	timeDest.wDay = (WORD) ptm->tm_mday;
; 643  : 	timeDest.wHour = (WORD) ptm->tm_hour;
; 644  : 	timeDest.wMinute = (WORD) ptm->tm_min;
; 645  : 	timeDest.wSecond = (WORD) ptm->tm_sec;
; 646  : 	timeDest.wMilliseconds = 0;
; 647  : 
; 648  : 	return true;
; 649  : }
; 650  : 
; 651  : inline __time64_t CTime::GetTime() const throw()
; 652  : {
; 653  : 	return( m_time );
; 654  : }
; 655  : 
; 656  : inline int CTime::GetYear() const
; 657  : {
; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);

  00028	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00031	85 c0		 test	 eax, eax
  00033	74 0b		 je	 SHORT $LN34@CheckSched
  00035	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00038	81 c6 6c 07 00
	00		 add	 esi, 1900		; 0000076cH
  0003e	eb 02		 jmp	 SHORT $LN35@CheckSched
$LN34@CheckSched:
  00040	33 f6		 xor	 esi, esi
$LN35@CheckSched:

; 663  : }
; 664  : 
; 665  : inline int CTime::GetMonth() const
; 666  : {
; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);

  00042	8d 45 d8	 lea	 eax, DWORD PTR _ttm$8[ebp]
  00045	50		 push	 eax
  00046	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00049	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;

  0004e	85 c0		 test	 eax, eax
  00050	74 06		 je	 SHORT $LN38@CheckSched
  00052	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  00055	47		 inc	 edi
  00056	eb 02		 jmp	 SHORT $LN39@CheckSched
$LN38@CheckSched:
  00058	33 ff		 xor	 edi, edi
$LN39@CheckSched:

; 672  : }
; 673  : 
; 674  : inline int CTime::GetDay() const
; 675  : {
; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);

  0005a	8d 45 d8	 lea	 eax, DWORD PTR _ttm$7[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00061	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 680  : 	return ptm ? ptm->tm_mday : 0 ;

  00066	85 c0		 test	 eax, eax
  00068	74 08		 je	 SHORT $LN42@CheckSched
  0006a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0006d	89 45 c8	 mov	 DWORD PTR _iDay$1$[ebp], eax
  00070	eb 07		 jmp	 SHORT $LN43@CheckSched
$LN42@CheckSched:
  00072	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _iDay$1$[ebp], 0
$LN43@CheckSched:

; 699  : }
; 700  : 
; 701  : inline int CTime::GetSecond() const
; 702  : {
; 703  : 	struct tm ttm;
; 704  : 	struct tm * ptm;
; 705  : 
; 706  : 	ptm = GetLocalTm(&ttm);
; 707  : 	return ptm ? ptm->tm_sec : -1 ;
; 708  : }
; 709  : 
; 710  : inline int CTime::GetDayOfWeek() const
; 711  : {
; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  00079	8d 45 d8	 lea	 eax, DWORD PTR _ttm$6[ebp]
  0007c	50		 push	 eax
  0007d	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00080	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00085	85 c0		 test	 eax, eax
  00087	74 09		 je	 SHORT $LN46@CheckSched
  00089	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0008c	40		 inc	 eax
  0008d	89 45 bc	 mov	 DWORD PTR _iDayOfWeek$1$[ebp], eax
  00090	eb 07		 jmp	 SHORT $LN47@CheckSched
$LN46@CheckSched:
  00092	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _iDayOfWeek$1$[ebp], 0
$LN47@CheckSched:

; 681  : }
; 682  : 
; 683  : inline int CTime::GetHour() const
; 684  : {
; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);

  00099	8d 45 d8	 lea	 eax, DWORD PTR _ttm$5[ebp]
  0009c	50		 push	 eax
  0009d	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  000a0	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 689  : 	return ptm ? ptm->tm_hour : -1 ;

  000a5	85 c0		 test	 eax, eax
  000a7	74 08		 je	 SHORT $LN50@CheckSched
  000a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000ac	89 45 cc	 mov	 DWORD PTR _iHour$1$[ebp], eax
  000af	eb 07		 jmp	 SHORT $LN51@CheckSched
$LN50@CheckSched:
  000b1	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _iHour$1$[ebp], -1
$LN51@CheckSched:

; 690  : }
; 691  : 
; 692  : inline int CTime::GetMinute() const
; 693  : {
; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);

  000b8	8d 45 d8	 lea	 eax, DWORD PTR _ttm$4[ebp]
  000bb	50		 push	 eax
  000bc	8d 4d d0	 lea	 ecx, DWORD PTR _tCurrentTime$[ebp]
  000bf	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 698  : 	return ptm ? ptm->tm_min : -1 ;

  000c4	85 c0		 test	 eax, eax
  000c6	74 08		 je	 SHORT $LN54@CheckSched
  000c8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cb	89 45 b4	 mov	 DWORD PTR _iMinute$1$[ebp], eax
  000ce	eb 07		 jmp	 SHORT $LN55@CheckSched
$LN54@CheckSched:
  000d0	c7 45 b4 ff ff
	ff ff		 mov	 DWORD PTR _iMinute$1$[ebp], -1
$LN55@CheckSched:

; 273  :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  000d7	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  000da	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  000df	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 72   : 			&& this->m_iMonth != iMonth)

  000e1	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 273  :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  000e4	89 45 c4	 mov	 DWORD PTR _tTimeRange$1$[ebp], eax
  000e7	89 55 c0	 mov	 DWORD PTR _tTimeRange$2$[ebp], edx
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 72   : 			&& this->m_iMonth != iMonth)

  000ea	83 f9 ff	 cmp	 ecx, -1
  000ed	74 26		 je	 SHORT $LN3@CheckSched
  000ef	3b cf		 cmp	 ecx, edi
  000f1	74 22		 je	 SHORT $LN3@CheckSched
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 433  : 	ATLENSURE( nYear >= 1900 );

  000f3	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000f8	81 fe 6c 07 00
	00		 cmp	 esi, 1900		; 0000076cH
  000fe	0f 8c ae 01 00
	00		 jl	 $LN258@CheckSched

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00104	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00107	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0010a	0f 86 a2 01 00
	00		 jbe	 $LN258@CheckSched
  00110	e9 a2 01 00 00	 jmp	 $LN260@CheckSched
$LN3@CheckSched:
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 84   : 			&& this->m_iDay != iDay)

  00115	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00118	83 fa ff	 cmp	 edx, -1
  0011b	0f 84 9d 00 00
	00		 je	 $LN6@CheckSched
  00121	3b 55 c8	 cmp	 edx, DWORD PTR _iDay$1$[ebp]
  00124	0f 84 94 00 00
	00		 je	 $LN6@CheckSched

; 85   : 		{
; 86   : 			CTime tConditionTime = CTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, this->m_iDay, 0, 0, 0, -1) ;

  0012a	83 f9 ff	 cmp	 ecx, -1
  0012d	0f 44 cf	 cmove	 ecx, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 433  : 	ATLENSURE( nYear >= 1900 );

  00130	81 fe 6c 07 00
	00		 cmp	 esi, 1900		; 0000076cH
  00136	0f 8c 80 01 00
	00		 jl	 $LN261@CheckSched

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  0013c	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0013f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00142	0f 87 7e 01 00
	00		 ja	 $LN262@CheckSched

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  00148	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0014b	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0014e	0f 87 7c 01 00
	00		 ja	 $LN263@CheckSched

; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );
; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );
; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );
; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;
; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;
; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  00154	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00157	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _atm$3[ebp], 0
  0015e	89 45 e8	 mov	 DWORD PTR _atm$3[ebp+16], eax

; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  00161	8d 86 94 f8 ff
	ff		 lea	 eax, DWORD PTR [esi-1900]
  00167	89 45 ec	 mov	 DWORD PTR _atm$3[ebp+20], eax

; 450  : 	atm.tm_isdst = nDST;
; 451  : 
; 452  : 	m_time = _mktime64(&atm);

  0016a	8d 45 d8	 lea	 eax, DWORD PTR _atm$3[ebp]
  0016d	50		 push	 eax
  0016e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _atm$3[ebp+4], 0
  00175	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _atm$3[ebp+8], 0
  0017c	89 55 e4	 mov	 DWORD PTR _atm$3[ebp+12], edx
  0017f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _atm$3[ebp+32], -1
  00186	e8 00 00 00 00	 call	 __mktime64

; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)

  0018b	8b c8		 mov	 ecx, eax
  0018d	83 c4 04	 add	 esp, 4
  00190	23 ca		 and	 ecx, edx
  00192	83 f9 ff	 cmp	 ecx, -1
  00195	0f 84 3f 01 00
	00		 je	 $LN264@CheckSched

; 568  : 	return( m_time < time.m_time );

  0019b	39 55 d4	 cmp	 DWORD PTR _tCurrentTime$[ebp+4], edx
  0019e	0f 8c 80 00 00
	00		 jl	 $LN249@CheckSched
  001a4	8b 4d d0	 mov	 ecx, DWORD PTR _tCurrentTime$[ebp]
  001a7	7f 04		 jg	 SHORT $LN248@CheckSched
  001a9	3b c8		 cmp	 ecx, eax
  001ab	72 77		 jb	 SHORT $LN249@CheckSched
$LN248@CheckSched:

; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  001ad	03 45 c4	 add	 eax, DWORD PTR _tTimeRange$1$[ebp]
  001b0	13 55 c0	 adc	 edx, DWORD PTR _tTimeRange$2$[ebp]

; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );

  001b3	39 55 d4	 cmp	 DWORD PTR _tCurrentTime$[ebp+4], edx
  001b6	7c 06		 jl	 SHORT $LN6@CheckSched
  001b8	7f 6a		 jg	 SHORT $LN249@CheckSched
  001ba	3b c8		 cmp	 ecx, eax
  001bc	77 66		 ja	 SHORT $LN249@CheckSched
$LN6@CheckSched:
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 95   : 		if(this->m_iDayOfWeek != -1 && this->m_iDayOfWeek != iDayOfWeek)

  001be	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  001c1	83 f8 ff	 cmp	 eax, -1
  001c4	74 05		 je	 SHORT $LN8@CheckSched
  001c6	3b 45 bc	 cmp	 eax, DWORD PTR _iDayOfWeek$1$[ebp]
  001c9	75 59		 jne	 SHORT $LN249@CheckSched
$LN8@CheckSched:

; 96   : 		{
; 97   : 			return false;
; 98   : 		}
; 99   : 
; 100  : 		if(this->m_iHour != -1
; 101  : 			&& this->m_iHour != iHour)

  001cb	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  001ce	8b 4d cc	 mov	 ecx, DWORD PTR _iHour$1$[ebp]
  001d1	83 fa ff	 cmp	 edx, -1
  001d4	74 64		 je	 SHORT $LN10@CheckSched
  001d6	3b d1		 cmp	 edx, ecx
  001d8	74 60		 je	 SHORT $LN10@CheckSched

; 102  : 		{
; 103  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, this->m_iHour, 0, 0, -1) ;

  001da	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  001dd	83 f9 ff	 cmp	 ecx, -1
  001e0	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  001e3	0f 44 4d c8	 cmove	 ecx, DWORD PTR _iDay$1$[ebp]
  001e7	83 f8 ff	 cmp	 eax, -1
  001ea	6a ff		 push	 -1
  001ec	6a 00		 push	 0
  001ee	6a 00		 push	 0
  001f0	52		 push	 edx
  001f1	51		 push	 ecx
  001f2	0f 44 c7	 cmove	 eax, edi
  001f5	8d 4d b8	 lea	 ecx, DWORD PTR _tConditionTime$2[ebp]
  001f8	50		 push	 eax
  001f9	56		 push	 esi
  001fa	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 568  : 	return( m_time < time.m_time );

  001ff	8b 55 bc	 mov	 edx, DWORD PTR _tConditionTime$2[ebp+4]
  00202	39 55 d4	 cmp	 DWORD PTR _tCurrentTime$[ebp+4], edx
  00205	7c 1d		 jl	 SHORT $LN249@CheckSched
  00207	8b 4d d0	 mov	 ecx, DWORD PTR _tCurrentTime$[ebp]
  0020a	8b 45 b8	 mov	 eax, DWORD PTR _tConditionTime$2[ebp]
  0020d	7f 04		 jg	 SHORT $LN250@CheckSched
  0020f	3b c8		 cmp	 ecx, eax
  00211	72 11		 jb	 SHORT $LN249@CheckSched
$LN250@CheckSched:

; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00213	03 45 c4	 add	 eax, DWORD PTR _tTimeRange$1$[ebp]
  00216	13 55 c0	 adc	 edx, DWORD PTR _tTimeRange$2$[ebp]

; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );

  00219	39 55 d4	 cmp	 DWORD PTR _tCurrentTime$[ebp+4], edx
  0021c	7c 19		 jl	 SHORT $LN255@CheckSched
  0021e	7f 04		 jg	 SHORT $LN249@CheckSched
  00220	3b c8		 cmp	 ecx, eax
  00222	76 13		 jbe	 SHORT $LN255@CheckSched
$LN249@CheckSched:
  00224	5f		 pop	 edi
  00225	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 108  : 				return FALSE;

  00226	33 c0		 xor	 eax, eax
  00228	5b		 pop	 ebx

; 124  : 	}

  00229	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022c	33 cd		 xor	 ecx, ebp
  0022e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
$LN255@CheckSched:
  00237	8b 4d cc	 mov	 ecx, DWORD PTR _iHour$1$[ebp]
$LN10@CheckSched:

; 109  : 			}
; 110  : 		}
; 111  : 
; 112  : 		if ( this->m_iMinute != -1
; 113  : 			&& this->m_iMinute != iMinute)

  0023a	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0023d	83 f8 ff	 cmp	 eax, -1
  00240	74 5a		 je	 SHORT $LN13@CheckSched
  00242	3b 45 b4	 cmp	 eax, DWORD PTR _iMinute$1$[ebp]
  00245	74 55		 je	 SHORT $LN13@CheckSched

; 114  : 		{
; 115  : 			CTime tConditionTime(iYear, (m_iMonth == -1) ? iMonth : m_iMonth, (m_iDay == -1) ? iDay : m_iDay, (m_iHour == -1) ? iHour : m_iHour, this->m_iMinute, 0, -1) ;

  00247	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  0024a	83 fa ff	 cmp	 edx, -1
  0024d	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00250	0f 44 d1	 cmove	 edx, ecx
  00253	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00256	6a ff		 push	 -1
  00258	6a 00		 push	 0
  0025a	ff 73 1c	 push	 DWORD PTR [ebx+28]
  0025d	83 f9 ff	 cmp	 ecx, -1
  00260	52		 push	 edx
  00261	0f 44 4d c8	 cmove	 ecx, DWORD PTR _iDay$1$[ebp]
  00265	83 f8 ff	 cmp	 eax, -1
  00268	51		 push	 ecx
  00269	0f 44 c7	 cmove	 eax, edi
  0026c	8d 4d b0	 lea	 ecx, DWORD PTR _tConditionTime$1[ebp]
  0026f	50		 push	 eax
  00270	56		 push	 esi
  00271	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@HHHHHHH@Z ; ATL::CTime::CTime
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 568  : 	return( m_time < time.m_time );

  00276	8b 75 d4	 mov	 esi, DWORD PTR _tCurrentTime$[ebp+4]
  00279	8b 55 b4	 mov	 edx, DWORD PTR _tConditionTime$1[ebp+4]
  0027c	3b f2		 cmp	 esi, edx
  0027e	7c a4		 jl	 SHORT $LN249@CheckSched
  00280	8b 4d d0	 mov	 ecx, DWORD PTR _tCurrentTime$[ebp]
  00283	8b 45 b0	 mov	 eax, DWORD PTR _tConditionTime$1[ebp]
  00286	7f 04		 jg	 SHORT $LN252@CheckSched
  00288	3b c8		 cmp	 ecx, eax
  0028a	72 98		 jb	 SHORT $LN249@CheckSched
$LN252@CheckSched:

; 457  : 	}
; 458  : }
; 459  : 
; 460  : inline CTime::CTime(
; 461  : 	_In_ WORD wDosDate,
; 462  : 	_In_ WORD wDosTime,
; 463  : 	_In_ int nDST)
; 464  : {
; 465  : 	struct tm atm;
; 466  : 	atm.tm_sec = (wDosTime & ~0xFFE0) << 1;
; 467  : 	atm.tm_min = (wDosTime & ~0xF800) >> 5;
; 468  : 	atm.tm_hour = wDosTime >> 11;
; 469  : 
; 470  : 	atm.tm_mday = wDosDate & ~0xFFE0;
; 471  : 	atm.tm_mon = ((wDosDate & ~0xFE00) >> 5) - 1;
; 472  : 	atm.tm_year = (wDosDate >> 9) + 80;
; 473  : 	atm.tm_isdst = nDST;
; 474  : 	m_time = _mktime64(&atm);
; 475  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 476  : 
; 477  : 	if(m_time == -1)
; 478  : 		AtlThrow(E_INVALIDARG);
; 479  : 
; 480  : }
; 481  : 
; 482  : inline CTime::CTime(
; 483  : 	_In_ const SYSTEMTIME& sysTime,
; 484  : 	_In_ int nDST)
; 485  : {
; 486  : 	if (sysTime.wYear < 1900)
; 487  : 	{
; 488  : 		__time64_t time0 = 0L;
; 489  : 		CTime timeT(time0);
; 490  : 		*this = timeT;
; 491  : 	}
; 492  : 	else
; 493  : 	{
; 494  : 		CTime timeT(
; 495  : 			(int)sysTime.wYear, (int)sysTime.wMonth, (int)sysTime.wDay,
; 496  : 			(int)sysTime.wHour, (int)sysTime.wMinute, (int)sysTime.wSecond,
; 497  : 			nDST);
; 498  : 		*this = timeT;
; 499  : 	}
; 500  : }
; 501  : 
; 502  : inline CTime::CTime(
; 503  : 	_In_ const FILETIME& fileTime,
; 504  : 	_In_ int nDST)
; 505  : {
; 506  : 	SYSTEMTIME sysTime;
; 507  : 	SYSTEMTIME localTime;
; 508  : 	if (!FileTimeToSystemTime(&fileTime, &sysTime) || !SystemTimeToTzSpecificLocalTime(nullptr, &sysTime, &localTime))
; 509  : 	{
; 510  : 		m_time = 0;
; 511  : 		AtlThrow(E_INVALIDARG);
; 512  : 		return;
; 513  : 	}
; 514  : 
; 515  : 	// Convert the system time to a time_t (C-runtime local time)
; 516  : 	CTime timeT(localTime, nDST);
; 517  : 	*this = timeT;
; 518  : }
; 519  : 
; 520  : inline CTime& CTime::operator=(_In_ __time64_t time) throw()
; 521  : {
; 522  : 	m_time = time;
; 523  : 
; 524  : 	return( *this );
; 525  : }
; 526  : 
; 527  : inline CTime& CTime::operator+=(_In_ CTimeSpan span) throw()
; 528  : {
; 529  : 	m_time += span.GetTimeSpan();
; 530  : 
; 531  : 	return( *this );
; 532  : }
; 533  : 
; 534  : inline CTime& CTime::operator-=(_In_ CTimeSpan span) throw()
; 535  : {
; 536  : 	m_time -= span.GetTimeSpan();
; 537  : 
; 538  : 	return( *this );
; 539  : }
; 540  : 
; 541  : inline CTimeSpan CTime::operator-(_In_ CTime time) const throw()
; 542  : {
; 543  : 	return( CTimeSpan( m_time-time.m_time ) );
; 544  : }
; 545  : 
; 546  : inline CTime CTime::operator-(_In_ CTimeSpan span) const throw()
; 547  : {
; 548  : 	return( CTime( m_time-span.GetTimeSpan() ) );
; 549  : }
; 550  : 
; 551  : inline CTime CTime::operator+(_In_ CTimeSpan span) const throw()
; 552  : {
; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0028c	03 45 c4	 add	 eax, DWORD PTR _tTimeRange$1$[ebp]
  0028f	13 55 c0	 adc	 edx, DWORD PTR _tTimeRange$2$[ebp]

; 569  : }
; 570  : 
; 571  : inline bool CTime::operator>(_In_ CTime time) const throw()
; 572  : {
; 573  : 	return( m_time > time.m_time );

  00292	3b f2		 cmp	 esi, edx
  00294	7c 06		 jl	 SHORT $LN13@CheckSched
  00296	7f 8c		 jg	 SHORT $LN249@CheckSched
  00298	3b c8		 cmp	 ecx, eax
  0029a	77 88		 ja	 SHORT $LN249@CheckSched
$LN13@CheckSched:
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h

; 124  : 	}

  0029c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0029f	b8 01 00 00 00	 mov	 eax, 1
  002a4	5f		 pop	 edi
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	5b		 pop	 ebx
  002a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c3		 ret	 0
$LN258@CheckSched:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h

; 433  : 	ATLENSURE( nYear >= 1900 );

  002b2	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN265@CheckSched:
$LN260@CheckSched:

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  002b7	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN266@CheckSched:
$LN261@CheckSched:

; 433  : 	ATLENSURE( nYear >= 1900 );

  002bc	68 05 40 00 80	 push	 -2147467259		; 80004005H
  002c1	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN267@CheckSched:
$LN262@CheckSched:

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  002c6	68 05 40 00 80	 push	 -2147467259		; 80004005H
  002cb	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN268@CheckSched:
$LN263@CheckSched:

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  002d0	68 05 40 00 80	 push	 -2147467259		; 80004005H
  002d5	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN269@CheckSched:
$LN264@CheckSched:

; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);

  002da	68 57 00 07 80	 push	 -2147024809		; 80070057H
  002df	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN270@CheckSched:
$LN257@CheckSched:
  002e4	cc		 int	 3
?CheckScheduleTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP	; CCrywolfStateTimeInfo::CheckScheduleTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ
_TEXT	SEGMENT
?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ PROC ; CCrywolfStateTimeInfo::CheckContinuanceTime, COMDAT
; _this$ = ecx

; 48   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 49   : 		if ( (GetTickCount() - this->m_dwAppliedTickCount ) > this->m_iContinuanceTime )

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  0000c	39 46 24	 cmp	 DWORD PTR [esi+36], eax
  0000f	5e		 pop	 esi
  00010	1b c0		 sbb	 eax, eax
  00012	40		 inc	 eax

; 50   : 		{
; 51   : 			return FALSE;
; 52   : 		}
; 53   : 
; 54   : 		return TRUE;
; 55   : 	}

  00013	c3		 ret	 0
?CheckContinuanceTime@CCrywolfStateTimeInfo@@QAEHXZ ENDP ; CCrywolfStateTimeInfo::CheckContinuanceTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ PROC	; CCrywolfStateTimeInfo::ResetAppliedTime, COMDAT
; _this$ = ecx

; 44   : 		this->m_dwAppliedTickCount = 0;

  00000	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 45   : 	}

  00007	c3		 ret	 0
?ResetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ENDP	; CCrywolfStateTimeInfo::ResetAppliedTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ PROC	; CCrywolfStateTimeInfo::SetAppliedTime, COMDAT
; _this$ = ecx

; 38   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 39   : 		this->m_dwAppliedTickCount = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0000c	5e		 pop	 esi

; 40   : 	}

  0000d	c3		 ret	 0
?SetAppliedTime@CCrywolfStateTimeInfo@@QAEXXZ ENDP	; CCrywolfStateTimeInfo::SetAppliedTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ?Reset@CCrywolfStateTimeInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CCrywolfStateTimeInfo@@QAEXXZ PROC		; CCrywolfStateTimeInfo::Reset, COMDAT
; _this$ = ecx

; 24   : 		this->m_bUsed = FALSE;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 25   : 		this->m_iStateNumber = -1;	

  00006	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 26   : 		this->m_iYear = -1;	

  0000d	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 27   : 		this->m_iMonth = -1;	

  00014	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 28   : 		this->m_iDay = -1;	

  0001b	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1

; 29   : 		this->m_iDayOfWeek = -1;	

  00022	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1

; 30   : 		this->m_iHour = -1;	

  00029	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1

; 31   : 		this->m_iMinute = -1;	

  00030	c7 41 1c ff ff
	ff ff		 mov	 DWORD PTR [ecx+28], -1

; 32   : 		this->m_iSecond = -1;	

  00037	c7 41 20 ff ff
	ff ff		 mov	 DWORD PTR [ecx+32], -1

; 33   : 		this->m_iContinuanceTime = 0;	

  0003e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 34   : 		this->m_dwAppliedTickCount = 0;	

  00045	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 35   : 	}

  0004c	c3		 ret	 0
?Reset@CCrywolfStateTimeInfo@@QAEXXZ ENDP		; CCrywolfStateTimeInfo::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfstatetimeinfo.h
;	COMDAT ??0CCrywolfStateTimeInfo@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfStateTimeInfo@@QAE@XZ PROC			; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo, COMDAT
; _this$ = ecx

; 21   : 
; 22   : 	void Reset()
; 23   : 	{
; 24   : 		this->m_bUsed = FALSE;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 18   : 	{
; 19   : 		this->Reset();
; 20   : 	}

  00006	8b c1		 mov	 eax, ecx

; 25   : 		this->m_iStateNumber = -1;	

  00008	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 26   : 		this->m_iYear = -1;	

  0000f	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1

; 27   : 		this->m_iMonth = -1;	

  00016	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1

; 28   : 		this->m_iDay = -1;	

  0001d	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1

; 29   : 		this->m_iDayOfWeek = -1;	

  00024	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1

; 30   : 		this->m_iHour = -1;	

  0002b	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1

; 31   : 		this->m_iMinute = -1;	

  00032	c7 41 1c ff ff
	ff ff		 mov	 DWORD PTR [ecx+28], -1

; 32   : 		this->m_iSecond = -1;	

  00039	c7 41 20 ff ff
	ff ff		 mov	 DWORD PTR [ecx+32], -1

; 33   : 		this->m_iContinuanceTime = 0;	

  00040	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 34   : 		this->m_dwAppliedTickCount = 0;	

  00047	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 18   : 	{
; 19   : 		this->Reset();
; 20   : 	}

  0004e	c3		 ret	 0
??0CCrywolfStateTimeInfo@@QAE@XZ ENDP			; CCrywolfStateTimeInfo::CCrywolfStateTimeInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
;	COMDAT ?AddObj@CCrywolfObjInfo@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?AddObj@CCrywolfObjInfo@@QAEHH@Z PROC			; CCrywolfObjInfo::AddObj, COMDAT
; _this$ = ecx

; 36   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 		if ( this->m_iObjCount >= MAX_CRYWOLF_OBJ_INFO )

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	81 fa 2c 01 00
	00		 cmp	 edx, 300		; 0000012cH
  0000b	7c 06		 jl	 SHORT $LN2@AddObj

; 38   : 		{
; 39   : 			return FALSE;

  0000d	33 c0		 xor	 eax, eax

; 46   : 	}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@AddObj:

; 40   : 		}
; 41   : 
; 42   : 		this->m_iObjIndex[this->m_iObjCount] = iIndex;

  00013	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00016	89 44 91 04	 mov	 DWORD PTR [ecx+edx*4+4], eax

; 43   : 		this->m_iObjCount++;
; 44   : 		
; 45   : 		return TRUE;

  0001a	b8 01 00 00 00	 mov	 eax, 1
  0001f	ff 01		 inc	 DWORD PTR [ecx]

; 46   : 	}

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?AddObj@CCrywolfObjInfo@@QAEHH@Z ENDP			; CCrywolfObjInfo::AddObj
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
;	COMDAT ?Reset@CCrywolfObjInfo@@QAEXXZ
_TEXT	SEGMENT
?Reset@CCrywolfObjInfo@@QAEXXZ PROC			; CCrywolfObjInfo::Reset, COMDAT
; _this$ = ecx

; 26   : 	{

  00000	8b d1		 mov	 edx, ecx

; 27   : 		for ( int i=0;i<MAX_CRYWOLF_OBJ_INFO;i++)
; 28   : 		{
; 29   : 			this->m_iObjIndex[i] = -1;

  00002	83 c8 ff	 or	 eax, -1
  00005	57		 push	 edi
  00006	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0000b	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0000e	f3 ab		 rep stosd

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00010	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00016	5f		 pop	 edi

; 33   : 	}

  00017	c3		 ret	 0
?Reset@CCrywolfObjInfo@@QAEXXZ ENDP			; CCrywolfObjInfo::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolfobjinfo.h
;	COMDAT ??0CCrywolfObjInfo@@QAE@XZ
_TEXT	SEGMENT
??0CCrywolfObjInfo@@QAE@XZ PROC				; CCrywolfObjInfo::CCrywolfObjInfo, COMDAT
; _this$ = ecx

; 20   : 	CCrywolfObjInfo()

  00000	8b d1		 mov	 edx, ecx

; 24   : 
; 25   : 	void Reset()
; 26   : 	{
; 27   : 		for ( int i=0;i<MAX_CRYWOLF_OBJ_INFO;i++)
; 28   : 		{
; 29   : 			this->m_iObjIndex[i] = -1;

  00002	83 c8 ff	 or	 eax, -1
  00005	57		 push	 edi
  00006	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  0000b	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0000e	f3 ab		 rep stosd

; 30   : 		}
; 31   : 
; 32   : 		this->m_iObjCount = 0;

  00010	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 21   : 	{
; 22   : 		this->Reset();
; 23   : 	}

  00016	8b c2		 mov	 eax, edx
  00018	5f		 pop	 edi
  00019	c3		 ret	 0
??0CCrywolfObjInfo@@QAE@XZ ENDP				; CCrywolfObjInfo::CCrywolfObjInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);
; 53   : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 54   : 	_Right = _Move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetDayOfWeek@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDayOfWeek@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetDayOfWeek, COMDAT
; _this$ = ecx

; 711  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 712  : 	struct tm ttm;
; 713  : 	struct tm * ptm;
; 714  : 
; 715  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 716  : 	return ptm ? ptm->tm_wday + 1 : 0 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 12		 je	 SHORT $LN3@GetDayOfWe
  0001d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00020	40		 inc	 eax

; 717  : }

  00021	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00024	33 cd		 xor	 ecx, ebp
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@GetDayOfWe:
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 c0		 xor	 eax, eax
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetDayOfWeek@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetDayOfWeek
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 694  : 	struct tm ttm;
; 695  : 	struct tm * ptm;
; 696  : 
; 697  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 698  : 	return ptm ? ptm->tm_min : -1 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 11		 je	 SHORT $LN3@GetMinute
  0001d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 699  : }

  00020	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00023	33 cd		 xor	 ecx, ebp
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@GetMinute:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00031	83 c8 ff	 or	 eax, -1
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 685  : 	struct tm ttm;
; 686  : 	struct tm * ptm;
; 687  : 
; 688  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 689  : 	return ptm ? ptm->tm_hour : -1 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 11		 je	 SHORT $LN3@GetHour
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 690  : }

  00020	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00023	33 cd		 xor	 ecx, ebp
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@GetHour:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00031	83 c8 ff	 or	 eax, -1
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 676  : 	struct tm ttm;
; 677  : 	struct tm * ptm;
; 678  : 
; 679  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 680  : 	return ptm ? ptm->tm_mday : 0 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 11		 je	 SHORT $LN3@GetDay
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 681  : }

  00020	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00023	33 cd		 xor	 ecx, ebp
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
$LN3@GetDay:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00031	33 c0		 xor	 eax, eax
  00033	33 cd		 xor	 ecx, ebp
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 667  : 	struct tm ttm;
; 668  : 	struct tm * ptm;
; 669  : 
; 670  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 671  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00019	85 c0		 test	 eax, eax
  0001b	74 12		 je	 SHORT $LN3@GetMonth
  0001d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00020	40		 inc	 eax

; 672  : }

  00021	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00024	33 cd		 xor	 ecx, ebp
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN3@GetMonth:
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	33 c0		 xor	 eax, eax
  00034	33 cd		 xor	 ecx, ebp
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 658  : 	struct tm ttm;
; 659  : 	struct tm * ptm;
; 660  : 
; 661  : 	ptm = GetLocalTm(&ttm);

  00010	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm

; 662  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00019	85 c0		 test	 eax, eax
  0001b	74 16		 je	 SHORT $LN3@GetYear
  0001d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00020	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH

; 663  : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
$LN3@GetYear:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 c0		 xor	 eax, eax
  00038	33 cd		 xor	 ecx, ebp
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_ptmTemp$1 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _ptm$[ebp]

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00014	85 f6		 test	 esi, esi
  00016	74 4c		 je	 SHORT $LN13@GetLocalTm

; 610  : 
; 611  : 	if (ptm != NULL)
; 612  : 	{
; 613  : 		struct tm ptmTemp;
; 614  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  00018	51		 push	 ecx
  00019	8d 45 d8	 lea	 eax, DWORD PTR _ptmTemp$1[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 __localtime64_s
  00022	83 c4 08	 add	 esp, 8

; 615  : 
; 616  : 		if (err != 0)

  00025	85 c0		 test	 eax, eax
  00027	74 13		 je	 SHORT $LN10@GetLocalTm

; 617  : 		{
; 618  : 			return NULL;    // indicates that m_time was not initialized!

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002f	33 cd		 xor	 ecx, ebp
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN10@GetLocalTm:

; 619  : 		}
; 620  : 
; 621  : 		*ptm = ptmTemp;

  0003c	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR _ptmTemp$1[ebp]
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _ptmTemp$1[ebp+32]

; 622  : 		return ptm;

  00043	8b c6		 mov	 eax, esi
  00045	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00048	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR _ptmTemp$1[ebp+16]
  0004c	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00050	89 4e 20	 mov	 DWORD PTR [esi+32], ecx

; 623  : 	}
; 624  : 
; 625  : 	return NULL;
; 626  : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	5e		 pop	 esi
  00059	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN13@GetLocalTm:

; 608  : 	// Ensure ptm is valid
; 609  : 	ATLENSURE( ptm != NULL );

  00064	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00069	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN15@GetLocalTm:
$LN12@GetLocalTm:
  0006e	cc		 int	 3
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??OCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??OCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator>, COMDAT
; _this$ = ecx

; 572  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 573  : 	return( m_time > time.m_time );

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR _time$[ebp+4]
  00009	7c 0f		 jl	 SHORT $LN3@operator
  0000b	7f 07		 jg	 SHORT $LN5@operator
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR _time$[ebp]
  00012	76 06		 jbe	 SHORT $LN3@operator
$LN5@operator:
  00014	b0 01		 mov	 al, 1

; 574  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN3@operator:

; 573  : 	return( m_time > time.m_time );

  0001a	32 c0		 xor	 al, al

; 574  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??OCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??MCTime@ATL@@QBE_NV01@@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??MCTime@ATL@@QBE_NV01@@Z PROC				; ATL::CTime::operator<, COMDAT
; _this$ = ecx

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 568  : 	return( m_time < time.m_time );

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	3b 45 0c	 cmp	 eax, DWORD PTR _time$[ebp+4]
  00009	7f 0f		 jg	 SHORT $LN3@operator
  0000b	7c 07		 jl	 SHORT $LN5@operator
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR _time$[ebp]
  00012	73 06		 jae	 SHORT $LN3@operator
$LN5@operator:
  00014	b0 01		 mov	 al, 1

; 569  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN3@operator:

; 568  : 	return( m_time < time.m_time );

  0001a	32 c0		 xor	 al, al

; 569  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??MCTime@ATL@@QBE_NV01@@Z ENDP				; ATL::CTime::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_span$ = 12						; size = 8
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z PROC		; ATL::CTime::operator+, COMDAT
; _this$ = ecx

; 552  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	03 55 0c	 add	 edx, DWORD PTR _span$[ebp]

; 417  : 	m_time( time )

  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 553  : 	return( CTime( m_time+span.GetTimeSpan() ) );

  0000b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000e	13 4d 10	 adc	 ecx, DWORD PTR _span$[ebp+4]

; 417  : 	m_time( time )

  00011	89 10		 mov	 DWORD PTR [eax], edx
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 554  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??HCTime@ATL@@QBE?AV01@VCTimeSpan@1@@Z ENDP		; ATL::CTime::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@HHHHHHH@Z
_TEXT	SEGMENT
_atm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_nYear$ = 8						; size = 4
_nMonth$ = 12						; size = 4
_nDay$ = 16						; size = 4
_nHour$ = 20						; size = 4
_nMin$ = 24						; size = 4
_nSec$ = 28						; size = 4
_nDST$ = 32						; size = 4
??0CTime@ATL@@QAE@HHHHHHH@Z PROC			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );

  00010	81 7d 08 6c 07
	00 00		 cmp	 DWORD PTR _nYear$[ebp], 1900 ; 0000076cH
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	0f 8c 95 00 00
	00		 jl	 $LN65@CTime

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _nMonth$[ebp]
  00023	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00026	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00029	0f 87 90 00 00
	00		 ja	 $LN67@CTime

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  0002f	53		 push	 ebx
  00030	57		 push	 edi
  00031	8b 7d 10	 mov	 edi, DWORD PTR _nDay$[ebp]
  00034	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]
  00037	83 f8 1e	 cmp	 eax, 30			; 0000001eH
  0003a	0f 87 89 00 00
	00		 ja	 $LN68@CTime

; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  00040	8b 45 14	 mov	 eax, DWORD PTR _nHour$[ebp]
  00043	83 f8 17	 cmp	 eax, 23			; 00000017H
  00046	0f 87 87 00 00
	00		 ja	 $LN69@CTime

; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  0004c	8b 5d 18	 mov	 ebx, DWORD PTR _nMin$[ebp]
  0004f	83 fb 3b	 cmp	 ebx, 59			; 0000003bH
  00052	0f 87 85 00 00
	00		 ja	 $LN70@CTime

; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  00058	83 7d 1c 3b	 cmp	 DWORD PTR _nSec$[ebp], 59 ; 0000003bH
  0005c	0f 87 85 00 00
	00		 ja	 $LN71@CTime

; 439  : 
; 440  : #pragma warning (pop)
; 441  : 
; 442  : 	struct tm atm;
; 443  : 
; 444  : 	atm.tm_sec = nSec;

  00062	8b 55 1c	 mov	 edx, DWORD PTR _nSec$[ebp]

; 445  : 	atm.tm_min = nMin;
; 446  : 	atm.tm_hour = nHour;

  00065	89 45 e0	 mov	 DWORD PTR _atm$[ebp+8], eax

; 447  : 	atm.tm_mday = nDay;
; 448  : 	atm.tm_mon = nMonth - 1;        // tm_mon is 0 based

  00068	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0006b	89 45 e8	 mov	 DWORD PTR _atm$[ebp+16], eax

; 449  : 	atm.tm_year = nYear - 1900;     // tm_year is 1900 based

  0006e	8b 45 08	 mov	 eax, DWORD PTR _nYear$[ebp]
  00071	05 94 f8 ff ff	 add	 eax, -1900		; fffff894H
  00076	89 55 d8	 mov	 DWORD PTR _atm$[ebp], edx
  00079	89 45 ec	 mov	 DWORD PTR _atm$[ebp+20], eax

; 450  : 	atm.tm_isdst = nDST;

  0007c	8b 45 20	 mov	 eax, DWORD PTR _nDST$[ebp]
  0007f	89 45 f8	 mov	 DWORD PTR _atm$[ebp+32], eax

; 451  : 
; 452  : 	m_time = _mktime64(&atm);

  00082	8d 45 d8	 lea	 eax, DWORD PTR _atm$[ebp]
  00085	50		 push	 eax
  00086	89 5d dc	 mov	 DWORD PTR _atm$[ebp+4], ebx
  00089	89 7d e4	 mov	 DWORD PTR _atm$[ebp+12], edi
  0008c	e8 00 00 00 00	 call	 __mktime64
  00091	83 c4 04	 add	 esp, 4
  00094	89 06		 mov	 DWORD PTR [esi], eax

; 453  : 	ATLASSUME(m_time != -1);       // indicates an illegal input time
; 454  : 	if(m_time == -1)

  00096	23 c2		 and	 eax, edx
  00098	89 56 04	 mov	 DWORD PTR [esi+4], edx
  0009b	5f		 pop	 edi
  0009c	5b		 pop	 ebx
  0009d	83 f8 ff	 cmp	 eax, -1
  000a0	74 4f		 je	 SHORT $LN72@CTime

; 457  : 	}
; 458  : }

  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	8b c6		 mov	 eax, esi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5e		 pop	 esi
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 1c 00	 ret	 28			; 0000001cH
$LN65@CTime:

; 430  : #pragma warning (push)
; 431  : #pragma warning (disable: 4127)  // conditional expression constant
; 432  : 
; 433  : 	ATLENSURE( nYear >= 1900 );

  000b5	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000ba	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN73@CTime:
$LN67@CTime:

; 434  : 	ATLENSURE( nMonth >= 1 && nMonth <= 12 );

  000bf	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000c4	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN74@CTime:
$LN68@CTime:

; 435  : 	ATLENSURE( nDay >= 1 && nDay <= 31 );

  000c9	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000ce	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN75@CTime:
$LN69@CTime:

; 436  : 	ATLENSURE( nHour >= 0 && nHour <= 23 );

  000d3	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000d8	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN76@CTime:
$LN70@CTime:

; 437  : 	ATLENSURE( nMin >= 0 && nMin <= 59 );

  000dd	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000e2	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN77@CTime:
$LN71@CTime:

; 438  : 	ATLENSURE( nSec >= 0 && nSec <= 59 );

  000e7	68 05 40 00 80	 push	 -2147467259		; 80004005H
  000ec	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN78@CTime:
$LN72@CTime:

; 455  : 	{
; 456  : 		AtlThrow(E_INVALIDARG);

  000f1	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000f6	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN79@CTime:
$LN64@CTime:
  000fb	cc		 int	 3
??0CTime@ATL@@QAE@HHHHHHH@Z ENDP			; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 418  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	m_time( time )

  00003	8b 45 08	 mov	 eax, DWORD PTR _time$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR _time$[ebp+4]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 419  : }

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 373  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 __time64

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  0000d	83 c4 04	 add	 esp, 4

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00010	89 01		 mov	 DWORD PTR [ecx], eax

; 374  : 	return( CTime( ::_time64( NULL ) ) );

  00012	8b c1		 mov	 eax, ecx

; 376  : 
; 377  : _Success_(return != false) inline bool CTime::GetAsDBTIMESTAMP(_Out_ DBTIMESTAMP& dbts) const throw()
; 378  : {
; 379  : 	struct tm tmLocal;
; 380  : 	if (GetLocalTm(&tmLocal) == nullptr) return false;
; 381  : 
; 382  : 	dbts.year = (SHORT) (1900 + tmLocal.tm_year);
; 383  : 	dbts.month = (USHORT) (1 + tmLocal.tm_mon);
; 384  : 	dbts.day = (USHORT) tmLocal.tm_mday;
; 385  : 	dbts.hour = (USHORT) tmLocal.tm_hour;
; 386  : 	dbts.minute = (USHORT) tmLocal.tm_min;
; 387  : 	dbts.second = (USHORT) tmLocal.tm_sec;
; 388  : 	dbts.fraction = 0;
; 389  : 
; 390  : 	return true;
; 391  : }
; 392  : 
; 393  : inline BOOL WINAPI CTime::IsValidFILETIME(_In_ const FILETIME& fileTime) throw()
; 394  : {
; 395  : 	FILETIME localTime;
; 396  : 	if (!FileTimeToLocalFileTime(&fileTime, &localTime))
; 397  : 	{
; 398  : 		return FALSE;
; 399  : 	}
; 400  : 
; 401  : 	// then convert that time to system time
; 402  : 	SYSTEMTIME sysTime;
; 403  : 	if (!FileTimeToSystemTime(&localTime, &sysTime))
; 404  : 	{
; 405  : 		return FALSE;
; 406  : 	}
; 407  : 
; 408  : 	return TRUE;
; 409  : }
; 410  : 
; 411  : inline CTime::CTime() throw() :
; 412  : 	m_time(0)
; 413  : {
; 414  : }
; 415  : 
; 416  : inline CTime::CTime(_In_ __time64_t time)  throw():
; 417  : 	m_time( time )

  00014	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 375  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ PROC		; ATL::CTimeSpan::GetTimeSpan, COMDAT
; _this$ = ecx

; 313  : 	return( m_timeSpan );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 314  : }

  00005	c3		 ret	 0
?GetTimeSpan@CTimeSpan@ATL@@QBE_JXZ ENDP		; ATL::CTimeSpan::GetTimeSpan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atltime.h
;	COMDAT ??0CTimeSpan@ATL@@QAE@JHHH@Z
_TEXT	SEGMENT
_lDays$ = 8						; size = 4
_nHours$ = 12						; size = 4
_nMins$ = 16						; size = 4
_nSecs$ = 20						; size = 4
??0CTimeSpan@ATL@@QAE@JHHH@Z PROC			; ATL::CTimeSpan::CTimeSpan, COMDAT
; _this$ = ecx

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 273  :  	m_timeSpan = nSecs + 60* (nMins + 60* (nHours + __int64(24) * lDays));

  00003	8b 45 08	 mov	 eax, DWORD PTR _lDays$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  0000f	f7 e9		 imul	 ecx
  00011	6a 00		 push	 0
  00013	68 10 0e 00 00	 push	 3600			; 00000e10H
  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 __allmul
  0001f	8b c8		 mov	 ecx, eax
  00021	8b f2		 mov	 esi, edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR _nHours$[ebp]
  00026	ba 10 0e 00 00	 mov	 edx, 3600		; 00000e10H
  0002b	f7 ea		 imul	 edx
  0002d	03 c8		 add	 ecx, eax
  0002f	8b 45 10	 mov	 eax, DWORD PTR _nMins$[ebp]
  00032	13 f2		 adc	 esi, edx
  00034	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  00039	f7 ea		 imul	 edx
  0003b	03 c8		 add	 ecx, eax
  0003d	8b 45 14	 mov	 eax, DWORD PTR _nSecs$[ebp]
  00040	13 f2		 adc	 esi, edx
  00042	99		 cdq
  00043	03 c8		 add	 ecx, eax

; 274  : }

  00045	8b c7		 mov	 eax, edi
  00047	89 0f		 mov	 DWORD PTR [edi], ecx
  00049	13 f2		 adc	 esi, edx
  0004b	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 10 00	 ret	 16			; 00000010H
??0CTimeSpan@ATL@@QAE@JHHH@Z ENDP			; ATL::CTimeSpan::CTimeSpan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00003	8b 45 08	 mov	 eax, DWORD PTR _hr$[ebp]
  00006	3d 0e 00 07 80	 cmp	 eax, -2147024882	; 8007000eH
  0000b	75 05		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  0000d	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException
$LN6@AtlThrowIm:
$LN2@AtlThrowIm:

; 71   : 	}
; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN7@AtlThrowIm:
$LN5@AtlThrowIm:
  00018	cc		 int	 3
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
