; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\IpCache.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?DelIp@CIpCache@@QAEXPAD@Z			; CIpCache::DelIp
PUBLIC	?AddIp@CIpCache@@QAEHPAD@Z			; CIpCache::AddIp
PUBLIC	?Init@CIpCache@@QAEXXZ				; CIpCache::Init
PUBLIC	??0CIpCache@@QAE@XZ				; CIpCache::CIpCache
PUBLIC	??1CIpCache@@UAE@XZ				; CIpCache::~CIpCache
PUBLIC	??_GCIpCache@@UAEPAXI@Z				; CIpCache::`scalar deleting destructor'
PUBLIC	??_7CIpCache@@6B@				; CIpCache::`vftable'
PUBLIC	?IpCache@@3VCIpCache@@A				; IpCache
PUBLIC	??_R4CIpCache@@6B@				; CIpCache::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIpCache@@@8				; CIpCache `RTTI Type Descriptor'
PUBLIC	??_R3CIpCache@@8				; CIpCache::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIpCache@@8				; CIpCache::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIpCache@@8			; CIpCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_strcpy_s:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_ECIpCache@@UAEPAXI@Z:PROC			; CIpCache::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
_BSS	SEGMENT
?IpCache@@3VCIpCache@@A DB 0bb84H DUP (?)		; IpCache
_BSS	ENDS
CRT$XCU	SEGMENT
?IpCache$initializer$@@3P6AXXZA DD FLAT:??__EIpCache@@YAXXZ ; IpCache$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CIpCache@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIpCache@@8 DD FLAT:??_R0?AVCIpCache@@@8	; CIpCache::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_R2CIpCache@@8
rdata$r	SEGMENT
??_R2CIpCache@@8 DD FLAT:??_R1A@?0A@EA@CIpCache@@8	; CIpCache::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIpCache@@8
rdata$r	SEGMENT
??_R3CIpCache@@8 DD 00H					; CIpCache::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIpCache@@@8
data$r	SEGMENT
??_R0?AVCIpCache@@@8 DD FLAT:??_7type_info@@6B@		; CIpCache `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIpCache@@', 00H
data$r	ENDS
;	COMDAT ??_R4CIpCache@@6B@
rdata$r	SEGMENT
??_R4CIpCache@@6B@ DD 00H				; CIpCache::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIpCache@@@8
	DD	FLAT:??_R3CIpCache@@8
rdata$r	ENDS
;	COMDAT ??_7CIpCache@@6B@
CONST	SEGMENT
??_7CIpCache@@6B@ DD FLAT:??_R4CIpCache@@6B@		; CIpCache::`vftable'
	DD	FLAT:??_ECIpCache@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FIpCache@@YAXXZ
text$yd	SEGMENT
??__FIpCache@@YAXXZ PROC				; `dynamic atexit destructor for 'IpCache'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  00005	e9 00 00 00 00	 jmp	 ??1CIpCache@@UAE@XZ	; CIpCache::~CIpCache
??__FIpCache@@YAXXZ ENDP				; `dynamic atexit destructor for 'IpCache''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ??__EIpCache@@YAXXZ
text$di	SEGMENT
??__EIpCache@@YAXXZ PROC				; `dynamic initializer for 'IpCache'', COMDAT

; 13   : CIpCache IpCache;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?IpCache@@3VCIpCache@@A ; IpCache
  00005	e8 00 00 00 00	 call	 ??0CIpCache@@QAE@XZ	; CIpCache::CIpCache
  0000a	68 00 00 00 00	 push	 OFFSET ??__FIpCache@@YAXXZ ; `dynamic atexit destructor for 'IpCache''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EIpCache@@YAXXZ ENDP				; `dynamic initializer for 'IpCache''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCIpCache@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIpCache@@UAEPAXI@Z PROC				; CIpCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CIpCache@@UAE@XZ	; CIpCache::~CIpCache
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 84 bb 00 00	 push	 48004			; 0000bb84H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCIpCache@@UAEPAXI@Z ENDP				; CIpCache::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ??1CIpCache@@UAE@XZ
_TEXT	SEGMENT
??1CIpCache@@UAE@XZ PROC				; CIpCache::~CIpCache, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIpCache@@6B@

; 24   : 
; 25   : }

  00006	c3		 ret	 0
??1CIpCache@@UAE@XZ ENDP				; CIpCache::~CIpCache
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ??0CIpCache@@QAE@XZ
_TEXT	SEGMENT
??0CIpCache@@QAE@XZ PROC				; CIpCache::CIpCache, COMDAT
; _this$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIpCache@@6B@

; 18   : 	this->Init();	

  00009	e8 00 00 00 00	 call	 ?Init@CIpCache@@QAEXXZ	; CIpCache::Init

; 19   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CIpCache@@QAE@XZ ENDP				; CIpCache::CIpCache
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ?Init@CIpCache@@QAEXXZ
_TEXT	SEGMENT
?Init@CIpCache@@QAEXXZ PROC				; CIpCache::Init, COMDAT
; _this$ = ecx

; 31   : 	for (int n=0;n<MAX_IP_CACHE; n++)

  00000	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00003	b9 d0 07 00 00	 mov	 ecx, 2000		; 000007d0H
  00008	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@Init:

; 32   : 	{
; 33   : 		this->m_IpInfo[n].IpUsed = FALSE;

  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00016	8d 40 18	 lea	 eax, DWORD PTR [eax+24]
  00019	83 e9 01	 sub	 ecx, 1
  0001c	75 f2		 jne	 SHORT $LL4@Init

; 34   : 	}
; 35   : }

  0001e	c3		 ret	 0
?Init@CIpCache@@QAEXXZ ENDP				; CIpCache::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ?AddIp@CIpCache@@QAEHPAD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_ip$ = 8						; size = 4
?AddIp@CIpCache@@QAEHPAD@Z PROC				; CIpCache::AddIp, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b c1		 mov	 eax, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 39   : 	int n;	// Iterator
; 40   : 	int blank=-1;

  00009	83 cf ff	 or	 edi, -1
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 41   : 	
; 42   : 	for (n=0;n<MAX_IP_CACHE;n++)

  0000f	33 db		 xor	 ebx, ebx
  00011	8d 70 14	 lea	 esi, DWORD PTR [eax+20]
$LL4@AddIp:

; 43   : 	{
; 44   : 		if (this->m_IpInfo[n].IpUsed != FALSE)

  00014	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00017	74 6b		 je	 SHORT $LN5@AddIp

; 45   : 		{
; 46   : 			if (GetTickCount()>this->m_IpInfo[n].Time )

  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 53   : 				}
; 54   : 			}

  0001f	8b 55 08	 mov	 edx, DWORD PTR _ip$[ebp]
  00022	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00025	76 0e		 jbe	 SHORT $LN7@AddIp

; 47   : 			{
; 48   : 				this->m_IpInfo[n].IpUsed = FALSE;
; 49   : 
; 50   : 				if(blank < 0)

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0002d	85 ff		 test	 edi, edi
  0002f	79 5b		 jns	 SHORT $LN2@AddIp

; 51   : 				{
; 52   : 					blank = n;	// Set Array

  00031	8b fb		 mov	 edi, ebx

; 53   : 				}
; 54   : 			}

  00033	eb 57		 jmp	 SHORT $LN2@AddIp
$LN7@AddIp:

; 55   : 			else if (this->m_IpInfo[n].IpAddress[0]==ip[0])	// Faster reduce

  00035	8a 4e f0	 mov	 cl, BYTE PTR [esi-16]
  00038	8d 46 f0	 lea	 eax, DWORD PTR [esi-16]
  0003b	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0003d	75 4d		 jne	 SHORT $LN2@AddIp

; 56   : 			{
; 57   : 				if (this->m_IpInfo[n].IpAddress[4]==ip[4])	// Faster Reduce

  0003f	8a 4e f4	 mov	 cl, BYTE PTR [esi-12]
  00042	3a 4a 04	 cmp	 cl, BYTE PTR [edx+4]
  00045	75 45		 jne	 SHORT $LN2@AddIp

; 58   : 				{
; 59   : 					if (!strcmp(this->m_IpInfo[n].IpAddress, ip))

  00047	8b ca		 mov	 ecx, edx
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL23@AddIp:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN24@AddIp
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN25@AddIp
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN24@AddIp
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL23@AddIp
$LN25@AddIp:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN26@AddIp
$LN24@AddIp:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN26@AddIp:
  00075	85 c0		 test	 eax, eax
  00077	75 10		 jne	 SHORT $LN28@AddIp
$LN14@AddIp:
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 83   : 	}
; 84   : 	else
; 85   : 	{
; 86   : 		return FALSE;

  0007b	33 c0		 xor	 eax, eax
  0007d	5b		 pop	 ebx

; 87   : 	}
; 88   : 
; 89   : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN5@AddIp:

; 60   : 					{
; 61   : 						return 0;
; 62   : 					}
; 63   : 				}
; 64   : 			}
; 65   : 		}
; 66   : 		else
; 67   : 		{
; 68   : 			if (blank < 0)

  00084	85 ff		 test	 edi, edi
  00086	0f 48 fb	 cmovs	 edi, ebx
$LN28@AddIp:
  00089	8b 55 08	 mov	 edx, DWORD PTR _ip$[ebp]
$LN2@AddIp:

; 41   : 	
; 42   : 	for (n=0;n<MAX_IP_CACHE;n++)

  0008c	43		 inc	 ebx
  0008d	83 c6 18	 add	 esi, 24			; 00000018H
  00090	81 fb d0 07 00
	00		 cmp	 ebx, 2000		; 000007d0H
  00096	0f 8c 78 ff ff
	ff		 jl	 $LL4@AddIp

; 69   : 			{
; 70   : 				blank = n;	// Set Array
; 71   : 			}
; 72   : 		}
; 73   : 	}
; 74   : 
; 75   : 	if (blank >= 0 )

  0009c	85 ff		 test	 edi, edi
  0009e	78 d9		 js	 SHORT $LN14@AddIp

; 76   : 	{
; 77   : 		strcpy_s(this->m_IpInfo[blank].IpAddress, sizeof(this->m_IpInfo[blank].IpAddress), ip);

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a3	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  000a6	52		 push	 edx
  000a7	6a 10		 push	 16			; 00000010H
  000a9	8d 34 c1	 lea	 esi, DWORD PTR [ecx+eax*8]
  000ac	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _strcpy_s
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 78   : 
; 79   : 		this->m_IpInfo[blank].IpUsed = TRUE;

  000b8	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1

; 80   : 		
; 81   : 		this->m_IpInfo[blank].Time = GetTickCount()+ 30000;		

  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000c5	05 30 75 00 00	 add	 eax, 30000		; 00007530H
  000ca	5f		 pop	 edi
  000cb	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 82   : 		return TRUE;

  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx

; 87   : 	}
; 88   : 
; 89   : }

  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
?AddIp@CIpCache@@QAEHPAD@Z ENDP				; CIpCache::AddIp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ?DelIp@CIpCache@@QAEXPAD@Z
_TEXT	SEGMENT
_ip$ = 8						; size = 4
?DelIp@CIpCache@@QAEXPAD@Z PROC				; CIpCache::DelIp, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 93   : 	for (int n=0; n<MAX_IP_CACHE;n++)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _ip$[ebp]
  00009	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000c	bb d0 07 00 00	 mov	 ebx, 2000		; 000007d0H
$LL4@DelIp:

; 94   : 	{
; 95   : 		if (this->m_IpInfo[n].IpUsed != FALSE )	// Check if it is used

  00011	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00015	74 45		 je	 SHORT $LN2@DelIp

; 96   : 		{
; 97   : 			if (this->m_IpInfo[n].IpAddress[0] == ip[0])	// Fastest Discart

  00017	8a 06		 mov	 al, BYTE PTR [esi]
  00019	3a 07		 cmp	 al, BYTE PTR [edi]
  0001b	75 3f		 jne	 SHORT $LN2@DelIp

; 98   : 			{
; 99   : 				if (this->m_IpInfo[n].IpAddress[4] == ip[4])	// Fastest Discard

  0001d	8a 46 04	 mov	 al, BYTE PTR [esi+4]
  00020	3a 47 04	 cmp	 al, BYTE PTR [edi+4]
  00023	75 37		 jne	 SHORT $LN2@DelIp

; 100  : 				{
; 101  : 					if (!strcmp(this->m_IpInfo[n].IpAddress , ip))	// Full Discard

  00025	8b c7		 mov	 eax, edi
  00027	8b ce		 mov	 ecx, esi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL14@DelIp:
  00030	8a 11		 mov	 dl, BYTE PTR [ecx]
  00032	3a 10		 cmp	 dl, BYTE PTR [eax]
  00034	75 1a		 jne	 SHORT $LN15@DelIp
  00036	84 d2		 test	 dl, dl
  00038	74 12		 je	 SHORT $LN16@DelIp
  0003a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0003d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00040	75 0e		 jne	 SHORT $LN15@DelIp
  00042	83 c1 02	 add	 ecx, 2
  00045	83 c0 02	 add	 eax, 2
  00048	84 d2		 test	 dl, dl
  0004a	75 e4		 jne	 SHORT $LL14@DelIp
$LN16@DelIp:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 05		 jmp	 SHORT $LN17@DelIp
$LN15@DelIp:
  00050	1b c0		 sbb	 eax, eax
  00052	83 c8 01	 or	 eax, 1
$LN17@DelIp:
  00055	85 c0		 test	 eax, eax
  00057	75 03		 jne	 SHORT $LN2@DelIp

; 102  : 					{
; 103  : 						this->m_IpInfo[n].IpUsed = FALSE;	// Ip- Disconnected

  00059	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN2@DelIp:

; 93   : 	for (int n=0; n<MAX_IP_CACHE;n++)

  0005c	83 c6 18	 add	 esi, 24			; 00000018H
  0005f	83 eb 01	 sub	 ebx, 1
  00062	75 ad		 jne	 SHORT $LL4@DelIp
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 104  : 					}
; 105  : 				}
; 106  : 			}
; 107  : 		}
; 108  : 	}	// Iterator
; 109  : }

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?DelIp@CIpCache@@QAEXPAD@Z ENDP				; CIpCache::DelIp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\ipcache.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 110  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
