; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\zzzmathlib.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?VectorRotate@@YAXQBM0QAM@Z			; VectorRotate
PUBLIC	?AngleMatrix@@YAXPBMPAY03M@Z			; AngleMatrix
PUBLIC	?VectorLength@@YAMQAM@Z				; VectorLength
PUBLIC	?VectorCompare@@YAHQAM0@Z			; VectorCompare
PUBLIC	?Q_rint@@YAMM@Z					; Q_rint
PUBLIC	?VectorMA@@YAXQAMM00@Z				; VectorMA
PUBLIC	?CrossProduct@@YAXQAM00@Z			; CrossProduct
PUBLIC	?_DotProduct@@YAMQAM0@Z				; _DotProduct
PUBLIC	?_VectorSubtract@@YAXQAM00@Z			; _VectorSubtract
PUBLIC	?_VectorAdd@@YAXQAM00@Z				; _VectorAdd
PUBLIC	?_VectorCopy@@YAXQAM0@Z				; _VectorCopy
PUBLIC	?VectorScale@@YAXQAMM0@Z			; VectorScale
PUBLIC	?VectorNormalize@@YAMQAM@Z			; VectorNormalize
PUBLIC	?VectorInverse@@YAXQAM@Z			; VectorInverse
PUBLIC	?ClearBounds@@YAXQAM0@Z				; ClearBounds
PUBLIC	?AddPointToBounds@@YAXQAM00@Z			; AddPointToBounds
PUBLIC	?AngleIMatrix@@YAXQBMQAY03M@Z			; AngleIMatrix
PUBLIC	?R_ConcatTransforms@@YAXQBM0QAM@Z		; R_ConcatTransforms
PUBLIC	?VectorIRotate@@YAXQBM0QAM@Z			; VectorIRotate
PUBLIC	?VectorTranslate@@YAXQBM0QAM@Z			; VectorTranslate
PUBLIC	?VectorTransform@@YAXQBM0QAM@Z			; VectorTransform
PUBLIC	?AngleQuaternion@@YAXQBMPAM@Z			; AngleQuaternion
PUBLIC	?QuaternionMatrix@@YAXPBMPAY03M@Z		; QuaternionMatrix
PUBLIC	?QuaternionSlerp@@YAXPBMPAMM1@Z			; QuaternionSlerp
PUBLIC	?FaceNormalize@@YAXPAM000@Z			; FaceNormalize
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40490fdb
PUBLIC	__real@bf800000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_floor:PROC
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?FaceNormalize@@YAXPAM000@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
_Normal$ = 20						; size = 4
?FaceNormalize@@YAXPAM000@Z PROC			; FaceNormalize, COMDAT

; 367  : 	float nx = ( v2[1] - v1[1] ) * ( v3[2] - v1[2] ) - ( v3[1] - v1[1] ) * ( v2[2] - v1[2] );
; 368  : 	float ny = ( v2[1] - v1[1] ) * ( v3[2] - v1[2] ) - ( v3[1] - v1[1] ) * ( v2[2] - v1[2] );
; 369  : 	float nz = ( v2[1] - v1[1] ) * ( v3[2] - v1[2] ) - ( v3[1] - v1[1] ) * ( v2[2] - v1[2] );
; 370  : 	double dot = sqrt( nx * nx + ny * ny + nz * nz );
; 371  : }

  00000	c3		 ret	 0
?FaceNormalize@@YAXPAM000@Z ENDP			; FaceNormalize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?QuaternionSlerp@@YAXPBMPAMM1@Z
_TEXT	SEGMENT
tv1328 = -16						; size = 4
tv1329 = -12						; size = 4
_sclp$1$ = -8						; size = 4
tv1360 = -4						; size = 4
_sinom$1$ = -4						; size = 4
_p$ = 8							; size = 4
_sclp$2$ = 12						; size = 4
_omega$1$ = 12						; size = 4
_b$1$ = 12						; size = 4
_a$1$ = 12						; size = 4
_q$ = 12						; size = 4
_t$ = 16						; size = 4
_qt$ = 20						; size = 4
?QuaternionSlerp@@YAXPBMPAMM1@Z PROC			; QuaternionSlerp, COMDAT

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 302  : 	int i;
; 303  : 	float omega;
; 304  : 	float cosom;
; 305  : 	float sinom;
; 306  : 	float sclp;
; 307  : 	float sclq;
; 308  : 	float a=0;
; 309  : 	float b=0;
; 310  : 
; 311  : 	for ( i=0;i<4;i++)
; 312  : 	{
; 313  : 		a += ( p[i] - q[i] ) * ( p[i] - q[i] );

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00009	57		 push	 edi
  0000a	8b 7d 0c	 mov	 edi, DWORD PTR _q$[ebp]
  0000d	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00011	f3 0f 10 79 04	 movss	 xmm7, DWORD PTR [ecx+4]
  00016	f3 0f 5c 17	 subss	 xmm2, DWORD PTR [edi]
  0001a	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001f	0f 28 df	 movaps	 xmm3, xmm7
  00022	f3 0f 5c 5f 04	 subss	 xmm3, DWORD PTR [edi+4]
  00027	f3 0f 5c 4f 08	 subss	 xmm1, DWORD PTR [edi+8]
  0002c	f3 0f 10 77 0c	 movss	 xmm6, DWORD PTR [edi+12]
  00031	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00036	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0003a	f3 0f 5c c6	 subss	 xmm0, xmm6
  0003e	f3 0f 11 7d fc	 movss	 DWORD PTR tv1360[ebp], xmm7
  00043	f3 0f 59 db	 mulss	 xmm3, xmm3
  00047	f3 0f 11 55 0c	 movss	 DWORD PTR _a$1$[ebp], xmm2
  0004c	0f 57 d2	 xorps	 xmm2, xmm2
  0004f	f3 0f 10 7d 0c	 movss	 xmm7, DWORD PTR _a$1$[ebp]
  00054	f3 0f 58 fa	 addss	 xmm7, xmm2
  00058	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0005c	f3 0f 59 c0	 mulss	 xmm0, xmm0

; 314  : 		b += ( p[i] + q[i] ) * ( p[i] + q[i] );

  00060	f3 0f 58 71 0c	 addss	 xmm6, DWORD PTR [ecx+12]
  00065	f3 0f 58 fb	 addss	 xmm7, xmm3
  00069	f3 0f 59 f6	 mulss	 xmm6, xmm6
  0006d	0f 28 df	 movaps	 xmm3, xmm7
  00070	f3 0f 58 d9	 addss	 xmm3, xmm1
  00074	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
  00079	f3 0f 58 4d fc	 addss	 xmm1, DWORD PTR tv1360[ebp]
  0007e	f3 0f 58 d8	 addss	 xmm3, xmm0
  00082	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00086	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0008a	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0008e	f3 0f 11 45 0c	 movss	 DWORD PTR _b$1$[ebp], xmm0
  00093	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _b$1$[ebp]
  00098	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  0009d	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  000a2	f3 0f 59 e4	 mulss	 xmm4, xmm4
  000a6	f3 0f 58 e2	 addss	 xmm4, xmm2
  000aa	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ae	f3 0f 58 e1	 addss	 xmm4, xmm1
  000b2	f3 0f 58 e0	 addss	 xmm4, xmm0
  000b6	f3 0f 58 e6	 addss	 xmm4, xmm6

; 315  : 	}
; 316  : 
; 317  : 	if ( a > b )

  000ba	0f 28 35 00 00
	00 00		 movaps	 xmm6, XMMWORD PTR __xmm@80000000800000008000000080000000
  000c1	0f 2f dc	 comiss	 xmm3, xmm4
  000c4	76 0a		 jbe	 SHORT $LC74@Quaternion

; 318  : 	{
; 319  : 		for ( i=0;i<4;i++)
; 320  : 		{
; 321  : 			q[i] = -q[i];

  000c6	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  000c9	0f 57 c6	 xorps	 xmm0, xmm6
  000cc	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  000cf	90		 npad	 1
$LC74@Quaternion:

; 322  : 		}
; 323  : 	}
; 324  : 
; 325  : 	cosom = p[0] * q[0] + p[1] * q[1] + p[2] * q[2] + p[3] * q[3];

  000d0	f3 0f 10 27	 movss	 xmm4, DWORD PTR [edi]
  000d4	f3 0f 10 51 04	 movss	 xmm2, DWORD PTR [ecx+4]
  000d9	0f 28 dc	 movaps	 xmm3, xmm4
  000dc	f3 0f 10 29	 movss	 xmm5, DWORD PTR [ecx]
  000e0	0f 28 c2	 movaps	 xmm0, xmm2
  000e3	f3 0f 59 47 04	 mulss	 xmm0, DWORD PTR [edi+4]
  000e8	f3 0f 59 dd	 mulss	 xmm3, xmm5
  000ec	f3 0f 11 6d f0	 movss	 DWORD PTR tv1328[ebp], xmm5
  000f1	f3 0f 11 65 f4	 movss	 DWORD PTR tv1329[ebp], xmm4
  000f6	f3 0f 58 d8	 addss	 xmm3, xmm0
  000fa	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  000ff	f3 0f 59 47 08	 mulss	 xmm0, DWORD PTR [edi+8]
  00104	f3 0f 58 d8	 addss	 xmm3, xmm0
  00108	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0010d	f3 0f 59 47 0c	 mulss	 xmm0, DWORD PTR [edi+12]
  00112	f3 0f 58 d8	 addss	 xmm3, xmm0

; 326  : 
; 327  : 	if ( ( (double)1 + cosom) > 1 )

  00116	0f 5a cb	 cvtps2pd xmm1, xmm3
  00119	f2 0f 58 0d 00
	00 00 00	 addsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00121	66 0f 2f 0d 00
	00 00 00	 comisd	 xmm1, QWORD PTR __real@3ff0000000000000
  00129	0f 86 06 01 00
	00		 jbe	 $LN15@Quaternion

; 328  : 	{
; 329  : 		if ( (1 - cosom ) > -1 )

  0012f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00137	0f 28 c2	 movaps	 xmm0, xmm2
  0013a	f3 0f 5c c3	 subss	 xmm0, xmm3
  0013e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@bf800000
  00145	76 7d		 jbe	 SHORT $LN17@Quaternion
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 610  :         return (float)acos(_X);

  00147	0f 5a c3	 cvtps2pd xmm0, xmm3
  0014a	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  0014f	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00153	f3 0f 11 45 0c	 movss	 DWORD PTR _omega$1$[ebp], xmm0

; 736  :         return (float)sin(_X);

  00158	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0015c	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00161	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00165	f3 0f 11 45 fc	 movss	 DWORD PTR _sinom$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 333  : 			sclp = sin((1 - t) * omega) / sinom;

  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00172	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _t$[ebp]
  00177	f3 0f 59 45 0c	 mulss	 xmm0, DWORD PTR _omega$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0017c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0017f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00184	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 333  : 			sclp = sin((1 - t) * omega) / sinom;

  00188	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _sinom$1$[ebp]
  0018d	f3 0f 11 45 f8	 movss	 DWORD PTR _sclp$1$[ebp], xmm0

; 334  : 			sclq = sin(t * omega) / sinom;

  00192	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _omega$1$[ebp]
  00197	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _t$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0019c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0019f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 336  : 		else

  001a4	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _sclp$1$[ebp]
  001a9	0f 57 db	 xorps	 xmm3, xmm3
  001ac	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR tv1329[ebp]
  001b1	f3 0f 10 6d f0	 movss	 xmm5, DWORD PTR tv1328[ebp]
  001b6	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  001b9	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 334  : 			sclq = sin(t * omega) / sinom;

  001bd	f3 0f 5e 5d fc	 divss	 xmm3, DWORD PTR _sinom$1$[ebp]

; 336  : 		else

  001c2	eb 09		 jmp	 SHORT $LN18@Quaternion
$LN17@Quaternion:

; 337  : 		{
; 338  : 			sclp = 1 - t;

  001c4	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _t$[ebp]
  001c9	f3 0f 5c d3	 subss	 xmm2, xmm3
$LN18@Quaternion:

; 339  : 			sclq = t;
; 340  : 		}
; 341  : 
; 342  : 		for ( i=0;i<4;i++)
; 343  : 		{
; 344  : 			qt[i] = sclp * p[i] + sclq * q[i];

  001cd	8b 45 14	 mov	 eax, DWORD PTR _qt$[ebp]
  001d0	0f 28 c3	 movaps	 xmm0, xmm3
  001d3	f3 0f 59 e3	 mulss	 xmm4, xmm3
  001d7	f3 0f 59 ea	 mulss	 xmm5, xmm2
  001db	f3 0f 58 e5	 addss	 xmm4, xmm5
  001df	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  001e3	f3 0f 59 47 04	 mulss	 xmm0, DWORD PTR [edi+4]
  001e8	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  001ed	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001f1	f3 0f 58 c8	 addss	 xmm1, xmm0
  001f5	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  001fa	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  001ff	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00204	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00208	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0020c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00210	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
  00215	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  0021a	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  0021f	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00223	5f		 pop	 edi
  00224	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00228	f3 0f 58 c8	 addss	 xmm1, xmm0
  0022c	f3 0f 11 48 0c	 movss	 DWORD PTR [eax+12], xmm1

; 359  : 		}
; 360  : 	}
; 361  : }

  00231	8b e5		 mov	 esp, ebp
  00233	5d		 pop	 ebp
  00234	c3		 ret	 0
$LN15@Quaternion:
  00235	56		 push	 esi

; 345  : 		}
; 346  : 	}
; 347  : 	else
; 348  : 	{
; 349  : 		qt[0] = -p[1];

  00236	8b 75 14	 mov	 esi, DWORD PTR _qt$[ebp]
  00239	0f 57 d6	 xorps	 xmm2, xmm6
  0023c	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2

; 350  : 		qt[1] = p[0];

  00240	8b 01		 mov	 eax, DWORD PTR [ecx]
  00242	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 351  : 		qt[2] = -p[3];

  00245	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0024a	0f 57 c6	 xorps	 xmm0, xmm6
  0024d	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0

; 352  : 		qt[3] = p[2];
; 353  : 		sclp = sin(( 1.0f - t ) * 0.5f * M_PI);

  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0025a	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _t$[ebp]
  0025f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00262	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00265	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0026d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  00275	0f 5a c0	 cvtps2pd xmm0, xmm0
  00278	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  0027d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00281	f3 0f 11 45 0c	 movss	 DWORD PTR _sclp$2$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 354  : 		sclq = sin( t * 0.5f * M_PI );

  00286	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _t$[ebp]
  0028b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00293	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40490fdb
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0029b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0029e	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 358  : 			qt[i] = sclp * p[i] + sclq * q[i];

  002a3	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  002a6	0f 57 d2	 xorps	 xmm2, xmm2
  002a9	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sclp$2$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  002ae	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 358  : 			qt[i] = sclp * p[i] + sclq * q[i];

  002b2	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  002b6	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  002ba	f3 0f 59 cb	 mulss	 xmm1, xmm3
  002be	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002c2	f3 0f 58 c8	 addss	 xmm1, xmm0
  002c6	0f 28 c2	 movaps	 xmm0, xmm2
  002c9	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  002cd	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  002d2	f3 0f 59 47 04	 mulss	 xmm0, DWORD PTR [edi+4]
  002d7	f3 0f 59 cb	 mulss	 xmm1, xmm3
  002db	f3 0f 58 c8	 addss	 xmm1, xmm0
  002df	f3 0f 11 4e 04	 movss	 DWORD PTR [esi+4], xmm1
  002e4	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  002e9	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  002ee	f3 0f 59 cb	 mulss	 xmm1, xmm3
  002f2	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002f6	f3 0f 58 c8	 addss	 xmm1, xmm0
  002fa	f3 0f 11 4e 08	 movss	 DWORD PTR [esi+8], xmm1
  002ff	5e		 pop	 esi
  00300	5f		 pop	 edi

; 359  : 		}
; 360  : 	}
; 361  : }

  00301	8b e5		 mov	 esp, ebp
  00303	5d		 pop	 ebp
  00304	c3		 ret	 0
?QuaternionSlerp@@YAXPBMPAMM1@Z ENDP			; QuaternionSlerp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?QuaternionMatrix@@YAXPBMPAY03M@Z
_TEXT	SEGMENT
_quaternion$ = 8					; size = 4
_matrix$ = 12						; size = 4
?QuaternionMatrix@@YAXPBMPAY03M@Z PROC			; QuaternionMatrix, COMDAT

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 282  : 	matrix[0][0]	= 1.0f - ( quaternion[1] * 2 * quaternion[1] ) - ( quaternion[2] * 2 * quaternion[2] );

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _quaternion$[ebp]
  00006	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@40000000
  0000e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f800000
  00016	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  00019	0f 28 cc	 movaps	 xmm1, xmm4
  0001c	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00021	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00025	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0002a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0002e	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00033	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00037	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0003c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00040	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 283  : 	matrix[1][0]	=       ( quaternion[0] * 2 * quaternion[1] ) + ( quaternion[3] * 2 * quaternion[2] );

  00044	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00049	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0004d	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00051	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00055	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0005a	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  0005f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00063	f3 0f 11 48 10	 movss	 DWORD PTR [eax+16], xmm1

; 284  : 	matrix[2][0]	=       ( quaternion[0] * 2 * quaternion[2] ) - ( quaternion[3] * 2 * quaternion[1] );

  00068	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0006c	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00071	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00075	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00079	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  0007e	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  00083	f3 0f 5c c8	 subss	 xmm1, xmm0
  00087	f3 0f 11 48 20	 movss	 DWORD PTR [eax+32], xmm1

; 285  : 
; 286  : 	matrix[0][1]	=       ( quaternion[0] * 2 * quaternion[1] ) - ( quaternion[3] * 2 * quaternion[2] );

  0008c	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00090	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00095	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00099	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0009d	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  000a2	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  000a7	f3 0f 5c c8	 subss	 xmm1, xmm0
  000ab	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 287  : 	matrix[1][1]	= 1.0f - ( quaternion[0] * 2 * quaternion[0] ) - ( quaternion[2] * 2 * quaternion[2] );

  000b0	0f 28 cc	 movaps	 xmm1, xmm4
  000b3	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000b7	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000bb	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  000bf	f3 0f 5c c8	 subss	 xmm1, xmm0
  000c3	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  000c8	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000cc	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  000d1	f3 0f 5c c8	 subss	 xmm1, xmm0
  000d5	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1

; 288  : 	matrix[2][1]	=       ( quaternion[1] * 2 * quaternion[2] ) + ( quaternion[3] * 2 * quaternion[0] );

  000da	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  000df	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  000e4	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000e8	f3 0f 59 cb	 mulss	 xmm1, xmm3
  000ec	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  000f1	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [ecx]
  000f5	f3 0f 58 c8	 addss	 xmm1, xmm0
  000f9	f3 0f 11 48 24	 movss	 DWORD PTR [eax+36], xmm1

; 289  : 
; 290  : 	matrix[0][2]	=       ( quaternion[0] * 2 * quaternion[2] ) + ( quaternion[3] * 2 * quaternion[1] );

  000fe	f3 0f 10 49 0c	 movss	 xmm1, DWORD PTR [ecx+12]
  00103	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00107	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0010b	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0010f	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00114	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00119	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011d	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 291  : 	matrix[1][2]	=       ( quaternion[1] * 2 * quaternion[2] ) - ( quaternion[3] * 2 * quaternion[0] );

  00122	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00127	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  0012c	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00130	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00134	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00138	f3 0f 59 49 08	 mulss	 xmm1, DWORD PTR [ecx+8]
  0013d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00141	f3 0f 11 48 18	 movss	 DWORD PTR [eax+24], xmm1

; 292  : 	matrix[2][2]	= 1.0f - ( quaternion[0] * 2 * quaternion[0] ) - ( quaternion[1] * 2 * quaternion[1] );

  00146	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0014a	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0014e	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00152	f3 0f 5c e0	 subss	 xmm4, xmm0
  00156	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0015b	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0015f	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  00164	f3 0f 5c e0	 subss	 xmm4, xmm0
  00168	f3 0f 11 60 28	 movss	 DWORD PTR [eax+40], xmm4

; 293  : }

  0016d	5d		 pop	 ebp
  0016e	c3		 ret	 0
?QuaternionMatrix@@YAXPBMPAY03M@Z ENDP			; QuaternionMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?AngleQuaternion@@YAXQBMPAM@Z
_TEXT	SEGMENT
_sp$1$ = -20						; size = 4
_cp$1$ = -16						; size = 4
_sr$1$ = -12						; size = 4
_angle$3$ = -8						; size = 4
_angle$2$ = -8						; size = 4
_sy$1$ = -4						; size = 4
_cy$1$ = 8						; size = 4
_angle$1$ = 8						; size = 4
_angles$ = 8						; size = 4
_quaternion$ = 12					; size = 4
?AngleQuaternion@@YAXQBMPAM@Z PROC			; AngleQuaternion, COMDAT

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 257  : 	float angle;
; 258  : 	float sr, sp, sy, cr, cp, cy;
; 259  : 
; 260  : 	angle	= angles[2] * 0.5f;

  00007	8b 75 08	 mov	 esi, DWORD PTR _angles$[ebp]
  0000a	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0000f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00017	f3 0f 11 45 08	 movss	 DWORD PTR _angle$1$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00024	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00028	f3 0f 11 45 fc	 movss	 DWORD PTR _sy$1$[ebp], xmm0
  0002d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _angle$1$[ebp]

; 635  :         return (float)cos(_X);

  00032	0f 5a c0	 cvtps2pd xmm0, xmm0
  00035	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0003a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0003e	f3 0f 11 45 08	 movss	 DWORD PTR _cy$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 264  : 	angle			= angles[1] * 0.5f;

  00043	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00048	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00050	f3 0f 11 45 f8	 movss	 DWORD PTR _angle$2$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  00055	0f 5a c0	 cvtps2pd xmm0, xmm0
  00058	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  0005d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00061	f3 0f 11 45 ec	 movss	 DWORD PTR _sp$1$[ebp], xmm0
  00066	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$2$[ebp]

; 635  :         return (float)cos(_X);

  0006b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006e	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00073	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00077	f3 0f 11 45 f0	 movss	 DWORD PTR _cp$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 268  : 	angle			= angles[0] * 0.5f;

  0007c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00080	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00088	f3 0f 11 45 f8	 movss	 DWORD PTR _angle$3$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0008d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00090	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 f4	 movss	 DWORD PTR _sr$1$[ebp], xmm0
  0009e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _angle$3$[ebp]

; 635  :         return (float)cos(_X);

  000a3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a6	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 272  : 	quaternion[0]	= sr * cp * cy - cr * sp * sy;

  000ab	f3 0f 10 75 f4	 movss	 xmm6, DWORD PTR _sr$1$[ebp]
  000b0	0f 57 e4	 xorps	 xmm4, xmm4
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _quaternion$[ebp]
  000b6	0f 28 de	 movaps	 xmm3, xmm6
  000b9	f3 0f 59 5d f0	 mulss	 xmm3, DWORD PTR _cp$1$[ebp]
  000be	5e		 pop	 esi

; 274  : 	quaternion[2]	= cr * cp * sy - sr * sp * cy;

  000bf	f3 0f 59 75 ec	 mulss	 xmm6, DWORD PTR _sp$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 635  :         return (float)cos(_X);

  000c4	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 272  : 	quaternion[0]	= sr * cp * cy - cr * sp * sy;

  000c8	0f 28 cb	 movaps	 xmm1, xmm3

; 273  : 	quaternion[1]	= cr * sp * cy + sr * cp * sy;

  000cb	f3 0f 59 5d fc	 mulss	 xmm3, DWORD PTR _sy$1$[ebp]
  000d0	f3 0f 59 4d 08	 mulss	 xmm1, DWORD PTR _cy$1$[ebp]
  000d5	0f 28 d4	 movaps	 xmm2, xmm4
  000d8	f3 0f 59 55 ec	 mulss	 xmm2, DWORD PTR _sp$1$[ebp]

; 274  : 	quaternion[2]	= cr * cp * sy - sr * sp * cy;

  000dd	f3 0f 59 65 f0	 mulss	 xmm4, DWORD PTR _cp$1$[ebp]
  000e2	0f 28 c2	 movaps	 xmm0, xmm2
  000e5	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _cy$1$[ebp]
  000ea	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  000ef	f3 0f 58 d3	 addss	 xmm2, xmm3
  000f3	f3 0f 5c c8	 subss	 xmm1, xmm0
  000f7	0f 28 c6	 movaps	 xmm0, xmm6
  000fa	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _cy$1$[ebp]

; 275  : 	quaternion[3]	= cr * cp * cy + sr * sp * sy;

  000ff	f3 0f 59 75 fc	 mulss	 xmm6, DWORD PTR _sy$1$[ebp]
  00104	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  00108	0f 28 cc	 movaps	 xmm1, xmm4
  0010b	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR _sy$1$[ebp]
  00110	f3 0f 59 65 08	 mulss	 xmm4, DWORD PTR _cy$1$[ebp]
  00115	f3 0f 5c c8	 subss	 xmm1, xmm0
  00119	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  0011e	f3 0f 58 f4	 addss	 xmm6, xmm4
  00122	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
  00127	f3 0f 11 70 0c	 movss	 DWORD PTR [eax+12], xmm6

; 276  : }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
?AngleQuaternion@@YAXQBMPAM@Z ENDP			; AngleQuaternion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorTransform@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorTransform@@YAXQBM0QAM@Z PROC			; VectorTransform, COMDAT

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 245  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[0*4+1] + in1[0*4+2] * in2[0*4+2] + in2[0*4+3];

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00011	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  00016	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0001a	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0001e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00022	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00027	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0002c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00030	f3 0f 58 49 0c	 addss	 xmm1, DWORD PTR [ecx+12]
  00035	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 246  : 	out[0*4+1] = in1[0*4+0] * in2[1*4+0] + in1[0*4+1] * in2[1*4+1] + in1[0*4+2] * in2[1*4+2] + in2[1*4+3];

  00039	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  0003e	f3 0f 59 0a	 mulss	 xmm1, DWORD PTR [edx]
  00042	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00047	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0004c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00050	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00055	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0005a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0005e	f3 0f 58 49 1c	 addss	 xmm1, DWORD PTR [ecx+28]
  00063	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 247  : 	out[0*4+2] = in1[0*4+0] * in2[2*4+0] + in1[0*4+1] * in2[2*4+1] + in1[0*4+2] * in2[2*4+2] + in2[2*4+3];

  00068	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  0006d	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00072	f3 0f 59 0a	 mulss	 xmm1, DWORD PTR [edx]
  00076	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0007b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0007f	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00084	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  00089	f3 0f 58 c8	 addss	 xmm1, xmm0
  0008d	f3 0f 58 49 2c	 addss	 xmm1, DWORD PTR [ecx+44]
  00092	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 248  : }

  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?VectorTransform@@YAXQBM0QAM@Z ENDP			; VectorTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorTranslate@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorTranslate@@YAXQBM0QAM@Z PROC			; VectorTranslate, COMDAT

; 235  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 236  : 	out[0*4+0] = in1[0*4+0] + in2[0*4+3];

  00003	8b 55 0c	 mov	 edx, DWORD PTR _in2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _in1$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 42 0c	 movss	 xmm0, DWORD PTR [edx+12]
  00011	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00015	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 237  : 	out[0*4+1] = in1[0*4+1] + in2[1*4+3];

  00019	f3 0f 10 42 1c	 movss	 xmm0, DWORD PTR [edx+28]
  0001e	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00023	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 238  : 	out[0*4+2] = in1[0*4+2] + in2[2*4+3];

  00028	f3 0f 10 42 2c	 movss	 xmm0, DWORD PTR [edx+44]
  0002d	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00032	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 239  : }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?VectorTranslate@@YAXQBM0QAM@Z ENDP			; VectorTranslate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorIRotate@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorIRotate@@YAXQBM0QAM@Z PROC			; VectorIRotate, COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[0*4+4] + in1[0*4+2] * in2[0*4+8];

  00003	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00010	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00014	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00019	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  0001e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00022	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00027	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0002c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00030	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 228  : 	out[0*4+1] = in1[0*4+0] * in2[0*4+1] + in1[0*4+1] * in2[0*4+5] + in1[0*4+2] * in2[0*4+9];

  00034	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00039	f3 0f 59 0a	 mulss	 xmm1, DWORD PTR [edx]
  0003d	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00042	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00047	f3 0f 58 c8	 addss	 xmm1, xmm0
  0004b	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  00050	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  00055	f3 0f 58 c8	 addss	 xmm1, xmm0
  00059	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 229  : 	out[0*4+2] = in1[0*4+0] * in2[0*4+2] + in1[0*4+1] * in2[0*4+6] + in1[0*4+2] * in2[0*4+10];

  0005e	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00063	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  00068	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0006d	f3 0f 59 0a	 mulss	 xmm1, DWORD PTR [edx]
  00071	f3 0f 58 c8	 addss	 xmm1, xmm0
  00075	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  0007a	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0007f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00083	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 230  : }

  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?VectorIRotate@@YAXQBM0QAM@Z ENDP			; VectorIRotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?R_ConcatTransforms@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?R_ConcatTransforms@@YAXQBM0QAM@Z PROC			; R_ConcatTransforms, COMDAT

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 203  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[1*4+0] + in1[0*4+2] * in2[2*4+0];

  00003	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00010	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [ecx]
  00014	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00019	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0001e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00022	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00027	f3 0f 59 41 20	 mulss	 xmm0, DWORD PTR [ecx+32]
  0002c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00030	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 204  : 	out[0*4+1] = in1[0*4+0] * in2[0*4+1] + in1[0*4+1] * in2[1*4+1] + in1[0*4+2] * in2[2*4+1];

  00034	f3 0f 10 49 14	 movss	 xmm1, DWORD PTR [ecx+20]
  00039	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  0003e	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00043	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  00047	f3 0f 58 c8	 addss	 xmm1, xmm0
  0004b	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  00050	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  00055	f3 0f 58 c8	 addss	 xmm1, xmm0
  00059	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 205  : 	out[0*4+2] = in1[0*4+0] * in2[0*4+2] + in1[0*4+1] * in2[1*4+2] + in1[0*4+2] * in2[2*4+2];

  0005e	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00063	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  00068	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0006d	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  00071	f3 0f 58 c8	 addss	 xmm1, xmm0
  00075	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  0007a	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0007f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00083	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 206  : 	out[0*4+3] = in1[0*4+0] * in2[0*4+3] + in1[0*4+1] * in2[1*4+3] + in1[0*4+2] * in2[2*4+3] + in1[0*4+3];

  00088	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0008d	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  00092	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00097	f3 0f 59 02	 mulss	 xmm0, DWORD PTR [edx]
  0009b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0009f	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  000a4	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  000a9	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ad	f3 0f 58 4a 0c	 addss	 xmm1, DWORD PTR [edx+12]
  000b2	f3 0f 11 48 0c	 movss	 DWORD PTR [eax+12], xmm1

; 207  : 	out[1*4+0] = in1[1*4+0] * in2[0*4+0] + in1[1*4+1] * in2[1*4+0] + in1[1*4+2] * in2[2*4+0];

  000b7	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  000bc	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  000c1	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  000c6	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  000ca	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ce	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  000d3	f3 0f 59 41 20	 mulss	 xmm0, DWORD PTR [ecx+32]
  000d8	f3 0f 58 c8	 addss	 xmm1, xmm0
  000dc	f3 0f 11 48 10	 movss	 DWORD PTR [eax+16], xmm1

; 208  : 	out[1*4+1] = in1[1*4+0] * in2[0*4+1] + in1[1*4+1] * in2[1*4+1] + in1[1*4+2] * in2[2*4+1];

  000e1	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  000e6	f3 0f 59 49 14	 mulss	 xmm1, DWORD PTR [ecx+20]
  000eb	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  000f0	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  000f5	f3 0f 58 c8	 addss	 xmm1, xmm0
  000f9	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  000fe	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [ecx+36]
  00103	f3 0f 58 c8	 addss	 xmm1, xmm0
  00107	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1

; 209  : 	out[1*4+2] = in1[1*4+0] * in2[0*4+2] + in1[1*4+1] * in2[1*4+2] + in1[1*4+2] * in2[2*4+2];

  0010c	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  00111	f3 0f 59 49 18	 mulss	 xmm1, DWORD PTR [ecx+24]
  00116	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  0011b	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  00120	f3 0f 58 c8	 addss	 xmm1, xmm0
  00124	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  00129	f3 0f 59 41 28	 mulss	 xmm0, DWORD PTR [ecx+40]
  0012e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00132	f3 0f 11 48 18	 movss	 DWORD PTR [eax+24], xmm1

; 210  : 	out[1*4+3] = in1[1*4+0] * in2[0*4+3] + in1[1*4+1] * in2[1*4+3] + in1[1*4+2] * in2[2*4+3] + in1[1*4+3];

  00137	f3 0f 10 4a 14	 movss	 xmm1, DWORD PTR [edx+20]
  0013c	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  00141	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [edx+16]
  00146	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  0014b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0014f	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00154	f3 0f 59 42 18	 mulss	 xmm0, DWORD PTR [edx+24]
  00159	f3 0f 58 c8	 addss	 xmm1, xmm0
  0015d	f3 0f 58 4a 1c	 addss	 xmm1, DWORD PTR [edx+28]
  00162	f3 0f 11 48 1c	 movss	 DWORD PTR [eax+28], xmm1

; 211  : 	out[2*4+0] = in1[2*4+0] * in2[0*4+0] + in1[2*4+1] * in2[1*4+0] + in1[2*4+2] * in2[2*4+0];

  00167	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  0016c	f3 0f 10 42 20	 movss	 xmm0, DWORD PTR [edx+32]
  00171	f3 0f 59 49 10	 mulss	 xmm1, DWORD PTR [ecx+16]
  00176	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  0017a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0017e	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00183	f3 0f 59 42 28	 mulss	 xmm0, DWORD PTR [edx+40]
  00188	f3 0f 58 c8	 addss	 xmm1, xmm0
  0018c	f3 0f 11 48 20	 movss	 DWORD PTR [eax+32], xmm1

; 212  : 	out[2*4+1] = in1[2*4+0] * in2[0*4+1] + in1[2*4+1] * in2[1*4+1] + in1[2*4+2] * in2[2*4+1];

  00191	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  00196	f3 0f 59 49 14	 mulss	 xmm1, DWORD PTR [ecx+20]
  0019b	f3 0f 10 42 20	 movss	 xmm0, DWORD PTR [edx+32]
  001a0	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  001a5	f3 0f 58 c8	 addss	 xmm1, xmm0
  001a9	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  001ae	f3 0f 59 42 28	 mulss	 xmm0, DWORD PTR [edx+40]
  001b3	f3 0f 58 c8	 addss	 xmm1, xmm0
  001b7	f3 0f 11 48 24	 movss	 DWORD PTR [eax+36], xmm1

; 213  : 	out[2*4+2] = in1[2*4+0] * in2[0*4+2] + in1[2*4+1] * in2[1*4+2] + in1[2*4+2] * in2[2*4+2];

  001bc	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  001c1	f3 0f 59 49 18	 mulss	 xmm1, DWORD PTR [ecx+24]
  001c6	f3 0f 10 42 20	 movss	 xmm0, DWORD PTR [edx+32]
  001cb	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  001d0	f3 0f 58 c8	 addss	 xmm1, xmm0
  001d4	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  001d9	f3 0f 59 42 28	 mulss	 xmm0, DWORD PTR [edx+40]
  001de	f3 0f 58 c8	 addss	 xmm1, xmm0
  001e2	f3 0f 11 48 28	 movss	 DWORD PTR [eax+40], xmm1

; 214  : 	out[2*4+3] = in1[2*4+0] * in2[0*4+3] + in1[2*4+1] * in2[1*4+3] + in1[2*4+2] * in2[2*4+3] + in1[2*4+3];

  001e7	f3 0f 10 42 20	 movss	 xmm0, DWORD PTR [edx+32]
  001ec	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  001f1	f3 0f 59 49 1c	 mulss	 xmm1, DWORD PTR [ecx+28]
  001f6	f3 0f 59 41 0c	 mulss	 xmm0, DWORD PTR [ecx+12]
  001fb	f3 0f 58 c8	 addss	 xmm1, xmm0
  001ff	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00204	f3 0f 59 42 28	 mulss	 xmm0, DWORD PTR [edx+40]
  00209	f3 0f 58 c8	 addss	 xmm1, xmm0
  0020d	f3 0f 58 4a 2c	 addss	 xmm1, DWORD PTR [edx+44]
  00212	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1

; 215  : }

  00217	5d		 pop	 ebp
  00218	c3		 ret	 0
?R_ConcatTransforms@@YAXQBM0QAM@Z ENDP			; R_ConcatTransforms
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?AngleIMatrix@@YAXQBMQAY03M@Z
_TEXT	SEGMENT
_sr$1$ = -20						; size = 4
_sp$1$ = -16						; size = 4
_cy$1$ = -12						; size = 4
_cp$1$ = -8						; size = 4
_angle$3$ = -4						; size = 4
_angle$2$ = -4						; size = 4
_angle$1$ = -4						; size = 4
_sy$1$ = 8						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
?AngleIMatrix@@YAXQBMQAY03M@Z PROC			; AngleIMatrix, COMDAT

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 173  : 	float angle;
; 174  : 	float sr, sp, sy, cr, cp, cy;
; 175  : 	
; 176  : 	angle = angles[ROLL] * (float)(0.0174532925199432955f);

  00007	8b 75 08	 mov	 esi, DWORD PTR _angles$[ebp]
  0000a	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0000f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00017	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$1$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00024	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00028	f3 0f 11 45 08	 movss	 DWORD PTR _sy$1$[ebp], xmm0
  0002d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$1$[ebp]

; 635  :         return (float)cos(_X);

  00032	0f 5a c0	 cvtps2pd xmm0, xmm0
  00035	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0003a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0003e	f3 0f 11 45 f4	 movss	 DWORD PTR _cy$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 179  : 	angle = angles[YAW] * (float)(0.0174532925199432955f);

  00043	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00048	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00050	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$2$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  00055	0f 5a c0	 cvtps2pd xmm0, xmm0
  00058	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  0005d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00061	f3 0f 11 45 f0	 movss	 DWORD PTR _sp$1$[ebp], xmm0
  00066	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$2$[ebp]

; 635  :         return (float)cos(_X);

  0006b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006e	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00073	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00077	f3 0f 11 45 f8	 movss	 DWORD PTR _cp$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 182  : 	angle = angles[PITCH] * (float)(0.0174532925199432955f);	// M_PI*2 /360

  0007c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00080	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00088	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$3$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0008d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00090	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 ec	 movss	 DWORD PTR _sr$1$[ebp], xmm0
  0009e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$3$[ebp]

; 635  :         return (float)cos(_X);

  000a3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a6	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 187  : 	matrix[0][0] = cp*cy;

  000ab	f3 0f 10 75 f8	 movss	 xmm6, DWORD PTR _cp$1$[ebp]
  000b0	0f 57 db	 xorps	 xmm3, xmm3
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  000b6	f3 0f 10 7d f4	 movss	 xmm7, DWORD PTR _cy$1$[ebp]

; 188  : 	matrix[0][1] = cp*sy;
; 189  : 	matrix[0][2] = -sp;
; 190  : 	matrix[1][0] = sr*sp*cy+cr*-sy;

  000bb	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR _sr$1$[ebp]
  000c0	f3 0f 10 6d f0	 movss	 xmm5, DWORD PTR _sp$1$[ebp]
  000c5	0f 28 d4	 movaps	 xmm2, xmm4
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 635  :         return (float)cos(_X);

  000c8	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 187  : 	matrix[0][0] = cp*cy;

  000cc	0f 28 c6	 movaps	 xmm0, xmm6

; 188  : 	matrix[0][1] = cp*sy;
; 189  : 	matrix[0][2] = -sp;
; 190  : 	matrix[1][0] = sr*sp*cy+cr*-sy;

  000cf	f3 0f 59 d5	 mulss	 xmm2, xmm5
  000d3	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000d7	0f 28 ca	 movaps	 xmm1, xmm2

; 191  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  000da	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _sy$1$[ebp]
  000df	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000e3	0f 28 c6	 movaps	 xmm0, xmm6
  000e6	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  000eb	f3 0f 59 cf	 mulss	 xmm1, xmm7
  000ef	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  000f4	0f 28 c5	 movaps	 xmm0, xmm5
  000f7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fe	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  00103	0f 28 c3	 movaps	 xmm0, xmm3
  00106	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  0010b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0010f	0f 28 c3	 movaps	 xmm0, xmm3
  00112	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00116	f3 0f 58 d0	 addss	 xmm2, xmm0
  0011a	f3 0f 11 48 10	 movss	 DWORD PTR [eax+16], xmm1

; 192  : 	matrix[1][2] = sr*cp;

  0011f	0f 28 c4	 movaps	 xmm0, xmm4
  00122	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00126	f3 0f 11 50 14	 movss	 DWORD PTR [eax+20], xmm2

; 193  : 	matrix[2][0] = (cr*sp*cy+-sr*-sy);

  0012b	0f 28 d3	 movaps	 xmm2, xmm3
  0012e	f3 0f 59 d5	 mulss	 xmm2, xmm5
  00132	f3 0f 11 40 18	 movss	 DWORD PTR [eax+24], xmm0
  00137	0f 28 c4	 movaps	 xmm0, xmm4
  0013a	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  0013f	0f 28 ca	 movaps	 xmm1, xmm2

; 194  : 	matrix[2][1] = (cr*sp*sy+-sr*cy);

  00142	f3 0f 59 e7	 mulss	 xmm4, xmm7
  00146	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _sy$1$[ebp]
  0014b	f3 0f 59 cf	 mulss	 xmm1, xmm7
  0014f	f3 0f 5c d4	 subss	 xmm2, xmm4

; 195  : 	matrix[2][2] = cr*cp;

  00153	f3 0f 59 de	 mulss	 xmm3, xmm6
  00157	f3 0f 58 c8	 addss	 xmm1, xmm0
  0015b	f3 0f 11 50 24	 movss	 DWORD PTR [eax+36], xmm2
  00160	f3 0f 11 48 20	 movss	 DWORD PTR [eax+32], xmm1
  00165	f3 0f 11 58 28	 movss	 DWORD PTR [eax+40], xmm3

; 196  : 	matrix[0][3] = 0.0;

  0016a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 197  : 	matrix[1][3] = 0.0;

  00171	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 198  : 	matrix[2][3] = 0.0;

  00178	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  0017f	5e		 pop	 esi

; 199  : }

  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
?AngleIMatrix@@YAXQBMQAY03M@Z ENDP			; AngleIMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?AddPointToBounds@@YAXQAM00@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
?AddPointToBounds@@YAXQAM00@Z PROC			; AddPointToBounds, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 121  : 	int		i;
; 122  : 	vec_t	val;
; 123  : 
; 124  : 	for (i=0 ; i<3 ; i++)
; 125  : 	{
; 126  : 		val = v[i];

  00003	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]

; 127  : 		if (val < mins[i])

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _mins$[ebp]
  00009	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  0000d	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00011	0f 2f c1	 comiss	 xmm0, xmm1
  00014	76 04		 jbe	 SHORT $LN5@AddPointTo

; 128  : 			mins[i] = val;

  00016	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN5@AddPointTo:

; 129  : 		if (val > maxs[i])

  0001a	8b 45 10	 mov	 eax, DWORD PTR _maxs$[ebp]
  0001d	0f 2f 08	 comiss	 xmm1, DWORD PTR [eax]
  00020	76 04		 jbe	 SHORT $LN2@AddPointTo

; 130  : 			maxs[i] = val;

  00022	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
$LN2@AddPointTo:

; 121  : 	int		i;
; 122  : 	vec_t	val;
; 123  : 
; 124  : 	for (i=0 ; i<3 ; i++)
; 125  : 	{
; 126  : 		val = v[i];

  00026	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]

; 127  : 		if (val < mins[i])

  0002b	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00030	0f 2f c1	 comiss	 xmm0, xmm1
  00033	76 05		 jbe	 SHORT $LN16@AddPointTo

; 128  : 			mins[i] = val;

  00035	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1
$LN16@AddPointTo:

; 129  : 		if (val > maxs[i])

  0003a	0f 2f 48 04	 comiss	 xmm1, DWORD PTR [eax+4]
  0003e	76 05		 jbe	 SHORT $LN17@AddPointTo

; 130  : 			maxs[i] = val;

  00040	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
$LN17@AddPointTo:

; 121  : 	int		i;
; 122  : 	vec_t	val;
; 123  : 
; 124  : 	for (i=0 ; i<3 ; i++)
; 125  : 	{
; 126  : 		val = v[i];

  00045	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]

; 127  : 		if (val < mins[i])

  0004a	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0004f	0f 2f c1	 comiss	 xmm0, xmm1
  00052	76 05		 jbe	 SHORT $LN19@AddPointTo

; 128  : 			mins[i] = val;

  00054	f3 0f 11 49 08	 movss	 DWORD PTR [ecx+8], xmm1
$LN19@AddPointTo:

; 129  : 		if (val > maxs[i])

  00059	0f 2f 48 08	 comiss	 xmm1, DWORD PTR [eax+8]
  0005d	76 05		 jbe	 SHORT $LN20@AddPointTo

; 130  : 			maxs[i] = val;

  0005f	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
$LN20@AddPointTo:

; 131  : 	}
; 132  : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?AddPointToBounds@@YAXQAM00@Z ENDP			; AddPointToBounds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?ClearBounds@@YAXQAM0@Z
_TEXT	SEGMENT
_mins$ = 8						; size = 4
_maxs$ = 12						; size = 4
?ClearBounds@@YAXQAM0@Z PROC				; ClearBounds, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  : 	mins[0] = mins[1] = mins[2] = 99999;

  00003	8b 45 08	 mov	 eax, DWORD PTR _mins$[ebp]
  00006	c7 40 08 80 4f
	c3 47		 mov	 DWORD PTR [eax+8], 1203982208 ; 47c34f80H
  0000d	c7 40 04 80 4f
	c3 47		 mov	 DWORD PTR [eax+4], 1203982208 ; 47c34f80H
  00014	c7 00 80 4f c3
	47		 mov	 DWORD PTR [eax], 1203982208 ; 47c34f80H

; 114  : 	maxs[0] = maxs[1] = maxs[2] = -99999;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _maxs$[ebp]
  0001d	c7 40 08 80 4f
	c3 c7		 mov	 DWORD PTR [eax+8], -943501440 ; c7c34f80H
  00024	c7 40 04 80 4f
	c3 c7		 mov	 DWORD PTR [eax+4], -943501440 ; c7c34f80H
  0002b	c7 00 80 4f c3
	c7		 mov	 DWORD PTR [eax], -943501440 ; c7c34f80H

; 115  : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?ClearBounds@@YAXQAM0@Z ENDP				; ClearBounds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorInverse@@YAXQAM@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
?VectorInverse@@YAXQAM@Z PROC				; VectorInverse, COMDAT

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 106  : 	v[0] = -v[0];

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0000e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00012	0f 57 c1	 xorps	 xmm0, xmm1
  00015	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 107  : 	v[1] = -v[1];

  00019	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0001e	0f 57 c1	 xorps	 xmm0, xmm1
  00021	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 108  : 	v[2] = -v[2];

  00026	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0002b	0f 57 c1	 xorps	 xmm0, xmm1
  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 109  : }

  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?VectorInverse@@YAXQAM@Z ENDP				; VectorInverse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorNormalize@@YAMQAM@Z
_TEXT	SEGMENT
tv366 = -16						; size = 4
tv367 = -12						; size = 4
tv368 = -8						; size = 4
_length$ = -4						; size = 4
_v$ = 8							; size = 4
?VectorNormalize@@YAMQAM@Z PROC				; VectorNormalize, COMDAT

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	56		 push	 esi

; 84   : 	int		i;
; 85   : 	float	length;
; 86   : 	
; 87   : 	if ( fabs(v[1]-0.0002159560000) < 0.0001 )
; 88   : 	{
; 89   : 		i=1;
; 90   : 	}
; 91   : 	length=0;
; 92   : 	for (i=0 ; i< 3 ; i++)
; 93   : 		length += v[i]*v[i];

  0000a	8b 75 08	 mov	 esi, DWORD PTR _v$[ebp]
  0000d	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00011	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  00016	0f 28 c8	 movaps	 xmm1, xmm0
  00019	f3 0f 10 5e 08	 movss	 xmm3, DWORD PTR [esi+8]
  0001e	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00022	f3 0f 11 44 24
	08		 movss	 DWORD PTR tv366[esp+24], xmm0
  00028	0f 57 c0	 xorps	 xmm0, xmm0
  0002b	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv367[esp+24], xmm2
  00031	f3 0f 58 c8	 addss	 xmm1, xmm0
  00035	f3 0f 11 5c 24
	10		 movss	 DWORD PTR tv368[esp+24], xmm3
  0003b	0f 28 c2	 movaps	 xmm0, xmm2
  0003e	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00042	f3 0f 58 c8	 addss	 xmm1, xmm0
  00046	0f 28 c3	 movaps	 xmm0, xmm3
  00049	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0004d	f3 0f 58 c8	 addss	 xmm1, xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  00051	0f 5a c1	 cvtps2pd xmm0, xmm1
  00054	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00059	0f 57 c9	 xorps	 xmm1, xmm1
  0005c	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  00060	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 95   : 	if (length == 0)

  00063	0f 2e c8	 ucomiss xmm1, xmm0
  00066	f3 0f 11 4c 24
	14		 movss	 DWORD PTR _length$[esp+24], xmm1
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7a 07		 jp	 SHORT $LN9@VectorNorm

; 96   : 		return (vec_t)0;

  00072	d9 ee		 fldz

; 102  : }

  00074	5e		 pop	 esi
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN9@VectorNorm:

; 97   : 		
; 98   : 	for (i=0 ; i< 3 ; i++)
; 99   : 		v[i] /= length;	

  00079	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv366[esp+24]
  0007f	f3 0f 5e c1	 divss	 xmm0, xmm1

; 100  : 
; 101  : 	return length;

  00083	d9 44 24 14	 fld	 DWORD PTR _length$[esp+24]
  00087	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0008b	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv367[esp+24]
  00091	f3 0f 5e c1	 divss	 xmm0, xmm1
  00095	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  0009a	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR tv368[esp+24]
  000a0	f3 0f 5e c1	 divss	 xmm0, xmm1
  000a4	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0

; 102  : }

  000a9	5e		 pop	 esi
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?VectorNormalize@@YAMQAM@Z ENDP				; VectorNormalize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorScale@@YAXQAMM0@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_scale$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorScale@@YAXQAMM0@Z PROC				; VectorScale, COMDAT

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 	out[0] = v[0] * scale;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _scale$[ebp]
  0000b	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00012	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00016	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 77   : 	out[1] = v[1] * scale;

  0001a	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00023	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 78   : 	out[2] = v[2] * scale;

  00028	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00031	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 79   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?VectorScale@@YAXQAMM0@Z ENDP				; VectorScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?_VectorCopy@@YAXQAM0@Z
_TEXT	SEGMENT
_in$ = 8						; size = 4
_out$ = 12						; size = 4
?_VectorCopy@@YAXQAM0@Z PROC				; _VectorCopy, COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	out[0] = in[0];

  00003	8b 55 08	 mov	 edx, DWORD PTR _in$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 01		 mov	 DWORD PTR [ecx], eax

; 69   : 	out[1] = in[1];

  0000d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00010	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 70   : 	out[2] = in[2];

  00013	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00016	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 71   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?_VectorCopy@@YAXQAM0@Z ENDP				; _VectorCopy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?_VectorAdd@@YAXQAM00@Z
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
?_VectorAdd@@YAXQAM00@Z PROC				; _VectorAdd, COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 61   : 	out[0] = va[0]+vb[0];

  00003	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00010	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00014	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 62   : 	out[1] = va[1]+vb[1];

  00018	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0001d	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 63   : 	out[2] = va[2]+vb[2];

  00027	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0002c	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00031	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 64   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?_VectorAdd@@YAXQAM00@Z ENDP				; _VectorAdd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?_VectorSubtract@@YAXQAM00@Z
_TEXT	SEGMENT
_va$ = 8						; size = 4
_vb$ = 12						; size = 4
_out$ = 16						; size = 4
?_VectorSubtract@@YAXQAM00@Z PROC			; _VectorSubtract, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	out[0] = va[0]-vb[0];

  00003	8b 55 08	 mov	 edx, DWORD PTR _va$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _vb$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00010	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00014	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 55   : 	out[1] = va[1]-vb[1];

  00018	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0001d	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00022	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 56   : 	out[2] = va[2]-vb[2];

  00027	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  0002c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00031	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 57   : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?_VectorSubtract@@YAXQAM00@Z ENDP			; _VectorSubtract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?_DotProduct@@YAMQAM0@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?_DotProduct@@YAMQAM0@Z PROC				; _DotProduct, COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _v1$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  00009	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0000c	d8 48 04	 fmul	 DWORD PTR [eax+4]
  0000f	d9 01		 fld	 DWORD PTR [ecx]
  00011	d8 08		 fmul	 DWORD PTR [eax]
  00013	de c1		 faddp	 ST(1), ST(0)
  00015	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00018	d8 48 08	 fmul	 DWORD PTR [eax+8]
  0001b	de c1		 faddp	 ST(1), ST(0)

; 50   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_DotProduct@@YAMQAM0@Z ENDP				; _DotProduct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?CrossProduct@@YAXQAM00@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_cross$ = 16						; size = 4
?CrossProduct@@YAXQAM00@Z PROC				; CrossProduct, COMDAT

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 	cross[0] = v1[1]*v2[2] - v1[2]*v2[1];

  00003	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _v2$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _cross$[ebp]
  0000c	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00011	f3 0f 59 41 04	 mulss	 xmm0, DWORD PTR [ecx+4]
  00016	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0001b	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  00020	f3 0f 5c c8	 subss	 xmm1, xmm0
  00024	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 43   : 	cross[1] = v1[2]*v2[0] - v1[0]*v2[2];

  00028	f3 0f 10 4a 08	 movss	 xmm1, DWORD PTR [edx+8]
  0002d	f3 0f 59 09	 mulss	 xmm1, DWORD PTR [ecx]
  00031	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00035	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [ecx+8]
  0003a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0003e	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 44   : 	cross[2] = v1[0]*v2[1] - v1[1]*v2[0];

  00043	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  00047	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0004b	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [ecx+4]
  00050	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00055	f3 0f 5c c8	 subss	 xmm1, xmm0
  00059	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 45   : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?CrossProduct@@YAXQAM00@Z ENDP				; CrossProduct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorMA@@YAXQAMM00@Z
_TEXT	SEGMENT
_va$ = 8						; size = 4
_scale$ = 12						; size = 4
_vb$ = 16						; size = 4
_vc$ = 20						; size = 4
?VectorMA@@YAXQAMM00@Z PROC				; VectorMA, COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 35   : 	vc[0] = va[0] + scale*vb[0];

  00003	8b 55 10	 mov	 edx, DWORD PTR _vb$[ebp]
  00006	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _scale$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _va$[ebp]
  0000e	8b 45 14	 mov	 eax, DWORD PTR _vc$[ebp]
  00011	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00015	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00019	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0001d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 36   : 	vc[1] = va[1] + scale*vb[1];

  00021	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00026	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002a	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0002f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 37   : 	vc[2] = va[2] + scale*vb[2];

  00034	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00039	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0003d	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00042	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 38   : }

  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?VectorMA@@YAXQAMM00@Z ENDP				; VectorMA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?Q_rint@@YAMM@Z
_TEXT	SEGMENT
tv130 = -8						; size = 8
tv74 = 8						; size = 4
_in$ = 8						; size = 4
?Q_rint@@YAMM@Z PROC					; Q_rint, COMDAT

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 30   : 	return floor(in + 0.5f);

  00006	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _in$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 672  :         return (float)floor(_X);

  0000b	83 ec 08	 sub	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 30   : 	return floor(in + 0.5f);

  0000e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 672  :         return (float)floor(_X);

  00016	0f 5a c0	 cvtps2pd xmm0, xmm0
  00019	f2 0f 11 45 f8	 movsd	 QWORD PTR tv130[ebp], xmm0
  0001e	dd 45 f8	 fld	 QWORD PTR tv130[ebp]
  00021	dd 1c 24	 fstp	 QWORD PTR [esp]
  00024	e8 00 00 00 00	 call	 _floor
  00029	d9 5d 08	 fstp	 DWORD PTR tv74[ebp]
  0002c	d9 45 08	 fld	 DWORD PTR tv74[ebp]
  0002f	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 31   : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?Q_rint@@YAMM@Z ENDP					; Q_rint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorCompare@@YAHQAM0@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?VectorCompare@@YAHQAM0@Z PROC				; VectorCompare, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 19   : 	int		i;
; 20   : 	
; 21   : 	for (i=0 ; i<3 ; i++)

  00003	8b 55 08	 mov	 edx, DWORD PTR _v1$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	8b 45 0c	 mov	 eax, DWORD PTR _v2$[ebp]
  0000b	2b d0		 sub	 edx, eax
  0000d	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00015	f2 0f 10 15 00
	00 00 00	 movsd	 xmm2, QWORD PTR __real@3f50624dd2f1a9fc
  0001d	0f 1f 00	 npad	 3
$LL4@VectorComp:

; 22   : 		if (fabs(v1[i]-v2[i]) > EQUAL_EPSILON)

  00020	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00025	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 658  :         return (float)fabs(_X);

  00029	0f 5a c0	 cvtps2pd xmm0, xmm0
  0002c	0f 54 c1	 andps	 xmm0, xmm1
  0002f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 22   : 		if (fabs(v1[i]-v2[i]) > EQUAL_EPSILON)

  00033	0f 5a c0	 cvtps2pd xmm0, xmm0
  00036	66 0f 2f c2	 comisd	 xmm0, xmm2
  0003a	77 10		 ja	 SHORT $LN13@VectorComp

; 19   : 	int		i;
; 20   : 	
; 21   : 	for (i=0 ; i<3 ; i++)

  0003c	41		 inc	 ecx
  0003d	83 c0 04	 add	 eax, 4
  00040	83 f9 03	 cmp	 ecx, 3
  00043	7c db		 jl	 SHORT $LL4@VectorComp

; 24   : 			
; 25   : 	return true;

  00045	b8 01 00 00 00	 mov	 eax, 1

; 26   : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN13@VectorComp:

; 23   : 			return false;

  0004c	33 c0		 xor	 eax, eax

; 26   : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?VectorCompare@@YAHQAM0@Z ENDP				; VectorCompare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorLength@@YAMQAM@Z
_TEXT	SEGMENT
tv272 = -4						; size = 4
_v$ = 8							; size = 4
?VectorLength@@YAMQAM@Z PROC				; VectorLength, COMDAT

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8

; 6    : 	int		i;
; 7    : 	float	length;
; 8    : 	
; 9    : 	length = 0.0f;
; 10   : 	for (i=0 ; i< 3 ; i++)
; 11   : 		length += v[i]*v[i];

  00009	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  0000c	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  00010	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00015	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0001a	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001e	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00022	f3 0f 58 15 00
	00 00 00	 addss	 xmm2, DWORD PTR __real@00000000
  0002a	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0002e	f3 0f 58 d0	 addss	 xmm2, xmm0
  00032	f3 0f 58 d1	 addss	 xmm2, xmm1
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  00036	0f 5a c2	 cvtps2pd xmm0, xmm2
  00039	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  0003e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 14   : 	return length;

  00042	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv272[esp+8], xmm0
  00048	d9 44 24 04	 fld	 DWORD PTR tv272[esp+8]

; 15   : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?VectorLength@@YAMQAM@Z ENDP				; VectorLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?AngleMatrix@@YAXPBMPAY03M@Z
_TEXT	SEGMENT
_sr$1$ = -20						; size = 4
_sp$1$ = -16						; size = 4
_cy$1$ = -12						; size = 4
_cp$1$ = -8						; size = 4
_angle$3$ = -4						; size = 4
_angle$2$ = -4						; size = 4
_angle$1$ = -4						; size = 4
_sy$1$ = 8						; size = 4
_angles$ = 8						; size = 4
_matrix$ = 12						; size = 4
?AngleMatrix@@YAXPBMPAY03M@Z PROC			; AngleMatrix, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 143  : 	float		angle;
; 144  : 	float		sr, sp, sy, cr, cp, cy;
; 145  : 	
; 146  : 	angle = angles[ROLL] *	0.0174532925199432955f;		//0.0174532821447436905f;

  00007	8b 75 08	 mov	 esi, DWORD PTR _angles$[ebp]
  0000a	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0000f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00017	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$1$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0001c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0001f	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00024	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00028	f3 0f 11 45 08	 movss	 DWORD PTR _sy$1$[ebp], xmm0
  0002d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$1$[ebp]

; 635  :         return (float)cos(_X);

  00032	0f 5a c0	 cvtps2pd xmm0, xmm0
  00035	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0003a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0003e	f3 0f 11 45 f4	 movss	 DWORD PTR _cy$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 149  : 	angle = angles[YAW] *   0.0174532925199432955f;

  00043	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00048	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00050	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$2$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  00055	0f 5a c0	 cvtps2pd xmm0, xmm0
  00058	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  0005d	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00061	f3 0f 11 45 f0	 movss	 DWORD PTR _sp$1$[ebp], xmm0
  00066	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$2$[ebp]

; 635  :         return (float)cos(_X);

  0006b	0f 5a c0	 cvtps2pd xmm0, xmm0
  0006e	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00073	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00077	f3 0f 11 45 f8	 movss	 DWORD PTR _cp$1$[ebp], xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 152  : 	angle = angles[PITCH] * 0.0174532925199432955f;		//0.0174532821247436905f;

  0007c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00080	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00088	f3 0f 11 45 fc	 movss	 DWORD PTR _angle$3$[ebp], xmm0
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  0008d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00090	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00095	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00099	f3 0f 11 45 ec	 movss	 DWORD PTR _sr$1$[ebp], xmm0
  0009e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _angle$3$[ebp]

; 635  :         return (float)cos(_X);

  000a3	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a6	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 157  : 	matrix[0][0] = cp*cy;

  000ab	f3 0f 10 75 f8	 movss	 xmm6, DWORD PTR _cp$1$[ebp]
  000b0	0f 57 db	 xorps	 xmm3, xmm3
  000b3	8b 45 0c	 mov	 eax, DWORD PTR _matrix$[ebp]
  000b6	f3 0f 10 7d f4	 movss	 xmm7, DWORD PTR _cy$1$[ebp]

; 158  : 	matrix[1][0] = cp*sy;
; 159  : 	matrix[2][0] = -sp;
; 160  : 	matrix[0][1] = sr*sp*cy+cr*-sy;

  000bb	f3 0f 10 65 ec	 movss	 xmm4, DWORD PTR _sr$1$[ebp]
  000c0	f3 0f 10 6d f0	 movss	 xmm5, DWORD PTR _sp$1$[ebp]
  000c5	0f 28 d4	 movaps	 xmm2, xmm4
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 635  :         return (float)cos(_X);

  000c8	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp

; 157  : 	matrix[0][0] = cp*cy;

  000cc	0f 28 c6	 movaps	 xmm0, xmm6

; 158  : 	matrix[1][0] = cp*sy;
; 159  : 	matrix[2][0] = -sp;
; 160  : 	matrix[0][1] = sr*sp*cy+cr*-sy;

  000cf	f3 0f 59 d5	 mulss	 xmm2, xmm5
  000d3	f3 0f 59 c7	 mulss	 xmm0, xmm7
  000d7	0f 28 ca	 movaps	 xmm1, xmm2

; 161  : 	matrix[1][1] = sr*sp*sy+cr*cy;

  000da	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _sy$1$[ebp]
  000df	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000e3	0f 28 c6	 movaps	 xmm0, xmm6
  000e6	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  000eb	f3 0f 59 cf	 mulss	 xmm1, xmm7
  000ef	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0
  000f4	0f 28 c5	 movaps	 xmm0, xmm5
  000f7	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fe	f3 0f 11 40 20	 movss	 DWORD PTR [eax+32], xmm0
  00103	0f 28 c3	 movaps	 xmm0, xmm3
  00106	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  0010b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0010f	0f 28 c3	 movaps	 xmm0, xmm3
  00112	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00116	f3 0f 58 d0	 addss	 xmm2, xmm0
  0011a	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 162  : 	matrix[2][1] = sr*cp;

  0011f	0f 28 c4	 movaps	 xmm0, xmm4
  00122	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00126	f3 0f 11 50 14	 movss	 DWORD PTR [eax+20], xmm2

; 163  : 	matrix[0][2] = (cr*sp*cy+-sr*-sy);

  0012b	0f 28 d3	 movaps	 xmm2, xmm3
  0012e	f3 0f 59 d5	 mulss	 xmm2, xmm5
  00132	f3 0f 11 40 24	 movss	 DWORD PTR [eax+36], xmm0
  00137	0f 28 c4	 movaps	 xmm0, xmm4
  0013a	f3 0f 59 45 08	 mulss	 xmm0, DWORD PTR _sy$1$[ebp]
  0013f	0f 28 ca	 movaps	 xmm1, xmm2

; 164  : 	matrix[1][2] = (cr*sp*sy+-sr*cy);

  00142	f3 0f 59 e7	 mulss	 xmm4, xmm7
  00146	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _sy$1$[ebp]
  0014b	f3 0f 59 cf	 mulss	 xmm1, xmm7
  0014f	f3 0f 5c d4	 subss	 xmm2, xmm4

; 165  : 	matrix[2][2] = cr*cp;

  00153	f3 0f 59 de	 mulss	 xmm3, xmm6
  00157	f3 0f 58 c8	 addss	 xmm1, xmm0
  0015b	f3 0f 11 50 18	 movss	 DWORD PTR [eax+24], xmm2
  00160	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
  00165	f3 0f 11 58 28	 movss	 DWORD PTR [eax+40], xmm3

; 166  : 	matrix[0][3] = 0.0;

  0016a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 167  : 	matrix[1][3] = 0.0;

  00171	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 168  : 	matrix[2][3] = 0.0;

  00178	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  0017f	5e		 pop	 esi

; 169  : }

  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
?AngleMatrix@@YAXPBMPAY03M@Z ENDP			; AngleMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?VectorRotate@@YAXQBM0QAM@Z
_TEXT	SEGMENT
_in1$ = 8						; size = 4
_in2$ = 12						; size = 4
_out$ = 16						; size = 4
?VectorRotate@@YAXQBM0QAM@Z PROC			; VectorRotate, COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  : 	out[0*4+0] = in1[0*4+0] * in2[0*4+0] + in1[0*4+1] * in2[0*4+1] + in1[0*4+2] * in2[0*4+2];

  00003	8b 55 08	 mov	 edx, DWORD PTR _in1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _in2$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR _out$[ebp]
  0000c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00010	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [ecx]
  00014	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [ecx+4]
  00019	f3 0f 59 4a 04	 mulss	 xmm1, DWORD PTR [edx+4]
  0001e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00022	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00027	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0002c	f3 0f 58 c8	 addss	 xmm1, xmm0
  00030	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 220  : 	out[0*4+1] = in1[0*4+0] * in2[0*4+4] + in1[0*4+1] * in2[0*4+5] + in1[0*4+2] * in2[0*4+6];

  00034	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00039	f3 0f 59 0a	 mulss	 xmm1, DWORD PTR [edx]
  0003d	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00042	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  00047	f3 0f 58 c8	 addss	 xmm1, xmm0
  0004b	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00050	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  00055	f3 0f 58 c8	 addss	 xmm1, xmm0
  00059	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1

; 221  : 	out[0*4+2] = in1[0*4+0] * in2[0*4+8] + in1[0*4+1] * in2[0*4+9] + in1[0*4+2] * in2[0*4+10];

  0005e	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  00063	f3 0f 10 49 20	 movss	 xmm1, DWORD PTR [ecx+32]
  00068	f3 0f 59 42 04	 mulss	 xmm0, DWORD PTR [edx+4]
  0006d	f3 0f 59 0a	 mulss	 xmm1, DWORD PTR [edx]
  00071	f3 0f 58 c8	 addss	 xmm1, xmm0
  00075	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  0007a	f3 0f 59 42 08	 mulss	 xmm0, DWORD PTR [edx+8]
  0007f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00083	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1

; 222  : }

  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?VectorRotate@@YAXQBM0QAM@Z ENDP			; VectorRotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 316  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 746  :         return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 317  : 	return (_CSTD sqrtf(_Xx));

  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv65[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv65[esp+8]

; 318  : 	}

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 306  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 736  :         return (float)sin(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00010	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 307  : 	return (_CSTD sinf(_Xx));

  00014	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00019	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 308  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
tv71 = -8						; size = 8
tv75 = 8						; size = 4
__Xx$ = 8						; size = 4
?floor@@YAMM@Z PROC					; floor, COMDAT

; 147  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 672  :         return (float)floor(_X);

  0000b	83 ec 08	 sub	 esp, 8
  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	f2 0f 11 45 f8	 movsd	 QWORD PTR tv71[ebp], xmm0
  00016	dd 45 f8	 fld	 QWORD PTR tv71[ebp]
  00019	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001c	e8 00 00 00 00	 call	 _floor
  00021	d9 5d 08	 fstp	 DWORD PTR tv75[ebp]
  00024	d9 45 08	 fld	 DWORD PTR tv75[ebp]
  00027	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 149  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
__Xx$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 137  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 658  :         return (float)fabs(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00012	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 138  : 	return (_CSTD fabsf(_Xx));

  00016	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  0001b	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 139  : 	}

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
__Xx$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 102  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 635  :         return (float)cos(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00010	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 103  : 	return (_CSTD cosf(_Xx));

  00014	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00019	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 104  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath
;	COMDAT ?acos@@YAMM@Z
_TEXT	SEGMENT
tv65 = 8						; size = 4
__Xx$ = 8						; size = 4
?acos@@YAMM@Z PROC					; acos, COMDAT

; 51   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __Xx$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h

; 610  :         return (float)acos(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  00010	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\cmath

; 52   : 	return (_CSTD acosf(_Xx));

  00014	f3 0f 11 45 08	 movss	 DWORD PTR tv65[ebp], xmm0
  00019	d9 45 08	 fld	 DWORD PTR tv65[ebp]

; 53   : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?acos@@YAMM@Z ENDP					; acos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 745  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 746  :         return (float)sqrt(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 747  :     }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 735  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 736  :         return (float)sin(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00010	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00014	f3 0f 11 45 08	 movss	 DWORD PTR tv68[ebp], xmm0
  00019	d9 45 08	 fld	 DWORD PTR tv68[ebp]

; 737  :     }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _floorf
_TEXT	SEGMENT
tv69 = -8						; size = 8
tv75 = 8						; size = 4
__X$ = 8						; size = 4
_floorf	PROC						; COMDAT

; 671  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 672  :         return (float)floor(_X);

  0000b	83 ec 08	 sub	 esp, 8
  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	f2 0f 11 45 f8	 movsd	 QWORD PTR tv69[ebp], xmm0
  00016	dd 45 f8	 fld	 QWORD PTR tv69[ebp]
  00019	dd 1c 24	 fstp	 QWORD PTR [esp]
  0001c	e8 00 00 00 00	 call	 _floor
  00021	d9 5d 08	 fstp	 DWORD PTR tv75[ebp]
  00024	d9 45 08	 fld	 DWORD PTR tv75[ebp]
  00027	83 c4 08	 add	 esp, 8

; 673  :     }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_floorf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 657  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 658  :         return (float)fabs(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00012	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00016	f3 0f 11 45 08	 movss	 DWORD PTR tv68[ebp], xmm0
  0001b	d9 45 08	 fld	 DWORD PTR tv68[ebp]

; 659  :     }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 634  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 635  :         return (float)cos(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00010	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00014	f3 0f 11 45 08	 movss	 DWORD PTR tv68[ebp], xmm0
  00019	d9 45 08	 fld	 DWORD PTR tv68[ebp]

; 636  :     }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv68 = 8						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 609  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 610  :         return (float)acos(_X);

  00008	0f 5a c0	 cvtps2pd xmm0, xmm0
  0000b	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  00010	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00014	f3 0f 11 45 08	 movss	 DWORD PTR tv68[ebp], xmm0
  00019	d9 45 08	 fld	 DWORD PTR tv68[ebp]

; 611  :     }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\zzzmathlib.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
