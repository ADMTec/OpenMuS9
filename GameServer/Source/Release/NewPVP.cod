; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\NewPVP.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	?DebugLog@@YAXPADZZ				; DebugLog
PUBLIC	??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char *>
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CNewPVP@@QAE@XZ				; CNewPVP::CNewPVP
PUBLIC	??1CNewPVP@@UAE@XZ				; CNewPVP::~CNewPVP
PUBLIC	?LoadData@CNewPVP@@QAEXXZ			; CNewPVP::LoadData
PUBLIC	?Run@CNewPVP@@QAEXXZ				; CNewPVP::Run
PUBLIC	?Reserve@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z	; CNewPVP::Reserve
PUBLIC	?Join@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z		; CNewPVP::Join
PUBLIC	?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z	; CNewPVP::Cancel
PUBLIC	?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z		; CNewPVP::Leave
PUBLIC	?SetScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z	; CNewPVP::SetScore
PUBLIC	?CheckScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0@Z	; CNewPVP::CheckScore
PUBLIC	?SendChannelList@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::SendChannelList
PUBLIC	?JoinChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z	; CNewPVP::JoinChannel
PUBLIC	?LeaveChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z	; CNewPVP::LeaveChannel
PUBLIC	?ChatMsgSend@CNewPVP@@QAEXAAUOBJECTSTRUCT@@PAEH@Z ; CNewPVP::ChatMsgSend
PUBLIC	?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z	; CNewPVP::SetBuff
PUBLIC	?GetChannelStatus@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::GetChannelStatus
PUBLIC	?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z	; CNewPVP::IsSafeState
PUBLIC	?IsObserver@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z	; CNewPVP::IsObserver
PUBLIC	?Reset@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z		; CNewPVP::Reset
PUBLIC	?CheckPKPenalty@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::CheckPKPenalty
PUBLIC	?IsSelfDefense@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z	; CNewPVP::IsSelfDefense
PUBLIC	?IsGuildWar@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z	; CNewPVP::IsGuildWar
PUBLIC	?DropItem@CNewPVP@@QAEHPAUOBJECTSTRUCT@@EEEH@Z	; CNewPVP::DropItem
PUBLIC	?GetDuelChannelId@CNewPVP@@AAEHPAD@Z		; CNewPVP::GetDuelChannelId
PUBLIC	?GetDuelChannelId@CNewPVP@@AAEHH@Z		; CNewPVP::GetDuelChannelId
PUBLIC	?GetDuelChannelId@CNewPVP@@AAEHXZ		; CNewPVP::GetDuelChannelId
PUBLIC	?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@PAD@Z ; CNewPVP::GetDuelChannel
PUBLIC	?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@XZ ; CNewPVP::GetDuelChannel
PUBLIC	?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z	; CNewPVP::SetStatus
PUBLIC	?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::SetDuelStatus
PUBLIC	?GetDuelStatus@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z	; CNewPVP::GetDuelStatus
PUBLIC	?GetDuelStatusByResponsor@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::GetDuelStatusByResponsor
PUBLIC	?Leave@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0@Z	; CNewPVP::Leave
PUBLIC	?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z	; CNewPVP::ReFill
PUBLIC	?MoveGate@CNewPVP@@AAEHHH@Z			; CNewPVP::MoveGate
PUBLIC	?CheckLimitLevel@CNewPVP@@AAEHHH@Z		; CNewPVP::CheckLimitLevel
PUBLIC	?GetChannelIdByObserver@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::GetChannelIdByObserver
PUBLIC	?CheckUsersOnConnect@CNewPVP@@AAEHH@Z		; CNewPVP::CheckUsersOnConnect
PUBLIC	?GetObserverList@CNewPVP@@AAEXHAAU_tagPMSG_DUEL_OBSERVERLIST_BROADCAST@@@Z ; CNewPVP::GetObserverList
PUBLIC	?LeaveChannelObserver@CNewPVP@@AAEXH@Z		; CNewPVP::LeaveChannelObserver
PUBLIC	?CheckChannelListInfo@CNewPVP@@AAEXH@Z		; CNewPVP::CheckChannelListInfo
PUBLIC	?BroadcastScore@CNewPVP@@AAEXHE@Z		; CNewPVP::BroadcastScore
PUBLIC	?BroadcastResult@CNewPVP@@AAEXHEAAUOBJECTSTRUCT@@@Z ; CNewPVP::BroadcastResult
PUBLIC	?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z		; CNewPVP::BroadcastDuelInfo
PUBLIC	?BroadcastJoinChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z ; CNewPVP::BroadcastJoinChannel
PUBLIC	?BroadcastLeaveChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z ; CNewPVP::BroadcastLeaveChannel
PUBLIC	?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z	; CNewPVP::BroadcastToObserver
PUBLIC	?BroadcastMessage@CNewPVP@@AAEXHEEH@Z		; CNewPVP::BroadcastMessage
PUBLIC	?BroadcastRound@CNewPVP@@AAEXHEH@Z		; CNewPVP::BroadcastRound
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::find
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate
PUBLIC	??1?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ ; std::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >::~map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode0
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::find
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Erase
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate
PUBLIC	??_GCNewPVP@@UAEPAXI@Z				; CNewPVP::`scalar deleting destructor'
PUBLIC	?OnCGInviteDuel@@YAHPAU_tagPMSG_REQ_DUEL_INVITE@@H@Z ; OnCGInviteDuel
PUBLIC	?OnCGAnswerDuel@@YAHPAU_tagPMSG_ANS_DUEL_ANSWER@@H@Z ; OnCGAnswerDuel
PUBLIC	?OnCGLeaveDuel@@YAHPAU_tagPMSG_REQ_DUEL_EXIT@@H@Z ; OnCGLeaveDuel
PUBLIC	?OnDuelChannelJoin@@YAHPAU_tagPMSG_REQ_DUEL_JOINCNANNEL@@H@Z ; OnDuelChannelJoin
PUBLIC	?OnDuelChannelLeave@@YAHPAU_tagPMSG_REQ_DUEL_LEAVECNANNEL@@H@Z ; OnDuelChannelLeave
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator--
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator--
PUBLIC	?GCServerMsgStringSendEx@@YAXHEPADZZ		; GCServerMsgStringSendEx
PUBLIC	??$_Buynode@U?$pair@HU_tagWaiting@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode<std::pair<int,_tagWaiting> >
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_nohint<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
PUBLIC	??$_Buynode@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode<std::pair<int,_tagObserverInfo> >
PUBLIC	??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_nohint<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAU?$pair@$$CBHU_tagWaiting@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_at<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAU?$pair@$$CBHU_tagObserverInfo@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_at<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CNewPVP@@6B@				; CNewPVP::`vftable'
PUBLIC	?g_NewPVP@@3VCNewPVP@@A				; g_NewPVP
PUBLIC	??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@		; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_0CF@DMFJILEL@ENEWPVP?3?3E_NOT_FOUND_MOVEREQUEST@ ; `string'
PUBLIC	??_C@_06CEFAPPFE@lpData?$AA@			; `string'
PUBLIC	??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BI@FIMKCIJJ@ENEWPVP?3?3E_FAILED_ENTER?$AA@ ; `string'
PUBLIC	??_C@_0M@FFNHLDAP@pair?4second?$AA@		; `string'
PUBLIC	??_C@_0BK@MOPMHAKE@ENEWPVP?3?3E_NOT_EXIST_USER?$AA@ ; `string'
PUBLIC	??_C@_0BG@NENFJOPG@iter?$CB?$DNm_Waiting?4end?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@ ; `string'
PUBLIC	??_C@_0CE@LJCBPGFB@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_I@ ; `string'
PUBLIC	??_C@_0CI@IAEKOLGJ@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_C@_0BN@CPLOFFJH@ENEWPVP?3?3E_INVALID_CHANNELID?$AA@ ; `string'
PUBLIC	??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@ ; `string'
PUBLIC	??_C@_0FB@CPAGFMCM@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@ ; `string'
PUBLIC	??_C@_0BJ@EGLACHLG@ENEWPVP?3?3E_INVALID_INDEX?$AA@ ; `string'
PUBLIC	??_C@_0M@EPIOBBFH@lpTargetObj?$AA@		; `string'
PUBLIC	??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@ ; `string'
PUBLIC	??_C@_0CL@FOKMMDLI@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Lose@ ; `string'
PUBLIC	??_C@_0BG@IOFGAKKG@gObjIsConnected?$CI?$CGobj?$CJ?$AA@ ; `string'
PUBLIC	??_C@_02PGHGPEOM@?91?$AA@			; `string'
PUBLIC	??_C@_0CJ@LJHODCKE@info?4nId?$DO?$DN0?5?$CG?$CG?5info?4nId?$DMDUEL_CHA@ ; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE?$AA@			; `string'
PUBLIC	??_C@_0CE@IELDJHDH@m_DuelChannel?$FLnId?$FN?4nStatus?$CB?$DNDC_I@ ; `string'
PUBLIC	??_C@_0BM@HJFACEHP@ENEWPVP?3?3E_ALREADY_DUELLING?$AA@ ; `string'
PUBLIC	??_C@_0N@MNKFLCMC@?$CBIsDuel?$CIobj?$CJ?$AA@	; `string'
PUBLIC	??_C@_0CB@MKBHDMEM@ENEWPVP?3?3E_ALREADY_DUELREQUESTED@ ; `string'
PUBLIC	??_C@_0BG@JFAHKGBO@?$CBIsDuelRequested?$CIobj?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CA@KJOHBDGM@ENEWPVP?3?3E_ALREADY_DUELRESERVED?$AA@ ; `string'
PUBLIC	??_C@_0BF@JEHEGAMC@?$CBIsDuelReserved?$CIobj?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CF@OEOKBHOF@?$FLNewPVP?$FN?5ChannelId?$FL?$CFd?$FN?5Count?$FL?$CFd?$FN@ ; `string'
PUBLIC	??_C@_07LCGEGCHP@?$CFs?$CI?$CFd?$CJ?3?$AA@	; `string'
PUBLIC	??_C@_03CGNBMCEI@?$CFs?0?$AA@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_0CL@FHCIJMFA@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_R@ ; `string'
PUBLIC	??_C@_0BN@CEOLHPDN@gObjIsConnected?$CIobj?4m_Index?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0M@NHOMKAFP@IsDuel?$CIobj?$CJ?$AA@	; `string'
PUBLIC	??_C@_0CA@BKIKBOHB@IsVulcanusMap?$CIlpObj?9?$DOMapNumber?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BA@GDKKLCIG@m_bNewPVP?$DN?$DNTRUE?$AA@	; `string'
PUBLIC	??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0DE@MJGAINFG@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requested?5to?5Sta@ ; `string'
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CNewPVP@@6B@				; CNewPVP::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCNewPVP@@@8				; CNewPVP `RTTI Type Descriptor'
PUBLIC	??_R3CNewPVP@@8					; CNewPVP::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CNewPVP@@8					; CNewPVP::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CNewPVP@@8			; CNewPVP::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@42c80000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?IsDuelEnable@@YA_NH@Z:PROC			; IsDuelEnable
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolDestroy
EXTRN	?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z:PROC ; gObjViewportListProtocolCreate
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObjTeleport@@YAXHHHH@Z:PROC			; gObjTeleport
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	?GCManaSend@@YAXHFEEG@Z:PROC			; GCManaSend
EXTRN	?PacketCheckTime@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; PacketCheckTime
EXTRN	??_ECNewPVP@@UAEPAXI@Z:PROC			; CNewPVP::`vector deleting destructor'
EXTRN	?GetPartyPkLevel@PartyClass@@QAEDH@Z:PROC	; PartyClass::GetPartyPkLevel
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z:PROC ; gObjClearBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetTotalValueOfEffect
EXTRN	?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z:PROC ; CMoveCommand::GetMoveCommandData
EXTRN	?ReSetTarget@CDarkSpirit@@QAEXH@Z:PROC		; CDarkSpirit::ReSetTarget
EXTRN	?GetGate@CGate@@QAEHHAAE000AAF@Z:PROC		; CGate::GetGate
EXTRN	?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z:PROC ; EventItemBagManager::OpenSpecial
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gNonPK@@3HA:DWORD				; gNonPK
EXTRN	?gPkLimitFree@@3HA:DWORD			; gPkLimitFree
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gMoveCommand@@3VCMoveCommand@@A:BYTE		; gMoveCommand
EXTRN	?gDarkSpirit@@3PAVCDarkSpirit@@A:BYTE		; gDarkSpirit
EXTRN	?gGateC@@3VCGate@@A:BYTE			; gGateC
EXTRN	?g_EventItemBagManager@@3VEventItemBagManager@@A:BYTE ; g_EventItemBagManager
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_NewPVP@@3VCNewPVP@@A DB 0134H DUP (?)		; g_NewPVP
_BSS	ENDS
CRT$XCU	SEGMENT
?g_NewPVP$initializer$@@3P6AXXZA DD FLAT:??__Eg_NewPVP@@YAXXZ ; g_NewPVP$initializer$
CRT$XCU	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CNewPVP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CNewPVP@@8 DD FLAT:??_R0?AVCNewPVP@@@8	; CNewPVP::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CNewPVP@@8
rdata$r	ENDS
;	COMDAT ??_R2CNewPVP@@8
rdata$r	SEGMENT
??_R2CNewPVP@@8 DD FLAT:??_R1A@?0A@EA@CNewPVP@@8	; CNewPVP::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CNewPVP@@8
rdata$r	SEGMENT
??_R3CNewPVP@@8 DD 00H					; CNewPVP::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CNewPVP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCNewPVP@@@8
data$r	SEGMENT
??_R0?AVCNewPVP@@@8 DD FLAT:??_7type_info@@6B@		; CNewPVP `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCNewPVP@@', 00H
data$r	ENDS
;	COMDAT ??_R4CNewPVP@@6B@
rdata$r	SEGMENT
??_R4CNewPVP@@6B@ DD 00H				; CNewPVP::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCNewPVP@@@8
	DD	FLAT:??_R3CNewPVP@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MJGAINFG@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requested?5to?5Sta@
CONST	SEGMENT
??_C@_0DE@MJGAINFG@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requested?5to?5Sta@ DB '['
	DB	'Duel] [%s][%s] Requested to Start Duel to [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@ DB 'error '
	DB	': %s %d (%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GDKKLCIG@m_bNewPVP?$DN?$DNTRUE?$AA@
CONST	SEGMENT
??_C@_0BA@GDKKLCIG@m_bNewPVP?$DN?$DNTRUE?$AA@ DB 'm_bNewPVP==TRUE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BKIKBOHB@IsVulcanusMap?$CIlpObj?9?$DOMapNumber?$CJ?$AA@
CONST	SEGMENT
??_C@_0CA@BKIKBOHB@IsVulcanusMap?$CIlpObj?9?$DOMapNumber?$CJ?$AA@ DB 'IsV'
	DB	'ulcanusMap(lpObj->MapNumber)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NHOMKAFP@IsDuel?$CIobj?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@NHOMKAFP@IsDuel?$CIobj?$CJ?$AA@ DB 'IsDuel(obj)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CEOLHPDN@gObjIsConnected?$CIobj?4m_Index?$CJ?$AA@
CONST	SEGMENT
??_C@_0BN@CEOLHPDN@gObjIsConnected?$CIobj?4m_Index?$CJ?$AA@ DB 'gObjIsCon'
	DB	'nected(obj.m_Index)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FHCIJMFA@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_R@
CONST	SEGMENT
??_C@_0CL@FHCIJMFA@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_R@ DB 'm_D'
	DB	'uelChannel[nId].nStatus==DC_RESERVEDEND', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CGNBMCEI@?$CFs?0?$AA@
CONST	SEGMENT
??_C@_03CGNBMCEI@?$CFs?0?$AA@ DB '%s,', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LCGEGCHP@?$CFs?$CI?$CFd?$CJ?3?$AA@
CONST	SEGMENT
??_C@_07LCGEGCHP@?$CFs?$CI?$CFd?$CJ?3?$AA@ DB '%s(%d):', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OEOKBHOF@?$FLNewPVP?$FN?5ChannelId?$FL?$CFd?$FN?5Count?$FL?$CFd?$FN@
CONST	SEGMENT
??_C@_0CF@OEOKBHOF@?$FLNewPVP?$FN?5ChannelId?$FL?$CFd?$FN?5Count?$FL?$CFd?$FN@ DB '['
	DB	'NewPVP] ChannelId[%d] Count[%d][%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JEHEGAMC@?$CBIsDuelReserved?$CIobj?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@JEHEGAMC@?$CBIsDuelReserved?$CIobj?$CJ?$AA@ DB '!IsDuelReserved'
	DB	'(obj)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KJOHBDGM@ENEWPVP?3?3E_ALREADY_DUELRESERVED?$AA@
CONST	SEGMENT
??_C@_0CA@KJOHBDGM@ENEWPVP?3?3E_ALREADY_DUELRESERVED?$AA@ DB 'ENEWPVP::E_'
	DB	'ALREADY_DUELRESERVED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFAHKGBO@?$CBIsDuelRequested?$CIobj?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@JFAHKGBO@?$CBIsDuelRequested?$CIobj?$CJ?$AA@ DB '!IsDuelRequest'
	DB	'ed(obj)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MKBHDMEM@ENEWPVP?3?3E_ALREADY_DUELREQUESTED@
CONST	SEGMENT
??_C@_0CB@MKBHDMEM@ENEWPVP?3?3E_ALREADY_DUELREQUESTED@ DB 'ENEWPVP::E_ALR'
	DB	'EADY_DUELREQUESTED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNKFLCMC@?$CBIsDuel?$CIobj?$CJ?$AA@
CONST	SEGMENT
??_C@_0N@MNKFLCMC@?$CBIsDuel?$CIobj?$CJ?$AA@ DB '!IsDuel(obj)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HJFACEHP@ENEWPVP?3?3E_ALREADY_DUELLING?$AA@
CONST	SEGMENT
??_C@_0BM@HJFACEHP@ENEWPVP?3?3E_ALREADY_DUELLING?$AA@ DB 'ENEWPVP::E_ALRE'
	DB	'ADY_DUELLING', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IELDJHDH@m_DuelChannel?$FLnId?$FN?4nStatus?$CB?$DNDC_I@
CONST	SEGMENT
??_C@_0CE@IELDJHDH@m_DuelChannel?$FLnId?$FN?4nStatus?$CB?$DNDC_I@ DB 'm_D'
	DB	'uelChannel[nId].nStatus!=DC_IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE?$AA@ DB 'FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LJHODCKE@info?4nId?$DO?$DN0?5?$CG?$CG?5info?4nId?$DMDUEL_CHA@
CONST	SEGMENT
??_C@_0CJ@LJHODCKE@info?4nId?$DO?$DN0?5?$CG?$CG?5info?4nId?$DMDUEL_CHA@ DB 'i'
	DB	'nfo.nId>=0 && info.nId<DUEL_CHANNEL_MAX', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PGHGPEOM@?91?$AA@
CONST	SEGMENT
??_C@_02PGHGPEOM@?91?$AA@ DB '-1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IOFGAKKG@gObjIsConnected?$CI?$CGobj?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@IOFGAKKG@gObjIsConnected?$CI?$CGobj?$CJ?$AA@ DB 'gObjIsConnecte'
	DB	'd(&obj)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FOKMMDLI@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Lose@
CONST	SEGMENT
??_C@_0CL@FOKMMDLI@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Lose@ DB '['
	DB	'NewPVP] [%s][%s] Win Duel, Loser [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
CONST	SEGMENT
??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@ DB 'IS_STA'
	DB	'RT(m_DuelChannel[nId].nStatus)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPIOBBFH@lpTargetObj?$AA@
CONST	SEGMENT
??_C@_0M@EPIOBBFH@lpTargetObj?$AA@ DB 'lpTargetObj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EGLACHLG@ENEWPVP?3?3E_INVALID_INDEX?$AA@
CONST	SEGMENT
??_C@_0BJ@EGLACHLG@ENEWPVP?3?3E_INVALID_INDEX?$AA@ DB 'ENEWPVP::E_INVALID'
	DB	'_INDEX', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@CPAGFMCM@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
CONST	SEGMENT
??_C@_0FB@CPAGFMCM@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@ DB 'IS_STA'
	DB	'RT(m_DuelChannel[nId].nStatus)||m_DuelChannel[nId].nStatus==D'
	DB	'C_RESERVEDEND', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
CONST	SEGMENT
??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@ DB 'n'
	DB	'Id>=0 && nId<DUEL_CHANNEL_MAX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CPLOFFJH@ENEWPVP?3?3E_INVALID_CHANNELID?$AA@
CONST	SEGMENT
??_C@_0BN@CPLOFFJH@ENEWPVP?3?3E_INVALID_CHANNELID?$AA@ DB 'ENEWPVP::E_INV'
	DB	'ALID_CHANNELID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IAEKOLGJ@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL@
CONST	SEGMENT
??_C@_0CI@IAEKOLGJ@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL@ DB '['
	DB	'NewPVP] [%s][%s] Duel Started [%s][%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LJCBPGFB@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_I@
CONST	SEGMENT
??_C@_0CE@LJCBPGFB@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_I@ DB 'm_D'
	DB	'uelChannel[nId].nStatus==DC_IDLE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@
CONST	SEGMENT
??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@ DB 'ENEWPVP::E_INVALI'
	DB	'D_STATUS', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NENFJOPG@iter?$CB?$DNm_Waiting?4end?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@NENFJOPG@iter?$CB?$DNm_Waiting?4end?$CI?$CJ?$AA@ DB 'iter!=m_Wa'
	DB	'iting.end()', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MOPMHAKE@ENEWPVP?3?3E_NOT_EXIST_USER?$AA@
CONST	SEGMENT
??_C@_0BK@MOPMHAKE@ENEWPVP?3?3E_NOT_EXIST_USER?$AA@ DB 'ENEWPVP::E_NOT_EX'
	DB	'IST_USER', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFNHLDAP@pair?4second?$AA@
CONST	SEGMENT
??_C@_0M@FFNHLDAP@pair?4second?$AA@ DB 'pair.second', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FIMKCIJJ@ENEWPVP?3?3E_FAILED_ENTER?$AA@
CONST	SEGMENT
??_C@_0BI@FIMKCIJJ@ENEWPVP?3?3E_FAILED_ENTER?$AA@ DB 'ENEWPVP::E_FAILED_E'
	DB	'NTER', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
CONST	SEGMENT
??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@ DB '%s', 09H, '%'
	DB	's', 09H, '%s', 09H, '%s', 09H, '%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEFAPPFE@lpData?$AA@
CONST	SEGMENT
??_C@_06CEFAPPFE@lpData?$AA@ DB 'lpData', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DMFJILEL@ENEWPVP?3?3E_NOT_FOUND_MOVEREQUEST@
CONST	SEGMENT
??_C@_0CF@DMFJILEL@ENEWPVP?3?3E_NOT_FOUND_MOVEREQUEST@ DB 'ENEWPVP::E_NOT'
	DB	'_FOUND_MOVEREQUESTDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
CONST	SEGMENT
??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@ DB 'NewPVP.cpp', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?g_GateObserver@@3PAHA DD 012fH				; g_GateObserver
	DD	0130H
	DD	0131H
	DD	0132H
?g_GateRequester@@3PAHA DD 0127H			; g_GateRequester
	DD	0129H
	DD	012bH
	DD	012dH
?g_GateResponsor@@3PAHA DD 0128H			; g_GateResponsor
	DD	012aH
	DD	012cH
	DD	012eH
_DATA	ENDS
;	COMDAT ??_7CNewPVP@@6B@
CONST	SEGMENT
??_7CNewPVP@@6B@ DD FLAT:??_R4CNewPVP@@6B@		; CNewPVP::`vftable'
	DD	FLAT:??_ECNewPVP@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z$58 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z$58
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z$58 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z$0
__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z$58
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CNewPVP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNewPVP@@QAE@XZ$0
__ehfuncinfo$??0CNewPVP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CNewPVP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_tagObserverInfo@@@std@@YA$$QAU_tagObserverInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_tagObserverInfo@@@std@@YA$$QAU_tagObserverInfo@@AAU1@@Z PROC ; std::forward<_tagObserverInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_tagObserverInfo@@@std@@YA$$QAU_tagObserverInfo@@AAU1@@Z ENDP ; std::forward<_tagObserverInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_tagWaiting@@@std@@YA$$QAU_tagWaiting@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_tagWaiting@@@std@@YA$$QAU_tagWaiting@@AAU1@@Z PROC ; std::forward<_tagWaiting>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_tagWaiting@@@std@@YA$$QAU_tagWaiting@@AAU1@@Z ENDP ; std::forward<_tagWaiting>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@H@std@@YA$$QAHAAH@Z PROC			; std::forward<int>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@H@std@@YA$$QAHAAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::construct<std::pair<int const ,_tagObserverInfo>,std::pair<int,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 15		 je	 SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	0f 10 41 04	 movups	 xmm0, XMMWORD PTR [ecx+4]
  00015	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
  00019	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001c	89 42 14	 mov	 DWORD PTR [edx+20], eax
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 656  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::construct<std::pair<int const ,_tagObserverInfo>,std::pair<int,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::construct<std::pair<int const ,_tagWaiting>,std::pair<int,_tagWaiting> >, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0f		 je	 SHORT $LN3@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	0f 10 41 04	 movups	 xmm0, XMMWORD PTR [ecx+4]
  00015	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::construct<std::pair<int const ,_tagWaiting>,std::pair<int,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode_if_nil<std::pair<int const ,_tagObserverInfo> &>, COMDAT
; _this$ = ecx

; 1657 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1658 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1659 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode_if_nil<std::pair<int const ,_tagObserverInfo> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::pair<int const ,_tagObserverInfo>,std::pair<int,_tagObserverInfo> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 15		 je	 SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	0f 10 41 04	 movups	 xmm0, XMMWORD PTR [ecx+4]
  00015	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
  00019	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001c	89 42 14	 mov	 DWORD PTR [edx+20], eax
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 774  : 		}

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::pair<int const ,_tagObserverInfo>,std::pair<int,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > > &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > > >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode_if_nil@AAU?$pair@$$CBHU_tagWaiting@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Buynode_if_nil@AAU?$pair@$$CBHU_tagWaiting@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_tagWaiting@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode_if_nil<std::pair<int const ,_tagWaiting> &>, COMDAT
; _this$ = ecx

; 1657 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1658 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1659 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buynode_if_nil@AAU?$pair@$$CBHU_tagWaiting@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PAU21@AAU?$pair@$$CBHU_tagWaiting@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode_if_nil<std::pair<int const ,_tagWaiting> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::pair<int const ,_tagWaiting>,std::pair<int,_tagWaiting> >, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0f		 je	 SHORT $LN8@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	0f 10 41 04	 movups	 xmm0, XMMWORD PTR [ecx+4]
  00015	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::pair<int const ,_tagWaiting>,std::pair<int,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::construct<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::construct<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::construct<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::construct<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> ><std::pair<int const ,_tagWaiting> >, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> ><std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > ><std::allocator<std::pair<int const ,_tagWaiting> > >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > ><std::allocator<std::pair<int const ,_tagWaiting> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> ><std::pair<int const ,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> ><std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > ><std::allocator<std::pair<int const ,_tagObserverInfo> > >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > ><std::allocator<std::pair<int const ,_tagObserverInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::destroy<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::destroy<std::pair<int const ,_tagWaiting> >, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::destroy<std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::destroy<std::pair<int const ,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::destroy<std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAU?$pair@$$CBHU_tagObserverInfo@@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAU?$pair@$$CBHU_tagObserverInfo@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_at<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	3d 65 66 66 06	 cmp	 eax, 107374181		; 06666665H
  00010	0f 83 6e 01 00
	00		 jae	 $LN730@Insert_at

; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;

  00016	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00019	40		 inc	 eax
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  00023	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00025	3b c1		 cmp	 eax, ecx
  00027	75 0e		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  00029	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]

; 1870 : 			_Lmost() = _Newnode;

  0002e	89 18		 mov	 DWORD PTR [eax], ebx

; 1871 : 			_Rmost() = _Newnode;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00035	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  00037	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003b	74 0c		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  0003d	89 18		 mov	 DWORD PTR [eax], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0003f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1876 : 			if (_Wherenode == _Lmost())

  00041	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00043	75 11		 jne	 SHORT $LN11@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  00045	89 19		 mov	 DWORD PTR [ecx], ebx

; 1878 : 			}
; 1879 : 		else

  00047	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  00049	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0004c	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1882 : 			if (_Wherenode == _Rmost())

  0004e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00051	75 03		 jne	 SHORT $LN11@Insert_at

; 1883 : 				_Rmost() = _Newnode;

  00053	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00056	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00059	8b f3		 mov	 esi, ebx
  0005b	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0005f	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00065	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00068	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0006b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	75 74		 jne	 SHORT $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  00071	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  00074	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00078	74 71		 je	 SHORT $LN729@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0007a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0007d	75 0a		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  0007f	8b f0		 mov	 esi, eax

; 1906 : 						_Lrotate(_Pnode);

  00081	8b cf		 mov	 ecx, edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00096	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  0009a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000a2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	75 03		 jne	 SHORT $LN376@Insert_at

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN376@Insert_at:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000b3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000b9	8b 07		 mov	 eax, DWORD PTR [edi]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  000bb	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000be	75 0b		 jne	 SHORT $LN377@Insert_at

; 2148 : 			_Root() = _Pnode;

  000c0	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000c3	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000c6	e9 94 00 00 00	 jmp	 $LN728@Insert_at
$LN377@Insert_at:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000cb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  000ce	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d1	75 0b		 jne	 SHORT $LN379@Insert_at

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000d3	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000d6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000d9	e9 81 00 00 00	 jmp	 $LN728@Insert_at
$LN379@Insert_at:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000de	89 10		 mov	 DWORD PTR [eax], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000e0	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000e3	eb 7a		 jmp	 SHORT $LN728@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  000e5	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000e9	75 1a		 jne	 SHORT $LN17@Insert_at
$LN729@Insert_at:

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000eb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  000ef	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000fd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00100	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1926 : 					}
; 1927 : 				else

  00103	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00105	3b 30		 cmp	 esi, DWORD PTR [eax]
  00107	75 0a		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  00109	8b f0		 mov	 esi, eax

; 1932 : 						_Rrotate(_Pnode);

  0010b	8b cf		 mov	 ecx, edi
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  00113	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00116	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0011a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00124	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00127	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0012a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0012d	8b 02		 mov	 eax, DWORD PTR [edx]
  0012f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00132	8b 02		 mov	 eax, DWORD PTR [edx]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00134	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00138	75 03		 jne	 SHORT $LN575@Insert_at

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0013a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN575@Insert_at:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0013d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00140	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00143	8b 07		 mov	 eax, DWORD PTR [edi]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00145	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00148	75 05		 jne	 SHORT $LN576@Insert_at

; 2118 : 			_Root() = _Pnode;

  0014a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0014d	eb 0e		 jmp	 SHORT $LN579@Insert_at
$LN576@Insert_at:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0014f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00152	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00154	75 04		 jne	 SHORT $LN578@Insert_at

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00156	89 10		 mov	 DWORD PTR [eax], edx

; 2121 : 		else

  00158	eb 03		 jmp	 SHORT $LN579@Insert_at
$LN578@Insert_at:

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0015a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN579@Insert_at:

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0015d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN728@Insert_at:

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0015f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00162	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00165	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00169	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00176	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

  0017a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017d	89 18		 mov	 DWORD PTR [eax], ebx
  0017f	5b		 pop	 ebx

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}

  00180	5d		 pop	 ebp
  00181	c2 14 00	 ret	 20			; 00000014H
$LN730@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00184	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  00187	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1859 : 			_Xlength_error("map/set<T> too long");

  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00194	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN732@Insert_at:
$LN727@Insert_at:
  00199	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAU?$pair@$$CBHU_tagObserverInfo@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_at<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAAAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAAAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@@Z PROC ; std::forward<std::pair<int const ,_tagObserverInfo> &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAAAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int const ,_tagObserverInfo> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::pair<int const ,_tagObserverInfo>,std::pair<int,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 15		 je	 SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	0f 10 41 04	 movups	 xmm0, XMMWORD PTR [ecx+4]
  00015	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
  00019	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0001c	89 42 14	 mov	 DWORD PTR [edx+20], eax
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 919  : 		}

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHU_tagObserverInfo@@@std@@U?$pair@HU_tagObserverInfo@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::pair<int const ,_tagObserverInfo>,std::pair<int,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > > &,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > > &,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 146  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_NX@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >,bool,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAU?$pair@$$CBHU_tagWaiting@@@1@1@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$ = 20						; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAU?$pair@$$CBHU_tagWaiting@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_at<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT
; _this$ = ecx

; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 1856 : 		if (max_size() - 1 <= this->_Mysize())

  00008	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000b	3d c6 71 1c 07	 cmp	 eax, 119304646		; 071c71c6H
  00010	0f 83 6e 01 00
	00		 jae	 $LN730@Insert_at

; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;

  00016	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00019	40		 inc	 eax
  0001a	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001d	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00020	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())

  00023	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00025	3b c1		 cmp	 eax, ecx
  00027	75 0e		 jne	 SHORT $LN6@Insert_at

; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;

  00029	89 59 04	 mov	 DWORD PTR [ecx+4], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0002c	8b 07		 mov	 eax, DWORD PTR [edi]

; 1870 : 			_Lmost() = _Newnode;

  0002e	89 18		 mov	 DWORD PTR [eax], ebx

; 1871 : 			_Rmost() = _Newnode;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00035	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1872 : 			}
; 1873 : 		else if (_Addleft)

  00037	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0003b	74 0c		 je	 SHORT $LN8@Insert_at

; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;

  0003d	89 18		 mov	 DWORD PTR [eax], ebx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0003f	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1876 : 			if (_Wherenode == _Lmost())

  00041	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00043	75 11		 jne	 SHORT $LN11@Insert_at

; 1877 : 				_Lmost() = _Newnode;

  00045	89 19		 mov	 DWORD PTR [ecx], ebx

; 1878 : 			}
; 1879 : 		else

  00047	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;

  00049	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0004c	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1882 : 			if (_Wherenode == _Rmost())

  0004e	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00051	75 03		 jne	 SHORT $LN11@Insert_at

; 1883 : 				_Rmost() = _Newnode;

  00053	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
$LN11@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00056	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00059	8b f3		 mov	 esi, ebx
  0005b	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0005f	0f 85 0a 01 00
	00		 jne	 $LN3@Insert_at
$LL2@Insert_at:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00065	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00068	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))

  0006b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	75 74		 jne	 SHORT $LN12@Insert_at

; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =

  00071	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)

  00074	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00078	74 71		 je	 SHORT $LN729@Insert_at

; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))

  0007a	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0007d	75 0a		 jne	 SHORT $LN16@Insert_at

; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);

  0007f	8b f0		 mov	 esi, eax

; 1906 : 						_Lrotate(_Pnode);

  00081	8b cf		 mov	 ecx, edi
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate
$LN16@Insert_at:

; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =

  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  00090	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00093	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00096	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));

  0009a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  000a2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000a7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	75 03		 jne	 SHORT $LN376@Insert_at

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  000b0	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN376@Insert_at:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  000b3	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000b9	8b 07		 mov	 eax, DWORD PTR [edi]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  000bb	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000be	75 0b		 jne	 SHORT $LN377@Insert_at

; 2148 : 			_Root() = _Pnode;

  000c0	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000c3	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000c6	e9 94 00 00 00	 jmp	 $LN728@Insert_at
$LN377@Insert_at:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  000cb	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  000ce	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000d1	75 0b		 jne	 SHORT $LN379@Insert_at

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  000d3	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000d6	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000d9	e9 81 00 00 00	 jmp	 $LN728@Insert_at
$LN379@Insert_at:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  000de	89 10		 mov	 DWORD PTR [eax], edx

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  000e0	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1913 : 					}
; 1914 : 				}
; 1915 : 			else

  000e3	eb 7a		 jmp	 SHORT $LN728@Insert_at
$LN12@Insert_at:

; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)

  000e5	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  000e9	75 1a		 jne	 SHORT $LN17@Insert_at
$LN729@Insert_at:

; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;

  000eb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1922 : 					this->_Color(_Wherenode) = this->_Black;

  000ef	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  000f3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000f6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f9	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));

  000fd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00100	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 1926 : 					}
; 1927 : 				else

  00103	eb 5d		 jmp	 SHORT $LN18@Insert_at
$LN17@Insert_at:

; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))

  00105	3b 30		 cmp	 esi, DWORD PTR [eax]
  00107	75 0a		 jne	 SHORT $LN19@Insert_at

; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);

  00109	8b f0		 mov	 esi, eax

; 1932 : 						_Rrotate(_Pnode);

  0010b	8b cf		 mov	 ecx, edi
  0010d	56		 push	 esi
  0010e	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate
$LN19@Insert_at:

; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =

  00113	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00116	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =

  0011a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));

  00124	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00127	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  0012a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0012d	8b 02		 mov	 eax, DWORD PTR [edx]
  0012f	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00132	8b 02		 mov	 eax, DWORD PTR [edx]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00134	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00138	75 03		 jne	 SHORT $LN575@Insert_at

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  0013a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN575@Insert_at:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0013d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00140	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00143	8b 07		 mov	 eax, DWORD PTR [edi]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00145	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00148	75 05		 jne	 SHORT $LN576@Insert_at

; 2118 : 			_Root() = _Pnode;

  0014a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  0014d	eb 0e		 jmp	 SHORT $LN579@Insert_at
$LN576@Insert_at:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0014f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00152	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00154	75 04		 jne	 SHORT $LN578@Insert_at

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  00156	89 10		 mov	 DWORD PTR [eax], edx

; 2121 : 		else

  00158	eb 03		 jmp	 SHORT $LN579@Insert_at
$LN578@Insert_at:

; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0015a	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN579@Insert_at:

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0015d	89 0a		 mov	 DWORD PTR [edx], ecx
$LN728@Insert_at:

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0015f	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN18@Insert_at:

; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )

  00162	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00165	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00169	0f 84 f6 fe ff
	ff		 je	 $LL2@Insert_at
$LN3@Insert_at:

; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black

  0016f	8b 07		 mov	 eax, DWORD PTR [edi]
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00176	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 43   : 		: _Ptr(_Pnode)

  0017a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0017d	89 18		 mov	 DWORD PTR [eax], ebx
  0017f	5b		 pop	 ebx

; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}

  00180	5d		 pop	 ebp
  00181	c2 14 00	 ret	 20			; 00000014H
$LN730@Insert_at:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00184	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  00187	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0018c	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1859 : 			_Xlength_error("map/set<T> too long");

  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  00194	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN732@Insert_at:
$LN727@Insert_at:
  00199	cc		 int	 3
??$_Insert_at@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAU?$pair@$$CBHU_tagWaiting@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_at<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAAAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAAAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@@Z PROC ; std::forward<std::pair<int const ,_tagWaiting> &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAAAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int const ,_tagWaiting> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::pair<int const ,_tagWaiting>,std::pair<int,_tagWaiting> >, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0f		 je	 SHORT $LN13@construct
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  00011	0f 10 41 04	 movups	 xmm0, XMMWORD PTR [ecx+4]
  00015	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@U?$pair@$$CBHU_tagWaiting@@@std@@U?$pair@HU_tagWaiting@@@2@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::pair<int const ,_tagWaiting>,std::pair<int,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1><std::allocator<std::pair<int const ,_tagWaiting> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1><std::allocator<std::pair<int const ,_tagWaiting> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<int const ,_tagWaiting> > const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<int const ,_tagWaiting> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1><std::allocator<std::pair<int const ,_tagObserverInfo> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1><std::allocator<std::pair<int const ,_tagObserverInfo> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@0@ABV10@@Z PROC ; std::forward<std::allocator<std::pair<int const ,_tagObserverInfo> > const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@YAABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<std::pair<int const ,_tagObserverInfo> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z PROC ; std::forward<std::less<int> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU?$less@H@std@@@std@@YAABU?$less@H@0@ABU10@@Z ENDP ; std::forward<std::less<int> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagWaiting@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::pair<int const ,_tagWaiting> >, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagWaiting@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAPAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAPAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::pair<int const ,_tagWaiting> >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAPAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::pair<int const ,_tagObserverInfo> >, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@1@PAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAPAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAPAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::pair<int const ,_tagObserverInfo> >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAPAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv735 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_nohint<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 e8	 mov	 DWORD PTR _this$1$[ebp], eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b2 01		 mov	 dl, 1
  00034	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
  00037	8b f9		 mov	 edi, ecx
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00040	89 4d e4	 mov	 DWORD PTR tv735[ebp], ecx

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00046	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 30		 jne	 SHORT $LN3@Insert_noh
  0004f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00051	8a 75 0c	 mov	 dh, BYTE PTR __Leftish$[ebp]
$LL2@Insert_noh:

; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;

  00054	8b f8		 mov	 edi, eax

; 1808 : 			if (_Leftish)

  00056	84 f6		 test	 dh, dh
  00058	74 08		 je	 SHORT $LN5@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0005a	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  0005d	0f 9d c2	 setge	 dl

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  00060	eb 06		 jmp	 SHORT $LN336@Insert_noh
$LN5@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	0f 9c c2	 setl	 dl
$LN336@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  00068	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  0006b	84 d2		 test	 dl, dl
  0006d	74 04		 je	 SHORT $LN16@Insert_noh
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
  00071	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  00073	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN17@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	74 d8		 je	 SHORT $LL2@Insert_noh
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR tv735[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

  0007f	8b f7		 mov	 esi, edi
  00081	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)

  00084	84 d2		 test	 dl, dl
  00086	74 41		 je	 SHORT $LN12@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00088	3b 39		 cmp	 edi, DWORD PTR [ecx]

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  0008a	75 32		 jne	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008c	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0008f	53		 push	 ebx
  00090	57		 push	 edi
  00091	6a 01		 push	 1
$LN337@Insert_noh:
  00093	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00096	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAU?$pair@$$CBHU_tagObserverInfo@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_at<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000a6	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000be	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  000c1	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator--
  000c6	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000c9	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000cc	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000cf	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  000d1	7d 1b		 jge	 SHORT $LN13@Insert_noh

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000d3	53		 push	 ebx
  000d4	57		 push	 edi
  000d5	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  000d8	eb b9		 jmp	 SHORT $LN337@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000da	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1847 : 		_RERAISE;

  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN338@Insert_noh:
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000ee	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000f6	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f9	89 30		 mov	 DWORD PTR [eax], esi

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000fb	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 10 00	 ret	 16			; 00000010H
$LN335@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_nohint<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode<std::pair<int,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode0
  00009	8b d0		 mov	 edx, eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000b	8d 72 10	 lea	 esi, DWORD PTR [edx+16]

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0000e	66 c7 42 0c 00
	00		 mov	 WORD PTR [edx+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00014	85 f6		 test	 esi, esi
  00016	74 17		 je	 SHORT $LN50@Buynode
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00018	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	89 0e		 mov	 DWORD PTR [esi], ecx

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  0001f	0f 10 40 04	 movups	 xmm0, XMMWORD PTR [eax+4]
  00023	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0
  00027	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002a	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 902  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
$LN50@Buynode:
  0002f	5e		 pop	 esi

; 903  : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??$_Buynode@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode<std::pair<int,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@HU_tagObserverInfo@@@std@@@std@@YA$$QAU?$pair@HU_tagObserverInfo@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HU_tagObserverInfo@@@std@@@std@@YA$$QAU?$pair@HU_tagObserverInfo@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,_tagObserverInfo> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HU_tagObserverInfo@@@std@@@std@@YA$$QAU?$pair@HU_tagObserverInfo@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAHAAU_tagObserverInfo@@X@?$pair@HU_tagObserverInfo@@@std@@QAE@AAHAAU_tagObserverInfo@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_tagObserverInfo@@X@?$pair@HU_tagObserverInfo@@@std@@QAE@AAHAAU_tagObserverInfo@@@Z PROC ; std::pair<int,_tagObserverInfo>::pair<int,_tagObserverInfo><int &,_tagObserverInfo &,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  00014	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00017	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 146  : 		}

  0001a	8b c1		 mov	 eax, ecx
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??$?0AAHAAU_tagObserverInfo@@X@?$pair@HU_tagObserverInfo@@@std@@QAE@AAHAAU_tagObserverInfo@@@Z ENDP ; std::pair<int,_tagObserverInfo>::pair<int,_tagObserverInfo><int &,_tagObserverInfo &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_tagObserverInfo@@@std@@YAAAU_tagObserverInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_tagObserverInfo@@@std@@YAAAU_tagObserverInfo@@AAU1@@Z PROC ; std::forward<_tagObserverInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_tagObserverInfo@@@std@@YAAAU_tagObserverInfo@@AAU1@@Z ENDP ; std::forward<_tagObserverInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
_TEXT	SEGMENT
tv735 = -28						; size = 4
_this$1$ = -24						; size = 4
__Addleft$2 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
$T3 = 12						; size = 4
__Where$4 = 12						; size = 4
__Leftish$ = 12						; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_nohint<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT
; _this$ = ecx

; 1799 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 e8	 mov	 DWORD PTR _this$1$[ebp], eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00030	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00032	b2 01		 mov	 dl, 1
  00034	8b 5d 10	 mov	 ebx, DWORD PTR __Val$[ebp]
  00037	8b f9		 mov	 edi, ecx
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00040	89 4d e4	 mov	 DWORD PTR tv735[ebp], ecx

; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty

  00046	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00049	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004d	75 30		 jne	 SHORT $LN3@Insert_noh
  0004f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00051	8a 75 0c	 mov	 dh, BYTE PTR __Leftish$[ebp]
$LL2@Insert_noh:

; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;

  00054	8b f8		 mov	 edi, eax

; 1808 : 			if (_Leftish)

  00056	84 f6		 test	 dh, dh
  00058	74 08		 je	 SHORT $LN5@Insert_noh
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0005a	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),

  0005d	0f 9d c2	 setge	 dl

; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else

  00060	eb 06		 jmp	 SHORT $LN336@Insert_noh
$LN5@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	0f 9c c2	 setl	 dl
$LN336@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),

  00068	88 55 ec	 mov	 BYTE PTR __Addleft$2[ebp], dl

; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)

  0006b	84 d2		 test	 dl, dl
  0006d	74 04		 je	 SHORT $LN16@Insert_noh
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
  00071	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  00073	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN17@Insert_noh:

; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))

  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	74 d8		 je	 SHORT $LL2@Insert_noh
  0007c	8b 4d e4	 mov	 ecx, DWORD PTR tv735[ebp]
$LN3@Insert_noh:

; 43   : 		: _Ptr(_Pnode)

  0007f	8b f7		 mov	 esi, edi
  00081	89 75 0c	 mov	 DWORD PTR __Where$4[ebp], esi

; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)

  00084	84 d2		 test	 dl, dl
  00086	74 41		 je	 SHORT $LN12@Insert_noh

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00088	3b 39		 cmp	 edi, DWORD PTR [ecx]

; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())

  0008a	75 32		 jne	 SHORT $LN11@Insert_noh

; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008c	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  0008f	53		 push	 ebx
  00090	57		 push	 edi
  00091	6a 01		 push	 1
$LN337@Insert_noh:
  00093	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00096	8d 45 0c	 lea	 eax, DWORD PTR $T3[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAU?$pair@$$CBHU_tagWaiting@@@1@1@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_at<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000a6	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b4	59		 pop	 ecx
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 10 00	 ret	 16			; 00000010H
$LN11@Insert_noh:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  000be	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$4[ebp]
  000c1	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator--
  000c6	8b 75 0c	 mov	 esi, DWORD PTR __Where$4[ebp]
$LN12@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000c9	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000cc	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  000cf	3b 03		 cmp	 eax, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  000d1	7d 1b		 jge	 SHORT $LN13@Insert_noh

; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  000d3	53		 push	 ebx
  000d4	57		 push	 edi
  000d5	ff 75 ec	 push	 DWORD PTR __Addleft$2[ebp]
  000d8	eb b9		 jmp	 SHORT $LN337@Insert_noh
__catch$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000da	ff 75 14	 push	 DWORD PTR __Newnode$[ebp]
  000dd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000e2	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1847 : 		_RERAISE;

  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN338@Insert_noh:
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000ee	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  000f6	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  000f9	89 30		 mov	 DWORD PTR [eax], esi

; 144  : 				second(_STD forward<_Other2>(_Val2))

  000fb	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1849 : 		}

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 10 00	 ret	 16			; 00000010H
$LN335@Insert_noh:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_nohint<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Buynode@U?$pair@HU_tagWaiting@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@U?$pair@HU_tagWaiting@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode<std::pair<int,_tagWaiting> >, COMDAT
; _this$ = ecx

; 887  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 888  : 		_Nodeptr _Pnode = _Buynode0();

  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode0

; 602  : 		return ((reference)_Pnode->_Myval);

  00009	8d 70 10	 lea	 esi, DWORD PTR [eax+16]

; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;

  0000c	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0f		 je	 SHORT $LN50@Buynode
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00016	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00019	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001b	89 0e		 mov	 DWORD PTR [esi], ecx

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  0001d	0f 10 42 04	 movups	 xmm0, XMMWORD PTR [edx+4]
  00021	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0
$LN50@Buynode:
  00025	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 903  : 		}

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??$_Buynode@U?$pair@HU_tagWaiting@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode<std::pair<int,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$pair@HU_tagWaiting@@@std@@@std@@YA$$QAU?$pair@HU_tagWaiting@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$pair@HU_tagWaiting@@@std@@@std@@YA$$QAU?$pair@HU_tagWaiting@@@0@AAU10@@Z PROC ; std::forward<std::pair<int,_tagWaiting> >, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U?$pair@HU_tagWaiting@@@std@@@std@@YA$$QAU?$pair@HU_tagWaiting@@@0@AAU10@@Z ENDP ; std::forward<std::pair<int,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AAHAAU_tagWaiting@@X@?$pair@HU_tagWaiting@@@std@@QAE@AAHAAU_tagWaiting@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAHAAU_tagWaiting@@X@?$pair@HU_tagWaiting@@@std@@QAE@AAHAAU_tagWaiting@@@Z PROC ; std::pair<int,_tagWaiting>::pair<int,_tagWaiting><int &,_tagWaiting &,void>, COMDAT
; _this$ = ecx

; 145  : 		{	// construct from moved values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 146  : 		}

  00010	8b c1		 mov	 eax, ecx
  00012	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
??$?0AAHAAU_tagWaiting@@X@?$pair@HU_tagWaiting@@@std@@QAE@AAHAAU_tagWaiting@@@Z ENDP ; std::pair<int,_tagWaiting>::pair<int,_tagWaiting><int &,_tagWaiting &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_tagWaiting@@@std@@YAAAU_tagWaiting@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_tagWaiting@@@std@@YAAAU_tagWaiting@@AAU1@@Z PROC ; std::forward<_tagWaiting &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_tagWaiting@@@std@@YAAAU_tagWaiting@@AAU1@@Z ENDP ; std::forward<_tagWaiting &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAH@std@@YAAAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAH@std@@YAAAHAAH@Z PROC			; std::forward<int &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAH@std@@YAAAHAAH@Z ENDP			; std::forward<int &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::construct<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHU_tagWaiting@@@?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHU_tagWaiting@@@?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_tagWaiting@@@1@@Z PROC ; std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0>::_Kfn<int const ,_tagWaiting>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHU_tagWaiting@@@?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_tagWaiting@@@1@@Z ENDP ; std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0>::_Kfn<int const ,_tagWaiting>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_tagWaiting> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_tagWaiting> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??$_Kfn@$$CBHU_tagObserverInfo@@@?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBHU_tagObserverInfo@@@?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_tagObserverInfo@@@1@@Z PROC ; std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0>::_Kfn<int const ,_tagObserverInfo>, COMDAT

; 61   : 		{	// extract key from element value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 63   : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Kfn@$$CBHU_tagObserverInfo@@@?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@SAABHABU?$pair@$$CBHU_tagObserverInfo@@@1@@Z ENDP ; std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0>::_Kfn<int const ,_tagObserverInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
_<_Val2_1>$ = 20					; size = 4
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_tagObserverInfo> > const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 568  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@H@std@@U_One_then_variadic_args_t@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@H@1@$$QAU21@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1><std::less<int> const &,std::_One_then_variadic_args_t,std::allocator<std::pair<int const ,_tagObserverInfo> > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lbound<int>, COMDAT
; _this$ = ecx

; 2087 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN72@Lbound
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL2@Lbound:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN4@Lbound

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Lbound:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL2@Lbound
$LN72@Lbound:

; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate

  00027	8b c2		 mov	 eax, edx

; 2101 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lbound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@ABH@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lbound<int>, COMDAT
; _this$ = ecx

; 2087 : 		{	// find leftmost node not less than _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN72@Lbound
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL2@Lbound:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN4@Lbound

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN5@Lbound
$LN4@Lbound:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Lbound:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL2@Lbound
$LN72@Lbound:

; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate

  00027	8b c2		 mov	 eax, edx

; 2101 : 		}

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??$_Lbound@H@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lbound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::pair<int const ,_tagWaiting> >, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHU_tagWaiting@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagWaiting@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::destroy<std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAPAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAPAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,_tagWaiting> >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@YAPAU?$pair@$$CBHU_tagWaiting@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_tagWaiting@@@std@@@std@@SAPAU?$pair@$$CBHU_tagWaiting@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_tagWaiting@@@std@@@std@@SAPAU?$pair@$$CBHU_tagWaiting@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<int const ,_tagWaiting> *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_tagWaiting@@@std@@@std@@SAPAU?$pair@$$CBHU_tagWaiting@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<int const ,_tagWaiting> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::pair<int const ,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U?$pair@$$CBHU_tagObserverInfo@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHU_tagObserverInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::destroy<std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAPAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAPAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@@Z PROC ; std::addressof<std::pair<int const ,_tagObserverInfo> >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@YAPAU?$pair@$$CBHU_tagObserverInfo@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@SAPAU?$pair@$$CBHU_tagObserverInfo@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@SAPAU?$pair@$$CBHU_tagObserverInfo@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<int const ,_tagObserverInfo> *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@SAPAU?$pair@$$CBHU_tagObserverInfo@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<int const ,_tagObserverInfo> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GCServerMsgStringSendEx@@YAXHEPADZZ
_TEXT	SEGMENT
_szTmp$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_type$ = 12						; size = 1
_szFormat$ = 16						; size = 4
?GCServerMsgStringSendEx@@YAXHEPADZZ PROC		; GCServerMsgStringSendEx, COMDAT

; 1192 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00013	8d 45 14	 lea	 eax, DWORD PTR _szFormat$[ebp+4]
  00016	50		 push	 eax
  00017	6a 00		 push	 0
  00019	ff 75 10	 push	 DWORD PTR _szFormat$[ebp]
  0001c	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00022	6a ff		 push	 -1
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	ff 70 04	 push	 DWORD PTR [eax+4]
  0002f	83 c9 01	 or	 ecx, 1
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 1200 : 	GCServerMsgStringSend(szTmp, aIndex, type);

  00038	ff 75 0c	 push	 DWORD PTR _type$[ebp]
  0003b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  00041	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1201 : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	83 c4 28	 add	 esp, 40			; 00000028H
  00050	33 cd		 xor	 ecx, ebp
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?GCServerMsgStringSendEx@@YAXHEPADZZ ENDP		; GCServerMsgStringSendEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::insert<std::pair<int,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 1092 : 		{	// try to insert node with value _Val, favoring right side

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00004	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode<std::pair<int,_tagObserverInfo> >

; 1094 : 		return (_Insert_nohint(false,

  0000e	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000f	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_nohint<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	5f		 pop	 edi

; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$insert@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::insert<std::pair<int,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0HU_tagObserverInfo@@X@?$pair@$$CBHU_tagObserverInfo@@@std@@QAE@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HU_tagObserverInfo@@X@?$pair@$$CBHU_tagObserverInfo@@@std@@QAE@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z PROC ; std::pair<int const ,_tagObserverInfo>::pair<int const ,_tagObserverInfo><int,_tagObserverInfo,void>, COMDAT
; _this$ = ecx

; 158  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 157  : 			second(_STD forward<_Other2>(_Right.second))

  0000a	0f 10 42 04	 movups	 xmm0, XMMWORD PTR [edx+4]
  0000e	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  00012	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00015	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 159  : 		}

  00018	8b c1		 mov	 eax, ecx
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??$?0HU_tagObserverInfo@@X@?$pair@$$CBHU_tagObserverInfo@@@std@@QAE@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ENDP ; std::pair<int const ,_tagObserverInfo>::pair<int const ,_tagObserverInfo><int,_tagObserverInfo,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$make_pair@AAHAAU_tagObserverInfo@@@std@@YA?AU?$pair@HU_tagObserverInfo@@@0@AAHAAU_tagObserverInfo@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@AAHAAU_tagObserverInfo@@@std@@YA?AU?$pair@HU_tagObserverInfo@@@0@AAHAAU_tagObserverInfo@@@Z PROC ; std::make_pair<int &,_tagObserverInfo &>, COMDAT

; 267  : 	{	// return pair composed from arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Val2$[ebp]
  00010	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00013	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00016	0f 11 40 04	 movups	 XMMWORD PTR [eax+4], xmm0
  0001a	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 268  : 	typedef pair<typename _Unrefwrap<_Ty1>::type,
; 269  : 		typename _Unrefwrap<_Ty2>::type> _Mypair;
; 270  : 	return (_Mypair(_STD forward<_Ty1>(_Val1),
; 271  : 		_STD forward<_Ty2>(_Val2)));
; 272  : 	}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$make_pair@AAHAAU_tagObserverInfo@@@std@@YA?AU?$pair@HU_tagObserverInfo@@@0@AAHAAU_tagObserverInfo@@@Z ENDP ; std::make_pair<int &,_tagObserverInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator--, COMDAT
; _this$ = ecx

; 422  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator--

; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 425  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++, COMDAT
; _this$ = ecx

; 415  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++

; 417  : 		++*this;
; 418  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 419  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++, COMDAT
; _this$ = ecx

; 409  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++

; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 412  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_tagObserverInfo@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_tagObserverInfo@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator->, COMDAT
; _this$ = ecx

; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_tagObserverInfo@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_tagObserverInfo@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_tagObserverInfo@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator*, COMDAT
; _this$ = ecx

; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_tagObserverInfo@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >, COMDAT
; _this$ = ecx

; 382  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 383  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator!=, COMDAT
; _this$ = ecx

; 338  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 340  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 335  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_tagObserverInfo@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_tagObserverInfo@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator*, COMDAT
; _this$ = ecx

; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_tagObserverInfo@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:

; 608  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:

; 615  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??$insert@U?$pair@HU_tagWaiting@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HU_tagWaiting@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::insert<std::pair<int,_tagWaiting> >, COMDAT
; _this$ = ecx

; 1092 : 		{	// try to insert node with value _Val, favoring right side

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00004	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_tagWaiting@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode<std::pair<int,_tagWaiting> >

; 1094 : 		return (_Insert_nohint(false,

  0000e	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  0000f	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	6a 00		 push	 0
  00017	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001a	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_nohint<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
  0001f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00022	5f		 pop	 edi

; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$insert@U?$pair@HU_tagWaiting@@@std@@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::insert<std::pair<int,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0HU_tagWaiting@@X@?$pair@$$CBHU_tagWaiting@@@std@@QAE@$$QAU?$pair@HU_tagWaiting@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0HU_tagWaiting@@X@?$pair@$$CBHU_tagWaiting@@@std@@QAE@$$QAU?$pair@HU_tagWaiting@@@1@@Z PROC ; std::pair<int const ,_tagWaiting>::pair<int const ,_tagWaiting><int,_tagWaiting,void>, COMDAT
; _this$ = ecx

; 158  : 		{	// construct from moved compatible pair

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  : 		: first(_STD forward<_Other1>(_Right.first)),

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 159  : 		}

  0000a	8b c1		 mov	 eax, ecx
  0000c	0f 10 42 04	 movups	 xmm0, XMMWORD PTR [edx+4]
  00010	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??$?0HU_tagWaiting@@X@?$pair@$$CBHU_tagWaiting@@@std@@QAE@$$QAU?$pair@HU_tagWaiting@@@1@@Z ENDP ; std::pair<int const ,_tagWaiting>::pair<int const ,_tagWaiting><int,_tagWaiting,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$make_pair@AAHAAU_tagWaiting@@@std@@YA?AU?$pair@HU_tagWaiting@@@0@AAHAAU_tagWaiting@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 4
??$make_pair@AAHAAU_tagWaiting@@@std@@YA?AU?$pair@HU_tagWaiting@@@0@AAHAAU_tagWaiting@@@Z PROC ; std::make_pair<int &,_tagWaiting &>, COMDAT

; 267  : 	{	// return pair composed from arguments

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0000d	8b 4d 10	 mov	 ecx, DWORD PTR __Val2$[ebp]
  00010	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00013	0f 11 40 04	 movups	 XMMWORD PTR [eax+4], xmm0

; 268  : 	typedef pair<typename _Unrefwrap<_Ty1>::type,
; 269  : 		typename _Unrefwrap<_Ty2>::type> _Mypair;
; 270  : 	return (_Mypair(_STD forward<_Ty1>(_Val1),
; 271  : 		_STD forward<_Ty2>(_Val2)));
; 272  : 	}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$make_pair@AAHAAU_tagWaiting@@@std@@YA?AU?$pair@HU_tagWaiting@@@0@AAHAAU_tagWaiting@@@Z ENDP ; std::make_pair<int &,_tagWaiting &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator--, COMDAT
; _this$ = ecx

; 422  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator--

; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 425  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++, COMDAT
; _this$ = ecx

; 415  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++

; 417  : 		++*this;
; 418  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 419  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++, COMDAT
; _this$ = ecx

; 409  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++

; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 412  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_tagWaiting@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_tagWaiting@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator->, COMDAT
; _this$ = ecx

; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHU_tagWaiting@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_tagWaiting@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_tagWaiting@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator*, COMDAT
; _this$ = ecx

; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHU_tagWaiting@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >, COMDAT
; _this$ = ecx

; 382  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 383  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator!=, COMDAT
; _this$ = ecx

; 338  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 339  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 340  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator==, COMDAT
; _this$ = ecx

; 322  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 335  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator--, COMDAT
; _this$ = ecx

; 283  : 		{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator--

; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 312  : 		}

  0000b	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++, COMDAT
; _this$ = ecx

; 276  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 277  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00009	89 16		 mov	 DWORD PTR [esi], edx

; 271  : 		++(*(_Mybase *)this);

  0000b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++

; 278  : 		++*this;
; 279  : 		return (_Tmp);

  00010	8b c6		 mov	 eax, esi
  00012	5e		 pop	 esi

; 280  : 		}

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++, COMDAT
; _this$ = ecx

; 256  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 273  : 		}

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_tagWaiting@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_tagWaiting@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator*, COMDAT
; _this$ = ecx

; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHU_tagWaiting@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 123  : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 124  : 		}

  00002	c3		 ret	 0
?_Mynode@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 84   : 		{	// predecrement

  00000	8b d1		 mov	 edx, ecx

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 85   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	74 08		 je	 SHORT $LN4@operator

; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost

  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	89 02		 mov	 DWORD PTR [edx], eax

; 100  : 			}
; 101  : 		return (*this);

  0000f	8b c2		 mov	 eax, edx

; 102  : 		}

  00011	c3		 ret	 0
$LN4@operator:

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]

; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))

  00014	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00018	75 19		 jne	 SHORT $LN40@operator

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0001a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  0001d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00021	75 36		 jne	 SHORT $LN23@operator
$LL22@operator:

; 608  : 			_Pnode = _Right(_Pnode);

  00023	8b c8		 mov	 ecx, eax

; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00028	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002c	74 f5		 je	 SHORT $LL22@operator

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 100  : 			}
; 101  : 		return (*this);

  00030	8b c2		 mov	 eax, edx

; 102  : 		}

  00032	c3		 ret	 0
$LN40@operator:

; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))

  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0003a	75 15		 jne	 SHORT $LN3@operator
  0003c	0f 1f 40 00	 npad	 4
$LL2@operator:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00044	75 0b		 jne	 SHORT $LN3@operator

; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0004b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0004f	74 ef		 je	 SHORT $LL2@operator
$LN3@operator:

; 96   : 			if (_Mytree::_Isnil(_Ptr))

  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00057	75 02		 jne	 SHORT $LN47@operator
$LN23@operator:

; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head

  00059	89 0a		 mov	 DWORD PTR [edx], ecx
$LN47@operator:

; 100  : 			}
; 101  : 		return (*this);

  0005b	8b c2		 mov	 eax, edx

; 102  : 		}

  0005d	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 59   : 		{	// preincrement

  00000	8b d1		 mov	 edx, ecx

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00002	8b 02		 mov	 eax, DWORD PTR [edx]

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00004	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00008	75 42		 jne	 SHORT $LN41@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0000a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0000d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00011	75 1c		 jne	 SHORT $LN34@operator

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00013	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	75 0f		 jne	 SHORT $LN19@operator
  0001b	0f 1f 44 00 00	 npad	 5
$LL18@operator:

; 615  : 			_Pnode = _Left(_Pnode);

  00020	8b c8		 mov	 ecx, eax

; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00022	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 f6		 je	 SHORT $LL18@operator
$LN19@operator:

; 63   : 			_Ptr = _Mytree::_Min(

  0002a	89 0a		 mov	 DWORD PTR [edx], ecx

; 72   : 			}
; 73   : 		return (*this);

  0002c	8b c2		 mov	 eax, edx

; 74   : 		}

  0002e	c3		 ret	 0
$LN34@operator:

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00036	75 12		 jne	 SHORT $LN3@operator
$LL2@operator:
  00038	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003a	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0003d	75 0b		 jne	 SHORT $LN3@operator

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0003f	89 02		 mov	 DWORD PTR [edx], eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00048	74 ee		 je	 SHORT $LL2@operator
$LN3@operator:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  0004a	89 02		 mov	 DWORD PTR [edx], eax
$LN41@operator:

; 72   : 			}
; 73   : 		return (*this);

  0004c	8b c2		 mov	 eax, edx

; 74   : 		}

  0004e	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_NewPVP@@YAXXZ
text$yd	SEGMENT
??__Fg_NewPVP@@YAXXZ PROC				; `dynamic atexit destructor for 'g_NewPVP'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00005	e9 00 00 00 00	 jmp	 ??1CNewPVP@@UAE@XZ	; CNewPVP::~CNewPVP
??__Fg_NewPVP@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_NewPVP''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ??__Eg_NewPVP@@YAXXZ
text$di	SEGMENT
??__Eg_NewPVP@@YAXXZ PROC				; `dynamic initializer for 'g_NewPVP'', COMDAT

; 25   : CNewPVP g_NewPVP;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00005	e8 00 00 00 00	 call	 ??0CNewPVP@@QAE@XZ	; CNewPVP::CNewPVP
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_NewPVP@@YAXXZ ; `dynamic atexit destructor for 'g_NewPVP''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_NewPVP@@YAXXZ ENDP				; `dynamic initializer for 'g_NewPVP''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?OnDuelChannelLeave@@YAHPAU_tagPMSG_REQ_DUEL_LEAVECNANNEL@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?OnDuelChannelLeave@@YAHPAU_tagPMSG_REQ_DUEL_LEAVECNANNEL@@H@Z PROC ; OnDuelChannelLeave, COMDAT

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1404 : 	if( gObj[aIndex].CloseType != -1 )	return ENEWPVP::E_DISCONNECT;

  00003	69 4d 0c 40 27
	00 00		 imul	 ecx, DWORD PTR _aIndex$[ebp], 10048
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000f	03 c1		 add	 eax, ecx
  00011	80 78 0d ff	 cmp	 BYTE PTR [eax+13], -1
  00015	74 07		 je	 SHORT $LN2@OnDuelChan
  00017	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH

; 1406 : 	if( nRet != ENEWPVP::E_NO_ERROR )	return nRet;
; 1407 : 	return ENEWPVP::E_NO_ERROR;
; 1408 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN2@OnDuelChan:

; 1405 : 	int nRet = g_NewPVP.LeaveChannel(lpMsg->nChannelId, gObj[aIndex]);

  0001e	50		 push	 eax
  0001f	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00027	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?LeaveChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z ; CNewPVP::LeaveChannel

; 1406 : 	if( nRet != ENEWPVP::E_NO_ERROR )	return nRet;
; 1407 : 	return ENEWPVP::E_NO_ERROR;
; 1408 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?OnDuelChannelLeave@@YAHPAU_tagPMSG_REQ_DUEL_LEAVECNANNEL@@H@Z ENDP ; OnDuelChannelLeave
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?OnDuelChannelJoin@@YAHPAU_tagPMSG_REQ_DUEL_JOINCNANNEL@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?OnDuelChannelJoin@@YAHPAU_tagPMSG_REQ_DUEL_JOINCNANNEL@@H@Z PROC ; OnDuelChannelJoin, COMDAT

; 1395 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1396 : 	if( gObj[aIndex].CloseType != -1 )	return ENEWPVP::E_DISCONNECT;

  00003	69 4d 0c 40 27
	00 00		 imul	 ecx, DWORD PTR _aIndex$[ebp], 10048
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000f	03 c1		 add	 eax, ecx
  00011	80 78 0d ff	 cmp	 BYTE PTR [eax+13], -1
  00015	74 07		 je	 SHORT $LN2@OnDuelChan
  00017	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH

; 1398 : 	if( nRet != ENEWPVP::E_NO_ERROR )	return nRet;
; 1399 : 	return ENEWPVP::E_NO_ERROR;
; 1400 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN2@OnDuelChan:

; 1397 : 	int nRet = g_NewPVP.JoinChannel(lpMsg->nChannelId, gObj[aIndex]);

  0001e	50		 push	 eax
  0001f	8b 45 08	 mov	 eax, DWORD PTR _lpMsg$[ebp]
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00027	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?JoinChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z ; CNewPVP::JoinChannel

; 1398 : 	if( nRet != ENEWPVP::E_NO_ERROR )	return nRet;
; 1399 : 	return ENEWPVP::E_NO_ERROR;
; 1400 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?OnDuelChannelJoin@@YAHPAU_tagPMSG_REQ_DUEL_JOINCNANNEL@@H@Z ENDP ; OnDuelChannelJoin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?OnCGLeaveDuel@@YAHPAU_tagPMSG_REQ_DUEL_EXIT@@H@Z
_TEXT	SEGMENT
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?OnCGLeaveDuel@@YAHPAU_tagPMSG_REQ_DUEL_EXIT@@H@Z PROC	; OnCGLeaveDuel, COMDAT

; 1387 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1388 : 	if( gObj[aIndex].CloseType != -1 )	return ENEWPVP::E_DISCONNECT;

  00003	69 4d 0c 40 27
	00 00		 imul	 ecx, DWORD PTR _aIndex$[ebp], 10048
  0000a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000f	03 c1		 add	 eax, ecx
  00011	80 78 0d ff	 cmp	 BYTE PTR [eax+13], -1
  00015	74 07		 je	 SHORT $LN2@OnCGLeaveD
  00017	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH

; 1390 : 	if( nRet != ENEWPVP::E_NO_ERROR )	return nRet;
; 1391 : 	return ENEWPVP::E_NO_ERROR;
; 1392 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
$LN2@OnCGLeaveD:

; 1389 : 	int nRet = g_NewPVP.Leave(gObj[aIndex]);

  0001e	50		 push	 eax
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00024	e8 00 00 00 00	 call	 ?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::Leave

; 1390 : 	if( nRet != ENEWPVP::E_NO_ERROR )	return nRet;
; 1391 : 	return ENEWPVP::E_NO_ERROR;
; 1392 : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?OnCGLeaveDuel@@YAHPAU_tagPMSG_REQ_DUEL_EXIT@@H@Z ENDP	; OnCGLeaveDuel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?OnCGAnswerDuel@@YAHPAU_tagPMSG_ANS_DUEL_ANSWER@@H@Z
_TEXT	SEGMENT
_lpMsg$GSCopy$1$ = -28					; size = 4
_nRet$1$ = -28						; size = 4
_res$ = -24						; size = 17
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?OnCGAnswerDuel@@YAHPAU_tagPMSG_ANS_DUEL_ANSWER@@H@Z PROC ; OnCGAnswerDuel, COMDAT

; 1324 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _aIndex$[ebp]
  00017	56		 push	 esi

; 1325 : 	LPOBJ lpRequester = NULL;
; 1326 : 	LPOBJ lpResponsor = (LPOBJ)&gObj[aIndex];
; 1327 : 	int nRequester = MAKEWORD(lpMsg->NumberL, lpMsg->NumberH);

  00018	0f b6 41 05	 movzx	 eax, BYTE PTR [ecx+5]
  0001c	66 c1 e0 08	 shl	 ax, 8
  00020	57		 push	 edi
  00021	0f b7 f8	 movzx	 edi, ax
  00024	0f b6 41 06	 movzx	 eax, BYTE PTR [ecx+6]
  00028	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  0002e	0b f8		 or	 edi, eax

; 1328 : 
; 1329 : 	if( !gObjIsConnected(nRequester) )	return ENEWPVP::E_DISCONNECT;

  00030	57		 push	 edi
  00031	89 4d e4	 mov	 DWORD PTR _lpMsg$GSCopy$1$[ebp], ecx
  00034	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	75 16		 jne	 SHORT $LN4@OnCGAnswer
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0004d	5b		 pop	 ebx

; 1384 : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN4@OnCGAnswer:
  0005c	0f 57 c0	 xorps	 xmm0, xmm0

; 1330 : 	lpRequester = (LPOBJ)&gObj[nRequester];

  0005f	69 ff 40 27 00
	00		 imul	 edi, edi, 10048

; 1331 : 
; 1332 : 	PMSG_ANS_DUEL_INVITE res = {0};

  00065	0f 11 45 e9	 movups	 XMMWORD PTR _res$[ebp+1], xmm0

; 1333 : 	res.h.c = PMHC_BYTE;

  00069	c7 45 e8 c1 11
	aa 01		 mov	 DWORD PTR _res$[ebp], 27922881 ; 01aa11c1H

; 1334 : 	res.h.size = sizeof(PMSG_ANS_DUEL_INVITE);
; 1335 : 	res.h.headcode = 0xAA;
; 1336 : 	res.h.subcode = 0x01;	
; 1337 : 	memcpy(res.szName, lpResponsor->Name, MAX_IDSTRING);

  00070	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00075	66 0f d6 45 ef	 movq	 QWORD PTR _res$[ebp+7], xmm0
  0007a	66 8b 46 65	 mov	 ax, WORD PTR [esi+101]
  0007e	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00084	66 89 45 f7	 mov	 WORD PTR _res$[ebp+15], ax

; 1338 : 	if( lpResponsor->CloseType != -1 )

  00088	80 7e 0d ff	 cmp	 BYTE PTR [esi+13], -1
  0008c	74 3a		 je	 SHORT $LN5@OnCGAnswer

; 1339 : 	{
; 1340 : 		g_NewPVP.Cancel(*lpRequester, *lpResponsor, FALSE);

  0008e	6a 00		 push	 0
  00090	56		 push	 esi
  00091	57		 push	 edi
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00097	e8 00 00 00 00	 call	 ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::Cancel

; 1341 : 		res.nResult = ENEWPVP::E_CONNECTION_CLOSING;
; 1342 : 		DataSend(aIndex, (LPBYTE)&res, res.h.size);

  0009c	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  000a0	50		 push	 eax
  000a1	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  000a4	c6 45 ec 05	 mov	 BYTE PTR _res$[ebp+4], 5
  000a8	50		 push	 eax
  000a9	53		 push	 ebx
  000aa	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1343 : 		return ENEWPVP::E_CONNECTION_CLOSING;

  000b2	b8 05 00 00 00	 mov	 eax, 5
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	5b		 pop	 ebx

; 1384 : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	33 cd		 xor	 ecx, ebp
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN5@OnCGAnswer:

; 1344 : 	}
; 1345 : 	if( !lpMsg->bDuelOK )

  000c8	8b 45 e4	 mov	 eax, DWORD PTR _lpMsg$GSCopy$1$[ebp]
  000cb	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  000cf	75 3a		 jne	 SHORT $LN6@OnCGAnswer

; 1346 : 	{
; 1347 : 		g_NewPVP.Cancel(*lpRequester, *lpResponsor, FALSE);

  000d1	6a 00		 push	 0
  000d3	56		 push	 esi
  000d4	57		 push	 edi
  000d5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  000da	e8 00 00 00 00	 call	 ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::Cancel

; 1348 : 		res.nResult = ENEWPVP::E_REFUSE_INVATE;
; 1349 : 		DataSend(aIndex, (LPBYTE)&res, res.h.size);

  000df	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  000e3	50		 push	 eax
  000e4	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  000e7	c6 45 ec 0f	 mov	 BYTE PTR _res$[ebp+4], 15 ; 0000000fH
  000eb	50		 push	 eax
  000ec	53		 push	 ebx
  000ed	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1350 : 		return ENEWPVP::E_REFUSE_INVATE;

  000f5	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	5b		 pop	 ebx

; 1384 : }

  000fd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00100	33 cd		 xor	 ecx, ebp
  00102	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
$LN6@OnCGAnswer:

; 1351 : 	}
; 1352 : 	if( BC_MAP_RANGE(lpRequester->MapNumber) ||
; 1353 : 		CC_MAP_RANGE(lpRequester->MapNumber) ||

  0010b	8a 8f 23 01 00
	00		 mov	 cl, BYTE PTR [edi+291]
  00111	80 f9 34	 cmp	 cl, 52			; 00000034H
  00114	0f 84 0a 01 00
	00		 je	 $LN8@OnCGAnswer
  0011a	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  0011d	72 0f		 jb	 SHORT $LN23@OnCGAnswer
  0011f	b0 11		 mov	 al, 17			; 00000011H
  00121	3a c1		 cmp	 al, cl
  00123	1b c0		 sbb	 eax, eax
  00125	83 c0 01	 add	 eax, 1
  00128	0f 85 f6 00 00
	00		 jne	 $LN8@OnCGAnswer
$LN23@OnCGAnswer:
  0012e	80 f9 35	 cmp	 cl, 53			; 00000035H
  00131	0f 84 ed 00 00
	00		 je	 $LN8@OnCGAnswer
  00137	80 f9 12	 cmp	 cl, 18			; 00000012H
  0013a	72 0f		 jb	 SHORT $LN24@OnCGAnswer
  0013c	b0 17		 mov	 al, 23			; 00000017H
  0013e	3a c1		 cmp	 al, cl
  00140	1b c0		 sbb	 eax, eax
  00142	83 c0 01	 add	 eax, 1
  00145	0f 85 d9 00 00
	00		 jne	 $LN8@OnCGAnswer
$LN24@OnCGAnswer:
  0014b	80 f9 09	 cmp	 cl, 9
  0014e	0f 84 d0 00 00
	00		 je	 $LN8@OnCGAnswer
  00154	33 c0		 xor	 eax, eax
  00156	80 f9 20	 cmp	 cl, 32			; 00000020H
  00159	0f 94 c0	 sete	 al
  0015c	85 c0		 test	 eax, eax
  0015e	0f 85 c0 00 00
	00		 jne	 $LN8@OnCGAnswer

; 1362 : 		return ENEWPVP::E_INVALID_MAP;
; 1363 : 	}
; 1364 : 	int nRet = g_NewPVP.Join(*lpRequester, *lpResponsor);

  00164	56		 push	 esi
  00165	57		 push	 edi
  00166	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  0016b	e8 00 00 00 00	 call	 ?Join@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::Join
  00170	8b c8		 mov	 ecx, eax
  00172	89 4d e4	 mov	 DWORD PTR _nRet$1$[ebp], ecx

; 1365 : 	if( nRet != ENEWPVP::E_NO_ERROR )

  00175	85 c9		 test	 ecx, ecx
  00177	0f 84 94 00 00
	00		 je	 $LN9@OnCGAnswer

; 1366 : 	{
; 1367 : 		switch( nRet )

  0017d	83 e9 16	 sub	 ecx, 22			; 00000016H
  00180	74 2a		 je	 SHORT $LN10@OnCGAnswer
  00182	83 e9 01	 sub	 ecx, 1
  00185	75 40		 jne	 SHORT $LN2@OnCGAnswer

; 1371 : 			break;
; 1372 : 		case ENEWPVP::E_ALREADY_DUELLING_1:
; 1373 : 			GCServerMsgStringSend(lMsg.Get(1184), aIndex, 1);

  00187	6a 01		 push	 1
  00189	53		 push	 ebx
  0018a	68 a0 04 00 00	 push	 1184			; 000004a0H
  0018f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00194	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1374 : 			GCServerMsgStringSend(lMsg.Get(1185), aIndex, 1);

  001a2	6a 01		 push	 1
  001a4	53		 push	 ebx
  001a5	68 a1 04 00 00	 push	 1185			; 000004a1H
  001aa	eb 08		 jmp	 SHORT $LN25@OnCGAnswer
$LN10@OnCGAnswer:

; 1368 : 		{
; 1369 : 		case ENEWPVP::E_ALREADY_DUELRESERVED_1:
; 1370 : 			GCServerMsgStringSend(lMsg.Get(1197), aIndex, 1);

  001ac	6a 01		 push	 1
  001ae	53		 push	 ebx
  001af	68 ad 04 00 00	 push	 1197			; 000004adH
$LN25@OnCGAnswer:
  001b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001b9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  001c4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@OnCGAnswer:

; 1375 : 			break;
; 1376 : 		}
; 1377 : 		res.nResult = nRet;
; 1378 : 		DataSend(lpRequester->m_Index, (LPBYTE)&res, res.h.size);

  001c7	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  001cb	8b 5d e4	 mov	 ebx, DWORD PTR _nRet$1$[ebp]
  001ce	50		 push	 eax
  001cf	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  001d2	88 5d ec	 mov	 BYTE PTR _res$[ebp+4], bl
  001d5	50		 push	 eax
  001d6	ff 37		 push	 DWORD PTR [edi]
  001d8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1379 : 		DataSend(lpResponsor->m_Index, (LPBYTE)&res, res.h.size);

  001dd	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  001e1	50		 push	 eax
  001e2	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  001e5	50		 push	 eax
  001e6	ff 36		 push	 DWORD PTR [esi]
  001e8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001ed	83 c4 18	 add	 esp, 24			; 00000018H

; 1380 : 		g_NewPVP.Cancel(*lpRequester, *lpResponsor, FALSE);

  001f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  001f5	6a 00		 push	 0
  001f7	56		 push	 esi
  001f8	57		 push	 edi
  001f9	e8 00 00 00 00	 call	 ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::Cancel
  001fe	5f		 pop	 edi
  001ff	5e		 pop	 esi

; 1381 : 		return nRet;

  00200	8b c3		 mov	 eax, ebx
  00202	5b		 pop	 ebx

; 1384 : }

  00203	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00206	33 cd		 xor	 ecx, ebp
  00208	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020d	8b e5		 mov	 esp, ebp
  0020f	5d		 pop	 ebp
  00210	c3		 ret	 0
$LN9@OnCGAnswer:
  00211	5f		 pop	 edi
  00212	5e		 pop	 esi

; 1382 : 	}
; 1383 : 	return ENEWPVP::E_NO_ERROR;

  00213	33 c0		 xor	 eax, eax
  00215	5b		 pop	 ebx

; 1384 : }

  00216	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00219	33 cd		 xor	 ecx, ebp
  0021b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00220	8b e5		 mov	 esp, ebp
  00222	5d		 pop	 ebp
  00223	c3		 ret	 0
$LN8@OnCGAnswer:

; 1354 : 		DS_MAP_RANGE(lpRequester->MapNumber) )
; 1355 : 	{
; 1356 : 		g_NewPVP.Cancel(*lpRequester, *lpResponsor, FALSE);

  00224	6a 00		 push	 0
  00226	56		 push	 esi
  00227	57		 push	 edi
  00228	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  0022d	e8 00 00 00 00	 call	 ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::Cancel

; 1357 : 		GCServerMsgStringSend(lMsg.Get(1231), lpResponsor->m_Index, 1);

  00232	6a 01		 push	 1
  00234	ff 36		 push	 DWORD PTR [esi]
  00236	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0023b	68 cf 04 00 00	 push	 1231			; 000004cfH
  00240	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0024b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1358 : 		GCServerMsgStringSend(lMsg.Get(1231), lpRequester->m_Index, 1);

  0024e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00253	6a 01		 push	 1
  00255	ff 37		 push	 DWORD PTR [edi]
  00257	68 cf 04 00 00	 push	 1231			; 000004cfH
  0025c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1359 : 		res.nResult = ENEWPVP::E_INVALID_MAP;
; 1360 : 		DataSend(lpResponsor->m_Index, (LPBYTE)&res, res.h.size);

  00267	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  0026b	50		 push	 eax
  0026c	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  0026f	c6 45 ec 08	 mov	 BYTE PTR _res$[ebp+4], 8
  00273	50		 push	 eax
  00274	ff 36		 push	 DWORD PTR [esi]
  00276	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1361 : 		DataSend(lpRequester->m_Index, (LPBYTE)&res, res.h.size);

  0027b	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  0027f	50		 push	 eax
  00280	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  00283	50		 push	 eax
  00284	ff 37		 push	 DWORD PTR [edi]
  00286	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1384 : }

  0028b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0028e	83 c4 24	 add	 esp, 36			; 00000024H
  00291	33 cd		 xor	 ecx, ebp
  00293	b8 08 00 00 00	 mov	 eax, 8
  00298	5f		 pop	 edi
  00299	5e		 pop	 esi
  0029a	5b		 pop	 ebx
  0029b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002a0	8b e5		 mov	 esp, ebp
  002a2	5d		 pop	 ebp
  002a3	c3		 ret	 0
?OnCGAnswerDuel@@YAHPAU_tagPMSG_ANS_DUEL_ANSWER@@H@Z ENDP ; OnCGAnswerDuel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?OnCGInviteDuel@@YAHPAU_tagPMSG_REQ_DUEL_INVITE@@H@Z
_TEXT	SEGMENT
_lpMsg$GSCopy$1$ = -36					; size = 4
_nRet$1$ = -36						; size = 4
tv498 = -32						; size = 4
tv497 = -32						; size = 4
_szDuelName$ = -28					; size = 11
_szDuelName2$ = -16					; size = 11
__$ArrayPad$ = -4					; size = 4
_lpMsg$ = 8						; size = 4
_aIndex$ = 12						; size = 4
?OnCGInviteDuel@@YAHPAU_tagPMSG_REQ_DUEL_INVITE@@H@Z PROC ; OnCGInviteDuel, COMDAT

; 1204 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _lpMsg$[ebp]
  00013	53		 push	 ebx

; 1205 : 	int nResponsor = MAKEWORD(lpMsg->NumberL, lpMsg->NumberH);
; 1206 : 	
; 1207 : 	LPOBJ lpRequester = (LPOBJ)&gObj[aIndex];

  00014	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0001a	56		 push	 esi
  0001b	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  0001f	8b 75 0c	 mov	 esi, DWORD PTR _aIndex$[ebp]
  00022	66 c1 e0 08	 shl	 ax, 8
  00026	57		 push	 edi
  00027	0f b7 f8	 movzx	 edi, ax
  0002a	0f b6 41 05	 movzx	 eax, BYTE PTR [ecx+5]
  0002e	89 4d dc	 mov	 DWORD PTR _lpMsg$GSCopy$1$[ebp], ecx
  00031	0b f8		 or	 edi, eax
  00033	69 ce 40 27 00
	00		 imul	 ecx, esi, 10048
  00039	03 d9		 add	 ebx, ecx
  0003b	89 4d e0	 mov	 DWORD PTR tv498[ebp], ecx

; 1208 : 
; 1209 : 	if( !PacketCheckTime(lpRequester) ) return ENEWPVP::E_LIMIT_PACKETTIME;

  0003e	53		 push	 ebx
  0003f	e8 00 00 00 00	 call	 ?PacketCheckTime@@YAHPAUOBJECTSTRUCT@@@Z ; PacketCheckTime
  00044	83 c4 04	 add	 esp, 4
  00047	85 c0		 test	 eax, eax
  00049	75 16		 jne	 SHORT $LN4@OnCGInvite
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	b8 09 00 00 00	 mov	 eax, 9
  00052	5b		 pop	 ebx

; 1321 : }

  00053	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00056	33 cd		 xor	 ecx, ebp
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
$LN4@OnCGInvite:

; 1210 : 	if( nResponsor == aIndex )			return ENEWPVP::E_INVITE_MYSELF;

  00061	3b fe		 cmp	 edi, esi
  00063	75 16		 jne	 SHORT $LN5@OnCGInvite
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0006c	5b		 pop	 ebx

; 1321 : }

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
$LN5@OnCGInvite:

; 1211 : 	if( gNonPK )

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  00082	74 31		 je	 SHORT $LN6@OnCGInvite

; 1212 : 	{
; 1213 : 		GCServerMsgStringSend(lMsg.Get(1198), aIndex, 1);

  00084	6a 01		 push	 1
  00086	56		 push	 esi
  00087	68 ae 04 00 00	 push	 1198			; 000004aeH
  0008c	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00091	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1263 : 	{
; 1264 : 		GCServerMsgStringSend(lMsg.Get(1213), aIndex, 1);

  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009f	b8 03 00 00 00	 mov	 eax, 3
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx

; 1321 : }

  000a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000aa	33 cd		 xor	 ecx, ebp
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
$LN6@OnCGInvite:

; 1214 : 		return ENEWPVP::E_NON_PKSERVER;
; 1215 : 	}
; 1216 : 	if( gObj[aIndex].CloseType != -1 )	return ENEWPVP::E_CONNECTION_CLOSING;

  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ba	8b 4d e0	 mov	 ecx, DWORD PTR tv498[ebp]
  000bd	80 7c 01 0d ff	 cmp	 BYTE PTR [ecx+eax+13], -1
  000c2	74 16		 je	 SHORT $LN7@OnCGInvite
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	b8 05 00 00 00	 mov	 eax, 5
  000cb	5b		 pop	 ebx

; 1321 : }

  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	33 cd		 xor	 ecx, ebp
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
$LN7@OnCGInvite:

; 1217 : 	if( g_NewPVP.CheckPKPenalty(lpRequester) )

  000da	53		 push	 ebx
  000db	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  000e0	e8 00 00 00 00	 call	 ?CheckPKPenalty@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::CheckPKPenalty
  000e5	85 c0		 test	 eax, eax
  000e7	74 31		 je	 SHORT $LN8@OnCGInvite

; 1218 : 	{
; 1219 : 		GCServerMsgStringSend(lMsg.Get(1199), aIndex, 1);

  000e9	6a 01		 push	 1
  000eb	56		 push	 esi
  000ec	68 af 04 00 00	 push	 1199			; 000004afH
$LN67@OnCGInvite:
  000f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000f6	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1263 : 	{
; 1264 : 		GCServerMsgStringSend(lMsg.Get(1213), aIndex, 1);

  00101	83 c4 0c	 add	 esp, 12			; 0000000cH
  00104	b8 06 00 00 00	 mov	 eax, 6
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx

; 1321 : }

  0010c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010f	33 cd		 xor	 ecx, ebp
  00111	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
$LN8@OnCGInvite:

; 1220 : 		return ENEWPVP::E_NOT_DUEL_MURDERER;
; 1221 : 	}
; 1222 : 	if( !gObjIsConnected(nResponsor) )

  0011a	57		 push	 edi
  0011b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00120	83 c4 04	 add	 esp, 4
  00123	85 c0		 test	 eax, eax
  00125	75 19		 jne	 SHORT $LN9@OnCGInvite

; 1223 : 	{
; 1224 : 		LogAdd("error : %s %d (%d)", __FILE__, __LINE__, nResponsor);

  00127	57		 push	 edi
  00128	68 c8 04 00 00	 push	 1224			; 000004c8H
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00132	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DBIFHAEB@error?5?3?5?$CFs?5?$CFd?5?$CI?$CFd?$CJ?$AA@
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0013d	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@OnCGInvite:

; 1225 : 	}
; 1226 : 	LPOBJ lpResponsor = (LPOBJ)&gObj[nResponsor];

  00140	69 ff 40 27 00
	00		 imul	 edi, edi, 10048

; 1227 : 	if( g_NewPVP.CheckPKPenalty(lpResponsor) )

  00146	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  0014b	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00151	57		 push	 edi
  00152	e8 00 00 00 00	 call	 ?CheckPKPenalty@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::CheckPKPenalty
  00157	85 c0		 test	 eax, eax
  00159	74 0a		 je	 SHORT $LN10@OnCGInvite

; 1228 : 	{
; 1229 : 		GCServerMsgStringSend(lMsg.Get(1200), aIndex, 1);

  0015b	6a 01		 push	 1
  0015d	56		 push	 esi
  0015e	68 b0 04 00 00	 push	 1200			; 000004b0H

; 1230 : 		return ENEWPVP::E_NOT_DUEL_MURDERER;

  00163	eb 8c		 jmp	 SHORT $LN67@OnCGInvite
$LN10@OnCGInvite:
  00165	0f 57 c0	 xorps	 xmm0, xmm0

; 1231 : 	}
; 1232 : 
; 1233 : 	char szDuelName[MAX_IDSTRING+1] = {0};

  00168	66 c7 45 ed 00
	00		 mov	 WORD PTR _szDuelName$[ebp+9], 0

; 1234 : 	char szDuelName2[MAX_IDSTRING+1] = {0};
; 1235 : 
; 1236 : 	memcpy(szDuelName, lpResponsor->Name, MAX_IDSTRING);

  0016e	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00171	66 0f d6 45 e5	 movq	 QWORD PTR _szDuelName$[ebp+1], xmm0
  00176	66 0f d6 45 f1	 movq	 QWORD PTR _szDuelName2$[ebp+1], xmm0

; 1237 : 	szDuelName[MAX_IDSTRING] = '\0';
; 1238 : 
; 1239 : 	memcpy(szDuelName2, lpMsg->szName, MAX_IDSTRING);
; 1240 : 	szDuelName2[MAX_IDSTRING] = '\0';
; 1241 : 
; 1242 : 	if( strcmp(szDuelName, szDuelName2) != 0 )

  0017b	8d 4d f0	 lea	 ecx, DWORD PTR _szDuelName2$[ebp]
  0017e	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00182	89 45 e0	 mov	 DWORD PTR tv497[ebp], eax
  00185	0f b7 40 08	 movzx	 eax, WORD PTR [eax+8]
  00189	66 89 45 ec	 mov	 WORD PTR _szDuelName$[ebp+8], ax
  0018d	8b 45 dc	 mov	 eax, DWORD PTR _lpMsg$GSCopy$1$[ebp]
  00190	66 0f d6 45 e4	 movq	 QWORD PTR _szDuelName$[ebp], xmm0
  00195	66 c7 45 f9 00
	00		 mov	 WORD PTR _szDuelName2$[ebp+9], 0
  0019b	c6 45 ee 00	 mov	 BYTE PTR _szDuelName$[ebp+10], 0
  0019f	f3 0f 7e 40 06	 movq	 xmm0, QWORD PTR [eax+6]
  001a4	0f b7 40 0e	 movzx	 eax, WORD PTR [eax+14]
  001a8	66 89 45 f8	 mov	 WORD PTR _szDuelName2$[ebp+8], ax
  001ac	8d 45 e4	 lea	 eax, DWORD PTR _szDuelName$[ebp]
  001af	66 0f d6 45 f0	 movq	 QWORD PTR _szDuelName2$[ebp], xmm0
  001b4	c6 45 fa 00	 mov	 BYTE PTR _szDuelName2$[ebp+10], 0
$LL60@OnCGInvite:
  001b8	8a 10		 mov	 dl, BYTE PTR [eax]
  001ba	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001bc	75 1a		 jne	 SHORT $LN61@OnCGInvite
  001be	84 d2		 test	 dl, dl
  001c0	74 12		 je	 SHORT $LN62@OnCGInvite
  001c2	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001c5	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001c8	75 0e		 jne	 SHORT $LN61@OnCGInvite
  001ca	83 c0 02	 add	 eax, 2
  001cd	83 c1 02	 add	 ecx, 2
  001d0	84 d2		 test	 dl, dl
  001d2	75 e4		 jne	 SHORT $LL60@OnCGInvite
$LN62@OnCGInvite:
  001d4	33 c0		 xor	 eax, eax
  001d6	eb 05		 jmp	 SHORT $LN63@OnCGInvite
$LN61@OnCGInvite:
  001d8	1b c0		 sbb	 eax, eax
  001da	83 c8 01	 or	 eax, 1
$LN63@OnCGInvite:
  001dd	85 c0		 test	 eax, eax
  001df	74 31		 je	 SHORT $LN11@OnCGInvite

; 1243 : 	{
; 1244 : 		GCServerMsgStringSend(lMsg.Get(1186), aIndex, 1);

  001e1	6a 01		 push	 1
  001e3	56		 push	 esi
  001e4	68 a2 04 00 00	 push	 1186			; 000004a2H
$LN68@OnCGInvite:
  001e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001ee	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1263 : 	{
; 1264 : 		GCServerMsgStringSend(lMsg.Get(1213), aIndex, 1);

  001f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	5f		 pop	 edi
  00202	5e		 pop	 esi
  00203	5b		 pop	 ebx

; 1321 : }

  00204	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00207	33 cd		 xor	 ecx, ebp
  00209	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020e	8b e5		 mov	 esp, ebp
  00210	5d		 pop	 ebp
  00211	c3		 ret	 0
$LN11@OnCGInvite:

; 1245 : 		return ENEWPVP::E_FAILED_RESULT;
; 1246 : 	}
; 1247 : 	if( !IsDuelEnable(lpResponsor->m_Index) )

  00212	ff 37		 push	 DWORD PTR [edi]
  00214	e8 00 00 00 00	 call	 ?IsDuelEnable@@YA_NH@Z	; IsDuelEnable
  00219	83 c4 04	 add	 esp, 4
  0021c	84 c0		 test	 al, al
  0021e	75 0a		 jne	 SHORT $LN12@OnCGInvite

; 1248 : 	{
; 1249 : 		GCServerMsgStringSend(lMsg.Get(1187), aIndex, 1);

  00220	6a 01		 push	 1
  00222	56		 push	 esi
  00223	68 a3 04 00 00	 push	 1187			; 000004a3H

; 1250 : 		return ENEWPVP::E_FAILED_RESULT;

  00228	eb bf		 jmp	 SHORT $LN68@OnCGInvite
$LN12@OnCGInvite:

; 1251 : 	}
; 1252 : 	if( g_NewPVP.IsGuildWar(lpRequester) )

  0022a	53		 push	 ebx
  0022b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00230	e8 00 00 00 00	 call	 ?IsGuildWar@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::IsGuildWar
  00235	85 c0		 test	 eax, eax
  00237	74 31		 je	 SHORT $LN13@OnCGInvite

; 1253 : 	{
; 1254 : 		GCServerMsgStringSend(lMsg.Get(1188), aIndex, 1);

  00239	6a 01		 push	 1
  0023b	56		 push	 esi
  0023c	68 a4 04 00 00	 push	 1188			; 000004a4H
$LN69@OnCGInvite:
  00241	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00246	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1263 : 	{
; 1264 : 		GCServerMsgStringSend(lMsg.Get(1213), aIndex, 1);

  00251	83 c4 0c	 add	 esp, 12			; 0000000cH
  00254	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH
  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx

; 1321 : }

  0025c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025f	33 cd		 xor	 ecx, ebp
  00261	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00266	8b e5		 mov	 esp, ebp
  00268	5d		 pop	 ebp
  00269	c3		 ret	 0
$LN13@OnCGInvite:

; 1255 : 		return ENEWPVP::E_GUILDWAR;
; 1256 : 	}
; 1257 : 	if( g_NewPVP.IsGuildWar(lpResponsor) )

  0026a	57		 push	 edi
  0026b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00270	e8 00 00 00 00	 call	 ?IsGuildWar@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::IsGuildWar
  00275	85 c0		 test	 eax, eax
  00277	74 0a		 je	 SHORT $LN14@OnCGInvite

; 1258 : 	{
; 1259 : 		GCServerMsgStringSend(lMsg.Get(1189), aIndex, 1);

  00279	6a 01		 push	 1
  0027b	56		 push	 esi
  0027c	68 a5 04 00 00	 push	 1189			; 000004a5H

; 1260 : 		return ENEWPVP::E_GUILDWAR;

  00281	eb be		 jmp	 SHORT $LN69@OnCGInvite
$LN14@OnCGInvite:

; 1261 : 	}
; 1262 : 	if( g_NewPVP.IsSelfDefense(lpRequester) || g_NewPVP.IsSelfDefense(lpResponsor) )

  00283	53		 push	 ebx
  00284	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  00289	e8 00 00 00 00	 call	 ?IsSelfDefense@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::IsSelfDefense
  0028e	85 c0		 test	 eax, eax
  00290	0f 85 73 02 00
	00		 jne	 $LN16@OnCGInvite
  00296	57		 push	 edi
  00297	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  0029c	e8 00 00 00 00	 call	 ?IsSelfDefense@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ; CNewPVP::IsSelfDefense
  002a1	85 c0		 test	 eax, eax
  002a3	0f 85 60 02 00
	00		 jne	 $LN16@OnCGInvite

; 1265 : 		return ENEWPVP::E_SELFDEFENSE;
; 1266 : 	}
; 1267 : 	if( CC_MAP_RANGE(lpRequester->MapNumber) || CC_MAP_RANGE(lpResponsor->MapNumber) )

  002a9	8a 8b 23 01 00
	00		 mov	 cl, BYTE PTR [ebx+291]
  002af	80 f9 35	 cmp	 cl, 53			; 00000035H
  002b2	0f 84 47 02 00
	00		 je	 $LN18@OnCGInvite
  002b8	80 f9 12	 cmp	 cl, 18			; 00000012H
  002bb	72 0f		 jb	 SHORT $LN56@OnCGInvite
  002bd	b0 17		 mov	 al, 23			; 00000017H
  002bf	3a c1		 cmp	 al, cl
  002c1	1b c0		 sbb	 eax, eax
  002c3	83 c0 01	 add	 eax, 1
  002c6	0f 85 33 02 00
	00		 jne	 $LN18@OnCGInvite
$LN56@OnCGInvite:
  002cc	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  002d2	80 fa 35	 cmp	 dl, 53			; 00000035H
  002d5	0f 84 24 02 00
	00		 je	 $LN18@OnCGInvite
  002db	80 fa 12	 cmp	 dl, 18			; 00000012H
  002de	72 0f		 jb	 SHORT $LN57@OnCGInvite
  002e0	b0 17		 mov	 al, 23			; 00000017H
  002e2	3a c2		 cmp	 al, dl
  002e4	1b c0		 sbb	 eax, eax
  002e6	83 c0 01	 add	 eax, 1
  002e9	0f 85 10 02 00
	00		 jne	 $LN18@OnCGInvite
$LN57@OnCGInvite:

; 1271 : 	}
; 1272 : 	if( DS_MAP_RANGE(lpRequester->MapNumber) || DS_MAP_RANGE(lpResponsor->MapNumber) )

  002ef	80 f9 09	 cmp	 cl, 9
  002f2	0f 84 fd 01 00
	00		 je	 $LN20@OnCGInvite
  002f8	33 c0		 xor	 eax, eax
  002fa	80 f9 20	 cmp	 cl, 32			; 00000020H
  002fd	0f 94 c0	 sete	 al
  00300	85 c0		 test	 eax, eax
  00302	0f 85 ed 01 00
	00		 jne	 $LN20@OnCGInvite
  00308	80 fa 09	 cmp	 dl, 9
  0030b	0f 84 e4 01 00
	00		 je	 $LN20@OnCGInvite
  00311	80 fa 20	 cmp	 dl, 32			; 00000020H
  00314	0f 94 c0	 sete	 al
  00317	85 c0		 test	 eax, eax
  00319	0f 85 d6 01 00
	00		 jne	 $LN20@OnCGInvite

; 1276 : 	}
; 1277 : 	if( BC_MAP_RANGE(lpRequester->MapNumber) || BC_MAP_RANGE(lpResponsor->MapNumber) )

  0031f	80 f9 34	 cmp	 cl, 52			; 00000034H
  00322	0f 84 9c 01 00
	00		 je	 $LN22@OnCGInvite
  00328	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  0032b	72 12		 jb	 SHORT $LN58@OnCGInvite
  0032d	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00332	3a c1		 cmp	 al, cl
  00334	1b c0		 sbb	 eax, eax
  00336	83 c0 01	 add	 eax, 1
  00339	0f 85 85 01 00
	00		 jne	 $LN22@OnCGInvite
$LN58@OnCGInvite:
  0033f	80 fa 34	 cmp	 dl, 52			; 00000034H
  00342	0f 84 7c 01 00
	00		 je	 $LN22@OnCGInvite
  00348	80 fa 0b	 cmp	 dl, 11			; 0000000bH
  0034b	72 0f		 jb	 SHORT $LN59@OnCGInvite
  0034d	b0 11		 mov	 al, 17			; 00000011H
  0034f	3a c2		 cmp	 al, dl
  00351	1b c0		 sbb	 eax, eax
  00353	83 c0 01	 add	 eax, 1
  00356	0f 85 68 01 00
	00		 jne	 $LN22@OnCGInvite
$LN59@OnCGInvite:

; 1281 : 	}
; 1282 : 	if( lpRequester->m_IfState.use > 0 )

  0035c	f6 83 b8 11 00
	00 03		 test	 BYTE PTR [ebx+4536], 3
  00363	76 0d		 jbe	 SHORT $LN23@OnCGInvite

; 1283 : 	{
; 1284 : 		GCServerMsgStringSend(lMsg.Get(1191), aIndex, 1);

  00365	6a 01		 push	 1
  00367	56		 push	 esi
  00368	68 a7 04 00 00	 push	 1191			; 000004a7H

; 1285 : 		return ENEWPVP::E_FAILED_RESULT;

  0036d	e9 77 fe ff ff	 jmp	 $LN68@OnCGInvite
$LN23@OnCGInvite:

; 1286 : 	}
; 1287 : 	if( lpResponsor->m_IfState.use > 0 )

  00372	f6 87 b8 11 00
	00 03		 test	 BYTE PTR [edi+4536], 3
  00379	76 35		 jbe	 SHORT $LN24@OnCGInvite

; 1288 : 	{
; 1289 : 		GCServerMsgStringSendEx(aIndex, 1, lMsg.Get(1192), lpResponsor->Name);

  0037b	8b 45 e0	 mov	 eax, DWORD PTR tv497[ebp]
  0037e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00383	50		 push	 eax
  00384	68 a8 04 00 00	 push	 1192			; 000004a8H
  00389	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0038e	50		 push	 eax
  0038f	6a 01		 push	 1
  00391	56		 push	 esi
  00392	e8 00 00 00 00	 call	 ?GCServerMsgStringSendEx@@YAXHEPADZZ ; GCServerMsgStringSendEx
  00397	83 c4 10	 add	 esp, 16			; 00000010H

; 1290 : 		return ENEWPVP::E_FAILED_RESULT;

  0039a	b8 01 00 00 00	 mov	 eax, 1
  0039f	5f		 pop	 edi
  003a0	5e		 pop	 esi
  003a1	5b		 pop	 ebx

; 1321 : }

  003a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a5	33 cd		 xor	 ecx, ebp
  003a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ac	8b e5		 mov	 esp, ebp
  003ae	5d		 pop	 ebp
  003af	c3		 ret	 0
$LN24@OnCGInvite:

; 1291 : 	}
; 1292 : 	int nRet = g_NewPVP.Reserve(*lpRequester, *lpResponsor);

  003b0	57		 push	 edi
  003b1	53		 push	 ebx
  003b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  003b7	e8 00 00 00 00	 call	 ?Reserve@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::Reserve
  003bc	89 45 dc	 mov	 DWORD PTR _nRet$1$[ebp], eax

; 1293 : 	if( nRet != ENEWPVP::E_NO_ERROR )

  003bf	85 c0		 test	 eax, eax
  003c1	0f 84 b0 00 00
	00		 je	 $LN25@OnCGInvite

; 1294 : 	{
; 1295 : 		switch( nRet )

  003c7	8b d8		 mov	 ebx, eax
  003c9	8d 43 ed	 lea	 eax, DWORD PTR [ebx-19]
  003cc	83 f8 04	 cmp	 eax, 4
  003cf	0f 87 8f 00 00
	00		 ja	 $LN2@OnCGInvite
  003d5	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN72@OnCGInvite[eax*4]
$LN26@OnCGInvite:

; 1296 : 		{
; 1297 : 		case ENEWPVP::E_ALREADY_DUELRESERVED:
; 1298 : 			GCServerMsgStringSend(lMsg.Get(1183), aIndex, 1);

  003dc	6a 01		 push	 1
  003de	56		 push	 esi
  003df	68 9f 04 00 00	 push	 1183			; 0000049fH
$LN66@OnCGInvite:
  003e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  003e9	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  003ee	50		 push	 eax
  003ef	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  003f4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1299 : 			GCServerMsgStringSend(lMsg.Get(1185), aIndex, 1);

  003f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  003fc	6a 01		 push	 1
  003fe	56		 push	 esi
  003ff	68 a1 04 00 00	 push	 1185			; 000004a1H
  00404	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00409	50		 push	 eax
  0040a	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0040f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1313 : 			break;
; 1314 : 		}
; 1315 : 		return nRet;

  00412	8b c3		 mov	 eax, ebx
  00414	5f		 pop	 edi
  00415	5e		 pop	 esi
  00416	5b		 pop	 ebx

; 1321 : }

  00417	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0041a	33 cd		 xor	 ecx, ebp
  0041c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00421	8b e5		 mov	 esp, ebp
  00423	5d		 pop	 ebp
  00424	c3		 ret	 0
$LN27@OnCGInvite:

; 1300 : 			break;
; 1301 : 		case ENEWPVP::E_ALREADY_DUELLING:
; 1302 : 			GCServerMsgStringSend(lMsg.Get(1184), aIndex, 1);

  00425	6a 01		 push	 1
  00427	56		 push	 esi
  00428	68 a0 04 00 00	 push	 1184			; 000004a0H

; 1303 : 			GCServerMsgStringSend(lMsg.Get(1185), aIndex, 1);
; 1304 : 			break;

  0042d	eb b5		 jmp	 SHORT $LN66@OnCGInvite
$LN28@OnCGInvite:

; 1305 : 		case ENEWPVP::E_ALREADY_DUELREQUESTED_1:
; 1306 : 			GCServerMsgStringSendEx(aIndex, 1, lMsg.Get(1193), lpResponsor->Name);

  0042f	8b 45 e0	 mov	 eax, DWORD PTR tv497[ebp]
  00432	50		 push	 eax
  00433	68 a9 04 00 00	 push	 1193			; 000004a9H

; 1307 : 			break;

  00438	eb 14		 jmp	 SHORT $LN65@OnCGInvite
$LN29@OnCGInvite:

; 1308 : 		case ENEWPVP::E_ALREADY_DUELRESERVED_1:			
; 1309 : 			GCServerMsgStringSendEx(aIndex, 1, lMsg.Get(1194), lpResponsor->Name);

  0043a	8b 45 e0	 mov	 eax, DWORD PTR tv497[ebp]
  0043d	50		 push	 eax
  0043e	68 aa 04 00 00	 push	 1194			; 000004aaH

; 1310 : 			break;

  00443	eb 09		 jmp	 SHORT $LN65@OnCGInvite
$LN30@OnCGInvite:

; 1311 : 		case ENEWPVP::E_ALREADY_DUELLING_1:
; 1312 : 			GCServerMsgStringSendEx(aIndex, 1, lMsg.Get(1195), lpResponsor->Name);

  00445	8b 45 e0	 mov	 eax, DWORD PTR tv497[ebp]
  00448	50		 push	 eax
  00449	68 ab 04 00 00	 push	 1195			; 000004abH
$LN65@OnCGInvite:
  0044e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00453	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00458	50		 push	 eax
  00459	6a 01		 push	 1
  0045b	56		 push	 esi
  0045c	e8 00 00 00 00	 call	 ?GCServerMsgStringSendEx@@YAXHEPADZZ ; GCServerMsgStringSendEx
  00461	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@OnCGInvite:

; 1313 : 			break;
; 1314 : 		}
; 1315 : 		return nRet;

  00464	5f		 pop	 edi
  00465	5e		 pop	 esi
  00466	8b c3		 mov	 eax, ebx
  00468	5b		 pop	 ebx

; 1321 : }

  00469	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046c	33 cd		 xor	 ecx, ebp
  0046e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00473	8b e5		 mov	 esp, ebp
  00475	5d		 pop	 ebp
  00476	c3		 ret	 0
$LN25@OnCGInvite:

; 1316 : 	}
; 1317 : 	
; 1318 : 	GCServerMsgStringSendEx(aIndex, 1, lMsg.Get(1196), lpResponsor->Name);

  00477	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0047a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0047f	50		 push	 eax
  00480	68 ac 04 00 00	 push	 1196			; 000004acH
  00485	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0048a	50		 push	 eax
  0048b	6a 01		 push	 1
  0048d	56		 push	 esi
  0048e	e8 00 00 00 00	 call	 ?GCServerMsgStringSendEx@@YAXHEPADZZ ; GCServerMsgStringSendEx

; 1319 : 	LogAddTD("[Duel] [%s][%s] Requested to Start Duel to [%s][%s]", lpRequester->AccountID, lpRequester->Name, lpResponsor->AccountID, lpResponsor->Name);

  00493	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  00496	50		 push	 eax
  00497	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  0049a	50		 push	 eax
  0049b	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  0049e	50		 push	 eax
  0049f	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  004a2	50		 push	 eax
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@MJGAINFG@?$FLDuel?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Requested?5to?5Sta@
  004a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  004ae	83 c4 24	 add	 esp, 36			; 00000024H

; 1320 : 	return ENEWPVP::E_NO_ERROR;

  004b1	33 c0		 xor	 eax, eax
  004b3	5f		 pop	 edi
  004b4	5e		 pop	 esi
  004b5	5b		 pop	 ebx

; 1321 : }

  004b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004b9	33 cd		 xor	 ecx, ebp
  004bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c0	8b e5		 mov	 esp, ebp
  004c2	5d		 pop	 ebp
  004c3	c3		 ret	 0
$LN22@OnCGInvite:

; 1278 : 	{
; 1279 : 		GCServerMsgStringSend(lMsg.Get(1190), aIndex, 1);

  004c4	6a 01		 push	 1
  004c6	56		 push	 esi
  004c7	68 a6 04 00 00	 push	 1190			; 000004a6H
$LN70@OnCGInvite:
  004cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  004d1	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  004d6	50		 push	 eax
  004d7	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  004dc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1280 : 		return ENEWPVP::E_INVALID_MAP;

  004df	b8 08 00 00 00	 mov	 eax, 8
  004e4	5f		 pop	 edi
  004e5	5e		 pop	 esi
  004e6	5b		 pop	 ebx

; 1321 : }

  004e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ea	33 cd		 xor	 ecx, ebp
  004ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f1	8b e5		 mov	 esp, ebp
  004f3	5d		 pop	 ebp
  004f4	c3		 ret	 0
$LN20@OnCGInvite:

; 1273 : 	{
; 1274 : 		GCServerMsgStringSend(lMsg.Get(1204), aIndex, 1);

  004f5	6a 01		 push	 1
  004f7	56		 push	 esi
  004f8	68 b4 04 00 00	 push	 1204			; 000004b4H

; 1275 : 		return ENEWPVP::E_INVALID_MAP;

  004fd	eb cd		 jmp	 SHORT $LN70@OnCGInvite
$LN18@OnCGInvite:

; 1268 : 	{
; 1269 : 		GCServerMsgStringSend(lMsg.Get(1231), aIndex, 1);

  004ff	6a 01		 push	 1
  00501	56		 push	 esi
  00502	68 cf 04 00 00	 push	 1231			; 000004cfH

; 1270 : 		return ENEWPVP::E_INVALID_MAP;

  00507	eb c3		 jmp	 SHORT $LN70@OnCGInvite
$LN16@OnCGInvite:

; 1263 : 	{
; 1264 : 		GCServerMsgStringSend(lMsg.Get(1213), aIndex, 1);

  00509	6a 01		 push	 1
  0050b	56		 push	 esi
  0050c	68 bd 04 00 00	 push	 1213			; 000004bdH
  00511	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00516	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0051b	50		 push	 eax
  0051c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1321 : }

  00521	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00524	83 c4 0c	 add	 esp, 12			; 0000000cH
  00527	33 cd		 xor	 ecx, ebp
  00529	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH
  0052e	5f		 pop	 edi
  0052f	5e		 pop	 esi
  00530	5b		 pop	 ebx
  00531	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00536	8b e5		 mov	 esp, ebp
  00538	5d		 pop	 ebp
  00539	c3		 ret	 0
  0053a	66 90		 npad	 2
$LN72@OnCGInvite:
  0053c	00 00 00 00	 DD	 $LN26@OnCGInvite
  00540	00 00 00 00	 DD	 $LN27@OnCGInvite
  00544	00 00 00 00	 DD	 $LN28@OnCGInvite
  00548	00 00 00 00	 DD	 $LN29@OnCGInvite
  0054c	00 00 00 00	 DD	 $LN30@OnCGInvite
?OnCGInviteDuel@@YAHPAU_tagPMSG_REQ_DUEL_INVITE@@H@Z ENDP ; OnCGInviteDuel
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCNewPVP@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCNewPVP@@UAEPAXI@Z PROC				; CNewPVP::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CNewPVP@@UAE@XZ	; CNewPVP::~CNewPVP
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 34 01 00 00	 push	 308			; 00000134H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCNewPVP@@UAEPAXI@Z ENDP				; CNewPVP::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$map@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >::~map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$map@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >::~map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >::map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >::map<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2207 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_tagObserverInfo@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_tagObserverInfo@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2201 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2202 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_tagObserverInfo@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2195 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 43   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2196 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase

; 2197 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2139 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2148 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2156 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2156 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2156 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Root, COMDAT
; _this$ = ecx

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2109 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2118 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2126 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2126 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2126 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2105 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2106 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2074 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2076 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1d		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00028	8b fe		 mov	 edi, esi
  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e3		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1668 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Newnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1673 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN91@lower_boun
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL13@lower_boun:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN15@lower_boun

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN16@lower_boun
$LN15@lower_boun:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@lower_boun:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL13@lower_boun
$LN91@lower_boun:

; 43   : 		: _Ptr(_Pnode)

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::find, COMDAT
; _this$ = ecx

; 1485 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  00005	8b d0		 mov	 edx, eax
  00007	57		 push	 edi

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	75 18		 jne	 SHORT $LN18@find
  00014	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL17@find:
  00017	39 71 10	 cmp	 DWORD PTR [ecx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0001a	7d 05		 jge	 SHORT $LN19@find

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 2094 : 			else

  0001f	eb 04		 jmp	 SHORT $LN20@find
$LN19@find:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  00021	8b d1		 mov	 edx, ecx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN20@find:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00025	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00029	74 ec		 je	 SHORT $LL17@find
  0002b	5e		 pop	 esi
$LN18@find:

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002c	3b d0		 cmp	 edx, eax

; 1487 : 		return (_Where == end()

  0002e	74 11		 je	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  00035	7c 0a		 jl	 SHORT $LN3@find
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 10		 mov	 DWORD PTR [eax], edx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN3@find:

; 1487 : 		return (_Where == end()

  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5f		 pop	 edi
  00045	89 01		 mov	 DWORD PTR [ecx], eax
  00047	8b c1		 mov	 eax, ecx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::clear, COMDAT
; _this$ = ecx

; 1472 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  0002c	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0002e	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00032	75 1d		 jne	 SHORT $LN23@clear
$LL24@clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00034	ff 76 08	 push	 DWORD PTR [esi+8]
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0003e	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00046	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00049	8b de		 mov	 ebx, esi
  0004b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004f	74 e3		 je	 SHORT $LL24@clear
$LN23@clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00051	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0005a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  0005c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  0005f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1482 : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase, COMDAT
; _this$ = ecx

; 1448 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1449 : 		if (_First == begin() && _Last == end())

  00007	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0000e	8b 37		 mov	 esi, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1449 : 		if (_First == begin() && _Last == end())

  00012	75 1a		 jne	 SHORT $LN176@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b d6		 cmp	 edx, esi

; 1449 : 		if (_First == begin() && _Last == end())

  00016	75 16		 jne	 SHORT $LN176@erase

; 1450 : 			{	// erase all
; 1451 : 			clear();

  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::clear

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 43   : 		: _Ptr(_Pnode)

  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1459 : 			}
; 1460 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
$LN176@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002e	3b c2		 cmp	 eax, edx

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  00030	74 5d		 je	 SHORT $LN3@erase
$LL2@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  00036	8b c8		 mov	 ecx, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00038	75 41		 jne	 SHORT $LN133@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0003d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00041	75 19		 jne	 SHORT $LN178@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 2d		 jne	 SHORT $LN188@erase
  0004b	0f 1f 44 00 00	 npad	 5
$LL144@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00050	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00052	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00054	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00058	74 f6		 je	 SHORT $LL144@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0005a	eb 1c		 jmp	 SHORT $LN188@erase
$LN178@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00063	75 13		 jne	 SHORT $LN188@erase
$LL128@erase:
  00065	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00068	75 0e		 jne	 SHORT $LN188@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0006a	8b c2		 mov	 eax, edx
  0006c	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0006f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	74 ed		 je	 SHORT $LL128@erase
$LN188@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00078	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN133@erase:

; 1457 : 				erase(_First++);

  0007b	51		 push	 ecx
  0007c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00087	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0008a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  0008d	75 a3		 jne	 SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  00096	8b c1		 mov	 eax, ecx

; 1459 : 			}
; 1460 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1162 = -8						; size = 4
tv1141 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase, COMDAT
; _this$ = ecx

; 1263 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1263 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN5@erase

; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN694@erase
$LN5@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN7@erase

; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1285 : 		else

  00034	eb 0e		 jmp	 SHORT $LN694@erase
$LN7@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN9@erase
$LN694@erase:

; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN11@erase

; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN12@erase

; 1298 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN14@erase

; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1301 : 			else

  00062	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1302 : 				this->_Right(_Fixnodeparent) =

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN16@erase

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00079	8b d7		 mov	 edx, edi

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN166@erase
$LL165@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN16@erase:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN373@erase

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  000ad	8b d7		 mov	 edx, edi

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:

; 608  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN18@erase

; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1324 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN20@erase

; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1331 : 				this->_Right(_Pnode) =

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN21@erase

; 1338 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN23@erase

; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else

  00106	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN25@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN3@erase
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN697@erase

; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN26@erase

; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1360 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN28@erase

; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate

; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN28@erase:

; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN698@erase

; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN31@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN699@erase
$LN31@erase:

; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN33@erase

; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate

; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1390 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate

; 1391 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN697@erase
$LN26@erase:

; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN34@erase

; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate

; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN34@erase:

; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN698@erase

; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN37@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN37@erase
$LN699@erase:

; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN698@erase:

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1412 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL4@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	eb 35		 jmp	 SHORT $LN697@erase
$LN37@erase:

; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN39@erase

; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Lrotate

; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1427 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Rrotate
$LN697@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN3@erase:

; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  00247	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0024a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1440 : 		if (0 < this->_Mysize())

  00250	85 c0		 test	 eax, eax
  00252	74 04		 je	 SHORT $LN696@erase

; 1441 : 			--this->_Mysize();

  00254	48		 dec	 eax
  00255	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN696@erase:

; 43   : 		: _Ptr(_Pnode)

  00258	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	89 08		 mov	 DWORD PTR [eax], ecx

; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}

  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1212 : 		return (this->_Getal().max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 1213 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::end, COMDAT
; _this$ = ecx

; 1156 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::begin, COMDAT
; _this$ = ecx

; 1146 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::~_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >, COMDAT
; _this$ = ecx

; 1126 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1128 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::~_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >, COMDAT
; _this$ = ecx

; 1013 : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1014 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Min, COMDAT

; 613  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 616  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 617  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Max, COMDAT

; 606  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 609  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 610  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_tagObserverInfo@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_tagObserverInfo@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Myval, COMDAT

; 601  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 603  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_tagObserverInfo@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Right, COMDAT

; 596  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 598  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Parent, COMDAT

; 591  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 593  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Left, COMDAT

; 586  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 588  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Isnil, COMDAT

; 581  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 583  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Color, COMDAT

; 576  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 578  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >, COMDAT
; _this$ = ecx

; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 568  : 		this->_Mysize = 0;
; 569  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagObserverInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 948  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 949  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 943  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 944  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 938  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 939  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 933  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 934  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 928  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 929  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 924  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 918  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 919  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 913  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 914  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 908  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 909  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 883  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00001	6a 28		 push	 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 856  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN208@Buynode0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN126@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN126@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN176@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN176@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 871  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 872  : 		}

  00030	c3		 ret	 0
$LN208@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@Buynode0:
$LN207@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 845  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00000	6a 28		 push	 40			; 00000028H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN102@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN140@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN140@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 839  : 		_Color(_Pnode) = _Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 723  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 716  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 717  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 718  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >, COMDAT
; _this$ = ecx

; 703  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 567  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 704  : 		_Construct();
; 705  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Min, COMDAT

; 696  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  0001a	8b c1		 mov	 eax, ecx

; 698  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Max, COMDAT

; 691  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  0001b	8b c1		 mov	 eax, ecx

; 693  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_tagObserverInfo@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_tagObserverInfo@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Myval, COMDAT

; 686  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_tagObserverInfo@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Right, COMDAT

; 681  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Parent, COMDAT

; 676  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Left, COMDAT

; 671  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 673  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Isnil, COMDAT

; 666  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Color, COMDAT

; 661  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 66 66 66 06	 mov	 eax, 107374182		; 06666666H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d 66 66 66 06	 cmp	 eax, 107374182		; 06666666H
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d 66 66 66 06	 cmp	 eax, 107374182		; 06666666H
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00013	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,_tagObserverInfo> >::allocator<std::pair<int const ,_tagObserverInfo> >, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,_tagObserverInfo> >::allocator<std::pair<int const ,_tagObserverInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >::~map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();
; 718  : 		}
; 719  : 
; 720  : 	~_Tree_comp_alloc() _NOEXCEPT
; 721  : 		{	// destroy head node
; 722  : 		_Freeheadnode(_Myhead());
; 723  : 		}
; 724  : 
; 725  : 	void _Copy_alloc(const _Alty& _Al)
; 726  : 		{	// replace old allocator
; 727  : 		_Pocca(_Getal(), _Al);
; 728  : 		}
; 729  : 
; 730  : 	void _Move_alloc(_Alty& _Al)
; 731  : 		{	// replace old allocator
; 732  : 		_Pocma(_Getal(), _Al);
; 733  : 		}
; 734  : 
; 735  : 	void _Swap_alloc(_Myt& _Right)
; 736  : 		{	// swap allocators
; 737  : 		_Pocs(_Getal(), _Right._Getal());
; 738  : 		}
; 739  : 
; 740  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 741  : 	void _Construct()
; 742  : 		{	// construct head node, proxy
; 743  : 		_Myhead() = _Buyheadnode();
; 744  : 		_TRY_BEGIN
; 745  : 		_Alloc_proxy();
; 746  : 		_CATCH_ALL
; 747  : 		_Freeheadnode(_Myhead());
; 748  : 		_RERAISE;
; 749  : 		_CATCH_END
; 750  : 		}
; 751  : 
; 752  : 	~_Tree_comp_alloc() _NOEXCEPT
; 753  : 		{	// destroy head node, proxy
; 754  : 		_Freeheadnode(_Myhead());
; 755  : 		_Free_proxy();
; 756  : 		}
; 757  : 
; 758  : 	void _Copy_alloc(const _Alty& _Al)
; 759  : 		{	// replace old allocator
; 760  : 		_Free_proxy();
; 761  : 		_Pocca(_Getal(), _Al);
; 762  : 		_Alloc_proxy();
; 763  : 		}
; 764  : 
; 765  : 	void _Move_alloc(_Alty& _Al)
; 766  : 		{	// replace old allocator
; 767  : 		_Free_proxy();
; 768  : 		_Pocma(_Getal(), _Al);
; 769  : 		_Alloc_proxy();
; 770  : 		}
; 771  : 
; 772  : 	void _Swap_alloc(_Myt& _Right)
; 773  : 		{	// swap allocators
; 774  : 		_Pocs(_Getal(), _Right._Getal());
; 775  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 776  : 		}
; 777  : 
; 778  : 	void _Alloc_proxy()
; 779  : 		{	// construct proxy
; 780  : 		typename _Alty::template rebind<_Container_proxy>::other
; 781  : 			_Alproxy(_Getal());
; 782  : 		_Myproxy() = _Alproxy.allocate(1);
; 783  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 784  : 		_Myproxy()->_Mycont = &_Get_data();
; 785  : 		}
; 786  : 
; 787  : 	void _Free_proxy()
; 788  : 		{	// destroy proxy
; 789  : 		typename _Alty::template rebind<_Container_proxy>::other
; 790  : 			_Alproxy(_Getal());
; 791  : 		_Orphan_all();
; 792  : 		_Alproxy.destroy(_Myproxy());
; 793  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 794  : 		_Myproxy() = 0;
; 795  : 		}
; 796  : 
; 797  : 	_Iterator_base12 **_Getpfirst() const
; 798  : 		{	// get address of iterator chain
; 799  : 		return (_Get_data()._Getpfirst());
; 800  : 		}
; 801  : 
; 802  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 803  : 		{	// return reference to _Myproxy
; 804  : 		return (_Get_data()._Myproxy);
; 805  : 		}
; 806  : 
; 807  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 808  : 		{	// return const reference to _Myproxy
; 809  : 		return (_Get_data()._Myproxy);
; 810  : 		}
; 811  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 812  : 
; 813  : 	void _Orphan_all()
; 814  : 		{	// orphan all iterators
; 815  : 		_Get_data()._Orphan_all();
; 816  : 		}
; 817  : 
; 818  : 	void _Swap_all(_Myt& _Right)
; 819  : 		{	// swap all iterators
; 820  : 		_Get_data()._Swap_all(_Right._Get_data());
; 821  : 		}
; 822  : 
; 823  : 	_Nodeptr _Buyheadnode()
; 824  : 		{	// get head node using current allocator
; 825  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 826  : 
; 827  : 		_TRY_BEGIN
; 828  : 		_Getal().construct(
; 829  : 			_STD addressof(_Left(_Pnode)), _Pnode);
; 830  : 		_Getal().construct(
; 831  : 			_STD addressof(_Parent(_Pnode)), _Pnode);
; 832  : 		_Getal().construct(
; 833  : 			_STD addressof(_Right(_Pnode)), _Pnode);
; 834  : 		_CATCH_ALL
; 835  : 		_Getal().deallocate(_Pnode, 1);
; 836  : 		_RERAISE;
; 837  : 		_CATCH_END
; 838  : 
; 839  : 		_Color(_Pnode) = _Black;
; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}
; 843  : 
; 844  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 845  : 		{	// free head node using current allocator
; 846  : 		_Getal().destroy(
; 847  : 			_STD addressof(_Left(_Pnode)));
; 848  : 		_Getal().destroy(
; 849  : 			_STD addressof(_Parent(_Pnode)));
; 850  : 		_Getal().destroy(
; 851  : 			_STD addressof(_Right(_Pnode)));
; 852  : 		_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 
; 855  : 	_Nodeptr _Buynode0()
; 856  : 		{	// allocate a non-value node
; 857  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		_Getal().construct(
; 861  : 			_STD addressof(_Left(_Pnode)), _Myhead());
; 862  : 		_Getal().construct(
; 863  : 			_STD addressof(_Parent(_Pnode)), _Myhead());
; 864  : 		_Getal().construct(
; 865  : 			_STD addressof(_Right(_Pnode)), _Myhead());
; 866  : 		_CATCH_ALL
; 867  : 		_Getal().deallocate(_Pnode, 1);
; 868  : 		_RERAISE;
; 869  : 		_CATCH_END
; 870  : 
; 871  : 		return (_Pnode);
; 872  : 		}
; 873  : 
; 874  : 	void _Freenode0(_Nodeptr _Pnode)
; 875  : 		{	// free non-value node using current allocator
; 876  : 		_Getal().destroy(
; 877  : 			_STD addressof(_Left(_Pnode)));
; 878  : 		_Getal().destroy(
; 879  : 			_STD addressof(_Parent(_Pnode)));
; 880  : 		_Getal().destroy(
; 881  : 			_STD addressof(_Right(_Pnode)));
; 882  : 		_Getal().deallocate(_Pnode, 1);
; 883  : 		}
; 884  : 
; 885  : 	template<class... _Valty>
; 886  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 887  : 		{	// allocate a node with defaults and set links and value
; 888  : 		_Nodeptr _Pnode = _Buynode0();
; 889  : 
; 890  : 		this->_Color(_Pnode) = _Red;
; 891  : 		this->_Isnil(_Pnode) = false;
; 892  : 
; 893  : 		_TRY_BEGIN
; 894  : 		this->_Getal().construct(
; 895  : 			_STD addressof(_Myval(_Pnode)),
; 896  : 				_STD forward<_Valty>(_Val)...);
; 897  : 		_CATCH_ALL
; 898  : 		_Freenode0(_Pnode);
; 899  : 		_RERAISE;
; 900  : 		_CATCH_END
; 901  : 
; 902  : 		return (_Pnode);
; 903  : 		}
; 904  : 
; 905  : 
; 906  : 	key_compare& _Getcomp() _NOEXCEPT
; 907  : 		{	// return reference to ordering predicate
; 908  : 		return (_Mypair._Get_first());
; 909  : 		}
; 910  : 
; 911  : 	const key_compare& _Getcomp() const _NOEXCEPT
; 912  : 		{	// return const reference to ordering predicate
; 913  : 		return (_Mypair._Get_first());
; 914  : 		}
; 915  : 
; 916  : 	_Alty& _Getal() _NOEXCEPT
; 917  : 		{	// return reference to allocator
; 918  : 		return (_Mypair._Get_second()._Get_first());
; 919  : 		}
; 920  : 
; 921  : 	const _Alty& _Getal() const _NOEXCEPT
; 922  : 		{	// return const reference to allocator
; 923  : 		return (_Mypair._Get_second()._Get_first());
; 924  : 		}
; 925  : 
; 926  : 	_Tree_val<_Val_types>& _Get_data() _NOEXCEPT
; 927  : 		{	// return reference to _Tree_val
; 928  : 		return (_Mypair._Get_second()._Get_second());
; 929  : 		}
; 930  : 
; 931  : 	const _Tree_val<_Val_types>& _Get_data() const _NOEXCEPT
; 932  : 		{	// return const reference to _Tree_val
; 933  : 		return (_Mypair._Get_second()._Get_second());
; 934  : 		}
; 935  : 
; 936  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 937  : 		{	// return reference to _Myhead
; 938  : 		return (_Get_data()._Myhead);
; 939  : 		}
; 940  : 
; 941  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 942  : 		{	// return const reference to _Myhead
; 943  : 		return (_Get_data()._Myhead);
; 944  : 		}
; 945  : 
; 946  : 	size_type& _Mysize() _NOEXCEPT
; 947  : 		{	// return reference to _Mysize
; 948  : 		return (_Get_data()._Mysize);
; 949  : 		}
; 950  : 
; 951  : 	const size_type& _Mysize() const _NOEXCEPT
; 952  : 		{	// return const reference to _Mysize
; 953  : 		return (_Get_data()._Mysize);
; 954  : 		}
; 955  : 
; 956  : private:
; 957  : 	_Compressed_pair<key_compare,
; 958  : 		_Compressed_pair<_Alty, _Tree_val<_Val_types> > > _Mypair;
; 959  : 	};
; 960  : 
; 961  : 		// TEMPLATE CLASS _Tree
; 962  : template<class _Traits>
; 963  : 	class _Tree
; 964  : 		: public _Tree_comp_alloc<_Traits>
; 965  : 	{	// ordered red-black tree for map/multimap/set/multiset
; 966  : public:
; 967  : 	typedef _Tree<_Traits> _Myt;
; 968  : 	typedef _Tree_comp_alloc<_Traits> _Mybase;
; 969  : 
; 970  : 	typedef typename _Traits::key_type key_type;
; 971  : 	typedef typename _Traits::value_compare value_compare;
; 972  : 	enum
; 973  : 		{	// get multi parameter
; 974  : 		_Multi = _Traits::_Multi};
; 975  : 
; 976  : 	typedef typename _Mybase::_Node _Node;
; 977  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 978  : 	typedef typename _Mybase::_Alty _Alty;
; 979  : 
; 980  : 	typedef typename _Mybase::key_compare key_compare;
; 981  : 	typedef typename _Mybase::allocator_type allocator_type;
; 982  : 
; 983  : 	typedef typename _Mybase::value_type value_type;
; 984  : 	typedef typename _Mybase::size_type size_type;
; 985  : 	typedef typename _Mybase::difference_type difference_type;
; 986  : 	typedef typename _Mybase::pointer pointer;
; 987  : 	typedef typename _Mybase::const_pointer const_pointer;
; 988  : 	typedef typename _Mybase::reference reference;
; 989  : 	typedef typename _Mybase::const_reference const_reference;
; 990  : 
; 991  : 	typedef typename _Mybase::const_iterator const_iterator;
; 992  : 	typedef typename _If<is_same<key_type, value_type>::value,
; 993  : 		typename _Mybase::const_iterator,
; 994  : 		typename _Mybase::iterator>::type iterator;
; 995  : 
; 996  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 997  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 998  : 
; 999  : 	typedef pair<iterator, bool> _Pairib;
; 1000 : 	typedef pair<iterator, iterator> _Pairii;
; 1001 : 	typedef pair<const_iterator, const_iterator> _Paircc;
; 1002 : 
; 1003 : 	struct _Copy_tag
; 1004 : 		{	// signals copying
; 1005 : 		};
; 1006 : 	struct _Move_tag
; 1007 : 		{	// signals moving
; 1008 : 		};
; 1009 : 
; 1010 : 	_Tree(const key_compare& _Parg,
; 1011 : 		const allocator_type& _Al)
; 1012 : 		: _Mybase(_Parg, _Al)
; 1013 : 		{	// construct empty tree
; 1014 : 		}
; 1015 : 
; 1016 : 	_Tree(const _Myt& _Right, const allocator_type& _Al)
; 1017 : 		: _Mybase(_Right.key_comp(), _Al)
; 1018 : 		{	// construct tree by copying _Right, allocator
; 1019 : 		_TRY_BEGIN
; 1020 : 		_Copy(_Right, _Copy_tag());
; 1021 : 		_CATCH_ALL
; 1022 : 		_Tidy();
; 1023 : 		_RERAISE;
; 1024 : 		_CATCH_END
; 1025 : 		}
; 1026 : 
; 1027 : 	_Tree(_Myt&& _Right)
; 1028 : 		: _Mybase(_Right.key_comp(), _STD move(_Right._Getal()))
; 1029 : 		{	// construct tree by moving _Right
; 1030 : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1031 : 		}
; 1032 : 
; 1033 : 	_Tree(_Myt&& _Right, const allocator_type& _Al)
; 1034 : 		: _Mybase(_Right.key_comp(), _Al)
; 1035 : 		{	// construct tree by moving _Right, allocator
; 1036 : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 1037 : 		}
; 1038 : 
; 1039 : 	_Myt& operator=(_Myt&& _Right)
; 1040 : 		{	// assign by moving _Right
; 1041 : 		if (this != &_Right)
; 1042 : 			{	// different, move it
; 1043 : 			clear();
; 1044 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1045 : 				&& this->_Getal() != _Right._Getal())
; 1046 : 				this->_Move_alloc(_Right._Getal());
; 1047 : 
; 1048 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1049 : 			}
; 1050 : 		return (*this);
; 1051 : 		}
; 1052 : 
; 1053 : 	void _Assign_rv(_Myt&& _Right, true_type)
; 1054 : 		{	// move from _Right, stealing its contents
; 1055 : 		this->_Swap_all(_Right);
; 1056 : 		_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1057 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1058 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1059 : 		}
; 1060 : 
; 1061 : 	void _Assign_rv(_Myt&& _Right, false_type)
; 1062 : 		{	// move from _Right, possibly moving its contents
; 1063 : 		if (get_allocator() == _Right.get_allocator())
; 1064 : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 1065 : 		else
; 1066 : 			_Copy(_Right, _Move_tag());
; 1067 : 		}
; 1068 : 
; 1069 : 	void _Assign_rv(_Myt&& _Right)
; 1070 : 		{	// assign by moving _Right
; 1071 : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 1072 : 			typename _Alty::propagate_on_container_move_assignment());
; 1073 : 		}
; 1074 : 
; 1075 : 
; 1076 : 	_Pairib insert(value_type&& _Val)
; 1077 : 		{	// try to insert node with value _Val, favoring right side
; 1078 : 		return (_Insert_nohint(false,
; 1079 : 			_STD forward<value_type>(_Val), _Nil()));
; 1080 : 		}
; 1081 : 
; 1082 : 	iterator insert(const_iterator _Where, value_type&& _Val)
; 1083 : 		{	// try to insert node with value _Val using _Where as a hint
; 1084 : 		return (_Insert_hint(_Where,
; 1085 : 			_STD forward<value_type>(_Val), _Nil()));
; 1086 : 		}
; 1087 : 
; 1088 : 	template<class _Valty>
; 1089 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1090 : 			_Pairib>::type
; 1091 : 		insert(_Valty&& _Val)
; 1092 : 		{	// try to insert node with value _Val, favoring right side
; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1094 : 		return (_Insert_nohint(false,
; 1095 : 			this->_Myval(_Newnode), _Newnode));
; 1096 : 		}
; 1097 : 
; 1098 : 	template<class _Valty>
; 1099 : 		typename enable_if<is_convertible<_Valty, value_type>::value,
; 1100 : 			iterator>::type
; 1101 : 		insert(const_iterator _Where, _Valty&& _Val)
; 1102 : 		{	// try to insert node with value _Val using _Where as a hint
; 1103 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));
; 1104 : 		return (_Insert_hint(_Where,
; 1105 : 			this->_Myval(_Newnode), _Newnode));
; 1106 : 		}
; 1107 : 
; 1108 : 	template<class... _Valty>
; 1109 : 		_Pairib emplace(_Valty&&... _Val)
; 1110 : 		{	// try to insert value_type(_Val...), favoring right side
; 1111 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1112 : 		return (_Insert_nohint(false,
; 1113 : 			this->_Myval(_Newnode), _Newnode));
; 1114 : 		}
; 1115 : 
; 1116 : 	template<class... _Valty>
; 1117 : 		iterator emplace_hint(const_iterator _Where, _Valty&&... _Val)
; 1118 : 		{	// insert value_type(_Val...) at _Where
; 1119 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);
; 1120 : 		return (_Insert_hint(_Where,
; 1121 : 			this->_Myval(_Newnode), _Newnode));
; 1122 : 		}
; 1123 : 
; 1124 : 
; 1125 : 	~_Tree() _NOEXCEPT
; 1126 : 		{	// destroy tree
; 1127 : 		_Tidy();
; 1128 : 		}
; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >::~map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
;	COMDAT ??0?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ PROC ; std::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >, COMDAT
; _this$ = ecx

; 100  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 101  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >::map<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Key, COMDAT
; _this$ = ecx

; 2205 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\map

; 62   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2207 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEABHPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_tagWaiting@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_tagWaiting@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Kfn, COMDAT
; _this$ = ecx

; 2200 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2201 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2202 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEABHABU?$pair@$$CBHU_tagWaiting@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2195 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 43   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2196 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase

; 2197 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 2139 : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2146 : 
; 2147 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 2148 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi

; 2156 : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))

  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi

; 2156 : 		}

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 2155 : 		this->_Parent(_Wherenode) = _Pnode;

  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi

; 2156 : 		}

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Root, COMDAT
; _this$ = ecx

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 2109 : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi

; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);

  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))

  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2116 : 
; 2117 : 		if (_Wherenode == _Root())

  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 2118 : 			_Root() = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0002a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi

; 2126 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))

  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0003d	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi

; 2126 : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;

  0004a	89 16		 mov	 DWORD PTR [esi], edx

; 2125 : 		this->_Parent(_Wherenode) = _Pnode;

  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi

; 2126 : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 2105 : 		return (this->_Left(this->_Myhead()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2106 : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Compare@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?_Compare@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Compare, COMDAT
; _this$ = ecx

; 2074 : 		{	// compare key_type to key_type, with debug checks

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2076 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Compare@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IBE_NABH0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2060 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b f7		 mov	 esi, edi

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1d		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00028	8b fe		 mov	 edi, esi
  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e3		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Destroy_if_not_nil, COMDAT
; _this$ = ecx

; 1668 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Newnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1673 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Destroy_if_not_nil@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Destroy_if_not_nil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 19		 jne	 SHORT $LN91@lower_boun
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LL13@lower_boun:
  00013	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00016	7d 05		 jge	 SHORT $LN15@lower_boun

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00018	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2094 : 			else

  0001b	eb 04		 jmp	 SHORT $LN16@lower_boun
$LN15@lower_boun:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0001d	8b d0		 mov	 edx, eax

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@lower_boun:

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00021	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00025	74 ec		 je	 SHORT $LL13@lower_boun
$LN91@lower_boun:

; 43   : 		: _Ptr(_Pnode)

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	89 10		 mov	 DWORD PTR [eax], edx

; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::find, COMDAT
; _this$ = ecx

; 1485 : 		{	// find an element in mutable sequence that matches _Keyval

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  00005	8b d0		 mov	 edx, eax
  00007	57		 push	 edi

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	75 18		 jne	 SHORT $LN18@find
  00014	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00015	8b 37		 mov	 esi, DWORD PTR [edi]
$LL17@find:
  00017	39 71 10	 cmp	 DWORD PTR [ecx+16], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  0001a	7d 05		 jge	 SHORT $LN19@find

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  0001c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 2094 : 			else

  0001f	eb 04		 jmp	 SHORT $LN20@find
$LN19@find:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  00021	8b d1		 mov	 edx, ecx

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  00023	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN20@find:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00025	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00029	74 ec		 je	 SHORT $LL17@find
  0002b	5e		 pop	 esi
$LN18@find:

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002c	3b d0		 cmp	 edx, eax

; 1487 : 		return (_Where == end()

  0002e	74 11		 je	 SHORT $LN3@find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	3b 4a 10	 cmp	 ecx, DWORD PTR [edx+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  00035	7c 0a		 jl	 SHORT $LN3@find
  00037	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003a	5f		 pop	 edi
  0003b	89 10		 mov	 DWORD PTR [eax], edx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN3@find:

; 1487 : 		return (_Where == end()

  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5f		 pop	 edi
  00045	89 01		 mov	 DWORD PTR [ecx], eax
  00047	8b c1		 mov	 eax, ecx

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::clear, COMDAT
; _this$ = ecx

; 1472 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]

; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;

  0002c	8b f3		 mov	 esi, ebx

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  0002e	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00032	75 1d		 jne	 SHORT $LN23@clear
$LL24@clear:

; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));

  00034	ff 76 08	 push	 DWORD PTR [esi+8]
  00037	8b cf		 mov	 ecx, edi
  00039	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Erase

; 2065 : 			_Pnode = this->_Left(_Pnode);

  0003e	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00040	53		 push	 ebx
  00041	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00046	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)

  00049	8b de		 mov	 ebx, esi
  0004b	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004f	74 e3		 je	 SHORT $LL24@clear
$LN23@clear:

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00051	8b 07		 mov	 eax, DWORD PTR [edi]

; 1478 : 		_Root() = this->_Myhead();

  00053	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1479 : 		_Lmost() = this->_Myhead();

  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	89 00		 mov	 DWORD PTR [eax], eax

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0005a	8b 07		 mov	 eax, DWORD PTR [edi]

; 1480 : 		_Rmost() = this->_Myhead();

  0005c	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1481 : 		this->_Mysize() = 0;

  0005f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1482 : 		}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase, COMDAT
; _this$ = ecx

; 1448 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1449 : 		if (_First == begin() && _Last == end())

  00007	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0000e	8b 37		 mov	 esi, DWORD PTR [edi]

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1449 : 		if (_First == begin() && _Last == end())

  00012	75 1a		 jne	 SHORT $LN176@erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b d6		 cmp	 edx, esi

; 1449 : 		if (_First == begin() && _Last == end())

  00016	75 16		 jne	 SHORT $LN176@erase

; 1450 : 			{	// erase all
; 1451 : 			clear();

  00018	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::clear

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  0001d	8b 07		 mov	 eax, DWORD PTR [edi]
  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi

; 43   : 		: _Ptr(_Pnode)

  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 1459 : 			}
; 1460 : 		}

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
$LN176@erase:

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0002e	3b c2		 cmp	 eax, edx

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  00030	74 5d		 je	 SHORT $LN3@erase
$LL2@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00032	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;

  00036	8b c8		 mov	 ecx, eax

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00038	75 41		 jne	 SHORT $LN133@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0003a	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0003d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00041	75 19		 jne	 SHORT $LN178@erase

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00045	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00049	75 2d		 jne	 SHORT $LN188@erase
  0004b	0f 1f 44 00 00	 npad	 5
$LL144@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00050	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00052	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00054	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00058	74 f6		 je	 SHORT $LL144@erase

; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0005a	eb 1c		 jmp	 SHORT $LN188@erase
$LN178@erase:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0005c	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0005f	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00063	75 13		 jne	 SHORT $LN188@erase
$LL128@erase:
  00065	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00068	75 0e		 jne	 SHORT $LN188@erase

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0006a	8b c2		 mov	 eax, edx
  0006c	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0006f	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	74 ed		 je	 SHORT $LL128@erase
$LN188@erase:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00078	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx
$LN133@erase:

; 1457 : 				erase(_First++);

  0007b	51		 push	 ecx
  0007c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase

; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00087	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  0008a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)

  0008d	75 a3		 jne	 SHORT $LL2@erase
$LN3@erase:

; 43   : 		: _Ptr(_Pnode)

  0008f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	89 01		 mov	 DWORD PTR [ecx], eax

; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));

  00096	8b c1		 mov	 eax, ecx

; 1459 : 			}
; 1460 : 		}

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv1162 = -8						; size = 4
tv1141 = -8						; size = 4
__Erasednode$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase, COMDAT
; _this$ = ecx

; 1263 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1263 : 		{	// erase element at _Where

  0000b	8b d9		 mov	 ebx, ecx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  0000d	89 45 fc	 mov	 DWORD PTR __Erasednode$1$[ebp], eax
  00010	57		 push	 edi

; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);

  00011	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00014	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,std::_Iterator_base0>::operator++

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
  0001c	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))

  0001e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00022	74 05		 je	 SHORT $LN5@erase

; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree

  00024	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]

; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))

  00027	eb 1b		 jmp	 SHORT $LN694@erase
$LN5@erase:
  00029	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00030	74 04		 je	 SHORT $LN7@erase

; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree

  00032	8b fe		 mov	 edi, esi

; 1285 : 		else

  00034	eb 0e		 jmp	 SHORT $LN694@erase
$LN7@erase:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);

  00036	8b 55 0c	 mov	 edx, DWORD PTR __Where$[ebp]

; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree

  00039	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]

; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)

  0003c	3b d1		 cmp	 edx, ecx
  0003e	0f 85 83 00 00
	00		 jne	 $LN9@erase
$LN694@erase:

; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))

  00044	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00048	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0004b	75 03		 jne	 SHORT $LN11@erase

; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up

  0004d	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)

  00052	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00055	75 05		 jne	 SHORT $LN12@erase

; 1298 : 				_Root() = _Fixnode;	// link down from root

  00057	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)

  0005a	eb 0b		 jmp	 SHORT $LN15@erase
$LN12@erase:
  0005c	39 0e		 cmp	 DWORD PTR [esi], ecx
  0005e	75 04		 jne	 SHORT $LN14@erase

; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  00060	89 3e		 mov	 DWORD PTR [esi], edi

; 1301 : 			else

  00062	eb 03		 jmp	 SHORT $LN15@erase
$LN14@erase:

; 1302 : 				this->_Right(_Fixnodeparent) =

  00064	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00067	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)

  00069	39 08		 cmp	 DWORD PTR [eax], ecx
  0006b	75 22		 jne	 SHORT $LN16@erase

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0006d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00071	74 04		 je	 SHORT $LN42@erase
  00073	8b d6		 mov	 edx, esi
  00075	eb 16		 jmp	 SHORT $LN43@erase
$LN42@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00077	8b 07		 mov	 eax, DWORD PTR [edi]

; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00079	8b d7		 mov	 edx, edi

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007f	75 0a		 jne	 SHORT $LN166@erase
$LL165@erase:

; 615  : 			_Pnode = _Left(_Pnode);

  00081	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00083	8b 02		 mov	 eax, DWORD PTR [edx]

; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00085	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00089	74 f6		 je	 SHORT $LL165@erase
$LN166@erase:
  0008b	8b 03		 mov	 eax, DWORD PTR [ebx]
$LN43@erase:

; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)

  0008d	89 10		 mov	 DWORD PTR [eax], edx
$LN16@erase:

; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)

  00091	39 48 08	 cmp	 DWORD PTR [eax+8], ecx
  00094	0f 85 8b 00 00
	00		 jne	 $LN373@erase

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  0009a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0009e	74 0a		 je	 SHORT $LN44@erase
  000a0	8b d6		 mov	 edx, esi
  000a2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000a5	e9 7b 00 00 00	 jmp	 $LN373@erase
$LN44@erase:

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000aa	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  000ad	8b d7		 mov	 edx, edi

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000af	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b3	75 0b		 jne	 SHORT $LN218@erase
$LL217@erase:

; 608  : 			_Pnode = _Right(_Pnode);

  000b5	8b d0		 mov	 edx, eax

; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  000b7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  000ba	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000be	74 f5		 je	 SHORT $LL217@erase
$LN218@erase:
  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)

  000c2	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else

  000c5	eb 5e		 jmp	 SHORT $LN373@erase
$LN9@erase:

; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =

  000c7	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	89 02		 mov	 DWORD PTR [edx], eax

; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))

  000ce	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  000d1	75 04		 jne	 SHORT $LN18@erase

; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  000d3	8b f2		 mov	 esi, edx

; 1324 : 			else

  000d5	eb 1a		 jmp	 SHORT $LN19@erase
$LN18@erase:

; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))

  000d7	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000db	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  000de	75 03		 jne	 SHORT $LN20@erase

; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  000e0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@erase:

; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  000e3	89 3e		 mov	 DWORD PTR [esi], edi

; 1331 : 				this->_Right(_Pnode) =

  000e5	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000e8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =

  000eb	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000ee	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@erase:

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  000f1	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)

  000f3	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  000f6	75 05		 jne	 SHORT $LN21@erase

; 1338 : 				_Root() = _Pnode;	// link down from root

  000f8	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  000fb	eb 0e		 jmp	 SHORT $LN24@erase
$LN21@erase:

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  000fd	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)

  00100	39 08		 cmp	 DWORD PTR [eax], ecx
  00102	75 04		 jne	 SHORT $LN23@erase

; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =

  00104	89 10		 mov	 DWORD PTR [eax], edx

; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else

  00106	eb 03		 jmp	 SHORT $LN24@erase
$LN23@erase:

; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =

  00108	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN24@erase:

; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =

  0010b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0010e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00111	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00114	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]
  00117	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  0011a	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 54   : 	_Right = _Move(_Tmp);

  0011d	8b 45 fc	 mov	 eax, DWORD PTR __Erasednode$1$[ebp]
  00120	88 48 0c	 mov	 BYTE PTR [eax+12], cl
  00123	8b c8		 mov	 ecx, eax
$LN373@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)

  00125	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00129	0f 85 12 01 00
	00		 jne	 $LN25@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  0012f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00131	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00134	0f 84 03 01 00
	00		 je	 $LN3@erase
  0013a	66 0f 1f 44 00
	00		 npad	 6
$LL4@erase:
  00140	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00144	0f 85 f0 00 00
	00		 jne	 $LN697@erase

; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))

  0014a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0014c	3b f9		 cmp	 edi, ecx
  0014e	75 70		 jne	 SHORT $LN26@erase

; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1360 : 					if (this->_Color(_Pnode) == this->_Red)

  00153	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00157	75 13		 jne	 SHORT $LN28@erase

; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;

  00159	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);

  0015d	8b cb		 mov	 ecx, ebx
  0015f	56		 push	 esi
  00160	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  00164	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate

; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);

  00169	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN28@erase:

; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))

  0016c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00170	0f 85 7d 00 00
	00		 jne	 $LN698@erase

; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)

  00176	8b 01		 mov	 eax, DWORD PTR [ecx]
  00178	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0017c	75 09		 jne	 SHORT $LN31@erase
  0017e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00181	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00185	74 68		 je	 SHORT $LN699@erase
$LN31@erase:

; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)

  00187	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0018a	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0018e	75 15		 jne	 SHORT $LN33@erase

; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);

  00192	51		 push	 ecx
  00193	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00197	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0019b	8b cb		 mov	 ecx, ebx
  0019d	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate

; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);

  001a2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@erase:

; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  001a5	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  001a8	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;

  001ab	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;

  001af	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1390 : 						_Lrotate(_Fixnodeparent);

  001b2	8b cb		 mov	 ecx, ebx
  001b4	56		 push	 esi
  001b5	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  001b9	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate

; 1391 : 						break;	// tree now recolored/rebalanced

  001be	eb 7a		 jmp	 SHORT $LN697@erase
$LN26@erase:

; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)

  001c0	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001c4	75 12		 jne	 SHORT $LN34@erase

; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;

  001c6	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);

  001ca	8b cb		 mov	 ecx, ebx
  001cc	56		 push	 esi
  001cd	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0
  001d1	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate

; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);

  001d6	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN34@erase:

; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))

  001d8	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001dc	75 15		 jne	 SHORT $LN698@erase

; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)

  001de	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001e1	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001e5	75 1e		 jne	 SHORT $LN37@erase
  001e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ed	75 16		 jne	 SHORT $LN37@erase
$LN699@erase:

; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;

  001ef	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN698@erase:

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  001f3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1412 : 						_Fixnode = _Fixnodeparent;

  001f5	8b fe		 mov	 edi, esi
  001f7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  001fa	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  001fd	0f 85 3d ff ff
	ff		 jne	 $LL4@erase

; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;

  00203	eb 35		 jmp	 SHORT $LN697@erase
$LN37@erase:

; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)

  00205	8b 01		 mov	 eax, DWORD PTR [ecx]
  00207	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  0020b	75 15		 jne	 SHORT $LN39@erase

; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;

  0020d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);

  00210	51		 push	 ecx
  00211	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00215	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00219	8b cb		 mov	 ecx, ebx
  0021b	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Lrotate

; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);

  00220	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@erase:

; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);

  00222	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00225	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;

  00228	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;

  0022c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1427 : 						_Rrotate(_Fixnodeparent);

  0022e	8b cb		 mov	 ecx, ebx
  00230	56		 push	 esi
  00231	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00235	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Rrotate
$LN697@erase:
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __Erasednode$1$[ebp]
$LN3@erase:

; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black

  0023d	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1440 : 		if (0 < this->_Mysize())

  00247	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0024a	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1440 : 		if (0 < this->_Mysize())

  00250	85 c0		 test	 eax, eax
  00252	74 04		 je	 SHORT $LN696@erase

; 1441 : 			--this->_Mysize();

  00254	48		 dec	 eax
  00255	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN696@erase:

; 43   : 		: _Ptr(_Pnode)

  00258	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	89 08		 mov	 DWORD PTR [eax], ecx

; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}

  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1212 : 		return (this->_Getal().max_size());

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 1213 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::end, COMDAT
; _this$ = ecx

; 1156 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::begin, COMDAT
; _this$ = ecx

; 1146 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);
; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::~_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >, COMDAT
; _this$ = ecx

; 1126 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 43   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 1129 : 
; 1130 : 	_Myt& operator=(const _Myt& _Right)
; 1131 : 		{	// replace contents from _Right
; 1132 : 		if (this != &_Right)
; 1133 : 			{	// different, assign it
; 1134 : 			clear();
; 1135 : 			if (this->_Getal() != _Right._Getal()
; 1136 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1137 : 				this->_Copy_alloc(_Right._Getal());
; 1138 : 
; 1139 : 			this->_Getcomp() = _Right._Getcomp();
; 1140 : 			_Copy(_Right, _Copy_tag());
; 1141 : 			}
; 1142 : 		return (*this);
; 1143 : 		}
; 1144 : 
; 1145 : 	iterator begin() _NOEXCEPT
; 1146 : 		{	// return iterator for beginning of mutable sequence
; 1147 : 		return (iterator(_Lmost(), &this->_Get_data()));
; 1148 : 		}
; 1149 : 
; 1150 : 	const_iterator begin() const _NOEXCEPT
; 1151 : 		{	// return iterator for beginning of nonmutable sequence
; 1152 : 		return (const_iterator(_Lmost(), &this->_Get_data()));
; 1153 : 		}
; 1154 : 
; 1155 : 	iterator end() _NOEXCEPT
; 1156 : 		{	// return iterator for end of mutable sequence
; 1157 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1158 : 		}
; 1159 : 
; 1160 : 	const_iterator end() const _NOEXCEPT
; 1161 : 		{	// return iterator for end of nonmutable sequence
; 1162 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1163 : 		}
; 1164 : 
; 1165 : 	reverse_iterator rbegin() _NOEXCEPT
; 1166 : 		{	// return iterator for beginning of reversed mutable sequence
; 1167 : 		return (reverse_iterator(end()));
; 1168 : 		}
; 1169 : 
; 1170 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1171 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1172 : 		return (const_reverse_iterator(end()));
; 1173 : 		}
; 1174 : 
; 1175 : 	reverse_iterator rend() _NOEXCEPT
; 1176 : 		{	// return iterator for end of reversed mutable sequence
; 1177 : 		return (reverse_iterator(begin()));
; 1178 : 		}
; 1179 : 
; 1180 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1181 : 		{	// return iterator for end of reversed nonmutable sequence
; 1182 : 		return (const_reverse_iterator(begin()));
; 1183 : 		}
; 1184 : 
; 1185 : 	const_iterator cbegin() const _NOEXCEPT
; 1186 : 		{	// return iterator for beginning of nonmutable sequence
; 1187 : 		return (begin());
; 1188 : 		}
; 1189 : 
; 1190 : 	const_iterator cend() const _NOEXCEPT
; 1191 : 		{	// return iterator for end of nonmutable sequence
; 1192 : 		return (end());
; 1193 : 		}
; 1194 : 
; 1195 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1196 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1197 : 		return (rbegin());
; 1198 : 		}
; 1199 : 
; 1200 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1201 : 		{	// return iterator for end of reversed nonmutable sequence
; 1202 : 		return (rend());
; 1203 : 		}
; 1204 : 
; 1205 : 	size_type size() const _NOEXCEPT
; 1206 : 		{	// return length of sequence
; 1207 : 		return (this->_Mysize());
; 1208 : 		}
; 1209 : 
; 1210 : 	size_type max_size() const _NOEXCEPT
; 1211 : 		{	// return maximum possible length of sequence
; 1212 : 		return (this->_Getal().max_size());
; 1213 : 		}
; 1214 : 
; 1215 : 	bool empty() const _NOEXCEPT
; 1216 : 		{	// return true only if sequence is empty
; 1217 : 		return (size() == 0);
; 1218 : 		}
; 1219 : 
; 1220 : 	allocator_type get_allocator() const _NOEXCEPT
; 1221 : 		{	// return allocator object for values
; 1222 : 		return (this->_Getal());
; 1223 : 		}
; 1224 : 
; 1225 : 	key_compare key_comp() const
; 1226 : 		{	// return object for comparing keys
; 1227 : 		return (this->_Getcomp());
; 1228 : 		}
; 1229 : 
; 1230 : 	value_compare value_comp() const
; 1231 : 		{	// return object for comparing values
; 1232 : 		return (value_compare(key_comp()));
; 1233 : 		}
; 1234 : 
; 1235 : 	_Pairib insert(const value_type& _Val)
; 1236 : 		{	// try to insert node with value _Val, favoring right side
; 1237 : 		return (_Insert_nohint(false,
; 1238 : 			_Val, _Nil()));
; 1239 : 		}
; 1240 : 
; 1241 : 	iterator insert(const_iterator _Where,
; 1242 : 		const value_type& _Val)
; 1243 : 		{	// try to insert node with value _Val using _Where as a hint
; 1244 : 		return (_Insert_hint(_Where,
; 1245 : 			_Val, _Nil()));
; 1246 : 		}
; 1247 : 
; 1248 : 	template<class _Iter>
; 1249 : 		void insert(_Iter _First, _Iter _Last)
; 1250 : 		{	// insert [_First, _Last) one at a time
; 1251 : 		_DEBUG_RANGE(_First, _Last);
; 1252 : 		for (; _First != _Last; ++_First)
; 1253 : 
; 1254 : 			emplace_hint(end(), *_First);
; 1255 : 		}
; 1256 : 
; 1257 : 	void insert(_XSTD initializer_list<value_type> _Ilist)
; 1258 : 		{	// insert initializer_list
; 1259 : 		insert(_Ilist.begin(), _Ilist.end());
; 1260 : 		}
; 1261 : 
; 1262 : 	iterator erase(const_iterator _Where)
; 1263 : 		{	// erase element at _Where
; 1264 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1265 : 		if (_Where._Getcont() != &this->_Get_data()
; 1266 : 			|| this->_Isnil(_Where._Mynode()))
; 1267 : 			_DEBUG_ERROR("map/set erase iterator outside range");
; 1268 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1269 : 		++_Where;	// save successor iterator for return
; 1270 : 		_Orphan_ptr(_Erasednode);
; 1271 : 
; 1272 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1273 : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase
; 1274 : 		++_Where;	// save successor iterator for return
; 1275 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1276 : 
; 1277 : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 1278 : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 1279 : 		_Nodeptr _Pnode = _Erasednode;
; 1280 : 
; 1281 : 		if (this->_Isnil(this->_Left(_Pnode)))
; 1282 : 			_Fixnode = this->_Right(_Pnode);	// stitch up right subtree
; 1283 : 		else if (this->_Isnil(this->_Right(_Pnode)))
; 1284 : 			_Fixnode = this->_Left(_Pnode);	// stitch up left subtree
; 1285 : 		else
; 1286 : 			{	// two subtrees, must lift successor node to replace erased
; 1287 : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 1288 : 			_Fixnode = this->_Right(_Pnode);	// _Fixnode is only subtree
; 1289 : 			}
; 1290 : 
; 1291 : 		if (_Pnode == _Erasednode)
; 1292 : 			{	// at most one subtree, relink it
; 1293 : 			_Fixnodeparent = this->_Parent(_Erasednode);
; 1294 : 			if (!this->_Isnil(_Fixnode))
; 1295 : 				this->_Parent(_Fixnode) = _Fixnodeparent;	// link up
; 1296 : 
; 1297 : 			if (_Root() == _Erasednode)
; 1298 : 				_Root() = _Fixnode;	// link down from root
; 1299 : 			else if (this->_Left(_Fixnodeparent) == _Erasednode)
; 1300 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link down to left
; 1301 : 			else
; 1302 : 				this->_Right(_Fixnodeparent) =
; 1303 : 					_Fixnode;	// link down to right
; 1304 : 
; 1305 : 			if (_Lmost() == _Erasednode)
; 1306 : 				_Lmost() = this->_Isnil(_Fixnode)
; 1307 : 					? _Fixnodeparent	// smallest is parent of erased node
; 1308 : 					: this->_Min(_Fixnode);	// smallest in relinked subtree
; 1309 : 
; 1310 : 			if (_Rmost() == _Erasednode)
; 1311 : 				_Rmost() = this->_Isnil(_Fixnode)
; 1312 : 					? _Fixnodeparent	// largest is parent of erased node
; 1313 : 					: this->_Max(_Fixnode);	// largest in relinked subtree
; 1314 : 			}
; 1315 : 		else
; 1316 : 			{	// erased has two subtrees, _Pnode is successor to erased
; 1317 : 			this->_Parent(this->_Left(_Erasednode)) =
; 1318 : 				_Pnode;	// link left up
; 1319 : 			this->_Left(_Pnode) =
; 1320 : 				this->_Left(_Erasednode);	// link successor down
; 1321 : 
; 1322 : 			if (_Pnode == this->_Right(_Erasednode))
; 1323 : 				_Fixnodeparent = _Pnode;	// successor is next to erased
; 1324 : 			else
; 1325 : 				{	// successor further down, link in place of erased
; 1326 : 				_Fixnodeparent =
; 1327 : 					this->_Parent(_Pnode);	// parent is successor's
; 1328 : 				if (!this->_Isnil(_Fixnode))
; 1329 : 					this->_Parent(_Fixnode) = _Fixnodeparent;	// link fix up
; 1330 : 				this->_Left(_Fixnodeparent) = _Fixnode;	// link fix down
; 1331 : 				this->_Right(_Pnode) =
; 1332 : 					this->_Right(_Erasednode);	// link next down
; 1333 : 				this->_Parent(this->_Right(_Erasednode)) =
; 1334 : 					_Pnode;	// right up
; 1335 : 				}
; 1336 : 
; 1337 : 			if (_Root() == _Erasednode)
; 1338 : 				_Root() = _Pnode;	// link down from root
; 1339 : 			else if (this->_Left(this->_Parent(_Erasednode)) == _Erasednode)
; 1340 : 				this->_Left(this->_Parent(_Erasednode)) =
; 1341 : 					_Pnode;	// link down to left
; 1342 : 			else
; 1343 : 				this->_Right(this->_Parent(_Erasednode)) =
; 1344 : 					_Pnode;	// link down to right
; 1345 : 
; 1346 : 			this->_Parent(_Pnode) =
; 1347 : 				this->_Parent(_Erasednode);	// link successor up
; 1348 : 			_STD swap(this->_Color(_Pnode),
; 1349 : 				this->_Color(_Erasednode));	// recolor it
; 1350 : 			}
; 1351 : 
; 1352 : 		if (this->_Color(_Erasednode) == this->_Black)
; 1353 : 			{	// erasing black link, must recolor/rebalance tree
; 1354 : 			for (; _Fixnode != _Root()
; 1355 : 				&& this->_Color(_Fixnode) == this->_Black;
; 1356 : 				_Fixnodeparent = this->_Parent(_Fixnode))
; 1357 : 				if (_Fixnode == this->_Left(_Fixnodeparent))
; 1358 : 					{	// fixup left subtree
; 1359 : 					_Pnode = this->_Right(_Fixnodeparent);
; 1360 : 					if (this->_Color(_Pnode) == this->_Red)
; 1361 : 						{	// rotate red up from right subtree
; 1362 : 						this->_Color(_Pnode) = this->_Black;
; 1363 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1364 : 						_Lrotate(_Fixnodeparent);
; 1365 : 						_Pnode = this->_Right(_Fixnodeparent);
; 1366 : 						}
; 1367 : 
; 1368 : 					if (this->_Isnil(_Pnode))
; 1369 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1370 : 					else if (this->_Color(this->_Left(_Pnode)) == this->_Black
; 1371 : 						&& this->_Color(this->_Right(_Pnode)) == this->_Black)
; 1372 : 						{	// redden right subtree with black children
; 1373 : 						this->_Color(_Pnode) = this->_Red;
; 1374 : 						_Fixnode = _Fixnodeparent;
; 1375 : 						}
; 1376 : 					else
; 1377 : 						{	// must rearrange right subtree
; 1378 : 						if (this->_Color(this->_Right(_Pnode))
; 1379 : 							== this->_Black)
; 1380 : 							{	// rotate red up from left sub-subtree
; 1381 : 							this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1382 : 							this->_Color(_Pnode) = this->_Red;
; 1383 : 							_Rrotate(_Pnode);
; 1384 : 							_Pnode = this->_Right(_Fixnodeparent);
; 1385 : 							}
; 1386 : 
; 1387 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1388 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1389 : 						this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1390 : 						_Lrotate(_Fixnodeparent);
; 1391 : 						break;	// tree now recolored/rebalanced
; 1392 : 						}
; 1393 : 					}
; 1394 : 				else
; 1395 : 					{	// fixup right subtree
; 1396 : 					_Pnode = this->_Left(_Fixnodeparent);
; 1397 : 					if (this->_Color(_Pnode) == this->_Red)
; 1398 : 						{	// rotate red up from left subtree
; 1399 : 						this->_Color(_Pnode) = this->_Black;
; 1400 : 						this->_Color(_Fixnodeparent) = this->_Red;
; 1401 : 						_Rrotate(_Fixnodeparent);
; 1402 : 						_Pnode = this->_Left(_Fixnodeparent);
; 1403 : 						}
; 1404 : 
; 1405 : 					if (this->_Isnil(_Pnode))
; 1406 : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 1407 : 					else if (this->_Color(this->_Right(_Pnode)) ==
; 1408 : 						this->_Black
; 1409 : 						&& this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1410 : 						{	// redden left subtree with black children
; 1411 : 						this->_Color(_Pnode) = this->_Red;
; 1412 : 						_Fixnode = _Fixnodeparent;
; 1413 : 						}
; 1414 : 					else
; 1415 : 						{	// must rearrange left subtree
; 1416 : 						if (this->_Color(this->_Left(_Pnode)) == this->_Black)
; 1417 : 							{	// rotate red up from right sub-subtree
; 1418 : 							this->_Color(this->_Right(_Pnode)) = this->_Black;
; 1419 : 							this->_Color(_Pnode) = this->_Red;
; 1420 : 							_Lrotate(_Pnode);
; 1421 : 							_Pnode = this->_Left(_Fixnodeparent);
; 1422 : 							}
; 1423 : 
; 1424 : 						this->_Color(_Pnode) = this->_Color(_Fixnodeparent);
; 1425 : 						this->_Color(_Fixnodeparent) = this->_Black;
; 1426 : 						this->_Color(this->_Left(_Pnode)) = this->_Black;
; 1427 : 						_Rrotate(_Fixnodeparent);
; 1428 : 						break;	// tree now recolored/rebalanced
; 1429 : 						}
; 1430 : 					}
; 1431 : 
; 1432 : 			this->_Color(_Fixnode) = this->_Black;	// stopping node is black
; 1433 : 			}
; 1434 : 
; 1435 : 		this->_Getal().destroy(
; 1436 : 			_STD addressof(this->_Myval(_Erasednode)));	// delete erased node
; 1437 : 
; 1438 : 		this->_Getal().deallocate(_Erasednode, 1);
; 1439 : 
; 1440 : 		if (0 < this->_Mysize())
; 1441 : 			--this->_Mysize();
; 1442 : 
; 1443 : 		return (iterator(_Where._Ptr,
; 1444 : 			&this->_Get_data()));	// return successor iterator
; 1445 : 		}
; 1446 : 
; 1447 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1448 : 		{	// erase [_First, _Last)
; 1449 : 		if (_First == begin() && _Last == end())
; 1450 : 			{	// erase all
; 1451 : 			clear();
; 1452 : 			return (begin());
; 1453 : 			}
; 1454 : 		else
; 1455 : 			{	// partial erase, one at a time
; 1456 : 			while (_First != _Last)
; 1457 : 				erase(_First++);
; 1458 : 			return (iterator(_First._Ptr, &this->_Get_data()));
; 1459 : 			}
; 1460 : 		}
; 1461 : 
; 1462 : 	size_type erase(const key_type& _Keyval)
; 1463 : 		{	// erase and count all that match _Keyval
; 1464 : 		_Pairii _Where = equal_range(_Keyval);
; 1465 : 		size_type _Num = 0;
; 1466 : 		_Distance(_Where.first, _Where.second, _Num);
; 1467 : 		erase(_Where.first, _Where.second);
; 1468 : 		return (_Num);
; 1469 : 		}
; 1470 : 
; 1471 : 	void clear() _NOEXCEPT
; 1472 : 		{	// erase all
; 1473 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1474 : 		this->_Orphan_ptr(0);
; 1475 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1476 : 
; 1477 : 		_Erase(_Root());
; 1478 : 		_Root() = this->_Myhead();
; 1479 : 		_Lmost() = this->_Myhead();
; 1480 : 		_Rmost() = this->_Myhead();
; 1481 : 		this->_Mysize() = 0;
; 1482 : 		}
; 1483 : 
; 1484 : 	iterator find(const key_type& _Keyval)
; 1485 : 		{	// find an element in mutable sequence that matches _Keyval
; 1486 : 		iterator _Where = lower_bound(_Keyval);
; 1487 : 		return (_Where == end()
; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();
; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))
; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))
; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2094 : 			else
; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;
; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2098 : 				}
; 2099 : 
; 2100 : 		return (_Wherenode);	// return best remembered candidate
; 2101 : 		}
; 2102 : 
; 2103 : 	_Nodeptr& _Lmost() const
; 2104 : 		{	// return leftmost node in nonmutable tree
; 2105 : 		return (this->_Left(this->_Myhead()));
; 2106 : 		}
; 2107 : 
; 2108 : 	void _Lrotate(_Nodeptr _Wherenode)
; 2109 : 		{	// promote right node to root of subtree
; 2110 : 		_Nodeptr _Pnode = this->_Right(_Wherenode);
; 2111 : 		this->_Right(_Wherenode) = this->_Left(_Pnode);
; 2112 : 
; 2113 : 		if (!this->_Isnil(this->_Left(_Pnode)))
; 2114 : 			this->_Parent(this->_Left(_Pnode)) = _Wherenode;
; 2115 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2116 : 
; 2117 : 		if (_Wherenode == _Root())
; 2118 : 			_Root() = _Pnode;
; 2119 : 		else if (_Wherenode == this->_Left(this->_Parent(_Wherenode)))
; 2120 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2121 : 		else
; 2122 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2123 : 
; 2124 : 		this->_Left(_Pnode) = _Wherenode;
; 2125 : 		this->_Parent(_Wherenode) = _Pnode;
; 2126 : 		}
; 2127 : 
; 2128 : 	_Nodeptr& _Rmost() const
; 2129 : 		{	// return rightmost node in nonmutable tree
; 2130 : 		return (this->_Right(this->_Myhead()));
; 2131 : 		}
; 2132 : 
; 2133 : 	_Nodeptr& _Root() const
; 2134 : 		{	// return root of nonmutable tree
; 2135 : 		return (this->_Parent(this->_Myhead()));
; 2136 : 		}
; 2137 : 
; 2138 : 	void _Rrotate(_Nodeptr _Wherenode)
; 2139 : 		{	// promote left node to root of subtree
; 2140 : 		_Nodeptr _Pnode = this->_Left(_Wherenode);
; 2141 : 		this->_Left(_Wherenode) = this->_Right(_Pnode);
; 2142 : 
; 2143 : 		if (!this->_Isnil(this->_Right(_Pnode)))
; 2144 : 			this->_Parent(this->_Right(_Pnode)) = _Wherenode;
; 2145 : 		this->_Parent(_Pnode) = this->_Parent(_Wherenode);
; 2146 : 
; 2147 : 		if (_Wherenode == _Root())
; 2148 : 			_Root() = _Pnode;
; 2149 : 		else if (_Wherenode == this->_Right(this->_Parent(_Wherenode)))
; 2150 : 			this->_Right(this->_Parent(_Wherenode)) = _Pnode;
; 2151 : 		else
; 2152 : 			this->_Left(this->_Parent(_Wherenode)) = _Pnode;
; 2153 : 
; 2154 : 		this->_Right(_Pnode) = _Wherenode;
; 2155 : 		this->_Parent(_Wherenode) = _Pnode;
; 2156 : 		}
; 2157 : 
; 2158 : 	template<class _Other>
; 2159 : 		_Nodeptr _Ubound(const _Other& _Keyval) const
; 2160 : 		{	// find leftmost node greater than _Keyval
; 2161 : 		_Nodeptr _Pnode = _Root();
; 2162 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails
; 2163 : 
; 2164 : 		while (!this->_Isnil(_Pnode))
; 2165 : 			if (_Compare(_Keyval, this->_Key(_Pnode)))
; 2166 : 				{	// _Pnode greater than _Keyval, remember it
; 2167 : 				_Wherenode = _Pnode;
; 2168 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2169 : 				}
; 2170 : 			else
; 2171 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2172 : 
; 2173 : 		return (_Wherenode);	// return best remembered candidate
; 2174 : 		}
; 2175 : 
; 2176 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2177 : 	void _Orphan_ptr(_Nodeptr _Ptr)
; 2178 : 		{	// orphan iterators with specified node pointers
; 2179 : 		_Lockit _Lock(_LOCK_DEBUG);
; 2180 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();
; 2181 : 		if (_Pnext != 0)
; 2182 : 			while (*_Pnext != 0)
; 2183 : 				if ((*_Pnext)->_Ptr == this->_Myhead()
; 2184 : 					|| _Ptr != 0 && (*_Pnext)->_Ptr != _Ptr)
; 2185 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();
; 2186 : 				else
; 2187 : 					{	// orphan the iterator
; 2188 : 					(*_Pnext)->_Clrcont();
; 2189 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();
; 2190 : 					}
; 2191 : 		}
; 2192 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2193 : 
; 2194 : 	void _Tidy()
; 2195 : 		{	// free all storage
; 2196 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001c	83 c4 04	 add	 esp, 4
  0001f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1128 : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::~_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >, COMDAT
; _this$ = ecx

; 1013 : 		{	// construct empty tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 567  : 		this->_Myhead = 0;

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))
; 615  : 			_Pnode = _Left(_Pnode);
; 616  : 		return (_Pnode);
; 617  : 		}
; 618  : 
; 619  : 	_Nodeptr _Myhead;	// pointer to head node
; 620  : 	size_type _Mysize;	// number of elements
; 621  : 	};
; 622  : 
; 623  : 		// TEMPLATE CLASS _Tree_comp_alloc
; 624  : template<class _Traits>
; 625  : 	class _Tree_comp_alloc
; 626  : 	{	// base class for tree to hold ordering predicate, allocator
; 627  : public:
; 628  : 	typedef _Tree_comp_alloc<_Traits> _Myt;
; 629  : 
; 630  : 	typedef typename _Traits::allocator_type allocator_type;
; 631  : 	typedef typename _Traits::key_compare key_compare;
; 632  : 
; 633  : 	typedef _Tree_base_types<typename _Traits::value_type,
; 634  : 		allocator_type> _Alloc_types;
; 635  : 
; 636  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 637  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 638  : 	typedef typename _Alloc_types::_Node _Node;
; 639  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 640  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 641  : 
; 642  : 	typedef _Nodeptr& _Nodepref;
; 643  : 
; 644  : 	typedef typename _Val_types::value_type value_type;
; 645  : 	typedef typename _Val_types::size_type size_type;
; 646  : 	typedef typename _Val_types::difference_type difference_type;
; 647  : 	typedef typename _Val_types::pointer pointer;
; 648  : 	typedef typename _Val_types::const_pointer const_pointer;
; 649  : 	typedef typename _Val_types::reference reference;
; 650  : 	typedef typename _Val_types::const_reference const_reference;
; 651  : 
; 652  : 	typedef _Tree_const_iterator<_Tree_val<_Val_types> > const_iterator;
; 653  : 	typedef _Tree_iterator<_Tree_val<_Val_types> > iterator;
; 654  : 
; 655  : 	enum _Redbl
; 656  : 		{	// colors for link to parent
; 657  : 		_Red, _Black
; 658  : 		};
; 659  : 
; 660  : 	static char& _Color(_Nodeptr _Pnode)
; 661  : 		{	// return reference to color in node
; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}
; 664  : 
; 665  : 	static char& _Isnil(_Nodeptr _Pnode)
; 666  : 		{	// return reference to nil flag in node
; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}
; 669  : 
; 670  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 671  : 		{	// return reference to left pointer in node
; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));
; 673  : 		}
; 674  : 
; 675  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 676  : 		{	// return reference to parent pointer in node
; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}
; 679  : 
; 680  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 681  : 		{	// return reference to right pointer in node
; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}
; 684  : 
; 685  : 	static reference _Myval(_Nodeptr _Pnode)
; 686  : 		{	// return reference to value in node
; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}
; 689  : 
; 690  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 691  : 		{	// return rightmost node in subtree at _Pnode
; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));
; 693  : 		}
; 694  : 
; 695  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 696  : 		{	// return leftmost node in subtree at _Pnode
; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));
; 698  : 		}
; 699  : 
; 700  : 	_Tree_comp_alloc(const key_compare& _Parg, const allocator_type& _Al)
; 701  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 702  : 			_One_then_variadic_args_t(), _Al)
; 703  : 		{	// construct from comparator, allocator
; 704  : 		_Construct();
; 705  : 		}
; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1014 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@H@std@@V?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Compressed_pair<std::less<int>,std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >,std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Min, COMDAT

; 613  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN15@Min
  0000e	66 90		 npad	 2
$LL2@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL2@Min
$LN15@Min:

; 616  : 		return (_Pnode);

  0001a	8b c1		 mov	 eax, ecx

; 617  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Max, COMDAT

; 606  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN15@Max
  0000f	90		 npad	 1
$LL2@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN15@Max:

; 609  : 		return (_Pnode);

  0001b	8b c1		 mov	 eax, ecx

; 610  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_tagWaiting@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_tagWaiting@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Myval, COMDAT

; 601  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 603  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAU?$pair@$$CBHU_tagWaiting@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Right, COMDAT

; 596  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 598  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Parent, COMDAT

; 591  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 593  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Left, COMDAT

; 586  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 588  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Isnil, COMDAT

; 581  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 583  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Color, COMDAT

; 576  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 578  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >, COMDAT
; _this$ = ecx

; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 568  : 		this->_Mysize = 0;
; 569  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >::_Tree_val<std::_Tree_simple_types<std::pair<int const ,_tagWaiting> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Mysize, COMDAT
; _this$ = ecx

; 948  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 949  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAIXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 943  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 944  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABQAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Myhead, COMDAT
; _this$ = ecx

; 938  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 939  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 933  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 934  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 928  : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 929  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 923  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 924  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 918  : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 919  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 913  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 914  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QBEABU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 908  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 909  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@H@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Freenode0, COMDAT
; _this$ = ecx

; 875  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 883  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 856  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00001	6a 24		 push	 36			; 00000024H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 856  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	8b d0		 mov	 edx, eax
  0000c	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000f	85 d2		 test	 edx, edx
  00011	74 1e		 je	 SHORT $LN208@Buynode0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00015	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00018	89 02		 mov	 DWORD PTR [edx], eax
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 04		 je	 SHORT $LN126@Buynode0
  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
  00020	89 01		 mov	 DWORD PTR [ecx], eax
$LN126@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00022	8d 4a 08	 lea	 ecx, DWORD PTR [edx+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00025	85 c9		 test	 ecx, ecx
  00027	74 04		 je	 SHORT $LN176@Buynode0
  00029	8b 06		 mov	 eax, DWORD PTR [esi]
  0002b	89 01		 mov	 DWORD PTR [ecx], eax
$LN176@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 871  : 		return (_Pnode);

  0002d	8b c2		 mov	 eax, edx
  0002f	5e		 pop	 esi

; 872  : 		}

  00030	c3		 ret	 0
$LN208@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00031	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN210@Buynode0:
$LN207@Buynode0:
  00036	cc		 int	 3
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Freeheadnode, COMDAT
; _this$ = ecx

; 845  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00000	6a 24		 push	 36			; 00000024H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00015	89 00		 mov	 DWORD PTR [eax], eax
  00017	85 c9		 test	 ecx, ecx
  00019	74 02		 je	 SHORT $LN102@Buyheadnod
  0001b	89 01		 mov	 DWORD PTR [ecx], eax
$LN102@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  0001d	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00020	85 c9		 test	 ecx, ecx
  00022	74 02		 je	 SHORT $LN140@Buyheadnod
  00024	89 01		 mov	 DWORD PTR [ecx], eax
$LN140@Buyheadnod:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 839  : 		_Color(_Pnode) = _Black;

  00026	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 840  : 		_Isnil(_Pnode) = true;
; 841  : 		return (_Pnode);
; 842  : 		}

  0002c	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 723  : 		}

  00008	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Construct, COMDAT
; _this$ = ecx

; 716  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 717  : 		_Myhead() = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 718  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >, COMDAT
; _this$ = ecx

; 703  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 567  : 		this->_Myhead = 0;

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 706  : 
; 707  : 	_Tree_comp_alloc(const key_compare& _Parg, allocator_type&& _Al)
; 708  : 		: _Mypair(_One_then_variadic_args_t(), _Parg,
; 709  : 			_One_then_variadic_args_t(), _STD move(_Al))
; 710  : 		{	// construct from comparator, allocator
; 711  : 		_Construct();
; 712  : 		}
; 713  : 
; 714  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 715  : 	void _Construct()
; 716  : 		{	// construct head node
; 717  : 		_Myhead() = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 704  : 		_Construct();
; 705  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??0?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@H@1@ABV?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Min, COMDAT

; 696  : 		{	// return leftmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00008	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000c	75 0c		 jne	 SHORT $LN17@Min
  0000e	66 90		 npad	 2
$LL4@Min:

; 615  : 			_Pnode = _Left(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 01		 mov	 eax, DWORD PTR [ecx]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00014	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00018	74 f6		 je	 SHORT $LL4@Min
$LN17@Min:

; 697  : 		return (_Tree_val<_Val_types>::_Min(_Pnode));

  0001a	8b c1		 mov	 eax, ecx

; 698  : 		}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?_Min@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Max, COMDAT

; 691  : 		{	// return rightmost node in subtree at _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]

; 582  : 		return ((char&)_Pnode->_Isnil);

  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00009	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0000d	75 0c		 jne	 SHORT $LN17@Max
  0000f	90		 npad	 1
$LL4@Max:

; 608  : 			_Pnode = _Right(_Pnode);

  00010	8b c8		 mov	 ecx, eax

; 582  : 		return ((char&)_Pnode->_Isnil);

  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))

  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL4@Max
$LN17@Max:

; 692  : 		return (_Tree_val<_Val_types>::_Max(_Pnode));

  0001b	8b c1		 mov	 eax, ecx

; 693  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?_Max@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_tagWaiting@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_tagWaiting@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Myval, COMDAT

; 686  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 602  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H

; 687  : 		return (_Tree_val<_Val_types>::_Myval(_Pnode));
; 688  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAU?$pair@$$CBHU_tagWaiting@@@2@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Right, COMDAT

; 681  : 		{	// return reference to right pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 597  : 		return ((_Nodepref)_Pnode->_Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 682  : 		return (_Tree_val<_Val_types>::_Right(_Pnode));
; 683  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Right@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Right
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Parent, COMDAT

; 676  : 		{	// return reference to parent pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 677  : 		return (_Tree_val<_Val_types>::_Parent(_Pnode));
; 678  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Parent@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Parent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Left, COMDAT

; 671  : 		{	// return reference to left pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 672  : 		return (_Tree_val<_Val_types>::_Left(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 673  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Left@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAAPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Left
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Isnil, COMDAT

; 666  : 		{	// return reference to nil flag in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((char&)_Pnode->_Isnil);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0d	 add	 eax, 13			; 0000000dH

; 667  : 		return (_Tree_val<_Val_types>::_Isnil(_Pnode));
; 668  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Isnil@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Isnil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
;	COMDAT ?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Color, COMDAT

; 661  : 		{	// return reference to color in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 		return ((char&)_Pnode->_Color);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 0c	 add	 eax, 12			; 0000000cH

; 662  : 		return (_Tree_val<_Val_types>::_Color(_Pnode));
; 663  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Color@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@SAAADPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Color
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d c7 71 1c 07	 cmp	 eax, 119304647		; 071c71c7H
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00018	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d c7 71 1c 07	 cmp	 eax, 119304647		; 071c71c7H
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00013	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@QAE@XZ PROC ; std::allocator<std::pair<int const ,_tagWaiting> >::allocator<std::pair<int const ,_tagWaiting> >, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<int const ,_tagWaiting> >::allocator<std::pair<int const ,_tagWaiting> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastRound@CNewPVP@@AAEXHEH@Z
_TEXT	SEGMENT
_res$ = -8						; size = 5
_responsor$1$ = 8					; size = 4
_nId$ = 8						; size = 4
_nFlag$ = 12						; size = 1
_bEnd$ = 16						; size = 4
?BroadcastRound@CNewPVP@@AAEXHEH@Z PROC			; CNewPVP::BroadcastRound, COMDAT
; _this$ = ecx

; 1109 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1110 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00007	8b 75 08	 mov	 esi, DWORD PTR _nId$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	83 fe 03	 cmp	 esi, 3
  00010	0f 87 86 00 00
	00		 ja	 $LN3@BroadcastR

; 1111 : 
; 1112 : 	OBJECTSTRUCT &requester = gObj[m_DuelChannel[nId].nIndex1];
; 1113 :     OBJECTSTRUCT &responsor = gObj[m_DuelChannel[nId].nIndex2];

  00016	6b d6 2c	 imul	 edx, esi, 44

; 1114 : 
; 1115 : 	PMSG_DUEL_ROUNDSTART_BROADCAST res = {0}; 
; 1116 :     res.h.c = PMHC_BYTE;
; 1117 :     res.h.headcode = 0xAA;
; 1118 :     res.h.subcode = 0x0D;
; 1119 :     res.h.size = sizeof(PMSG_DUEL_ROUNDSTART_BROADCAST);

  00019	b1 05		 mov	 cl, 5
  0001b	53		 push	 ebx

; 1120 :     res.nFlag = bEnd;
; 1121 : 
; 1122 :     if( (nFlag & 1) == 1 )

  0001c	8a 5d 0c	 mov	 bl, BYTE PTR _nFlag$[ebp]
  0001f	c7 45 f9 00 00
	00 00		 mov	 DWORD PTR _res$[ebp+1], 0
  00026	c7 45 f8 c1 05
	aa 0d		 mov	 DWORD PTR _res$[ebp], 229246401 ; 0daa05c1H
  0002d	69 44 3a 6c 40
	27 00 00	 imul	 eax, DWORD PTR [edx+edi+108], 10048
  00035	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003b	89 45 08	 mov	 DWORD PTR _responsor$1$[ebp], eax
  0003e	8a 45 10	 mov	 al, BYTE PTR _bEnd$[ebp]
  00041	88 45 fc	 mov	 BYTE PTR _res$[ebp+4], al
  00044	f6 c3 01	 test	 bl, 1
  00047	74 35		 je	 SHORT $LN4@BroadcastR

; 1123 :     {
; 1124 : 		DataSend(requester.m_Index,(LPBYTE)&res,res.h.size);

  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004f	8d 45 f8	 lea	 eax, DWORD PTR _res$[ebp]
  00052	6a 05		 push	 5
  00054	50		 push	 eax
  00055	69 44 3a 68 40
	27 00 00	 imul	 eax, DWORD PTR [edx+edi+104], 10048
  0005d	ff 34 08	 push	 DWORD PTR [eax+ecx]
  00060	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1125 : 		DataSend(responsor.m_Index, (LPBYTE)&res, res.h.size);

  00065	0f b6 45 f9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  00069	50		 push	 eax
  0006a	8d 45 f8	 lea	 eax, DWORD PTR _res$[ebp]
  0006d	50		 push	 eax
  0006e	8b 45 08	 mov	 eax, DWORD PTR _responsor$1$[ebp]
  00071	ff 30		 push	 DWORD PTR [eax]
  00073	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00078	8a 4d f9	 mov	 cl, BYTE PTR _res$[ebp+1]
  0007b	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@BroadcastR:

; 1126 :     }
; 1127 :     if( (nFlag & 2) == 2 )

  0007e	f6 c3 02	 test	 bl, 2
  00081	5b		 pop	 ebx
  00082	74 3f		 je	 SHORT $LN5@BroadcastR

; 1128 : 	{
; 1129 : 		BroadcastToObserver(nId, (LPBYTE)&res,res.h.size);

  00084	0f b6 c1	 movzx	 eax, cl
  00087	8b cf		 mov	 ecx, edi
  00089	50		 push	 eax
  0008a	8d 45 f8	 lea	 eax, DWORD PTR _res$[ebp]
  0008d	50		 push	 eax
  0008e	56		 push	 esi
  0008f	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 1130 : 	}
; 1131 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 0c 00	 ret	 12			; 0000000cH
$LN3@BroadcastR:

; 1110 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  0009c	68 56 04 00 00	 push	 1110			; 00000456H
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  000b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  000b5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c0	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@BroadcastR:
  000c3	5f		 pop	 edi
  000c4	5e		 pop	 esi

; 1130 : 	}
; 1131 : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 0c 00	 ret	 12			; 0000000cH
?BroadcastRound@CNewPVP@@AAEXHEH@Z ENDP			; CNewPVP::BroadcastRound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastMessage@CNewPVP@@AAEXHEEH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -284					; size = 4
_nId$GSCopy$1$ = -280					; size = 4
_res$ = -276						; size = 272
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_nFlag$ = 12						; size = 1
_nMsgType$ = 16						; size = 1
_nNotifySec$ = 20					; size = 4
?BroadcastMessage@CNewPVP@@AAEXHEEH@Z PROC		; CNewPVP::BroadcastMessage, COMDAT
; _this$ = ecx

; 1071 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  00016	89 8d e4 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001c	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _nId$GSCopy$1$[ebp], eax

; 1072 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00022	83 f8 03	 cmp	 eax, 3
  00025	0f 87 29 01 00
	00		 ja	 $LN5@BroadcastM

; 1073 : 	if( nNotifySec <= 0 )	return;

  0002b	56		 push	 esi
  0002c	8b 75 14	 mov	 esi, DWORD PTR _nNotifySec$[ebp]
  0002f	85 f6		 test	 esi, esi
  00031	0f 8e 0c 01 00
	00		 jle	 $LN20@BroadcastM

; 1074 : 
; 1075 : 	OBJECTSTRUCT &requester = gObj[m_DuelChannel[nId].nIndex1];

  00037	6b c0 2c	 imul	 eax, eax, 44
  0003a	53		 push	 ebx
  0003b	57		 push	 edi
  0003c	68 10 01 00 00	 push	 272			; 00000110H
  00041	6a 00		 push	 0
  00043	69 5c 01 68 40
	27 00 00	 imul	 ebx, DWORD PTR [ecx+eax+104], 10048

; 1076 :     OBJECTSTRUCT &responsor = gObj[m_DuelChannel[nId].nIndex2];

  0004b	69 7c 01 6c 40
	27 00 00	 imul	 edi, DWORD PTR [ecx+eax+108], 10048
  00053	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _res$[ebp]
  00059	50		 push	 eax
  0005a	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00060	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00066	e8 00 00 00 00	 call	 _memset

; 1077 : 
; 1078 : 	PMSG_NOTICE res = {0} ;
; 1079 : 
; 1080 : 	switch(nMsgType)

  0006b	0f b6 45 10	 movzx	 eax, BYTE PTR _nMsgType$[ebp]
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	83 e8 00	 sub	 eax, 0
  00075	74 1e		 je	 SHORT $LN7@BroadcastM
  00077	83 e8 01	 sub	 eax, 1
  0007a	74 11		 je	 SHORT $LN8@BroadcastM
  0007c	83 e8 01	 sub	 eax, 1
  0007f	0f 85 bc 00 00
	00		 jne	 $LN21@BroadcastM

; 1084 : 	case 2:	TNotice::MakeNoticeMsgEx(&res, 1, lMsg.Get(3421),nNotifySec);	break;

  00085	56		 push	 esi
  00086	68 5d 0d 00 00	 push	 3421			; 00000d5dH
  0008b	eb 0e		 jmp	 SHORT $LN23@BroadcastM
$LN8@BroadcastM:

; 1083 : 	case 1:	TNotice::MakeNoticeMsgEx(&res, 1, lMsg.Get(3420),nNotifySec);	break;

  0008d	56		 push	 esi
  0008e	68 5c 0d 00 00	 push	 3420			; 00000d5cH
  00093	eb 06		 jmp	 SHORT $LN23@BroadcastM
$LN7@BroadcastM:

; 1081 : 	{
; 1082 : 	case 0:	TNotice::MakeNoticeMsgEx(&res, 1, lMsg.Get(3419),nNotifySec);	break;

  00095	56		 push	 esi
  00096	68 5b 0d 00 00	 push	 3419			; 00000d5bH
$LN23@BroadcastM:
  0009b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000a0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a5	50		 push	 eax
  000a6	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _res$[ebp]
  000ac	6a 01		 push	 1
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  000b4	83 c4 10	 add	 esp, 16			; 00000010H

; 1085 : 	default:	return;
; 1086 : 	}
; 1087 : 
; 1088 : 	if( (nFlag & 1) == 1 )

  000b7	f6 45 0c 01	 test	 BYTE PTR _nFlag$[ebp], 1
  000bb	74 5e		 je	 SHORT $LN13@BroadcastM

; 1091 : 			&& this->IsPKFieldMap(requester.MapNumber) )	//fix

  000bd	53		 push	 ebx
  000be	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000c3	83 c4 04	 add	 esp, 4
  000c6	85 c0		 test	 eax, eax
  000c8	74 22		 je	 SHORT $LN12@BroadcastM
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  000ca	80 bb 23 01 00
	00 40		 cmp	 BYTE PTR [ebx+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 1091 : 			&& this->IsPKFieldMap(requester.MapNumber) )	//fix

  000d1	75 19		 jne	 SHORT $LN12@BroadcastM

; 1092 : 		{
; 1093 : 			DataSend(requester.m_Index, (LPBYTE)&res,res.h.size);

  000d3	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _res$[ebp+1]
  000da	50		 push	 eax
  000db	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _res$[ebp]
  000e1	50		 push	 eax
  000e2	ff 33		 push	 DWORD PTR [ebx]
  000e4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@BroadcastM:

; 1096 : 			&& this->IsPKFieldMap(responsor.MapNumber) )	//fix

  000ec	57		 push	 edi
  000ed	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000f2	83 c4 04	 add	 esp, 4
  000f5	85 c0		 test	 eax, eax
  000f7	74 22		 je	 SHORT $LN13@BroadcastM
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  000f9	80 bf 23 01 00
	00 40		 cmp	 BYTE PTR [edi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 1096 : 			&& this->IsPKFieldMap(responsor.MapNumber) )	//fix

  00100	75 19		 jne	 SHORT $LN13@BroadcastM

; 1097 : 		{
; 1098 : 			DataSend(responsor.m_Index, (LPBYTE)&res,res.h.size);

  00102	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _res$[ebp+1]
  00109	50		 push	 eax
  0010a	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _res$[ebp]
  00110	50		 push	 eax
  00111	ff 37		 push	 DWORD PTR [edi]
  00113	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00118	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@BroadcastM:

; 1099 : 		}
; 1100 :     }
; 1101 : 	if( (nFlag & 2) == 2 )

  0011b	f6 45 0c 02	 test	 BYTE PTR _nFlag$[ebp], 2
  0011f	74 20		 je	 SHORT $LN21@BroadcastM

; 1102 : 	{
; 1103 : 		BroadcastToObserver(nId, (LPBYTE)&res, res.h.size);

  00121	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _res$[ebp+1]
  00128	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0012e	50		 push	 eax
  0012f	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _res$[ebp]
  00135	50		 push	 eax
  00136	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _nId$GSCopy$1$[ebp]
  0013c	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
$LN21@BroadcastM:
  00141	5f		 pop	 edi
  00142	5b		 pop	 ebx
$LN20@BroadcastM:
  00143	5e		 pop	 esi

; 1104 : 	}
; 1105 : }

  00144	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00147	33 cd		 xor	 ecx, ebp
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 10 00	 ret	 16			; 00000010H
$LN5@BroadcastM:

; 1072 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00154	68 30 04 00 00	 push	 1072			; 00000430H
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  0016d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1104 : 	}
; 1105 : }

  00178	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017b	83 c4 18	 add	 esp, 24			; 00000018H
  0017e	33 cd		 xor	 ecx, ebp
  00180	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 10 00	 ret	 16			; 00000010H
?BroadcastMessage@CNewPVP@@AAEXHEEH@Z ENDP		; CNewPVP::BroadcastMessage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z
_TEXT	SEGMENT
_nId$ = 8						; size = 4
_lpData$ = 12						; size = 4
_nSize$ = 16						; size = 4
?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z PROC		; CNewPVP::BroadcastToObserver, COMDAT
; _this$ = ecx

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00007	8b 87 1c 01 00
	00		 mov	 eax, DWORD PTR [edi+284]

; 43   : 		: _Ptr(_Pnode)

  0000d	8b 30		 mov	 esi, DWORD PTR [eax]

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  0000f	3b f0		 cmp	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 1056 : 	for(std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.begin();iter!=m_ObserverInfoList.end(); ++iter)

  00011	74 78		 je	 SHORT $LN3@BroadcastT
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _nSize$[ebp]
$LL56@BroadcastT:

; 1057 : 	{
; 1058 : 		ObserverInfo & info = iter->second;		
; 1059 : 		if(info.nId == nId)

  00017	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  0001a	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  0001d	75 1e		 jne	 SHORT $LN2@BroadcastT

; 1060 : 		{
; 1061 : 			if( gObjIsConnected(info.nIndex) )

  0001f	ff 76 18	 push	 DWORD PTR [esi+24]
  00022	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00027	83 c4 04	 add	 esp, 4
  0002a	85 c0		 test	 eax, eax
  0002c	74 0f		 je	 SHORT $LN2@BroadcastT

; 1062 : 			{
; 1063 : 				DataSend(info.nIndex, lpData, nSize);

  0002e	53		 push	 ebx
  0002f	ff 75 0c	 push	 DWORD PTR _lpData$[ebp]
  00032	ff 76 18	 push	 DWORD PTR [esi+24]
  00035	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@BroadcastT:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	75 3f		 jne	 SHORT $LN139@BroadcastT

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00043	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	75 16		 jne	 SHORT $LN136@BroadcastT

; 63   : 			_Ptr = _Mytree::_Min(

  0004c	8b f0		 mov	 esi, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0004e	8b 06		 mov	 eax, DWORD PTR [esi]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00050	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00054	75 2c		 jne	 SHORT $LN139@BroadcastT
$LL67@BroadcastT:

; 615  : 			_Pnode = _Left(_Pnode);

  00056	8b f0		 mov	 esi, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00058	8b 06		 mov	 eax, DWORD PTR [esi]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0005a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005e	74 f6		 je	 SHORT $LL67@BroadcastT

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  00060	eb 20		 jmp	 SHORT $LN139@BroadcastT
$LN136@BroadcastT:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00062	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00065	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00069	75 15		 jne	 SHORT $LN146@BroadcastT
  0006b	0f 1f 44 00 00	 npad	 5
$LL51@BroadcastT:
  00070	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00073	75 0b		 jne	 SHORT $LN146@BroadcastT

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00075	8b f0		 mov	 esi, eax
  00077	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007e	74 f0		 je	 SHORT $LL51@BroadcastT
$LN146@BroadcastT:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00080	8b f0		 mov	 esi, eax
$LN139@BroadcastT:

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00082	3b b7 1c 01 00
	00		 cmp	 esi, DWORD PTR [edi+284]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 1056 : 	for(std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.begin();iter!=m_ObserverInfoList.end(); ++iter)

  00088	75 8d		 jne	 SHORT $LL56@BroadcastT
  0008a	5b		 pop	 ebx
$LN3@BroadcastT:
  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi

; 1064 : 			}
; 1065 : 		}
; 1066 : 	}
; 1067 : }

  0008d	5d		 pop	 ebp
  0008e	c2 0c 00	 ret	 12			; 0000000cH
?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ENDP		; CNewPVP::BroadcastToObserver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastLeaveChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_res$ = -20						; size = 14
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_obj$ = 12						; size = 4
?BroadcastLeaveChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z PROC ; CNewPVP::BroadcastLeaveChannel, COMDAT
; _this$ = ecx

; 1040 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1041 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00010	8b 55 08	 mov	 edx, DWORD PTR _nId$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _obj$[ebp]
  00017	83 fa 03	 cmp	 edx, 3
  0001a	77 76		 ja	 SHORT $LN3@BroadcastL

; 1042 : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)","0","NULL",__FILE__, __LINE__); return; }

  0001c	6b c2 2c	 imul	 eax, edx, 44
  0001f	8a 84 08 86 00
	00 00		 mov	 al, BYTE PTR [eax+ecx+134]
  00026	3c 02		 cmp	 al, 2
  00028	72 4d		 jb	 SHORT $LN5@BroadcastL
  0002a	3c 04		 cmp	 al, 4
  0002c	77 49		 ja	 SHORT $LN5@BroadcastL

; 1043 : 
; 1044 : 	PMSG_DUEL_LEAVECNANNEL_BROADCAST res = {0};
; 1045 : 	res.h.c = PMHC_BYTE;
; 1046 :     res.h.headcode = 0xAA;
; 1047 :     res.h.subcode = 0x0A;
; 1048 : 	res.h.size = sizeof(PMSG_DUEL_LEAVECNANNEL_BROADCAST);
; 1049 :     memcpy(res.szName, obj.Name, MAX_IDSTRING);

  0002e	66 8b 46 65	 mov	 ax, WORD PTR [esi+101]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _res$[ebp+9], 0
  0003c	c6 45 f9 00	 mov	 BYTE PTR _res$[ebp+13], 0
  00040	66 89 45 f8	 mov	 WORD PTR _res$[ebp+12], ax

; 1050 :     BroadcastToObserver(nId, (LPBYTE)&res,res.h.size);

  00044	8d 45 ec	 lea	 eax, DWORD PTR _res$[ebp]
  00047	6a 0e		 push	 14			; 0000000eH
  00049	66 0f d6 45 ed	 movq	 QWORD PTR _res$[ebp+1], xmm0
  0004e	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00053	50		 push	 eax
  00054	52		 push	 edx
  00055	c7 45 ec c1 0e
	aa 0a		 mov	 DWORD PTR _res$[ebp], 178917057 ; 0aaa0ec1H
  0005c	66 0f d6 45 f0	 movq	 QWORD PTR _res$[ebp+4], xmm0
  00061	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
  00066	5e		 pop	 esi

; 1051 : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN5@BroadcastL:

; 1042 : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)","0","NULL",__FILE__, __LINE__); return; }

  00077	68 12 04 00 00	 push	 1042			; 00000412H
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  00090	eb 19		 jmp	 SHORT $LN7@BroadcastL
$LN3@BroadcastL:

; 1041 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00092	68 11 04 00 00	 push	 1041			; 00000411H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
$LN7@BroadcastL:
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1051 : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	83 c4 18	 add	 esp, 24			; 00000018H
  000bc	33 cd		 xor	 ecx, ebp
  000be	5e		 pop	 esi
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
?BroadcastLeaveChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z ENDP ; CNewPVP::BroadcastLeaveChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastJoinChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_res$ = -20						; size = 14
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_obj$ = 12						; size = 4
?BroadcastJoinChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z PROC ; CNewPVP::BroadcastJoinChannel, COMDAT
; _this$ = ecx

; 1025 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1026 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00010	8b 55 08	 mov	 edx, DWORD PTR _nId$[ebp]
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _obj$[ebp]
  00017	83 fa 03	 cmp	 edx, 3
  0001a	77 76		 ja	 SHORT $LN3@BroadcastJ

; 1027 : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)","0","NULL",__FILE__, __LINE__); return; }

  0001c	6b c2 2c	 imul	 eax, edx, 44
  0001f	8a 84 08 86 00
	00 00		 mov	 al, BYTE PTR [eax+ecx+134]
  00026	3c 02		 cmp	 al, 2
  00028	72 4d		 jb	 SHORT $LN5@BroadcastJ
  0002a	3c 04		 cmp	 al, 4
  0002c	77 49		 ja	 SHORT $LN5@BroadcastJ

; 1028 : 
; 1029 : 	PMSG_DUEL_JOINCNANNEL_BROADCAST res = {0};
; 1030 : 	res.h.c = PMHC_BYTE;
; 1031 :     res.h.headcode = 0xAA;
; 1032 :     res.h.subcode = 0x08;
; 1033 : 	res.h.size = sizeof(PMSG_DUEL_JOINCNANNEL_BROADCAST);
; 1034 :     memcpy(res.szName, obj.Name, MAX_IDSTRING);

  0002e	66 8b 46 65	 mov	 ax, WORD PTR [esi+101]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _res$[ebp+9], 0
  0003c	c6 45 f9 00	 mov	 BYTE PTR _res$[ebp+13], 0
  00040	66 89 45 f8	 mov	 WORD PTR _res$[ebp+12], ax

; 1035 :     BroadcastToObserver(nId, (LPBYTE)&res, res.h.size);

  00044	8d 45 ec	 lea	 eax, DWORD PTR _res$[ebp]
  00047	6a 0e		 push	 14			; 0000000eH
  00049	66 0f d6 45 ed	 movq	 QWORD PTR _res$[ebp+1], xmm0
  0004e	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00053	50		 push	 eax
  00054	52		 push	 edx
  00055	c7 45 ec c1 0e
	aa 08		 mov	 DWORD PTR _res$[ebp], 145362625 ; 08aa0ec1H
  0005c	66 0f d6 45 f0	 movq	 QWORD PTR _res$[ebp+4], xmm0
  00061	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
  00066	5e		 pop	 esi

; 1036 : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 08 00	 ret	 8
$LN5@BroadcastJ:

; 1027 : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)","0","NULL",__FILE__, __LINE__); return; }

  00077	68 03 04 00 00	 push	 1027			; 00000403H
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  00090	eb 19		 jmp	 SHORT $LN7@BroadcastJ
$LN3@BroadcastJ:

; 1026 : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00092	68 02 04 00 00	 push	 1026			; 00000402H
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
$LN7@BroadcastJ:
  000ab	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1036 : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	83 c4 18	 add	 esp, 24			; 00000018H
  000bc	33 cd		 xor	 ecx, ebp
  000be	5e		 pop	 esi
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
?BroadcastJoinChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z ENDP ; CNewPVP::BroadcastJoinChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -28					; size = 4
_nId$GSCopy$1$ = -24					; size = 4
_nLifePer1$1$ = -20					; size = 4
_res$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_nFlag$ = 12						; size = 1
?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z PROC		; CNewPVP::BroadcastDuelInfo, COMDAT
; _this$ = ecx

; 961  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  00013	89 4d e4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00016	89 45 e8	 mov	 DWORD PTR _nId$GSCopy$1$[ebp], eax

; 962  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00019	83 f8 03	 cmp	 eax, 3
  0001c	0f 87 e1 01 00
	00		 ja	 $LN3@BroadcastD

; 963  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ) return;

  00022	6b d0 2c	 imul	 edx, eax, 44
  00025	8a 84 0a 86 00
	00 00		 mov	 al, BYTE PTR [edx+ecx+134]
  0002c	3c 02		 cmp	 al, 2
  0002e	0f 82 f6 01 00
	00		 jb	 $LN11@BroadcastD
  00034	3c 04		 cmp	 al, 4
  00036	0f 87 ee 01 00
	00		 ja	 $LN11@BroadcastD

; 964  : 
; 965  : 	OBJECTSTRUCT & requester = gObj[m_DuelChannel[nId].nIndex1];

  0003c	53		 push	 ebx
  0003d	56		 push	 esi
  0003e	69 74 0a 68 40
	27 00 00	 imul	 esi, DWORD PTR [edx+ecx+104], 10048
  00046	57		 push	 edi

; 966  :     OBJECTSTRUCT & responsor = gObj[m_DuelChannel[nId].nIndex2];

  00047	69 7c 0a 6c 40
	27 00 00	 imul	 edi, DWORD PTR [edx+ecx+108], 10048
  0004f	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00055	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	66 0f 6e 8e 24
	01 00 00	 movd	 xmm1, DWORD PTR [esi+292]

; 967  : 	
; 968  : 	int nLifePer1 = 0;
; 969  :     int nLifePer2 = 0;
; 970  :     int ShieldPer1 = 0;
; 971  :     int ShieldPer2 = 0;
; 972  : 
; 973  : 	if(requester.AddLife +  requester.MaxLife <  requester.Life)

  00063	f3 0f 10 86 d8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+216]
  0006b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0006e	f3 0f 58 8e dc
	00 00 00	 addss	 xmm1, DWORD PTR [esi+220]
  00076	0f 2f c1	 comiss	 xmm0, xmm1
  00079	76 08		 jbe	 SHORT $LN6@BroadcastD

; 974  : 	{
; 975  : 		 requester.Life =  requester.AddLife +  requester.MaxLife;

  0007b	f3 0f 11 8e d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm1
$LN6@BroadcastD:

; 976  : 	}
; 977  : 
; 978  : 	if(requester.iShield > requester.iMaxShield + requester.iAddShield)

  00083	8b 86 30 01 00
	00		 mov	 eax, DWORD PTR [esi+304]
  00089	03 86 34 01 00
	00		 add	 eax, DWORD PTR [esi+308]
  0008f	39 86 2c 01 00
	00		 cmp	 DWORD PTR [esi+300], eax
  00095	7e 06		 jle	 SHORT $LN7@BroadcastD

; 979  : 	{
; 980  : 		requester.iShield = requester.iMaxShield + requester.iAddShield;

  00097	89 86 2c 01 00
	00		 mov	 DWORD PTR [esi+300], eax
$LN7@BroadcastD:
  0009d	66 0f 6e 9f 24
	01 00 00	 movd	 xmm3, DWORD PTR [edi+292]

; 981  : 	}
; 982  : 
; 983  : 	if(responsor.AddLife +  responsor.MaxLife <  responsor.Life)

  000a5	f3 0f 10 87 d8
	00 00 00	 movss	 xmm0, DWORD PTR [edi+216]
  000ad	0f 5b db	 cvtdq2ps xmm3, xmm3
  000b0	f3 0f 58 9f dc
	00 00 00	 addss	 xmm3, DWORD PTR [edi+220]
  000b8	0f 2f c3	 comiss	 xmm0, xmm3
  000bb	76 08		 jbe	 SHORT $LN8@BroadcastD

; 984  : 	{
; 985  : 		 responsor.Life =  responsor.AddLife +  responsor.MaxLife;

  000bd	f3 0f 11 9f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm3
$LN8@BroadcastD:

; 986  : 	}
; 987  : 
; 988  : 	if(responsor.iShield > responsor.iMaxShield + responsor.iAddShield)

  000c5	8b 8f 34 01 00
	00		 mov	 ecx, DWORD PTR [edi+308]
  000cb	03 8f 30 01 00
	00		 add	 ecx, DWORD PTR [edi+304]
  000d1	39 8f 2c 01 00
	00		 cmp	 DWORD PTR [edi+300], ecx
  000d7	7e 06		 jle	 SHORT $LN9@BroadcastD

; 989  : 	{
; 990  : 		responsor.iShield = responsor.iMaxShield + responsor.iAddShield;

  000d9	89 8f 2c 01 00
	00		 mov	 DWORD PTR [edi+300], ecx
$LN9@BroadcastD:
  000df	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]

; 991  : 	}
; 992  : 	
; 993  : 	nLifePer1 = (requester.Life / ((float)(requester.AddLife) + requester.MaxLife) * 100.0f);

  000e7	f3 0f 10 8e d8
	00 00 00	 movss	 xmm1, DWORD PTR [esi+216]
  000ef	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000f2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  000fa	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  00102	f3 0f 5e c8	 divss	 xmm1, xmm0

; 994  : 	nLifePer2 = (responsor.Life / ((float)(responsor.AddLife) + responsor.MaxLife) * 100.0f);

  00106	f3 0f 10 87 d8
	00 00 00	 movss	 xmm0, DWORD PTR [edi+216]
  0010e	f3 0f 5e c3	 divss	 xmm0, xmm3
  00112	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00116	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0011a	f3 0f 2c c1	 cvttss2si eax, xmm1
  0011e	66 0f 6e 8e 2c
	01 00 00	 movd	 xmm1, DWORD PTR [esi+300]
  00126	89 45 ec	 mov	 DWORD PTR _nLifePer1$1$[ebp], eax

; 995  : 	ShieldPer1 = ((float)(requester.iShield) / (float)((int)(requester.iMaxShield) + (int)(requester.iAddShield)) * 100.0f);

  00129	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  0012f	03 86 30 01 00
	00		 add	 eax, DWORD PTR [esi+304]
  00135	f3 0f 2c d8	 cvttss2si ebx, xmm0
  00139	66 0f 6e c0	 movd	 xmm0, eax
  0013d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00140	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00143	f3 0f 5e c8	 divss	 xmm1, xmm0
  00147	66 0f 6e c1	 movd	 xmm0, ecx
  0014b	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 996  : 	ShieldPer2 = ((float)(responsor.iShield) / (float)((int)(responsor.iMaxShield) + (int)(responsor.iAddShield)) * 100.0f);

  0014f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00152	f3 0f 2c d1	 cvttss2si edx, xmm1
  00156	66 0f 6e 8f 2c
	01 00 00	 movd	 xmm1, DWORD PTR [edi+300]
  0015e	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 997  : 
; 998  : 	PMSG_DUEL_HP_BROADCAST res = {0};

  00161	66 c7 45 f9 00
	00		 mov	 WORD PTR _res$[ebp+9], 0
  00167	c6 45 fb 00	 mov	 BYTE PTR _res$[ebp+11], 0
  0016b	f3 0f 5e c8	 divss	 xmm1, xmm0
  0016f	0f 57 c0	 xorps	 xmm0, xmm0
  00172	66 0f d6 45 f1	 movq	 QWORD PTR _res$[ebp+1], xmm0

; 999  : 	res.h.c = PMHC_BYTE;

  00177	c7 45 f0 c1 0c
	aa 05		 mov	 DWORD PTR _res$[ebp], 95030465 ; 05aa0cc1H

; 1000 : 	res.h.headcode = 0xAA;
; 1001 : 	res.h.subcode = 0x05;
; 1002 : 	res.h.size = sizeof(PMSG_DUEL_HP_BROADCAST);
; 1003 : 	res.NumberH1 = HIBYTE(requester.m_Index);

  0017e	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  00182	88 45 f4	 mov	 BYTE PTR _res$[ebp+4], al

; 1004 :     res.NumberL1 = LOBYTE(requester.m_Index);

  00185	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00188	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0018c	88 45 f5	 mov	 BYTE PTR _res$[ebp+5], al

; 1005 : 	res.NumberH2 = HIBYTE(responsor.m_Index);

  0018f	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00193	88 45 f6	 mov	 BYTE PTR _res$[ebp+6], al

; 1006 :     res.NumberL2 = LOBYTE(responsor.m_Index);

  00196	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00199	f3 0f 2c c9	 cvttss2si ecx, xmm1

; 1007 : 	res.nHP1 = nLifePer1;
; 1008 : 	res.nHP2 = nLifePer2;

  0019d	88 5d f9	 mov	 BYTE PTR _res$[ebp+9], bl

; 1009 : 	res.nShield1 = ShieldPer1;
; 1010 : 	res.nShield2 = ShieldPer2;
; 1011 : 	
; 1012 : 	if( (nFlag & 1) == 1 )

  001a0	8a 5d 0c	 mov	 bl, BYTE PTR _nFlag$[ebp]
  001a3	88 45 f7	 mov	 BYTE PTR _res$[ebp+7], al
  001a6	8b 45 ec	 mov	 eax, DWORD PTR _nLifePer1$1$[ebp]
  001a9	88 45 f8	 mov	 BYTE PTR _res$[ebp+8], al
  001ac	88 55 fa	 mov	 BYTE PTR _res$[ebp+10], dl
  001af	88 4d fb	 mov	 BYTE PTR _res$[ebp+11], cl
  001b2	f6 c3 01	 test	 bl, 1
  001b5	74 20		 je	 SHORT $LN10@BroadcastD

; 1013 : 	{
; 1014 : 		DataSend(requester.m_Index, (LPBYTE)&res, res.h.size);

  001b7	6a 0c		 push	 12			; 0000000cH
  001b9	8d 45 f0	 lea	 eax, DWORD PTR _res$[ebp]
  001bc	50		 push	 eax
  001bd	ff 36		 push	 DWORD PTR [esi]
  001bf	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 1015 : 		DataSend(responsor.m_Index, (LPBYTE)&res, res.h.size);

  001c4	0f b6 45 f1	 movzx	 eax, BYTE PTR _res$[ebp+1]
  001c8	50		 push	 eax
  001c9	8d 45 f0	 lea	 eax, DWORD PTR _res$[ebp]
  001cc	50		 push	 eax
  001cd	ff 37		 push	 DWORD PTR [edi]
  001cf	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001d4	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@BroadcastD:

; 1016 : 	}
; 1017 : 	if( (nFlag & 2) == 2 )

  001d7	5f		 pop	 edi
  001d8	5e		 pop	 esi
  001d9	f6 c3 02	 test	 bl, 2
  001dc	5b		 pop	 ebx
  001dd	74 4b		 je	 SHORT $LN11@BroadcastD

; 1018 : 	{
; 1019 : 		BroadcastToObserver(nId, (LPBYTE)&res, res.h.size);

  001df	0f b6 45 f1	 movzx	 eax, BYTE PTR _res$[ebp+1]
  001e3	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001e6	50		 push	 eax
  001e7	8d 45 f0	 lea	 eax, DWORD PTR _res$[ebp]
  001ea	50		 push	 eax
  001eb	ff 75 e8	 push	 DWORD PTR _nId$GSCopy$1$[ebp]
  001ee	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver

; 1020 : 	}
; 1021 : }

  001f3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f6	33 cd		 xor	 ecx, ebp
  001f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 08 00	 ret	 8
$LN3@BroadcastD:

; 962  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00203	68 c2 03 00 00	 push	 962			; 000003c2H
  00208	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00212	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00217	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00227	83 c4 18	 add	 esp, 24			; 00000018H
$LN11@BroadcastD:

; 1020 : 	}
; 1021 : }

  0022a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0022d	33 cd		 xor	 ecx, ebp
  0022f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00234	8b e5		 mov	 esp, ebp
  00236	5d		 pop	 ebp
  00237	c2 08 00	 ret	 8
?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z ENDP		; CNewPVP::BroadcastDuelInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastResult@CNewPVP@@AAEXHEAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_targetObj$1$ = -32					; size = 4
_res$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_nFlag$ = 12						; size = 1
_obj$ = 16						; size = 4
?BroadcastResult@CNewPVP@@AAEXHEAAUOBJECTSTRUCT@@@Z PROC ; CNewPVP::BroadcastResult, COMDAT
; _this$ = ecx

; 932  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 10	 mov	 esi, DWORD PTR _obj$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	57		 push	 edi

; 933  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00018	8b 7d 08	 mov	 edi, DWORD PTR _nId$[ebp]
  0001b	83 ff 03	 cmp	 edi, 3
  0001e	0f 87 3e 01 00
	00		 ja	 $LN3@BroadcastR

; 934  : 	if( m_DuelChannel[nId].nStatus != DC_RESERVEDEND ){ LogAddTD("%s\t%s\t%s\t%s\t%d","m_DuelChannel[nId].nStatus==DC_RESERVEDEND", "0","NULL",__FILE__, __LINE__); return;	}

  00024	6b c7 2c	 imul	 eax, edi, 44
  00027	80 bc 18 86 00
	00 00 05	 cmp	 BYTE PTR [eax+ebx+134], 5
  0002f	74 1e		 je	 SHORT $LN4@BroadcastR
  00031	68 a6 03 00 00	 push	 934			; 000003a6H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@FHCIJMFA@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_R@
  0004a	e9 2c 01 00 00	 jmp	 $LN15@BroadcastR
$LN4@BroadcastR:

; 935  : 	if( !gObjIsConnected(obj.m_Index) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","gObjIsConnected(obj.m_Index)", "0","NULL",__FILE__, __LINE__); return; }

  0004f	ff 36		 push	 DWORD PTR [esi]
  00051	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00056	83 c4 04	 add	 esp, 4
  00059	85 c0		 test	 eax, eax
  0005b	75 1e		 jne	 SHORT $LN5@BroadcastR
  0005d	68 a7 03 00 00	 push	 935			; 000003a7H
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CEOLHPDN@gObjIsConnected?$CIobj?4m_Index?$CJ?$AA@
  00076	e9 00 01 00 00	 jmp	 $LN15@BroadcastR
$LN5@BroadcastR:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  0007b	8b 8e 50 12 00
	00		 mov	 ecx, DWORD PTR [esi+4688]
  00081	85 c9		 test	 ecx, ecx
  00083	0f 88 be 00 00
	00		 js	 $LN14@BroadcastR
  00089	33 c0		 xor	 eax, eax
  0008b	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00091	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 936  : 	if( !IsDuel(obj) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IsDuel(obj)", "0","NULL",__FILE__, __LINE__); return; }

  00094	85 c0		 test	 eax, eax
  00096	0f 84 ab 00 00
	00		 je	 $LN14@BroadcastR

; 937  : 
; 938  : 	OBJECTSTRUCT & targetObj = gObj[obj.m_iDuelUser];
; 939  :      
; 940  : 	PMSG_DUEL_RESULT_BROADCAST res = {0};
; 941  : 	res.h.c = PMHC_BYTE;
; 942  : 	res.h.headcode = 0xAA;
; 943  : 	res.h.subcode = 0x0C;
; 944  : 	res.h.size = sizeof(PMSG_DUEL_RESULT_BROADCAST);
; 945  : 	memcpy(res.szWinner, obj.Name, MAX_IDSTRING);

  0009c	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  000a0	0f 57 c0	 xorps	 xmm0, xmm0
  000a3	69 d1 40 27 00
	00		 imul	 edx, ecx, 10048
  000a9	b1 18		 mov	 cl, 24			; 00000018H
  000ab	0f 11 45 e5	 movups	 XMMWORD PTR _res$[ebp+1], xmm0
  000af	66 c7 45 f9 00
	00		 mov	 WORD PTR _res$[ebp+21], 0
  000b5	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  000ba	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _res$[ebp+17], 0
  000c1	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c7	c6 45 fb 00	 mov	 BYTE PTR _res$[ebp+23], 0
  000cb	66 89 45 f0	 mov	 WORD PTR _res$[ebp+12], ax
  000cf	c7 45 e4 c1 18
	aa 0c		 mov	 DWORD PTR _res$[ebp], 212474049 ; 0caa18c1H
  000d6	66 0f d6 45 e8	 movq	 QWORD PTR _res$[ebp+4], xmm0

; 946  : 	memcpy(res.szLoser, targetObj.Name, MAX_IDSTRING);

  000db	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  000e0	66 0f d6 45 f2	 movq	 QWORD PTR _res$[ebp+14], xmm0
  000e5	0f b7 42 65	 movzx	 eax, WORD PTR [edx+101]
  000e9	66 89 45 fa	 mov	 WORD PTR _res$[ebp+22], ax

; 947  : 	
; 948  : 	if( (nFlag & 1) == 1 )

  000ed	8a 45 0c	 mov	 al, BYTE PTR _nFlag$[ebp]
  000f0	89 55 e0	 mov	 DWORD PTR _targetObj$1$[ebp], edx
  000f3	a8 01		 test	 al, 1
  000f5	74 29		 je	 SHORT $LN7@BroadcastR

; 949  : 	{
; 950  : 		DataSend(obj.m_Index, (LPBYTE)&res, res.h.size);

  000f7	6a 18		 push	 24			; 00000018H
  000f9	8d 45 e4	 lea	 eax, DWORD PTR _res$[ebp]
  000fc	50		 push	 eax
  000fd	ff 36		 push	 DWORD PTR [esi]
  000ff	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 951  : 		DataSend(targetObj.m_Index, (LPBYTE)&res, res.h.size);

  00104	0f b6 45 e5	 movzx	 eax, BYTE PTR _res$[ebp+1]
  00108	50		 push	 eax
  00109	8d 45 e4	 lea	 eax, DWORD PTR _res$[ebp]
  0010c	50		 push	 eax
  0010d	8b 45 e0	 mov	 eax, DWORD PTR _targetObj$1$[ebp]
  00110	ff 30		 push	 DWORD PTR [eax]
  00112	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00117	8a 4d e5	 mov	 cl, BYTE PTR _res$[ebp+1]
  0011a	83 c4 18	 add	 esp, 24			; 00000018H
  0011d	8a 45 0c	 mov	 al, BYTE PTR _nFlag$[ebp]
$LN7@BroadcastR:

; 952  :     }
; 953  : 	if( (nFlag & 2) == 2 )

  00120	a8 02		 test	 al, 2
  00122	74 65		 je	 SHORT $LN8@BroadcastR

; 954  : 	{
; 955  : 		BroadcastToObserver(nId, (LPBYTE)&res,res.h.size);

  00124	0f b6 c1	 movzx	 eax, cl
  00127	8b cb		 mov	 ecx, ebx
  00129	50		 push	 eax
  0012a	8d 45 e4	 lea	 eax, DWORD PTR _res$[ebp]
  0012d	50		 push	 eax
  0012e	57		 push	 edi
  0012f	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx

; 956  : 	}
; 957  : }

  00137	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013a	33 cd		 xor	 ecx, ebp
  0013c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c2 0c 00	 ret	 12			; 0000000cH
$LN14@BroadcastR:

; 936  : 	if( !IsDuel(obj) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IsDuel(obj)", "0","NULL",__FILE__, __LINE__); return; }

  00147	68 a8 03 00 00	 push	 936			; 000003a8H
  0014c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00151	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00156	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NHOMKAFP@IsDuel?$CIobj?$CJ?$AA@
  00160	eb 19		 jmp	 SHORT $LN15@BroadcastR
$LN3@BroadcastR:

; 933  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00162	68 a5 03 00 00	 push	 933			; 000003a5H
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00171	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
$LN15@BroadcastR:
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00186	83 c4 18	 add	 esp, 24			; 00000018H
$LN8@BroadcastR:

; 956  : 	}
; 957  : }

  00189	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	33 cd		 xor	 ecx, ebp
  00190	5b		 pop	 ebx
  00191	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
?BroadcastResult@CNewPVP@@AAEXHEAAUOBJECTSTRUCT@@@Z ENDP ; CNewPVP::BroadcastResult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?BroadcastScore@CNewPVP@@AAEXHE@Z
_TEXT	SEGMENT
_res$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_nFlag$ = 12						; size = 1
?BroadcastScore@CNewPVP@@AAEXHE@Z PROC			; CNewPVP::BroadcastScore, COMDAT
; _this$ = ecx

; 900  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _nId$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 901  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00017	83 fe 03	 cmp	 esi, 3
  0001a	0f 87 e9 00 00
	00		 ja	 $LN3@BroadcastS

; 902  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "0","NULL",__FILE__, __LINE__); return; }

  00020	6b c6 2c	 imul	 eax, esi, 44
  00023	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00026	8a 81 86 00 00
	00		 mov	 al, BYTE PTR [ecx+134]
  0002c	3c 02		 cmp	 al, 2
  0002e	0f 82 ba 00 00
	00		 jb	 $LN5@BroadcastS
  00034	3c 04		 cmp	 al, 4
  00036	0f 87 b2 00 00
	00		 ja	 $LN5@BroadcastS

; 903  : 
; 904  : 	OBJECTSTRUCT & requester = gObj[m_DuelChannel[nId].nIndex1];

  0003c	69 51 68 40 27
	00 00		 imul	 edx, DWORD PTR [ecx+104], 10048
  00043	0f 57 c0	 xorps	 xmm0, xmm0

; 905  :     OBJECTSTRUCT & responsor = gObj[m_DuelChannel[nId].nIndex2];
; 906  : 
; 907  : 	PMSG_DUEL_SCORE_BROADCAST res = {0};

  00046	66 0f d6 45 f1	 movq	 QWORD PTR _res$[ebp+1], xmm0
  0004b	53		 push	 ebx
  0004c	69 59 6c 40 27
	00 00		 imul	 ebx, DWORD PTR [ecx+108], 10048

; 908  : 	res.h.c = PMHC_BYTE;
; 909  : 	res.h.headcode = 0xAA;
; 910  : 	res.h.subcode = 0x04;
; 911  : 	res.h.size = sizeof(PMSG_DUEL_SCORE_BROADCAST);

  00053	b1 0a		 mov	 cl, 10			; 0000000aH
  00055	c6 45 f9 00	 mov	 BYTE PTR _res$[ebp+9], 0
  00059	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005f	c7 45 f0 c1 0a
	aa 04		 mov	 DWORD PTR _res$[ebp], 78252737 ; 04aa0ac1H
  00066	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 912  : 	res.NumberH1 = HIBYTE(requester.m_Index);

  0006c	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00070	88 45 f4	 mov	 BYTE PTR _res$[ebp+4], al

; 913  :     res.NumberL1 = LOBYTE(requester.m_Index);

  00073	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00076	88 45 f5	 mov	 BYTE PTR _res$[ebp+5], al

; 914  :     res.NumberH2 = HIBYTE(responsor.m_Index);

  00079	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]
  0007d	88 45 f6	 mov	 BYTE PTR _res$[ebp+6], al

; 915  :     res.NumberL2 = LOBYTE(responsor.m_Index);

  00080	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00083	88 45 f7	 mov	 BYTE PTR _res$[ebp+7], al

; 916  :     res.btDuelScore1 = requester.m_btDuelScore;

  00086	0f b6 82 54 12
	00 00		 movzx	 eax, BYTE PTR [edx+4692]
  0008d	88 45 f8	 mov	 BYTE PTR _res$[ebp+8], al

; 917  :     res.btDuelScore2 = responsor.m_btDuelScore;

  00090	0f b6 83 54 12
	00 00		 movzx	 eax, BYTE PTR [ebx+4692]
  00097	88 45 f9	 mov	 BYTE PTR _res$[ebp+9], al

; 918  :       
; 919  : 	if( (nFlag & 1) == 1 )

  0009a	8a 45 0c	 mov	 al, BYTE PTR _nFlag$[ebp]
  0009d	a8 01		 test	 al, 1
  0009f	74 26		 je	 SHORT $LN6@BroadcastS

; 920  :     {
; 921  : 		DataSend(requester.m_Index, (LPBYTE)&res, res.h.size);

  000a1	6a 0a		 push	 10			; 0000000aH
  000a3	8d 45 f0	 lea	 eax, DWORD PTR _res$[ebp]
  000a6	50		 push	 eax
  000a7	ff 32		 push	 DWORD PTR [edx]
  000a9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 922  :         DataSend(responsor.m_Index, (LPBYTE)&res, res.h.size);

  000ae	0f b6 45 f1	 movzx	 eax, BYTE PTR _res$[ebp+1]
  000b2	50		 push	 eax
  000b3	8d 45 f0	 lea	 eax, DWORD PTR _res$[ebp]
  000b6	50		 push	 eax
  000b7	ff 33		 push	 DWORD PTR [ebx]
  000b9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000be	8a 4d f1	 mov	 cl, BYTE PTR _res$[ebp+1]
  000c1	83 c4 18	 add	 esp, 24			; 00000018H
  000c4	8a 45 0c	 mov	 al, BYTE PTR _nFlag$[ebp]
$LN6@BroadcastS:

; 923  :     }
; 924  : 	if( (nFlag & 2) == 2 )

  000c7	5b		 pop	 ebx
  000c8	a8 02		 test	 al, 2
  000ca	74 64		 je	 SHORT $LN7@BroadcastS

; 925  : 	{
; 926  :         BroadcastToObserver(nId, (LPBYTE)&res, res.h.size);

  000cc	0f b6 c1	 movzx	 eax, cl
  000cf	8b cf		 mov	 ecx, edi
  000d1	50		 push	 eax
  000d2	8d 45 f0	 lea	 eax, DWORD PTR _res$[ebp]
  000d5	50		 push	 eax
  000d6	56		 push	 esi
  000d7	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi

; 927  : 	}
; 928  : }

  000de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e1	33 cd		 xor	 ecx, ebp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c2 08 00	 ret	 8
$LN5@BroadcastS:

; 902  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "0","NULL",__FILE__, __LINE__); return; }

  000ee	68 86 03 00 00	 push	 902			; 00000386H
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000fd	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  00107	eb 19		 jmp	 SHORT $LN9@BroadcastS
$LN3@BroadcastS:

; 901  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00109	68 85 03 00 00	 push	 901			; 00000385H
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
$LN9@BroadcastS:
  00122	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0012d	83 c4 18	 add	 esp, 24			; 00000018H
$LN7@BroadcastS:

; 927  : 	}
; 928  : }

  00130	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	5f		 pop	 edi
  00134	33 cd		 xor	 ecx, ebp
  00136	5e		 pop	 esi
  00137	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c2 08 00	 ret	 8
?BroadcastScore@CNewPVP@@AAEXHE@Z ENDP			; CNewPVP::BroadcastScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?CheckChannelListInfo@CNewPVP@@AAEXH@Z
_TEXT	SEGMENT
_nId$ = 8						; size = 4
?CheckChannelListInfo@CNewPVP@@AAEXH@Z PROC		; CNewPVP::CheckChannelListInfo, COMDAT
; _this$ = ecx

; 893  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 894  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX )	return;	

  00003	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  00006	83 f8 03	 cmp	 eax, 3
  00009	77 08		 ja	 SHORT $LN3@CheckChann

; 895  : 	m_DuelChannelList.channel[nId].bWatch = 1;

  0000b	6b c0 16	 imul	 eax, eax, 22
  0000e	c6 44 08 21 01	 mov	 BYTE PTR [eax+ecx+33], 1
$LN3@CheckChann:

; 896  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?CheckChannelListInfo@CNewPVP@@AAEXH@Z ENDP		; CNewPVP::CheckChannelListInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?LeaveChannelObserver@CNewPVP@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_nId$ = 8						; size = 4
?LeaveChannelObserver@CNewPVP@@AAEXH@Z PROC		; CNewPVP::LeaveChannelObserver, COMDAT
; _this$ = ecx

; 871  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00008	8b 83 1c 01 00
	00		 mov	 eax, DWORD PTR [ebx+284]

; 43   : 		: _Ptr(_Pnode)

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b f0		 cmp	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 873  : 	while(iter!=m_ObserverInfoList.end())

  00012	0f 84 bc 00 00
	00		 je	 $LN149@LeaveChann
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _nId$[ebp]
  0001b	8d 83 1c 01 00
	00		 lea	 eax, DWORD PTR [ebx+284]
  00021	57		 push	 edi
$LL2@LeaveChann:

; 874  : 	{
; 875  : 		ObserverInfo & info = iter->second;		
; 876  : 		if(info.nId == nId)

  00022	39 4e 14	 cmp	 DWORD PTR [esi+20], ecx
  00025	75 45		 jne	 SHORT $LN4@LeaveChann

; 877  : 		{
; 878  : 			LPOBJ lpObj = (LPOBJ)&gObj[info.nIndex];

  00027	69 7e 18 40 27
	00 00		 imul	 edi, DWORD PTR [esi+24], 10048
  0002e	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  00034	80 bf 23 01 00
	00 40		 cmp	 BYTE PTR [edi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 880  : 			if( IsPKFieldMap(lpObj->MapNumber) )	MoveGate(lpObj->m_Index, 294);

  0003b	75 0e		 jne	 SHORT $LN5@LeaveChann
  0003d	68 26 01 00 00	 push	 294			; 00000126H
  00042	ff 37		 push	 DWORD PTR [edi]
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate
$LN5@LeaveChann:

; 881  : 			
; 882  : 			SetBuff(*lpObj, FALSE);

  0004b	6a 00		 push	 0
  0004d	57		 push	 edi
  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z ; CNewPVP::SetBuff

; 883  : 			iter = m_ObserverInfoList.erase(iter);

  00055	56		 push	 esi
  00056	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00059	50		 push	 eax
  0005a	8d 8b 1c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+284]
  00060	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase

; 884  : 			continue;

  00065	8b 4d 08	 mov	 ecx, DWORD PTR _nId$[ebp]
  00068	8b 30		 mov	 esi, DWORD PTR [eax]
  0006a	eb 46		 jmp	 SHORT $LN151@LeaveChann
$LN4@LeaveChann:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  0006c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00070	75 46		 jne	 SHORT $LN111@LeaveChann

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00072	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  00075	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00079	75 16		 jne	 SHORT $LN140@LeaveChann

; 63   : 			_Ptr = _Mytree::_Min(

  0007b	8b f0		 mov	 esi, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0007d	8b 06		 mov	 eax, DWORD PTR [esi]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0007f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00083	75 2d		 jne	 SHORT $LN151@LeaveChann
$LL122@LeaveChann:

; 615  : 			_Pnode = _Left(_Pnode);

  00085	8b f0		 mov	 esi, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00087	8b 06		 mov	 eax, DWORD PTR [esi]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00089	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008d	74 f6		 je	 SHORT $LL122@LeaveChann

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0008f	eb 21		 jmp	 SHORT $LN151@LeaveChann
$LN140@LeaveChann:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00091	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00094	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00098	75 16		 jne	 SHORT $LN150@LeaveChann
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL106@LeaveChann:
  000a0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000a3	75 0b		 jne	 SHORT $LN150@LeaveChann

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000a5	8b f0		 mov	 esi, eax
  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	74 f0		 je	 SHORT $LL106@LeaveChann
$LN150@LeaveChann:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000b0	8b f0		 mov	 esi, eax
$LN151@LeaveChann:
  000b2	8d 83 1c 01 00
	00		 lea	 eax, DWORD PTR [ebx+284]
$LN111@LeaveChann:

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  000b8	3b 30		 cmp	 esi, DWORD PTR [eax]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 873  : 	while(iter!=m_ObserverInfoList.end())

  000ba	0f 85 62 ff ff
	ff		 jne	 $LL2@LeaveChann

; 885  : 		}		
; 886  : 		iter++;
; 887  : 	}
; 888  : 	m_ObserverCount[nId] = 0;

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	c7 84 8b 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ebx+ecx*4+292], 0
  000cd	5b		 pop	 ebx

; 889  : }

  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 04 00	 ret	 4
$LN149@LeaveChann:

; 885  : 		}		
; 886  : 		iter++;
; 887  : 	}
; 888  : 	m_ObserverCount[nId] = 0;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  000d7	5e		 pop	 esi
  000d8	c7 84 83 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ebx+eax*4+292], 0
  000e3	5b		 pop	 ebx

; 889  : }

  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 04 00	 ret	 4
?LeaveChannelObserver@CNewPVP@@AAEXH@Z ENDP		; CNewPVP::LeaveChannelObserver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetObserverList@CNewPVP@@AAEXHAAU_tagPMSG_DUEL_OBSERVERLIST_BROADCAST@@@Z
_TEXT	SEGMENT
_nId$ = 8						; size = 4
_res$ = 12						; size = 4
?GetObserverList@CNewPVP@@AAEXHAAU_tagPMSG_DUEL_OBSERVERLIST_BROADCAST@@@Z PROC ; CNewPVP::GetObserverList, COMDAT
; _this$ = ecx

; 746  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 747  : 	int i = 0;

  00006	33 c9		 xor	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00008	8b 87 1c 01 00
	00		 mov	 eax, DWORD PTR [edi+284]

; 43   : 		: _Ptr(_Pnode)

  0000e	8b 10		 mov	 edx, DWORD PTR [eax]

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00010	3b d0		 cmp	 edx, eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 748  : 	for(std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.begin();iter!=m_ObserverInfoList.end(); ++iter)

  00012	0f 84 81 00 00
	00		 je	 $LN148@GetObserve

; 747  : 	int i = 0;

  00018	53		 push	 ebx
  00019	8b 5d 0c	 mov	 ebx, DWORD PTR _res$[ebp]
  0001c	56		 push	 esi
  0001d	8d 73 05	 lea	 esi, DWORD PTR [ebx+5]
$LL56@GetObserve:

; 749  : 	{
; 750  : 		ObserverInfo & info = iter->second;		
; 751  : 		if(info.nId == nId)

  00020	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  00023	39 42 14	 cmp	 DWORD PTR [edx+20], eax
  00026	75 1a		 jne	 SHORT $LN2@GetObserve

; 752  : 		{
; 753  : 			memcpy(&res.user[i], info.szName, MAX_IDSTRING);

  00028	f3 0f 7e 42 1c	 movq	 xmm0, QWORD PTR [edx+28]

; 754  : 			i++;

  0002d	41		 inc	 ecx
  0002e	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00032	66 8b 42 24	 mov	 ax, WORD PTR [edx+36]
  00036	66 89 46 08	 mov	 WORD PTR [esi+8], ax
  0003a	83 c6 0a	 add	 esi, 10			; 0000000aH

; 755  : 			if( i >= 10 )	break;

  0003d	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00040	7d 4d		 jge	 SHORT $LN149@GetObserve
$LN2@GetObserve:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  00042	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00046	75 3f		 jne	 SHORT $LN140@GetObserve

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00048	8b 42 08	 mov	 eax, DWORD PTR [edx+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  0004b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004f	75 1b		 jne	 SHORT $LN136@GetObserve

; 63   : 			_Ptr = _Mytree::_Min(

  00051	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00053	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00055	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00059	75 2c		 jne	 SHORT $LN140@GetObserve
  0005b	0f 1f 44 00 00	 npad	 5
$LL67@GetObserve:

; 615  : 			_Pnode = _Left(_Pnode);

  00060	8b d0		 mov	 edx, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00062	8b 02		 mov	 eax, DWORD PTR [edx]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00064	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00068	74 f6		 je	 SHORT $LL67@GetObserve

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  0006a	eb 1b		 jmp	 SHORT $LN140@GetObserve
$LN136@GetObserve:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  0006c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00073	75 10		 jne	 SHORT $LN150@GetObserve
$LL51@GetObserve:
  00075	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00078	75 0b		 jne	 SHORT $LN150@GetObserve

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0007a	8b d0		 mov	 edx, eax
  0007c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00083	74 f0		 je	 SHORT $LL51@GetObserve
$LN150@GetObserve:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00085	8b d0		 mov	 edx, eax
$LN140@GetObserve:

; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00087	3b 97 1c 01 00
	00		 cmp	 edx, DWORD PTR [edi+284]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 748  : 	for(std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.begin();iter!=m_ObserverInfoList.end(); ++iter)

  0008d	75 91		 jne	 SHORT $LL56@GetObserve
$LN149@GetObserve:
  0008f	5e		 pop	 esi

; 756  : 		}
; 757  : 	}
; 758  : 	res.nCount = i;

  00090	88 4b 04	 mov	 BYTE PTR [ebx+4], cl
  00093	5b		 pop	 ebx
  00094	5f		 pop	 edi

; 759  : }

  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
$LN148@GetObserve:

; 756  : 		}
; 757  : 	}
; 758  : 	res.nCount = i;

  00099	8b 45 0c	 mov	 eax, DWORD PTR _res$[ebp]
  0009c	5f		 pop	 edi
  0009d	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 759  : }

  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
?GetObserverList@CNewPVP@@AAEXHAAU_tagPMSG_DUEL_OBSERVERLIST_BROADCAST@@@Z ENDP ; CNewPVP::GetObserverList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?CheckUsersOnConnect@CNewPVP@@AAEHH@Z
_TEXT	SEGMENT
_nId$ = 8						; size = 4
?CheckUsersOnConnect@CNewPVP@@AAEHH@Z PROC		; CNewPVP::CheckUsersOnConnect, COMDAT
; _this$ = ecx

; 695  : {  

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 696  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","FALSE","NULL",__FILE__, __LINE__); return FALSE; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _nId$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	83 f8 03	 cmp	 eax, 3
  0000c	0f 87 ba 00 00
	00		 ja	 $LN3@CheckUsers

; 697  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "FALSE","NULL",__FILE__, __LINE__); return FALSE; }

  00012	6b c0 2c	 imul	 eax, eax, 44
  00015	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  00018	8a 81 86 00 00
	00		 mov	 al, BYTE PTR [ecx+134]
  0001e	3c 02		 cmp	 al, 2
  00020	72 7c		 jb	 SHORT $LN5@CheckUsers
  00022	3c 04		 cmp	 al, 4
  00024	77 78		 ja	 SHORT $LN5@CheckUsers

; 698  : 
; 699  : 	OBJECTSTRUCT & requester = gObj[m_DuelChannel[nId].nIndex1];
; 700  : 	OBJECTSTRUCT & responsor = gObj[m_DuelChannel[nId].nIndex2];

  00026	56		 push	 esi
  00027	69 71 6c 40 27
	00 00		 imul	 esi, DWORD PTR [ecx+108], 10048
  0002e	57		 push	 edi
  0002f	69 79 68 40 27
	00 00		 imul	 edi, DWORD PTR [ecx+104], 10048
  00036	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003c	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 702  : 	if( !gObjIsConnected(requester.m_Index) || !IsPKFieldMap( requester.MapNumber) ){ Leave(requester); return FALSE; }

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00049	83 c4 04	 add	 esp, 4
  0004c	85 c0		 test	 eax, eax
  0004e	74 3d		 je	 SHORT $LN7@CheckUsers
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  00050	80 bf 23 01 00
	00 40		 cmp	 BYTE PTR [edi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 702  : 	if( !gObjIsConnected(requester.m_Index) || !IsPKFieldMap( requester.MapNumber) ){ Leave(requester); return FALSE; }

  00057	75 34		 jne	 SHORT $LN7@CheckUsers

; 703  : 	if( !gObjIsConnected(responsor.m_Index) || !IsPKFieldMap( responsor.MapNumber) ){ Leave(responsor); return FALSE; }

  00059	ff 36		 push	 DWORD PTR [esi]
  0005b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00060	83 c4 04	 add	 esp, 4
  00063	85 c0		 test	 eax, eax
  00065	74 15		 je	 SHORT $LN9@CheckUsers
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  00067	80 be 23 01 00
	00 40		 cmp	 BYTE PTR [esi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 703  : 	if( !gObjIsConnected(responsor.m_Index) || !IsPKFieldMap( responsor.MapNumber) ){ Leave(responsor); return FALSE; }

  0006e	75 0c		 jne	 SHORT $LN9@CheckUsers

; 704  : 	return TRUE;

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	b8 01 00 00 00	 mov	 eax, 1
  00077	5b		 pop	 ebx

; 705  : }

  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN9@CheckUsers:

; 703  : 	if( !gObjIsConnected(responsor.m_Index) || !IsPKFieldMap( responsor.MapNumber) ){ Leave(responsor); return FALSE; }

  0007c	56		 push	 esi
  0007d	8b cb		 mov	 ecx, ebx
  0007f	e8 00 00 00 00	 call	 ?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::Leave
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	33 c0		 xor	 eax, eax
  00088	5b		 pop	 ebx

; 705  : }

  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN7@CheckUsers:

; 702  : 	if( !gObjIsConnected(requester.m_Index) || !IsPKFieldMap( requester.MapNumber) ){ Leave(requester); return FALSE; }

  0008d	57		 push	 edi

; 703  : 	if( !gObjIsConnected(responsor.m_Index) || !IsPKFieldMap( responsor.MapNumber) ){ Leave(responsor); return FALSE; }

  0008e	8b cb		 mov	 ecx, ebx
  00090	e8 00 00 00 00	 call	 ?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::Leave
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	33 c0		 xor	 eax, eax
  00099	5b		 pop	 ebx

; 705  : }

  0009a	5d		 pop	 ebp
  0009b	c2 04 00	 ret	 4
$LN5@CheckUsers:

; 697  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "FALSE","NULL",__FILE__, __LINE__); return FALSE; }

  0009e	68 b9 02 00 00	 push	 697			; 000002b9H
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
  000b2	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
$LN18@CheckUsers:
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000c2	83 c4 18	 add	 esp, 24			; 00000018H
  000c5	33 c0		 xor	 eax, eax
  000c7	5b		 pop	 ebx

; 705  : }

  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
$LN3@CheckUsers:

; 696  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","FALSE","NULL",__FILE__, __LINE__); return FALSE; }

  000cc	68 b8 02 00 00	 push	 696			; 000002b8H
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  000e5	eb d0		 jmp	 SHORT $LN18@CheckUsers
?CheckUsersOnConnect@CNewPVP@@AAEHH@Z ENDP		; CNewPVP::CheckUsersOnConnect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetChannelIdByObserver@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?GetChannelIdByObserver@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z PROC ; CNewPVP::GetChannelIdByObserver, COMDAT
; _this$ = ecx

; 676  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00003	8b 91 1c 01 00
	00		 mov	 edx, DWORD PTR [ecx+284]

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  00009	8b c2		 mov	 eax, edx
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi

; 1488 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1489 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1490 : 					? end() : _Where);
; 1491 : 		}
; 1492 : 
; 1493 : 	const_iterator find(const key_type& _Keyval) const
; 1494 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1495 : 		const_iterator _Where = lower_bound(_Keyval);
; 1496 : 		return (_Where == end()
; 1497 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1498 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1499 : 					? end() : _Where);
; 1500 : 		}
; 1501 : 
; 1502 : 	template<class _Other,
; 1503 : 		class _Mycomp = key_compare,
; 1504 : 		class = typename _Mycomp::is_transparent>
; 1505 : 		iterator find(const _Other& _Keyval)
; 1506 : 		{	// find an element in mutable sequence that matches _Keyval
; 1507 : 		iterator _Where = lower_bound(_Keyval);
; 1508 : 		return (_Where == end()
; 1509 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1510 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1511 : 					? end() : _Where);
; 1512 : 		}
; 1513 : 
; 1514 : 	template<class _Other,
; 1515 : 		class _Mycomp = key_compare,
; 1516 : 		class = typename _Mycomp::is_transparent>
; 1517 : 		const_iterator find(const _Other& _Keyval) const
; 1518 : 		{	// find an element in nonmutable sequence that matches _Keyval
; 1519 : 		const_iterator _Where = lower_bound(_Keyval);
; 1520 : 		return (_Where == end()
; 1521 : 			|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1522 : 				_Keyval, this->_Key(_Where._Mynode()))
; 1523 : 					? end() : _Where);
; 1524 : 		}
; 1525 : 
; 1526 : 	size_type count(const key_type& _Keyval) const
; 1527 : 		{	// count all elements that match _Keyval
; 1528 : 		_Paircc _Ans = equal_range(_Keyval);
; 1529 : 		size_type _Num = 0;
; 1530 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1531 : 		return (_Num);
; 1532 : 		}
; 1533 : 
; 1534 : 	template<class _Other,
; 1535 : 		class _Mycomp = key_compare,
; 1536 : 		class = typename _Mycomp::is_transparent>
; 1537 : 		size_type count(const _Other& _Keyval) const
; 1538 : 		{	// count all elements that match _Keyval
; 1539 : 		_Paircc _Ans = equal_range(_Keyval);
; 1540 : 		size_type _Num = 0;
; 1541 : 		_Distance(_Ans.first, _Ans.second, _Num);
; 1542 : 		return (_Num);
; 1543 : 		}
; 1544 : 
; 1545 : 	iterator lower_bound(const key_type& _Keyval)
; 1546 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1547 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1548 : 		}
; 1549 : 
; 1550 : 	const_iterator lower_bound(const key_type& _Keyval) const
; 1551 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1552 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1553 : 		}
; 1554 : 
; 1555 : 	template<class _Other,
; 1556 : 		class _Mycomp = key_compare,
; 1557 : 		class = typename _Mycomp::is_transparent>
; 1558 : 		iterator lower_bound(const _Other& _Keyval)
; 1559 : 		{	// find leftmost node not less than _Keyval in mutable tree
; 1560 : 		return (iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1561 : 		}
; 1562 : 
; 1563 : 	template<class _Other,
; 1564 : 		class _Mycomp = key_compare,
; 1565 : 		class = typename _Mycomp::is_transparent>
; 1566 : 		const_iterator lower_bound(const _Other& _Keyval) const
; 1567 : 		{	// find leftmost node not less than _Keyval in nonmutable tree
; 1568 : 		return (const_iterator(_Lbound(_Keyval), &this->_Get_data()));
; 1569 : 		}
; 1570 : 
; 1571 : 	iterator upper_bound(const key_type& _Keyval)
; 1572 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1573 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1574 : 		}
; 1575 : 
; 1576 : 	const_iterator upper_bound(const key_type& _Keyval) const
; 1577 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1578 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1579 : 		}
; 1580 : 
; 1581 : 	template<class _Other,
; 1582 : 		class _Mycomp = key_compare,
; 1583 : 		class = typename _Mycomp::is_transparent>
; 1584 : 		iterator upper_bound(const _Other& _Keyval)
; 1585 : 		{	// find leftmost node greater than _Keyval in mutable tree
; 1586 : 		return (iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1587 : 		}
; 1588 : 
; 1589 : 	template<class _Other,
; 1590 : 		class _Mycomp = key_compare,
; 1591 : 		class = typename _Mycomp::is_transparent>
; 1592 : 		const_iterator upper_bound(const _Other& _Keyval) const
; 1593 : 		{	// find leftmost node greater than _Keyval in nonmutable tree
; 1594 : 		return (const_iterator(_Ubound(_Keyval), &this->_Get_data()));
; 1595 : 		}
; 1596 : 
; 1597 : 	_Pairii equal_range(const key_type& _Keyval)
; 1598 : 		{	// find range equivalent to _Keyval in mutable tree
; 1599 : 		return (_Eqrange(_Keyval));
; 1600 : 		}
; 1601 : 
; 1602 : 	_Paircc equal_range(const key_type& _Keyval) const
; 1603 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1604 : 		return (_Eqrange(_Keyval));
; 1605 : 		}
; 1606 : 
; 1607 : 	template<class _Other,
; 1608 : 		class _Mycomp = key_compare,
; 1609 : 		class = typename _Mycomp::is_transparent>
; 1610 : 		_Pairii equal_range(const _Other& _Keyval)
; 1611 : 		{	// find range equivalent to _Keyval in mutable tree
; 1612 : 		return (_Eqrange(_Keyval));
; 1613 : 		}
; 1614 : 
; 1615 : 	template<class _Other,
; 1616 : 		class _Mycomp = key_compare,
; 1617 : 		class = typename _Mycomp::is_transparent>
; 1618 : 		_Paircc equal_range(const _Other& _Keyval) const
; 1619 : 		{	// find range equivalent to _Keyval in nonmutable tree
; 1620 : 		return (_Eqrange(_Keyval));
; 1621 : 		}
; 1622 : 
; 1623 : 	void swap(_Myt& _Right)
; 1624 : 		{	// exchange contents with _Right
; 1625 : 		if (this == &_Right)
; 1626 : 			;	// same object, do nothing
; 1627 : 		else if (this->_Getal() == _Right._Getal())
; 1628 : 			{	// same allocator, swap control information
; 1629 : 			this->_Swap_all(_Right);
; 1630 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1631 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1632 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1633 : 			}
; 1634 : 
; 1635 : 		else if (_Alty::propagate_on_container_swap::value)
; 1636 : 			{	// swap allocators and control information
; 1637 : 			this->_Swap_alloc(_Right);
; 1638 : 			_Swap_adl(this->_Getcomp(), _Right._Getcomp());
; 1639 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1640 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1641 : 			}
; 1642 : 
; 1643 : 		else
; 1644 : 			{	// containers are incompatible
; 1645 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1646 : 			_DEBUG_ERROR("map/set containers incompatible for swap");
; 1647 : 
; 1648 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1649 : 			_XSTD terminate();
; 1650 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : protected:
; 1655 : 	template<class _Valty>
; 1656 : 		_Nodeptr _Buynode_if_nil(_Nodeptr _Node, _Valty&&)
; 1657 : 		{	// node exists, just return it
; 1658 : 		return (_Node);
; 1659 : 		}
; 1660 : 
; 1661 : 	template<class _Valty>
; 1662 : 		_Nodeptr _Buynode_if_nil(_Nil, _Valty&& _Val)
; 1663 : 		{	// node doesn't exist, make it
; 1664 : 		return (this->_Buynode(_STD forward<_Valty>(_Val)));
; 1665 : 		}
; 1666 : 
; 1667 : 	void _Destroy_if_not_nil(_Nodeptr _Newnode)
; 1668 : 		{	// node exists, destroy it
; 1669 : 		this->_Getal().destroy(
; 1670 : 			_STD addressof(this->_Myval(_Newnode)));
; 1671 : 
; 1672 : 		this->_Getal().deallocate(_Newnode, 1);
; 1673 : 		}
; 1674 : 
; 1675 : 	void _Destroy_if_not_nil(_Nil)
; 1676 : 		{	// node doesn't exist, do nothing
; 1677 : 		}
; 1678 : 
; 1679 : 	template<class _Valty,
; 1680 : 		class _Nodety>
; 1681 : 		iterator _Insert_hint(const_iterator _Where,
; 1682 : 			_Valty&& _Val, _Nodety _Newnode)
; 1683 : 		{	// try to insert node using _Where as a hint
; 1684 : 		const_iterator _Next;
; 1685 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1686 : 
; 1687 : 		_TRY_BEGIN
; 1688 : 
; 1689 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1690 : 		if (_Where._Getcont() != &this->_Get_data())
; 1691 : 			_DEBUG_ERROR("map/set insert iterator outside range");
; 1692 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1693 : 
; 1694 : 		if (size() == 0)
; 1695 : 			return (_Insert_at(true, this->_Myhead(),
; 1696 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1697 : 		else if (this->_Multi)
; 1698 : 			{	// insert even if duplicate
; 1699 : 			if (_Where == begin())
; 1700 : 				{	// insert at beginning if before first element
; 1701 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1702 : 					this->_Key(_Where._Mynode()), this->_Kfn(_Val)))
; 1703 : 					return (_Insert_at(true, _Where._Mynode(),
; 1704 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1705 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1706 : 				}
; 1707 : 			else if (_Where == end())
; 1708 : 				{	// insert at end if after last element
; 1709 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1710 : 					this->_Kfn(_Val), this->_Key(_Rmost())))
; 1711 : 					return (_Insert_at(false, _Rmost(),
; 1712 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1713 : 				}
; 1714 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1715 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1716 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1717 : 					this->_Kfn(_Val),
; 1718 : 					this->_Key((--(_Next = _Where))._Mynode())))
; 1719 : 				{	// insert before _Where
; 1720 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1721 : 					return (_Insert_at(false, _Next._Mynode(),
; 1722 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1723 : 				else
; 1724 : 					return (_Insert_at(true, _Where._Mynode(),
; 1725 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1726 : 				}
; 1727 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1728 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1729 : 				&& (++(_Next = _Where) == end()
; 1730 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1731 : 						this->_Key(_Next._Mynode()), this->_Kfn(_Val))))
; 1732 : 				{	// insert after _Where
; 1733 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1734 : 					return (_Insert_at(false, _Where._Mynode(),
; 1735 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1736 : 				else
; 1737 : 					return (_Insert_at(true, _Next._Mynode(),
; 1738 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1739 : 				}
; 1740 : 			else
; 1741 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1742 : 			}
; 1743 : 		else
; 1744 : 			{	// insert only if unique
; 1745 : 			if (_Where == begin())
; 1746 : 				{	// insert at beginning if before first element
; 1747 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1748 : 					this->_Kfn(_Val), this->_Key(_Where._Mynode())))
; 1749 : 					return (_Insert_at(true, _Where._Mynode(),
; 1750 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1751 : 				}
; 1752 : 			else if (_Where == end())
; 1753 : 				{	// insert at end if after last element
; 1754 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1755 : 					this->_Key(_Rmost()), this->_Kfn(_Val)))
; 1756 : 					return (_Insert_at(false, _Rmost(),
; 1757 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1758 : 				}
; 1759 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1760 : 				this->_Kfn(_Val), this->_Key(_Where._Mynode()))
; 1761 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),
; 1762 : 					this->_Key((--(_Next = _Where))._Mynode()),
; 1763 : 					this->_Kfn(_Val)))
; 1764 : 				{	// insert before _Where
; 1765 : 				if (this->_Isnil(this->_Right(_Next._Mynode())))
; 1766 : 					return (_Insert_at(false, _Next._Mynode(),
; 1767 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1768 : 				else
; 1769 : 					return (_Insert_at(true, _Where._Mynode(),
; 1770 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1771 : 				}
; 1772 : 			else if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1773 : 				this->_Key(_Where._Mynode()), this->_Kfn(_Val))
; 1774 : 				&& (++(_Next = _Where) == end()
; 1775 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1776 : 						this->_Kfn(_Val), this->_Key(_Next._Mynode()))))
; 1777 : 				{	// insert after _Where
; 1778 : 				if (this->_Isnil(this->_Right(_Where._Mynode())))
; 1779 : 					return (_Insert_at(false, _Where._Mynode(),
; 1780 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1781 : 				else
; 1782 : 					return (_Insert_at(true, _Next._Mynode(),
; 1783 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1784 : 				}
; 1785 : 			}
; 1786 : 		_CATCH_ALL
; 1787 : 		_Destroy_if_not_nil(_Newnode);
; 1788 : 		_RERAISE;
; 1789 : 		_CATCH_END
; 1790 : 
; 1791 : 		return (_Insert_nohint(_Leftish,
; 1792 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1793 : 		}
; 1794 : 
; 1795 : 	template<class _Valty,
; 1796 : 		class _Nodety>
; 1797 : 		_Pairib _Insert_nohint(bool _Leftish,
; 1798 : 			_Valty&& _Val, _Nodety _Newnode)
; 1799 : 		{	// try to insert node, on left if _Leftish
; 1800 : 		_TRY_BEGIN
; 1801 : 		_Nodeptr _Trynode = _Root();
; 1802 : 		_Nodeptr _Wherenode = this->_Myhead();
; 1803 : 		bool _Addleft = true;	// add to left of head if tree empty
; 1804 : 
; 1805 : 		while (!this->_Isnil(_Trynode))
; 1806 : 			{	// look for leaf to insert before (_Addleft) or after
; 1807 : 			_Wherenode = _Trynode;
; 1808 : 			if (_Leftish)
; 1809 : 				_Addleft = !_DEBUG_LT_PRED(this->_Getcomp(),
; 1810 : 					this->_Key(_Trynode),
; 1811 : 					this->_Kfn(_Val));	// favor left end
; 1812 : 			else
; 1813 : 				_Addleft = _DEBUG_LT_PRED(this->_Getcomp(),
; 1814 : 					this->_Kfn(_Val),
; 1815 : 					this->_Key(_Trynode));	// favor right end
; 1816 : 			_Trynode = _Addleft ? this->_Left(_Trynode)
; 1817 : 				: this->_Right(_Trynode);
; 1818 : 			}
; 1819 : 
; 1820 : 		if (this->_Multi)
; 1821 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1822 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1823 : 		else
; 1824 : 			{	// insert only if unique
; 1825 : 			iterator _Where = iterator(_Wherenode, &this->_Get_data());
; 1826 : 			if (!_Addleft)
; 1827 : 				;	// need to test if insert after is okay
; 1828 : 			else if (_Where == begin())
; 1829 : 				return (_Pairib(_Insert_at(true, _Wherenode,
; 1830 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1831 : 			else
; 1832 : 				--_Where;	// need to test if insert before is okay
; 1833 : 
; 1834 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),
; 1835 : 				this->_Key(_Where._Mynode()),
; 1836 : 				this->_Kfn(_Val)))
; 1837 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1838 : 					_STD forward<_Valty>(_Val), _Newnode), true));
; 1839 : 			else
; 1840 : 				{	// duplicate, don't insert
; 1841 : 				_Destroy_if_not_nil(_Newnode);
; 1842 : 				return (_Pairib(_Where, false));
; 1843 : 				}
; 1844 : 			}
; 1845 : 		_CATCH_ALL
; 1846 : 		_Destroy_if_not_nil(_Newnode);
; 1847 : 		_RERAISE;
; 1848 : 		_CATCH_END
; 1849 : 		}
; 1850 : 
; 1851 : 	template<class _Valty,
; 1852 : 		class _Nodety>
; 1853 : 		iterator _Insert_at(bool _Addleft, _Nodeptr _Wherenode,
; 1854 : 		_Valty&& _Val, _Nodety _Node)
; 1855 : 		{	// add node with value next to _Wherenode, to left if _Addleft
; 1856 : 		if (max_size() - 1 <= this->_Mysize())
; 1857 : 			{	// tree would get too big, fail
; 1858 : 			_Destroy_if_not_nil(_Node);
; 1859 : 			_Xlength_error("map/set<T> too long");
; 1860 : 			}
; 1861 : 		_Nodeptr _Newnode = _Buynode_if_nil(_Node,
; 1862 : 			_STD forward<_Valty>(_Val));
; 1863 : 
; 1864 : 		++this->_Mysize();
; 1865 : 		_Newnode->_Parent = _Wherenode;
; 1866 : 
; 1867 : 		if (_Wherenode == this->_Myhead())
; 1868 : 			{	// first node in tree, just set head values
; 1869 : 			_Root() = _Newnode;
; 1870 : 			_Lmost() = _Newnode;
; 1871 : 			_Rmost() = _Newnode;
; 1872 : 			}
; 1873 : 		else if (_Addleft)
; 1874 : 			{	// add to left of _Wherenode
; 1875 : 			this->_Left(_Wherenode) = _Newnode;
; 1876 : 			if (_Wherenode == _Lmost())
; 1877 : 				_Lmost() = _Newnode;
; 1878 : 			}
; 1879 : 		else
; 1880 : 			{	// add to right of _Wherenode
; 1881 : 			this->_Right(_Wherenode) = _Newnode;
; 1882 : 			if (_Wherenode == _Rmost())
; 1883 : 				_Rmost() = _Newnode;
; 1884 : 			}
; 1885 : 
; 1886 : 		for (_Nodeptr _Pnode = _Newnode;
; 1887 : 			this->_Color(this->_Parent(_Pnode)) == this->_Red; )
; 1888 : 			if (this->_Parent(_Pnode)
; 1889 : 				== this->_Left(this->_Parent(this->_Parent(_Pnode))))
; 1890 : 				{	// fixup red-red in left subtree
; 1891 : 				_Wherenode =
; 1892 : 					this->_Right(this->_Parent(this->_Parent(_Pnode)));
; 1893 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1894 : 					{	// parent has two red children, blacken both
; 1895 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1896 : 					this->_Color(_Wherenode) = this->_Black;
; 1897 : 					this->_Color(this->_Parent(this->_Parent(_Pnode)))
; 1898 : 						= this->_Red;
; 1899 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1900 : 					}
; 1901 : 				else
; 1902 : 					{	// parent has red and black children
; 1903 : 					if (_Pnode == this->_Right(this->_Parent(_Pnode)))
; 1904 : 						{	// rotate right child to left
; 1905 : 						_Pnode = this->_Parent(_Pnode);
; 1906 : 						_Lrotate(_Pnode);
; 1907 : 						}
; 1908 : 					this->_Color(this->_Parent(_Pnode)) =
; 1909 : 						this->_Black;	// propagate red up
; 1910 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1911 : 						this->_Red;
; 1912 : 					_Rrotate(this->_Parent(this->_Parent(_Pnode)));
; 1913 : 					}
; 1914 : 				}
; 1915 : 			else
; 1916 : 				{	// fixup red-red in right subtree
; 1917 : 				_Wherenode =
; 1918 : 					this->_Left(this->_Parent(this->_Parent(_Pnode)));
; 1919 : 				if (this->_Color(_Wherenode) == this->_Red)
; 1920 : 					{	// parent has two red children, blacken both
; 1921 : 					this->_Color(this->_Parent(_Pnode)) = this->_Black;
; 1922 : 					this->_Color(_Wherenode) = this->_Black;
; 1923 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1924 : 						this->_Red;
; 1925 : 					_Pnode = this->_Parent(this->_Parent(_Pnode));
; 1926 : 					}
; 1927 : 				else
; 1928 : 					{	// parent has red and black children
; 1929 : 					if (_Pnode == this->_Left(this->_Parent(_Pnode)))
; 1930 : 						{	// rotate left child to right
; 1931 : 						_Pnode = this->_Parent(_Pnode);
; 1932 : 						_Rrotate(_Pnode);
; 1933 : 						}
; 1934 : 					this->_Color(this->_Parent(_Pnode)) =
; 1935 : 						this->_Black;	// propagate red up
; 1936 : 					this->_Color(this->_Parent(this->_Parent(_Pnode))) =
; 1937 : 						this->_Red;
; 1938 : 					_Lrotate(this->_Parent(this->_Parent(_Pnode)));
; 1939 : 					}
; 1940 : 				}
; 1941 : 
; 1942 : 		this->_Color(_Root()) = this->_Black;	// root is always black
; 1943 : 		return (iterator(_Newnode, &this->_Get_data()));
; 1944 : 		}
; 1945 : 
; 1946 : 	template<class _Moveit>
; 1947 : 		void _Copy(const _Myt& _Right, _Moveit _Movefl)
; 1948 : 		{	// copy or move entire tree from _Right
; 1949 : 		_Root() = _Copy_nodes(_Right._Root(), this->_Myhead(), _Movefl);
; 1950 : 		this->_Mysize() = _Right.size();
; 1951 : 		if (!this->_Isnil(_Root()))
; 1952 : 			{	// nonempty tree, look for new smallest and largest
; 1953 : 			_Lmost() = this->_Min(_Root());
; 1954 : 			_Rmost() = this->_Max(_Root());
; 1955 : 			}
; 1956 : 		else
; 1957 : 			{	// empty tree, just tidy head pointers
; 1958 : 			_Lmost() = this->_Myhead();
; 1959 : 			_Rmost() = this->_Myhead();
; 1960 : 			}
; 1961 : 		}
; 1962 : 
; 1963 : 	template<class _Ty,
; 1964 : 		class _Is_set>
; 1965 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Copy_tag, _Is_set)
; 1966 : 		{	// copy to new node
; 1967 : 		return (this->_Buynode(_Val));
; 1968 : 		}
; 1969 : 
; 1970 : 	template<class _Ty>
; 1971 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, true_type)
; 1972 : 		{	// move to new node -- set
; 1973 : 		return (this->_Buynode(_STD move(_Val)));
; 1974 : 		}
; 1975 : 
; 1976 : 	template<class _Ty>
; 1977 : 		_Nodeptr _Copy_or_move(_Ty& _Val, _Move_tag, false_type)
; 1978 : 		{	// move to new node -- map
; 1979 : 		return (this->_Buynode(
; 1980 : 			_STD move(const_cast<key_type&>(_Val.first)),
; 1981 : 			_STD move(_Val.second)));
; 1982 : 		}
; 1983 : 
; 1984 : 	template<class _Moveit>
; 1985 : 		_Nodeptr _Copy_nodes(_Nodeptr _Rootnode, _Nodeptr _Wherenode,
; 1986 : 			_Moveit _Movefl)
; 1987 : 		{	// copy entire subtree, recursively
; 1988 : 		_Nodeptr _Newroot = this->_Myhead();	// point at nil node
; 1989 : 
; 1990 : 		if (!this->_Isnil(_Rootnode))
; 1991 : 			{	// copy or move a node, then any subtrees
; 1992 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1993 : 			_Nodeptr _Pnode = _Copy_or_move(
; 1994 : 				this->_Myval(_Rootnode), _Movefl, _Is_set);
; 1995 : 			_Pnode->_Parent = _Wherenode;
; 1996 : 			_Pnode->_Color = this->_Color(_Rootnode);
; 1997 : 			if (this->_Isnil(_Newroot))
; 1998 : 				_Newroot = _Pnode;	// memorize new root
; 1999 : 
; 2000 : 			_TRY_BEGIN
; 2001 : 			this->_Left(_Pnode) =
; 2002 : 				_Copy_nodes(this->_Left(_Rootnode), _Pnode, _Movefl);
; 2003 : 			this->_Right(_Pnode) =
; 2004 : 				_Copy_nodes(this->_Right(_Rootnode), _Pnode, _Movefl);
; 2005 : 			_CATCH_ALL
; 2006 : 			_Erase(_Newroot);	// subtree copy failed, bail out
; 2007 : 			_RERAISE;
; 2008 : 			_CATCH_END
; 2009 : 			}
; 2010 : 
; 2011 : 		return (_Newroot);	// return newly constructed tree
; 2012 : 		}
; 2013 : 
; 2014 : 	template<class _Other>
; 2015 : 		_Paircc _Eqrange(const _Other& _Keyval) const
; 2016 : 		{	// find leftmost node not less than _Keyval
; 2017 : 		_Nodeptr _Pnode = _Root();
; 2018 : 		_Nodeptr _Lonode = this->_Myhead();	// end() if search fails
; 2019 : 		_Nodeptr _Hinode = this->_Myhead();	// end() if search fails
; 2020 : 
; 2021 : 		while (!this->_Isnil(_Pnode))
; 2022 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), this->_Key(_Pnode), _Keyval))
; 2023 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2024 : 			else
; 2025 : 				{	// _Pnode not less than _Keyval, remember it
; 2026 : 				if (this->_Isnil(_Hinode)
; 2027 : 						&& _DEBUG_LT_PRED(this->_Getcomp(), _Keyval,
; 2028 : 						this->_Key(_Pnode)))
; 2029 : 					_Hinode = _Pnode;	// _Pnode greater, remember it
; 2030 : 				_Lonode = _Pnode;
; 2031 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2032 : 				}
; 2033 : 
; 2034 : 		_Pnode = this->_Isnil(_Hinode) ? _Root()
; 2035 : 			: this->_Left(_Hinode);	// continue scan for upper bound
; 2036 : 		while (!this->_Isnil(_Pnode))
; 2037 : 			if (_DEBUG_LT_PRED(this->_Getcomp(), _Keyval, this->_Key(_Pnode)))
; 2038 : 				{	// _Pnode greater than _Keyval, remember it
; 2039 : 				_Hinode = _Pnode;
; 2040 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree
; 2041 : 				}
; 2042 : 			else
; 2043 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree
; 2044 : 
; 2045 : 		const_iterator _First = const_iterator(_Lonode, &this->_Get_data());
; 2046 : 		const_iterator _Last = const_iterator(_Hinode, &this->_Get_data());
; 2047 : 		return (_Paircc(_First, _Last));
; 2048 : 		}
; 2049 : 
; 2050 : 	template<class _Other>
; 2051 : 		_Pairii _Eqrange(const _Other& _Keyval)
; 2052 : 		{	// find leftmost node not less than _Keyval
; 2053 : 		_Paircc _Ans(static_cast<const _Myt *>(this)->_Eqrange(_Keyval));
; 2054 : 		iterator _First = iterator(_Ans.first._Ptr, &this->_Get_data());
; 2055 : 		iterator _Last = iterator(_Ans.second._Ptr, &this->_Get_data());
; 2056 : 		return (_Pairii(_First, _Last));
; 2057 : 		}
; 2058 : 
; 2059 : 	void _Erase(_Nodeptr _Rootnode)
; 2060 : 		{	// free entire subtree, recursively
; 2061 : 		for (_Nodeptr _Pnode = _Rootnode;
; 2062 : 			!this->_Isnil(_Pnode); _Rootnode = _Pnode)
; 2063 : 			{	// free subtrees, then node
; 2064 : 			_Erase(this->_Right(_Pnode));
; 2065 : 			_Pnode = this->_Left(_Pnode);
; 2066 : 			this->_Getal().destroy(
; 2067 : 				_STD addressof(this->_Myval(_Rootnode)));
; 2068 : 
; 2069 : 			this->_Getal().deallocate(_Rootnode, 1);
; 2070 : 			}
; 2071 : 		}
; 2072 : 
; 2073 : 	bool _Compare(const key_type& _Left, const key_type& _Right) const
; 2074 : 		{	// compare key_type to key_type, with debug checks
; 2075 : 		return (_DEBUG_LT_PRED(this->_Getcomp(), _Left, _Right));
; 2076 : 		}
; 2077 : 
; 2078 : 	template<class _Ty1,
; 2079 : 		class _Ty2>
; 2080 : 		bool _Compare(const _Ty1& _Left, const _Ty2& _Right) const
; 2081 : 		{	// compare _Ty1 to _Ty2, without debug checks
; 2082 : 		return (this->_Getcomp()(_Left, _Right));
; 2083 : 		}
; 2084 : 
; 2085 : 	template<class _Other>
; 2086 : 		_Nodeptr _Lbound(const _Other& _Keyval) const
; 2087 : 		{	// find leftmost node not less than _Keyval
; 2088 : 		_Nodeptr _Pnode = _Root();

  0000e	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00011	8b 7d 08	 mov	 edi, DWORD PTR _obj$[ebp]
  00014	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00018	75 1a		 jne	 SHORT $LN23@GetChannel
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0001a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001c	0f 1f 40 00	 npad	 4
$LL22@GetChannel:
  00020	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00023	7d 05		 jge	 SHORT $LN24@GetChannel

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00025	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 2094 : 			else

  00028	eb 04		 jmp	 SHORT $LN25@GetChannel
$LN24@GetChannel:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0002a	8b c6		 mov	 eax, esi

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0002c	8b 36		 mov	 esi, DWORD PTR [esi]
$LN25@GetChannel:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 ec		 je	 SHORT $LL22@GetChannel
$LN23@GetChannel:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00034	3b c2		 cmp	 eax, edx

; 1487 : 		return (_Where == end()

  00036	74 07		 je	 SHORT $LN8@GetChannel
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00038	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0003a	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  0003d	7d 02		 jge	 SHORT $LN152@GetChannel
$LN8@GetChannel:

; 43   : 		: _Ptr(_Pnode)

  0003f	8b c2		 mov	 eax, edx
$LN152@GetChannel:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00044	3b c2		 cmp	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 678  : 	if(!(iter!=m_ObserverInfoList.end()))

  00046	74 33		 je	 SHORT $LN238@GetChannel

; 679  : 	{
; 680  : 		return -1;
; 681  : 	}
; 682  : 
; 683  : 	_tagObserverInfo & info = iter->second;
; 684  : 
; 685  : 	if( info.nId < 0 || info.nId >= DUEL_CHANNEL_MAX)

  00048	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0004b	85 c0		 test	 eax, eax
  0004d	78 05		 js	 SHORT $LN4@GetChannel
  0004f	83 f8 04	 cmp	 eax, 4
  00052	7c 2a		 jl	 SHORT $LN1@GetChannel
$LN4@GetChannel:

; 686  :     {
; 687  : 		LogAddTD("%s\t%s\t%s\t%s\t%d","info.nId>=0 && info.nId<DUEL_CHANNEL_MAX","-1","NULL",__FILE__, __LINE__);

  00054	68 af 02 00 00	 push	 687			; 000002afH
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_02PGHGPEOM@?91?$AA@
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@LJHODCKE@info?4nId?$DO?$DN0?5?$CG?$CG?5info?4nId?$DMDUEL_CHA@
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00078	83 c4 18	 add	 esp, 24			; 00000018H
$LN238@GetChannel:

; 688  : 		return -1;

  0007b	83 c8 ff	 or	 eax, -1
$LN1@GetChannel:

; 689  :     }
; 690  : 	return info.nId;
; 691  : }

  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?GetChannelIdByObserver@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ENDP ; CNewPVP::GetChannelIdByObserver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?CheckLimitLevel@CNewPVP@@AAEHHH@Z
_TEXT	SEGMENT
_sLevel$ = -8						; size = 2
_sX$ = -4						; size = 1
_sY$ = -3						; size = 1
_btDir$ = -2						; size = 1
_btMapNum$ = -1						; size = 1
_nIndex$ = 8						; size = 4
_nGateNum$ = 12						; size = 4
?CheckLimitLevel@CNewPVP@@AAEHHH@Z PROC			; CNewPVP::CheckLimitLevel, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 608  : 	BYTE btMapNum = MAP_INDEX_PKFIELD;
; 609  : 	BYTE btDir;
; 610  : 	BYTE sX;
; 611  : 	BYTE sY;
; 612  : 	short sLevel;
; 613  : 
; 614  : 	int nMapNumber =  gGateC.GetGate(nGateNum, sX, sY, btMapNum, btDir, sLevel);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _sLevel$[ebp]
  00009	c6 45 ff 40	 mov	 BYTE PTR _btMapNum$[ebp], 64 ; 00000040H
  0000d	50		 push	 eax
  0000e	8d 45 fe	 lea	 eax, DWORD PTR _btDir$[ebp]
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  00016	50		 push	 eax
  00017	8d 45 ff	 lea	 eax, DWORD PTR _btMapNum$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 fd	 lea	 eax, DWORD PTR _sY$[ebp]
  0001e	50		 push	 eax
  0001f	8d 45 fc	 lea	 eax, DWORD PTR _sX$[ebp]
  00022	50		 push	 eax
  00023	ff 75 0c	 push	 DWORD PTR _nGateNum$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetGate@CGate@@QAEHHAAE000AAF@Z ; CGate::GetGate

; 615  : 	if( nMapNumber < 0)	return FALSE;

  0002b	85 c0		 test	 eax, eax
  0002d	79 08		 jns	 SHORT $LN2@CheckLimit
  0002f	33 c0		 xor	 eax, eax

; 618  : 	return TRUE;
; 619  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN2@CheckLimit:

; 616  : 
; 617  : 	if(gObj[nIndex].Level < sLevel)	return FALSE;

  00037	69 55 08 40 27
	00 00		 imul	 edx, DWORD PTR _nIndex$[ebp], 10048
  0003e	33 c0		 xor	 eax, eax
  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	66 8b 8c 0a 96
	00 00 00	 mov	 cx, WORD PTR [edx+ecx+150]
  0004e	66 3b 4d f8	 cmp	 cx, WORD PTR _sLevel$[ebp]
  00052	0f 9d c0	 setge	 al

; 618  : 	return TRUE;
; 619  : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?CheckLimitLevel@CNewPVP@@AAEHHH@Z ENDP			; CNewPVP::CheckLimitLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?MoveGate@CNewPVP@@AAEHHH@Z
_TEXT	SEGMENT
_sLevel$ = -8						; size = 2
_btDir$ = -4						; size = 1
_sX$ = -3						; size = 1
_sY$ = -2						; size = 1
_btMapNum$ = -1						; size = 1
_nIndex$ = 8						; size = 4
_nGateNum$ = 12						; size = 4
?MoveGate@CNewPVP@@AAEHHH@Z PROC			; CNewPVP::MoveGate, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 589  : 	BYTE btMapNum = MAP_INDEX_PKFIELD;
; 590  : 	BYTE btDir;
; 591  : 	BYTE sX;
; 592  : 	BYTE sY;
; 593  : 	short sLevel;
; 594  : 	int nMapNumber;
; 595  : 
; 596  : 	nMapNumber =  gGateC.GetGate(nGateNum, sX, sY, btMapNum, btDir, sLevel);

  00006	8d 45 f8	 lea	 eax, DWORD PTR _sLevel$[ebp]
  00009	c6 45 ff 40	 mov	 BYTE PTR _btMapNum$[ebp], 64 ; 00000040H
  0000d	50		 push	 eax
  0000e	8d 45 fc	 lea	 eax, DWORD PTR _btDir$[ebp]
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  00016	50		 push	 eax
  00017	8d 45 ff	 lea	 eax, DWORD PTR _btMapNum$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 fe	 lea	 eax, DWORD PTR _sY$[ebp]
  0001e	50		 push	 eax
  0001f	8d 45 fd	 lea	 eax, DWORD PTR _sX$[ebp]
  00022	50		 push	 eax
  00023	ff 75 0c	 push	 DWORD PTR _nGateNum$[ebp]
  00026	e8 00 00 00 00	 call	 ?GetGate@CGate@@QAEHHAAE000AAF@Z ; CGate::GetGate

; 597  : 	if( nMapNumber < 0)	return FALSE;

  0002b	85 c0		 test	 eax, eax
  0002d	79 08		 jns	 SHORT $LN2@MoveGate
  0002f	33 c0		 xor	 eax, eax

; 603  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN2@MoveGate:

; 598  : 
; 599  : 	gObjTeleport(nIndex, btMapNum, sX, sY);

  00037	0f b6 45 fe	 movzx	 eax, BYTE PTR _sY$[ebp]
  0003b	56		 push	 esi
  0003c	8b 75 08	 mov	 esi, DWORD PTR _nIndex$[ebp]
  0003f	50		 push	 eax
  00040	0f b6 45 fd	 movzx	 eax, BYTE PTR _sX$[ebp]
  00044	50		 push	 eax
  00045	0f b6 45 ff	 movzx	 eax, BYTE PTR _btMapNum$[ebp]
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 ?gObjTeleport@@YAXHHHH@Z ; gObjTeleport

; 600  : 	//temp disabled, bcz have some bug
; 601  : 	gObjViewportListProtocolCreate(&gObj[nIndex]);

  00050	69 c6 40 27 00
	00		 imul	 eax, esi, 10048
  00056	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  00062	83 c4 14	 add	 esp, 20			; 00000014H

; 602  : 	return TRUE;

  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	5e		 pop	 esi

; 603  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?MoveGate@CNewPVP@@AAEHHH@Z ENDP			; CNewPVP::MoveGate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z PROC		; CNewPVP::ReFill, COMDAT
; _this$ = ecx

; 574  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 575  : 	if( !gObjIsConnected(&obj) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","gObjIsConnected(&obj)","0","NULL", __FILE__, __LINE__); return; }

  00004	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  0000d	83 c4 04	 add	 esp, 4
  00010	85 c0		 test	 eax, eax
  00012	75 2c		 jne	 SHORT $LN2@ReFill
  00014	68 3f 02 00 00	 push	 575			; 0000023fH
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@IOFGAKKG@gObjIsConnected?$CI?$CGobj?$CJ?$AA@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00038	83 c4 18	 add	 esp, 24			; 00000018H
  0003b	5e		 pop	 esi

; 584  : }

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN2@ReFill:
  00040	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]

; 576  : 
; 577  : 	obj.BP = obj.MaxBP + obj.AddBP;

  00048	8b 86 0c 01 00
	00		 mov	 eax, DWORD PTR [esi+268]
  0004e	03 86 08 01 00
	00		 add	 eax, DWORD PTR [esi+264]

; 578  : 	obj.Mana = obj.MaxMana + obj.AddMana;

  00054	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00057	89 86 04 01 00
	00		 mov	 DWORD PTR [esi+260], eax

; 579  : 	GCManaSend(obj.m_Index, (int)obj.Mana, 0xFF, 0, (int)obj.BP);

  0005d	0f b7 c0	 movzx	 eax, ax
  00060	50		 push	 eax
  00061	6a 00		 push	 0
  00063	68 ff 00 00 00	 push	 255			; 000000ffH
  00068	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  00070	f3 0f 2c c0	 cvttss2si eax, xmm0
  00074	f3 0f 11 86 ec
	00 00 00	 movss	 DWORD PTR [esi+236], xmm0
  0007c	50		 push	 eax
  0007d	ff 36		 push	 DWORD PTR [esi]
  0007f	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  00084	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]

; 580  : 
; 581  : 	obj.Life = obj.MaxLife + obj.AddLife;
; 582  : 	obj.iShield = obj.iMaxShield + obj.iAddShield;

  0008c	8b 86 34 01 00
	00		 mov	 eax, DWORD PTR [esi+308]
  00092	03 86 30 01 00
	00		 add	 eax, DWORD PTR [esi+304]
  00098	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0009b	89 86 2c 01 00
	00		 mov	 DWORD PTR [esi+300], eax

; 583  : 	GCReFillSend(obj.m_Index, (int)obj.Life, 0xFF, 0, (int)obj.iShield);

  000a1	0f b7 c0	 movzx	 eax, ax
  000a4	50		 push	 eax
  000a5	6a 00		 push	 0
  000a7	68 ff 00 00 00	 push	 255			; 000000ffH
  000ac	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  000b4	f3 0f 2c c0	 cvttss2si eax, xmm0
  000b8	f3 0f 11 86 d8
	00 00 00	 movss	 DWORD PTR [esi+216], xmm0
  000c0	50		 push	 eax
  000c1	ff 36		 push	 DWORD PTR [esi]
  000c3	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  000c8	83 c4 28	 add	 esp, 40			; 00000028H
  000cb	5e		 pop	 esi

; 584  : }

  000cc	5d		 pop	 ebp
  000cd	c2 04 00	 ret	 4
?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z ENDP		; CNewPVP::ReFill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Leave@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_res$ = -24						; size = 17
__$ArrayPad$ = -4					; size = 4
_requester$ = 8						; size = 4
_responsor$ = 12					; size = 4
?Leave@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0@Z PROC		; CNewPVP::Leave, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _responsor$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _requester$[ebp]

; 489  : 	int nId = GetDuelChannelId(requester.m_Index);

  0001b	ff 37		 push	 DWORD PTR [edi]
  0001d	e8 00 00 00 00	 call	 ?GetDuelChannelId@CNewPVP@@AAEHH@Z ; CNewPVP::GetDuelChannelId

; 490  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00022	83 f8 03	 cmp	 eax, 3
  00025	0f 87 19 01 00
	00		 ja	 $LN3@Leave

; 491  : 	if( !IS_START(m_DuelChannel[nId].nStatus) && m_DuelChannel[nId].nStatus != DC_RESERVEDEND ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)||m_DuelChannel[nId].nStatus==DC_RESERVEDEND", "0","NULL",__FILE__, __LINE__); return; }	

  0002b	6b c0 2c	 imul	 eax, eax, 44
  0002e	8a 84 18 86 00
	00 00		 mov	 al, BYTE PTR [eax+ebx+134]
  00035	3c 02		 cmp	 al, 2
  00037	72 04		 jb	 SHORT $LN5@Leave
  00039	3c 04		 cmp	 al, 4
  0003b	76 22		 jbe	 SHORT $LN4@Leave
$LN5@Leave:
  0003d	3c 05		 cmp	 al, 5
  0003f	74 1e		 je	 SHORT $LN4@Leave
  00041	68 eb 01 00 00	 push	 491			; 000001ebH
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@CPAGFMCM@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  0005a	e9 fe 00 00 00	 jmp	 $LN15@Leave
$LN4@Leave:
  0005f	0f 57 c0	 xorps	 xmm0, xmm0

; 492  : 
; 493  : 	PMSG_ANS_DUEL_EXIT res = {0};

  00062	0f 11 45 e9	 movups	 XMMWORD PTR _res$[ebp+1], xmm0

; 494  : 	res.h.c = PMHC_BYTE;
; 495  :     res.h.headcode = 0xAA;
; 496  :     res.h.subcode = 0x03;
; 497  :     res.h.size = sizeof(PMSG_ANS_DUEL_EXIT);
; 498  :     res.nResult = 0x00;
; 499  : 
; 500  : 	if( gObjIsConnected(&requester) )

  00066	57		 push	 edi
  00067	c7 45 e8 c1 11
	aa 03		 mov	 DWORD PTR _res$[ebp], 61477313 ; 03aa11c1H
  0006e	c6 45 ec 00	 mov	 BYTE PTR _res$[ebp+4], 0
  00072	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00077	83 c4 04	 add	 esp, 4
  0007a	85 c0		 test	 eax, eax
  0007c	74 51		 je	 SHORT $LN7@Leave

; 501  :     {
; 502  : 		requester.m_iDuelUser = -1;

  0007e	c7 87 50 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+4688], -1

; 503  :         res.NumberH = HIBYTE(responsor.m_Index);

  00088	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]

; 504  :         res.NumberL = LOBYTE(responsor.m_Index);
; 505  :         memcpy(res.szName, responsor.Name, MAX_IDSTRING);

  0008c	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  00091	88 45 ed	 mov	 BYTE PTR _res$[ebp+5], al
  00094	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00097	88 45 ee	 mov	 BYTE PTR _res$[ebp+6], al
  0009a	66 8b 46 65	 mov	 ax, WORD PTR [esi+101]
  0009e	66 89 45 f7	 mov	 WORD PTR _res$[ebp+15], ax

; 506  : 
; 507  :         DataSend(requester.m_Index, (LPBYTE)&res, res.h.size);

  000a2	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  000a6	50		 push	 eax
  000a7	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  000aa	66 0f d6 45 ef	 movq	 QWORD PTR _res$[ebp+7], xmm0
  000af	50		 push	 eax
  000b0	ff 37		 push	 DWORD PTR [edi]
  000b2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000b7	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  000ba	80 bf 23 01 00
	00 40		 cmp	 BYTE PTR [edi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 509  : 		if( IsPKFieldMap(requester.MapNumber) )

  000c1	75 0c		 jne	 SHORT $LN7@Leave

; 510  : 		{
; 511  : 			gObjMoveGate(requester.m_Index, 17);

  000c3	6a 11		 push	 17			; 00000011H
  000c5	ff 37		 push	 DWORD PTR [edi]
  000c7	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  000cc	83 c4 08	 add	 esp, 8
$LN7@Leave:

; 512  : 		}
; 513  :     }
; 514  : 	
; 515  : 	if( gObjIsConnected(&responsor) )

  000cf	56		 push	 esi
  000d0	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000d5	83 c4 04	 add	 esp, 4
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 8b 00 00
	00		 je	 $LN9@Leave

; 516  : 	{
; 517  :         responsor.m_iDuelUser = -1;
; 518  :         res.NumberH = HIBYTE(responsor.m_Index);

  000e0	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]
  000e4	88 45 ed	 mov	 BYTE PTR _res$[ebp+5], al

; 519  :         res.NumberL = LOBYTE(responsor.m_Index);

  000e7	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  000ea	88 45 ee	 mov	 BYTE PTR _res$[ebp+6], al
  000ed	c7 86 50 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+4688], -1

; 520  :         memcpy(res.szName, requester.Name, MAX_IDSTRING);

  000f7	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  000fb	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  00100	66 89 45 f7	 mov	 WORD PTR _res$[ebp+15], ax

; 521  :         
; 522  : 		DataSend(responsor.m_Index, (LPBYTE)&res, res.h.size);

  00104	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  00108	50		 push	 eax
  00109	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  0010c	66 0f d6 45 ef	 movq	 QWORD PTR _res$[ebp+7], xmm0
  00111	50		 push	 eax
  00112	ff 36		 push	 DWORD PTR [esi]
  00114	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  0011c	80 be 23 01 00
	00 40		 cmp	 BYTE PTR [esi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 524  : 		if( IsPKFieldMap(responsor.MapNumber) )

  00123	75 46		 jne	 SHORT $LN9@Leave

; 525  : 		{
; 526  : 			gObjMoveGate(responsor.m_Index, 17);

  00125	6a 11		 push	 17			; 00000011H
  00127	ff 36		 push	 DWORD PTR [esi]
  00129	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  0012e	83 c4 08	 add	 esp, 8
  00131	5f		 pop	 edi
  00132	5e		 pop	 esi
  00133	5b		 pop	 ebx

; 527  : 		}
; 528  :     }
; 529  : }

  00134	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00137	33 cd		 xor	 ecx, ebp
  00139	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 08 00	 ret	 8
$LN3@Leave:

; 490  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00144	68 ea 01 00 00	 push	 490			; 000001eaH
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
$LN15@Leave:
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00168	83 c4 18	 add	 esp, 24			; 00000018H
$LN9@Leave:

; 527  : 		}
; 528  :     }
; 529  : }

  0016b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016e	5f		 pop	 edi
  0016f	5e		 pop	 esi
  00170	33 cd		 xor	 ecx, ebp
  00172	5b		 pop	 ebx
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 08 00	 ret	 8
?Leave@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0@Z ENDP		; CNewPVP::Leave
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?GetDuelStatusByResponsor@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?GetDuelStatusByResponsor@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z PROC ; CNewPVP::GetDuelStatusByResponsor, COMDAT
; _this$ = ecx

; 357  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 		if(CHECK_LIMIT(obj.m_iDuelUserRequested, OBJMAX))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00006	8b 91 4c 12 00
	00		 mov	 edx, DWORD PTR [ecx+4684]
  0000c	85 d2		 test	 edx, edx
  0000e	78 18		 js	 SHORT $LN2@GetDuelSta
  00010	33 c0		 xor	 eax, eax
  00012	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
  0001b	85 c0		 test	 eax, eax
  0001d	74 09		 je	 SHORT $LN2@GetDuelSta

; 359  : 		{
; 360  : 			return ENEWPVP::E_ALREADY_DUELREQUESTED_1;

  0001f	b8 15 00 00 00	 mov	 eax, 21			; 00000015H

; 374  : 	};

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN2@GetDuelSta:

; 361  : 		}
; 362  : 
; 363  : 		if(CHECK_LIMIT(obj.m_iDuelUserReserved, OBJMAX))

  00028	8b 91 48 12 00
	00		 mov	 edx, DWORD PTR [ecx+4680]
  0002e	85 d2		 test	 edx, edx
  00030	78 18		 js	 SHORT $LN3@GetDuelSta
  00032	33 c0		 xor	 eax, eax
  00034	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0003a	0f 9e c0	 setle	 al
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN3@GetDuelSta

; 364  : 		{
; 365  : 			return ENEWPVP::E_ALREADY_DUELRESERVED_1;

  00041	b8 16 00 00 00	 mov	 eax, 22			; 00000016H

; 374  : 	};

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN3@GetDuelSta:

; 366  : 		}
; 367  : 
; 368  : 		if(CHECK_LIMIT(obj.m_iDuelUser, OBJMAX))

  0004a	8b 89 50 12 00
	00		 mov	 ecx, DWORD PTR [ecx+4688]
  00050	85 c9		 test	 ecx, ecx
  00052	78 18		 js	 SHORT $LN4@GetDuelSta
  00054	33 c0		 xor	 eax, eax
  00056	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0005c	0f 9e c0	 setle	 al
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN4@GetDuelSta

; 369  : 		{
; 370  : 			return ENEWPVP::E_ALREADY_DUELLING_1;

  00063	b8 17 00 00 00	 mov	 eax, 23			; 00000017H

; 374  : 	};

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN4@GetDuelSta:

; 371  : 		}
; 372  : 
; 373  : 		return 0;

  0006c	33 c0		 xor	 eax, eax

; 374  : 	};

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?GetDuelStatusByResponsor@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ENDP ; CNewPVP::GetDuelStatusByResponsor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?GetDuelStatus@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?GetDuelStatus@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::GetDuelStatus, COMDAT
; _this$ = ecx

; 337  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 338  : 		if(CHECK_LIMIT(obj.m_iDuelUserRequested, OBJMAX))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  00006	8b 91 4c 12 00
	00		 mov	 edx, DWORD PTR [ecx+4684]
  0000c	85 d2		 test	 edx, edx
  0000e	78 18		 js	 SHORT $LN2@GetDuelSta
  00010	33 c0		 xor	 eax, eax
  00012	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
  0001b	85 c0		 test	 eax, eax
  0001d	74 09		 je	 SHORT $LN2@GetDuelSta

; 339  : 		{
; 340  : 			return ENEWPVP::E_ALREADY_DUELREQUESTED;

  0001f	b8 12 00 00 00	 mov	 eax, 18			; 00000012H

; 354  : 	};

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN2@GetDuelSta:

; 341  : 		}
; 342  : 
; 343  : 		if(CHECK_LIMIT(obj.m_iDuelUserReserved, OBJMAX))

  00028	8b 91 48 12 00
	00		 mov	 edx, DWORD PTR [ecx+4680]
  0002e	85 d2		 test	 edx, edx
  00030	78 18		 js	 SHORT $LN3@GetDuelSta
  00032	33 c0		 xor	 eax, eax
  00034	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0003a	0f 9e c0	 setle	 al
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN3@GetDuelSta

; 344  : 		{
; 345  : 			return ENEWPVP::E_ALREADY_DUELRESERVED;

  00041	b8 13 00 00 00	 mov	 eax, 19			; 00000013H

; 354  : 	};

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN3@GetDuelSta:

; 346  : 		}
; 347  : 
; 348  : 		if(CHECK_LIMIT(obj.m_iDuelUser, OBJMAX))

  0004a	8b 89 50 12 00
	00		 mov	 ecx, DWORD PTR [ecx+4688]
  00050	85 c9		 test	 ecx, ecx
  00052	78 18		 js	 SHORT $LN4@GetDuelSta
  00054	33 c0		 xor	 eax, eax
  00056	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0005c	0f 9e c0	 setle	 al
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN4@GetDuelSta

; 349  : 		{
; 350  : 			return ENEWPVP::E_ALREADY_DUELLING;

  00063	b8 14 00 00 00	 mov	 eax, 20			; 00000014H

; 354  : 	};

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN4@GetDuelSta:

; 351  : 		}
; 352  : 
; 353  : 		return 0;

  0006c	33 c0		 xor	 eax, eax

; 354  : 	};

  0006e	5d		 pop	 ebp
  0006f	c2 04 00	 ret	 4
?GetDuelStatus@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::GetDuelStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
_requester$ = 8						; size = 4
_responsor$ = 12					; size = 4
_nStatus$ = 16						; size = 4
?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z PROC	; CNewPVP::SetDuelStatus, COMDAT
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 287  : 	switch(nStatus)

  00003	8b 45 10	 mov	 eax, DWORD PTR _nStatus$[ebp]
  00006	83 e8 00	 sub	 eax, 0
  00009	0f 84 93 00 00
	00		 je	 $LN4@SetDuelSta
  0000f	83 e8 01	 sub	 eax, 1
  00012	74 6a		 je	 SHORT $LN5@SetDuelSta
  00014	83 e8 01	 sub	 eax, 1
  00017	0f 85 c7 00 00
	00		 jne	 $LN2@SetDuelSta

; 303  : 		break;
; 304  : 	case 2:
; 305  : 		requester.m_iDuelUserReserved = -1;
; 306  :         requester.m_btDuelScore = 0;
; 307  :         requester.m_iDuelUser = responsor.m_Index;

  0001d	53		 push	 ebx
  0001e	8b 5d 0c	 mov	 ebx, DWORD PTR _responsor$[ebp]
  00021	57		 push	 edi
  00022	8b 7d 08	 mov	 edi, DWORD PTR _requester$[ebp]
  00025	c7 87 48 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [edi+4680], -1
  0002f	88 87 54 12 00
	00		 mov	 BYTE PTR [edi+4692], al
  00035	8b 03		 mov	 eax, DWORD PTR [ebx]
  00037	89 87 50 12 00
	00		 mov	 DWORD PTR [edi+4688], eax

; 308  :         requester.m_iDuelTickCount = GetTickCount();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00043	89 87 58 12 00
	00		 mov	 DWORD PTR [edi+4696], eax

; 309  :         
; 310  : 		responsor.m_iDuelUserRequested = -1;

  00049	c7 83 4c 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+4684], -1

; 311  :         responsor.m_iDuelUserReserved = -1;

  00053	c7 83 48 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [ebx+4680], -1

; 312  :         responsor.m_btDuelScore = 0;

  0005d	c6 83 54 12 00
	00 00		 mov	 BYTE PTR [ebx+4692], 0

; 313  :         responsor.m_iDuelUser = requester.m_Index;

  00064	8b 07		 mov	 eax, DWORD PTR [edi]
  00066	89 83 50 12 00
	00		 mov	 DWORD PTR [ebx+4688], eax

; 314  :         responsor.m_iDuelTickCount = GetTickCount();

  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00072	5f		 pop	 edi
  00073	89 83 58 12 00
	00		 mov	 DWORD PTR [ebx+4696], eax
  00079	5b		 pop	 ebx

; 315  : 		break;
; 316  : 	}
; 317  : }

  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
$LN5@SetDuelSta:

; 297  : 		break;
; 298  : 	case 1:
; 299  : 		requester.m_iDuelUserReserved = responsor.m_Index;

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _responsor$[ebp]
  00081	8b 4d 08	 mov	 ecx, DWORD PTR _requester$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	89 81 48 12 00
	00		 mov	 DWORD PTR [ecx+4680], eax

; 300  : 		requester.m_iDuelUser = -1;
; 301  : 		
; 302  : 		responsor.m_iDuelUserRequested = requester.m_Index;

  0008c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0008e	c7 81 50 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+4688], -1
  00098	89 82 4c 12 00
	00		 mov	 DWORD PTR [edx+4684], eax

; 315  : 		break;
; 316  : 	}
; 317  : }

  0009e	5d		 pop	 ebp
  0009f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@SetDuelSta:

; 288  : 	{
; 289  : 	case DC_IDLE:
; 290  : 		requester.m_iDuelUser = -1;

  000a2	8b 45 08	 mov	 eax, DWORD PTR _requester$[ebp]
  000a5	c7 80 50 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4688], -1

; 291  : 		requester.m_iDuelUserRequested = -1;

  000af	c7 80 4c 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4684], -1

; 292  : 		requester.m_iDuelUserReserved = -1;

  000b9	c7 80 48 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4680], -1

; 293  : 		
; 294  : 		responsor.m_iDuelUser = -1;

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _responsor$[ebp]
  000c6	c7 80 50 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4688], -1

; 295  : 		responsor.m_iDuelUserRequested = -1;

  000d0	c7 80 4c 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4684], -1

; 296  : 		responsor.m_iDuelUserReserved = -1;

  000da	c7 80 48 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+4680], -1
$LN2@SetDuelSta:

; 315  : 		break;
; 316  : 	}
; 317  : }

  000e4	5d		 pop	 ebp
  000e5	c2 0c 00	 ret	 12			; 0000000cH
?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z ENDP	; CNewPVP::SetDuelStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_nStatus$ = 8						; size = 4
_nId$ = 12						; size = 4
_requester$ = 16					; size = 4
_responsor$ = 20					; size = 4
?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z PROC	; CNewPVP::SetStatus, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : 	LPDUEL_CHANNEL lpDuelChannel = &m_DuelChannel[nId];
; 230  : 
; 231  : 	switch ( nStatus )

  00003	8b 45 08	 mov	 eax, DWORD PTR _nStatus$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR _nId$[ebp]
  0000c	57		 push	 edi
  0000d	6b f9 2c	 imul	 edi, ecx, 44
  00010	03 fb		 add	 edi, ebx
  00012	83 f8 05	 cmp	 eax, 5
  00015	0f 87 47 01 00
	00		 ja	 $LN2@SetStatus
  0001b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@SetStatus[eax*4]
$LN4@SetStatus:

; 232  : 	{		
; 233  : 	case DC_IDLE:
; 234  : 		lpDuelChannel->nStatus = nStatus;
; 235  : 		lpDuelChannel->dwTime = 0;
; 236  : 
; 237  : 		lpDuelChannel->nIndex1 = 0;
; 238  : 		lpDuelChannel->nIndex2 = 0;
; 239  : 
; 240  : 		memset(lpDuelChannel->szName1, 0, MAX_IDSTRING);
; 241  : 		memset(lpDuelChannel->szName2, 0, MAX_IDSTRING);
; 242  : 
; 243  : 		m_DuelChannelList.channel[nId].bStart = 0;

  00022	6b c1 16	 imul	 eax, ecx, 22
  00025	0f 57 c0	 xorps	 xmm0, xmm0
  00028	c6 87 86 00 00
	00 00		 mov	 BYTE PTR [edi+134], 0

; 244  : 		m_DuelChannelList.channel[nId].bWatch = 0;
; 245  : 
; 246  : 		memset(m_DuelChannelList.channel[nId].szName1, 0, MAX_IDSTRING);
; 247  : 		memset(m_DuelChannelList.channel[nId].szName2, 0, MAX_IDSTRING);
; 248  : 
; 249  : 		SetDuelStatus(requester, responsor, nStatus);

  0002f	8b cb		 mov	 ecx, ebx
  00031	c7 87 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+136], 0
  0003b	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  00042	c7 47 6c 00 00
	00 00		 mov	 DWORD PTR [edi+108], 0
  00049	66 0f d6 47 70	 movq	 QWORD PTR [edi+112], xmm0
  0004e	66 c7 47 78 00
	00		 mov	 WORD PTR [edi+120], 0
  00054	66 0f d6 47 7b	 movq	 QWORD PTR [edi+123], xmm0
  00059	6a 00		 push	 0
  0005b	ff 75 14	 push	 DWORD PTR _responsor$[ebp]
  0005e	66 c7 87 83 00
	00 00 00 00	 mov	 WORD PTR [edi+131], 0
  00067	ff 75 10	 push	 DWORD PTR _requester$[ebp]
  0006a	c7 44 18 1e 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+30], 0
  00072	66 0f d6 44 18
	0c		 movq	 QWORD PTR [eax+ebx+12], xmm0
  00078	66 c7 44 18 14
	00 00		 mov	 WORD PTR [eax+ebx+20], 0
  0007f	66 0f d6 44 18
	16		 movq	 QWORD PTR [eax+ebx+22], xmm0
  00085	e8 00 00 00 00	 call	 ?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::SetDuelStatus
  0008a	5f		 pop	 edi
  0008b	5b		 pop	 ebx

; 280  : 	  break;
; 281  : 	}
; 282  : }

  0008c	5d		 pop	 ebp
  0008d	c2 10 00	 ret	 16			; 00000010H
$LN5@SetStatus:
  00090	56		 push	 esi

; 250  : 		break;
; 251  : 	case 2:
; 252  : 		lpDuelChannel->nStatus = nStatus;

  00091	c6 87 86 00 00
	00 02		 mov	 BYTE PTR [edi+134], 2

; 253  : 		lpDuelChannel->dwTime = GetTickCount();

  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 254  : 
; 255  : 		lpDuelChannel->nIndex1 = requester.m_Index;

  0009e	8b 75 10	 mov	 esi, DWORD PTR _requester$[ebp]

; 256  : 		lpDuelChannel->nIndex2 = responsor.m_Index;

  000a1	8b 55 14	 mov	 edx, DWORD PTR _responsor$[ebp]

; 257  : 
; 258  : 		memcpy(lpDuelChannel->szName1, requester.Name, MAX_IDSTRING);
; 259  : 		memcpy(lpDuelChannel->szName2, responsor.Name, MAX_IDSTRING);
; 260  : 
; 261  : 		m_DuelChannelList.channel[nId].bStart = 1;

  000a4	6b 4d 0c 16	 imul	 ecx, DWORD PTR _nId$[ebp], 22
  000a8	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
  000ae	03 cb		 add	 ecx, ebx
  000b0	8b 06		 mov	 eax, DWORD PTR [esi]
  000b2	89 47 68	 mov	 DWORD PTR [edi+104], eax
  000b5	8b 02		 mov	 eax, DWORD PTR [edx]
  000b7	89 47 6c	 mov	 DWORD PTR [edi+108], eax
  000ba	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  000bf	66 0f d6 47 70	 movq	 QWORD PTR [edi+112], xmm0
  000c4	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  000c8	66 89 47 78	 mov	 WORD PTR [edi+120], ax
  000cc	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  000d1	66 0f d6 47 7b	 movq	 QWORD PTR [edi+123], xmm0
  000d6	0f b7 42 65	 movzx	 eax, WORD PTR [edx+101]
  000da	66 89 87 83 00
	00 00		 mov	 WORD PTR [edi+131], ax
  000e1	66 c7 41 20 01
	01		 mov	 WORD PTR [ecx+32], 257	; 00000101H

; 262  : 		m_DuelChannelList.channel[nId].bWatch = 1;
; 263  : 
; 264  : 		memcpy(m_DuelChannelList.channel[nId].szName1, requester.Name, MAX_IDSTRING);

  000e7	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  000ec	66 0f d6 41 0c	 movq	 QWORD PTR [ecx+12], xmm0
  000f1	0f b7 46 65	 movzx	 eax, WORD PTR [esi+101]
  000f5	66 89 41 14	 mov	 WORD PTR [ecx+20], ax

; 265  : 		memcpy(m_DuelChannelList.channel[nId].szName2, responsor.Name, MAX_IDSTRING);

  000f9	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  000fe	66 0f d6 41 16	 movq	 QWORD PTR [ecx+22], xmm0
  00103	0f b7 42 65	 movzx	 eax, WORD PTR [edx+101]

; 266  : 
; 267  : 		SetDuelStatus(requester, responsor, nStatus);

  00107	6a 02		 push	 2
  00109	52		 push	 edx
  0010a	66 89 41 1e	 mov	 WORD PTR [ecx+30], ax
  0010e	8b cb		 mov	 ecx, ebx
  00110	56		 push	 esi
  00111	e8 00 00 00 00	 call	 ?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::SetDuelStatus
  00116	5e		 pop	 esi
  00117	5f		 pop	 edi
  00118	5b		 pop	 ebx

; 280  : 	  break;
; 281  : 	}
; 282  : }

  00119	5d		 pop	 ebp
  0011a	c2 10 00	 ret	 16			; 00000010H
$LN6@SetStatus:

; 268  : 	  break;
; 269  : 	case 3:
; 270  : 	  lpDuelChannel->nStatus = nStatus;

  0011d	c6 87 86 00 00
	00 03		 mov	 BYTE PTR [edi+134], 3

; 279  : 	  lpDuelChannel->dwTime = GetTickCount();

  00124	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0012a	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
  00130	5f		 pop	 edi
  00131	5b		 pop	 ebx

; 280  : 	  break;
; 281  : 	}
; 282  : }

  00132	5d		 pop	 ebp
  00133	c2 10 00	 ret	 16			; 00000010H
$LN7@SetStatus:

; 271  : 	  lpDuelChannel->dwTime = GetTickCount();
; 272  : 	  break;
; 273  : 	case 4:
; 274  : 	  lpDuelChannel->nStatus = nStatus;

  00136	c6 87 86 00 00
	00 04		 mov	 BYTE PTR [edi+134], 4

; 279  : 	  lpDuelChannel->dwTime = GetTickCount();

  0013d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00143	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
  00149	5f		 pop	 edi
  0014a	5b		 pop	 ebx

; 280  : 	  break;
; 281  : 	}
; 282  : }

  0014b	5d		 pop	 ebp
  0014c	c2 10 00	 ret	 16			; 00000010H
$LN8@SetStatus:

; 275  : 	  lpDuelChannel->dwTime = GetTickCount();
; 276  : 	  break;
; 277  : 	case DC_RESERVEDEND:
; 278  : 	  lpDuelChannel->nStatus = nStatus;

  0014f	c6 87 86 00 00
	00 05		 mov	 BYTE PTR [edi+134], 5

; 279  : 	  lpDuelChannel->dwTime = GetTickCount();

  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0015c	89 87 88 00 00
	00		 mov	 DWORD PTR [edi+136], eax
$LN2@SetStatus:
  00162	5f		 pop	 edi
  00163	5b		 pop	 ebx

; 280  : 	  break;
; 281  : 	}
; 282  : }

  00164	5d		 pop	 ebp
  00165	c2 10 00	 ret	 16			; 00000010H
$LN12@SetStatus:
  00168	00 00 00 00	 DD	 $LN4@SetStatus
  0016c	00 00 00 00	 DD	 $LN2@SetStatus
  00170	00 00 00 00	 DD	 $LN5@SetStatus
  00174	00 00 00 00	 DD	 $LN6@SetStatus
  00178	00 00 00 00	 DD	 $LN7@SetStatus
  0017c	00 00 00 00	 DD	 $LN8@SetStatus
?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z ENDP	; CNewPVP::SetStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@XZ
_TEXT	SEGMENT
?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@XZ PROC ; CNewPVP::GetDuelChannel, COMDAT
; _this$ = ecx

; 200  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  00000	33 c0		 xor	 eax, eax
  00002	8d 91 86 00 00
	00		 lea	 edx, DWORD PTR [ecx+134]
$LL4@GetDuelCha:

; 201  : 	{
; 202  : 		if( m_DuelChannel[i].nStatus == DC_IDLE )

  00008	80 3a 00	 cmp	 BYTE PTR [edx], 0
  0000b	74 0c		 je	 SHORT $LN8@GetDuelCha

; 200  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  0000d	40		 inc	 eax
  0000e	83 c2 2c	 add	 edx, 44			; 0000002cH
  00011	83 f8 04	 cmp	 eax, 4
  00014	7c f2		 jl	 SHORT $LL4@GetDuelCha

; 205  : 		}
; 206  : 	}
; 207  : 
; 208  : 	return NULL;

  00016	33 c0		 xor	 eax, eax

; 209  : }

  00018	c3		 ret	 0
$LN8@GetDuelCha:

; 203  : 		{
; 204  : 			return &m_DuelChannel[i];

  00019	6b c0 2c	 imul	 eax, eax, 44
  0001c	83 c0 64	 add	 eax, 100		; 00000064H
  0001f	03 c1		 add	 eax, ecx

; 209  : }

  00021	c3		 ret	 0
?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@XZ ENDP ; CNewPVP::GetDuelChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@PAD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpszName$ = 8						; size = 4
?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@PAD@Z PROC ; CNewPVP::GetDuelChannel, COMDAT
; _this$ = ecx

; 213  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 214  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpszName$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	33 ff		 xor	 edi, edi
  00011	8d 70 7b	 lea	 esi, DWORD PTR [eax+123]
$LL4@GetDuelCha:

; 215  : 	{
; 216  : 		if( strcmp(m_DuelChannel[i].szName1, lpszName) == 0 || 

  00014	8b d3		 mov	 edx, ebx
  00016	8d 46 f5	 lea	 eax, DWORD PTR [esi-11]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL13@GetDuelCha:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00024	75 1a		 jne	 SHORT $LN14@GetDuelCha
  00026	84 c9		 test	 cl, cl
  00028	74 12		 je	 SHORT $LN15@GetDuelCha
  0002a	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  0002d	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  00030	75 0e		 jne	 SHORT $LN14@GetDuelCha
  00032	83 c0 02	 add	 eax, 2
  00035	83 c2 02	 add	 edx, 2
  00038	84 c9		 test	 cl, cl
  0003a	75 e4		 jne	 SHORT $LL13@GetDuelCha
$LN15@GetDuelCha:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN16@GetDuelCha
$LN14@GetDuelCha:
  00040	1b c0		 sbb	 eax, eax
  00042	83 c8 01	 or	 eax, 1
$LN16@GetDuelCha:
  00045	85 c0		 test	 eax, eax
  00047	74 44		 je	 SHORT $LN9@GetDuelCha
  00049	8b c3		 mov	 eax, ebx
  0004b	8b ce		 mov	 ecx, esi
  0004d	0f 1f 00	 npad	 3
$LL17@GetDuelCha:
  00050	8a 11		 mov	 dl, BYTE PTR [ecx]
  00052	3a 10		 cmp	 dl, BYTE PTR [eax]
  00054	75 1a		 jne	 SHORT $LN18@GetDuelCha
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN19@GetDuelCha
  0005a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0005d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00060	75 0e		 jne	 SHORT $LN18@GetDuelCha
  00062	83 c1 02	 add	 ecx, 2
  00065	83 c0 02	 add	 eax, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL17@GetDuelCha
$LN19@GetDuelCha:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN20@GetDuelCha
$LN18@GetDuelCha:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN20@GetDuelCha:
  00075	85 c0		 test	 eax, eax
  00077	74 14		 je	 SHORT $LN9@GetDuelCha

; 214  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  00079	47		 inc	 edi
  0007a	83 c6 2c	 add	 esi, 44			; 0000002cH
  0007d	83 ff 04	 cmp	 edi, 4
  00080	7c 92		 jl	 SHORT $LL4@GetDuelCha

; 220  : 		}
; 221  : 	}
; 222  : 
; 223  : 	return 0;

  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	33 c0		 xor	 eax, eax
  00086	5b		 pop	 ebx

; 224  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN9@GetDuelCha:

; 217  : 			strcmp(m_DuelChannel[i].szName2, lpszName) == 0)
; 218  : 		{
; 219  : 			return &m_DuelChannel[i];

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00090	6b c7 2c	 imul	 eax, edi, 44
  00093	83 c1 64	 add	 ecx, 100		; 00000064H
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	03 c1		 add	 eax, ecx

; 224  : }

  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 04 00	 ret	 4
?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@PAD@Z ENDP ; CNewPVP::GetDuelChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetDuelChannelId@CNewPVP@@AAEHXZ
_TEXT	SEGMENT
?GetDuelChannelId@CNewPVP@@AAEHXZ PROC			; CNewPVP::GetDuelChannelId, COMDAT
; _this$ = ecx

; 156  : 	for(int i = 0;i < DUEL_CHANNEL_MAX;i++)

  00000	33 c0		 xor	 eax, eax
  00002	81 c1 86 00 00
	00		 add	 ecx, 134		; 00000086H
$LL4@GetDuelCha:

; 157  : 	{
; 158  : 		if( m_DuelChannel[i].nStatus == DC_IDLE)

  00008	80 39 00	 cmp	 BYTE PTR [ecx], 0
  0000b	74 0c		 je	 SHORT $LN1@GetDuelCha

; 156  : 	for(int i = 0;i < DUEL_CHANNEL_MAX;i++)

  0000d	40		 inc	 eax
  0000e	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00011	83 f8 04	 cmp	 eax, 4
  00014	7c f2		 jl	 SHORT $LL4@GetDuelCha

; 159  : 		{
; 160  : 			return i;
; 161  : 		}
; 162  : 	}
; 163  : 
; 164  : 	return -1;

  00016	83 c8 ff	 or	 eax, -1
$LN1@GetDuelCha:

; 165  : }

  00019	c3		 ret	 0
?GetDuelChannelId@CNewPVP@@AAEHXZ ENDP			; CNewPVP::GetDuelChannelId
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetDuelChannelId@CNewPVP@@AAEHH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
?GetDuelChannelId@CNewPVP@@AAEHH@Z PROC			; CNewPVP::GetDuelChannelId, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  00003	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]
  00006	33 d2		 xor	 edx, edx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _nIndex$[ebp]
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@GetDuelCha:

; 171  : 	{
; 172  : 		if( m_DuelChannel[i].nIndex1 == nIndex || 

  00010	39 48 fc	 cmp	 DWORD PTR [eax-4], ecx
  00013	74 14		 je	 SHORT $LN9@GetDuelCha
  00015	39 08		 cmp	 DWORD PTR [eax], ecx
  00017	74 10		 je	 SHORT $LN9@GetDuelCha

; 170  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  00019	42		 inc	 edx
  0001a	83 c0 2c	 add	 eax, 44			; 0000002cH
  0001d	83 fa 04	 cmp	 edx, 4
  00020	7c ee		 jl	 SHORT $LL4@GetDuelCha

; 176  : 		}
; 177  : 	}
; 178  : 
; 179  : 	return -1;

  00022	83 c8 ff	 or	 eax, -1

; 180  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN9@GetDuelCha:

; 173  : 			m_DuelChannel[i].nIndex2 == nIndex )
; 174  : 		{
; 175  : 			return i;

  00029	8b c2		 mov	 eax, edx

; 180  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?GetDuelChannelId@CNewPVP@@AAEHH@Z ENDP			; CNewPVP::GetDuelChannelId
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetDuelChannelId@CNewPVP@@AAEHPAD@Z
_TEXT	SEGMENT
_lpszName$ = 8						; size = 4
?GetDuelChannelId@CNewPVP@@AAEHPAD@Z PROC		; CNewPVP::GetDuelChannelId, COMDAT
; _this$ = ecx

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 185  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lpszName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	8d 71 7b	 lea	 esi, DWORD PTR [ecx+123]
  0000e	66 90		 npad	 2
$LL4@GetDuelCha:

; 186  : 	{
; 187  : 		if( strcmp(m_DuelChannel[i].szName1, lpszName) == 0|| 

  00010	8b cb		 mov	 ecx, ebx
  00012	8d 46 f5	 lea	 eax, DWORD PTR [esi-11]
$LL13@GetDuelCha:
  00015	8a 10		 mov	 dl, BYTE PTR [eax]
  00017	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00019	75 1a		 jne	 SHORT $LN14@GetDuelCha
  0001b	84 d2		 test	 dl, dl
  0001d	74 12		 je	 SHORT $LN15@GetDuelCha
  0001f	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00022	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00025	75 0e		 jne	 SHORT $LN14@GetDuelCha
  00027	83 c0 02	 add	 eax, 2
  0002a	83 c1 02	 add	 ecx, 2
  0002d	84 d2		 test	 dl, dl
  0002f	75 e4		 jne	 SHORT $LL13@GetDuelCha
$LN15@GetDuelCha:
  00031	33 c0		 xor	 eax, eax
  00033	eb 05		 jmp	 SHORT $LN16@GetDuelCha
$LN14@GetDuelCha:
  00035	1b c0		 sbb	 eax, eax
  00037	83 c8 01	 or	 eax, 1
$LN16@GetDuelCha:
  0003a	85 c0		 test	 eax, eax
  0003c	74 40		 je	 SHORT $LN9@GetDuelCha
  0003e	8b c3		 mov	 eax, ebx
  00040	8b ce		 mov	 ecx, esi
$LL17@GetDuelCha:
  00042	8a 11		 mov	 dl, BYTE PTR [ecx]
  00044	3a 10		 cmp	 dl, BYTE PTR [eax]
  00046	75 1a		 jne	 SHORT $LN18@GetDuelCha
  00048	84 d2		 test	 dl, dl
  0004a	74 12		 je	 SHORT $LN19@GetDuelCha
  0004c	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0004f	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00052	75 0e		 jne	 SHORT $LN18@GetDuelCha
  00054	83 c1 02	 add	 ecx, 2
  00057	83 c0 02	 add	 eax, 2
  0005a	84 d2		 test	 dl, dl
  0005c	75 e4		 jne	 SHORT $LL17@GetDuelCha
$LN19@GetDuelCha:
  0005e	33 c0		 xor	 eax, eax
  00060	eb 05		 jmp	 SHORT $LN20@GetDuelCha
$LN18@GetDuelCha:
  00062	1b c0		 sbb	 eax, eax
  00064	83 c8 01	 or	 eax, 1
$LN20@GetDuelCha:
  00067	85 c0		 test	 eax, eax
  00069	74 13		 je	 SHORT $LN9@GetDuelCha

; 185  : 	for( int i = 0; i < DUEL_CHANNEL_MAX; i++ )

  0006b	47		 inc	 edi
  0006c	83 c6 2c	 add	 esi, 44			; 0000002cH
  0006f	83 ff 04	 cmp	 edi, 4
  00072	7c 9c		 jl	 SHORT $LL4@GetDuelCha

; 191  : 		}
; 192  : 	}
; 193  : 	
; 194  : 	return -1;

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx

; 195  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN9@GetDuelCha:

; 188  : 			strcmp(m_DuelChannel[i].szName2, lpszName) == 0)
; 189  : 		{
; 190  : 			return i;

  0007e	8b c7		 mov	 eax, edi
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx

; 195  : }

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?GetDuelChannelId@CNewPVP@@AAEHPAD@Z ENDP		; CNewPVP::GetDuelChannelId
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?DropItem@CNewPVP@@QAEHPAUOBJECTSTRUCT@@EEEH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btMapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
_nMaxHitUser$ = 24					; size = 4
?DropItem@CNewPVP@@QAEHPAUOBJECTSTRUCT@@EEEH@Z PROC	; CNewPVP::DropItem, COMDAT
; _this$ = ecx

; 1181 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	80 be 23 01 00
	00 3f		 cmp	 BYTE PTR [esi+291], 63	; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 1182 : 	if( !IsVulcanusMap(lpObj->MapNumber) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IsVulcanusMap(lpObj->MapNumber)","FALSE","NULL",__FILE__,  __LINE__); return FALSE; }

  0000e	74 2e		 je	 SHORT $LN2@DropItem
  00010	68 9e 04 00 00	 push	 1182			; 0000049eH
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BKIKBOHB@IsVulcanusMap?$CIlpObj?9?$DOMapNumber?$CJ?$AA@
$LN9@DropItem:
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00034	83 c4 18	 add	 esp, 24			; 00000018H
$LN10@DropItem:
  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 1189 : }

  0003a	5d		 pop	 ebp
  0003b	c2 14 00	 ret	 20			; 00000014H
$LN2@DropItem:

; 1183 : 	if(m_bNewPVP != TRUE){ LogAddTD("%s\t%s\t%s\t%s\t%d","m_bNewPVP==TRUE","FALSE","NULL", __FILE__,  __LINE__); return FALSE; }

  0003e	83 79 04 01	 cmp	 DWORD PTR [ecx+4], 1
  00042	74 1b		 je	 SHORT $LN3@DropItem
  00044	68 9f 04 00 00	 push	 1183			; 0000049fH
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_05MAJJAKPI@FALSE?$AA@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GDKKLCIG@m_bNewPVP?$DN?$DNTRUE?$AA@
  0005d	eb ca		 jmp	 SHORT $LN9@DropItem
$LN3@DropItem:

; 1184 : 	if( !gObjCheckUsedBuffEffect(lpObj, 103) )	return FALSE;

  0005f	6a 67		 push	 103			; 00000067H
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00067	83 c4 08	 add	 esp, 8
  0006a	84 c0		 test	 al, al
  0006c	74 c9		 je	 SHORT $LN10@DropItem

; 1185 : 	if( !gObjGetTotalValueOfEffect(lpObj, 60) )	return FALSE;

  0006e	6a 3c		 push	 60			; 0000003cH
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  00076	83 c4 08	 add	 esp, 8
  00079	85 c0		 test	 eax, eax
  0007b	74 ba		 je	 SHORT $LN10@DropItem

; 1186 : 
; 1187 : 	g_EventItemBagManager.OpenSpecial(EventBagSpecial::DuelArena, lpObj->m_Index, btMapNumber, cX, cY);

  0007d	ff 75 14	 push	 DWORD PTR _cY$[ebp]
  00080	0f b6 45 0c	 movzx	 eax, BYTE PTR _btMapNumber$[ebp]
  00084	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_EventItemBagManager@@3VEventItemBagManager@@A ; g_EventItemBagManager
  00089	ff 75 10	 push	 DWORD PTR _cX$[ebp]
  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	6a 1e		 push	 30			; 0000001eH
  00091	e8 00 00 00 00	 call	 ?OpenSpecial@EventItemBagManager@@QAEEEHHEE@Z ; EventItemBagManager::OpenSpecial

; 1188 : 	return TRUE;

  00096	b8 01 00 00 00	 mov	 eax, 1
  0009b	5e		 pop	 esi

; 1189 : }

  0009c	5d		 pop	 ebp
  0009d	c2 14 00	 ret	 20			; 00000014H
?DropItem@CNewPVP@@QAEHPAUOBJECTSTRUCT@@EEEH@Z ENDP	; CNewPVP::DropItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsPKFieldMap@CNewPVP@@QAEHH@Z
_TEXT	SEGMENT
_nMapNumber$ = 8					; size = 4
?IsPKFieldMap@CNewPVP@@QAEHH@Z PROC			; CNewPVP::IsPKFieldMap, COMDAT
; _this$ = ecx

; 312  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  00003	33 c0		 xor	 eax, eax
  00005	83 7d 08 40	 cmp	 DWORD PTR _nMapNumber$[ebp], 64 ; 00000040H
  00009	0f 94 c0	 sete	 al

; 314  : 	}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?IsPKFieldMap@CNewPVP@@QAEHH@Z ENDP			; CNewPVP::IsPKFieldMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsVulcanusMap@CNewPVP@@QAEHH@Z
_TEXT	SEGMENT
_nMapNumber$ = 8					; size = 4
?IsVulcanusMap@CNewPVP@@QAEHH@Z PROC			; CNewPVP::IsVulcanusMap, COMDAT
; _this$ = ecx

; 307  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  00003	33 c0		 xor	 eax, eax
  00005	83 7d 08 3f	 cmp	 DWORD PTR _nMapNumber$[ebp], 63 ; 0000003fH
  00009	0f 94 c0	 sete	 al

; 309  : 	}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?IsVulcanusMap@CNewPVP@@QAEHH@Z ENDP			; CNewPVP::IsVulcanusMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?IsGuildWar@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?IsGuildWar@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::IsGuildWar, COMDAT
; _this$ = ecx

; 1170 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1171 : 	if( lpObj->lpGuild && 

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8b 80 18 06 00
	00		 mov	 eax, DWORD PTR [eax+1560]
  0000c	85 c0		 test	 eax, eax
  0000e	74 12		 je	 SHORT $LN2@IsGuildWar
  00010	80 b8 91 05 00
	00 01		 cmp	 BYTE PTR [eax+1425], 1
  00017	75 09		 jne	 SHORT $LN2@IsGuildWar

; 1172 : 		lpObj->lpGuild->WarState == 1)
; 1173 : 	{
; 1174 : 		return TRUE;

  00019	b8 01 00 00 00	 mov	 eax, 1

; 1177 : }

  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
$LN2@IsGuildWar:

; 1175 : 	}
; 1176 : 	return FALSE;

  00022	33 c0		 xor	 eax, eax

; 1177 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?IsGuildWar@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::IsGuildWar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?IsSelfDefense@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?IsSelfDefense@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::IsSelfDefense, COMDAT
; _this$ = ecx

; 1155 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1156 : 	BOOL bRetVal = FALSE;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]

; 1157 : 	for ( int i = 0; i < 7; i++ )

  00006	33 d2		 xor	 edx, edx
  00008	81 c1 c4 05 00
	00		 add	 ecx, 1476		; 000005c4H
  0000e	66 90		 npad	 2
$LL4@IsSelfDefe:

; 1158 : 	{
; 1159 : 		if( lpObj->SelfDefense[i] >= 0 )

  00010	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00013	7d 0f		 jge	 SHORT $LN8@IsSelfDefe

; 1157 : 	for ( int i = 0; i < 7; i++ )

  00015	42		 inc	 edx
  00016	83 c1 04	 add	 ecx, 4
  00019	83 fa 07	 cmp	 edx, 7
  0001c	7c f2		 jl	 SHORT $LL4@IsSelfDefe

; 1160 : 		{
; 1161 : 			bRetVal = TRUE;
; 1162 : 			break;
; 1163 : 		}
; 1164 : 	}
; 1165 : 	return bRetVal;

  0001e	33 c0		 xor	 eax, eax

; 1166 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@IsSelfDefe:

; 1160 : 		{
; 1161 : 			bRetVal = TRUE;
; 1162 : 			break;
; 1163 : 		}
; 1164 : 	}
; 1165 : 	return bRetVal;

  00024	b8 01 00 00 00	 mov	 eax, 1

; 1166 : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?IsSelfDefense@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::IsSelfDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?CheckPKPenalty@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckPKPenalty@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::CheckPKPenalty, COMDAT
; _this$ = ecx

; 1135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1136 : 	if( !gPkLimitFree )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  0000a	75 37		 jne	 SHORT $LN6@CheckPKPen

; 1137 : 	{
; 1138 : 		if( lpObj->PartyNumber >= 0 )

  0000c	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0000f	8b 88 0c 06 00
	00		 mov	 ecx, DWORD PTR [eax+1548]
  00015	85 c9		 test	 ecx, ecx
  00017	78 18		 js	 SHORT $LN3@CheckPKPen

; 1139 : 		{
; 1140 : 			if( gParty.GetPartyPkLevel( lpObj->PartyNumber) >= 6 )

  00019	51		 push	 ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0001f	e8 00 00 00 00	 call	 ?GetPartyPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPartyPkLevel
  00024	3c 06		 cmp	 al, 6
  00026	7c 1b		 jl	 SHORT $LN6@CheckPKPen

; 1141 : 			{
; 1142 : 				return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 1151 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN3@CheckPKPen:

; 1143 : 			}
; 1144 : 		}
; 1145 : 		else if( lpObj->m_PK_Level >= 6 )

  00031	80 b8 19 01 00
	00 06		 cmp	 BYTE PTR [eax+281], 6
  00038	7c 09		 jl	 SHORT $LN6@CheckPKPen

; 1146 : 		{
; 1147 : 			 return TRUE;

  0003a	b8 01 00 00 00	 mov	 eax, 1

; 1151 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
$LN6@CheckPKPen:

; 1148 : 		}
; 1149 :     }
; 1150 : 	return FALSE;

  00043	33 c0		 xor	 eax, eax

; 1151 : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?CheckPKPenalty@CNewPVP@@QAEHPAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::CheckPKPenalty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Reset@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_iter$1 = 8						; size = 4
_obj$ = 8						; size = 4
?Reset@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z PROC		; CNewPVP::Reset, COMDAT
; _this$ = ecx

; 731  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 278  : 		return CHECK_LIMIT(obj.m_iDuelUserRequested, OBJMAX);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _obj$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 731  : {

  00008	8b d9		 mov	 ebx, ecx
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 278  : 		return CHECK_LIMIT(obj.m_iDuelUserRequested, OBJMAX);

  0000a	8b 8f 4c 12 00
	00		 mov	 ecx, DWORD PTR [edi+4684]
  00010	85 c9		 test	 ecx, ecx
  00012	78 26		 js	 SHORT $LN2@Reset
  00014	33 c0		 xor	 eax, eax
  00016	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0001c	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 732  : 	if( IsDuelRequested(obj) )	Cancel(obj, gObj[obj.m_iDuelUserRequested], TRUE);

  0001f	85 c0		 test	 eax, eax
  00021	74 17		 je	 SHORT $LN2@Reset
  00023	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00029	8b cb		 mov	 ecx, ebx
  0002b	6a 01		 push	 1
  0002d	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00033	50		 push	 eax
  00034	57		 push	 edi
  00035	e8 00 00 00 00	 call	 ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::Cancel
$LN2@Reset:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  0003a	8b 8f 50 12 00
	00		 mov	 ecx, DWORD PTR [edi+4688]
  00040	85 c9		 test	 ecx, ecx
  00042	78 17		 js	 SHORT $LN3@Reset
  00044	33 c0		 xor	 eax, eax
  00046	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0004c	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 733  : 	if( IsDuel(obj) )	Leave(obj);

  0004f	85 c0		 test	 eax, eax
  00051	74 08		 je	 SHORT $LN3@Reset
  00053	57		 push	 edi
  00054	8b cb		 mov	 ecx, ebx
  00056	e8 00 00 00 00	 call	 ?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::Leave
$LN3@Reset:

; 734  : 
; 735  : 	if( IsObserver(obj) )

  0005b	57		 push	 edi
  0005c	8b cb		 mov	 ecx, ebx
  0005e	e8 00 00 00 00	 call	 ?IsObserver@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::IsObserver
  00063	85 c0		 test	 eax, eax
  00065	74 28		 je	 SHORT $LN4@Reset

; 736  : 	{
; 737  : 		std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.find(obj.m_Index);

  00067	56		 push	 esi
  00068	57		 push	 edi
  00069	8d 45 08	 lea	 eax, DWORD PTR _iter$1[ebp]
  0006c	50		 push	 eax
  0006d	8d 8b 1c 01 00
	00		 lea	 ecx, DWORD PTR [ebx+284]
  00073	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00078	8b 45 08	 mov	 eax, DWORD PTR _iter$1[ebp]
  0007b	5e		 pop	 esi
  0007c	3b 83 1c 01 00
	00		 cmp	 eax, DWORD PTR [ebx+284]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 738  : 		if(!(iter!=m_ObserverInfoList.end()))	return;

  00082	74 0b		 je	 SHORT $LN4@Reset

; 739  : 		ObserverInfo & info = iter->second;
; 740  : 		LeaveChannel(info.nId, obj);

  00084	57		 push	 edi
  00085	ff 70 14	 push	 DWORD PTR [eax+20]
  00088	8b cb		 mov	 ecx, ebx
  0008a	e8 00 00 00 00	 call	 ?LeaveChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z ; CNewPVP::LeaveChannel
$LN4@Reset:
  0008f	5f		 pop	 edi
  00090	5b		 pop	 ebx

; 741  : 	}
; 742  : }

  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
?Reset@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z ENDP		; CNewPVP::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?IsObserver@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?IsObserver@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::IsObserver, COMDAT
; _this$ = ecx

; 670  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 671  : 	return gObjCheckUsedBuffEffect(&obj, 98);

  00003	6a 62		 push	 98			; 00000062H
  00005	ff 75 08	 push	 DWORD PTR _obj$[ebp]
  00008	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0000d	83 c4 08	 add	 esp, 8
  00010	0f b6 c0	 movzx	 eax, al

; 672  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?IsObserver@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::IsObserver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsDuel@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?IsDuel@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC		; CNewPVP::IsDuel, COMDAT
; _this$ = ecx

; 296  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  00003	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00006	8b 88 50 12 00
	00		 mov	 ecx, DWORD PTR [eax+4688]
  0000c	33 c0		 xor	 eax, eax
  0000e	85 c9		 test	 ecx, ecx
  00010	78 09		 js	 SHORT $LN4@IsDuel
  00012	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
$LN4@IsDuel:

; 298  : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsDuel@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP		; CNewPVP::IsDuel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsDuelReserved@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?IsDuelReserved@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::IsDuelReserved, COMDAT
; _this$ = ecx

; 282  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 		return CHECK_LIMIT(obj.m_iDuelUserReserved, OBJMAX);

  00003	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00006	8b 88 48 12 00
	00		 mov	 ecx, DWORD PTR [eax+4680]
  0000c	33 c0		 xor	 eax, eax
  0000e	85 c9		 test	 ecx, ecx
  00010	78 09		 js	 SHORT $LN4@IsDuelRese
  00012	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
$LN4@IsDuelRese:

; 284  : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsDuelReserved@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::IsDuelReserved
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsDuelRequested@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?IsDuelRequested@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::IsDuelRequested, COMDAT
; _this$ = ecx

; 277  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 278  : 		return CHECK_LIMIT(obj.m_iDuelUserRequested, OBJMAX);

  00003	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00006	8b 88 4c 12 00
	00		 mov	 ecx, DWORD PTR [eax+4684]
  0000c	33 c0		 xor	 eax, eax
  0000e	85 c9		 test	 ecx, ecx
  00010	78 09		 js	 SHORT $LN4@IsDuelRequ
  00012	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
$LN4@IsDuelRequ:

; 279  : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsDuelRequested@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::IsDuelRequested
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::IsSafeState, COMDAT
; _this$ = ecx

; 654  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 	DUEL_CHANNEL * lpChannel = GetDuelChannel(obj.Name);

  00003	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00006	83 c0 5d	 add	 eax, 93			; 0000005dH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@PAD@Z ; CNewPVP::GetDuelChannel

; 656  : 	if(lpChannel == NULL)	return TRUE;

  0000f	85 c0		 test	 eax, eax
  00011	74 15		 je	 SHORT $LN4@IsSafeStat

; 657  : 	
; 658  : 	if( lpChannel->nStatus == 2 || 
; 659  : 		lpChannel->nStatus == 4 || 

  00013	8a 40 22	 mov	 al, BYTE PTR [eax+34]
  00016	3c 02		 cmp	 al, 2
  00018	74 0e		 je	 SHORT $LN4@IsSafeStat
  0001a	3c 04		 cmp	 al, 4
  0001c	74 0a		 je	 SHORT $LN4@IsSafeStat
  0001e	3c 05		 cmp	 al, 5
  00020	74 06		 je	 SHORT $LN4@IsSafeStat

; 663  : 	}
; 664  : 
; 665  : 	return FALSE;

  00022	33 c0		 xor	 eax, eax

; 666  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN4@IsSafeStat:

; 660  : 		lpChannel->nStatus == DC_RESERVEDEND )
; 661  : 	{
; 662  : 		return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 666  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::IsSafeState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?GetChannelStatus@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?GetChannelStatus@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::GetChannelStatus, COMDAT
; _this$ = ecx

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 647  : 	DUEL_CHANNEL * lpChannel = GetDuelChannel(obj.Name);

  00003	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00006	83 c0 5d	 add	 eax, 93			; 0000005dH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?GetDuelChannel@CNewPVP@@AAEPAU_tagDUEL_CHANNEL@@PAD@Z ; CNewPVP::GetDuelChannel

; 648  : 	if(lpChannel != NULL)	return lpChannel->nStatus;

  0000f	85 c0		 test	 eax, eax
  00011	74 08		 je	 SHORT $LN2@GetChannel
  00013	0f b6 40 22	 movzx	 eax, BYTE PTR [eax+34]

; 650  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN2@GetChannel:

; 649  : 	return 0;

  0001b	33 c0		 xor	 eax, eax

; 650  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?GetChannelStatus@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::GetChannelStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_bUse$ = 12						; size = 4
?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z PROC		; CNewPVP::SetBuff, COMDAT
; _this$ = ecx

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  : 	if( bUse )

  00003	83 7d 0c 00	 cmp	 DWORD PTR _bUse$[ebp], 0
  00007	56		 push	 esi

; 625  : 	{
; 626  : 		gObjAddBuffEffect(&obj, 18, 0, 0, 0, 0, -10);

  00008	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  0000b	74 32		 je	 SHORT $LN2@SetBuff
  0000d	6a f6		 push	 -10			; fffffff6H
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 12		 push	 18			; 00000012H
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 627  : 		gObjAddBuffEffect(&obj, 98, 0, 0, 0, 0, -10);

  0001f	6a f6		 push	 -10			; fffffff6H
  00021	6a 00		 push	 0
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	6a 00		 push	 0
  00029	6a 62		 push	 98			; 00000062H
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 628  : 		gObjViewportListProtocolDestroy(&obj);

  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ?gObjViewportListProtocolDestroy@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolDestroy
  00037	83 c4 3c	 add	 esp, 60			; 0000003cH
  0003a	5e		 pop	 esi

; 635  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN2@SetBuff:

; 629  : 		return;
; 630  : 	}
; 631  : 
; 632  : 	gObjRemoveBuffEffect(&obj, 18);

  0003f	6a 12		 push	 18			; 00000012H
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 633  : 	gObjRemoveBuffEffect(&obj, 98);

  00047	6a 62		 push	 98			; 00000062H
  00049	56		 push	 esi
  0004a	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect

; 634  : 	gObjViewportListProtocolCreate(&obj);

  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ?gObjViewportListProtocolCreate@@YAXPAUOBJECTSTRUCT@@@Z ; gObjViewportListProtocolCreate
  00055	83 c4 14	 add	 esp, 20			; 00000014H
  00058	5e		 pop	 esi

; 635  : }

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z ENDP		; CNewPVP::SetBuff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?ChatMsgSend@CNewPVP@@QAEXAAUOBJECTSTRUCT@@PAEH@Z
_TEXT	SEGMENT
_requester$1$ = -4					; size = 4
_responsor$1$ = 8					; size = 4
_obj$ = 8						; size = 4
_Msg$ = 12						; size = 4
_size$ = 16						; size = 4
?ChatMsgSend@CNewPVP@@QAEXAAUOBJECTSTRUCT@@PAEH@Z PROC	; CNewPVP::ChatMsgSend, COMDAT
; _this$ = ecx

; 709  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0000b	8b 91 50 12 00
	00		 mov	 edx, DWORD PTR [ecx+4688]
  00011	85 d2		 test	 edx, edx
  00013	78 1b		 js	 SHORT $LN2@ChatMsgSen
  00015	33 c0		 xor	 eax, eax
  00017	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001d	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 711  : 	if( IsDuel(obj) == TRUE ){

  00020	83 f8 01	 cmp	 eax, 1
  00023	75 0b		 jne	 SHORT $LN2@ChatMsgSen

; 712  : 		nId = GetDuelChannelId(obj.m_Index);

  00025	ff 31		 push	 DWORD PTR [ecx]
  00027	8b cf		 mov	 ecx, edi
  00029	e8 00 00 00 00	 call	 ?GetDuelChannelId@CNewPVP@@AAEHH@Z ; CNewPVP::GetDuelChannelId
  0002e	eb 08		 jmp	 SHORT $LN14@ChatMsgSen
$LN2@ChatMsgSen:

; 713  : 	}
; 714  : 	else nId = GetChannelIdByObserver(obj);

  00030	51		 push	 ecx
  00031	8b cf		 mov	 ecx, edi
  00033	e8 00 00 00 00	 call	 ?GetChannelIdByObserver@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::GetChannelIdByObserver
$LN14@ChatMsgSen:
  00038	8b f0		 mov	 esi, eax

; 715  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  0003a	83 fe 03	 cmp	 esi, 3
  0003d	0f 87 a4 00 00
	00		 ja	 $LN5@ChatMsgSen

; 716  : 	if(m_DuelChannel[nId].nStatus == DC_IDLE){ LogAddTD("%s\t%s\t%s\t%s\t%d","m_DuelChannel[nId].nStatus!=DC_IDLE","0","NULL",__FILE__, __LINE__); return; }

  00043	6b ce 2c	 imul	 ecx, esi, 44
  00046	80 bc 39 86 00
	00 00 00	 cmp	 BYTE PTR [ecx+edi+134], 0
  0004e	75 1e		 jne	 SHORT $LN6@ChatMsgSen
  00050	68 cc 02 00 00	 push	 716			; 000002ccH
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@IELDJHDH@m_DuelChannel?$FLnId?$FN?4nStatus?$CB?$DNDC_I@
  00069	e9 92 00 00 00	 jmp	 $LN15@ChatMsgSen
$LN6@ChatMsgSen:

; 717  : 
; 718  : 	LPDUEL_CHANNEL lpChannel = &m_DuelChannel[nId];
; 719  : 
; 720  : 	OBJECTSTRUCT& requester = gObj[lpChannel->nIndex1];

  0006e	69 54 39 68 40
	27 00 00	 imul	 edx, DWORD PTR [ecx+edi+104], 10048

; 721  :     OBJECTSTRUCT& responsor = gObj[lpChannel->nIndex2];

  00076	69 4c 39 6c 40
	27 00 00	 imul	 ecx, DWORD PTR [ecx+edi+108], 10048
  0007e	53		 push	 ebx
  0007f	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00085	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 722  : 
; 723  : 	if(gObjIsConnected(&requester))	DataSend(requester.m_Index, Msg, size);

  0008b	52		 push	 edx
  0008c	89 55 fc	 mov	 DWORD PTR _requester$1$[ebp], edx
  0008f	89 4d 08	 mov	 DWORD PTR _responsor$1$[ebp], ecx
  00092	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  00097	8b 5d 10	 mov	 ebx, DWORD PTR _size$[ebp]
  0009a	83 c4 04	 add	 esp, 4
  0009d	85 c0		 test	 eax, eax
  0009f	74 11		 je	 SHORT $LN7@ChatMsgSen
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _requester$1$[ebp]
  000a4	53		 push	 ebx
  000a5	ff 75 0c	 push	 DWORD PTR _Msg$[ebp]
  000a8	ff 30		 push	 DWORD PTR [eax]
  000aa	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN7@ChatMsgSen:

; 724  : 	if(gObjIsConnected(&responsor))	DataSend(responsor.m_Index, Msg, size);

  000b2	ff 75 08	 push	 DWORD PTR _responsor$1$[ebp]
  000b5	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000ba	83 c4 04	 add	 esp, 4
  000bd	85 c0		 test	 eax, eax
  000bf	74 11		 je	 SHORT $LN8@ChatMsgSen
  000c1	8b 45 08	 mov	 eax, DWORD PTR _responsor$1$[ebp]
  000c4	53		 push	 ebx
  000c5	ff 75 0c	 push	 DWORD PTR _Msg$[ebp]
  000c8	ff 30		 push	 DWORD PTR [eax]
  000ca	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN8@ChatMsgSen:

; 725  : 
; 726  : 	BroadcastToObserver(nId, Msg, size);

  000d2	53		 push	 ebx
  000d3	ff 75 0c	 push	 DWORD PTR _Msg$[ebp]
  000d6	8b cf		 mov	 ecx, edi
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 ?BroadcastToObserver@CNewPVP@@AAEXHPAEH@Z ; CNewPVP::BroadcastToObserver
  000de	5b		 pop	 ebx
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi

; 727  : }

  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 0c 00	 ret	 12			; 0000000cH
$LN5@ChatMsgSen:

; 715  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  000e7	68 cb 02 00 00	 push	 715			; 000002cbH
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000f1	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
$LN15@ChatMsgSen:
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0010b	83 c4 18	 add	 esp, 24			; 00000018H
  0010e	5f		 pop	 edi
  0010f	5e		 pop	 esi

; 727  : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c2 0c 00	 ret	 12			; 0000000cH
?ChatMsgSend@CNewPVP@@QAEXAAUOBJECTSTRUCT@@PAEH@Z ENDP	; CNewPVP::ChatMsgSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?LeaveChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_res$1 = -8						; size = 5
$T2 = 8							; size = 4
_iter$ = 8						; size = 4
_nId$ = 8						; size = 4
_obj$ = 12						; size = 4
?LeaveChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::LeaveChannel, COMDAT
; _this$ = ecx

; 837  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 838  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","ENEWPVP::E_INVALID_CHANNELID","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_CHANNELID; }

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _nId$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	83 fb 03	 cmp	 ebx, 3
  00010	0f 87 fa 00 00
	00		 ja	 $LN3@LeaveChann

; 839  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "ENEWPVP::E_INVALID_STATUS","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_STATUS; }	

  00016	6b c3 2c	 imul	 eax, ebx, 44
  00019	8a 84 30 86 00
	00 00		 mov	 al, BYTE PTR [eax+esi+134]
  00020	3c 02		 cmp	 al, 2
  00022	0f 82 b4 00 00
	00		 jb	 $LN5@LeaveChann
  00028	3c 04		 cmp	 al, 4
  0002a	0f 87 ac 00 00
	00		 ja	 $LN5@LeaveChann

; 840  : 
; 841  : 	std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.find(obj.m_Index); 

  00030	57		 push	 edi
  00031	8b 7d 0c	 mov	 edi, DWORD PTR _obj$[ebp]
  00034	8d 4d 08	 lea	 ecx, DWORD PTR _iter$[ebp]
  00037	57		 push	 edi
  00038	51		 push	 ecx
  00039	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  0003f	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  00044	8b 45 08	 mov	 eax, DWORD PTR _iter$[ebp]
  00047	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  0004d	3b 01		 cmp	 eax, DWORD PTR [ecx]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 842  : 	if(!(iter!=m_ObserverInfoList.end()))	return ENEWPVP::E_NOT_EXIST_USER;

  0004f	75 0e		 jne	 SHORT $LN6@LeaveChann
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	b8 1a 00 00 00	 mov	 eax, 26			; 0000001aH
  00058	5b		 pop	 ebx

; 867  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
$LN6@LeaveChann:

; 843  : 	m_ObserverInfoList.erase(iter);

  0005f	50		 push	 eax
  00060	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase

; 844  : 	m_ObserverCount[nId]--;

  00069	ff 8c 9e 24 01
	00 00		 dec	 DWORD PTR [esi+ebx*4+292]

; 845  : 
; 846  : 	BroadcastLeaveChannel( nId, obj);

  00070	8b ce		 mov	 ecx, esi
  00072	57		 push	 edi
  00073	53		 push	 ebx
  00074	e8 00 00 00 00	 call	 ?BroadcastLeaveChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z ; CNewPVP::BroadcastLeaveChannel

; 847  : 
; 848  : 	if( gObjIsConnected(&obj) )

  00079	57		 push	 edi
  0007a	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  0007f	83 c4 04	 add	 esp, 4
  00082	85 c0		 test	 eax, eax
  00084	74 43		 je	 SHORT $LN7@LeaveChann

; 849  :     {
; 850  : 		PMSG_ANS_DUEL_LEAVECNANNEL res = {0};
; 851  : 		res.h.c = PMHC_BYTE;
; 852  : 		res.h.headcode = 0xAA;
; 853  : 		res.h.subcode = 0x09;
; 854  : 		res.h.size = sizeof(PMSG_ANS_DUEL_LEAVECNANNEL);
; 855  : 		res.nResult = 0x00;		
; 856  : 		DataSend(obj.m_Index, (LPBYTE)&res, res.h.size);

  00086	6a 05		 push	 5
  00088	8d 45 f8	 lea	 eax, DWORD PTR _res$1[ebp]
  0008b	c7 45 f9 00 00
	00 00		 mov	 DWORD PTR _res$1[ebp+1], 0
  00092	50		 push	 eax
  00093	ff 37		 push	 DWORD PTR [edi]
  00095	c7 45 f8 c1 05
	aa 09		 mov	 DWORD PTR _res$1[ebp], 162137537 ; 09aa05c1H
  0009c	c6 45 fc 00	 mov	 BYTE PTR _res$1[ebp+4], 0
  000a0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 313  : 		return nMapNumber == MAP_INDEX_PKFIELD;

  000a8	80 bf 23 01 00
	00 40		 cmp	 BYTE PTR [edi+291], 64	; 00000040H
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 858  : 		if( IsPKFieldMap(obj.MapNumber) )

  000af	75 0e		 jne	 SHORT $LN8@LeaveChann

; 859  : 		{
; 860  :             MoveGate(obj.m_Index, 294);

  000b1	68 26 01 00 00	 push	 294			; 00000126H
  000b6	ff 37		 push	 DWORD PTR [edi]
  000b8	8b ce		 mov	 ecx, esi
  000ba	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate
$LN8@LeaveChann:

; 861  : 		}
; 862  : 
; 863  : 		SetBuff(obj, FALSE);

  000bf	6a 00		 push	 0
  000c1	57		 push	 edi
  000c2	8b ce		 mov	 ecx, esi
  000c4	e8 00 00 00 00	 call	 ?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z ; CNewPVP::SetBuff
$LN7@LeaveChann:

; 864  :     }
; 865  : 	CheckChannelListInfo( nId);

  000c9	53		 push	 ebx
  000ca	8b ce		 mov	 ecx, esi
  000cc	e8 00 00 00 00	 call	 ?CheckChannelListInfo@CNewPVP@@AAEXH@Z ; CNewPVP::CheckChannelListInfo
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi

; 866  : 	return 0;

  000d3	33 c0		 xor	 eax, eax
  000d5	5b		 pop	 ebx

; 867  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8
$LN5@LeaveChann:

; 839  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "ENEWPVP::E_INVALID_STATUS","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_STATUS; }	

  000dc	68 47 03 00 00	 push	 839			; 00000347H
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00100	83 c4 18	 add	 esp, 24			; 00000018H
  00103	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx

; 867  : }

  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c2 08 00	 ret	 8
$LN3@LeaveChann:

; 838  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","ENEWPVP::E_INVALID_CHANNELID","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_CHANNELID; }

  00110	68 46 03 00 00	 push	 838			; 00000346H
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CPLOFFJH@ENEWPVP?3?3E_INVALID_CHANNELID?$AA@
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00134	83 c4 18	 add	 esp, 24			; 00000018H
  00137	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  0013c	5e		 pop	 esi
  0013d	5b		 pop	 ebx

; 867  : }

  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 08 00	 ret	 8
?LeaveChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::LeaveChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?JoinChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
$T1 = -216						; size = 24
_pair$ = -192						; size = 8
_info$ = -184						; size = 20
_obj$GSCopy$1$ = -164					; size = 4
_this$GSCopy$1$ = -160					; size = 4
tv559 = -156						; size = 4
_requester$1$ = -152					; size = 4
tv566 = -152						; size = 4
_responsor$1$ = -148					; size = 4
_iter$ = -148						; size = 4
_Msg$ = -144						; size = 105
_res$ = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_nId$ = 8						; size = 4
_obj$ = 12						; size = 4
?JoinChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z PROC	; CNewPVP::JoinChannel, COMDAT
; _this$ = ecx

; 763  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _nId$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 0c	 mov	 edi, DWORD PTR _obj$[ebp]
  0001c	8b f1		 mov	 esi, ecx
  0001e	89 b5 60 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00024	89 bd 5c ff ff
	ff		 mov	 DWORD PTR _obj$GSCopy$1$[ebp], edi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  0002a	8b 8f 50 12 00
	00		 mov	 ecx, DWORD PTR [edi+4688]
  00030	85 c9		 test	 ecx, ecx
  00032	78 3d		 js	 SHORT $LN5@JoinChanne
  00034	33 c0		 xor	 eax, eax
  00036	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0003c	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 764  : 	if( IsDuel(obj) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","!IsDuel(obj)","ENEWPVP::E_ALREADY_DUELLING", "NULL", __FILE__,  __LINE__); return ENEWPVP::E_ALREADY_DUELLING; }

  0003f	85 c0		 test	 eax, eax
  00041	74 2e		 je	 SHORT $LN5@JoinChanne
  00043	68 fc 02 00 00	 push	 764			; 000002fcH
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HJFACEHP@ENEWPVP?3?3E_ALREADY_DUELLING?$AA@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNKFLCMC@?$CBIsDuel?$CIobj?$CJ?$AA@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00067	b8 14 00 00 00	 mov	 eax, 20			; 00000014H
  0006c	e9 f4 03 00 00	 jmp	 $LN94@JoinChanne
$LN5@JoinChanne:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 278  : 		return CHECK_LIMIT(obj.m_iDuelUserRequested, OBJMAX);

  00071	8b 8f 4c 12 00
	00		 mov	 ecx, DWORD PTR [edi+4684]
  00077	85 c9		 test	 ecx, ecx
  00079	78 3d		 js	 SHORT $LN6@JoinChanne
  0007b	33 c0		 xor	 eax, eax
  0007d	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00083	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 765  : 	if( IsDuelRequested(obj) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","!IsDuelRequested(obj)","ENEWPVP::E_ALREADY_DUELREQUESTED","NULL",  __FILE__,  __LINE__); return ENEWPVP::E_ALREADY_DUELREQUESTED; }

  00086	85 c0		 test	 eax, eax
  00088	74 2e		 je	 SHORT $LN6@JoinChanne
  0008a	68 fd 02 00 00	 push	 765			; 000002fdH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MKBHDMEM@ENEWPVP?3?3E_ALREADY_DUELREQUESTED@
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JFAHKGBO@?$CBIsDuelRequested?$CIobj?$CJ?$AA@
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ae	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  000b3	e9 ad 03 00 00	 jmp	 $LN94@JoinChanne
$LN6@JoinChanne:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 283  : 		return CHECK_LIMIT(obj.m_iDuelUserReserved, OBJMAX);

  000b8	8b 8f 48 12 00
	00		 mov	 ecx, DWORD PTR [edi+4680]
  000be	85 c9		 test	 ecx, ecx
  000c0	78 3d		 js	 SHORT $LN7@JoinChanne
  000c2	33 c0		 xor	 eax, eax
  000c4	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  000ca	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 766  : 	if( IsDuelReserved(obj) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","!IsDuelReserved(obj)","ENEWPVP::E_ALREADY_DUELRESERVED","NULL", __FILE__,  __LINE__); return ENEWPVP::E_ALREADY_DUELRESERVED; }

  000cd	85 c0		 test	 eax, eax
  000cf	74 2e		 je	 SHORT $LN7@JoinChanne
  000d1	68 fe 02 00 00	 push	 766			; 000002feH
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KJOHBDGM@ENEWPVP?3?3E_ALREADY_DUELRESERVED?$AA@
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@JEHEGAMC@?$CBIsDuelReserved?$CIobj?$CJ?$AA@
  000ea	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f5	b8 13 00 00 00	 mov	 eax, 19			; 00000013H
  000fa	e9 66 03 00 00	 jmp	 $LN94@JoinChanne
$LN7@JoinChanne:

; 767  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","ENEWPVP::E_INVALID_CHANNELID","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_CHANNELID; }

  000ff	83 fb 03	 cmp	 ebx, 3
  00102	0f 87 34 03 00
	00		 ja	 $LN9@JoinChanne

; 768  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "ENEWPVP::E_INVALID_STATUS","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_STATUS; }

  00108	6b c3 2c	 imul	 eax, ebx, 44
  0010b	03 c6		 add	 eax, esi
  0010d	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv566[ebp], eax
  00113	8a 80 86 00 00
	00		 mov	 al, BYTE PTR [eax+134]
  00119	3c 02		 cmp	 al, 2
  0011b	0f 82 f0 02 00
	00		 jb	 $LN11@JoinChanne
  00121	3c 04		 cmp	 al, 4
  00123	0f 87 e8 02 00
	00		 ja	 $LN11@JoinChanne

; 769  : 	if( m_ObserverCount[nId] + 1 > 10 )	return ENEWPVP::E_OBSERVER_MAX;

  00129	8b 84 9e 24 01
	00 00		 mov	 eax, DWORD PTR [esi+ebx*4+292]
  00130	40		 inc	 eax
  00131	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00134	7e 18		 jle	 SHORT $LN12@JoinChanne
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	b8 1b 00 00 00	 mov	 eax, 27			; 0000001bH
  0013d	5b		 pop	 ebx

; 833  : }

  0013e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00141	33 cd		 xor	 ecx, ebp
  00143	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c2 08 00	 ret	 8
$LN12@JoinChanne:

; 770  : 	if( !CheckLimitLevel(obj.m_Index, g_GateObserver[nId]) )	return ENEWPVP::E_LIMIT_LEVEL;

  0014e	ff 34 9d 00 00
	00 00		 push	 DWORD PTR ?g_GateObserver@@3PAHA[ebx*4]
  00155	8b ce		 mov	 ecx, esi
  00157	ff 37		 push	 DWORD PTR [edi]
  00159	e8 00 00 00 00	 call	 ?CheckLimitLevel@CNewPVP@@AAEHHH@Z ; CNewPVP::CheckLimitLevel
  0015e	85 c0		 test	 eax, eax
  00160	75 18		 jne	 SHORT $LN13@JoinChanne
  00162	5f		 pop	 edi
  00163	5e		 pop	 esi
  00164	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  00169	5b		 pop	 ebx

; 833  : }

  0016a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016d	33 cd		 xor	 ecx, ebp
  0016f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 08 00	 ret	 8
$LN13@JoinChanne:

; 771  : 
; 772  : 	std::map<int, _tagObserverInfo>::iterator iter = m_ObserverInfoList.find(obj.m_Index); 

  0017a	57		 push	 edi
  0017b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _iter$[ebp]
  00181	51		 push	 ecx
  00182	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  00188	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  0018d	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00193	39 85 6c ff ff
	ff		 cmp	 DWORD PTR _iter$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 773  : 	if( !(iter==m_ObserverInfoList.end()) )	return ENEWPVP::E_FAILED_ENTER;

  00199	74 18		 je	 SHORT $LN14@JoinChanne
$LN95@JoinChanne:
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	b8 19 00 00 00	 mov	 eax, 25			; 00000019H
  001a2	5b		 pop	 ebx

; 833  : }

  001a3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a6	33 cd		 xor	 ecx, ebp
  001a8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c2 08 00	 ret	 8
$LN14@JoinChanne:

; 774  : 
; 775  : 	OBJECTSTRUCT & requester = gObj[m_DuelChannel[nId].nIndex1];

  001b3	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv566[ebp]

; 776  :     OBJECTSTRUCT & responsor = gObj[m_DuelChannel[nId].nIndex2];
; 777  : 	
; 778  : 	BroadcastJoinChannel(nId, obj);

  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	69 51 68 40 27
	00 00		 imul	 edx, DWORD PTR [ecx+104], 10048
  001c2	69 49 6c 40 27
	00 00		 imul	 ecx, DWORD PTR [ecx+108], 10048
  001c9	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001cf	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001d5	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _responsor$1$[ebp], ecx
  001db	8b ce		 mov	 ecx, esi
  001dd	89 95 68 ff ff
	ff		 mov	 DWORD PTR _requester$1$[ebp], edx
  001e3	e8 00 00 00 00	 call	 ?BroadcastJoinChannel@CNewPVP@@AAEXHAAUOBJECTSTRUCT@@@Z ; CNewPVP::BroadcastJoinChannel

; 779  : 
; 780  : 	ObserverInfo info = {0};
; 781  : 	info.nId = nId;
; 782  :     info.nIndex = obj.m_Index;

  001e8	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 783  : 	memcpy(info.szName, obj.Name, MAX_IDSTRING);

  001ea	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  001ed	0f 57 c0	 xorps	 xmm0, xmm0
  001f0	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv559[ebp], eax
  001f6	0f 11 85 4c ff
	ff ff		 movups	 XMMWORD PTR _info$[ebp+4], xmm0
  001fd	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _info$[ebp+4], ecx
  00203	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00207	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  0020b	66 89 85 58 ff
	ff ff		 mov	 WORD PTR _info$[ebp+16], ax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00212	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _info$[ebp+16]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 783  : 	memcpy(info.szName, obj.Name, MAX_IDSTRING);

  00218	66 0f d6 85 50
	ff ff ff	 movq	 QWORD PTR _info$[ebp+8], xmm0
  00220	89 9d 48 ff ff
	ff		 mov	 DWORD PTR _info$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00226	0f 10 85 48 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _info$[ebp]
  0022d	89 85 3c ff ff
	ff		 mov	 DWORD PTR $T1[ebp+20], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00233	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  00239	89 8d 28 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  0023f	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  00245	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  00246	0f 11 85 2c ff
	ff ff		 movups	 XMMWORD PTR $T1[ebp+4], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  0024d	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_tagObserverInfo@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@$$QAU?$pair@HU_tagObserverInfo@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buynode<std::pair<int,_tagObserverInfo> >

; 1094 : 		return (_Insert_nohint(false,

  00252	50		 push	 eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);
; 583  : 		}
; 584  : 
; 585  : 	static _Nodepref _Left(_Nodeptr _Pnode)
; 586  : 		{	// return reference to left pointer in node
; 587  : 		return ((_Nodepref)_Pnode->_Left);
; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);

  00253	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00256	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  0025c	50		 push	 eax
  0025d	6a 00		 push	 0
  0025f	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _pair$[ebp]
  00265	50		 push	 eax
  00266	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHU_tagObserverInfo@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagObserverInfo@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Insert_nohint<std::pair<int const ,_tagObserverInfo> &,std::_Tree_node<std::pair<int const ,_tagObserverInfo>,void *> *>
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 786  : 	if(pair.second == false)	return ENEWPVP::E_FAILED_ENTER;

  0026b	80 bd 44 ff ff
	ff 00		 cmp	 BYTE PTR _pair$[ebp+4], 0
  00272	0f 84 23 ff ff
	ff		 je	 $LN95@JoinChanne

; 787  : 
; 788  : 	m_ObserverCount[nId]++;

  00278	ff 84 9e 24 01
	00 00		 inc	 DWORD PTR [esi+ebx*4+292]
  0027f	0f 57 c0	 xorps	 xmm0, xmm0

; 789  : 
; 790  : 	PMSG_ANS_DUEL_JOINCNANNEL res = {0};
; 791  : 	res.h.c = PMHC_BYTE;
; 792  :     res.h.headcode = 0xAA;
; 793  :     res.h.subcode = 0x07;
; 794  :     res.h.size = sizeof(PMSG_ANS_DUEL_JOINCNANNEL);
; 795  : 	res.nResult = 0x00;
; 796  :     res.nChannelId = nId;
; 797  : 	res.NumberH1 = HIBYTE(requester.m_Index);

  00282	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _requester$1$[ebp]

; 798  :     res.NumberL1 = LOBYTE(requester.m_Index);
; 799  :     res.NumberH2 = HIBYTE(responsor.m_Index);

  00288	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _responsor$1$[ebp]
  0028e	0f 11 45 dd	 movups	 XMMWORD PTR _res$[ebp+1], xmm0
  00292	c7 45 f5 00 00
	00 00		 mov	 DWORD PTR _res$[ebp+25], 0
  00299	66 0f d6 45 ed	 movq	 QWORD PTR _res$[ebp+17], xmm0
  0029e	c6 45 f9 00	 mov	 BYTE PTR _res$[ebp+29], 0
  002a2	c7 45 dc c1 1e
	aa 07		 mov	 DWORD PTR _res$[ebp], 128589505 ; 07aa1ec1H
  002a9	c6 45 e0 00	 mov	 BYTE PTR _res$[ebp+4], 0
  002ad	88 5d e1	 mov	 BYTE PTR _res$[ebp+5], bl
  002b0	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  002b4	88 45 f6	 mov	 BYTE PTR _res$[ebp+26], al
  002b7	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  002ba	88 45 f7	 mov	 BYTE PTR _res$[ebp+27], al
  002bd	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  002c1	88 45 f8	 mov	 BYTE PTR _res$[ebp+28], al

; 800  :     res.NumberL2 = LOBYTE(responsor.m_Index);

  002c4	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  002c7	88 45 f9	 mov	 BYTE PTR _res$[ebp+29], al

; 801  :     memcpy(res.szName1, requester.Name, MAX_IDSTRING);

  002ca	f3 0f 7e 41 5d	 movq	 xmm0, QWORD PTR [ecx+93]
  002cf	66 0f d6 45 e2	 movq	 QWORD PTR _res$[ebp+6], xmm0
  002d4	0f b7 41 65	 movzx	 eax, WORD PTR [ecx+101]
  002d8	66 89 45 ea	 mov	 WORD PTR _res$[ebp+14], ax

; 802  :     memcpy(res.szName2, responsor.Name, MAX_IDSTRING);

  002dc	f3 0f 7e 42 5d	 movq	 xmm0, QWORD PTR [edx+93]
  002e1	66 0f d6 45 ec	 movq	 QWORD PTR _res$[ebp+16], xmm0
  002e6	0f b7 42 65	 movzx	 eax, WORD PTR [edx+101]
  002ea	66 89 45 f4	 mov	 WORD PTR _res$[ebp+24], ax

; 803  :     DataSend(obj.m_Index, (LPBYTE)&res,res.h.size);

  002ee	8d 45 dc	 lea	 eax, DWORD PTR _res$[ebp]
  002f1	6a 1e		 push	 30			; 0000001eH
  002f3	50		 push	 eax
  002f4	ff 37		 push	 DWORD PTR [edi]
  002f6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 804  : 
; 805  : 	PMSG_DUEL_OBSERVERLIST_BROADCAST Msg = {0};

  002fb	6a 68		 push	 104			; 00000068H
  002fd	8d 85 71 ff ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp+1]
  00303	6a 00		 push	 0
  00305	50		 push	 eax
  00306	e8 00 00 00 00	 call	 _memset
  0030b	83 c4 18	 add	 esp, 24			; 00000018H

; 806  : 	Msg.h.c = PMHC_BYTE;

  0030e	c7 85 70 ff ff
	ff c1 69 aa 0b	 mov	 DWORD PTR _Msg$[ebp], 195717569 ; 0baa69c1H

; 807  : 	Msg.h.headcode = 0xAA;
; 808  : 	Msg.h.subcode = 0x0B;
; 809  : 	Msg.h.size = sizeof(PMSG_DUEL_OBSERVERLIST_BROADCAST);
; 810  : 
; 811  : 	GetObserverList(nId, Msg);

  00318	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp]
  0031e	8b ce		 mov	 ecx, esi
  00320	50		 push	 eax
  00321	53		 push	 ebx
  00322	e8 00 00 00 00	 call	 ?GetObserverList@CNewPVP@@AAEXHAAU_tagPMSG_DUEL_OBSERVERLIST_BROADCAST@@@Z ; CNewPVP::GetObserverList

; 812  : 
; 813  : 	DataSend(obj.m_Index, (LPBYTE)&Msg, Msg.h.size);

  00327	0f b6 85 71 ff
	ff ff		 movzx	 eax, BYTE PTR _Msg$[ebp+1]
  0032e	50		 push	 eax
  0032f	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _Msg$[ebp]
  00335	50		 push	 eax
  00336	ff 37		 push	 DWORD PTR [edi]
  00338	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 814  : 
; 815  : 	if( Msg.nCount!=m_ObserverCount[nId] )

  0033d	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR _Msg$[ebp+4]
  00344	83 c4 0c	 add	 esp, 12			; 0000000cH
  00347	8b 8c 9e 24 01
	00 00		 mov	 ecx, DWORD PTR [esi+ebx*4+292]
  0034e	3b c1		 cmp	 eax, ecx
  00350	74 74		 je	 SHORT $LN16@JoinChanne

; 816  :     {
; 817  : 		LogAddTD("[NewPVP] ChannelId[%d] Count[%d][%d]", nId, Msg.nCount, m_ObserverCount[nId]);

  00352	51		 push	 ecx
  00353	50		 push	 eax
  00354	53		 push	 ebx
  00355	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OEOKBHOF@?$FLNewPVP?$FN?5ChannelId?$FL?$CFd?$FN?5Count?$FL?$CFd?$FN@
  0035a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 818  : 		
; 819  : 		DebugLog("%s(%d):",obj.Name,Msg.nCount);

  00360	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR _Msg$[ebp+4]
  00367	50		 push	 eax
  00368	ff b5 64 ff ff
	ff		 push	 DWORD PTR tv559[ebp]
  0036e	68 00 00 00 00	 push	 OFFSET ??_C@_07LCGEGCHP@?$CFs?$CI?$CFd?$CJ?3?$AA@
  00373	e8 00 00 00 00	 call	 ?DebugLog@@YAXPADZZ	; DebugLog
  00378	83 c4 1c	 add	 esp, 28			; 0000001cH

; 820  : 		for(int n = 0; n < Msg.nCount; n++)

  0037b	33 ff		 xor	 edi, edi
  0037d	80 bd 74 ff ff
	ff 00		 cmp	 BYTE PTR _Msg$[ebp+4], 0
  00384	76 2d		 jbe	 SHORT $LN3@JoinChanne

; 816  :     {
; 817  : 		LogAddTD("[NewPVP] ChannelId[%d] Count[%d][%d]", nId, Msg.nCount, m_ObserverCount[nId]);

  00386	8d b5 75 ff ff
	ff		 lea	 esi, DWORD PTR _Msg$[ebp+5]
  0038c	0f 1f 40 00	 npad	 4
$LL4@JoinChanne:

; 821  : 		{
; 822  : 			DebugLog("%s,",Msg.user[n].szName);

  00390	56		 push	 esi
  00391	68 00 00 00 00	 push	 OFFSET ??_C@_03CGNBMCEI@?$CFs?0?$AA@
  00396	e8 00 00 00 00	 call	 ?DebugLog@@YAXPADZZ	; DebugLog
  0039b	0f b6 85 74 ff
	ff ff		 movzx	 eax, BYTE PTR _Msg$[ebp+4]
  003a2	47		 inc	 edi
  003a3	83 c4 08	 add	 esp, 8
  003a6	83 c6 0a	 add	 esi, 10			; 0000000aH
  003a9	3b f8		 cmp	 edi, eax
  003ab	7c e3		 jl	 SHORT $LL4@JoinChanne
  003ad	8b b5 60 ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@JoinChanne:

; 823  : 		}
; 824  : 		DebugLog("\r\n");

  003b3	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
  003b8	e8 00 00 00 00	 call	 ?DebugLog@@YAXPADZZ	; DebugLog
  003bd	8b bd 5c ff ff
	ff		 mov	 edi, DWORD PTR _obj$GSCopy$1$[ebp]
  003c3	83 c4 04	 add	 esp, 4
$LN16@JoinChanne:

; 825  : 	}
; 826  : 	
; 827  : 	CheckChannelListInfo( nId);

  003c6	53		 push	 ebx
  003c7	8b ce		 mov	 ecx, esi
  003c9	e8 00 00 00 00	 call	 ?CheckChannelListInfo@CNewPVP@@AAEXH@Z ; CNewPVP::CheckChannelListInfo

; 828  :     BroadcastDuelInfo(nId, 2);

  003ce	6a 02		 push	 2
  003d0	53		 push	 ebx
  003d1	8b ce		 mov	 ecx, esi
  003d3	e8 00 00 00 00	 call	 ?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastDuelInfo

; 829  :     BroadcastScore(nId, 2);

  003d8	6a 02		 push	 2
  003da	53		 push	 ebx
  003db	8b ce		 mov	 ecx, esi
  003dd	e8 00 00 00 00	 call	 ?BroadcastScore@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastScore

; 830  :     SetBuff(obj, TRUE);

  003e2	6a 01		 push	 1
  003e4	57		 push	 edi
  003e5	8b ce		 mov	 ecx, esi
  003e7	e8 00 00 00 00	 call	 ?SetBuff@CNewPVP@@QAEXAAUOBJECTSTRUCT@@H@Z ; CNewPVP::SetBuff

; 831  :     MoveGate(obj.m_Index, g_GateObserver[nId]);

  003ec	ff 34 9d 00 00
	00 00		 push	 DWORD PTR ?g_GateObserver@@3PAHA[ebx*4]
  003f3	8b ce		 mov	 ecx, esi
  003f5	ff 37		 push	 DWORD PTR [edi]
  003f7	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate
  003fc	5f		 pop	 edi
  003fd	5e		 pop	 esi

; 832  : 	return 0;

  003fe	33 c0		 xor	 eax, eax
  00400	5b		 pop	 ebx

; 833  : }

  00401	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00404	33 cd		 xor	 ecx, ebp
  00406	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0040b	8b e5		 mov	 esp, ebp
  0040d	5d		 pop	 ebp
  0040e	c2 08 00	 ret	 8
$LN11@JoinChanne:

; 768  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "ENEWPVP::E_INVALID_STATUS","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_STATUS; }

  00411	68 00 03 00 00	 push	 768			; 00000300H
  00416	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00420	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@
  00425	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  0042a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0042f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00435	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  0043a	eb 29		 jmp	 SHORT $LN94@JoinChanne
$LN9@JoinChanne:

; 767  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","ENEWPVP::E_INVALID_CHANNELID","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_CHANNELID; }

  0043c	68 ff 02 00 00	 push	 767			; 000002ffH
  00441	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00446	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0044b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CPLOFFJH@ENEWPVP?3?3E_INVALID_CHANNELID?$AA@
  00450	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  00455	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0045a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00460	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
$LN94@JoinChanne:

; 833  : }

  00465	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00468	83 c4 18	 add	 esp, 24			; 00000018H
  0046b	33 cd		 xor	 ecx, ebp
  0046d	5f		 pop	 edi
  0046e	5e		 pop	 esi
  0046f	5b		 pop	 ebx
  00470	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00475	8b e5		 mov	 esp, ebp
  00477	5d		 pop	 ebp
  00478	c2 08 00	 ret	 8
?JoinChannel@CNewPVP@@QAEHHAAUOBJECTSTRUCT@@@Z ENDP	; CNewPVP::JoinChannel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?SendChannelList@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_npc$ = 8						; size = 4
_obj$ = 12						; size = 4
?SendChannelList@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z PROC	; CNewPVP::SendChannelList, COMDAT
; _this$ = ecx

; 639  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 640  : 	DataSend(obj.m_Index, (LPBYTE)&m_DuelChannelList, m_DuelChannelList.h.size);

  00003	0f b6 41 09	 movzx	 eax, BYTE PTR [ecx+9]
  00007	50		 push	 eax
  00008	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0000b	50		 push	 eax
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _obj$[ebp]
  0000f	ff 30		 push	 DWORD PTR [eax]
  00011	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 641  : 	return FALSE;

  00019	33 c0		 xor	 eax, eax

; 642  : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?SendChannelList@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z ENDP	; CNewPVP::SendChannelList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?CheckScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_responsor$1$ = -4					; size = 4
_obj$ = 8						; size = 4
_target$ = 12						; size = 4
?CheckScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0@Z PROC	; CNewPVP::CheckScore, COMDAT
; _this$ = ecx

; 542  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 543  : 	int nId = GetDuelChannelId(obj.m_Index);

  00004	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	ff 30		 push	 DWORD PTR [eax]
  0000d	e8 00 00 00 00	 call	 ?GetDuelChannelId@CNewPVP@@AAEHH@Z ; CNewPVP::GetDuelChannelId
  00012	8b f8		 mov	 edi, eax

; 544  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00014	83 ff 03	 cmp	 edi, 3
  00017	0f 87 2c 01 00
	00		 ja	 $LN3@CheckScore

; 545  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ) { LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "0","NULL",__FILE__, __LINE__); return; }

  0001d	6b cf 2c	 imul	 ecx, edi, 44
  00020	8a 84 31 86 00
	00 00		 mov	 al, BYTE PTR [ecx+esi+134]
  00027	3c 02		 cmp	 al, 2
  00029	0f 82 eb 00 00
	00		 jb	 $LN5@CheckScore
  0002f	3c 04		 cmp	 al, 4
  00031	0f 87 e3 00 00
	00		 ja	 $LN5@CheckScore

; 546  : 
; 547  : 	LPDUEL_CHANNEL lpChannel = &m_DuelChannel[nId];
; 548  : 
; 549  : 	OBJECTSTRUCT & requester = gObj[lpChannel->nIndex1];
; 550  : 	OBJECTSTRUCT & responsor = gObj[lpChannel->nIndex2];
; 551  : 
; 552  : 	if( obj.m_btDuelScore >= 10 )

  00037	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  0003a	53		 push	 ebx
  0003b	69 5c 31 68 40
	27 00 00	 imul	 ebx, DWORD PTR [ecx+esi+104], 10048
  00043	69 4c 31 6c 40
	27 00 00	 imul	 ecx, DWORD PTR [ecx+esi+108], 10048
  0004b	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00051	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	80 b8 54 12 00
	00 0a		 cmp	 BYTE PTR [eax+4692], 10	; 0000000aH
  0005e	89 4d fc	 mov	 DWORD PTR _responsor$1$[ebp], ecx

; 553  :     {
; 554  : 		BroadcastDuelInfo( nId, 2);

  00061	8b ce		 mov	 ecx, esi
  00063	0f 82 92 00 00
	00		 jb	 $LN6@CheckScore
  00069	6a 02		 push	 2
  0006b	57		 push	 edi
  0006c	e8 00 00 00 00	 call	 ?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastDuelInfo

; 555  :         BroadcastScore( nId, 3);

  00071	6a 03		 push	 3
  00073	57		 push	 edi
  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?BroadcastScore@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastScore

; 556  :         SetStatus(DC_RESERVEDEND, nId, requester, responsor);

  0007b	ff 75 fc	 push	 DWORD PTR _responsor$1$[ebp]
  0007e	8b ce		 mov	 ecx, esi
  00080	53		 push	 ebx
  00081	57		 push	 edi
  00082	6a 05		 push	 5
  00084	e8 00 00 00 00	 call	 ?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::SetStatus

; 557  :         BroadcastResult( nId, 3, obj);

  00089	ff 75 08	 push	 DWORD PTR _obj$[ebp]
  0008c	8b ce		 mov	 ecx, esi
  0008e	6a 03		 push	 3
  00090	57		 push	 edi
  00091	e8 00 00 00 00	 call	 ?BroadcastResult@CNewPVP@@AAEXHEAAUOBJECTSTRUCT@@@Z ; CNewPVP::BroadcastResult

; 558  : 
; 559  : 		gObjAddBuffEffect(&obj, 103);

  00096	8b 7d 08	 mov	 edi, DWORD PTR _obj$[ebp]
  00099	6a 67		 push	 103			; 00000067H
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjAddBuffEffect

; 560  : 
; 561  :         gDarkSpirit[requester.m_Index].ReSetTarget(responsor.m_Index);

  000a1	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a3	83 c4 08	 add	 esp, 8
  000a6	8b 75 fc	 mov	 esi, DWORD PTR _responsor$1$[ebp]
  000a9	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	c1 e1 04	 shl	 ecx, 4
  000b1	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gDarkSpirit@@3PAVCDarkSpirit@@A ; gDarkSpirit
  000b7	e8 00 00 00 00	 call	 ?ReSetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::ReSetTarget

; 562  :         gDarkSpirit[responsor.m_Index].ReSetTarget(requester.m_Index);

  000bc	8b 06		 mov	 eax, DWORD PTR [esi]
  000be	ff 33		 push	 DWORD PTR [ebx]
  000c0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c3	c1 e1 04	 shl	 ecx, 4
  000c6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gDarkSpirit@@3PAVCDarkSpirit@@A ; gDarkSpirit
  000cc	e8 00 00 00 00	 call	 ?ReSetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::ReSetTarget

; 563  :         
; 564  : 		LogAdd("[NewPVP] [%s][%s] Win Duel, Loser [%s][%s]", obj.AccountID, obj.Name, target.AccountID, target.Name);   

  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _target$[ebp]
  000d4	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000d7	50		 push	 eax
  000d8	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000db	50		 push	 eax
  000dc	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000df	50		 push	 eax
  000e0	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@FOKMMDLI@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Win?5Duel?0?5Lose@
  000e9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000ef	83 c4 14	 add	 esp, 20			; 00000014H
  000f2	5b		 pop	 ebx
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi

; 570  : }

  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
$LN6@CheckScore:

; 565  : 		return;
; 566  : 	}
; 567  : 
; 568  : 	BroadcastScore(nId, 3);

  000fb	6a 03		 push	 3
  000fd	57		 push	 edi
  000fe	e8 00 00 00 00	 call	 ?BroadcastScore@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastScore

; 569  :     SetStatus(4, nId, requester, responsor);

  00103	ff 75 fc	 push	 DWORD PTR _responsor$1$[ebp]
  00106	8b ce		 mov	 ecx, esi
  00108	53		 push	 ebx
  00109	57		 push	 edi
  0010a	6a 04		 push	 4
  0010c	e8 00 00 00 00	 call	 ?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::SetStatus
  00111	5b		 pop	 ebx
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi

; 570  : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c2 08 00	 ret	 8
$LN5@CheckScore:

; 545  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ) { LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "0","NULL",__FILE__, __LINE__); return; }

  0011a	68 21 02 00 00	 push	 545			; 00000221H
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00124	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00129	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0013e	83 c4 18	 add	 esp, 24			; 00000018H
  00141	5f		 pop	 edi
  00142	5e		 pop	 esi

; 570  : }

  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c2 08 00	 ret	 8
$LN3@CheckScore:

; 544  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){ LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return; }

  00149	68 20 02 00 00	 push	 544			; 00000220H
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0016d	83 c4 18	 add	 esp, 24			; 00000018H
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi

; 570  : }

  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c2 08 00	 ret	 8
?CheckScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0@Z ENDP	; CNewPVP::CheckScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?SetScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?SetScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z PROC		; CNewPVP::SetScore, COMDAT
; _this$ = ecx

; 533  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 534  : 	int nId = GetDuelChannelId(obj.m_Index);

  00004	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ?GetDuelChannelId@CNewPVP@@AAEHH@Z ; CNewPVP::GetDuelChannelId

; 535  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX) { LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return;	}

  00011	83 f8 03	 cmp	 eax, 3
  00014	77 4b		 ja	 SHORT $LN3@SetScore

; 536  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ) { LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "0","NULL",__FILE__, __LINE__); return; }

  00016	6b c0 2c	 imul	 eax, eax, 44
  00019	8a 84 38 86 00
	00 00		 mov	 al, BYTE PTR [eax+edi+134]
  00020	3c 02		 cmp	 al, 2
  00022	72 10		 jb	 SHORT $LN5@SetScore
  00024	3c 04		 cmp	 al, 4
  00026	77 0c		 ja	 SHORT $LN5@SetScore

; 537  :     obj.m_btDuelScore++;

  00028	fe 86 54 12 00
	00		 inc	 BYTE PTR [esi+4692]
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi

; 538  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN5@SetScore:

; 536  : 	if( !IS_START(m_DuelChannel[nId].nStatus) ) { LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)", "0","NULL",__FILE__, __LINE__); return; }

  00034	68 18 02 00 00	 push	 536			; 00000218H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@CINMDLEF@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00058	83 c4 18	 add	 esp, 24			; 00000018H
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 538  : }

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN3@SetScore:

; 535  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX) { LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","0","NULL",__FILE__, __LINE__); return;	}

  00061	68 17 02 00 00	 push	 535			; 00000217H
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00085	83 c4 18	 add	 esp, 24			; 00000018H
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi

; 538  : }

  0008a	5d		 pop	 ebp
  0008b	c2 04 00	 ret	 4
?SetScore@CNewPVP@@QAEXAAUOBJECTSTRUCT@@@Z ENDP		; CNewPVP::SetScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC		; CNewPVP::Leave, COMDAT
; _this$ = ecx

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 466  : 	int nId = GetDuelChannelId(obj.m_Index);

  00005	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	ff 36		 push	 DWORD PTR [esi]
  0000d	e8 00 00 00 00	 call	 ?GetDuelChannelId@CNewPVP@@AAEHH@Z ; CNewPVP::GetDuelChannelId
  00012	8b d8		 mov	 ebx, eax

; 467  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){	LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","ENEWPVP::E_INVALID_CHANNELID","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_CHANNELID; }

  00014	83 fb 03	 cmp	 ebx, 3
  00017	0f 87 de 00 00
	00		 ja	 $LN3@Leave

; 468  : 	if( !IS_START(m_DuelChannel[nId].nStatus ) && m_DuelChannel[nId].nStatus != DC_RESERVEDEND ){ LogAddTD("%s\t%s\t%s\t%s\t%d","IS_START(m_DuelChannel[nId].nStatus)||m_DuelChannel[nId].nStatus==DC_RESERVEDEND", "ENEWPVP::E_INVALID_STATUS","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_STATUS; }	

  0001d	6b cb 2c	 imul	 ecx, ebx, 44
  00020	8d 14 39	 lea	 edx, DWORD PTR [ecx+edi]
  00023	8a 8a 86 00 00
	00		 mov	 cl, BYTE PTR [edx+134]
  00029	80 f9 02	 cmp	 cl, 2
  0002c	72 05		 jb	 SHORT $LN5@Leave
  0002e	80 f9 04	 cmp	 cl, 4
  00031	76 38		 jbe	 SHORT $LN4@Leave
$LN5@Leave:
  00033	80 f9 05	 cmp	 cl, 5
  00036	74 33		 je	 SHORT $LN4@Leave
  00038	68 d4 01 00 00	 push	 468			; 000001d4H
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@CPAGFMCM@IS_START?$CIm_DuelChannel?$FLnId?$FN?4nSta@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0005c	83 c4 18	 add	 esp, 24			; 00000018H
  0005f	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx

; 484  : }

  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
$LN4@Leave:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  0006b	8b 8e 50 12 00
	00		 mov	 ecx, DWORD PTR [esi+4688]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 472  : 	obj.m_iDuelUserReserved = -1;

  00071	c7 86 48 12 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+4680], -1
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  0007b	85 c9		 test	 ecx, ecx
  0007d	78 49		 js	 SHORT $LN14@Leave
  0007f	33 c0		 xor	 eax, eax
  00081	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00087	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 474  : 	if( IsDuel(obj) )	lpTargetObj = (LPOBJ)&gObj[obj.m_iDuelUser];

  0008a	85 c0		 test	 eax, eax
  0008c	74 3a		 je	 SHORT $LN14@Leave
  0008e	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00094	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 475  : 
; 476  : 	if(lpTargetObj == NULL){ LogAddTD("%s\t%s\t%s\t%s\t%d","lpTargetObj","ENEWPVP::E_INVALID_INDEX","NULL", __FILE__, __LINE__); return ENEWPVP::E_INVALID_INDEX; }

  0009a	74 2c		 je	 SHORT $LN14@Leave

; 477  : 
; 478  : 	if( m_DuelChannel[nId].nStatus != DC_RESERVEDEND )

  0009c	80 ba 86 00 00
	00 05		 cmp	 BYTE PTR [edx+134], 5
  000a3	74 1a		 je	 SHORT $LN8@Leave

; 479  :     {
; 480  :         SetStatus(DC_RESERVEDEND, nId, obj, *lpTargetObj);

  000a5	50		 push	 eax
  000a6	56		 push	 esi
  000a7	53		 push	 ebx
  000a8	6a 05		 push	 5
  000aa	8b cf		 mov	 ecx, edi
  000ac	e8 00 00 00 00	 call	 ?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::SetStatus

; 481  :         BroadcastMessage( nId, 1, 1, 10);

  000b1	6a 0a		 push	 10			; 0000000aH
  000b3	6a 01		 push	 1
  000b5	6a 01		 push	 1
  000b7	53		 push	 ebx
  000b8	8b cf		 mov	 ecx, edi
  000ba	e8 00 00 00 00	 call	 ?BroadcastMessage@CNewPVP@@AAEXHEEH@Z ; CNewPVP::BroadcastMessage
$LN8@Leave:

; 482  :     }
; 483  : 	return 0;

  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	33 c0		 xor	 eax, eax
  000c3	5b		 pop	 ebx

; 484  : }

  000c4	5d		 pop	 ebp
  000c5	c2 04 00	 ret	 4
$LN14@Leave:

; 475  : 
; 476  : 	if(lpTargetObj == NULL){ LogAddTD("%s\t%s\t%s\t%s\t%d","lpTargetObj","ENEWPVP::E_INVALID_INDEX","NULL", __FILE__, __LINE__); return ENEWPVP::E_INVALID_INDEX; }

  000c8	68 dc 01 00 00	 push	 476			; 000001dcH
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EGLACHLG@ENEWPVP?3?3E_INVALID_INDEX?$AA@
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EPIOBBFH@lpTargetObj?$AA@
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
  000ef	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 484  : }

  000f7	5d		 pop	 ebp
  000f8	c2 04 00	 ret	 4
$LN3@Leave:

; 467  : 	if(nId < 0 || nId >= DUEL_CHANNEL_MAX){	LogAddTD("%s\t%s\t%s\t%s\t%d","nId>=0 && nId<DUEL_CHANNEL_MAX","ENEWPVP::E_INVALID_CHANNELID","NULL",__FILE__, __LINE__); return ENEWPVP::E_INVALID_CHANNELID; }

  000fb	68 d3 01 00 00	 push	 467			; 000001d3H
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0010a	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@CPLOFFJH@ENEWPVP?3?3E_INVALID_CHANNELID?$AA@
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@OMAPJGHA@nId?$DO?$DN0?5?$CG?$CG?5nId?$DMDUEL_CHANNEL_MAX?$AA@
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0011f	83 c4 18	 add	 esp, 24			; 00000018H
  00122	b8 18 00 00 00	 mov	 eax, 24			; 00000018H
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx

; 484  : }

  0012a	5d		 pop	 ebp
  0012b	c2 04 00	 ret	 4
?Leave@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP		; CNewPVP::Leave
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
_this$1$ = -28						; size = 4
_res$1 = -24						; size = 17
__$ArrayPad$ = -4					; size = 4
_requester$ = 8						; size = 4
_responsor$ = 12					; size = 4
_bSendPacket$ = 16					; size = 4
?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z PROC		; CNewPVP::Cancel, COMDAT
; _this$ = ecx

; 439  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b c1		 mov	 eax, ecx
  00012	53		 push	 ebx
  00013	8b 5d 08	 mov	 ebx, DWORD PTR _requester$[ebp]
  00016	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 592  : 		return ((_Nodepref)_Pnode->_Parent);

  00017	8b 90 14 01 00
	00		 mov	 edx, DWORD PTR [eax+276]
  0001d	57		 push	 edi
  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _responsor$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 439  : {

  00021	89 45 e4	 mov	 DWORD PTR _this$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2089 : 		_Nodeptr _Wherenode = this->_Myhead();	// end() if search fails

  00024	8b c2		 mov	 eax, edx
  00026	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  00029	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002d	75 16		 jne	 SHORT $LN24@Cancel
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  0002f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
$LL23@Cancel:
  00031	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2092 : 			if (_Compare(this->_Key(_Pnode), _Keyval))

  00034	7d 05		 jge	 SHORT $LN25@Cancel

; 2093 : 				_Pnode = this->_Right(_Pnode);	// descend right subtree

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 2094 : 			else

  00039	eb 04		 jmp	 SHORT $LN26@Cancel
$LN25@Cancel:

; 2095 : 				{	// _Pnode not less than _Keyval, remember it
; 2096 : 				_Wherenode = _Pnode;

  0003b	8b c6		 mov	 eax, esi

; 2097 : 				_Pnode = this->_Left(_Pnode);	// descend left subtree

  0003d	8b 36		 mov	 esi, DWORD PTR [esi]
$LN26@Cancel:

; 2090 : 
; 2091 : 		while (!this->_Isnil(_Pnode))

  0003f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00043	74 ec		 je	 SHORT $LL23@Cancel
$LN24@Cancel:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00045	3b c2		 cmp	 eax, edx

; 1487 : 		return (_Where == end()

  00047	74 07		 je	 SHORT $LN9@Cancel
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 240  : 		return (_Left < _Right);

  00049	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004b	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1487 : 		return (_Where == end()

  0004e	7d 02		 jge	 SHORT $LN153@Cancel
$LN9@Cancel:

; 43   : 		: _Ptr(_Pnode)

  00050	8b c2		 mov	 eax, edx
$LN153@Cancel:

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mytree::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		if (_Mytree::_Isnil(_Ptr))
; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))
; 63   : 			_Ptr = _Mytree::_Min(
; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else
; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))
; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 72   : 			}
; 73   : 		return (*this);
; 74   : 		}
; 75   : 
; 76   : 	_Myiter operator++(int)
; 77   : 		{	// postincrement
; 78   : 		_Myiter _Tmp = *this;
; 79   : 		++*this;
; 80   : 		return (_Tmp);
; 81   : 		}
; 82   : 
; 83   : 	_Myiter& operator--()
; 84   : 		{	// predecrement
; 85   : 		if (_Mytree::_Isnil(_Ptr))
; 86   : 			_Ptr = _Mytree::_Right(_Ptr);	// end() ==> rightmost
; 87   : 		else if (!_Mytree::_Isnil(_Mytree::_Left(_Ptr)))
; 88   : 			_Ptr = _Mytree::_Max(
; 89   : 				_Mytree::_Left(_Ptr));	// ==> largest of left subtree
; 90   : 		else
; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 94   : 				&& _Ptr == _Mytree::_Left(_Pnode))
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree
; 96   : 			if (_Mytree::_Isnil(_Ptr))
; 97   : 				;	// begin() shouldn't be decremented, don't move
; 98   : 			else
; 99   : 				_Ptr = _Pnode;	// ==> parent if not head
; 100  : 			}
; 101  : 		return (*this);
; 102  : 		}
; 103  : 
; 104  : 	_Myiter operator--(int)
; 105  : 		{	// postdecrement
; 106  : 		_Myiter _Tmp = *this;
; 107  : 		--*this;
; 108  : 		return (_Tmp);
; 109  : 		}
; 110  : 
; 111  : 	bool operator==(const _Myiter& _Right) const
; 112  : 		{	// test for iterator equality
; 113  : 		return (_Ptr == _Right._Ptr);
; 114  : 		}
; 115  : 
; 116  : 	bool operator!=(const _Myiter& _Right) const
; 117  : 		{	// test for iterator inequality
; 118  : 		return (!(*this == _Right));
; 119  : 		}
; 120  : 
; 121  : 	_Nodeptr _Mynode() const
; 122  : 		{	// return node pointer
; 123  : 		return (_Ptr);
; 124  : 		}
; 125  : 
; 126  : 	_Nodeptr _Ptr;	// pointer to node
; 127  : 	};
; 128  : 
; 129  : 	// TEMPLATE CLASS _Tree_unchecked_iterator
; 130  : template<class _Mytree>
; 131  : 	class _Tree_unchecked_iterator
; 132  : 		: public _Tree_unchecked_const_iterator<_Mytree>
; 133  : 	{	// unchecked iterator for mutable tree
; 134  : public:
; 135  : 	typedef _Tree_unchecked_iterator<_Mytree> _Myiter;
; 136  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Mybase;
; 137  : 	typedef bidirectional_iterator_tag iterator_category;
; 138  : 
; 139  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 140  : 	typedef typename _Mytree::value_type value_type;
; 141  : 	typedef typename _Mytree::difference_type difference_type;
; 142  : 	typedef typename _Mytree::pointer pointer;
; 143  : 	typedef typename _Mytree::reference reference;
; 144  : 
; 145  : 	_Tree_unchecked_iterator()
; 146  : 		{	// construct with null node
; 147  : 		}
; 148  : 
; 149  : 	_Tree_unchecked_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 150  : 		: _Mybase(_Pnode, _Plist)
; 151  : 		{	// construct with node pointer _Pnode
; 152  : 		}
; 153  : 
; 154  : 	reference operator*() const
; 155  : 		{	// return designated value
; 156  : 		return ((reference)**(_Mybase *)this);
; 157  : 		}
; 158  : 
; 159  : 	pointer operator->() const
; 160  : 		{	// return pointer to class object
; 161  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 162  : 		}
; 163  : 
; 164  : 	_Myiter& operator++()
; 165  : 		{	// preincrement
; 166  : 		++(*(_Mybase *)this);
; 167  : 		return (*this);
; 168  : 		}
; 169  : 
; 170  : 	_Myiter operator++(int)
; 171  : 		{	// postincrement
; 172  : 		_Myiter _Tmp = *this;
; 173  : 		++*this;
; 174  : 		return (_Tmp);
; 175  : 		}
; 176  : 
; 177  : 	_Myiter& operator--()
; 178  : 		{	// predecrement
; 179  : 		--(*(_Mybase *)this);
; 180  : 		return (*this);
; 181  : 		}
; 182  : 
; 183  : 	_Myiter operator--(int)
; 184  : 		{	// postdecrement
; 185  : 		_Myiter _Tmp = *this;
; 186  : 		--*this;
; 187  : 		return (_Tmp);
; 188  : 		}
; 189  : 	};
; 190  : 
; 191  : 	// TEMPLATE CLASS _Tree_const_iterator
; 192  : template<class _Mytree>
; 193  : 	class _Tree_const_iterator
; 194  : 		: public _Tree_unchecked_const_iterator<_Mytree, _Iterator_base>
; 195  : 	{	// iterator for nonmutable tree
; 196  : public:
; 197  : 	typedef _Tree_const_iterator<_Mytree> _Myiter;
; 198  : 	typedef _Tree_unchecked_const_iterator<_Mytree, _Iterator_base> _Mybase;
; 199  : 	typedef bidirectional_iterator_tag iterator_category;
; 200  : 
; 201  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 202  : 	typedef typename _Mytree::value_type value_type;
; 203  : 	typedef typename _Mytree::difference_type difference_type;
; 204  : 	typedef typename _Mytree::const_pointer pointer;
; 205  : 	typedef typename _Mytree::const_reference reference;
; 206  : 
; 207  : 	_Tree_const_iterator()
; 208  : 		: _Mybase()
; 209  : 		{	// construct with null node pointer
; 210  : 		}
; 211  : 
; 212  : 	_Tree_const_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 213  : 		: _Mybase(_Pnode, _Plist)
; 214  : 		{	// construct with node pointer _Pnode
; 215  : 		}
; 216  : 
; 217  : 	typedef _Tree_unchecked_const_iterator<_Mytree> _Unchecked_type;
; 218  : 
; 219  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 220  : 		{	// reset from unchecked iterator
; 221  : 		this->_Ptr = _Right._Ptr;
; 222  : 		return (*this);
; 223  : 		}
; 224  : 
; 225  : 	_Unchecked_type _Unchecked() const
; 226  : 		{	// make an unchecked iterator
; 227  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 228  : 		}
; 229  : 
; 230  : 	reference operator*() const
; 231  : 		{	// return designated value
; 232  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 233  : 		if (this->_Getcont() == 0
; 234  : 			|| this->_Ptr == 0
; 235  : 			|| this->_Ptr == ((_Mytree *)this->_Getcont())->_Myhead)
; 236  : 			{	// report error
; 237  : 			_DEBUG_ERROR("map/set iterator not dereferencable");
; 238  : 			_SCL_SECURE_OUT_OF_RANGE;
; 239  : 			}
; 240  : 
; 241  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 242  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 243  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 244  : 			((_Mytree *)this->_Getcont())->_Myhead);
; 245  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 246  : 
; 247  : 		return (_Mytree::_Myval(this->_Ptr));
; 248  : 		}
; 249  : 
; 250  : 	pointer operator->() const
; 251  : 		{	// return pointer to class object
; 252  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 253  : 		}
; 254  : 
; 255  : 	_Myiter& operator++()
; 256  : 		{	// preincrement
; 257  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 258  : 		if (this->_Getcont() == 0
; 259  : 			|| this->_Ptr == 0
; 260  : 			|| _Mytree::_Isnil(this->_Ptr))
; 261  : 			{	// report error
; 262  : 			_DEBUG_ERROR("map/set iterator not incrementable");
; 263  : 			_SCL_SECURE_OUT_OF_RANGE;
; 264  : 			}
; 265  : 
; 266  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 267  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 268  : 		_SCL_SECURE_VALIDATE_RANGE(!_Mytree::_Isnil(this->_Ptr));
; 269  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 270  : 
; 271  : 		++(*(_Mybase *)this);
; 272  : 		return (*this);
; 273  : 		}
; 274  : 
; 275  : 	_Myiter operator++(int)
; 276  : 		{	// postincrement
; 277  : 		_Myiter _Tmp = *this;
; 278  : 		++*this;
; 279  : 		return (_Tmp);
; 280  : 		}
; 281  : 
; 282  : 	_Myiter& operator--()
; 283  : 		{	// predecrement
; 284  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 285  : 		if (this->_Getcont() == 0
; 286  : 			|| this->_Ptr == 0)
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 289  : 			_SCL_SECURE_OUT_OF_RANGE;
; 290  : 			}
; 291  : 
; 292  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 293  : 		--(*(_Mybase *)this);
; 294  : 		if (_Ptrsav == this->_Ptr)
; 295  : 			{	// report error
; 296  : 			_DEBUG_ERROR("map/set iterator not decrementable");
; 297  : 			_SCL_SECURE_OUT_OF_RANGE;
; 298  : 			}
; 299  : 
; 300  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 301  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 302  : 
; 303  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 304  : 		--(*(_Mybase *)this);
; 305  : 		_SCL_SECURE_VALIDATE(_Ptrsav != this->_Ptr);
; 306  : 
; 307  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 308  : 		--(*(_Mybase *)this);
; 309  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 310  : 
; 311  : 		return (*this);
; 312  : 		}
; 313  : 
; 314  : 	_Myiter operator--(int)
; 315  : 		{	// postdecrement
; 316  : 		_Myiter _Tmp = *this;
; 317  : 		--*this;
; 318  : 		return (_Tmp);
; 319  : 		}
; 320  : 
; 321  : 	bool operator==(const _Myiter& _Right) const
; 322  : 		{	// test for iterator equality
; 323  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 324  : 		if (this->_Getcont() != _Right._Getcont())
; 325  : 			{	// report error
; 326  : 			_DEBUG_ERROR("map/set iterators incompatible");
; 327  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 328  : 			}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 332  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 333  : 
; 334  : 		return (this->_Ptr == _Right._Ptr);

  00052	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00055	3b 81 14 01 00
	00		 cmp	 eax, DWORD PTR [ecx+276]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 441  : 	if(!(iter!=m_Waiting.end())){ LogAddTD("%s\t%s\t%s\t%s\t%d","iter!=m_Waiting.end()","0","NULL", __FILE__,  __LINE__); return; }

  0005b	75 3a		 jne	 SHORT $LN2@Cancel
  0005d	68 b9 01 00 00	 push	 441			; 000001b9H
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_01GBGANLPD@0?$AA@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NENFJOPG@iter?$CB?$DNm_Waiting?4end?$CI?$CJ?$AA@
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00081	83 c4 18	 add	 esp, 24			; 00000018H
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 460  :     }
; 461  : }

  00087	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008a	33 cd		 xor	 ecx, ebp
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Cancel:

; 442  : 
; 443  : 	_tagWaiting & waiting = iter->second;
; 444  : 	waiting.bExpired = 1;
; 445  : 
; 446  : 	SetDuelStatus(requester, responsor, DC_IDLE);

  00097	6a 00		 push	 0
  00099	57		 push	 edi
  0009a	53		 push	 ebx
  0009b	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  000a2	e8 00 00 00 00	 call	 ?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::SetDuelStatus

; 447  : 
; 448  : 	if( bSendPacket == TRUE )

  000a7	83 7d 10 01	 cmp	 DWORD PTR _bSendPacket$[ebp], 1
  000ab	75 64		 jne	 SHORT $LN5@Cancel

; 449  :     {
; 450  : 		PMSG_ANS_DUEL_INVITE res = {0};
; 451  : 		res.h.c = PMHC_BYTE;
; 452  : 		res.h.size = sizeof(PMSG_ANS_DUEL_INVITE);
; 453  : 		res.h.headcode = 0xAA;
; 454  : 		res.h.subcode = 0x01;
; 455  : 		memcpy(res.szName, responsor.Name, MAX_IDSTRING);

  000ad	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	0f 11 45 e9	 movups	 XMMWORD PTR _res$1[ebp+1], xmm0

; 456  : 		res.nResult = 0x0F;
; 457  :       
; 458  : 		if( gObjIsConnected(&requester) )	DataSend(requester.m_Index, (LPBYTE)&res,res.h.size);

  000b8	53		 push	 ebx
  000b9	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  000be	c7 45 e8 c1 11
	aa 01		 mov	 DWORD PTR _res$1[ebp], 27922881 ; 01aa11c1H
  000c5	66 0f d6 45 ef	 movq	 QWORD PTR _res$1[ebp+7], xmm0
  000ca	66 89 45 f7	 mov	 WORD PTR _res$1[ebp+15], ax
  000ce	c6 45 ec 0f	 mov	 BYTE PTR _res$1[ebp+4], 15 ; 0000000fH
  000d2	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000d7	83 c4 04	 add	 esp, 4
  000da	85 c0		 test	 eax, eax
  000dc	74 13		 je	 SHORT $LN4@Cancel
  000de	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$1[ebp+1]
  000e2	50		 push	 eax
  000e3	8d 45 e8	 lea	 eax, DWORD PTR _res$1[ebp]
  000e6	50		 push	 eax
  000e7	ff 33		 push	 DWORD PTR [ebx]
  000e9	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Cancel:

; 459  : 		if( gObjIsConnected(&responsor) )	DataSend(responsor.m_Index, (LPBYTE)&res, res.h.size);

  000f1	57		 push	 edi
  000f2	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  000f7	83 c4 04	 add	 esp, 4
  000fa	85 c0		 test	 eax, eax
  000fc	74 13		 je	 SHORT $LN5@Cancel
  000fe	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$1[ebp+1]
  00102	50		 push	 eax
  00103	8d 45 e8	 lea	 eax, DWORD PTR _res$1[ebp]
  00106	50		 push	 eax
  00107	ff 37		 push	 DWORD PTR [edi]
  00109	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@Cancel:

; 460  :     }
; 461  : }

  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi
  00116	33 cd		 xor	 ecx, ebp
  00118	5b		 pop	 ebx
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 0c 00	 ret	 12			; 0000000cH
?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ENDP		; CNewPVP::Cancel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Join@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_responsor$GSCopy$1$ = -40				; size = 4
_this$GSCopy$1$ = -36					; size = 4
_lpData$1$ = -32					; size = 4
_iter$ = -32						; size = 4
_nId$1$ = -28						; size = 4
_res$ = -24						; size = 17
__$ArrayPad$ = -4					; size = 4
_requester$ = 8						; size = 4
_responsor$ = 12					; size = 4
?Join@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z PROC		; CNewPVP::Join, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _requester$[ebp]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _responsor$[ebp]
  0001a	89 7d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  0001d	8b 93 50 12 00
	00		 mov	 edx, DWORD PTR [ebx+4688]
  00023	89 4d d8	 mov	 DWORD PTR _responsor$GSCopy$1$[ebp], ecx
  00026	85 d2		 test	 edx, edx
  00028	78 26		 js	 SHORT $LN2@Join
  0002a	33 c0		 xor	 eax, eax
  0002c	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00032	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 369  : 	if( IsDuel(requester) ) return ENEWPVP::E_ALREADY_DUELLING_1;

  00035	85 c0		 test	 eax, eax
  00037	74 17		 je	 SHORT $LN2@Join
  00039	5f		 pop	 edi
  0003a	b8 17 00 00 00	 mov	 eax, 23			; 00000017H
  0003f	5b		 pop	 ebx

; 435  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@Join:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 283  : 		return CHECK_LIMIT(obj.m_iDuelUserReserved, OBJMAX);

  00050	8b 91 48 12 00
	00		 mov	 edx, DWORD PTR [ecx+4680]
  00056	85 d2		 test	 edx, edx
  00058	78 26		 js	 SHORT $LN3@Join
  0005a	33 c0		 xor	 eax, eax
  0005c	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00062	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 370  : 	if( IsDuelReserved(responsor) ) return ENEWPVP::E_ALREADY_DUELRESERVED_1;

  00065	85 c0		 test	 eax, eax
  00067	74 17		 je	 SHORT $LN3@Join
  00069	5f		 pop	 edi
  0006a	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0006f	5b		 pop	 ebx

; 435  : }

  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 08 00	 ret	 8
$LN3@Join:

; 371  : 	if( requester.m_iDuelUserReserved != responsor.m_Index ) return ENEWPVP::E_INVITE_MYSELF;

  00080	8b 83 48 12 00
	00		 mov	 eax, DWORD PTR [ebx+4680]
  00086	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00088	74 17		 je	 SHORT $LN4@Join
  0008a	5f		 pop	 edi
  0008b	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00090	5b		 pop	 ebx

; 435  : }

  00091	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00094	33 cd		 xor	 ecx, ebp
  00096	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8
$LN4@Join:
  000a1	56		 push	 esi

; 372  : 
; 373  : 	std::map<int, _tagWaiting>::iterator iter = m_Waiting.find(requester.m_Index); 

  000a2	53		 push	 ebx
  000a3	8d 45 e0	 lea	 eax, DWORD PTR _iter$[ebp]
  000a6	50		 push	 eax
  000a7	8d 8f 14 01 00
	00		 lea	 ecx, DWORD PTR [edi+276]
  000ad	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@ABH@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::find
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  000b2	8b 45 e0	 mov	 eax, DWORD PTR _iter$[ebp]
  000b5	3b 87 14 01 00
	00		 cmp	 eax, DWORD PTR [edi+276]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 374  : 	if(!(iter!=m_Waiting.end())){ LogAddTD("%s\t%s\t%s\t%s\t%d","iter!=m_Waiting.end()","ENEWPVP::E_NOT_EXIST_USER","NULL", __FILE__,  __LINE__); return ENEWPVP::E_NOT_EXIST_USER; }

  000bb	75 3f		 jne	 SHORT $LN5@Join
  000bd	68 76 01 00 00	 push	 374			; 00000176H
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@MOPMHAKE@ENEWPVP?3?3E_NOT_EXIST_USER?$AA@
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NENFJOPG@iter?$CB?$DNm_Waiting?4end?$CI?$CJ?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000e1	83 c4 18	 add	 esp, 24			; 00000018H
  000e4	b8 1a 00 00 00	 mov	 eax, 26			; 0000001aH
  000e9	5e		 pop	 esi
  000ea	5f		 pop	 edi
  000eb	5b		 pop	 ebx

; 435  : }

  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 08 00	 ret	 8
$LN5@Join:

; 375  : 
; 376  : 	_tagWaiting & waiting = iter->second;
; 377  : 	waiting.bExpired = 1;
; 378  : 
; 379  : 	int	nId = GetDuelChannelId();

  000fc	8b cf		 mov	 ecx, edi
  000fe	c7 40 1c 01 00
	00 00		 mov	 DWORD PTR [eax+28], 1
  00105	e8 00 00 00 00	 call	 ?GetDuelChannelId@CNewPVP@@AAEHXZ ; CNewPVP::GetDuelChannelId
  0010a	8b f0		 mov	 esi, eax
  0010c	89 75 e4	 mov	 DWORD PTR _nId$1$[ebp], esi

; 380  : 	if( nId < 0 || nId >= DUEL_CHANNEL_MAX ) return ENEWPVP::E_DUEL_MAX;

  0010f	83 fe 03	 cmp	 esi, 3
  00112	0f 87 42 02 00
	00		 ja	 $LN7@Join

; 381  : 
; 382  : 	if( m_DuelChannel[nId].nStatus != DC_IDLE ){ LogAddTD(  "%s\t%s\t%s\t%s\t%d","m_DuelChannel[nId].nStatus==DC_IDLE","ENEWPVP::E_INVALID_STATUS","NULL", __FILE__, __LINE__); return ENEWPVP::E_INVALID_STATUS; }

  00118	6b ce 2c	 imul	 ecx, esi, 44
  0011b	80 bc 39 86 00
	00 00 00	 cmp	 BYTE PTR [ecx+edi+134], 0
  00123	74 3f		 je	 SHORT $LN8@Join
  00125	68 7e 01 00 00	 push	 382			; 0000017eH
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PKKMGGKN@ENEWPVP?3?3E_INVALID_STATUS?$AA@
  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LJCBPGFB@m_DuelChannel?$FLnId?$FN?4nStatus?$DN?$DNDC_I@
  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00149	83 c4 18	 add	 esp, 24			; 00000018H
  0014c	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00151	5e		 pop	 esi
  00152	5f		 pop	 edi
  00153	5b		 pop	 ebx

; 435  : }

  00154	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00157	33 cd		 xor	 ecx, ebp
  00159	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 08 00	 ret	 8
$LN8@Join:

; 383  : 
; 384  : 	MOVE_COMMAND_DATA * lpData = gMoveCommand.GetMoveCommandData(42);	

  00164	6a 2a		 push	 42			; 0000002aH
  00166	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  0016b	e8 00 00 00 00	 call	 ?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z ; CMoveCommand::GetMoveCommandData
  00170	89 45 e0	 mov	 DWORD PTR _lpData$1$[ebp], eax

; 385  : 	if( lpData == NULL ){ LogAddTD("%s\t%s\t%s\t%s\t%d","lpData","ENEWPVP::E_NOT_FOUND_MOVEREQUESTDATA","NULL",__FILE__, __LINE__); return ENEWPVP::E_NOT_FOUND_MOVEREQUESTDATA; }

  00173	85 c0		 test	 eax, eax
  00175	75 3f		 jne	 SHORT $LN9@Join
  00177	68 81 01 00 00	 push	 385			; 00000181H
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00181	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  00186	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DMFJILEL@ENEWPVP?3?3E_NOT_FOUND_MOVEREQUEST@
  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_06CEFAPPFE@lpData?$AA@
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0019b	83 c4 18	 add	 esp, 24			; 00000018H
  0019e	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  001a3	5e		 pop	 esi
  001a4	5f		 pop	 edi
  001a5	5b		 pop	 ebx

; 435  : }

  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a9	33 cd		 xor	 ecx, ebp
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c2 08 00	 ret	 8
$LN9@Join:

; 386  : 
; 387  : 	if( !CheckLimitLevel(requester.m_Index, g_GateRequester[nId]) )	return ENEWPVP::E_LIMIT_LEVEL;

  001b6	ff 34 b5 00 00
	00 00		 push	 DWORD PTR ?g_GateRequester@@3PAHA[esi*4]
  001bd	8b cf		 mov	 ecx, edi
  001bf	ff 33		 push	 DWORD PTR [ebx]
  001c1	e8 00 00 00 00	 call	 ?CheckLimitLevel@CNewPVP@@AAEHHH@Z ; CNewPVP::CheckLimitLevel
  001c6	85 c0		 test	 eax, eax
  001c8	74 17		 je	 SHORT $LN84@Join

; 388  : 	if( !CheckLimitLevel(responsor.m_Index, g_GateResponsor[nId]) ) return ENEWPVP::E_LIMIT_LEVEL;

  001ca	ff 34 b5 00 00
	00 00		 push	 DWORD PTR ?g_GateResponsor@@3PAHA[esi*4]
  001d1	8b 75 d8	 mov	 esi, DWORD PTR _responsor$GSCopy$1$[ebp]
  001d4	8b cf		 mov	 ecx, edi
  001d6	ff 36		 push	 DWORD PTR [esi]
  001d8	e8 00 00 00 00	 call	 ?CheckLimitLevel@CNewPVP@@AAEHHH@Z ; CNewPVP::CheckLimitLevel
  001dd	85 c0		 test	 eax, eax
  001df	75 18		 jne	 SHORT $LN11@Join
$LN84@Join:
  001e1	5e		 pop	 esi
  001e2	5f		 pop	 edi
  001e3	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  001e8	5b		 pop	 ebx

; 435  : }

  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	33 cd		 xor	 ecx, ebp
  001ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f3	8b e5		 mov	 esp, ebp
  001f5	5d		 pop	 ebp
  001f6	c2 08 00	 ret	 8
$LN11@Join:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  001f9	80 bb 23 01 00
	00 3f		 cmp	 BYTE PTR [ebx+291], 63	; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 390  : 	if( !IsVulcanusMap(requester.MapNumber) )

  00200	74 26		 je	 SHORT $LN14@Join

; 391  : 	{
; 392  : 		if( requester.Money - lpData->NeedZen >= 0 )

  00202	8b 4d e0	 mov	 ecx, DWORD PTR _lpData$1$[ebp]
  00205	8b 83 cc 00 00
	00		 mov	 eax, DWORD PTR [ebx+204]
  0020b	2b 81 04 02 00
	00		 sub	 eax, DWORD PTR [ecx+516]
  00211	0f 88 2b 01 00
	00		 js	 $LN16@Join

; 393  : 		{
; 394  : 			requester.Money -= lpData->NeedZen;
; 395  : 			GCMoneySend(requester.m_Index, requester.Money);

  00217	50		 push	 eax
  00218	ff 33		 push	 DWORD PTR [ebx]
  0021a	89 83 cc 00 00
	00		 mov	 DWORD PTR [ebx+204], eax
  00220	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00225	83 c4 08	 add	 esp, 8
$LN14@Join:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  00228	80 be 23 01 00
	00 3f		 cmp	 BYTE PTR [esi+291], 63	; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 400  : 	if( !IsVulcanusMap(responsor.MapNumber) )

  0022f	74 26		 je	 SHORT $LN17@Join

; 401  : 	{
; 402  : 		if( responsor.Money - lpData->NeedZen >= 0 )

  00231	8b 4d e0	 mov	 ecx, DWORD PTR _lpData$1$[ebp]
  00234	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  0023a	2b 81 04 02 00
	00		 sub	 eax, DWORD PTR [ecx+516]
  00240	0f 88 fc 00 00
	00		 js	 $LN16@Join

; 403  : 		{
; 404  : 			responsor.Money -= lpData->NeedZen;
; 405  : 			GCMoneySend(responsor.m_Index, responsor.Money);

  00246	50		 push	 eax
  00247	ff 36		 push	 DWORD PTR [esi]
  00249	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  0024f	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  00254	83 c4 08	 add	 esp, 8
$LN17@Join:

; 408  : 	}
; 409  : 
; 410  : 	SetStatus(2, nId, requester, responsor);

  00257	56		 push	 esi
  00258	53		 push	 ebx
  00259	ff 75 e4	 push	 DWORD PTR _nId$1$[ebp]
  0025c	8b cf		 mov	 ecx, edi
  0025e	6a 02		 push	 2
  00260	e8 00 00 00 00	 call	 ?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::SetStatus

; 411  : 
; 412  : 	PMSG_ANS_DUEL_INVITE res = {0};
; 413  : 	res.h.c = PMHC_BYTE;
; 414  : 	res.h.size = sizeof(PMSG_ANS_DUEL_INVITE);
; 415  : 	res.h.headcode = 0xAA;
; 416  : 	res.h.subcode = 0x01;
; 417  : 	res.nResult = 0x00;
; 418  : 	memcpy(res.szName, responsor.Name, MAX_IDSTRING);
; 419  : 
; 420  : 	res.NumberH = HIBYTE(requester.m_Index);

  00265	0f b6 43 01	 movzx	 eax, BYTE PTR [ebx+1]

; 421  : 	res.NumberL = LOBYTE(requester.m_Index);
; 422  : 	memcpy(res.szName, requester.Name, MAX_IDSTRING);

  00269	8d 7b 5d	 lea	 edi, DWORD PTR [ebx+93]
  0026c	0f 57 c0	 xorps	 xmm0, xmm0
  0026f	0f 11 45 e9	 movups	 XMMWORD PTR _res$[ebp+1], xmm0
  00273	88 45 ed	 mov	 BYTE PTR _res$[ebp+5], al
  00276	0f b6 03	 movzx	 eax, BYTE PTR [ebx]
  00279	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  0027d	88 45 ee	 mov	 BYTE PTR _res$[ebp+6], al
  00280	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00284	66 89 45 f7	 mov	 WORD PTR _res$[ebp+15], ax

; 423  : 	DataSend(responsor.m_Index, (LPBYTE)&res,res.h.size);

  00288	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  0028b	6a 11		 push	 17			; 00000011H
  0028d	50		 push	 eax
  0028e	ff 36		 push	 DWORD PTR [esi]
  00290	c7 45 e8 c1 11
	aa 01		 mov	 DWORD PTR _res$[ebp], 27922881 ; 01aa11c1H
  00297	c6 45 ec 00	 mov	 BYTE PTR _res$[ebp+4], 0
  0029b	66 0f d6 45 ef	 movq	 QWORD PTR _res$[ebp+7], xmm0
  002a0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 424  : 
; 425  : 	res.NumberH = HIBYTE(responsor.m_Index);

  002a5	0f b6 46 01	 movzx	 eax, BYTE PTR [esi+1]

; 426  : 	res.NumberL = LOBYTE(responsor.m_Index);
; 427  : 	memcpy(res.szName, responsor.Name, MAX_IDSTRING);

  002a9	f3 0f 7e 46 5d	 movq	 xmm0, QWORD PTR [esi+93]
  002ae	88 45 ed	 mov	 BYTE PTR _res$[ebp+5], al
  002b1	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  002b4	83 c6 5d	 add	 esi, 93			; 0000005dH
  002b7	88 45 ee	 mov	 BYTE PTR _res$[ebp+6], al
  002ba	66 0f d6 45 ef	 movq	 QWORD PTR _res$[ebp+7], xmm0
  002bf	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  002c3	66 89 45 f7	 mov	 WORD PTR _res$[ebp+15], ax

; 428  : 	DataSend(requester.m_Index, (LPBYTE)&res, res.h.size);

  002c7	0f b6 45 e9	 movzx	 eax, BYTE PTR _res$[ebp+1]
  002cb	50		 push	 eax
  002cc	8d 45 e8	 lea	 eax, DWORD PTR _res$[ebp]
  002cf	50		 push	 eax
  002d0	ff 33		 push	 DWORD PTR [ebx]
  002d2	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 429  : 	
; 430  : 	BroadcastScore(nId, 1);

  002d7	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002da	83 c4 18	 add	 esp, 24			; 00000018H
  002dd	6a 01		 push	 1
  002df	ff 75 e4	 push	 DWORD PTR _nId$1$[ebp]
  002e2	e8 00 00 00 00	 call	 ?BroadcastScore@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastScore

; 431  : 	MoveGate(requester.m_Index, g_GateRequester[nId]);

  002e7	8b 45 e4	 mov	 eax, DWORD PTR _nId$1$[ebp]
  002ea	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002ed	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?g_GateRequester@@3PAHA[eax*4]
  002f4	ff 33		 push	 DWORD PTR [ebx]
  002f6	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate

; 432  : 	MoveGate(responsor.m_Index, g_GateResponsor[nId]);

  002fb	8b 45 e4	 mov	 eax, DWORD PTR _nId$1$[ebp]
  002fe	8b 4d dc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00301	ff 34 85 00 00
	00 00		 push	 DWORD PTR ?g_GateResponsor@@3PAHA[eax*4]
  00308	8b 45 d8	 mov	 eax, DWORD PTR _responsor$GSCopy$1$[ebp]
  0030b	ff 30		 push	 DWORD PTR [eax]
  0030d	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate

; 433  : 	LogAddTD("[NewPVP] [%s][%s] Duel Started [%s][%s]",responsor.AccountID,responsor.Name,requester.AccountID, requester.Name);

  00312	57		 push	 edi
  00313	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00316	50		 push	 eax
  00317	8b 45 d8	 mov	 eax, DWORD PTR _responsor$GSCopy$1$[ebp]
  0031a	56		 push	 esi
  0031b	83 c0 52	 add	 eax, 82			; 00000052H
  0031e	50		 push	 eax
  0031f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@IAEKOLGJ@?$FLNewPVP?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Duel?5Started?5?$FL@
  00324	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0032a	83 c4 14	 add	 esp, 20			; 00000014H

; 434  : 	return 0;

  0032d	33 c0		 xor	 eax, eax
  0032f	5e		 pop	 esi
  00330	5f		 pop	 edi
  00331	5b		 pop	 ebx

; 435  : }

  00332	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00335	33 cd		 xor	 ecx, ebp
  00337	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c2 08 00	 ret	 8
$LN16@Join:
  00342	5e		 pop	 esi
  00343	5f		 pop	 edi

; 406  : 		}
; 407  : 		else return ENEWPVP::E_NOT_ENOUGH_MONEY;

  00344	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  00349	5b		 pop	 ebx

; 435  : }

  0034a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0034d	33 cd		 xor	 ecx, ebp
  0034f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00354	8b e5		 mov	 esp, ebp
  00356	5d		 pop	 ebp
  00357	c2 08 00	 ret	 8
$LN7@Join:
  0035a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0035d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00362	5e		 pop	 esi
  00363	5f		 pop	 edi
  00364	33 cd		 xor	 ecx, ebp
  00366	5b		 pop	 ebx
  00367	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036c	8b e5		 mov	 esp, ebp
  0036e	5d		 pop	 ebp
  0036f	c2 08 00	 ret	 8
?Join@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z ENDP		; CNewPVP::Join
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Reserve@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
$T1 = -60						; size = 20
_waiting$ = -36						; size = 16
_pair$ = -28						; size = 8
_req$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_requester$ = 8						; size = 4
_responsor$ = 12					; size = 4
?Reserve@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z PROC		; CNewPVP::Reserve, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 0c	 mov	 esi, DWORD PTR _responsor$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _requester$[ebp]

; 322  : 	int nRet = GetDuelStatus(requester);

  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 ?GetDuelStatus@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::GetDuelStatus

; 323  : 	if(nRet)	return nRet;

  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 01 00
	00		 jne	 $LN1@Reserve

; 324  : 
; 325  : 	nRet = GetDuelStatusByResponsor(requester);

  00029	57		 push	 edi
  0002a	8b cb		 mov	 ecx, ebx
  0002c	e8 00 00 00 00	 call	 ?GetDuelStatusByResponsor@CNewPVP@@AAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::GetDuelStatusByResponsor

; 326  : 	if(nRet)	return nRet;

  00031	85 c0		 test	 eax, eax
  00033	0f 85 b8 01 00
	00		 jne	 $LN1@Reserve

; 327  : 
; 328  : 	MOVE_COMMAND_DATA * lpData = gMoveCommand.GetMoveCommandData(42);

  00039	6a 2a		 push	 42			; 0000002aH
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00040	e8 00 00 00 00	 call	 ?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z ; CMoveCommand::GetMoveCommandData
  00045	8b c8		 mov	 ecx, eax

; 329  : 	if(lpData == NULL){ LogAddTD("%s\t%s\t%s\t%s\t%d","lpData","ENEWPVP::E_NOT_FOUND_MOVEREQUESTDATA","NULL",__FILE__, __LINE__); return ENEWPVP::E_NOT_FOUND_MOVEREQUESTDATA; }

  00047	85 c9		 test	 ecx, ecx
  00049	75 3f		 jne	 SHORT $LN4@Reserve
  0004b	68 49 01 00 00	 push	 329			; 00000149H
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@DMFJILEL@ENEWPVP?3?3E_NOT_FOUND_MOVEREQUEST@
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_06CEFAPPFE@lpData?$AA@
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006f	83 c4 18	 add	 esp, 24			; 00000018H
  00072	b8 1d 00 00 00	 mov	 eax, 29			; 0000001dH
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 364  : }

  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 08 00	 ret	 8
$LN4@Reserve:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  0008a	80 bf 23 01 00
	00 3f		 cmp	 BYTE PTR [edi+291], 63	; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 331  : 	if( !IsVulcanusMap(requester.MapNumber) )

  00091	74 26		 je	 SHORT $LN6@Reserve

; 332  : 	{
; 333  : 		if(IsVulcanusMap(requester.MapNumber) || requester.Money - lpData->NeedZen < 0)	return ENEWPVP::E_NOT_ENOUGH_MONEY;

  00093	8b 87 cc 00 00
	00		 mov	 eax, DWORD PTR [edi+204]
  00099	2b 81 04 02 00
	00		 sub	 eax, DWORD PTR [ecx+516]
  0009f	79 18		 jns	 SHORT $LN6@Reserve
$LN49@Reserve:
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	b8 1e 00 00 00	 mov	 eax, 30			; 0000001eH
  000a8	5b		 pop	 ebx

; 364  : }

  000a9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ac	33 cd		 xor	 ecx, ebp
  000ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
$LN6@Reserve:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  000b9	80 be 23 01 00
	00 3f		 cmp	 BYTE PTR [esi+291], 63	; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 335  : 	if( !IsVulcanusMap(responsor.MapNumber) )

  000c0	74 0e		 je	 SHORT $LN9@Reserve

; 336  : 	{
; 337  : 		if(IsVulcanusMap(responsor.MapNumber) || responsor.Money - lpData->NeedZen < 0)	return ENEWPVP::E_NOT_ENOUGH_MONEY;

  000c2	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  000c8	2b 81 04 02 00
	00		 sub	 eax, DWORD PTR [ecx+516]
  000ce	78 d1		 js	 SHORT $LN49@Reserve
$LN9@Reserve:

; 338  : 	}
; 339  : 
; 340  : 	if( !CheckLimitLevel(requester.m_Index,g_GateRequester[0]) )	return ENEWPVP::E_LIMIT_LEVEL;

  000d0	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_GateRequester@@3PAHA
  000d6	8b cb		 mov	 ecx, ebx
  000d8	ff 37		 push	 DWORD PTR [edi]
  000da	e8 00 00 00 00	 call	 ?CheckLimitLevel@CNewPVP@@AAEHHH@Z ; CNewPVP::CheckLimitLevel
  000df	85 c0		 test	 eax, eax
  000e1	75 18		 jne	 SHORT $LN11@Reserve
$LN50@Reserve:
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
  000ea	5b		 pop	 ebx

; 364  : }

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	33 cd		 xor	 ecx, ebp
  000f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c2 08 00	 ret	 8
$LN11@Reserve:

; 341  : 	if( !CheckLimitLevel(responsor.m_Index,g_GateResponsor[0]) )	return ENEWPVP::E_LIMIT_LEVEL;

  000fb	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_GateResponsor@@3PAHA
  00101	8b cb		 mov	 ecx, ebx
  00103	ff 36		 push	 DWORD PTR [esi]
  00105	e8 00 00 00 00	 call	 ?CheckLimitLevel@CNewPVP@@AAEHHH@Z ; CNewPVP::CheckLimitLevel
  0010a	85 c0		 test	 eax, eax
  0010c	74 d5		 je	 SHORT $LN50@Reserve

; 342  : 
; 343  : 	_tagWaiting waiting = {0};
; 344  :     waiting.nRequester = requester.m_Index;

  0010e	8b 07		 mov	 eax, DWORD PTR [edi]
  00110	0f 57 c0	 xorps	 xmm0, xmm0
  00113	66 0f d6 45 e0	 movq	 QWORD PTR _waiting$[ebp+4], xmm0
  00118	89 45 dc	 mov	 DWORD PTR _waiting$[ebp], eax

; 345  :     waiting.nResponsor = responsor.m_Index;

  0011b	8b 06		 mov	 eax, DWORD PTR [esi]
  0011d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _waiting$[ebp+12], 0
  00124	89 45 e0	 mov	 DWORD PTR _waiting$[ebp+4], eax

; 346  :     waiting.bExpired = 0;

  00127	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _waiting$[ebp+8], 0

; 347  :     waiting.dwTime = GetTickCount();

  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00134	89 45 e8	 mov	 DWORD PTR _waiting$[ebp+12], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00137	8d 8b 14 01 00
	00		 lea	 ecx, DWORD PTR [ebx+276]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 143  : 		: first(_STD forward<_Other1>(_Val1)),

  0013d	8b 07		 mov	 eax, DWORD PTR [edi]

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0013f	0f 10 45 dc	 movups	 xmm0, XMMWORD PTR _waiting$[ebp]
  00143	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  00146	8d 45 c4	 lea	 eax, DWORD PTR $T1[ebp]
  00149	50		 push	 eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 144  : 				second(_STD forward<_Other2>(_Val2))

  0014a	0f 11 45 c8	 movups	 XMMWORD PTR $T1[ebp+4], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 1093 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val));

  0014e	e8 00 00 00 00	 call	 ??$_Buynode@U?$pair@HU_tagWaiting@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@$$QAU?$pair@HU_tagWaiting@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buynode<std::pair<int,_tagWaiting> >

; 1094 : 		return (_Insert_nohint(false,

  00153	50		 push	 eax

; 602  : 		return ((reference)_Pnode->_Myval);

  00154	83 c0 10	 add	 eax, 16			; 00000010H

; 1094 : 		return (_Insert_nohint(false,

  00157	8d 8b 14 01 00
	00		 lea	 ecx, DWORD PTR [ebx+276]
  0015d	50		 push	 eax
  0015e	6a 00		 push	 0
  00160	8d 45 e4	 lea	 eax, DWORD PTR _pair$[ebp]
  00163	50		 push	 eax
  00164	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@$$CBHU_tagWaiting@@@std@@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@$$CBHU_tagWaiting@@@1@PAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Insert_nohint<std::pair<int const ,_tagWaiting> &,std::_Tree_node<std::pair<int const ,_tagWaiting>,void *> *>
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 350  : 	if(pair.second == false){ LogAddTD("%s\t%s\t%s\t%s\t%d","pair.second","ENEWPVP::E_FAILED_ENTER","NULL",__FILE__,__LINE__); return ENEWPVP::E_FAILED_ENTER; }

  00169	80 7d e8 00	 cmp	 BYTE PTR _pair$[ebp+4], 0
  0016d	75 3f		 jne	 SHORT $LN13@Reserve
  0016f	68 5e 01 00 00	 push	 350			; 0000015eH
  00174	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IGELOCEA@NewPVP?4cpp?$AA@
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_04HIBGFPH@NULL?$AA@
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FIMKCIJJ@ENEWPVP?3?3E_FAILED_ENTER?$AA@
  00183	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FFNHLDAP@pair?4second?$AA@
  00188	68 00 00 00 00	 push	 OFFSET ??_C@_0P@ENJPCMFP@?$CFs?7?$CFs?7?$CFs?7?$CFs?7?$CFd?$AA@
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00193	83 c4 18	 add	 esp, 24			; 00000018H
  00196	b8 19 00 00 00	 mov	 eax, 25			; 00000019H
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	5b		 pop	 ebx

; 364  : }

  0019e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a1	33 cd		 xor	 ecx, ebp
  001a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c2 08 00	 ret	 8
$LN13@Reserve:

; 351  : 
; 352  : 	SetDuelStatus(requester, responsor, 1);

  001ae	6a 01		 push	 1
  001b0	56		 push	 esi
  001b1	57		 push	 edi
  001b2	8b cb		 mov	 ecx, ebx
  001b4	e8 00 00 00 00	 call	 ?SetDuelStatus@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::SetDuelStatus

; 353  : 
; 354  : 	PMSG_REQ_DUEL_ANSWER req;
; 355  :     req.h.c = PMHC_BYTE;
; 356  :     req.h.size = sizeof(PMSG_REQ_DUEL_ANSWER);
; 357  :     req.h.headcode = 0xAA;
; 358  :     req.h.subcode = 0x02;
; 359  :     req.NumberH = HIBYTE(requester.m_Index);

  001b9	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]

; 360  :     req.NumberL = LOBYTE(requester.m_Index);
; 361  :     memcpy(req.szName, requester.Name, MAX_IDSTRING);

  001bd	f3 0f 7e 47 5d	 movq	 xmm0, QWORD PTR [edi+93]
  001c2	88 45 f0	 mov	 BYTE PTR _req$[ebp+4], al
  001c5	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  001c8	88 45 f1	 mov	 BYTE PTR _req$[ebp+5], al
  001cb	66 8b 47 65	 mov	 ax, WORD PTR [edi+101]
  001cf	66 89 45 fa	 mov	 WORD PTR _req$[ebp+14], ax

; 362  :     DataSend(responsor.m_Index, (LPBYTE)&req, req.h.size);

  001d3	8d 45 ec	 lea	 eax, DWORD PTR _req$[ebp]
  001d6	6a 10		 push	 16			; 00000010H
  001d8	50		 push	 eax
  001d9	ff 36		 push	 DWORD PTR [esi]
  001db	c7 45 ec c1 10
	aa 02		 mov	 DWORD PTR _req$[ebp], 44699841 ; 02aa10c1H
  001e2	66 0f d6 45 f2	 movq	 QWORD PTR _req$[ebp+6], xmm0
  001e7	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001ec	83 c4 0c	 add	 esp, 12			; 0000000cH

; 363  : 	return 0;

  001ef	33 c0		 xor	 eax, eax
$LN1@Reserve:

; 364  : }

  001f1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f4	5f		 pop	 edi
  001f5	5e		 pop	 esi
  001f6	33 cd		 xor	 ecx, ebp
  001f8	5b		 pop	 ebx
  001f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c2 08 00	 ret	 8
?Reserve@CNewPVP@@QAEHAAUOBJECTSTRUCT@@0@Z ENDP		; CNewPVP::Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?Run@CNewPVP@@QAEXXZ
_TEXT	SEGMENT
_dwRemainMsec$1$ = -16					; size = 4
_dwRemainMsec$1$ = -16					; size = 4
$T1 = -16						; size = 4
tv1019 = -12						; size = 4
tv1021 = -8						; size = 4
_this$1$ = -4						; size = 4
?Run@CNewPVP@@QAEXXZ PROC				; CNewPVP::Run, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 56   : 	while(iter!=m_Waiting.end())

  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__GetTickCount@0
  00011	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 587  : 		return ((_Nodepref)_Pnode->_Left);

  00014	8b 87 14 01 00
	00		 mov	 eax, DWORD PTR [edi+276]

; 43   : 		: _Ptr(_Pnode)

  0001a	8b 30		 mov	 esi, DWORD PTR [eax]

; 334  : 		return (this->_Ptr == _Right._Ptr);

  0001c	3b f0		 cmp	 esi, eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 56   : 	while(iter!=m_Waiting.end())

  0001e	0f 84 a0 00 00
	00		 je	 $LN3@Run
$LL2@Run:

; 57   : 	{
; 58   : 		_tagWaiting & waiting = iter->second;
; 59   : 		if(waiting.bExpired == 1)

  00024	83 7e 1c 01	 cmp	 DWORD PTR [esi+28], 1
  00028	75 14		 jne	 SHORT $LN9@Run

; 60   : 		{
; 61   : 			iter = m_Waiting.erase(iter);

  0002a	56		 push	 esi
  0002b	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  0002e	50		 push	 eax
  0002f	8d 8f 14 01 00
	00		 lea	 ecx, DWORD PTR [edi+276]
  00035	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
  0003a	8b 30		 mov	 esi, DWORD PTR [eax]

; 62   : 			continue;

  0003c	eb 74		 jmp	 SHORT $LN127@Run
$LN9@Run:

; 63   : 		}
; 64   : 
; 65   : 		DWORD dwRemainMsec = GetTickCount() - waiting.dwTime;			

  0003e	ff d1		 call	 ecx
  00040	2b 46 20	 sub	 eax, DWORD PTR [esi+32]

; 66   : 		if( dwRemainMsec > 10000 )

  00043	3d 10 27 00 00	 cmp	 eax, 10000		; 00002710H
  00048	76 25		 jbe	 SHORT $LN10@Run

; 67   : 		{
; 68   : 			OBJECTSTRUCT & requester = gObj[waiting.nRequester];
; 69   : 			OBJECTSTRUCT & responsor = gObj[waiting.nResponsor];

  0004a	69 46 18 40 27
	00 00		 imul	 eax, DWORD PTR [esi+24], 10048

; 70   : 			Cancel(requester, responsor, TRUE);

  00051	8b cf		 mov	 ecx, edi
  00053	6a 01		 push	 1
  00055	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005b	50		 push	 eax
  0005c	69 46 14 40 27
	00 00		 imul	 eax, DWORD PTR [esi+20], 10048
  00063	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ?Cancel@CNewPVP@@QAEXAAUOBJECTSTRUCT@@0H@Z ; CNewPVP::Cancel
$LN10@Run:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 60   : 		if (_Mytree::_Isnil(_Ptr))

  0006f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00073	75 3d		 jne	 SHORT $LN127@Run

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00075	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 61   : 			;	// end() shouldn't be incremented, don't move
; 62   : 		else if (!_Mytree::_Isnil(_Mytree::_Right(_Ptr)))

  00078	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007c	75 16		 jne	 SHORT $LN156@Run

; 63   : 			_Ptr = _Mytree::_Min(

  0007e	8b f0		 mov	 esi, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  00080	8b 06		 mov	 eax, DWORD PTR [esi]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  00082	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00086	75 2a		 jne	 SHORT $LN127@Run
$LL138@Run:

; 615  : 			_Pnode = _Left(_Pnode);

  00088	8b f0		 mov	 esi, eax

; 335  : 		}
; 336  : 
; 337  : 	bool operator!=(const _Myiter& _Right) const
; 338  : 		{	// test for iterator inequality
; 339  : 		return (!(*this == _Right));
; 340  : 		}
; 341  : 	};
; 342  : 
; 343  : template<class _Mytree> inline
; 344  : 	typename _Tree_const_iterator<_Mytree>::_Unchecked_type
; 345  : 		_Unchecked(_Tree_const_iterator<_Mytree> _Iter)
; 346  : 	{	// convert to unchecked
; 347  : 	return (_Iter._Unchecked());
; 348  : 	}
; 349  : 
; 350  : template<class _Mytree> inline
; 351  : 	_Tree_const_iterator<_Mytree>&
; 352  : 		_Rechecked(_Tree_const_iterator<_Mytree>& _Iter,
; 353  : 			typename _Tree_const_iterator<_Mytree>
; 354  : 				::_Unchecked_type _Right)
; 355  : 	{	// convert to checked
; 356  : 	return (_Iter._Rechecked(_Right));
; 357  : 	}
; 358  : 
; 359  : 	// TEMPLATE CLASS _Tree_iterator
; 360  : template<class _Mytree>
; 361  : 	class _Tree_iterator
; 362  : 		: public _Tree_const_iterator<_Mytree>
; 363  : 	{	// iterator for mutable tree
; 364  : public:
; 365  : 	typedef _Tree_iterator<_Mytree> _Myiter;
; 366  : 	typedef _Tree_const_iterator<_Mytree> _Mybase;
; 367  : 	typedef bidirectional_iterator_tag iterator_category;
; 368  : 
; 369  : 	typedef typename _Mytree::_Nodeptr _Nodeptr;
; 370  : 	typedef typename _Mytree::value_type value_type;
; 371  : 	typedef typename _Mytree::difference_type difference_type;
; 372  : 
; 373  : 	typedef typename _Mytree::pointer pointer;
; 374  : 	typedef typename _Mytree::reference reference;
; 375  : 
; 376  : 	_Tree_iterator()
; 377  : 		{	// construct with null node
; 378  : 		}
; 379  : 
; 380  : 	_Tree_iterator(_Nodeptr _Pnode, const _Mytree *_Plist)
; 381  : 		: _Mybase(_Pnode, _Plist)
; 382  : 		{	// construct with node pointer _Pnode
; 383  : 		}
; 384  : 
; 385  : 	typedef _Tree_unchecked_iterator<_Mytree> _Unchecked_type;
; 386  : 
; 387  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 388  : 		{	// reset from unchecked iterator
; 389  : 		this->_Ptr = _Right._Ptr;
; 390  : 		return (*this);
; 391  : 		}
; 392  : 
; 393  : 	_Unchecked_type _Unchecked() const
; 394  : 		{	// make an unchecked iterator
; 395  : 		return (_Unchecked_type(this->_Ptr, (_Mytree *)this->_Getcont()));
; 396  : 		}
; 397  : 
; 398  : 	reference operator*() const
; 399  : 		{	// return designated value
; 400  : 		return ((reference)**(_Mybase *)this);
; 401  : 		}
; 402  : 
; 403  : 	pointer operator->() const
; 404  : 		{	// return pointer to class object
; 405  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 406  : 		}
; 407  : 
; 408  : 	_Myiter& operator++()
; 409  : 		{	// preincrement
; 410  : 		++(*(_Mybase *)this);
; 411  : 		return (*this);
; 412  : 		}
; 413  : 
; 414  : 	_Myiter operator++(int)
; 415  : 		{	// postincrement
; 416  : 		_Myiter _Tmp = *this;
; 417  : 		++*this;
; 418  : 		return (_Tmp);
; 419  : 		}
; 420  : 
; 421  : 	_Myiter& operator--()
; 422  : 		{	// predecrement
; 423  : 		--(*(_Mybase *)this);
; 424  : 		return (*this);
; 425  : 		}
; 426  : 
; 427  : 	_Myiter operator--(int)
; 428  : 		{	// postdecrement
; 429  : 		_Myiter _Tmp = *this;
; 430  : 		--*this;
; 431  : 		return (_Tmp);
; 432  : 		}
; 433  : 	};
; 434  : 
; 435  : template<class _Mytree> inline
; 436  : 	typename _Tree_iterator<_Mytree>::_Unchecked_type
; 437  : 		_Unchecked(_Tree_iterator<_Mytree> _Iter)
; 438  : 	{	// convert to unchecked
; 439  : 	return (_Iter._Unchecked());
; 440  : 	}
; 441  : 
; 442  : template<class _Mytree> inline
; 443  : 	_Tree_iterator<_Mytree>&
; 444  : 		_Rechecked(_Tree_iterator<_Mytree>& _Iter,
; 445  : 			typename _Tree_iterator<_Mytree>
; 446  : 				::_Unchecked_type _Right)
; 447  : 	{	// convert to checked
; 448  : 	return (_Iter._Rechecked(_Right));
; 449  : 	}
; 450  : 
; 451  : 		// tree TYPE WRAPPERS
; 452  : template<class _Value_type,
; 453  : 	class _Size_type,
; 454  : 	class _Difference_type,
; 455  : 	class _Pointer,
; 456  : 	class _Const_pointer,
; 457  : 	class _Reference,
; 458  : 	class _Const_reference,
; 459  : 	class _Nodeptr_type>
; 460  : 	struct _Tree_iter_types
; 461  : 	{	// wraps types needed by iterators
; 462  : 	typedef _Value_type value_type;
; 463  : 	typedef _Size_type size_type;
; 464  : 	typedef _Difference_type difference_type;
; 465  : 	typedef _Pointer pointer;
; 466  : 	typedef _Const_pointer const_pointer;
; 467  : 	typedef _Reference reference;
; 468  : 	typedef _Const_reference const_reference;
; 469  : 	typedef _Nodeptr_type _Nodeptr;
; 470  : 	};
; 471  : 
; 472  : template<class _Value_type,
; 473  : 	class _Voidptr>
; 474  : 	struct _Tree_node
; 475  : 		{	// tree node
; 476  : 		_Voidptr _Left;	// left subtree, or smallest element if head
; 477  : 		_Voidptr _Parent;	// parent, or root of tree if head
; 478  : 		_Voidptr _Right;	// right subtree, or largest element if head
; 479  : 		char _Color;	// _Red or _Black, _Black if head
; 480  : 		char _Isnil;	// true only if head (also nil) node
; 481  : 		_Value_type _Myval;	// the stored value, unused if head
; 482  : 
; 483  : 	private:
; 484  : 		_Tree_node& operator=(const _Tree_node&);
; 485  : 		};
; 486  : 
; 487  : template<class _Value_type>
; 488  : 	struct _Tree_node<_Value_type, void *>
; 489  : 		{	// tree node
; 490  : 		typedef _Tree_node<_Value_type, void *> *_Nodeptr;
; 491  : 		_Nodeptr _Left;	// left subtree, or smallest element if head
; 492  : 		_Nodeptr _Parent;	// parent, or root of tree if head
; 493  : 		_Nodeptr _Right;	// right subtree, or largest element if head
; 494  : 		char _Color;	// _Red or _Black, _Black if head
; 495  : 		char _Isnil;	// true only if head (also nil) node
; 496  : 		_Value_type _Myval;	// the stored value, unused if head
; 497  : 
; 498  : 	private:
; 499  : 		_Tree_node& operator=(const _Tree_node&);
; 500  : 		};
; 501  : 
; 502  : template<class _Ty>
; 503  : 	struct _Tree_simple_types
; 504  : 		: public _Simple_types<_Ty>
; 505  : 	{	// wraps types needed by iterators
; 506  : 	typedef _Tree_node<_Ty, void *> _Node;
; 507  : 	typedef _Node *_Nodeptr;
; 508  : 	};
; 509  : 
; 510  : template<class _Ty,
; 511  : 	class _Alloc0>
; 512  : 	struct _Tree_base_types
; 513  : 	{	// types needed for a container base
; 514  : 	typedef _Alloc0 _Alloc;
; 515  : 	typedef _Tree_base_types<_Ty, _Alloc> _Myt;
; 516  : 
; 517  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 518  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 519  : 
; 520  : 
; 521  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 522  : 		_Voidptr;
; 523  : 	typedef _Tree_node<typename _Alty::value_type,
; 524  : 		_Voidptr> _Node;
; 525  : 
; 526  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 527  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 528  : 	typedef _Nodeptr& _Nodepref;
; 529  : 
; 530  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 531  : 		_Tree_simple_types<typename _Alty::value_type>,
; 532  : 		_Tree_iter_types<typename _Alty::value_type,
; 533  : 			typename _Alty::size_type,
; 534  : 			typename _Alty::difference_type,
; 535  : 			typename _Alty::pointer,
; 536  : 			typename _Alty::const_pointer,
; 537  : 			typename _Alty::reference,
; 538  : 			typename _Alty::const_reference,
; 539  : 			_Nodeptr> >::type
; 540  : 		_Val_types;
; 541  : 	};
; 542  : 
; 543  : 		// TEMPLATE CLASS _Tree_val
; 544  : template<class _Val_types>
; 545  : 	class _Tree_val
; 546  : 		: public _Container_base
; 547  : 	{	// base class for tree to hold data
; 548  : public:
; 549  : 	typedef _Tree_val<_Val_types> _Myt;
; 550  : 
; 551  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 552  : 	typedef _Nodeptr& _Nodepref;
; 553  : 
; 554  : 	typedef typename _Val_types::value_type value_type;
; 555  : 	typedef typename _Val_types::size_type size_type;
; 556  : 	typedef typename _Val_types::difference_type difference_type;
; 557  : 	typedef typename _Val_types::pointer pointer;
; 558  : 	typedef typename _Val_types::const_pointer const_pointer;
; 559  : 	typedef typename _Val_types::reference reference;
; 560  : 	typedef typename _Val_types::const_reference const_reference;
; 561  : 
; 562  : 	typedef _Tree_const_iterator<_Myt> const_iterator;
; 563  : 	typedef _Tree_iterator<_Myt> iterator;
; 564  : 
; 565  : 	_Tree_val()
; 566  : 		{	// initialize data
; 567  : 		this->_Myhead = 0;
; 568  : 		this->_Mysize = 0;
; 569  : 		}
; 570  : 
; 571  : 	enum _Redbl
; 572  : 		{	// colors for link to parent
; 573  : 		_Red, _Black};
; 574  : 
; 575  : 	static char& _Color(_Nodeptr _Pnode)
; 576  : 		{	// return reference to color in node
; 577  : 		return ((char&)_Pnode->_Color);
; 578  : 		}
; 579  : 
; 580  : 	static char& _Isnil(_Nodeptr _Pnode)
; 581  : 		{	// return reference to nil flag in node
; 582  : 		return ((char&)_Pnode->_Isnil);

  0008a	8b 06		 mov	 eax, DWORD PTR [esi]

; 588  : 		}
; 589  : 
; 590  : 	static _Nodepref _Parent(_Nodeptr _Pnode)
; 591  : 		{	// return reference to parent pointer in node
; 592  : 		return ((_Nodepref)_Pnode->_Parent);
; 593  : 		}
; 594  : 
; 595  : 	static _Nodepref _Right(_Nodeptr _Pnode)
; 596  : 		{	// return reference to right pointer in node
; 597  : 		return ((_Nodepref)_Pnode->_Right);
; 598  : 		}
; 599  : 
; 600  : 	static reference _Myval(_Nodeptr _Pnode)
; 601  : 		{	// return reference to value in node
; 602  : 		return ((reference)_Pnode->_Myval);
; 603  : 		}
; 604  : 
; 605  : 	static _Nodeptr _Max(_Nodeptr _Pnode)
; 606  : 		{	// return rightmost node in subtree at _Pnode
; 607  : 		while (!_Isnil(_Right(_Pnode)))
; 608  : 			_Pnode = _Right(_Pnode);
; 609  : 		return (_Pnode);
; 610  : 		}
; 611  : 
; 612  : 	static _Nodeptr _Min(_Nodeptr _Pnode)
; 613  : 		{	// return leftmost node in subtree at _Pnode
; 614  : 		while (!_Isnil(_Left(_Pnode)))

  0008c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00090	74 f6		 je	 SHORT $LL138@Run

; 64   : 				_Mytree::_Right(_Ptr));	// ==> smallest of right subtree
; 65   : 		else

  00092	eb 1e		 jmp	 SHORT $LN127@Run
$LN156@Run:

; 66   : 			{	// climb looking for right subtree
; 67   : 			_Nodeptr _Pnode;
; 68   : 			while (!_Mytree::_Isnil(_Pnode = _Mytree::_Parent(_Ptr))
; 69   : 				&& _Ptr == _Mytree::_Right(_Pnode))

  00094	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00097	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0009b	75 13		 jne	 SHORT $LN169@Run
  0009d	0f 1f 00	 npad	 3
$LL122@Run:
  000a0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000a3	75 0b		 jne	 SHORT $LN169@Run

; 70   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000a5	8b f0		 mov	 esi, eax
  000a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ae	74 f0		 je	 SHORT $LL122@Run
$LN169@Run:

; 71   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000b0	8b f0		 mov	 esi, eax
$LN127@Run:
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 56   : 	while(iter!=m_Waiting.end())

  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__GetTickCount@0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 334  : 		return (this->_Ptr == _Right._Ptr);

  000b8	3b b7 14 01 00
	00		 cmp	 esi, DWORD PTR [edi+276]
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 56   : 	while(iter!=m_Waiting.end())

  000be	0f 85 60 ff ff
	ff		 jne	 $LL2@Run
$LN3@Run:

; 71   : 		}		
; 72   : 		iter++;
; 73   : 	}
; 74   : 	
; 75   : 	for(int i = 0;i < DUEL_CHANNEL_MAX;i++)

  000c4	8d b7 8c 00 00
	00		 lea	 esi, DWORD PTR [edi+140]
  000ca	33 db		 xor	 ebx, ebx
  000cc	89 75 f4	 mov	 DWORD PTR tv1019[ebp], esi
  000cf	90		 npad	 1
$LL6@Run:

; 76   : 	{
; 77   : 		int nStatus = m_DuelChannel[i].nStatus;

  000d0	0f b6 46 fa	 movzx	 eax, BYTE PTR [esi-6]

; 78   : 		switch(nStatus)

  000d4	83 c0 fe	 add	 eax, -2			; fffffffeH
  000d7	89 45 f8	 mov	 DWORD PTR tv1021[ebp], eax
  000da	83 f8 03	 cmp	 eax, 3
  000dd	0f 87 ca 01 00
	00		 ja	 $LN22@Run
  000e3	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN175@Run[eax*4]
$LN11@Run:

; 79   : 		{
; 80   : 		case 3:
; 81   : 			if(!CheckUsersOnConnect(i))	continue;

  000ea	53		 push	 ebx
  000eb	8b cf		 mov	 ecx, edi
  000ed	e8 00 00 00 00	 call	 ?CheckUsersOnConnect@CNewPVP@@AAEHH@Z ; CNewPVP::CheckUsersOnConnect
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 c2 01 00
	00		 je	 $LN4@Run

; 82   : 			break;

  000fa	e9 ab 01 00 00	 jmp	 $LN172@Run
$LN13@Run:

; 83   : 		case 2:
; 84   : 			{
; 85   : 				DWORD dwRemainMsec = GetTickCount() - m_DuelChannel[i].dwTime;

  000ff	ff d1		 call	 ecx
  00101	8b c8		 mov	 ecx, eax

; 86   : 				int nNotifySec = 6 - dwRemainMsec / 1000;				

  00103	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00108	2b 4e fc	 sub	 ecx, DWORD PTR [esi-4]
  0010b	f7 e1		 mul	 ecx
  0010d	89 4d f0	 mov	 DWORD PTR _dwRemainMsec$1$[ebp], ecx
  00110	b9 06 00 00 00	 mov	 ecx, 6
  00115	c1 ea 06	 shr	 edx, 6
  00118	2b ca		 sub	 ecx, edx

; 87   : 				if(nNotifySec < 6 && m_DuelChannel[i].nNotifyCount != nNotifySec )

  0011a	83 f9 06	 cmp	 ecx, 6
  0011d	7d 17		 jge	 SHORT $LN14@Run
  0011f	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00122	3b c1		 cmp	 eax, ecx
  00124	74 10		 je	 SHORT $LN14@Run

; 88   : 				{
; 89   : 					m_DuelChannel[i].nNotifyCount = nNotifySec;
; 90   : 					BroadcastMessage(i, 3, 0, nNotifySec);

  00126	51		 push	 ecx
  00127	6a 00		 push	 0
  00129	6a 03		 push	 3
  0012b	66 89 0e	 mov	 WORD PTR [esi], cx
  0012e	8b cf		 mov	 ecx, edi
  00130	53		 push	 ebx
  00131	e8 00 00 00 00	 call	 ?BroadcastMessage@CNewPVP@@AAEXHEEH@Z ; CNewPVP::BroadcastMessage
$LN14@Run:

; 91   : 				}
; 92   : 				if(dwRemainMsec > 6000)

  00136	81 7d f0 70 17
	00 00		 cmp	 DWORD PTR _dwRemainMsec$1$[ebp], 6000 ; 00001770H
  0013d	0f 86 67 01 00
	00		 jbe	 $LN172@Run

; 93   : 				{	
; 94   : 					if(!CheckUsersOnConnect(i))	continue;

  00143	53		 push	 ebx
  00144	8b cf		 mov	 ecx, edi
  00146	e8 00 00 00 00	 call	 ?CheckUsersOnConnect@CNewPVP@@AAEHH@Z ; CNewPVP::CheckUsersOnConnect
  0014b	85 c0		 test	 eax, eax
  0014d	0f 84 69 01 00
	00		 je	 $LN4@Run

; 95   : 					
; 96   : 					OBJECTSTRUCT &requester = gObj[m_DuelChannel[i].nIndex1];

  00153	69 7e dc 40 27
	00 00		 imul	 edi, DWORD PTR [esi-36], 10048

; 97   : 					OBJECTSTRUCT &responsor = gObj[m_DuelChannel[i].nIndex2];

  0015a	69 76 e0 40 27
	00 00		 imul	 esi, DWORD PTR [esi-32], 10048

; 98   : 					
; 99   : 					gObjClearBuffEffect(&requester, CLEAR_TYPE_NON_PCS_ITEM_EFFECT);

  00161	6a 06		 push	 6
  00163	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00169	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016f	57		 push	 edi
  00170	e8 00 00 00 00	 call	 ?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; gObjClearBuffEffect

; 100  : 					gObjClearBuffEffect(&responsor, CLEAR_TYPE_NON_PCS_ITEM_EFFECT);

  00175	6a 06		 push	 6
  00177	56		 push	 esi
  00178	e8 00 00 00 00	 call	 ?gObjClearBuffEffect@@YA_NPAUOBJECTSTRUCT@@W4eBuffClearType@@@Z ; gObjClearBuffEffect

; 101  : 
; 102  : 					ReFill(requester);

  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00180	83 c4 10	 add	 esp, 16			; 00000010H
  00183	57		 push	 edi
  00184	e8 00 00 00 00	 call	 ?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z ; CNewPVP::ReFill

; 103  : 					ReFill(responsor);

  00189	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 ?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z ; CNewPVP::ReFill

; 104  : 
; 105  : 					BroadcastRound(i, 2, FALSE);

  00192	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00195	6a 00		 push	 0
  00197	6a 02		 push	 2
  00199	53		 push	 ebx
  0019a	e8 00 00 00 00	 call	 ?BroadcastRound@CNewPVP@@AAEXHEH@Z ; CNewPVP::BroadcastRound

; 106  : 					SetStatus(3, i, requester, responsor);

  0019f	56		 push	 esi
  001a0	57		 push	 edi
  001a1	53		 push	 ebx
  001a2	6a 03		 push	 3

; 107  : 				}
; 108  : 				break;

  001a4	e9 f4 00 00 00	 jmp	 $LN173@Run
$LN17@Run:

; 109  : 			}
; 110  : 		case 4:
; 111  : 			{
; 112  : 				DWORD dwRemainMsec = GetTickCount() - m_DuelChannel[i].dwTime;

  001a9	ff d1		 call	 ecx
  001ab	2b 46 fc	 sub	 eax, DWORD PTR [esi-4]

; 113  : 				if(dwRemainMsec > 5000)

  001ae	3d 88 13 00 00	 cmp	 eax, 5000		; 00001388H
  001b3	0f 86 f1 00 00
	00		 jbe	 $LN172@Run

; 114  : 				{
; 115  : 					if(!CheckUsersOnConnect(i))	continue;

  001b9	53		 push	 ebx
  001ba	8b cf		 mov	 ecx, edi
  001bc	e8 00 00 00 00	 call	 ?CheckUsersOnConnect@CNewPVP@@AAEHH@Z ; CNewPVP::CheckUsersOnConnect
  001c1	85 c0		 test	 eax, eax
  001c3	0f 84 f3 00 00
	00		 je	 $LN4@Run

; 116  : 					
; 117  : 					OBJECTSTRUCT & requester = gObj[m_DuelChannel[i].nIndex1];

  001c9	69 7e dc 40 27
	00 00		 imul	 edi, DWORD PTR [esi-36], 10048

; 118  : 					OBJECTSTRUCT & responsor = gObj[m_DuelChannel[i].nIndex2];

  001d0	69 76 e0 40 27
	00 00		 imul	 esi, DWORD PTR [esi-32], 10048

; 119  : 
; 120  : 					MoveGate(requester.m_Index, g_GateRequester[i]);

  001d7	ff 34 9d 00 00
	00 00		 push	 DWORD PTR ?g_GateRequester@@3PAHA[ebx*4]
  001de	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001e1	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001e7	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ed	ff 37		 push	 DWORD PTR [edi]
  001ef	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate

; 121  : 					MoveGate(responsor.m_Index, g_GateResponsor[i]);

  001f4	ff 34 9d 00 00
	00 00		 push	 DWORD PTR ?g_GateResponsor@@3PAHA[ebx*4]
  001fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001fe	ff 36		 push	 DWORD PTR [esi]
  00200	e8 00 00 00 00	 call	 ?MoveGate@CNewPVP@@AAEHHH@Z ; CNewPVP::MoveGate

; 122  : 					ReFill( requester);

  00205	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00208	57		 push	 edi
  00209	e8 00 00 00 00	 call	 ?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z ; CNewPVP::ReFill

; 123  : 					ReFill( responsor);

  0020e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00211	56		 push	 esi
  00212	e8 00 00 00 00	 call	 ?ReFill@CNewPVP@@AAEXAAUOBJECTSTRUCT@@@Z ; CNewPVP::ReFill

; 124  : 					BroadcastRound( i, 2, FALSE);

  00217	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0021a	6a 00		 push	 0
  0021c	6a 02		 push	 2
  0021e	53		 push	 ebx
  0021f	e8 00 00 00 00	 call	 ?BroadcastRound@CNewPVP@@AAEXHEH@Z ; CNewPVP::BroadcastRound

; 125  : 					SetStatus(3, i, requester, responsor);

  00224	56		 push	 esi
  00225	57		 push	 edi
  00226	53		 push	 ebx
  00227	6a 03		 push	 3

; 126  : 				}
; 127  : 			}
; 128  : 			break;

  00229	eb 72		 jmp	 SHORT $LN173@Run
$LN20@Run:

; 129  : 		case DC_RESERVEDEND:
; 130  : 			{
; 131  : 				DWORD dwRemainMsec  = GetTickCount() - m_DuelChannel[i].dwTime;

  0022b	ff d1		 call	 ecx
  0022d	8b c8		 mov	 ecx, eax

; 132  : 				int nNotifySec = 10 - dwRemainMsec / 1000;

  0022f	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00234	2b 4e fc	 sub	 ecx, DWORD PTR [esi-4]
  00237	f7 e1		 mul	 ecx
  00239	89 4d f0	 mov	 DWORD PTR _dwRemainMsec$1$[ebp], ecx
  0023c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00241	c1 ea 06	 shr	 edx, 6
  00244	2b ca		 sub	 ecx, edx

; 133  : 				if( nNotifySec < 6 && m_DuelChannel[i].nNotifyCount != nNotifySec )

  00246	83 f9 06	 cmp	 ecx, 6
  00249	7d 17		 jge	 SHORT $LN21@Run
  0024b	0f bf 06	 movsx	 eax, WORD PTR [esi]
  0024e	3b c1		 cmp	 eax, ecx
  00250	74 10		 je	 SHORT $LN21@Run

; 134  : 				{
; 135  : 					m_DuelChannel[i].nNotifyCount = nNotifySec;
; 136  : 					BroadcastMessage(i, 3, 2, nNotifySec);

  00252	51		 push	 ecx
  00253	6a 02		 push	 2
  00255	6a 03		 push	 3
  00257	66 89 0e	 mov	 WORD PTR [esi], cx
  0025a	8b cf		 mov	 ecx, edi
  0025c	53		 push	 ebx
  0025d	e8 00 00 00 00	 call	 ?BroadcastMessage@CNewPVP@@AAEXHEEH@Z ; CNewPVP::BroadcastMessage
$LN21@Run:

; 137  : 				}
; 138  : 				if( dwRemainMsec > 10000 )

  00262	81 7d f0 10 27
	00 00		 cmp	 DWORD PTR _dwRemainMsec$1$[ebp], 10000 ; 00002710H
  00269	76 3f		 jbe	 SHORT $LN172@Run

; 139  : 				{
; 140  : 					OBJECTSTRUCT &requester = gObj[m_DuelChannel[i].nIndex1];

  0026b	69 7e dc 40 27
	00 00		 imul	 edi, DWORD PTR [esi-36], 10048

; 141  : 				  	OBJECTSTRUCT &responsor = gObj[m_DuelChannel[i].nIndex2];

  00272	69 76 e0 40 27
	00 00		 imul	 esi, DWORD PTR [esi-32], 10048

; 142  : 					Leave( requester, responsor);

  00279	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0027c	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00282	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00288	56		 push	 esi
  00289	57		 push	 edi
  0028a	e8 00 00 00 00	 call	 ?Leave@CNewPVP@@AAEXAAUOBJECTSTRUCT@@0@Z ; CNewPVP::Leave

; 143  : 					LeaveChannelObserver(i);

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00292	53		 push	 ebx
  00293	e8 00 00 00 00	 call	 ?LeaveChannelObserver@CNewPVP@@AAEXH@Z ; CNewPVP::LeaveChannelObserver

; 144  : 					SetStatus(DC_IDLE, i, requester, responsor);

  00298	56		 push	 esi
  00299	57		 push	 edi
  0029a	53		 push	 ebx
  0029b	6a 00		 push	 0
$LN173@Run:
  0029d	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  002a0	8b cf		 mov	 ecx, edi
  002a2	e8 00 00 00 00	 call	 ?SetStatus@CNewPVP@@AAEXHHAAUOBJECTSTRUCT@@0@Z ; CNewPVP::SetStatus
  002a7	8b 75 f4	 mov	 esi, DWORD PTR tv1019[ebp]
$LN172@Run:
  002aa	8b 45 f8	 mov	 eax, DWORD PTR tv1021[ebp]
$LN22@Run:

; 145  : 				}
; 146  : 			}
; 147  : 			break;
; 148  : 		}
; 149  : 		if( IS_START(nStatus) )	BroadcastDuelInfo(i, 2);

  002ad	83 f8 02	 cmp	 eax, 2
  002b0	77 0a		 ja	 SHORT $LN4@Run
  002b2	6a 02		 push	 2
  002b4	53		 push	 ebx
  002b5	8b cf		 mov	 ecx, edi
  002b7	e8 00 00 00 00	 call	 ?BroadcastDuelInfo@CNewPVP@@AAEXHE@Z ; CNewPVP::BroadcastDuelInfo
$LN4@Run:

; 71   : 		}		
; 72   : 		iter++;
; 73   : 	}
; 74   : 	
; 75   : 	for(int i = 0;i < DUEL_CHANNEL_MAX;i++)

  002bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__GetTickCount@0
  002c2	43		 inc	 ebx
  002c3	83 c6 2c	 add	 esi, 44			; 0000002cH
  002c6	89 75 f4	 mov	 DWORD PTR tv1019[ebp], esi
  002c9	83 fb 04	 cmp	 ebx, 4
  002cc	0f 8c fe fd ff
	ff		 jl	 $LL6@Run
  002d2	5f		 pop	 edi
  002d3	5e		 pop	 esi
  002d4	5b		 pop	 ebx

; 150  : 	}
; 151  : }

  002d5	8b e5		 mov	 esp, ebp
  002d7	5d		 pop	 ebp
  002d8	c3		 ret	 0
  002d9	0f 1f 00	 npad	 3
$LN175@Run:
  002dc	00 00 00 00	 DD	 $LN13@Run
  002e0	00 00 00 00	 DD	 $LN11@Run
  002e4	00 00 00 00	 DD	 $LN17@Run
  002e8	00 00 00 00	 DD	 $LN20@Run
?Run@CNewPVP@@QAEXXZ ENDP				; CNewPVP::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?LoadData@CNewPVP@@QAEXXZ
_TEXT	SEGMENT
?LoadData@CNewPVP@@QAEXXZ PROC				; CNewPVP::LoadData, COMDAT
; _this$ = ecx

; 48   : 	//
; 49   : }

  00000	c3		 ret	 0
?LoadData@CNewPVP@@QAEXXZ ENDP				; CNewPVP::LoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ??1CNewPVP@@UAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
$T2 = -4						; size = 4
??1CNewPVP@@UAE@XZ PROC					; CNewPVP::~CNewPVP, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 41   : 	m_ObserverInfoList.clear();

  00008	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CNewPVP@@6B@
  00014	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::clear

; 42   : 	m_Waiting.clear();

  00019	8d 8e 14 01 00
	00		 lea	 ecx, DWORD PTR [esi+276]
  0001f	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::clear
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00024	8b 86 1c 01 00
	00		 mov	 eax, DWORD PTR [esi+284]

; 2196 : 		erase(begin(), end());

  0002a	8d 8e 1c 01 00
	00		 lea	 ecx, DWORD PTR [esi+284]
  00030	50		 push	 eax
  00031	ff 30		 push	 DWORD PTR [eax]
  00033	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagObserverInfo@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0003c	ff b6 1c 01 00
	00		 push	 DWORD PTR [esi+284]
  00042	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 43   : 		: _Ptr(_Pnode)

  00047	8b 86 14 01 00
	00		 mov	 eax, DWORD PTR [esi+276]

; 2196 : 		erase(begin(), end());

  0004d	8d 8e 14 01 00
	00		 lea	 ecx, DWORD PTR [esi+276]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00053	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 2196 : 		erase(begin(), end());

  00056	50		 push	 eax
  00057	ff 30		 push	 DWORD PTR [eax]
  00059	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHU_tagWaiting@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00062	ff b6 14 01 00
	00		 push	 DWORD PTR [esi+276]
  00068	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006d	83 c4 04	 add	 esp, 4
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 43   : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
??1CNewPVP@@UAE@XZ ENDP					; CNewPVP::~CNewPVP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ??0CNewPVP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CNewPVP@@QAE@XZ PROC					; CNewPVP::CNewPVP, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CNewPVP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	8d b7 14 01 00
	00		 lea	 esi, DWORD PTR [edi+276]
  00032	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CNewPVP@@6B@
  00038	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  0003f	8b ce		 mov	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 28   : {

  00041	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  00044	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 717  : 		_Myhead() = _Buyheadnode();

  00051	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagWaiting@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagWaiting,std::less<int>,std::allocator<std::pair<int const ,_tagWaiting> >,0> >::_Buyheadnode
  00056	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 28   : {

  00058	8d b7 1c 01 00
	00		 lea	 esi, DWORD PTR [edi+284]
  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  00065	8b ce		 mov	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 28   : {

  00067	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 567  : 		this->_Myhead = 0;

  0006a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 568  : 		this->_Mysize = 0;

  00070	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 717  : 		_Myhead() = _Buyheadnode();

  00077	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@HU_tagObserverInfo@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagObserverInfo@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHU_tagObserverInfo@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<int,_tagObserverInfo,std::less<int>,std::allocator<std::pair<int const ,_tagObserverInfo> >,0> >::_Buyheadnode
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 29   : 	memset(&m_DuelChannelList, 0, sizeof(m_DuelChannelList));

  0007c	6a 5c		 push	 92			; 0000005cH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xtree

; 717  : 		_Myhead() = _Buyheadnode();

  0007e	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp

; 29   : 	memset(&m_DuelChannelList, 0, sizeof(m_DuelChannelList));

  00080	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
  00083	6a 00		 push	 0
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _memset

; 30   : 	memset(m_DuelChannel, 0, sizeof(m_DuelChannel));

  0008b	68 b0 00 00 00	 push	 176			; 000000b0H
  00090	8d 47 64	 lea	 eax, DWORD PTR [edi+100]
  00093	6a 00		 push	 0
  00095	50		 push	 eax
  00096	e8 00 00 00 00	 call	 _memset
  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	83 c4 18	 add	 esp, 24			; 00000018H

; 31   : 	memset(&m_ObserverCount, 0, sizeof(m_ObserverCount));

  000a1	0f 11 87 24 01
	00 00		 movups	 XMMWORD PTR [edi+292], xmm0

; 32   : 	m_DuelChannelList.h.c = PMHC_BYTE;

  000a8	c6 06 c1	 mov	 BYTE PTR [esi], 193	; 000000c1H

; 33   : 	m_DuelChannelList.h.headcode = 0xAA;
; 34   : 	m_DuelChannelList.h.subcode = 0x06;
; 35   : 	m_DuelChannelList.h.size = sizeof(PMSG_ANS_DUEL_CHANNELLIST);
; 36   : 	m_bNewPVP = true;
; 37   : }

  000ab	8b c7		 mov	 eax, edi
  000ad	66 c7 47 0a aa
	06		 mov	 WORD PTR [edi+10], 1706	; 000006aaH
  000b3	c6 47 09 5c	 mov	 BYTE PTR [edi+9], 92	; 0000005cH
  000b7	c7 47 04 01 00
	00 00		 mov	 DWORD PTR [edi+4], 1
  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CNewPVP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 14 01 00
	00		 add	 ecx, 276		; 00000114H
  00009	e9 00 00 00 00	 jmp	 ??1?$map@HU_tagWaiting@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHU_tagWaiting@@@std@@@3@@std@@QAE@XZ
__ehhandler$??0CNewPVP@@QAE@XZ:
  0000e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00012	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00015	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CNewPVP@@QAE@XZ
  00024	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CNewPVP@@QAE@XZ ENDP					; CNewPVP::CNewPVP
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char *>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\itemsystemfor380.h
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\itemsystemfor380.h
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\itemsystemfor380.h
;	COMDAT ?DebugLog@@YAXPADZZ
_TEXT	SEGMENT
_szBuffer$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_szLog$ = 8						; size = 4
?DebugLog@@YAXPADZZ PROC				; DebugLog, COMDAT

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	68 00 02 00 00	 push	 512			; 00000200H
  00018	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00029	8d 45 0c	 lea	 eax, DWORD PTR _szLog$[ebp+4]
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	ff 75 08	 push	 DWORD PTR _szLog$[ebp]
  00032	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00038	6a ff		 push	 -1
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00040	8b 08		 mov	 ecx, DWORD PTR [eax]
  00042	ff 70 04	 push	 DWORD PTR [eax+4]
  00045	83 c9 01	 or	 ecx, 1
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\itemsystemfor380.h

; 101  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00051	83 c4 1c	 add	 esp, 28			; 0000001cH
; File c:\users\michel\desktop\source\gameserver\source\itemsystemfor380.h

; 101  : }

  00054	33 cd		 xor	 ecx, ebp
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?DebugLog@@YAXPADZZ ENDP				; DebugLog
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??R?$less@H@std@@QBE_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@H@std@@QBE_NABH0@Z PROC			; std::less<int>::operator(), COMDAT
; _this$ = ecx

; 239  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	8b 10		 mov	 edx, DWORD PTR [eax]
  0000b	33 c0		 xor	 eax, eax
  0000d	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000f	0f 9c c0	 setl	 al

; 241  : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
??R?$less@H@std@@QBE_NABH0@Z ENDP			; std::less<int>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAD@std@@YA$$QADAAD@Z PROC			; std::_Move<char &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAD@std@@YA$$QADAAD@Z ENDP			; std::_Move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC				; std::swap<char>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);
; 53   : 	_Left = _Move(_Right);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	8a 01		 mov	 al, BYTE PTR [ecx]
  0000c	8a 1a		 mov	 bl, BYTE PTR [edx]
  0000e	88 02		 mov	 BYTE PTR [edx], al

; 54   : 	_Right = _Move(_Tmp);

  00010	88 19		 mov	 BYTE PTR [ecx], bl
  00012	5b		 pop	 ebx

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 10	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000b	6a ff		 push	 -1
  0000d	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 01	 or	 ecx, 1
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1474 :     #pragma warning(push)
; 1475 :     #pragma warning(disable: 4996) // Deprecation
; 1476 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);
; 1477 :     #pragma warning(pop)
; 1478 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1409 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
