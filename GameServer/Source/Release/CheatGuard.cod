; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CheatGuard.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char *>
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CheatGuard@@QAE@XZ				; CheatGuard::CheatGuard
PUBLIC	??1CheatGuard@@UAE@XZ				; CheatGuard::~CheatGuard
PUBLIC	?Init@CheatGuard@@QAEXXZ			; CheatGuard::Init
PUBLIC	?Load@CheatGuard@@QAEXXZ			; CheatGuard::Load
PUBLIC	?Read@CheatGuard@@QAEXPAD@Z			; CheatGuard::Read
PUBLIC	?ProcCheckLive@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z ; CheatGuard::ProcCheckLive
PUBLIC	?ProcSpeedHack@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@GG_N@Z ; CheatGuard::ProcSpeedHack
PUBLIC	?CG_LiveProc@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@PAUPacketCheatGuardCGClientInfo@@HH@Z ; CheatGuard::CG_LiveProc
PUBLIC	?GC_Notice@CheatGuard@@QAAXPAUOBJECTSTRUCT@@PAD1ZZ ; CheatGuard::GC_Notice
PUBLIC	?GC_InformPlayersAround@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z ; CheatGuard::GC_InformPlayersAround
PUBLIC	??_GCheatGuard@@UAEPAXI@Z			; CheatGuard::`scalar deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CheatGuard@@6B@				; CheatGuard::`vftable'
PUBLIC	?g_CheatGuard@@3VCheatGuard@@A			; g_CheatGuard
PUBLIC	??_C@_0BB@EAEDIBED@?4?2Log?2CheatGuard?$AA@	; `string'
PUBLIC	??_C@_0L@PNGBDCBP@CheatGuard?$AA@		; `string'
PUBLIC	??_C@_0P@MJECMHLO@CheatGuard?4xml?$AA@		; `string'
PUBLIC	??_C@_0CA@NMOFCNHA@?$FLCheatGuard?$FN?5File?5?$CFs?5not?5found?$CB?$AA@ ; `string'
PUBLIC	??_C@_0O@DJLHLLB@Loading?5?$CFs?4?4?4?$AA@	; `string'
PUBLIC	??_C@_0L@HMFBLIPO@cheatguard?$AA@		; `string'
PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_09ELJEKNDN@SpeedHack?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0BH@OKAMJDPP@Module?5?$CFs?5is?5activated?$AA@ ; `string'
PUBLIC	??_C@_06FINPLOKL@notice?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_08EMBNBNLN@property?$AA@			; `string'
PUBLIC	??_C@_0L@CMGJAGDM@Disconnect?$AA@		; `string'
PUBLIC	??_C@_0BE@JGOKGICA@InformPlayersAround?$AA@	; `string'
PUBLIC	??_C@_0BE@FENNPJJI@AttackSpeedMaxDelta?$AA@	; `string'
PUBLIC	??_C@_0BD@GMENBMLF@MagicSpeedMaxDelta?$AA@	; `string'
PUBLIC	??_C@_0CA@FHGMFOFH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Low?5response?5interval?$AA@ ; `string'
PUBLIC	??_C@_0CI@CEIJKAON@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Speed?5editor?5has?5been?5@ ; `string'
PUBLIC	??_C@_0M@CDEOCMAJ@zCheatGuard?$AA@		; `string'
PUBLIC	??_C@_0DK@KPOAIMC@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Attack?5speed?5is?5edited@ ; `string'
PUBLIC	??_C@_0DJ@EFHENDBI@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Magic?5speed?5is?5edited?5@ ; `string'
PUBLIC	??_C@_0DF@OFDJJIMA@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5hea@ ; `string'
PUBLIC	??_C@_0DB@JKIDHIBD@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5siz@ ; `string'
PUBLIC	??_C@_0DG@LOIJJMMJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5che@ ; `string'
PUBLIC	??_C@_0CI@KEMIOCPF@?$FLzCheatGuard?$FN?5Player?5?$CFs?5may?5use?5@ ; `string'
PUBLIC	??_R4CheatGuard@@6B@				; CheatGuard::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCheatGuard@@@8				; CheatGuard `RTTI Type Descriptor'
PUBLIC	??_R3CheatGuard@@8				; CheatGuard::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CheatGuard@@8				; CheatGuard::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CheatGuard@@8			; CheatGuard::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?Output@CLogToFile@@QAAXPADZZ:PROC		; CLogToFile::Output
EXTRN	??0CLogToFile@@QAE@QAD0H@Z:PROC			; CLogToFile::CLogToFile
EXTRN	??1CLogToFile@@QAE@XZ:PROC			; CLogToFile::~CLogToFile
EXTRN	??_ECheatGuard@@UAEPAXI@Z:PROC			; CheatGuard::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?as_string@xml_attribute@pugi@@QBEPBDPBD@Z:PROC	; pugi::xml_attribute::as_string
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??0xml_node@pugi@@QAE@XZ:PROC			; pugi::xml_node::xml_node
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?text@xml_node@pugi@@QBE?AVxml_text@2@XZ:PROC	; pugi::xml_node::text
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	?as_string@xml_text@pugi@@QBEPBDPBD@Z:PROC	; pugi::xml_text::as_string
EXTRN	?as_int@xml_text@pugi@@QBEHH@Z:PROC		; pugi::xml_text::as_int
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_CheatGuard@@3VCheatGuard@@A DB 0114H DUP (?)		; g_CheatGuard
_BSS	ENDS
CRT$XCU	SEGMENT
?g_CheatGuard$initializer$@@3P6AXXZA DD FLAT:??__Eg_CheatGuard@@YAXXZ ; g_CheatGuard$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CheatGuard@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CheatGuard@@8 DD FLAT:??_R0?AVCheatGuard@@@8 ; CheatGuard::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CheatGuard@@8
rdata$r	ENDS
;	COMDAT ??_R2CheatGuard@@8
rdata$r	SEGMENT
??_R2CheatGuard@@8 DD FLAT:??_R1A@?0A@EA@CheatGuard@@8	; CheatGuard::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CheatGuard@@8
rdata$r	SEGMENT
??_R3CheatGuard@@8 DD 00H				; CheatGuard::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CheatGuard@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCheatGuard@@@8
data$r	SEGMENT
??_R0?AVCheatGuard@@@8 DD FLAT:??_7type_info@@6B@	; CheatGuard `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCheatGuard@@', 00H
data$r	ENDS
;	COMDAT ??_R4CheatGuard@@6B@
rdata$r	SEGMENT
??_R4CheatGuard@@6B@ DD 00H				; CheatGuard::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCheatGuard@@@8
	DD	FLAT:??_R3CheatGuard@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CI@KEMIOCPF@?$FLzCheatGuard?$FN?5Player?5?$CFs?5may?5use?5@
CONST	SEGMENT
??_C@_0CI@KEMIOCPF@?$FLzCheatGuard?$FN?5Player?5?$CFs?5may?5use?5@ DB '[z'
	DB	'CheatGuard] Player %s may use cheats!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LOIJJMMJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5che@
CONST	SEGMENT
??_C@_0DG@LOIJJMMJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5che@ DB '['
	DB	'%s] [%s] Client information checkcode is not correct', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JKIDHIBD@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5siz@
CONST	SEGMENT
??_C@_0DB@JKIDHIBD@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5siz@ DB '['
	DB	'%s] [%s] Client information size is not correct', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OFDJJIMA@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5hea@
CONST	SEGMENT
??_C@_0DF@OFDJJIMA@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5hea@ DB '['
	DB	'%s] [%s] Client information headcode is not correct', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EFHENDBI@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Magic?5speed?5is?5edited?5@
CONST	SEGMENT
??_C@_0DJ@EFHENDBI@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Magic?5speed?5is?5edited?5@ DB '['
	DB	'%s] [%s] Magic speed is edited (Client: %d, Server: %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@KPOAIMC@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Attack?5speed?5is?5edited@
CONST	SEGMENT
??_C@_0DK@KPOAIMC@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Attack?5speed?5is?5edited@ DB '['
	DB	'%s] [%s] Attack speed is edited (Client: %d, Server: %d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDEOCMAJ@zCheatGuard?$AA@
CONST	SEGMENT
??_C@_0M@CDEOCMAJ@zCheatGuard?$AA@ DB 'zCheatGuard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CEIJKAON@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Speed?5editor?5has?5been?5@
CONST	SEGMENT
??_C@_0CI@CEIJKAON@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Speed?5editor?5has?5been?5@ DB '['
	DB	'%s] [%s] Speed editor has been founded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FHGMFOFH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Low?5response?5interval?$AA@
CONST	SEGMENT
??_C@_0CA@FHGMFOFH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Low?5response?5interval?$AA@ DB '['
	DB	'%s] [%s] Low response interval', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GMENBMLF@MagicSpeedMaxDelta?$AA@
CONST	SEGMENT
??_C@_0BD@GMENBMLF@MagicSpeedMaxDelta?$AA@ DB 'MagicSpeedMaxDelta', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FENNPJJI@AttackSpeedMaxDelta?$AA@
CONST	SEGMENT
??_C@_0BE@FENNPJJI@AttackSpeedMaxDelta?$AA@ DB 'AttackSpeedMaxDelta', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JGOKGICA@InformPlayersAround?$AA@
CONST	SEGMENT
??_C@_0BE@JGOKGICA@InformPlayersAround?$AA@ DB 'InformPlayersAround', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CMGJAGDM@Disconnect?$AA@
CONST	SEGMENT
??_C@_0L@CMGJAGDM@Disconnect?$AA@ DB 'Disconnect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMBNBNLN@property?$AA@
CONST	SEGMENT
??_C@_08EMBNBNLN@property?$AA@ DB 'property', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FINPLOKL@notice?$AA@
CONST	SEGMENT
??_C@_06FINPLOKL@notice?$AA@ DB 'notice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OKAMJDPP@Module?5?$CFs?5is?5activated?$AA@
CONST	SEGMENT
??_C@_0BH@OKAMJDPP@Module?5?$CFs?5is?5activated?$AA@ DB 'Module %s is act'
	DB	'ivated', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELJEKNDN@SpeedHack?$AA@
CONST	SEGMENT
??_C@_09ELJEKNDN@SpeedHack?$AA@ DB 'SpeedHack', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMFBLIPO@cheatguard?$AA@
CONST	SEGMENT
??_C@_0L@HMFBLIPO@cheatguard?$AA@ DB 'cheatguard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJLHLLB@Loading?5?$CFs?4?4?4?$AA@
CONST	SEGMENT
??_C@_0O@DJLHLLB@Loading?5?$CFs?4?4?4?$AA@ DB 'Loading %s...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NMOFCNHA@?$FLCheatGuard?$FN?5File?5?$CFs?5not?5found?$CB?$AA@
CONST	SEGMENT
??_C@_0CA@NMOFCNHA@?$FLCheatGuard?$FN?5File?5?$CFs?5not?5found?$CB?$AA@ DB '['
	DB	'CheatGuard] File %s not found!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MJECMHLO@CheatGuard?4xml?$AA@
CONST	SEGMENT
??_C@_0P@MJECMHLO@CheatGuard?4xml?$AA@ DB 'CheatGuard.xml', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PNGBDCBP@CheatGuard?$AA@
CONST	SEGMENT
??_C@_0L@PNGBDCBP@CheatGuard?$AA@ DB 'CheatGuard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EAEDIBED@?4?2Log?2CheatGuard?$AA@
CONST	SEGMENT
??_C@_0BB@EAEDIBED@?4?2Log?2CheatGuard?$AA@ DB '.\Log\CheatGuard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CheatGuard@@6B@
CONST	SEGMENT
??_7CheatGuard@@6B@ DD FLAT:??_R4CheatGuard@@6B@	; CheatGuard::`vftable'
	DD	FLAT:??_ECheatGuard@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@CheatGuard@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@CheatGuard@@QAEXPAD@Z$0
__ehfuncinfo$?Read@CheatGuard@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@CheatGuard@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CheatGuard@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CheatGuard@@QAE@XZ$0
__ehfuncinfo$??0CheatGuard@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CheatGuard@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_CheatGuard@@YAXXZ
text$yd	SEGMENT
??__Fg_CheatGuard@@YAXXZ PROC				; `dynamic atexit destructor for 'g_CheatGuard'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CheatGuard@@3VCheatGuard@@A ; g_CheatGuard
  00005	e9 00 00 00 00	 jmp	 ??1CheatGuard@@UAE@XZ	; CheatGuard::~CheatGuard
??__Fg_CheatGuard@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_CheatGuard''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ??__Eg_CheatGuard@@YAXXZ
text$di	SEGMENT
??__Eg_CheatGuard@@YAXXZ PROC				; `dynamic initializer for 'g_CheatGuard'', COMDAT

; 8    : CheatGuard g_CheatGuard;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CheatGuard@@3VCheatGuard@@A ; g_CheatGuard
  00005	e8 00 00 00 00	 call	 ??0CheatGuard@@QAE@XZ	; CheatGuard::CheatGuard
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_CheatGuard@@YAXXZ ; `dynamic atexit destructor for 'g_CheatGuard''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_CheatGuard@@YAXXZ ENDP				; `dynamic initializer for 'g_CheatGuard''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCheatGuard@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCheatGuard@@UAEPAXI@Z PROC				; CheatGuard::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CheatGuard@@UAE@XZ	; CheatGuard::~CheatGuard
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 14 01 00 00	 push	 276			; 00000114H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCheatGuard@@UAEPAXI@Z ENDP				; CheatGuard::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?GC_InformPlayersAround@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_Text$1 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?GC_InformPlayersAround@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CheatGuard::GC_InformPlayersAround, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpUser$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	bf 4b 00 00 00	 mov	 edi, 75			; 0000004bH
  0001e	8d b3 4a 0c 00
	00		 lea	 esi, DWORD PTR [ebx+3146]
$LL4@GC_InformP:

; 243  : 	{
; 244  : 		if (lpUser->VpPlayer2[ViewIndex].type == OBJ_USER)

  00024	80 7e 02 01	 cmp	 BYTE PTR [esi+2], 1
  00028	75 3d		 jne	 SHORT $LN2@GC_InformP

; 245  : 		{
; 246  : 			char Text[256] = { 0 };
; 247  : 			sprintf(Text, "[zCheatGuard] Player %s may use cheats!", lpUser->Name);

  0002a	68 00 01 00 00	 push	 256			; 00000100H
  0002f	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$1[ebp]
  00035	6a 00		 push	 0
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _memset
  0003d	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00040	50		 push	 eax
  00041	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$1[ebp]
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@KEMIOCPF@?$FLzCheatGuard?$FN?5Player?5?$CFs?5may?5use?5@
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _sprintf

; 248  : 			GCServerMsgStringSend(Text, lpUser->VpPlayer2[ViewIndex].number, 1);

  00052	0f bf 06	 movsx	 eax, WORD PTR [esi]
  00055	6a 01		 push	 1
  00057	50		 push	 eax
  00058	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _Text$1[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00064	83 c4 24	 add	 esp, 36			; 00000024H
$LN2@GC_InformP:

; 241  : 	VM_START
; 242  : 	for (int ViewIndex = 0; ViewIndex < MAX_VIEWPORT; ViewIndex++)

  00067	83 c6 0c	 add	 esi, 12			; 0000000cH
  0006a	83 ef 01	 sub	 edi, 1
  0006d	75 b5		 jne	 SHORT $LL4@GC_InformP

; 249  : 		}
; 250  : 	}
; 251  : 	VM_END
; 252  : }

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	33 cd		 xor	 ecx, ebp
  00076	5b		 pop	 ebx
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?GC_InformPlayersAround@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CheatGuard::GC_InformPlayersAround
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?GC_Notice@CheatGuard@@QAAXPAUOBJECTSTRUCT@@PAD1ZZ
_TEXT	SEGMENT
_lpRequest$ = -720					; size = 204
_szBuffer$ = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_lpUser$ = 12						; size = 4
_Title$ = 16						; size = 4
_Text$ = 20						; size = 4
?GC_Notice@CheatGuard@@QAAXPAUOBJECTSTRUCT@@PAD1ZZ PROC	; CheatGuard::GC_Notice, COMDAT

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 02 00
	00		 sub	 esp, 720		; 000002d0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _lpUser$[ebp]
  00017	56		 push	 esi

; 217  : 	VM_START
; 218  : 	if (strlen(Text) < 1)

  00018	8b 75 14	 mov	 esi, DWORD PTR _Text$[ebp]
  0001b	8b c6		 mov	 eax, esi
  0001d	57		 push	 edi
  0001e	8b 7d 10	 mov	 edi, DWORD PTR _Title$[ebp]
  00021	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL10@GC_Notice:
  00024	8a 08		 mov	 cl, BYTE PTR [eax]
  00026	40		 inc	 eax
  00027	84 c9		 test	 cl, cl
  00029	75 f9		 jne	 SHORT $LL10@GC_Notice
  0002b	2b c2		 sub	 eax, edx
  0002d	83 f8 01	 cmp	 eax, 1
  00030	0f 82 c3 00 00
	00		 jb	 $LN1@GC_Notice
  00036	68 00 02 00 00	 push	 512			; 00000200H
  0003b	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00041	6a 00		 push	 0
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _memset
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0004c	8d 45 18	 lea	 eax, DWORD PTR _Text$[ebp+4]
  0004f	50		 push	 eax
  00050	6a 00		 push	 0
  00052	56		 push	 esi
  00053	8d 85 fc fd ff
	ff		 lea	 eax, DWORD PTR _szBuffer$[ebp]
  00059	6a ff		 push	 -1
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	ff 70 04	 push	 DWORD PTR [eax+4]
  00066	83 c9 01	 or	 ecx, 1
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp

; 230  : 	PacketResetMessageBox lpRequest = { 0 };

  0006f	68 cb 00 00 00	 push	 203			; 000000cbH
  00074	8d 85 31 fd ff
	ff		 lea	 eax, DWORD PTR _lpRequest$[ebp+1]
  0007a	6a 00		 push	 0
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _memset

; 231  : 	lpRequest.Head.set((LPBYTE)&lpRequest, 0xFE, 0x05, sizeof(PacketResetMessageBox));
; 232  : 	memcpy(lpRequest.Title, Title, sizeof(lpRequest.Title)-1);

  00082	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00085	66 8b 47 38	 mov	 ax, WORD PTR [edi+56]

; 233  : 	memcpy(lpRequest.Text, szBuffer, sizeof(lpRequest.Text)-1);

  00089	8d b5 fc fd ff
	ff		 lea	 esi, DWORD PTR _szBuffer$[ebp]
  0008f	66 89 85 6c fd
	ff ff		 mov	 WORD PTR _lpRequest$[ebp+60], ax
  00096	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0009b	8a 47 3a	 mov	 al, BYTE PTR [edi+58]
  0009e	0f 11 85 34 fd
	ff ff		 movups	 XMMWORD PTR _lpRequest$[ebp+4], xmm0
  000a5	88 85 6e fd ff
	ff		 mov	 BYTE PTR _lpRequest$[ebp+62], al

; 235  : 	DataSend(lpUser->m_Index, (LPBYTE)&lpRequest, lpRequest.Head.size);

  000ab	8d 85 30 fd ff
	ff		 lea	 eax, DWORD PTR _lpRequest$[ebp]
  000b1	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 140  : 		lpBuf[0] = 0xC1;

  000b5	c7 85 30 fd ff
	ff c1 cc fe 05	 mov	 DWORD PTR _lpRequest$[ebp], 100584641 ; 05feccc1H
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp

; 235  : 	DataSend(lpUser->m_Index, (LPBYTE)&lpRequest, lpRequest.Head.size);

  000bf	68 cc 00 00 00	 push	 204			; 000000ccH
  000c4	0f 11 85 44 fd
	ff ff		 movups	 XMMWORD PTR _lpRequest$[ebp+20], xmm0
  000cb	50		 push	 eax
  000cc	0f 10 47 20	 movups	 xmm0, XMMWORD PTR [edi+32]
  000d0	ff 33		 push	 DWORD PTR [ebx]
  000d2	0f 11 85 54 fd
	ff ff		 movups	 XMMWORD PTR _lpRequest$[ebp+36], xmm0
  000d9	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  000de	8d bd 70 fd ff
	ff		 lea	 edi, DWORD PTR _lpRequest$[ebp+64]
  000e4	66 0f d6 85 64
	fd ff ff	 movq	 QWORD PTR _lpRequest$[ebp+52], xmm0
  000ec	f3 a5		 rep movsd
  000ee	66 a5		 movsw
  000f0	a4		 movsb
  000f1	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000f6	83 c4 34	 add	 esp, 52			; 00000034H
$LN1@GC_Notice:

; 236  : 	VM_END
; 237  : }

  000f9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	33 cd		 xor	 ecx, ebp
  00100	5b		 pop	 ebx
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
?GC_Notice@CheatGuard@@QAAXPAUOBJECTSTRUCT@@PAD1ZZ ENDP	; CheatGuard::GC_Notice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?CG_LiveProc@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@PAUPacketCheatGuardCGClientInfo@@HH@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_lpData$ = 12						; size = 4
_HeadCode$ = 16						; size = 4
_Size$ = 20						; size = 4
?CG_LiveProc@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@PAUPacketCheatGuardCGClientInfo@@HH@Z PROC ; CheatGuard::CG_LiveProc, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  : 	if (HeadCode != 0x10)

  00003	83 7d 10 10	 cmp	 DWORD PTR _HeadCode$[ebp], 16 ; 00000010H
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	74 22		 je	 SHORT $LN2@CG_LivePro

; 173  : 	{
; 174  : 		this->Log->Output("[%s] [%s] Client information headcode is not correct",

  0000c	8b 55 08	 mov	 edx, DWORD PTR _lpUser$[ebp]
  0000f	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  00012	50		 push	 eax
  00013	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  00016	50		 push	 eax
  00017	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@OFDJJIMA@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5hea@
  0001c	ff 73 04	 push	 DWORD PTR [ebx+4]
  0001f	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  00024	83 c4 10	 add	 esp, 16			; 00000010H

; 175  : 			lpUser->AccountID, lpUser->Name);
; 176  : 		return false;

  00027	32 c0		 xor	 al, al
  00029	5b		 pop	 ebx

; 213  : }

  0002a	5d		 pop	 ebp
  0002b	c2 10 00	 ret	 16			; 00000010H
$LN2@CG_LivePro:

; 177  : 	}
; 178  : 
; 179  : 	if (Size != sizeof(PacketCheatGuardCGClientInfo))

  0002e	83 7d 14 0e	 cmp	 DWORD PTR _Size$[ebp], 14 ; 0000000eH
  00032	74 22		 je	 SHORT $LN3@CG_LivePro

; 180  : 	{
; 181  : 		this->Log->Output("[%s] [%s] Client information size is not correct",

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00037	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0003a	50		 push	 eax
  0003b	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@JKIDHIBD@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5siz@
  00044	ff 73 04	 push	 DWORD PTR [ebx+4]
  00047	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 182  : 			lpUser->AccountID, lpUser->Name);
; 183  : 		return false;

  0004f	32 c0		 xor	 al, al
  00051	5b		 pop	 ebx

; 213  : }

  00052	5d		 pop	 ebp
  00053	c2 10 00	 ret	 16			; 00000010H
$LN3@CG_LivePro:
  00056	56		 push	 esi

; 184  : 	}
; 185  : 
; 186  : 	WORD tmpCheck[2];
; 187  : 
; 188  : 	tmpCheck[0] = (lpData->CheckCode==1) ? (lpData->wWord1^0x8AFC) : (lpData->wWord2^0x8AFC);

  00057	8b 75 0c	 mov	 esi, DWORD PTR _lpData$[ebp]
  0005a	8a 46 03	 mov	 al, BYTE PTR [esi+3]
  0005d	3c 01		 cmp	 al, 1
  0005f	75 06		 jne	 SHORT $LN9@CG_LivePro
  00061	0f b7 56 06	 movzx	 edx, WORD PTR [esi+6]
  00065	eb 04		 jmp	 SHORT $LN15@CG_LivePro
$LN9@CG_LivePro:
  00067	0f b7 56 0a	 movzx	 edx, WORD PTR [esi+10]
$LN15@CG_LivePro:
  0006b	81 f2 fc 8a 00
	00		 xor	 edx, 35580		; 00008afcH

; 189  : 	tmpCheck[1] = (lpData->CheckCode==1) ? ( (((lpData->wWord2^0xA8CF)/1024)*16) | ((lpData->wWord2^0xA8CF)&0x0F)) : ( (((lpData->wWord1^0xA8CF)/1024)*16) | ((lpData->wWord1^0xA8CF)&0x0F));

  00071	3c 01		 cmp	 al, 1
  00073	75 06		 jne	 SHORT $LN11@CG_LivePro
  00075	0f b7 46 0a	 movzx	 eax, WORD PTR [esi+10]
  00079	eb 04		 jmp	 SHORT $LN16@CG_LivePro
$LN11@CG_LivePro:
  0007b	0f b7 46 06	 movzx	 eax, WORD PTR [esi+6]
$LN16@CG_LivePro:
  0007f	8b c8		 mov	 ecx, eax
  00081	f7 d0		 not	 eax
  00083	81 f1 00 a8 00
	00		 xor	 ecx, 43008		; 0000a800H
  00089	83 e0 0f	 and	 eax, 15			; 0000000fH
  0008c	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0008f	c1 e1 04	 shl	 ecx, 4
  00092	0b c8		 or	 ecx, eax

; 190  : 
; 191  : 	if (tmpCheck[0] != tmpCheck[1] || tmpCheck[0] == 0 || tmpCheck[1] == 0)

  00094	66 3b d1	 cmp	 dx, cx
  00097	75 69		 jne	 SHORT $LN5@CG_LivePro
  00099	66 85 d2	 test	 dx, dx
  0009c	74 64		 je	 SHORT $LN5@CG_LivePro
  0009e	66 85 c9	 test	 cx, cx
  000a1	74 5f		 je	 SHORT $LN5@CG_LivePro

; 196  : 	}
; 197  : 
; 198  : 	if (lpUser->Connected > PLAYER_CONNECTED)

  000a3	57		 push	 edi
  000a4	8b 7d 08	 mov	 edi, DWORD PTR _lpUser$[ebp]
  000a7	83 7f 04 01	 cmp	 DWORD PTR [edi+4], 1
  000ab	7e 42		 jle	 SHORT $LN7@CG_LivePro

; 199  : 	{
; 200  : 		lpUser->ConnectCheckTime = GetTickCount();

  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000b3	89 47 3c	 mov	 DWORD PTR [edi+60], eax

; 201  : 		
; 202  : 		WORD AttackSpeed = lpData->wAttackSpeed1 ^ 0xDEFA;

  000b6	b8 fa de 00 00	 mov	 eax, 57082		; 0000defaH
  000bb	66 33 46 08	 xor	 ax, WORD PTR [esi+8]
  000bf	0f b7 d0	 movzx	 edx, ax

; 203  : 		WORD MagicSpeed = lpData->wAttackSpeed2 ^ 0xAFDA;

  000c2	b8 da af 00 00	 mov	 eax, 45018		; 0000afdaH
  000c7	66 33 46 0c	 xor	 ax, WORD PTR [esi+12]

; 204  : 
; 205  : 		if (!this->ProcSpeedHack(lpUser, AttackSpeed, MagicSpeed, lpData->IsSpeedEditor))

  000cb	66 83 7e 04 00	 cmp	 WORD PTR [esi+4], 0
  000d0	0f b7 c8	 movzx	 ecx, ax
  000d3	0f 95 c0	 setne	 al
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	50		 push	 eax
  000da	51		 push	 ecx
  000db	52		 push	 edx
  000dc	57		 push	 edi
  000dd	8b cb		 mov	 ecx, ebx
  000df	e8 00 00 00 00	 call	 ?ProcSpeedHack@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@GG_N@Z ; CheatGuard::ProcSpeedHack
  000e4	84 c0		 test	 al, al
  000e6	75 07		 jne	 SHORT $LN7@CG_LivePro
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx

; 213  : }

  000eb	5d		 pop	 ebp
  000ec	c2 10 00	 ret	 16			; 00000010H
$LN7@CG_LivePro:

; 206  : 		{
; 207  : 			return false;
; 208  : 		}
; 209  : 	}
; 210  : 
; 211  : 	lpUser->m_iCHECK_COUNT = 0;

  000ef	c7 87 2c 27 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+10028], 0

; 212  : 	return true;

  000f9	b0 01		 mov	 al, 1
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	5b		 pop	 ebx

; 213  : }

  000fe	5d		 pop	 ebp
  000ff	c2 10 00	 ret	 16			; 00000010H
$LN5@CG_LivePro:

; 192  : 	{
; 193  : 		this->Log->Output("[%s] [%s] Client information checkcode is not correct",

  00102	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00105	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00108	50		 push	 eax
  00109	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0010c	50		 push	 eax
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@LOIJJMMJ@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Client?5information?5che@
  00112	ff 73 04	 push	 DWORD PTR [ebx+4]
  00115	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  0011a	83 c4 10	 add	 esp, 16			; 00000010H

; 194  : 			lpUser->AccountID, lpUser->Name);
; 195  : 		return false;

  0011d	32 c0		 xor	 al, al
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 213  : }

  00121	5d		 pop	 ebp
  00122	c2 10 00	 ret	 16			; 00000010H
?CG_LiveProc@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@PAUPacketCheatGuardCGClientInfo@@HH@Z ENDP ; CheatGuard::CG_LiveProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?ProcSpeedHack@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@GG_N@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_AttackSpeed$ = 12					; size = 2
_MagicSpeed$ = 16					; size = 2
_IsSpeedEditor$ = 20					; size = 1
?ProcSpeedHack@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@GG_N@Z PROC ; CheatGuard::ProcSpeedHack, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 104  : 	VM_START
; 105  : 
; 106  : 	if (lpUser->Connected != PLAYER_PLAYING)

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  0000e	0f 85 f4 00 00
	00		 jne	 $LN13@ProcSpeedH

; 107  : 	{
; 108  : 		return true;
; 109  : 	}
; 110  : 
; 111  : 	int Delta = 0;
; 112  : 
; 113  : 	if (IsSpeedEditor)

  00014	80 7d 14 00	 cmp	 BYTE PTR _IsSpeedEditor$[ebp], 0
  00018	74 3f		 je	 SHORT $LN4@ProcSpeedH

; 114  : 	{
; 115  : 		lpUser->m_AttackSpeedHackDetectedCount++;

  0001a	fe 86 78 05 00
	00		 inc	 BYTE PTR [esi+1400]

; 116  : 		this->Log->Output("[%s] [%s] Speed editor has been founded",

  00020	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00023	50		 push	 eax
  00024	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00027	50		 push	 eax
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CEIJKAON@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Speed?5editor?5has?5been?5@
  0002d	ff 77 04	 push	 DWORD PTR [edi+4]
  00030	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output

; 117  : 			lpUser->AccountID, lpUser->Name);
; 118  : 		this->GC_Notice(lpUser, "zCheatGuard", this->ModuleSpeedHack.Notice);

  00035	8d 47 09	 lea	 eax, DWORD PTR [edi+9]
  00038	50		 push	 eax
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CDEOCMAJ@zCheatGuard?$AA@
  0003e	56		 push	 esi
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ?GC_Notice@CheatGuard@@QAAXPAUOBJECTSTRUCT@@PAD1ZZ ; CheatGuard::GC_Notice
  00045	83 c4 20	 add	 esp, 32			; 00000020H

; 119  : 		if (this->ModuleSpeedHack.InformPlayersAround)

  00048	80 bf 0d 01 00
	00 00		 cmp	 BYTE PTR [edi+269], 0
  0004f	74 08		 je	 SHORT $LN4@ProcSpeedH

; 120  : 		{
; 121  : 			this->GC_InformPlayersAround(lpUser);

  00051	56		 push	 esi
  00052	8b cf		 mov	 ecx, edi
  00054	e8 00 00 00 00	 call	 ?GC_InformPlayersAround@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z ; CheatGuard::GC_InformPlayersAround
$LN4@ProcSpeedH:

; 122  : 		}
; 123  : 	}
; 124  : 	if (AttackSpeed > lpUser->m_AttackSpeed)

  00059	0f b7 55 0c	 movzx	 edx, WORD PTR _AttackSpeed$[ebp]
  0005d	53		 push	 ebx
  0005e	8b 9e 6c 06 00
	00		 mov	 ebx, DWORD PTR [esi+1644]
  00064	3b d3		 cmp	 edx, ebx
  00066	7e 20		 jle	 SHORT $LN5@ProcSpeedH

; 125  : 	{
; 126  : 		Delta = AttackSpeed - lpUser->m_AttackSpeed;
; 127  : 
; 128  : 		if (Delta > this->ModuleSpeedHack.AttackSpeedMaxDelta)

  00068	0f bf 87 0e 01
	00 00		 movsx	 eax, WORD PTR [edi+270]
  0006f	8b ca		 mov	 ecx, edx
  00071	2b cb		 sub	 ecx, ebx
  00073	3b c8		 cmp	 ecx, eax
  00075	7e 6f		 jle	 SHORT $LN11@ProcSpeedH

; 129  : 		{
; 130  : 			lpUser->m_AttackSpeedHackDetectedCount++;
; 131  : 			this->Log->Output("[%s] [%s] Attack speed is edited (Client: %d, Server: %d)",

  00077	53		 push	 ebx
  00078	52		 push	 edx
  00079	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0007c	50		 push	 eax
  0007d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00080	50		 push	 eax
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@KPOAIMC@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Attack?5speed?5is?5edited@

; 132  : 				lpUser->AccountID, lpUser->Name, AttackSpeed, lpUser->m_AttackSpeed);
; 133  : 			this->GC_Notice(lpUser, "zCheatGuard", this->ModuleSpeedHack.Notice);
; 134  : 			if (this->ModuleSpeedHack.InformPlayersAround)
; 135  : 			{
; 136  : 				this->GC_InformPlayersAround(lpUser);
; 137  : 			}
; 138  : 		}
; 139  : 	}

  00086	eb 2c		 jmp	 SHORT $LN16@ProcSpeedH
$LN5@ProcSpeedH:

; 140  : 	else if (MagicSpeed > lpUser->m_MagicSpeed)

  00088	0f b7 55 10	 movzx	 edx, WORD PTR _MagicSpeed$[ebp]
  0008c	8b 9e 70 06 00
	00		 mov	 ebx, DWORD PTR [esi+1648]
  00092	3b d3		 cmp	 edx, ebx
  00094	7e 50		 jle	 SHORT $LN11@ProcSpeedH

; 141  : 	{
; 142  : 		Delta = MagicSpeed - lpUser->m_MagicSpeed;
; 143  : 
; 144  : 		if (Delta > this->ModuleSpeedHack.MagicSpeedMaxDelta)

  00096	0f bf 87 10 01
	00 00		 movsx	 eax, WORD PTR [edi+272]
  0009d	8b ca		 mov	 ecx, edx
  0009f	2b cb		 sub	 ecx, ebx
  000a1	3b c8		 cmp	 ecx, eax
  000a3	7e 41		 jle	 SHORT $LN11@ProcSpeedH

; 145  : 		{
; 146  : 			lpUser->m_AttackSpeedHackDetectedCount++;
; 147  : 			this->Log->Output("[%s] [%s] Magic speed is edited (Client: %d, Server: %d)",

  000a5	53		 push	 ebx
  000a6	52		 push	 edx
  000a7	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  000aa	50		 push	 eax
  000ab	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  000ae	50		 push	 eax
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@EFHENDBI@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Magic?5speed?5is?5edited?5@
$LN16@ProcSpeedH:
  000b4	fe 86 78 05 00
	00		 inc	 BYTE PTR [esi+1400]
  000ba	ff 77 04	 push	 DWORD PTR [edi+4]
  000bd	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output

; 148  : 				lpUser->AccountID, lpUser->Name, MagicSpeed, lpUser->m_MagicSpeed);
; 149  : 			this->GC_Notice(lpUser, "zCheatGuard", this->ModuleSpeedHack.Notice);

  000c2	8d 47 09	 lea	 eax, DWORD PTR [edi+9]
  000c5	50		 push	 eax
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CDEOCMAJ@zCheatGuard?$AA@
  000cb	56		 push	 esi
  000cc	57		 push	 edi
  000cd	e8 00 00 00 00	 call	 ?GC_Notice@CheatGuard@@QAAXPAUOBJECTSTRUCT@@PAD1ZZ ; CheatGuard::GC_Notice
  000d2	83 c4 28	 add	 esp, 40			; 00000028H

; 150  : 			if (this->ModuleSpeedHack.InformPlayersAround)

  000d5	80 bf 0d 01 00
	00 00		 cmp	 BYTE PTR [edi+269], 0
  000dc	74 08		 je	 SHORT $LN11@ProcSpeedH

; 151  : 			{
; 152  : 				this->GC_InformPlayersAround(lpUser);

  000de	56		 push	 esi
  000df	8b cf		 mov	 ecx, edi
  000e1	e8 00 00 00 00	 call	 ?GC_InformPlayersAround@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z ; CheatGuard::GC_InformPlayersAround
$LN11@ProcSpeedH:

; 153  : 			}
; 154  : 		}
; 155  : 	}
; 156  : 
; 157  : 	if (lpUser->m_AttackSpeedHackDetectedCount > ModuleSpeedHack.NoticeCount)

  000e6	0f b6 86 78 05
	00 00		 movzx	 eax, BYTE PTR [esi+1400]
  000ed	5b		 pop	 ebx
  000ee	66 3b 87 0a 01
	00 00		 cmp	 ax, WORD PTR [edi+266]
  000f5	7e 11		 jle	 SHORT $LN13@ProcSpeedH

; 158  : 	{
; 159  : 		if (this->ModuleSpeedHack.Disconnect)

  000f7	80 bf 0c 01 00
	00 00		 cmp	 BYTE PTR [edi+268], 0
  000fe	74 08		 je	 SHORT $LN13@ProcSpeedH

; 160  : 		{
; 161  : 			return false;

  00100	5f		 pop	 edi
  00101	32 c0		 xor	 al, al
  00103	5e		 pop	 esi

; 166  : 
; 167  : 	VM_END
; 168  : }

  00104	5d		 pop	 ebp
  00105	c2 10 00	 ret	 16			; 00000010H
$LN13@ProcSpeedH:
  00108	5f		 pop	 edi

; 162  : 		}
; 163  : 	}
; 164  : 
; 165  : 	return true;

  00109	b0 01		 mov	 al, 1
  0010b	5e		 pop	 esi

; 166  : 
; 167  : 	VM_END
; 168  : }

  0010c	5d		 pop	 ebp
  0010d	c2 10 00	 ret	 16			; 00000010H
?ProcSpeedHack@CheatGuard@@QAE_NPAUOBJECTSTRUCT@@GG_N@Z ENDP ; CheatGuard::ProcSpeedHack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?ProcCheckLive@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
?ProcCheckLive@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z PROC	; CheatGuard::ProcCheckLive, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 88   : 	VM_START
; 89   : 	lpUser->m_iCHECK_COUNT++;

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  00007	ff 86 2c 27 00
	00		 inc	 DWORD PTR [esi+10028]

; 90   : 
; 91   : 	if (lpUser->m_iCHECK_COUNT >= 60) {

  0000d	83 be 2c 27 00
	00 3c		 cmp	 DWORD PTR [esi+10028], 60 ; 0000003cH
  00014	7c 22		 jl	 SHORT $LN2@ProcCheckL

; 92   : 		this->Log->Output("[%s] [%s] Low response interval", lpUser->AccountID, lpUser->Name);

  00016	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00019	50		 push	 eax
  0001a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FHGMFOFH@?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Low?5response?5interval?$AA@
  00023	ff 71 04	 push	 DWORD PTR [ecx+4]
  00026	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  0002b	83 c4 10	 add	 esp, 16			; 00000010H

; 93   : #if (ENABLE_LIVEPROC_CHECK == 0)
; 94   : 		lpUser->m_iCHECK_COUNT = 0;

  0002e	c7 86 2c 27 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+10028], 0
$LN2@ProcCheckL:
  00038	5e		 pop	 esi

; 95   : #else
; 96   : 		CloseClient(lpUser->PerSocketContext, 0);
; 97   : #endif
; 98   : 	}
; 99   : 	VM_END
; 100  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?ProcCheckLive@CheatGuard@@QAEXPAUOBJECTSTRUCT@@@Z ENDP	; CheatGuard::ProcCheckLive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?Read@CheatGuard@@QAEXPAD@Z
_TEXT	SEGMENT
_Result$ = -308						; size = 12
$T2 = -296						; size = 4
$T3 = -292						; size = 4
$T4 = -288						; size = 4
$T5 = -284						; size = 4
$T6 = -280						; size = 4
$T7 = -276						; size = 4
$T8 = -272						; size = 4
$T9 = -268						; size = 4
$T10 = -264						; size = 4
$T11 = -260						; size = 4
$T12 = -256						; size = 4
$T13 = -252						; size = 4
$T14 = -248						; size = 4
$T15 = -244						; size = 4
$T16 = -240						; size = 4
$T17 = -236						; size = 4
$T18 = -232						; size = 4
_CheatGuard$ = -228					; size = 4
_Node$19 = -224						; size = 4
_Property$ = -220					; size = 4
_Document$ = -216					; size = 200
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_File$ = 8						; size = 4
?Read@CheatGuard@@QAEXPAD@Z PROC			; CheatGuard::Read, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@CheatGuard@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 01 00
	00		 sub	 esp, 296		; 00000128H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]

; 33   : 	VM_START
; 34   : 	xml_document Document;

  00032	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 35   : 	xml_parse_result Result = Document.load_file(File);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	56		 push	 esi
  00042	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 36   : 
; 37   : 	if (Result.status != status_ok)

  0005b	83 bd cc fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0

; 38   : 	{
; 39   : 		MsgBox("[CheatGuard] File %s not found!", File);

  00062	56		 push	 esi
  00063	74 12		 je	 SHORT $LN8@Read
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@NMOFCNHA@?$FLCheatGuard?$FN?5File?5?$CFs?5not?5found?$CB?$AA@
  0006a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0006f	83 c4 08	 add	 esp, 8
  00072	e9 d5 03 00 00	 jmp	 $LN3@Read
$LN8@Read:

; 40   : 		return;
; 41   : 	}
; 42   : 	
; 43   : 	this->Log->Output("Loading %s...", File);

  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DJLHLLB@Loading?5?$CFs?4?4?4?$AA@
  0007c	ff 77 04	 push	 DWORD PTR [edi+4]
  0007f	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH

; 44   : 
; 45   : 	xml_node CheatGuard = Document.child("cheatguard");

  00087	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _CheatGuard$[ebp]
  0008d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HMFBLIPO@cheatguard?$AA@
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 46   : 	xml_node Property;

  0009e	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  000a4	e8 00 00 00 00	 call	 ??0xml_node@pugi@@QAE@XZ ; pugi::xml_node::xml_node

; 47   : 
; 48   : 	for( xml_node Node = CheatGuard.child("module"); Node; Node = Node.next_sibling() )

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_06BIEEJMKO@module?$AA@
  000ae	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _Node$19[ebp]
  000b4	50		 push	 eax
  000b5	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _CheatGuard$[ebp]
  000bb	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000c0	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  000c6	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000cb	85 c0		 test	 eax, eax
  000cd	0f 84 79 03 00
	00		 je	 $LN3@Read
  000d3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@Read:

; 49   : 	{
; 50   : 		if (!strcmp(Node.attribute("name").as_string(), "SpeedHack"))

  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  000e5	68 00 00 00 00	 push	 OFFSET ??_C@_04MEMAJGDJ@name?$AA@
  000ea	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  000f0	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_09ELJEKNDN@SpeedHack?$AA@
  000f5	50		 push	 eax
  000f6	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  000fc	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00101	8b c8		 mov	 ecx, eax
  00103	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
$LL29@Read:
  00108	8a 08		 mov	 cl, BYTE PTR [eax]
  0010a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0010c	75 1a		 jne	 SHORT $LN30@Read
  0010e	84 c9		 test	 cl, cl
  00110	74 12		 je	 SHORT $LN31@Read
  00112	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00115	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00118	75 0e		 jne	 SHORT $LN30@Read
  0011a	83 c0 02	 add	 eax, 2
  0011d	83 c6 02	 add	 esi, 2
  00120	84 c9		 test	 cl, cl
  00122	75 e4		 jne	 SHORT $LL29@Read
$LN31@Read:
  00124	33 c0		 xor	 eax, eax
  00126	eb 05		 jmp	 SHORT $LN32@Read
$LN30@Read:
  00128	1b c0		 sbb	 eax, eax
  0012a	83 c8 01	 or	 eax, 1
$LN32@Read:
  0012d	85 c0		 test	 eax, eax
  0012f	0f 85 ea 02 00
	00		 jne	 $LN2@Read

; 51   : 		{
; 52   : 			this->ModuleSpeedHack.Enabled = true;
; 53   : 			this->Log->Output("Module %s is activated",

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0013a	68 00 00 00 00	 push	 OFFSET ??_C@_04MEMAJGDJ@name?$AA@
  0013f	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  00145	c6 47 08 01	 mov	 BYTE PTR [edi+8], 1
  00149	50		 push	 eax
  0014a	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  00150	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00155	8b c8		 mov	 ecx, eax
  00157	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
  0015c	50		 push	 eax
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OKAMJDPP@Module?5?$CFs?5is?5activated?$AA@
  00162	ff 77 04	 push	 DWORD PTR [edi+4]
  00165	e8 00 00 00 00	 call	 ?Output@CLogToFile@@QAAXPADZZ ; CLogToFile::Output
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   : 				Node.attribute("name").as_string());
; 55   : 			
; 56   : 			strcpy(this->ModuleSpeedHack.Notice, Node.child("notice").text().as_string());

  0016d	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00173	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  00179	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0017e	50		 push	 eax
  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_06FINPLOKL@notice?$AA@
  00184	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  00190	8b c8		 mov	 ecx, eax
  00192	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  00197	8b c8		 mov	 ecx, eax
  00199	e8 00 00 00 00	 call	 ?as_string@xml_text@pugi@@QBEPBDPBD@Z ; pugi::xml_text::as_string
  0019e	8b d7		 mov	 edx, edi
  001a0	2b d0		 sub	 edx, eax
$LL15@Read:
  001a2	8a 08		 mov	 cl, BYTE PTR [eax]
  001a4	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  001a7	88 4c 02 08	 mov	 BYTE PTR [edx+eax+8], cl
  001ab	84 c9		 test	 cl, cl
  001ad	75 f3		 jne	 SHORT $LL15@Read

; 57   : 			this->ModuleSpeedHack.NoticeCount = Node.child("notice").attribute("count").as_int(0);

  001af	6a 00		 push	 0
  001b1	68 00 00 00 00	 push	 OFFSET ??_C@_05IOMEMJEC@count?$AA@
  001b6	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  001bc	50		 push	 eax
  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_06FINPLOKL@notice?$AA@
  001c2	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  001c8	50		 push	 eax
  001c9	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  001cf	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  001d4	8b c8		 mov	 ecx, eax
  001d6	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001db	8b c8		 mov	 ecx, eax
  001dd	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  001e2	66 89 87 0a 01
	00 00		 mov	 WORD PTR [edi+266], ax

; 58   : 			
; 59   : 			for( Property = Node.child("property"); Property; Property = Property.next_sibling() )

  001e9	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  001ef	68 00 00 00 00	 push	 OFFSET ??_C@_08EMBNBNLN@property?$AA@
  001f4	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  001fa	50		 push	 eax
  001fb	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  00200	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  00206	8b 00		 mov	 eax, DWORD PTR [eax]
  00208	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Property$[ebp], eax
  0020e	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  00213	85 c0		 test	 eax, eax
  00215	0f 84 04 02 00
	00		 je	 $LN2@Read
  0021b	0f 1f 44 00 00	 npad	 5
$LL7@Read:

; 60   : 			{
; 61   : 				if (!strcmp(Property.attribute("name").as_string(), "Disconnect"))

  00220	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00225	68 00 00 00 00	 push	 OFFSET ??_C@_04MEMAJGDJ@name?$AA@
  0022a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00230	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0L@CMGJAGDM@Disconnect?$AA@
  00235	50		 push	 eax
  00236	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  0023c	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00241	8b c8		 mov	 ecx, eax
  00243	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
$LL33@Read:
  00248	8a 08		 mov	 cl, BYTE PTR [eax]
  0024a	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0024c	75 1a		 jne	 SHORT $LN34@Read
  0024e	84 c9		 test	 cl, cl
  00250	74 12		 je	 SHORT $LN35@Read
  00252	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00255	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00258	75 0e		 jne	 SHORT $LN34@Read
  0025a	83 c0 02	 add	 eax, 2
  0025d	83 c6 02	 add	 esi, 2
  00260	84 c9		 test	 cl, cl
  00262	75 e4		 jne	 SHORT $LL33@Read
$LN35@Read:
  00264	33 c0		 xor	 eax, eax
  00266	eb 05		 jmp	 SHORT $LN36@Read
$LN34@Read:
  00268	1b c0		 sbb	 eax, eax
  0026a	83 c8 01	 or	 eax, 1
$LN36@Read:
  0026d	85 c0		 test	 eax, eax
  0026f	75 25		 jne	 SHORT $LN10@Read

; 62   : 				{
; 63   : 					this->ModuleSpeedHack.Disconnect = Property.text().as_int(0);

  00271	50		 push	 eax
  00272	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00278	50		 push	 eax
  00279	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  0027f	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  00284	8b c8		 mov	 ecx, eax
  00286	e8 00 00 00 00	 call	 ?as_int@xml_text@pugi@@QBEHH@Z ; pugi::xml_text::as_int
  0028b	85 c0		 test	 eax, eax
  0028d	0f 95 c0	 setne	 al
  00290	88 87 0c 01 00
	00		 mov	 BYTE PTR [edi+268], al
$LN10@Read:

; 64   : 				}
; 65   : 
; 66   : 				if (!strcmp(Property.attribute("name").as_string(), "InformPlayersAround"))

  00296	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  0029b	68 00 00 00 00	 push	 OFFSET ??_C@_04MEMAJGDJ@name?$AA@
  002a0	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  002a6	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BE@JGOKGICA@InformPlayersAround?$AA@
  002ab	50		 push	 eax
  002ac	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  002b2	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  002b7	8b c8		 mov	 ecx, eax
  002b9	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
  002be	66 90		 npad	 2
$LL37@Read:
  002c0	8a 08		 mov	 cl, BYTE PTR [eax]
  002c2	3a 0e		 cmp	 cl, BYTE PTR [esi]
  002c4	75 1a		 jne	 SHORT $LN38@Read
  002c6	84 c9		 test	 cl, cl
  002c8	74 12		 je	 SHORT $LN39@Read
  002ca	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  002cd	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  002d0	75 0e		 jne	 SHORT $LN38@Read
  002d2	83 c0 02	 add	 eax, 2
  002d5	83 c6 02	 add	 esi, 2
  002d8	84 c9		 test	 cl, cl
  002da	75 e4		 jne	 SHORT $LL37@Read
$LN39@Read:
  002dc	33 c0		 xor	 eax, eax
  002de	eb 05		 jmp	 SHORT $LN40@Read
$LN38@Read:
  002e0	1b c0		 sbb	 eax, eax
  002e2	83 c8 01	 or	 eax, 1
$LN40@Read:
  002e5	85 c0		 test	 eax, eax
  002e7	75 25		 jne	 SHORT $LN11@Read

; 67   : 				{
; 68   : 					this->ModuleSpeedHack.InformPlayersAround = Property.text().as_int(0);

  002e9	50		 push	 eax
  002ea	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  002f0	50		 push	 eax
  002f1	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  002f7	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  002fc	8b c8		 mov	 ecx, eax
  002fe	e8 00 00 00 00	 call	 ?as_int@xml_text@pugi@@QBEHH@Z ; pugi::xml_text::as_int
  00303	85 c0		 test	 eax, eax
  00305	0f 95 c0	 setne	 al
  00308	88 87 0d 01 00
	00		 mov	 BYTE PTR [edi+269], al
$LN11@Read:

; 69   : 				}
; 70   : 
; 71   : 				if (!strcmp(Property.attribute("name").as_string(), "AttackSpeedMaxDelta"))

  0030e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00313	68 00 00 00 00	 push	 OFFSET ??_C@_04MEMAJGDJ@name?$AA@
  00318	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0031e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BE@FENNPJJI@AttackSpeedMaxDelta?$AA@
  00323	50		 push	 eax
  00324	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  0032a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0032f	8b c8		 mov	 ecx, eax
  00331	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
$LL41@Read:
  00336	8a 08		 mov	 cl, BYTE PTR [eax]
  00338	3a 0e		 cmp	 cl, BYTE PTR [esi]
  0033a	75 1a		 jne	 SHORT $LN42@Read
  0033c	84 c9		 test	 cl, cl
  0033e	74 12		 je	 SHORT $LN43@Read
  00340	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00343	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  00346	75 0e		 jne	 SHORT $LN42@Read
  00348	83 c0 02	 add	 eax, 2
  0034b	83 c6 02	 add	 esi, 2
  0034e	84 c9		 test	 cl, cl
  00350	75 e4		 jne	 SHORT $LL41@Read
$LN43@Read:
  00352	33 c0		 xor	 eax, eax
  00354	eb 05		 jmp	 SHORT $LN44@Read
$LN42@Read:
  00356	1b c0		 sbb	 eax, eax
  00358	83 c8 01	 or	 eax, 1
$LN44@Read:
  0035b	85 c0		 test	 eax, eax
  0035d	75 21		 jne	 SHORT $LN12@Read

; 72   : 				{
; 73   : 					this->ModuleSpeedHack.AttackSpeedMaxDelta = Property.text().as_int(0);

  0035f	50		 push	 eax
  00360	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00366	50		 push	 eax
  00367	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  0036d	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  00372	8b c8		 mov	 ecx, eax
  00374	e8 00 00 00 00	 call	 ?as_int@xml_text@pugi@@QBEHH@Z ; pugi::xml_text::as_int
  00379	66 89 87 0e 01
	00 00		 mov	 WORD PTR [edi+270], ax
$LN12@Read:

; 74   : 				}
; 75   : 
; 76   : 				if (!strcmp(Property.attribute("name").as_string(), "MagicSpeedMaxDelta"))

  00380	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00385	68 00 00 00 00	 push	 OFFSET ??_C@_04MEMAJGDJ@name?$AA@
  0038a	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00390	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BD@GMENBMLF@MagicSpeedMaxDelta?$AA@
  00395	50		 push	 eax
  00396	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  0039c	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  003a1	8b c8		 mov	 ecx, eax
  003a3	e8 00 00 00 00	 call	 ?as_string@xml_attribute@pugi@@QBEPBDPBD@Z ; pugi::xml_attribute::as_string
$LL45@Read:
  003a8	8a 08		 mov	 cl, BYTE PTR [eax]
  003aa	3a 0e		 cmp	 cl, BYTE PTR [esi]
  003ac	75 1a		 jne	 SHORT $LN46@Read
  003ae	84 c9		 test	 cl, cl
  003b0	74 12		 je	 SHORT $LN47@Read
  003b2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  003b5	3a 4e 01	 cmp	 cl, BYTE PTR [esi+1]
  003b8	75 0e		 jne	 SHORT $LN46@Read
  003ba	83 c0 02	 add	 eax, 2
  003bd	83 c6 02	 add	 esi, 2
  003c0	84 c9		 test	 cl, cl
  003c2	75 e4		 jne	 SHORT $LL45@Read
$LN47@Read:
  003c4	33 c0		 xor	 eax, eax
  003c6	eb 05		 jmp	 SHORT $LN48@Read
$LN46@Read:
  003c8	1b c0		 sbb	 eax, eax
  003ca	83 c8 01	 or	 eax, 1
$LN48@Read:
  003cd	85 c0		 test	 eax, eax
  003cf	75 21		 jne	 SHORT $LN5@Read

; 77   : 				{
; 78   : 					this->ModuleSpeedHack.MagicSpeedMaxDelta = Property.text().as_int(0);

  003d1	50		 push	 eax
  003d2	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  003d8	50		 push	 eax
  003d9	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  003df	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  003e4	8b c8		 mov	 ecx, eax
  003e6	e8 00 00 00 00	 call	 ?as_int@xml_text@pugi@@QBEHH@Z ; pugi::xml_text::as_int
  003eb	66 89 87 10 01
	00 00		 mov	 WORD PTR [edi+272], ax
$LN5@Read:

; 58   : 			
; 59   : 			for( Property = Node.child("property"); Property; Property = Property.next_sibling() )

  003f2	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003f8	50		 push	 eax
  003f9	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  003ff	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  00404	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Property$[ebp]
  0040a	8b 00		 mov	 eax, DWORD PTR [eax]
  0040c	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Property$[ebp], eax
  00412	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  00417	85 c0		 test	 eax, eax
  00419	0f 85 01 fe ff
	ff		 jne	 $LL7@Read
$LN2@Read:

; 47   : 
; 48   : 	for( xml_node Node = CheatGuard.child("module"); Node; Node = Node.next_sibling() )

  0041f	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00425	50		 push	 eax
  00426	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  0042c	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  00431	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$19[ebp]
  00437	8b 00		 mov	 eax, DWORD PTR [eax]
  00439	89 85 20 ff ff
	ff		 mov	 DWORD PTR _Node$19[ebp], eax
  0043f	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  00444	85 c0		 test	 eax, eax
  00446	0f 85 94 fc ff
	ff		 jne	 $LL4@Read
$LN3@Read:

; 79   : 				}
; 80   : 			}			
; 81   : 		}
; 82   : 	}
; 83   : 	VM_END
; 84   : }

  0044c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00452	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  00457	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0045a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00461	59		 pop	 ecx
  00462	5f		 pop	 edi
  00463	5e		 pop	 esi
  00464	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00467	33 cd		 xor	 ecx, ebp
  00469	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0046e	8b e5		 mov	 esp, ebp
  00470	5d		 pop	 ebp
  00471	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@CheatGuard@@QAEXPAD@Z$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Read@CheatGuard@@QAEXPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a cc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-308]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@CheatGuard@@QAEXPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@CheatGuard@@QAEXPAD@Z ENDP			; CheatGuard::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?Load@CheatGuard@@QAEXXZ
_TEXT	SEGMENT
?Load@CheatGuard@@QAEXXZ PROC				; CheatGuard::Load, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 27   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@CheatGuard@@QAEXXZ ; CheatGuard::Init

; 28   : 	this->Read(gDirPath.GetNewPath(FILE_CHEATGUARD));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MJECMHLO@CheatGuard?4xml?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@CheatGuard@@QAEXPAD@Z ; CheatGuard::Read
  0001f	5e		 pop	 esi

; 29   : }

  00020	c3		 ret	 0
?Load@CheatGuard@@QAEXXZ ENDP				; CheatGuard::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?Init@CheatGuard@@QAEXXZ
_TEXT	SEGMENT
?Init@CheatGuard@@QAEXXZ PROC				; CheatGuard::Init, COMDAT
; _this$ = ecx

; 22   : 	ZeroMemory(&this->ModuleSpeedHack, sizeof(this->ModuleSpeedHack));

  00000	68 0a 01 00 00	 push	 266			; 0000010aH
  00005	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00008	6a 00		 push	 0
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _memset
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 23   : }

  00013	c3		 ret	 0
?Init@CheatGuard@@QAEXXZ ENDP				; CheatGuard::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ??1CheatGuard@@UAE@XZ
_TEXT	SEGMENT
??1CheatGuard@@UAE@XZ PROC				; CheatGuard::~CheatGuard, COMDAT
; _this$ = ecx

; 16   : {

  00000	56		 push	 esi

; 17   : 	delete this->Log;

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CheatGuard@@6B@
  0000a	85 f6		 test	 esi, esi
  0000c	74 15		 je	 SHORT $LN6@CheatGuard
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ??1CLogToFile@@QAE@XZ	; CLogToFile::~CLogToFile
  00015	68 28 02 01 00	 push	 66088			; 00010228H
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
$LN6@CheatGuard:
  00023	5e		 pop	 esi

; 18   : }

  00024	c3		 ret	 0
??1CheatGuard@@UAE@XZ ENDP				; CheatGuard::~CheatGuard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ??0CheatGuard@@QAE@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CheatGuard@@QAE@XZ PROC				; CheatGuard::CheatGuard, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CheatGuard@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 12   : 	this->Log = new CLogToFile(LOG_NAME_CHEATGUARD, LOG_PATH_CHEATGUARD, TRUE);

  00026	68 28 02 01 00	 push	 66088			; 00010228H
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CheatGuard@@6B@
  00031	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00036	83 c4 04	 add	 esp, 4
  00039	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0003c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	85 c0		 test	 eax, eax
  00045	74 28		 je	 SHORT $LN3@CheatGuard
  00047	6a 01		 push	 1
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EAEDIBED@?4?2Log?2CheatGuard?$AA@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PNGBDCBP@CheatGuard?$AA@
  00053	8b c8		 mov	 ecx, eax
  00055	e8 00 00 00 00	 call	 ??0CLogToFile@@QAE@QAD0H@Z ; CLogToFile::CLogToFile
  0005a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 13   : }

  0005d	8b c6		 mov	 eax, esi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5e		 pop	 esi
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
$LN3@CheatGuard:

; 12   : 	this->Log = new CLogToFile(LOG_NAME_CHEATGUARD, LOG_PATH_CHEATGUARD, TRUE);

  0006f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 13   : }

  00076	8b c6		 mov	 eax, esi
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5e		 pop	 esi
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CheatGuard@@QAE@XZ$0:
  00000	68 28 02 01 00	 push	 66088			; 00010228H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$??0CheatGuard@@QAE@XZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CheatGuard@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CheatGuard@@QAE@XZ ENDP				; CheatGuard::CheatGuard
; Function compile flags: /Ogtp
;	COMDAT ??_GCLogToFile@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLogToFile@@QAEPAXI@Z PROC				; CLogToFile::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLogToFile@@QAE@XZ	; CLogToFile::~CLogToFile
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 28 02 01 00	 push	 66088			; 00010228H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCLogToFile@@QAEPAXI@Z ENDP				; CLogToFile::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD2@@QAEXPAEEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_sub$ = 16						; size = 1
_size$ = 20						; size = 1
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z PROC			; PBMSG_HEAD2::set, COMDAT
; _this$ = ecx

; 139  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : 		lpBuf[0] = 0xC1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 141  : 		lpBuf[1] = size;

  00006	8a 45 14	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 142  : 		lpBuf[2] = head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 143  : 		lpBuf[3] = sub;

  00012	8a 45 10	 mov	 al, BYTE PTR _sub$[ebp]
  00015	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00018	88 41 03	 mov	 BYTE PTR [ecx+3], al

; 144  : 	};

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?set@PBMSG_HEAD2@@QAEXPAEEEE@Z ENDP			; PBMSG_HEAD2::set
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char *>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@PAD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 10	 push	 DWORD PTR __ArgList$[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000b	6a ff		 push	 -1
  0000d	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00010	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	83 c9 01	 or	 ecx, 1
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00023	83 c9 ff	 or	 ecx, -1
  00026	83 c4 1c	 add	 esp, 28			; 0000001cH
  00029	85 c0		 test	 eax, eax
  0002b	0f 48 c1	 cmovs	 eax, ecx

; 1474 :     #pragma warning(push)
; 1475 :     #pragma warning(disable: 4996) // Deprecation
; 1476 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);
; 1477 :     #pragma warning(pop)
; 1478 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 253  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cheatguard.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 253  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
