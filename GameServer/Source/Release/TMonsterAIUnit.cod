; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\TMonsterAIUnit.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_bDataLoad@TMonsterAIUnit@@2HA		; TMonsterAIUnit::s_bDataLoad
_BSS	SEGMENT
?s_bDataLoad@TMonsterAIUnit@@2HA DD 01H DUP (?)		; TMonsterAIUnit::s_bDataLoad
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0TMonsterAIUnit@@QAE@XZ			; TMonsterAIUnit::TMonsterAIUnit
PUBLIC	??1TMonsterAIUnit@@UAE@XZ			; TMonsterAIUnit::~TMonsterAIUnit
PUBLIC	?RunAIUnit@TMonsterAIUnit@@QAEHH@Z		; TMonsterAIUnit::RunAIUnit
PUBLIC	?Reset@TMonsterAIUnit@@QAEXXZ			; TMonsterAIUnit::Reset
PUBLIC	?LoadData@TMonsterAIUnit@@SAHPAD@Z		; TMonsterAIUnit::LoadData
PUBLIC	?DelAllAIUnit@TMonsterAIUnit@@SAHXZ		; TMonsterAIUnit::DelAllAIUnit
PUBLIC	?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z		; TMonsterAIUnit::FindAIUnit
PUBLIC	??_GTMonsterAIUnit@@UAEPAXI@Z			; TMonsterAIUnit::`scalar deleting destructor'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A	; TMonsterAIUnit::s_MonsterAIUnitArray
PUBLIC	??_7TMonsterAIUnit@@6B@				; TMonsterAIUnit::`vftable'
PUBLIC	??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@ ; `string'
PUBLIC	??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@ ; `string'
PUBLIC	??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@ ; `string'
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
PUBLIC	??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@ ; `string'
PUBLIC	??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@ ; `string'
PUBLIC	??_R4TMonsterAIUnit@@6B@			; TMonsterAIUnit::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIUnit@@@8			; TMonsterAIUnit `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIUnit@@8				; TMonsterAIUnit::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIUnit@@8				; TMonsterAIUnit::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIUnit@@8			; TMonsterAIUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z:PROC ; TMonsterAIAutomata::RunAutomata
EXTRN	?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z:PROC ; TMonsterAIAutomata::FindAutomata
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?ForceAIElement@TMonsterAIElement@@QAEHHHPAVTMonsterAIState@@@Z:PROC ; TMonsterAIElement::ForceAIElement
EXTRN	?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z:PROC ; TMonsterAIElement::FindAIElement
EXTRN	??_ETMonsterAIUnit@@UAEPAXI@Z:PROC		; TMonsterAIUnit::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A DB 03390H DUP (?) ; TMonsterAIUnit::s_MonsterAIUnitArray
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
??s_MonsterAIUnitArray$initializer$@TMonsterAIUnit@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ; ??s_MonsterAIUnitArray$initializer$@TMonsterAIUnit@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@TMonsterAIUnit@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIUnit@@8 DD FLAT:??_R0?AVTMonsterAIUnit@@@8 ; TMonsterAIUnit::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIUnit@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIUnit@@8
rdata$r	SEGMENT
??_R2TMonsterAIUnit@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIUnit@@8 ; TMonsterAIUnit::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIUnit@@8
rdata$r	SEGMENT
??_R3TMonsterAIUnit@@8 DD 00H				; TMonsterAIUnit::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIUnit@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIUnit@@@8
data$r	SEGMENT
??_R0?AVTMonsterAIUnit@@@8 DD FLAT:??_7type_info@@6B@	; TMonsterAIUnit `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIUnit@@', 00H
data$r	ENDS
;	COMDAT ??_R4TMonsterAIUnit@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIUnit@@6B@ DD 00H				; TMonsterAIUnit::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIUnit@@@8
	DD	FLAT:??_R3TMonsterAIUnit@@8
rdata$r	ENDS
;	COMDAT ??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@
CONST	SEGMENT
??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@ DB '['
	DB	'Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@
CONST	SEGMENT
??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@ DB '[Mon'
	DB	'ster AI Unit] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0K@8
data$r	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
data$r	ENDS
;	COMDAT ??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@
CONST	SEGMENT
??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@ DB '['
	DB	'Monster AI Unit] - %s file is Loaded', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@
CONST	SEGMENT
??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@ DB '[Mons'
	DB	'ter AI Unit] - AutomatNumber(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@
CONST	SEGMENT
??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@ DB '['
	DB	'Monster AI Unit] - UnitNumber(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@
CONST	SEGMENT
??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@ DB '['
	DB	'Monster AI Unit] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@
CONST	SEGMENT
??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@ DB '[Mo'
	DB	'nster AI Unit] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7TMonsterAIUnit@@6B@
CONST	SEGMENT
??_7TMonsterAIUnit@@6B@ DD FLAT:??_R4TMonsterAIUnit@@6B@ ; TMonsterAIUnit::`vftable'
	DD	FLAT:??_ETMonsterAIUnit@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIUnit@@SAHPAD@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIUnit@@SAHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIUnit@@SAHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIUnit@@SAHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIUnit@@SAHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIUnit@@SAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIUnit@@SAHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIUnit@@SAHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ
text$yd	SEGMENT
??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ PROC ; `dynamic atexit destructor for 'TMonsterAIUnit::s_MonsterAIUnitArray'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIUnit@@UAE@XZ ; TMonsterAIUnit::~TMonsterAIUnit
  00005	6a 64		 push	 100			; 00000064H
  00007	68 84 00 00 00	 push	 132			; 00000084H
  0000c	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A ; TMonsterAIUnit::s_MonsterAIUnitArray
  00011	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00016	c3		 ret	 0
??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'TMonsterAIUnit::s_MonsterAIUnitArray''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ
text$di	SEGMENT
??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ PROC ; `dynamic initializer for 'TMonsterAIUnit::s_MonsterAIUnitArray'', COMDAT

; 14   : TMonsterAIUnit TMonsterAIUnit::s_MonsterAIUnitArray[MAX_MONSTER_AI_UNIT];

  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIUnit@@UAE@XZ ; TMonsterAIUnit::~TMonsterAIUnit
  00005	68 00 00 00 00	 push	 OFFSET ??0TMonsterAIUnit@@QAE@XZ ; TMonsterAIUnit::TMonsterAIUnit
  0000a	6a 64		 push	 100			; 00000064H
  0000c	68 84 00 00 00	 push	 132			; 00000084H
  00011	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A ; TMonsterAIUnit::s_MonsterAIUnitArray
  00016	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0001b	68 00 00 00 00	 push	 OFFSET ??__F?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ; `dynamic atexit destructor for 'TMonsterAIUnit::s_MonsterAIUnitArray''
  00020	e8 00 00 00 00	 call	 _atexit
  00025	59		 pop	 ecx
  00026	c3		 ret	 0
??__E?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A@@YAXXZ ENDP ; `dynamic initializer for 'TMonsterAIUnit::s_MonsterAIUnitArray''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIUnit@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIUnit@@UAEPAXI@Z PROC			; TMonsterAIUnit::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIUnit@@UAE@XZ ; TMonsterAIUnit::~TMonsterAIUnit
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 84 00 00 00	 push	 132			; 00000084H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GTMonsterAIUnit@@UAEPAXI@Z ENDP			; TMonsterAIUnit::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z
_TEXT	SEGMENT
_iUnitNumber$ = 8					; size = 4
?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z PROC		; TMonsterAIUnit::FindAIUnit, COMDAT

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 	if ( iUnitNumber < 0 || iUnitNumber >= MAX_MONSTER_AI_UNIT )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iUnitNumber$[ebp]
  00006	83 f8 63	 cmp	 eax, 99			; 00000063H
  00009	77 16		 ja	 SHORT $LN3@FindAIUnit

; 210  : 	}
; 211  : 
; 212  : 	if ( TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_iUnitNumber == iUnitNumber )

  0000b	69 c8 84 00 00
	00		 imul	 ecx, eax, 132
  00011	39 81 38 00 00
	00		 cmp	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[ecx+56], eax
  00017	75 08		 jne	 SHORT $LN3@FindAIUnit

; 213  : 	{
; 214  : 		return &TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber];

  00019	8d 81 00 00 00
	00		 lea	 eax, DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[ecx]

; 215  : 	}
; 216  : 
; 217  : 	LogAddTD("[Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ",
; 218  : 		iUnitNumber);
; 219  : 
; 220  : 	return NULL;
; 221  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@FindAIUnit:

; 205  : 	{
; 206  : 		LogAddTD("[Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ",

  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@EJBAFJF@?$FLMonster?5AI?5Unit?$FN?5FindAIUnit?$CI?$CJ?5E@
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002d	83 c4 08	 add	 esp, 8

; 207  : 			iUnitNumber);
; 208  : 
; 209  : 		return NULL;

  00030	33 c0		 xor	 eax, eax

; 215  : 	}
; 216  : 
; 217  : 	LogAddTD("[Monster AI Unit] FindAIUnit() Error - (UnitNumber=%d) ",
; 218  : 		iUnitNumber);
; 219  : 
; 220  : 	return NULL;
; 221  : }

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?FindAIUnit@TMonsterAIUnit@@SAPAV1@H@Z ENDP		; TMonsterAIUnit::FindAIUnit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?DelAllAIUnit@TMonsterAIUnit@@SAHXZ
_TEXT	SEGMENT
?DelAllAIUnit@TMonsterAIUnit@@SAHXZ PROC		; TMonsterAIUnit::DelAllAIUnit, COMDAT

; 192  : {

  00000	56		 push	 esi

; 193  : 	for (int i=0;i<MAX_MONSTER_AI_UNIT;i++)

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A ; TMonsterAIUnit::s_MonsterAIUnitArray
$LL4@DelAllAIUn:

; 194  : 	{
; 195  : 		TMonsterAIUnit::s_MonsterAIUnitArray[i].Reset();

  00006	8b ce		 mov	 ecx, esi
  00008	e8 00 00 00 00	 call	 ?Reset@TMonsterAIUnit@@QAEXXZ ; TMonsterAIUnit::Reset
  0000d	81 c6 84 00 00
	00		 add	 esi, 132		; 00000084H
  00013	81 fe 90 33 00
	00		 cmp	 esi, OFFSET ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A+13200
  00019	7c eb		 jl	 SHORT $LL4@DelAllAIUn

; 196  : 	}
; 197  : 
; 198  : 	return FALSE;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 199  : }

  0001e	c3		 ret	 0
?DelAllAIUnit@TMonsterAIUnit@@SAHXZ ENDP		; TMonsterAIUnit::DelAllAIUnit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?LoadData@TMonsterAIUnit@@SAHPAD@Z
_TEXT	SEGMENT
_szUnitName$2 = -124					; size = 50
_szUnitName$1$ = -72					; size = 16
_iAIClassEvent$1$ = -56					; size = 4
_iAIClassSpecial$1$ = -52				; size = 4
_iAIClassHelp$1$ = -48					; size = 4
_iAIClassAvoid$1$ = -44					; size = 4
_iAIClassHeal$1$ = -40					; size = 4
_iAIClassAttack$1$ = -36				; size = 4
_iAIClassMove$1$ = -32					; size = 4
_iAIClassNormal$1$ = -28				; size = 4
_iDelayTime$1$ = -24					; size = 4
_iType$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIUnit@@SAHPAD@Z PROC			; TMonsterAIUnit::LoadData, COMDAT

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIUnit@@SAHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 57   : 	TMonsterAIUnit::s_bDataLoad = FALSE;
; 58   : 
; 59   : 	if ( !lpszFileName || !strcmp(lpszFileName, ""))

  0002b	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  0002e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIUnit@@2HA, 0 ; TMonsterAIUnit::s_bDataLoad
  00038	85 f6		 test	 esi, esi
  0003a	0f 84 18 03 00
	00		 je	 $LN7@LoadData
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00045	8b c6		 mov	 eax, esi
$LL30@LoadData:
  00047	8a 10		 mov	 dl, BYTE PTR [eax]
  00049	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0004b	75 1a		 jne	 SHORT $LN31@LoadData
  0004d	84 d2		 test	 dl, dl
  0004f	74 12		 je	 SHORT $LN32@LoadData
  00051	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00054	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00057	75 0e		 jne	 SHORT $LN31@LoadData
  00059	83 c0 02	 add	 eax, 2
  0005c	83 c1 02	 add	 ecx, 2
  0005f	84 d2		 test	 dl, dl
  00061	75 e4		 jne	 SHORT $LL30@LoadData
$LN32@LoadData:
  00063	33 c0		 xor	 eax, eax
  00065	eb 05		 jmp	 SHORT $LN33@LoadData
$LN31@LoadData:
  00067	1b c0		 sbb	 eax, eax
  00069	83 c8 01	 or	 eax, 1
$LN33@LoadData:
  0006c	85 c0		 test	 eax, eax
  0006e	0f 84 e4 02 00
	00		 je	 $LN7@LoadData

; 63   : 	}
; 64   : 
; 65   : 	try
; 66   : 	{
; 67   : 		SMDToken Token;
; 68   : 		SMDFile = fopen(lpszFileName, "r");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00079	56		 push	 esi
  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00081	e8 00 00 00 00	 call	 _fopen
  00086	83 c4 08	 add	 esp, 8
  00089	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 69   : 
; 70   : 		if ( SMDFile == NULL )

  0008e	85 c0		 test	 eax, eax
  00090	75 22		 jne	 SHORT $LN9@LoadData

; 71   : 		{
; 72   : 			MsgBox("[Monster AI Unit] - Can't Open %s ", lpszFileName);

  00092	56		 push	 esi
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@KLPHJBLC@?$FLMonster?5AI?5Unit?$FN?5?9?5Can?8t?5Open?5?$CF@
  00098	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0009d	83 c4 08	 add	 esp, 8
  000a0	33 c0		 xor	 eax, eax

; 186  : 
; 187  : 	return FALSE;
; 188  : }

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	5b		 pop	 ebx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
$LN9@LoadData:

; 73   : 			return FALSE;
; 74   : 		}
; 75   : 
; 76   : 		TMonsterAIUnit::DelAllAIUnit();

  000b4	e8 00 00 00 00	 call	 ?DelAllAIUnit@TMonsterAIUnit@@SAHXZ ; TMonsterAIUnit::DelAllAIUnit
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@LoadData:

; 77   : 		int iType = -1;
; 78   : 
; 79   : 		while ( true )
; 80   : 		{
; 81   : 			Token = GetToken();

  000c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 82   : 
; 83   : 			if ( Token == END )

  000c5	83 f8 02	 cmp	 eax, 2
  000c8	75 3a		 jne	 SHORT $LN10@LoadData

; 171  : 						szUnitName, sizeof(TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_szUnitName));
; 172  : 				}
; 173  : 			}
; 174  : 		}
; 175  : 
; 176  : 		fclose(SMDFile);

  000ca	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000d0	e8 00 00 00 00	 call	 _fclose

; 177  : 
; 178  : 		LogAddC(2, "[Monster AI Unit] - %s file is Loaded", lpszFileName);

  000d5	56		 push	 esi
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BFGLJJPL@?$FLMonster?5AI?5Unit?$FN?5?9?5?$CFs?5file?5is?5L@
  000db	6a 02		 push	 2
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000e3	83 c4 10	 add	 esp, 16			; 00000010H

; 179  : 
; 180  : 		TMonsterAIUnit::s_bDataLoad = TRUE;

  000e6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIUnit@@2HA, 1 ; TMonsterAIUnit::s_bDataLoad
  000f0	33 c0		 xor	 eax, eax

; 186  : 
; 187  : 	return FALSE;
; 188  : }

  000f2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fc	59		 pop	 ecx
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN10@LoadData:

; 84   : 				break;
; 85   : 
; 86   : 			iType = (int)TokenNumber;

  00104	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0010c	89 45 ec	 mov	 DWORD PTR _iType$1$[ebp], eax
  0010f	90		 npad	 1
$LL4@LoadData:

; 87   : 
; 88   : 			while ( true )
; 89   : 			{
; 90   : 				if ( iType == 0 )

  00110	85 c0		 test	 eax, eax
  00112	75 fc		 jne	 SHORT $LL4@LoadData

; 91   : 				{
; 92   : 					char szUnitName[50]={0};
; 93   : 					int iUnitNumber = -1;
; 94   : 					int iDelayTime = 0;
; 95   : 					int iAutomata = -1;
; 96   : 					int iAIClassNormal = -1;
; 97   : 					int iAIClassMove = -1;
; 98   : 					int iAIClassAttack = -1;
; 99   : 					int iAIClassHeal = -1;
; 100  : 					int iAIClassAvoid = -1;
; 101  : 					int iAIClassHelp = -1;
; 102  : 					int iAIClassSpecial = -1;
; 103  : 					int iAIClassEvent = -1;
; 104  : 
; 105  : 					Token = GetToken();

  00114	6a 32		 push	 50			; 00000032H
  00116	50		 push	 eax
  00117	8d 45 84	 lea	 eax, DWORD PTR _szUnitName$2[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 _memset
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH
  00123	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 106  : 
; 107  : 					if ( !strcmp("end", TokenString))

  00128	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0012d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL34@LoadData:
  00132	8a 10		 mov	 dl, BYTE PTR [eax]
  00134	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00136	75 1a		 jne	 SHORT $LN35@LoadData
  00138	84 d2		 test	 dl, dl
  0013a	74 12		 je	 SHORT $LN36@LoadData
  0013c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0013f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00142	75 0e		 jne	 SHORT $LN35@LoadData
  00144	83 c0 02	 add	 eax, 2
  00147	83 c1 02	 add	 ecx, 2
  0014a	84 d2		 test	 dl, dl
  0014c	75 e4		 jne	 SHORT $LL34@LoadData
$LN36@LoadData:
  0014e	33 c0		 xor	 eax, eax
  00150	eb 05		 jmp	 SHORT $LN37@LoadData
$LN35@LoadData:
  00152	1b c0		 sbb	 eax, eax
  00154	83 c8 01	 or	 eax, 1
$LN37@LoadData:
  00157	85 c0		 test	 eax, eax
  00159	0f 84 61 ff ff
	ff		 je	 $LL2@LoadData

; 108  : 						break;
; 109  : 
; 110  : 					iUnitNumber = (int)TokenNumber;

  0015f	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 111  : 
; 112  : 					Token = GetToken();

  00167	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 113  : 					memcpy(szUnitName, TokenString, 20);

  0016c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?TokenString@@3PADA+16
  00171	89 45 94	 mov	 DWORD PTR _szUnitName$2[ebp+16], eax
  00174	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?TokenString@@3PADA
  0017b	0f 11 45 b8	 movups	 XMMWORD PTR _szUnitName$1$[ebp], xmm0

; 114  : 
; 115  : 					Token = GetToken();

  0017f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 116  : 					iDelayTime = (int)TokenNumber;

  00184	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0018c	89 45 e8	 mov	 DWORD PTR _iDelayTime$1$[ebp], eax

; 117  : 
; 118  : 					Token = GetToken();

  0018f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 119  : 					iAutomata = (int)TokenNumber;

  00194	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 120  : 
; 121  : 					Token = GetToken();

  0019c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 122  : 					iAIClassNormal = (int)TokenNumber;

  001a1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001a9	89 45 e4	 mov	 DWORD PTR _iAIClassNormal$1$[ebp], eax

; 123  : 
; 124  : 					Token = GetToken();

  001ac	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 					iAIClassMove = (int)TokenNumber;

  001b1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001b9	89 45 e0	 mov	 DWORD PTR _iAIClassMove$1$[ebp], eax

; 126  : 
; 127  : 					Token = GetToken();

  001bc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 128  : 					iAIClassAttack = (int)TokenNumber;

  001c1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001c9	89 45 dc	 mov	 DWORD PTR _iAIClassAttack$1$[ebp], eax

; 129  : 
; 130  : 					Token = GetToken();

  001cc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 131  : 					iAIClassHeal = (int)TokenNumber;

  001d1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001d9	89 45 d8	 mov	 DWORD PTR _iAIClassHeal$1$[ebp], eax

; 132  : 
; 133  : 					Token = GetToken();

  001dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 134  : 					iAIClassAvoid = (int)TokenNumber;

  001e1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001e9	89 45 d4	 mov	 DWORD PTR _iAIClassAvoid$1$[ebp], eax

; 135  : 
; 136  : 					Token = GetToken();

  001ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 137  : 					iAIClassHelp = (int)TokenNumber;

  001f1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001f9	89 45 d0	 mov	 DWORD PTR _iAIClassHelp$1$[ebp], eax

; 138  : 
; 139  : 					Token = GetToken();

  001fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 					iAIClassSpecial = (int)TokenNumber;

  00201	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00209	89 45 cc	 mov	 DWORD PTR _iAIClassSpecial$1$[ebp], eax

; 141  : 
; 142  : 					Token = GetToken();

  0020c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 143  : 					iAIClassEvent = (int)TokenNumber;

  00211	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00219	89 45 c8	 mov	 DWORD PTR _iAIClassEvent$1$[ebp], eax

; 144  : 
; 145  : 					if ( iUnitNumber < 0 || iUnitNumber >= MAX_MONSTER_AI_UNIT )

  0021c	83 fb 63	 cmp	 ebx, 99			; 00000063H
  0021f	0f 87 06 01 00
	00		 ja	 $LN14@LoadData

; 150  : 					}
; 151  : 
; 152  : 					if ( iAutomata < 0 || iAutomata >= MAX_MONSTER_AI_AUTOMATA )

  00225	81 ff 2b 01 00
	00		 cmp	 edi, 299		; 0000012bH
  0022b	0f 87 e3 00 00
	00		 ja	 $LN16@LoadData

; 157  : 					}
; 158  : 
; 159  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_iUnitNumber = iUnitNumber;
; 160  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_iDelayTime = iDelayTime;

  00231	8b 45 e8	 mov	 eax, DWORD PTR _iDelayTime$1$[ebp]
  00234	69 f3 84 00 00
	00		 imul	 esi, ebx, 132

; 161  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAutomata = TMonsterAIAutomata::FindAutomata(iAutomata);

  0023a	57		 push	 edi
  0023b	89 9e 38 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+56], ebx
  00241	89 86 3c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+60], eax
  00247	e8 00 00 00 00	 call	 ?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z ; TMonsterAIAutomata::FindAutomata
  0024c	83 c4 04	 add	 esp, 4
  0024f	89 86 40 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+64], eax

; 162  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassNormal = TMonsterAIElement::FindAIElement(iAIClassNormal);

  00255	ff 75 e4	 push	 DWORD PTR _iAIClassNormal$1$[ebp]
  00258	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  0025d	83 c4 04	 add	 esp, 4
  00260	89 86 44 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+68], eax

; 163  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassMove = TMonsterAIElement::FindAIElement(iAIClassMove);

  00266	ff 75 e0	 push	 DWORD PTR _iAIClassMove$1$[ebp]
  00269	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  0026e	83 c4 04	 add	 esp, 4
  00271	89 86 48 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+72], eax

; 164  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassAttack = TMonsterAIElement::FindAIElement(iAIClassAttack);

  00277	ff 75 dc	 push	 DWORD PTR _iAIClassAttack$1$[ebp]
  0027a	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  0027f	83 c4 04	 add	 esp, 4
  00282	89 86 4c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+76], eax

; 165  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassHeal = TMonsterAIElement::FindAIElement(iAIClassHeal);

  00288	ff 75 d8	 push	 DWORD PTR _iAIClassHeal$1$[ebp]
  0028b	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  00290	83 c4 04	 add	 esp, 4
  00293	89 86 50 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+80], eax

; 166  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassAvoid = TMonsterAIElement::FindAIElement(iAIClassAvoid);

  00299	ff 75 d4	 push	 DWORD PTR _iAIClassAvoid$1$[ebp]
  0029c	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  002a1	83 c4 04	 add	 esp, 4
  002a4	89 86 54 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+84], eax

; 167  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassHelp = TMonsterAIElement::FindAIElement(iAIClassHelp);

  002aa	ff 75 d0	 push	 DWORD PTR _iAIClassHelp$1$[ebp]
  002ad	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  002b2	83 c4 04	 add	 esp, 4
  002b5	89 86 58 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+88], eax

; 168  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassSpecial = TMonsterAIElement::FindAIElement(iAIClassSpecial);

  002bb	ff 75 cc	 push	 DWORD PTR _iAIClassSpecial$1$[ebp]
  002be	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement
  002c3	83 c4 04	 add	 esp, 4
  002c6	89 86 5c 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+92], eax

; 169  : 					TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_lpAIClassEvent = TMonsterAIElement::FindAIElement(iAIClassEvent);

  002cc	ff 75 c8	 push	 DWORD PTR _iAIClassEvent$1$[ebp]
  002cf	e8 00 00 00 00	 call	 ?FindAIElement@TMonsterAIElement@@SAPAV1@H@Z ; TMonsterAIElement::FindAIElement

; 170  : 					memcpy(TMonsterAIUnit::s_MonsterAIUnitArray[iUnitNumber].m_szUnitName,

  002d4	0f 10 45 b8	 movups	 xmm0, XMMWORD PTR _szUnitName$1$[ebp]
  002d8	89 86 60 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+96], eax
  002de	83 c4 04	 add	 esp, 4
  002e1	66 8b 45 b4	 mov	 ax, WORD PTR _szUnitName$2[ebp+48]
  002e5	0f 11 86 04 00
	00 00		 movups	 XMMWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+4], xmm0
  002ec	0f 10 45 94	 movups	 xmm0, XMMWORD PTR _szUnitName$2[ebp+16]
  002f0	0f 11 86 14 00
	00 00		 movups	 XMMWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+20], xmm0
  002f7	0f 10 45 a4	 movups	 xmm0, XMMWORD PTR _szUnitName$2[ebp+32]
  002fb	0f 11 86 24 00
	00 00		 movups	 XMMWORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+36], xmm0
  00302	66 89 86 34 00
	00 00		 mov	 WORD PTR ?s_MonsterAIUnitArray@TMonsterAIUnit@@2PAV1@A[esi+52], ax
  00309	8b 75 08	 mov	 esi, DWORD PTR _lpszFileName$[ebp]
  0030c	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  0030f	e9 fc fd ff ff	 jmp	 $LL4@LoadData
$LN16@LoadData:

; 153  : 					{
; 154  : 						MsgBox("[Monster AI Unit] - AutomatNumber(%d) Error (%s) File. ", 

  00314	56		 push	 esi
  00315	57		 push	 edi
  00316	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CHPNDJKD@?$FLMonster?5AI?5Unit?$FN?5?9?5AutomatNumbe@
  0031b	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 155  : 							iAutomata, lpszFileName);
; 156  : 						continue;

  00320	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH
  00326	e9 e5 fd ff ff	 jmp	 $LL4@LoadData
$LN14@LoadData:

; 146  : 					{
; 147  : 						MsgBox("[Monster AI Unit] - UnitNumber(%d) Error (%s) File. ", 

  0032b	56		 push	 esi
  0032c	53		 push	 ebx
  0032d	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@MPAINNCG@?$FLMonster?5AI?5Unit?$FN?5?9?5UnitNumber?$CI?$CF@
  00332	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 148  : 							iUnitNumber, lpszFileName);
; 149  : 						continue;

  00337	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  0033a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0033d	e9 ce fd ff ff	 jmp	 $LL4@LoadData
__catch$?LoadData@TMonsterAIUnit@@SAHPAD@Z$0:

; 181  : 	}
; 182  : 	catch(DWORD)
; 183  : 	{
; 184  : 		MsgBox("[Monster AI Unit] - Loading Exception Error (%s) File. ", lpszFileName);

  00342	ff 75 08	 push	 DWORD PTR _lpszFileName$[ebp]
  00345	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PJDNLJBO@?$FLMonster?5AI?5Unit?$FN?5?9?5Loading?5Exce@
  0034a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0034f	83 c4 08	 add	 esp, 8

; 185  : 	}

  00352	b8 00 00 00 00	 mov	 eax, $LN39@LoadData
  00357	c3		 ret	 0
$LN7@LoadData:

; 60   : 	{
; 61   : 		MsgBox("[Monster AI Unit] - File load error : File Name Error");

  00358	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@DIIBNHKC@?$FLMonster?5AI?5Unit?$FN?5?9?5File?5load?5er@
  0035d	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00362	83 c4 04	 add	 esp, 4
$LN39@LoadData:

; 62   : 		return FALSE;

  00365	33 c0		 xor	 eax, eax

; 186  : 
; 187  : 	return FALSE;
; 188  : }

  00367	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0036a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00371	59		 pop	 ecx
  00372	5f		 pop	 edi
  00373	5e		 pop	 esi
  00374	5b		 pop	 ebx
  00375	8b e5		 mov	 esp, ebp
  00377	5d		 pop	 ebp
  00378	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIUnit@@SAHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIUnit@@SAHPAD@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIUnit@@SAHPAD@Z ENDP			; TMonsterAIUnit::LoadData
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?Reset@TMonsterAIUnit@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Reset@TMonsterAIUnit@@QAEXXZ PROC			; TMonsterAIUnit::Reset, COMDAT
; _this$ = ecx

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 33   : 	this->m_iUnitNumber = -1;
; 34   : 	this->m_iDelayTime = NULL;
; 35   : 	this->m_lpAutomata = NULL;
; 36   : 	this->m_lpAIClassNormal = NULL;
; 37   : 	this->m_lpAIClassMove = NULL;
; 38   : 	this->m_lpAIClassAttack = NULL;
; 39   : 	this->m_lpAIClassHeal = NULL;
; 40   : 	this->m_lpAIClassAvoid = NULL;
; 41   : 	this->m_lpAIClassHelp = NULL;
; 42   : 	this->m_lpAIClassSpecial = NULL;
; 43   : 	this->m_lpAIClassEvent = NULL;
; 44   : 	memset(this->m_szUnitName, 0, sizeof(this->m_szUnitName));

  00007	6a 32		 push	 50			; 00000032H
  00009	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	8d 59 58	 lea	 ebx, DWORD PTR [ecx+88]
  00012	c7 41 38 ff ff
	ff ff		 mov	 DWORD PTR [ecx+56], -1
  00019	8d 79 5c	 lea	 edi, DWORD PTR [ecx+92]
  0001c	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00023	8d 71 60	 lea	 esi, DWORD PTR [ecx+96]
  00026	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  0002d	6a 00		 push	 0
  0002f	50		 push	 eax
  00030	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00037	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  0003e	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00045	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  0004c	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
  00053	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00059	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00065	e8 00 00 00 00	 call	 _memset

; 45   : 	this->m_lppAIClassMap[0] = &this->m_lpAIClassNormal;

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	8d 41 44	 lea	 eax, DWORD PTR [ecx+68]
  00073	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  00076	8d 41 48	 lea	 eax, DWORD PTR [ecx+72]
  00079	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  0007c	8d 41 4c	 lea	 eax, DWORD PTR [ecx+76]
  0007f	89 41 6c	 mov	 DWORD PTR [ecx+108], eax
  00082	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]
  00085	89 41 70	 mov	 DWORD PTR [ecx+112], eax
  00088	8d 41 54	 lea	 eax, DWORD PTR [ecx+84]
  0008b	89 41 74	 mov	 DWORD PTR [ecx+116], eax
  0008e	89 59 78	 mov	 DWORD PTR [ecx+120], ebx
  00091	89 79 7c	 mov	 DWORD PTR [ecx+124], edi
  00094	5f		 pop	 edi
  00095	89 b1 80 00 00
	00		 mov	 DWORD PTR [ecx+128], esi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx

; 46   : 	this->m_lppAIClassMap[1] = &this->m_lpAIClassMove;
; 47   : 	this->m_lppAIClassMap[2] = &this->m_lpAIClassAttack;
; 48   : 	this->m_lppAIClassMap[3] = &this->m_lpAIClassHeal;
; 49   : 	this->m_lppAIClassMap[4] = &this->m_lpAIClassAvoid;
; 50   : 	this->m_lppAIClassMap[5] = &this->m_lpAIClassHelp;
; 51   : 	this->m_lppAIClassMap[6] = &this->m_lpAIClassSpecial;
; 52   : 	this->m_lppAIClassMap[7] = &this->m_lpAIClassEvent;
; 53   : }

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?Reset@TMonsterAIUnit@@QAEXXZ ENDP			; TMonsterAIUnit::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?RunAIUnit@TMonsterAIUnit@@QAEHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iIndex$ = 8						; size = 4
?RunAIUnit@TMonsterAIUnit@@QAEHH@Z PROC			; TMonsterAIUnit::RunAIUnit, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 227  : 	LPOBJ lpObj = &gObj[iIndex];

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _iIndex$[ebp]
  00008	56		 push	 esi
  00009	69 f3 40 27 00
	00		 imul	 esi, ebx, 10048
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx
  00012	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00015	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 228  : 
; 229  : 	if ( this->m_lpAutomata == NULL )

  0001b	83 7f 40 00	 cmp	 DWORD PTR [edi+64], 0
  0001f	75 0b		 jne	 SHORT $LN2@RunAIUnit
$LN8@RunAIUnit:
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 230  : 		return FALSE;

  00023	33 c0		 xor	 eax, eax
  00025	5b		 pop	 ebx

; 254  : }

  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN2@RunAIUnit:

; 231  : 
; 232  : 	if ( (GetTickCount() - lpObj->m_iLastAutomataRuntime) < lpObj->m_iLastAutomataDelay )

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00032	2b 86 10 24 00
	00		 sub	 eax, DWORD PTR [esi+9232]
  00038	3b 86 14 24 00
	00		 cmp	 eax, DWORD PTR [esi+9236]
  0003e	72 e1		 jb	 SHORT $LN8@RunAIUnit

; 233  : 		return FALSE;
; 234  : 
; 235  : 	TMonsterAIState * pAIState = this->m_lpAutomata->RunAutomata(iIndex);

  00040	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  00043	53		 push	 ebx
  00044	e8 00 00 00 00	 call	 ?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z ; TMonsterAIAutomata::RunAutomata
  00049	8b f8		 mov	 edi, eax

; 236  : 
; 237  : 	if ( pAIState == NULL )

  0004b	85 ff		 test	 edi, edi
  0004d	74 d2		 je	 SHORT $LN8@RunAIUnit

; 238  : 		return FALSE;
; 239  : 
; 240  : 	lpObj->m_iLastAutomataRuntime = GetTickCount();

  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 241  : 	TMonsterAIElement * pAIElement = *this->m_lppAIClassMap[pAIState->m_iNextState];

  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00058	89 86 10 24 00
	00		 mov	 DWORD PTR [esi+9232], eax
  0005e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00061	8b 44 81 64	 mov	 eax, DWORD PTR [ecx+eax*4+100]
  00065	8b 08		 mov	 ecx, DWORD PTR [eax]

; 242  : 
; 243  : 	if ( pAIElement == NULL )

  00067	85 c9		 test	 ecx, ecx
  00069	74 b6		 je	 SHORT $LN8@RunAIUnit

; 244  : 		return FALSE;
; 245  : 
; 246  : 	int iRetExec = pAIElement->ForceAIElement(iIndex, 0, pAIState);

  0006b	57		 push	 edi
  0006c	6a 00		 push	 0
  0006e	53		 push	 ebx
  0006f	e8 00 00 00 00	 call	 ?ForceAIElement@TMonsterAIElement@@QAEHHHPAVTMonsterAIState@@@Z ; TMonsterAIElement::ForceAIElement

; 247  : 
; 248  : 	if ( iRetExec == 0 )

  00074	85 c0		 test	 eax, eax
  00076	74 a9		 je	 SHORT $LN8@RunAIUnit

; 249  : 		return FALSE;
; 250  : 
; 251  : 	lpObj->m_iCurrentAIState = pAIState->m_iNextState;

  00078	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0007b	5f		 pop	 edi
  0007c	89 86 d4 20 00
	00		 mov	 DWORD PTR [esi+8404], eax

; 252  : 	
; 253  : 	return TRUE;

  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx

; 254  : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?RunAIUnit@TMonsterAIUnit@@QAEHH@Z ENDP			; TMonsterAIUnit::RunAIUnit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ??1TMonsterAIUnit@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIUnit@@UAE@XZ PROC				; TMonsterAIUnit::~TMonsterAIUnit, COMDAT
; _this$ = ecx

; 26   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIUnit@@6B@

; 27   : 	return;
; 28   : }

  00006	c3		 ret	 0
??1TMonsterAIUnit@@UAE@XZ ENDP				; TMonsterAIUnit::~TMonsterAIUnit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ??0TMonsterAIUnit@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIUnit@@QAE@XZ PROC				; TMonsterAIUnit::TMonsterAIUnit, COMDAT
; _this$ = ecx

; 21   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7TMonsterAIUnit@@6B@

; 22   : 	this->Reset();

  00009	e8 00 00 00 00	 call	 ?Reset@TMonsterAIUnit@@QAEXXZ ; TMonsterAIUnit::Reset

; 23   : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0TMonsterAIUnit@@QAE@XZ ENDP				; TMonsterAIUnit::TMonsterAIUnit
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiunit.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
