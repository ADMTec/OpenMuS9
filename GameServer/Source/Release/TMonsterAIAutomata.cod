; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\TMonsterAIAutomata.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?s_bDataLoad@TMonsterAIAutomata@@2HA		; TMonsterAIAutomata::s_bDataLoad
_BSS	SEGMENT
?s_bDataLoad@TMonsterAIAutomata@@2HA DD 01H DUP (?)	; TMonsterAIAutomata::s_bDataLoad
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0TMonsterAIState@@QAE@XZ			; TMonsterAIState::TMonsterAIState
PUBLIC	??0TMonsterAIAutomata@@QAE@XZ			; TMonsterAIAutomata::TMonsterAIAutomata
PUBLIC	??1TMonsterAIAutomata@@UAE@XZ			; TMonsterAIAutomata::~TMonsterAIAutomata
PUBLIC	?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z ; TMonsterAIAutomata::RunAutomata
PUBLIC	?Reset@TMonsterAIAutomata@@QAEXXZ		; TMonsterAIAutomata::Reset
PUBLIC	?LoadData@TMonsterAIAutomata@@SAHPAD@Z		; TMonsterAIAutomata::LoadData
PUBLIC	?DelAllAutomata@TMonsterAIAutomata@@SAHXZ	; TMonsterAIAutomata::DelAllAutomata
PUBLIC	?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z	; TMonsterAIAutomata::FindAutomata
PUBLIC	??_GTMonsterAIAutomata@@UAEPAXI@Z		; TMonsterAIAutomata::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A ; TMonsterAIAutomata::s_MonsterAIAutomataArray
PUBLIC	??_7TMonsterAIAutomata@@6B@			; TMonsterAIAutomata::`vftable'
PUBLIC	??_C@_0DK@DFAHFBPK@?$FLMonster?5AI?5Automata?$FN?5?9?5File?5loa@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CH@GONAGODC@?$FLMonster?5AI?5Automata?$FN?5?9?5Can?8t?5Op@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DN@CKMDEDIJ@?$FLMonster?5AI?5Automata?$FN?5?9?5Automata@ ; `string'
PUBLIC	??_C@_0DL@BLGGHICH@?$FLMonster?5AI?5Automata?$FN?5?9?5CurrentS@ ; `string'
PUBLIC	??_C@_0DI@LIGGCJGB@?$FLMonster?5AI?5Automata?$FN?5?9?5NextStat@ ; `string'
PUBLIC	??_C@_0DH@DPDJANEP@?$FLMonster?5AI?5Automata?$FN?5?9?5Priority@ ; `string'
PUBLIC	??_C@_0DG@IGNAMLCG@?$FLMonster?5AI?5Automata?$FN?5Loaded?5Tra@ ; `string'
PUBLIC	??_C@_0CK@MCHAMKKH@?$FLMonster?5AI?5Automata?$FN?5?9?5?$CFs?5file?5@ ; `string'
PUBLIC	??_R0K@8					; unsigned long `RTTI Type Descriptor'
PUBLIC	??_C@_0DM@IPIEEFNB@?$FLMonster?5AI?5Automata?$FN?5?9?5Loading?5@ ; `string'
PUBLIC	??_C@_0EC@CMBJNBHF@?$FLMonster?5AI?5Automata?$FN?5FindAutoma@ ; `string'
PUBLIC	??_R4TMonsterAIAutomata@@6B@			; TMonsterAIAutomata::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTMonsterAIAutomata@@@8			; TMonsterAIAutomata `RTTI Type Descriptor'
PUBLIC	??_R3TMonsterAIAutomata@@8			; TMonsterAIAutomata::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TMonsterAIAutomata@@8			; TMonsterAIAutomata::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TMonsterAIAutomata@@8		; TMonsterAIAutomata::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@42c80000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	??_ETMonsterAIAutomata@@UAEPAXI@Z:PROC		; TMonsterAIAutomata::`vector deleting destructor'
EXTRN	?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z:PROC ; TMonsterAIGroup::FindGroupMemberToSommon
EXTRN	?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z:PROC ; TMonsterAIGroup::FindGroupMemberToHeal
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetAgro@TMonsterAIAgro@@QAEHH@Z:PROC		; TMonsterAIAgro::GetAgro
EXTRN	?GetMaxAgroUserIndex@TMonsterAIAgro@@QAEHH@Z:PROC ; TMonsterAIAgro::GetMaxAgroUserIndex
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	??0TMonsterAIUtil@@QAE@XZ:PROC			; TMonsterAIUtil::TMonsterAIUtil
EXTRN	??1TMonsterAIUtil@@UAE@XZ:PROC			; TMonsterAIUtil::~TMonsterAIUtil
EXTRN	?FindMonViewportObj@TMonsterAIUtil@@QAEHHH@Z:PROC ; TMonsterAIUtil::FindMonViewportObj
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A DB 09133e0H DUP (?) ; TMonsterAIAutomata::s_MonsterAIAutomataArray
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
?MONSTER_UTIL@@3VTMonsterAIUtil@@A DD 01H DUP (?)	; MONSTER_UTIL
_BSS	ENDS
CRT$XCU	SEGMENT
??s_MonsterAIAutomataArray$initializer$@TMonsterAIAutomata@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ ; ??s_MonsterAIAutomataArray$initializer$@TMonsterAIAutomata@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@TMonsterAIAutomata@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TMonsterAIAutomata@@8 DD FLAT:??_R0?AVTMonsterAIAutomata@@@8 ; TMonsterAIAutomata::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TMonsterAIAutomata@@8
rdata$r	ENDS
;	COMDAT ??_R2TMonsterAIAutomata@@8
rdata$r	SEGMENT
??_R2TMonsterAIAutomata@@8 DD FLAT:??_R1A@?0A@EA@TMonsterAIAutomata@@8 ; TMonsterAIAutomata::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TMonsterAIAutomata@@8
rdata$r	SEGMENT
??_R3TMonsterAIAutomata@@8 DD 00H			; TMonsterAIAutomata::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TMonsterAIAutomata@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTMonsterAIAutomata@@@8
data$r	SEGMENT
??_R0?AVTMonsterAIAutomata@@@8 DD FLAT:??_7type_info@@6B@ ; TMonsterAIAutomata `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTMonsterAIAutomata@@', 00H
data$r	ENDS
;	COMDAT ??_R4TMonsterAIAutomata@@6B@
rdata$r	SEGMENT
??_R4TMonsterAIAutomata@@6B@ DD 00H			; TMonsterAIAutomata::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTMonsterAIAutomata@@@8
	DD	FLAT:??_R3TMonsterAIAutomata@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EC@CMBJNBHF@?$FLMonster?5AI?5Automata?$FN?5FindAutoma@
CONST	SEGMENT
??_C@_0EC@CMBJNBHF@?$FLMonster?5AI?5Automata?$FN?5FindAutoma@ DB '[Monste'
	DB	'r AI Automata] FindAutomata() Error - (AutomataNumber=%d) ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IPIEEFNB@?$FLMonster?5AI?5Automata?$FN?5?9?5Loading?5@
CONST	SEGMENT
??_C@_0DM@IPIEEFNB@?$FLMonster?5AI?5Automata?$FN?5?9?5Loading?5@ DB '[Mon'
	DB	'ster AI Automata] - Loading Exception Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0K@8
data$r	SEGMENT
??_R0K@8 DD	FLAT:??_7type_info@@6B@			; unsigned long `RTTI Type Descriptor'
	DD	00H
	DB	'.K', 00H
data$r	ENDS
;	COMDAT ??_C@_0CK@MCHAMKKH@?$FLMonster?5AI?5Automata?$FN?5?9?5?$CFs?5file?5@
CONST	SEGMENT
??_C@_0CK@MCHAMKKH@?$FLMonster?5AI?5Automata?$FN?5?9?5?$CFs?5file?5@ DB '['
	DB	'Monster AI Automata] - %s file is Loaded', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IGNAMLCG@?$FLMonster?5AI?5Automata?$FN?5Loaded?5Tra@
CONST	SEGMENT
??_C@_0DG@IGNAMLCG@?$FLMonster?5AI?5Automata?$FN?5Loaded?5Tra@ DB '[Monst'
	DB	'er AI Automata] Loaded Transition Desc . [ %s ]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DPDJANEP@?$FLMonster?5AI?5Automata?$FN?5?9?5Priority@
CONST	SEGMENT
??_C@_0DH@DPDJANEP@?$FLMonster?5AI?5Automata?$FN?5?9?5Priority@ DB '[Mons'
	DB	'ter AI Automata] - Priority(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LIGGCJGB@?$FLMonster?5AI?5Automata?$FN?5?9?5NextStat@
CONST	SEGMENT
??_C@_0DI@LIGGCJGB@?$FLMonster?5AI?5Automata?$FN?5?9?5NextStat@ DB '[Mons'
	DB	'ter AI Automata] - NextState(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BLGGHICH@?$FLMonster?5AI?5Automata?$FN?5?9?5CurrentS@
CONST	SEGMENT
??_C@_0DL@BLGGHICH@?$FLMonster?5AI?5Automata?$FN?5?9?5CurrentS@ DB '[Mons'
	DB	'ter AI Automata] - CurrentState(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CKMDEDIJ@?$FLMonster?5AI?5Automata?$FN?5?9?5Automata@
CONST	SEGMENT
??_C@_0DN@CKMDEDIJ@?$FLMonster?5AI?5Automata?$FN?5?9?5Automata@ DB '[Mons'
	DB	'ter AI Automata] - AutomataNumber(%d) Error (%s) File. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GONAGODC@?$FLMonster?5AI?5Automata?$FN?5?9?5Can?8t?5Op@
CONST	SEGMENT
??_C@_0CH@GONAGODC@?$FLMonster?5AI?5Automata?$FN?5?9?5Can?8t?5Op@ DB '[Mo'
	DB	'nster AI Automata] - Can''t Open %s ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DFAHFBPK@?$FLMonster?5AI?5Automata?$FN?5?9?5File?5loa@
CONST	SEGMENT
??_C@_0DK@DFAHFBPK@?$FLMonster?5AI?5Automata?$FN?5?9?5File?5loa@ DB '[Mon'
	DB	'ster AI Automata] - File load error : File Name Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7TMonsterAIAutomata@@6B@
CONST	SEGMENT
??_7TMonsterAIAutomata@@6B@ DD FLAT:??_R4TMonsterAIAutomata@@6B@ ; TMonsterAIAutomata::`vftable'
	DD	FLAT:??_ETMonsterAIAutomata@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadData@TMonsterAIAutomata@@SAHPAD@Z$2 DD 00H
	DD	FLAT:??_R0K@8
	DD	00H
	DD	FLAT:__catch$?LoadData@TMonsterAIAutomata@@SAHPAD@Z$0
__unwindtable$?LoadData@TMonsterAIAutomata@@SAHPAD@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?LoadData@TMonsterAIAutomata@@SAHPAD@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?LoadData@TMonsterAIAutomata@@SAHPAD@Z$2
__ehfuncinfo$?LoadData@TMonsterAIAutomata@@SAHPAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadData@TMonsterAIAutomata@@SAHPAD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadData@TMonsterAIAutomata@@SAHPAD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?MONSTER_UTIL$initializer$@@3P6AXXZA DD FLAT:??__EMONSTER_UTIL@@YAXXZ ; MONSTER_UTIL$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FMONSTER_UTIL@@YAXXZ
text$yd	SEGMENT
??__FMONSTER_UTIL@@YAXXZ PROC				; `dynamic atexit destructor for 'MONSTER_UTIL'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MONSTER_UTIL@@3VTMonsterAIUtil@@A
  00005	e9 00 00 00 00	 jmp	 ??1TMonsterAIUtil@@UAE@XZ ; TMonsterAIUtil::~TMonsterAIUtil
??__FMONSTER_UTIL@@YAXXZ ENDP				; `dynamic atexit destructor for 'MONSTER_UTIL''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ??__EMONSTER_UTIL@@YAXXZ
text$di	SEGMENT
??__EMONSTER_UTIL@@YAXXZ PROC				; `dynamic initializer for 'MONSTER_UTIL'', COMDAT

; 14   : static TMonsterAIUtil MONSTER_UTIL;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MONSTER_UTIL@@3VTMonsterAIUtil@@A
  00005	e8 00 00 00 00	 call	 ??0TMonsterAIUtil@@QAE@XZ ; TMonsterAIUtil::TMonsterAIUtil
  0000a	68 00 00 00 00	 push	 OFFSET ??__FMONSTER_UTIL@@YAXXZ ; `dynamic atexit destructor for 'MONSTER_UTIL''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EMONSTER_UTIL@@YAXXZ ENDP				; `dynamic initializer for 'MONSTER_UTIL''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ
text$yd	SEGMENT
??__F?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ PROC ; `dynamic atexit destructor for 'TMonsterAIAutomata::s_MonsterAIAutomataArray'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIAutomata@@UAE@XZ ; TMonsterAIAutomata::~TMonsterAIAutomata
  00005	68 2c 01 00 00	 push	 300			; 0000012cH
  0000a	68 e8 7b 00 00	 push	 31720			; 00007be8H
  0000f	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A ; TMonsterAIAutomata::s_MonsterAIAutomataArray
  00014	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00019	c3		 ret	 0
??__F?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'TMonsterAIAutomata::s_MonsterAIAutomataArray''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ??__E?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ
text$di	SEGMENT
??__E?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ PROC ; `dynamic initializer for 'TMonsterAIAutomata::s_MonsterAIAutomataArray'', COMDAT

; 13   : TMonsterAIAutomata TMonsterAIAutomata::s_MonsterAIAutomataArray[MAX_MONSTER_AI_AUTOMATA];

  00000	68 00 00 00 00	 push	 OFFSET ??1TMonsterAIAutomata@@UAE@XZ ; TMonsterAIAutomata::~TMonsterAIAutomata
  00005	68 00 00 00 00	 push	 OFFSET ??0TMonsterAIAutomata@@QAE@XZ ; TMonsterAIAutomata::TMonsterAIAutomata
  0000a	68 2c 01 00 00	 push	 300			; 0000012cH
  0000f	68 e8 7b 00 00	 push	 31720			; 00007be8H
  00014	68 00 00 00 00	 push	 OFFSET ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A ; TMonsterAIAutomata::s_MonsterAIAutomataArray
  00019	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0001e	68 00 00 00 00	 push	 OFFSET ??__F?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ ; `dynamic atexit destructor for 'TMonsterAIAutomata::s_MonsterAIAutomataArray''
  00023	e8 00 00 00 00	 call	 _atexit
  00028	59		 pop	 ecx
  00029	c3		 ret	 0
??__E?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A@@YAXXZ ENDP ; `dynamic initializer for 'TMonsterAIAutomata::s_MonsterAIAutomataArray''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GTMonsterAIAutomata@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GTMonsterAIAutomata@@UAEPAXI@Z PROC			; TMonsterAIAutomata::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1TMonsterAIAutomata@@UAE@XZ ; TMonsterAIAutomata::~TMonsterAIAutomata
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 e8 7b 00 00	 push	 31720			; 00007be8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GTMonsterAIAutomata@@UAEPAXI@Z ENDP			; TMonsterAIAutomata::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z
_TEXT	SEGMENT
_iAutomataNumber$ = 8					; size = 4
?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z PROC	; TMonsterAIAutomata::FindAutomata, COMDAT

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 210  : 	if ( iAutomataNumber < 0 || iAutomataNumber >= MAX_MONSTER_AI_AUTOMATA )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iAutomataNumber$[ebp]
  00006	3d 2b 01 00 00	 cmp	 eax, 299		; 0000012bH
  0000b	77 16		 ja	 SHORT $LN3@FindAutoma

; 214  : 	}
; 215  : 
; 216  : 	if ( TMonsterAIAutomata::s_MonsterAIAutomataArray[iAutomataNumber].m_iAutomataNumber == iAutomataNumber )

  0000d	69 c8 e8 7b 00
	00		 imul	 ecx, eax, 31720
  00013	39 81 04 00 00
	00		 cmp	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[ecx+4], eax
  00019	75 08		 jne	 SHORT $LN3@FindAutoma

; 217  : 	{
; 218  : 		return &TMonsterAIAutomata::s_MonsterAIAutomataArray[iAutomataNumber];

  0001b	8d 81 00 00 00
	00		 lea	 eax, DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[ecx]

; 219  : 	}
; 220  : 	
; 221  : 	LogAddTD("[Monster AI Automata] FindAutomata() Error - (AutomataNumber=%d) ", iAutomataNumber);
; 222  : 
; 223  : 	return NULL;
; 224  : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN3@FindAutoma:

; 211  : 	{
; 212  : 		LogAddTD("[Monster AI Automata] FindAutomata() Error - (AutomataNumber=%d) ", iAutomataNumber);

  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@CMBJNBHF@?$FLMonster?5AI?5Automata?$FN?5FindAutoma@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0002f	83 c4 08	 add	 esp, 8

; 213  : 		return NULL;

  00032	33 c0		 xor	 eax, eax

; 219  : 	}
; 220  : 	
; 221  : 	LogAddTD("[Monster AI Automata] FindAutomata() Error - (AutomataNumber=%d) ", iAutomataNumber);
; 222  : 
; 223  : 	return NULL;
; 224  : }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?FindAutomata@TMonsterAIAutomata@@SAPAV1@H@Z ENDP	; TMonsterAIAutomata::FindAutomata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?DelAllAutomata@TMonsterAIAutomata@@SAHXZ
_TEXT	SEGMENT
?DelAllAutomata@TMonsterAIAutomata@@SAHXZ PROC		; TMonsterAIAutomata::DelAllAutomata, COMDAT

; 198  : {

  00000	56		 push	 esi

; 199  : 	for ( int i =0;i<MAX_MONSTER_AI_AUTOMATA;i++)

  00001	be 00 00 00 00	 mov	 esi, OFFSET ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A ; TMonsterAIAutomata::s_MonsterAIAutomataArray
$LL4@DelAllAuto:

; 200  : 	{
; 201  : 		TMonsterAIAutomata::s_MonsterAIAutomataArray[i].Reset();

  00006	8b ce		 mov	 ecx, esi
  00008	e8 00 00 00 00	 call	 ?Reset@TMonsterAIAutomata@@QAEXXZ ; TMonsterAIAutomata::Reset
  0000d	81 c6 e8 7b 00
	00		 add	 esi, 31720		; 00007be8H
  00013	81 fe e0 33 91
	00		 cmp	 esi, OFFSET ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A+9516000
  00019	7c eb		 jl	 SHORT $LL4@DelAllAuto

; 202  : 	}
; 203  : 
; 204  : 	return FALSE;

  0001b	33 c0		 xor	 eax, eax
  0001d	5e		 pop	 esi

; 205  : }

  0001e	c3		 ret	 0
?DelAllAutomata@TMonsterAIAutomata@@SAHXZ ENDP		; TMonsterAIAutomata::DelAllAutomata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?LoadData@TMonsterAIAutomata@@SAHPAD@Z
_TEXT	SEGMENT
_szStateTransitionDesc$2 = -148				; size = 100
_iCurrentState$1$ = -48					; size = 4
_iTransitionValue$1$ = -44				; size = 4
_iTransitionValueType$1$ = -40				; size = 4
_iTransitionRate$1$ = -36				; size = 4
_iTransitionType$1$ = -32				; size = 4
_iAutomataNumber$1$ = -28				; size = 4
tv299 = -24						; size = 4
_iNextState$1$ = -24					; size = 4
_iType$1$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_lpszFileName$ = 8					; size = 4
?LoadData@TMonsterAIAutomata@@SAHPAD@Z PROC		; TMonsterAIAutomata::LoadData, COMDAT

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadData@TMonsterAIAutomata@@SAHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 53   : 	TMonsterAIAutomata::s_bDataLoad = FALSE;
; 54   : 
; 55   : 	if ( lpszFileName == NULL || strcmp(lpszFileName, "") == 0 )

  0002e	8b 5d 08	 mov	 ebx, DWORD PTR _lpszFileName$[ebp]
  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIAutomata@@2HA, 0 ; TMonsterAIAutomata::s_bDataLoad
  0003b	85 db		 test	 ebx, ebx
  0003d	0f 84 f1 02 00
	00		 je	 $LN7@LoadData
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
  00048	8b c3		 mov	 eax, ebx
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL34@LoadData:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN35@LoadData
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN36@LoadData
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN35@LoadData
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL34@LoadData
$LN36@LoadData:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN37@LoadData
$LN35@LoadData:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN37@LoadData:
  00075	85 c0		 test	 eax, eax
  00077	0f 84 b7 02 00
	00		 je	 $LN7@LoadData

; 59   : 	}
; 60   : 
; 61   : 	try
; 62   : 	{
; 63   : 		SMDToken Token;
; 64   : 		SMDFile = fopen(lpszFileName, "r");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00082	53		 push	 ebx
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008a	e8 00 00 00 00	 call	 _fopen
  0008f	83 c4 08	 add	 esp, 8
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 65   : 
; 66   : 		if ( SMDFile == NULL )

  00097	85 c0		 test	 eax, eax
  00099	75 22		 jne	 SHORT $LN9@LoadData

; 67   : 		{
; 68   : 			MsgBox("[Monster AI Automata] - Can't Open %s ", lpszFileName);

  0009b	53		 push	 ebx
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@GONAGODC@?$FLMonster?5AI?5Automata?$FN?5?9?5Can?8t?5Op@
  000a1	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a6	83 c4 08	 add	 esp, 8
  000a9	33 c0		 xor	 eax, eax

; 189  : 
; 190  : 	return FALSE;
; 191  : }

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$LN9@LoadData:

; 69   : 			return FALSE;
; 70   : 		}
; 71   : 
; 72   : 		TMonsterAIAutomata::DelAllAutomata();

  000bd	e8 00 00 00 00	 call	 ?DelAllAutomata@TMonsterAIAutomata@@SAHXZ ; TMonsterAIAutomata::DelAllAutomata
$LL2@LoadData:

; 73   : 
; 74   : 		int iType = -1;
; 75   : 
; 76   : 		while ( true )
; 77   : 		{
; 78   : 			Token = (SMDToken)GetToken();

  000c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 79   : 
; 80   : 			if ( Token == END )

  000c7	83 f8 02	 cmp	 eax, 2
  000ca	75 3a		 jne	 SHORT $LN10@LoadData

; 176  : 				}
; 177  : 			}
; 178  : 		
; 179  : 		}
; 180  : 
; 181  : 		fclose(SMDFile);

  000cc	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  000d2	e8 00 00 00 00	 call	 _fclose

; 182  : 		LogAddC(2,"[Monster AI Automata] - %s file is Loaded", lpszFileName);

  000d7	53		 push	 ebx
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@MCHAMKKH@?$FLMonster?5AI?5Automata?$FN?5?9?5?$CFs?5file?5@
  000dd	6a 02		 push	 2
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC
  000e5	83 c4 10	 add	 esp, 16			; 00000010H

; 183  : 		TMonsterAIAutomata::s_bDataLoad = TRUE;

  000e8	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?s_bDataLoad@TMonsterAIAutomata@@2HA, 1 ; TMonsterAIAutomata::s_bDataLoad
  000f2	33 c0		 xor	 eax, eax

; 189  : 
; 190  : 	return FALSE;
; 191  : }

  000f4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000f7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fe	59		 pop	 ecx
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
$LN10@LoadData:

; 81   : 				break;
; 82   : 
; 83   : 			iType = (int)TokenNumber;

  00106	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0010e	89 45 ec	 mov	 DWORD PTR _iType$1$[ebp], eax
$LL4@LoadData:

; 84   : 
; 85   : 			while ( true )
; 86   : 			{
; 87   : 				if ( iType == 0 )

  00111	85 c0		 test	 eax, eax
  00113	75 fc		 jne	 SHORT $LL4@LoadData

; 88   : 				{
; 89   : 					char szStateTransitionDesc[100] = {0};
; 90   : 					int iAutomataNumber = -1;
; 91   : 					int iPriority = -1;
; 92   : 					int iCurrentState = -1;
; 93   : 					int iNextState = -1;
; 94   : 					int iTransitionType = -1;
; 95   : 					int iTransitionRate = -1;
; 96   : 					int iTransitionValueType = -1;
; 97   : 					int iTransitionValue = -1;
; 98   : 					int iDelayTime = -1;
; 99   : 
; 100  : 					Token = (SMDToken)GetToken();

  00115	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 
; 102  : 					if ( strcmp("end", TokenString) == 0 )

  0011a	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL38@LoadData:
  00124	8a 10		 mov	 dl, BYTE PTR [eax]
  00126	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00128	75 1a		 jne	 SHORT $LN39@LoadData
  0012a	84 d2		 test	 dl, dl
  0012c	74 12		 je	 SHORT $LN40@LoadData
  0012e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00131	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00134	75 0e		 jne	 SHORT $LN39@LoadData
  00136	83 c0 02	 add	 eax, 2
  00139	83 c1 02	 add	 ecx, 2
  0013c	84 d2		 test	 dl, dl
  0013e	75 e4		 jne	 SHORT $LL38@LoadData
$LN40@LoadData:
  00140	33 c0		 xor	 eax, eax
  00142	eb 05		 jmp	 SHORT $LN41@LoadData
$LN39@LoadData:
  00144	1b c0		 sbb	 eax, eax
  00146	83 c8 01	 or	 eax, 1
$LN41@LoadData:
  00149	85 c0		 test	 eax, eax
  0014b	0f 84 71 ff ff
	ff		 je	 $LL2@LoadData

; 103  : 						break;
; 104  : 
; 105  : 					iAutomataNumber = (int)TokenNumber;

  00151	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00159	89 45 e4	 mov	 DWORD PTR _iAutomataNumber$1$[ebp], eax

; 106  : 
; 107  : 					Token = (SMDToken)GetToken();

  0015c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 					memcpy(szStateTransitionDesc, TokenString, sizeof(szStateTransitionDesc));

  00161	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00166	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR _szStateTransitionDesc$2[ebp]
  0016c	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  00171	f3 a5		 rep movsd

; 109  : 
; 110  : 					Token = (SMDToken)GetToken();

  00173	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 					iPriority = (int)TokenNumber;

  00178	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 112  : 
; 113  : 					Token = (SMDToken)GetToken();

  00180	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					iCurrentState = (int)TokenNumber;

  00185	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA
  0018d	89 75 d0	 mov	 DWORD PTR _iCurrentState$1$[ebp], esi

; 115  : 
; 116  : 					Token = (SMDToken)GetToken();

  00190	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 117  : 					iNextState = (int)TokenNumber;

  00195	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0019d	89 45 e8	 mov	 DWORD PTR _iNextState$1$[ebp], eax

; 118  : 
; 119  : 					Token = (SMDToken)GetToken();

  001a0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 120  : 					iTransitionType = (int)TokenNumber;

  001a5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001ad	89 45 e0	 mov	 DWORD PTR _iTransitionType$1$[ebp], eax

; 121  : 
; 122  : 					Token = (SMDToken)GetToken();

  001b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 					iTransitionRate = (int)TokenNumber;

  001b5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001bd	89 45 dc	 mov	 DWORD PTR _iTransitionRate$1$[ebp], eax

; 124  : 
; 125  : 					Token = (SMDToken)GetToken();

  001c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 126  : 					iTransitionValueType = (int)TokenNumber;

  001c5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001cd	89 45 d8	 mov	 DWORD PTR _iTransitionValueType$1$[ebp], eax

; 127  : 
; 128  : 					Token = (SMDToken)GetToken();

  001d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 129  : 					iTransitionValue = (int)TokenNumber;

  001d5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001dd	89 45 d4	 mov	 DWORD PTR _iTransitionValue$1$[ebp], eax

; 130  : 
; 131  : 					Token = (SMDToken)GetToken();

  001e0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 132  : 					iDelayTime = (int)TokenNumber;
; 133  : 
; 134  : 					if ( iAutomataNumber < 0 || iAutomataNumber >= MAX_MONSTER_AI_AUTOMATA )

  001e5	8b 45 e4	 mov	 eax, DWORD PTR _iAutomataNumber$1$[ebp]
  001e8	3d 2b 01 00 00	 cmp	 eax, 299		; 0000012bH
  001ed	0f 87 14 01 00
	00		 ja	 $LN14@LoadData

; 138  : 					}
; 139  : 
; 140  : 					if ( iCurrentState < 0 || iCurrentState >= MAX_AI_STATE )

  001f3	83 fe 07	 cmp	 esi, 7
  001f6	0f 87 f4 00 00
	00		 ja	 $LN16@LoadData

; 144  : 					}
; 145  : 
; 146  : 					if ( iNextState < 0 || iNextState >= MAX_AI_STATE )

  001fc	8b 55 e8	 mov	 edx, DWORD PTR _iNextState$1$[ebp]
  001ff	83 fa 07	 cmp	 edx, 7
  00202	0f 87 d1 00 00
	00		 ja	 $LN18@LoadData

; 150  : 					}
; 151  : 
; 152  : 					if ( iPriority < 0 || iPriority >= MAX_AI_PRIORITY )

  00208	83 ff 1d	 cmp	 edi, 29			; 0000001dH
  0020b	0f 87 b1 00 00
	00		 ja	 $LN20@LoadData

; 156  : 					}
; 157  : 
; 158  : 
; 159  : 					TMonsterAIState * AIState = &TMonsterAIAutomata::s_MonsterAIAutomataArray[iAutomataNumber].m_AIState[iCurrentState][iPriority];

  00211	69 c8 e8 7b 00
	00		 imul	 ecx, eax, 31720
  00217	8b c6		 mov	 eax, esi
  00219	c1 e0 04	 shl	 eax, 4
  0021c	2b c6		 sub	 eax, esi
  0021e	89 4d e8	 mov	 DWORD PTR tv299[ebp], ecx
  00221	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  00224	69 c0 84 00 00
	00		 imul	 eax, eax, 132

; 160  : 
; 161  : 					AIState->m_iPriority = iPriority;
; 162  : 					AIState->m_iCurrentState = iCurrentState;
; 163  : 					AIState->m_iNextState = iNextState;

  0022a	89 94 08 10 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+16], edx

; 164  : 					AIState->m_iTransitionType = iTransitionType;

  00231	8b 55 e0	 mov	 edx, DWORD PTR _iTransitionType$1$[ebp]
  00234	89 94 08 14 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+20], edx

; 165  : 					AIState->m_iTransitionRate = iTransitionRate;

  0023b	8b 55 dc	 mov	 edx, DWORD PTR _iTransitionRate$1$[ebp]
  0023e	89 94 08 18 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+24], edx

; 166  : 					AIState->m_iTransitionValueType = iTransitionValueType;

  00245	8b 55 d8	 mov	 edx, DWORD PTR _iTransitionValueType$1$[ebp]
  00248	89 94 08 1c 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+28], edx

; 167  : 					AIState->m_iTransitionValue = iTransitionValue;

  0024f	8b 55 d4	 mov	 edx, DWORD PTR _iTransitionValue$1$[ebp]
  00252	89 94 08 20 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+32], edx

; 168  : 					AIState->m_iDelayTime = iDelayTime;

  00259	f3 0f 2c 15 00
	00 00 00	 cvttss2si edx, DWORD PTR ?TokenNumber@@3MA
  00261	89 bc 08 08 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+8], edi
  00268	89 b4 08 0c 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+12], esi

; 169  : 
; 170  : 					memcpy(AIState->m_szStateTransitionDesc, szStateTransitionDesc, sizeof(szStateTransitionDesc));

  0026f	8d b5 6c ff ff
	ff		 lea	 esi, DWORD PTR _szStateTransitionDesc$2[ebp]
  00275	89 94 08 24 00
	00 00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+ecx+36], edx
  0027c	8d 80 28 00 00
	00		 lea	 eax, DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax+40]
  00282	03 c1		 add	 eax, ecx
  00284	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H

; 171  : 
; 172  : 					LogAddC(2,"[Monster AI Automata] Loaded Transition Desc . [ %s ]", AIState->m_szStateTransitionDesc);

  00289	50		 push	 eax
  0028a	8b f8		 mov	 edi, eax
  0028c	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@IGNAMLCG@?$FLMonster?5AI?5Automata?$FN?5Loaded?5Tra@
  00291	f3 a5		 rep movsd
  00293	6a 02		 push	 2
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 173  : 
; 174  : 					TMonsterAIAutomata::s_MonsterAIAutomataArray[iAutomataNumber].m_iAutomataNumber = iAutomataNumber;

  0029b	8b 4d e8	 mov	 ecx, DWORD PTR tv299[ebp]
  0029e	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a1	8b 45 e4	 mov	 eax, DWORD PTR _iAutomataNumber$1$[ebp]
  002a4	89 81 04 00 00
	00		 mov	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[ecx+4], eax

; 175  : 					TMonsterAIAutomata::s_MonsterAIAutomataArray[iAutomataNumber].m_AIStateTransCount[iCurrentState]++;

  002aa	69 c0 fa 1e 00
	00		 imul	 eax, eax, 7930
  002b0	03 45 d0	 add	 eax, DWORD PTR _iCurrentState$1$[ebp]
  002b3	ff 04 85 c8 7b
	00 00		 inc	 DWORD PTR ?s_MonsterAIAutomataArray@TMonsterAIAutomata@@2PAV1@A[eax*4+31688]
  002ba	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  002bd	e9 4f fe ff ff	 jmp	 $LL4@LoadData
$LN20@LoadData:

; 153  : 					{
; 154  : 						MsgBox("[Monster AI Automata] - Priority(%d) Error (%s) File. ",iPriority, lpszFileName);

  002c2	53		 push	 ebx
  002c3	57		 push	 edi
  002c4	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@DPDJANEP@?$FLMonster?5AI?5Automata?$FN?5?9?5Priority@
  002c9	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 155  : 						continue;

  002ce	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  002d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d4	e9 38 fe ff ff	 jmp	 $LL4@LoadData
$LN18@LoadData:

; 147  : 					{
; 148  : 						MsgBox("[Monster AI Automata] - NextState(%d) Error (%s) File. ",iNextState, lpszFileName);

  002d9	53		 push	 ebx
  002da	52		 push	 edx
  002db	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@LIGGCJGB@?$FLMonster?5AI?5Automata?$FN?5?9?5NextStat@
  002e0	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 149  : 						continue;

  002e5	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  002e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002eb	e9 21 fe ff ff	 jmp	 $LL4@LoadData
$LN16@LoadData:

; 141  : 					{
; 142  : 						MsgBox("[Monster AI Automata] - CurrentState(%d) Error (%s) File. ",iCurrentState, lpszFileName);

  002f0	53		 push	 ebx
  002f1	56		 push	 esi
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@BLGGHICH@?$FLMonster?5AI?5Automata?$FN?5?9?5CurrentS@
  002f7	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 143  : 						continue;

  002fc	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  002ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00302	e9 0a fe ff ff	 jmp	 $LL4@LoadData
$LN14@LoadData:

; 135  : 					{
; 136  : 						MsgBox("[Monster AI Automata] - AutomataNumber(%d) Error (%s) File. ",iAutomataNumber, lpszFileName);

  00307	53		 push	 ebx
  00308	50		 push	 eax
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@CKMDEDIJ@?$FLMonster?5AI?5Automata?$FN?5?9?5Automata@
  0030e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 137  : 						continue;

  00313	8b 45 ec	 mov	 eax, DWORD PTR _iType$1$[ebp]
  00316	83 c4 0c	 add	 esp, 12			; 0000000cH
  00319	e9 f3 fd ff ff	 jmp	 $LL4@LoadData
__catch$?LoadData@TMonsterAIAutomata@@SAHPAD@Z$0:

; 184  : 	}
; 185  : 	catch(DWORD)
; 186  : 	{
; 187  : 		MsgBox("[Monster AI Automata] - Loading Exception Error (%s) File. ", lpszFileName);

  0031e	ff 75 08	 push	 DWORD PTR _lpszFileName$[ebp]
  00321	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@IPIEEFNB@?$FLMonster?5AI?5Automata?$FN?5?9?5Loading?5@
  00326	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0032b	83 c4 08	 add	 esp, 8

; 188  : 	}

  0032e	b8 00 00 00 00	 mov	 eax, $LN43@LoadData
  00333	c3		 ret	 0
$LN7@LoadData:

; 56   : 	{
; 57   : 		MsgBox("[Monster AI Automata] - File load error : File Name Error");

  00334	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@DFAHFBPK@?$FLMonster?5AI?5Automata?$FN?5?9?5File?5loa@
  00339	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0033e	83 c4 04	 add	 esp, 4
$LN43@LoadData:

; 58   : 		return FALSE;

  00341	33 c0		 xor	 eax, eax

; 189  : 
; 190  : 	return FALSE;
; 191  : }

  00343	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00346	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0034d	59		 pop	 ecx
  0034e	5f		 pop	 edi
  0034f	5e		 pop	 esi
  00350	5b		 pop	 ebx
  00351	8b e5		 mov	 esp, ebp
  00353	5d		 pop	 ebp
  00354	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?LoadData@TMonsterAIAutomata@@SAHPAD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadData@TMonsterAIAutomata@@SAHPAD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadData@TMonsterAIAutomata@@SAHPAD@Z ENDP		; TMonsterAIAutomata::LoadData
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraistate.h
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?Reset@TMonsterAIAutomata@@QAEXXZ
_TEXT	SEGMENT
tv821 = -4						; size = 4
?Reset@TMonsterAIAutomata@@QAEXXZ PROC			; TMonsterAIAutomata::Reset, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 34   : 	for ( int i=0;i<MAX_AI_STATE;i++)

  00007	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR tv821[ebp], 8
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
$LL4@Reset:

; 36   : 		for ( int j=0;j<MAX_AI_PRIORITY;j++)

  00013	bf 1e 00 00 00	 mov	 edi, 30			; 0000001eH
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@Reset:
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraistate.h

; 56   : 		memset(this->m_szStateTransitionDesc, 0, sizeof(this->m_szStateTransitionDesc));

  00020	6a 64		 push	 100			; 00000064H
  00022	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00025	c7 46 f8 ff ff
	ff ff		 mov	 DWORD PTR [esi-8], -1
  0002c	6a 00		 push	 0
  0002e	50		 push	 eax
  0002f	c7 46 fc ff ff
	ff ff		 mov	 DWORD PTR [esi-4], -1
  00036	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  0003c	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00043	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
  0004a	c7 46 0c ff ff
	ff ff		 mov	 DWORD PTR [esi+12], -1
  00051	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  00058	c7 46 14 ff ff
	ff ff		 mov	 DWORD PTR [esi+20], -1
  0005f	e8 00 00 00 00	 call	 _memset
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp

; 36   : 		for ( int j=0;j<MAX_AI_PRIORITY;j++)

  00067	81 c6 84 00 00
	00		 add	 esi, 132		; 00000084H
  0006d	83 ef 01	 sub	 edi, 1
  00070	75 ae		 jne	 SHORT $LL7@Reset

; 34   : 	for ( int i=0;i<MAX_AI_STATE;i++)

  00072	83 6d fc 01	 sub	 DWORD PTR tv821[ebp], 1
  00076	75 9b		 jne	 SHORT $LL4@Reset

; 37   : 		{
; 38   : 			this->m_AIState[i][j].Reset();
; 39   : 		}
; 40   : 	}
; 41   : 
; 42   : 	for ( int k=0;k<MAX_AI_STATE;k++)
; 43   : 	{
; 44   : 		this->m_AIStateTransCount[k] = 0;

  00078	89 bb c8 7b 00
	00		 mov	 DWORD PTR [ebx+31688], edi
  0007e	89 bb cc 7b 00
	00		 mov	 DWORD PTR [ebx+31692], edi
  00084	89 bb d0 7b 00
	00		 mov	 DWORD PTR [ebx+31696], edi
  0008a	89 bb d4 7b 00
	00		 mov	 DWORD PTR [ebx+31700], edi
  00090	89 bb d8 7b 00
	00		 mov	 DWORD PTR [ebx+31704], edi
  00096	89 bb dc 7b 00
	00		 mov	 DWORD PTR [ebx+31708], edi
  0009c	89 bb e0 7b 00
	00		 mov	 DWORD PTR [ebx+31712], edi
  000a2	89 bb e4 7b 00
	00		 mov	 DWORD PTR [ebx+31716], edi
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi

; 45   : 	}
; 46   : 
; 47   : 	this->m_iAutomataNumber = -1;

  000aa	c7 43 04 ff ff
	ff ff		 mov	 DWORD PTR [ebx+4], -1
  000b1	5b		 pop	 ebx

; 48   : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?Reset@TMonsterAIAutomata@@QAEXXZ ENDP			; TMonsterAIAutomata::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z
_TEXT	SEGMENT
_iCurrentState$1$ = -16					; size = 4
_iMaxStateTransCount$1$ = -12				; size = 4
_this$1$ = -8						; size = 4
_iMaxAgro$1$ = -4					; size = 4
_lpTargetObj$1$ = 8					; size = 4
_iIndex$ = 8						; size = 4
?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z PROC ; TMonsterAIAutomata::RunAutomata, COMDAT
; _this$ = ecx

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi

; 230  : 	LPOBJ lpObj = &gObj[iIndex];

  00007	69 75 08 40 27
	00 00		 imul	 esi, DWORD PTR _iIndex$[ebp], 10048
  0000e	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
  00011	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 231  : 
; 232  : 	if ( MAX_AI_STATE_RANGE(lpObj->m_iCurrentAIState) == FALSE )

  00017	8b 96 d4 20 00
	00		 mov	 edx, DWORD PTR [esi+8404]
  0001d	85 d2		 test	 edx, edx
  0001f	0f 88 43 02 00
	00		 js	 $LN50@RunAutomat
  00025	33 c0		 xor	 eax, eax
  00027	83 fa 07	 cmp	 edx, 7
  0002a	0f 9e c0	 setle	 al
  0002d	85 c0		 test	 eax, eax
  0002f	0f 84 33 02 00
	00		 je	 $LN50@RunAutomat

; 234  : 
; 235  : 	LPOBJ lpTargetObj = NULL;
; 236  : 	int iMaxAgro = -1;
; 237  : 
; 238  : 	int iTargetIndex = lpObj->m_Agro.GetMaxAgroUserIndex(lpObj->m_Index);

  00035	53		 push	 ebx
  00036	57		 push	 edi
  00037	ff 36		 push	 DWORD PTR [esi]
  00039	33 c0		 xor	 eax, eax
  0003b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _iMaxAgro$1$[ebp], -1
  00042	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00048	89 45 08	 mov	 DWORD PTR _lpTargetObj$1$[ebp], eax
  0004b	e8 00 00 00 00	 call	 ?GetMaxAgroUserIndex@TMonsterAIAgro@@QAEHH@Z ; TMonsterAIAgro::GetMaxAgroUserIndex
  00050	8b f8		 mov	 edi, eax

; 239  : 
; 240  : 	// Search The user with Max Agro to make its enemy
; 241  : 	if ( iTargetIndex != -1 )

  00052	83 ff ff	 cmp	 edi, -1
  00055	74 4d		 je	 SHORT $LN53@RunAutomat

; 242  : 	{
; 243  : 		lpTargetObj = &gObj[iTargetIndex];

  00057	69 c7 40 27 00
	00		 imul	 eax, edi, 10048

; 244  : 
; 245  : 		if ( MONSTER_UTIL.FindMonViewportObj(lpObj->m_Index, lpTargetObj->m_Index) )

  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MONSTER_UTIL@@3VTMonsterAIUtil@@A
  00062	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00068	89 45 08	 mov	 DWORD PTR _lpTargetObj$1$[ebp], eax
  0006b	ff 30		 push	 DWORD PTR [eax]
  0006d	ff 36		 push	 DWORD PTR [esi]
  0006f	e8 00 00 00 00	 call	 ?FindMonViewportObj@TMonsterAIUtil@@QAEHHH@Z ; TMonsterAIUtil::FindMonViewportObj
  00074	85 c0		 test	 eax, eax
  00076	74 1b		 je	 SHORT $LN9@RunAutomat

; 246  : 		{
; 247  : 			iMaxAgro = lpObj->m_Agro.GetAgro(iTargetIndex);

  00078	57		 push	 edi
  00079	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  0007f	e8 00 00 00 00	 call	 ?GetAgro@TMonsterAIAgro@@QAEHH@Z ; TMonsterAIAgro::GetAgro

; 248  : 			lpObj->TargetNumber = iTargetIndex;
; 249  : 		}
; 250  : 		else

  00084	8b 4d 08	 mov	 ecx, DWORD PTR _lpTargetObj$1$[ebp]
  00087	89 45 fc	 mov	 DWORD PTR _iMaxAgro$1$[ebp], eax
  0008a	66 89 be 38 06
	00 00		 mov	 WORD PTR [esi+1592], di
  00091	eb 13		 jmp	 SHORT $LN10@RunAutomat
$LN9@RunAutomat:

; 251  : 		{
; 252  : 			lpObj->TargetNumber = -1;

  00093	83 c8 ff	 or	 eax, -1

; 253  : 			lpTargetObj = NULL;

  00096	33 c9		 xor	 ecx, ecx
  00098	66 89 86 38 06
	00 00		 mov	 WORD PTR [esi+1592], ax
  0009f	89 4d 08	 mov	 DWORD PTR _lpTargetObj$1$[ebp], ecx
  000a2	eb 02		 jmp	 SHORT $LN10@RunAutomat
$LN53@RunAutomat:
  000a4	33 c9		 xor	 ecx, ecx
$LN10@RunAutomat:

; 254  : 		}
; 255  : 	}
; 256  : 
; 257  : 	BOOL bRateSuccess = FALSE;
; 258  : 
; 259  : 	int iCurrentState = lpObj->m_iCurrentAIState;

  000a6	8b 96 d4 20 00
	00		 mov	 edx, DWORD PTR [esi+8404]

; 260  : 	int iMaxStateTransCount = this->m_AIStateTransCount[iCurrentState];
; 261  : 
; 262  : 	for ( int iPriority=0;iPriority<iMaxStateTransCount;iPriority++)

  000ac	33 db		 xor	 ebx, ebx
  000ae	8b 7d f8	 mov	 edi, DWORD PTR _this$1$[ebp]
  000b1	89 55 f0	 mov	 DWORD PTR _iCurrentState$1$[ebp], edx
  000b4	8b 84 97 c8 7b
	00 00		 mov	 eax, DWORD PTR [edi+edx*4+31688]
  000bb	89 45 f4	 mov	 DWORD PTR _iMaxStateTransCount$1$[ebp], eax
  000be	85 c0		 test	 eax, eax
  000c0	0f 8e 97 01 00
	00		 jle	 $LN52@RunAutomat

; 254  : 		}
; 255  : 	}
; 256  : 
; 257  : 	BOOL bRateSuccess = FALSE;
; 258  : 
; 259  : 	int iCurrentState = lpObj->m_iCurrentAIState;

  000c6	69 c2 78 0f 00
	00		 imul	 eax, edx, 3960
  000cc	83 c7 20	 add	 edi, 32			; 00000020H
  000cf	8d 53 64	 lea	 edx, DWORD PTR [ebx+100]
  000d2	03 f8		 add	 edi, eax
$LL4@RunAutomat:

; 263  : 	{
; 264  : 		TMonsterAIState * AIState = &this->m_AIState[iCurrentState][iPriority];
; 265  : 		BOOL bTransition = FALSE;	// If there is an apropiate Value it is set to TRUE
; 266  : 
; 267  : 		// Choose the right action according Transation Type 
; 268  : 		switch ( AIState->m_iTransitionType )

  000d4	8b 47 f4	 mov	 eax, DWORD PTR [edi-12]
  000d7	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  000da	0f 87 69 01 00
	00		 ja	 $LN2@RunAutomat
  000e0	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN65@RunAutomat[eax*4]
$LN11@RunAutomat:

; 269  : 		{
; 270  : 			case MAI_STATE_TRANS_NO_ENEMY:
; 271  : 				if ( lpTargetObj == NULL )

  000e7	85 c9		 test	 ecx, ecx
  000e9	0f 85 5a 01 00
	00		 jne	 $LN2@RunAutomat

; 272  : 				{
; 273  : 					bTransition = TRUE;
; 274  : 				}
; 275  : 				break;

  000ef	e9 15 01 00 00	 jmp	 $LN51@RunAutomat
$LN13@RunAutomat:

; 276  : 
; 277  : 			case MAI_STATE_TRANS_IN_ENEMY:
; 278  : 				if ( lpTargetObj )

  000f4	85 c9		 test	 ecx, ecx
  000f6	0f 84 4d 01 00
	00		 je	 $LN2@RunAutomat

; 279  : 				{
; 280  : 					if ( gObjCalDistance(lpObj, lpTargetObj) <= lpObj->m_AttackRange )

  000fc	51		 push	 ecx
  000fd	56		 push	 esi
  000fe	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00103	0f bf 8e 90 06
	00 00		 movsx	 ecx, WORD PTR [esi+1680]
  0010a	83 c4 08	 add	 esp, 8
  0010d	3b c1		 cmp	 eax, ecx
  0010f	0f 8e f4 00 00
	00		 jle	 $LN51@RunAutomat
$LN54@RunAutomat:
  00115	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  0011a	e9 2a 01 00 00	 jmp	 $LN2@RunAutomat
$LN16@RunAutomat:

; 281  : 					{
; 282  : 						bTransition = TRUE;
; 283  : 					}
; 284  : 				}
; 285  : 				break;
; 286  : 
; 287  : 			case MAI_STATE_TRANS_OUT_ENEMY:
; 288  : 				if ( lpTargetObj )

  0011f	85 c9		 test	 ecx, ecx
  00121	0f 84 22 01 00
	00		 je	 $LN2@RunAutomat

; 289  : 				{
; 290  : 					if ( gObjCalDistance(lpObj, lpTargetObj) > lpObj->m_AttackRange )

  00127	51		 push	 ecx
  00128	56		 push	 esi
  00129	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0012e	0f bf 8e 90 06
	00 00		 movsx	 ecx, WORD PTR [esi+1680]
  00135	83 c4 08	 add	 esp, 8
  00138	3b c1		 cmp	 eax, ecx
  0013a	7e d9		 jle	 SHORT $LN54@RunAutomat

; 291  : 					{
; 292  : 						bTransition =  TRUE;
; 293  : 					}
; 294  : 				}
; 295  : 				break;

  0013c	e9 c8 00 00 00	 jmp	 $LN51@RunAutomat
$LN19@RunAutomat:
  00141	66 0f 6e 07	 movd	 xmm0, DWORD PTR [edi]
$LN61@RunAutomat:

; 296  : 
; 297  : 			//case MAI_STATE_TRANS_DIE_ENEMY:
; 298  : 
; 299  : 			case MAI_STATE_TRANS_DEC_HP:
; 300  : 				if ( AIState->m_iTransitionValue > lpObj->Life )

  00145	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00148	0f 2f 86 d8 00
	00 00		 comiss	 xmm0, DWORD PTR [esi+216]
  0014f	0f 86 f4 00 00
	00		 jbe	 $LN2@RunAutomat

; 301  : 				{
; 302  : 					bTransition = TRUE;
; 303  : 				}
; 304  : 				break;

  00155	e9 af 00 00 00	 jmp	 $LN51@RunAutomat
$LN22@RunAutomat:

; 305  : 
; 306  : 			case MAI_STATE_TRANS_IMMEDIATELY:
; 307  : 				bTransition = TRUE;
; 308  : 				break;
; 309  : 
; 310  : 			case MAI_STATE_TRANS_DEC_HP_PER:
; 311  : 				{
; 312  : 					AIState->m_iTransitionValue = (AIState->m_iTransitionValue > 0)? AIState->m_iTransitionValue : 0;

  0015a	8b 07		 mov	 eax, DWORD PTR [edi]
  0015c	33 c9		 xor	 ecx, ecx
  0015e	85 c0		 test	 eax, eax
  00160	0f 4f c8	 cmovg	 ecx, eax

; 313  : 					AIState->m_iTransitionValue = (AIState->m_iTransitionValue < 100 )? AIState->m_iTransitionValue : 100 ;

  00163	8b c2		 mov	 eax, edx
  00165	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00168	0f 4c c1	 cmovl	 eax, ecx
  0016b	89 07		 mov	 DWORD PTR [edi], eax
  0016d	66 0f 6e 8e 24
	01 00 00	 movd	 xmm1, DWORD PTR [esi+292]

; 314  : 					int iLife = (int)((lpObj->AddLife + lpObj->MaxLife)*AIState->m_iTransitionValue / 100.0f);

  00175	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00178	66 0f 6e c0	 movd	 xmm0, eax
  0017c	f3 0f 58 8e dc
	00 00 00	 addss	 xmm1, DWORD PTR [esi+220]
  00184	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00187	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0018b	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  00193	f3 0f 2c c1	 cvttss2si eax, xmm1
  00197	66 0f 6e c0	 movd	 xmm0, eax

; 315  : 
; 316  : 					if ( iLife > lpObj->Life )
; 317  : 					{
; 318  : 						bTransition = TRUE;
; 319  : 					}
; 320  : 				}
; 321  : 				break;

  0019b	eb a8		 jmp	 SHORT $LN61@RunAutomat
$LN24@RunAutomat:

; 322  : 
; 323  : 			case MAI_STATE_TRANS_AGRO_UP:
; 324  : 				if ( lpTargetObj )

  0019d	85 c9		 test	 ecx, ecx
  0019f	0f 84 a4 00 00
	00		 je	 $LN2@RunAutomat

; 325  : 				{
; 326  : 					if ( iMaxAgro >= AIState->m_iTransitionValue )

  001a5	8b 45 fc	 mov	 eax, DWORD PTR _iMaxAgro$1$[ebp]
  001a8	3b 07		 cmp	 eax, DWORD PTR [edi]
  001aa	0f 8c 99 00 00
	00		 jl	 $LN2@RunAutomat

; 327  : 					{
; 328  : 						bTransition = TRUE;
; 329  : 					}
; 330  : 				}
; 331  : 				break;

  001b0	eb 57		 jmp	 SHORT $LN51@RunAutomat
$LN27@RunAutomat:

; 332  : 
; 333  : 			case MAI_STATE_TRANS_AGRO_DOWN:
; 334  : 				if ( lpTargetObj )

  001b2	85 c9		 test	 ecx, ecx
  001b4	0f 84 8f 00 00
	00		 je	 $LN2@RunAutomat

; 335  : 				{
; 336  : 					if ( iMaxAgro <= AIState->m_iTransitionValue )

  001ba	8b 45 fc	 mov	 eax, DWORD PTR _iMaxAgro$1$[ebp]
  001bd	3b 07		 cmp	 eax, DWORD PTR [edi]
  001bf	0f 8f 84 00 00
	00		 jg	 $LN2@RunAutomat

; 337  : 					{
; 338  : 						bTransition = TRUE;
; 339  : 					}
; 340  : 				}
; 341  : 				break;

  001c5	eb 42		 jmp	 SHORT $LN51@RunAutomat
$LN30@RunAutomat:

; 342  : 
; 343  : 			case MAI_STATE_TRANS_GROUP_SOMMON:
; 344  : 				if ( lpObj->m_iGroupNumber )

  001c7	8b 86 dc 20 00
	00		 mov	 eax, DWORD PTR [esi+8412]
  001cd	85 c0		 test	 eax, eax
  001cf	74 78		 je	 SHORT $LN2@RunAutomat

; 345  : 				{
; 346  : 					if ( TMonsterAIGroup::FindGroupMemberToSommon(lpObj->m_Index, lpObj->m_iGroupNumber, lpObj->m_iGroupMemberGuid) )

  001d1	ff b6 e4 20 00
	00		 push	 DWORD PTR [esi+8420]
  001d7	50		 push	 eax
  001d8	ff 36		 push	 DWORD PTR [esi]
  001da	e8 00 00 00 00	 call	 ?FindGroupMemberToSommon@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHH@Z ; TMonsterAIGroup::FindGroupMemberToSommon
  001df	83 c4 0c	 add	 esp, 12			; 0000000cH

; 347  : 					{
; 348  : 						bTransition = TRUE;
; 349  : 					}
; 350  : 				}
; 351  : 				break;

  001e2	eb 1d		 jmp	 SHORT $LN63@RunAutomat
$LN33@RunAutomat:

; 352  : 
; 353  : 			case MAI_STATE_TRANS_GROUP_HEAL:
; 354  : 				if ( lpObj->m_iGroupNumber )

  001e4	8b 86 dc 20 00
	00		 mov	 eax, DWORD PTR [esi+8412]
  001ea	85 c0		 test	 eax, eax
  001ec	74 5b		 je	 SHORT $LN2@RunAutomat

; 355  : 				{
; 356  : 					if ( TMonsterAIGroup::FindGroupMemberToHeal(lpObj->m_Index, lpObj->m_iGroupNumber, lpObj->m_iGroupMemberGuid, 5) )

  001ee	6a 05		 push	 5
  001f0	ff b6 e4 20 00
	00		 push	 DWORD PTR [esi+8420]
  001f6	50		 push	 eax
  001f7	ff 36		 push	 DWORD PTR [esi]
  001f9	e8 00 00 00 00	 call	 ?FindGroupMemberToHeal@TMonsterAIGroup@@SAPAVTMonsterAIGroupMember@@HHHH@Z ; TMonsterAIGroup::FindGroupMemberToHeal
  001fe	83 c4 10	 add	 esp, 16			; 00000010H
$LN63@RunAutomat:
  00201	85 c0		 test	 eax, eax
  00203	0f 84 0c ff ff
	ff		 je	 $LN54@RunAutomat
$LN51@RunAutomat:

; 357  : 					{
; 358  : 						bTransition = TRUE;
; 359  : 					}
; 360  : 				}
; 361  : 				break;
; 362  : 		}
; 363  : 
; 364  : 		// If is Wrong State
; 365  : 		if ( bTransition == FALSE )	
; 366  : 			continue;
; 367  : 	
; 368  : 		if ( (rand()%100) < AIState->m_iTransitionRate )

  00209	e8 00 00 00 00	 call	 _rand
  0020e	99		 cdq
  0020f	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00214	f7 f9		 idiv	 ecx
  00216	3b 57 f8	 cmp	 edx, DWORD PTR [edi-8]
  00219	7d 2c		 jge	 SHORT $LN58@RunAutomat

; 369  : 		{
; 370  : 			bRateSuccess = TRUE;
; 371  : 			lpObj->m_iLastAutomataDelay = AIState->m_iDelayTime;

  0021b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 372  : 			return &this->m_AIState[iCurrentState][iPriority];

  0021e	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00221	89 86 14 24 00
	00		 mov	 DWORD PTR [esi+9236], eax
  00227	83 c1 08	 add	 ecx, 8
  0022a	8b 45 f0	 mov	 eax, DWORD PTR _iCurrentState$1$[ebp]
  0022d	c1 e0 04	 shl	 eax, 4
  00230	2b 45 f0	 sub	 eax, DWORD PTR _iCurrentState$1$[ebp]
  00233	5f		 pop	 edi
  00234	8d 04 43	 lea	 eax, DWORD PTR [ebx+eax*2]
  00237	69 c0 84 00 00
	00		 imul	 eax, eax, 132
  0023d	5b		 pop	 ebx
  0023e	5e		 pop	 esi
  0023f	03 c1		 add	 eax, ecx

; 377  : }

  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c2 04 00	 ret	 4
$LN58@RunAutomat:
  00247	8b d1		 mov	 edx, ecx
$LN2@RunAutomat:

; 260  : 	int iMaxStateTransCount = this->m_AIStateTransCount[iCurrentState];
; 261  : 
; 262  : 	for ( int iPriority=0;iPriority<iMaxStateTransCount;iPriority++)

  00249	43		 inc	 ebx
  0024a	81 c7 84 00 00
	00		 add	 edi, 132		; 00000084H
  00250	3b 5d f4	 cmp	 ebx, DWORD PTR _iMaxStateTransCount$1$[ebp]
  00253	7d 08		 jge	 SHORT $LN52@RunAutomat
  00255	8b 4d 08	 mov	 ecx, DWORD PTR _lpTargetObj$1$[ebp]
  00258	e9 77 fe ff ff	 jmp	 $LL4@RunAutomat
$LN52@RunAutomat:
  0025d	5f		 pop	 edi
  0025e	5b		 pop	 ebx

; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : 	return NULL;

  0025f	33 c0		 xor	 eax, eax
  00261	5e		 pop	 esi

; 377  : }

  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c2 04 00	 ret	 4
$LN50@RunAutomat:

; 233  : 		return NULL;

  00268	33 c0		 xor	 eax, eax
  0026a	5e		 pop	 esi

; 377  : }

  0026b	8b e5		 mov	 esp, ebp
  0026d	5d		 pop	 ebp
  0026e	c2 04 00	 ret	 4
  00271	0f 1f 00	 npad	 3
$LN65@RunAutomat:
  00274	00 00 00 00	 DD	 $LN11@RunAutomat
  00278	00 00 00 00	 DD	 $LN13@RunAutomat
  0027c	00 00 00 00	 DD	 $LN16@RunAutomat
  00280	00 00 00 00	 DD	 $LN2@RunAutomat
  00284	00 00 00 00	 DD	 $LN19@RunAutomat
  00288	00 00 00 00	 DD	 $LN22@RunAutomat
  0028c	00 00 00 00	 DD	 $LN51@RunAutomat
  00290	00 00 00 00	 DD	 $LN24@RunAutomat
  00294	00 00 00 00	 DD	 $LN27@RunAutomat
  00298	00 00 00 00	 DD	 $LN2@RunAutomat
  0029c	00 00 00 00	 DD	 $LN30@RunAutomat
  002a0	00 00 00 00	 DD	 $LN33@RunAutomat
?RunAutomata@TMonsterAIAutomata@@QAEPAVTMonsterAIState@@H@Z ENDP ; TMonsterAIAutomata::RunAutomata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ??1TMonsterAIAutomata@@UAE@XZ
_TEXT	SEGMENT
??1TMonsterAIAutomata@@UAE@XZ PROC			; TMonsterAIAutomata::~TMonsterAIAutomata, COMDAT
; _this$ = ecx

; 26   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7TMonsterAIAutomata@@6B@

; 27   : 	return;
; 28   : }

  00006	c3		 ret	 0
??1TMonsterAIAutomata@@UAE@XZ ENDP			; TMonsterAIAutomata::~TMonsterAIAutomata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.h
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraistate.h
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ??0TMonsterAIAutomata@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIAutomata@@QAE@XZ PROC			; TMonsterAIAutomata::TMonsterAIAutomata, COMDAT
; _this$ = ecx

; 21   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	bf f0 00 00 00	 mov	 edi, 240		; 000000f0H
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7TMonsterAIAutomata@@6B@
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.h

; 39   : 	int m_iAutomataNumber;	// 4

  00010	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
$LL4@TMonsterAI:
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraistate.h

; 56   : 		memset(this->m_szStateTransitionDesc, 0, sizeof(this->m_szStateTransitionDesc));

  00013	6a 64		 push	 100			; 00000064H
  00015	8d 46 20	 lea	 eax, DWORD PTR [esi+32]

; 48   : 		this->m_iPriority = -1;

  00018	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1

; 56   : 		memset(this->m_szStateTransitionDesc, 0, sizeof(this->m_szStateTransitionDesc));

  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00028	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
  0002f	c7 46 0c ff ff
	ff ff		 mov	 DWORD PTR [esi+12], -1
  00036	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  0003d	c7 46 14 ff ff
	ff ff		 mov	 DWORD PTR [esi+20], -1
  00044	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  0004b	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1
  00052	e8 00 00 00 00	 call	 _memset
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	8d b6 84 00 00
	00		 lea	 esi, DWORD PTR [esi+132]
  00060	83 ef 01	 sub	 edi, 1
  00063	75 ae		 jne	 SHORT $LL4@TMonsterAI
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp

; 22   : 	this->Reset();

  00065	8b cb		 mov	 ecx, ebx
  00067	e8 00 00 00 00	 call	 ?Reset@TMonsterAIAutomata@@QAEXXZ ; TMonsterAIAutomata::Reset
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi

; 23   : }

  0006e	8b c3		 mov	 eax, ebx
  00070	5b		 pop	 ebx
  00071	c3		 ret	 0
??0TMonsterAIAutomata@@QAE@XZ ENDP			; TMonsterAIAutomata::TMonsterAIAutomata
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraistate.h
;	COMDAT ?Reset@TMonsterAIState@@QAEXXZ
_TEXT	SEGMENT
?Reset@TMonsterAIState@@QAEXXZ PROC			; TMonsterAIState::Reset, COMDAT
; _this$ = ecx

; 48   : 		this->m_iPriority = -1;
; 49   : 		this->m_iCurrentState = -1;
; 50   : 		this->m_iNextState = -1;
; 51   : 		this->m_iTransitionType = -1;
; 52   : 		this->m_iTransitionRate = -1;
; 53   : 		this->m_iTransitionValueType = -1;
; 54   : 		this->m_iTransitionValue = -1;
; 55   : 		this->m_iDelayTime = -1;
; 56   : 		memset(this->m_szStateTransitionDesc, 0, sizeof(this->m_szStateTransitionDesc));

  00000	6a 64		 push	 100			; 00000064H
  00002	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00005	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  0000b	6a 00		 push	 0
  0000d	50		 push	 eax
  0000e	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1
  00015	c7 41 08 ff ff
	ff ff		 mov	 DWORD PTR [ecx+8], -1
  0001c	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [ecx+12], -1
  00023	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  0002a	c7 41 14 ff ff
	ff ff		 mov	 DWORD PTR [ecx+20], -1
  00031	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [ecx+24], -1
  00038	c7 41 1c ff ff
	ff ff		 mov	 DWORD PTR [ecx+28], -1
  0003f	e8 00 00 00 00	 call	 _memset
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : 	}

  00047	c3		 ret	 0
?Reset@TMonsterAIState@@QAEXXZ ENDP			; TMonsterAIState::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraistate.h
;	COMDAT ??0TMonsterAIState@@QAE@XZ
_TEXT	SEGMENT
??0TMonsterAIState@@QAE@XZ PROC				; TMonsterAIState::TMonsterAIState, COMDAT
; _this$ = ecx

; 41   : 	TMonsterAIState()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 45   : 
; 46   : 	void Reset()
; 47   : 	{
; 48   : 		this->m_iPriority = -1;
; 49   : 		this->m_iCurrentState = -1;
; 50   : 		this->m_iNextState = -1;
; 51   : 		this->m_iTransitionType = -1;
; 52   : 		this->m_iTransitionRate = -1;
; 53   : 		this->m_iTransitionValueType = -1;
; 54   : 		this->m_iTransitionValue = -1;
; 55   : 		this->m_iDelayTime = -1;
; 56   : 		memset(this->m_szStateTransitionDesc, 0, sizeof(this->m_szStateTransitionDesc));

  00003	6a 64		 push	 100			; 00000064H
  00005	6a 00		 push	 0
  00007	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  0000a	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00010	50		 push	 eax
  00011	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00018	c7 46 08 ff ff
	ff ff		 mov	 DWORD PTR [esi+8], -1
  0001f	c7 46 0c ff ff
	ff ff		 mov	 DWORD PTR [esi+12], -1
  00026	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1
  0002d	c7 46 14 ff ff
	ff ff		 mov	 DWORD PTR [esi+20], -1
  00034	c7 46 18 ff ff
	ff ff		 mov	 DWORD PTR [esi+24], -1
  0003b	c7 46 1c ff ff
	ff ff		 mov	 DWORD PTR [esi+28], -1
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 	{
; 43   : 		this->Reset();
; 44   : 	}

  0004a	8b c6		 mov	 eax, esi
  0004c	5e		 pop	 esi
  0004d	c3		 ret	 0
??0TMonsterAIState@@QAE@XZ ENDP				; TMonsterAIState::TMonsterAIState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\tmonsteraiautomata.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 378  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
