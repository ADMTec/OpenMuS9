; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\WhisperCash.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CWhisperCash@@QAE@XZ				; CWhisperCash::CWhisperCash
PUBLIC	??1CWhisperCash@@UAE@XZ				; CWhisperCash::~CWhisperCash
PUBLIC	?AddCash@CWhisperCash@@QAEHPAD@Z		; CWhisperCash::AddCash
PUBLIC	?DelCash@CWhisperCash@@QAEXPAD@Z		; CWhisperCash::DelCash
PUBLIC	?SearchCash@CWhisperCash@@QAEHPAD@Z		; CWhisperCash::SearchCash
PUBLIC	?TimeCheckCashDelete@CWhisperCash@@QAEXXZ	; CWhisperCash::TimeCheckCashDelete
PUBLIC	??_GCWhisperCash@@UAEPAXI@Z			; CWhisperCash::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CWhisperCash@@6B@				; CWhisperCash::`vftable'
PUBLIC	??_R4CWhisperCash@@6B@				; CWhisperCash::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWhisperCash@@@8			; CWhisperCash `RTTI Type Descriptor'
PUBLIC	??_R3CWhisperCash@@8				; CWhisperCash::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWhisperCash@@8				; CWhisperCash::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWhisperCash@@8			; CWhisperCash::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_ECWhisperCash@@UAEPAXI@Z:PROC		; CWhisperCash::`vector deleting destructor'
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?gObjGetIndex@@YAHPAD@Z:PROC			; gObjGetIndex
EXTRN	?gObjUserIdConnectCheck@@YAHPADH@Z:PROC		; gObjUserIdConnectCheck
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CWhisperCash@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWhisperCash@@8 DD FLAT:??_R0?AVCWhisperCash@@@8 ; CWhisperCash::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWhisperCash@@8
rdata$r	ENDS
;	COMDAT ??_R2CWhisperCash@@8
rdata$r	SEGMENT
??_R2CWhisperCash@@8 DD FLAT:??_R1A@?0A@EA@CWhisperCash@@8 ; CWhisperCash::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWhisperCash@@8
rdata$r	SEGMENT
??_R3CWhisperCash@@8 DD 00H				; CWhisperCash::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWhisperCash@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWhisperCash@@@8
data$r	SEGMENT
??_R0?AVCWhisperCash@@@8 DD FLAT:??_7type_info@@6B@	; CWhisperCash `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWhisperCash@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWhisperCash@@6B@
rdata$r	SEGMENT
??_R4CWhisperCash@@6B@ DD 00H				; CWhisperCash::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWhisperCash@@@8
	DD	FLAT:??_R3CWhisperCash@@8
rdata$r	ENDS
;	COMDAT ??_7CWhisperCash@@6B@
CONST	SEGMENT
??_7CWhisperCash@@6B@ DD FLAT:??_R4CWhisperCash@@6B@	; CWhisperCash::`vftable'
	DD	FLAT:??_ECWhisperCash@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCWhisperCash@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWhisperCash@@UAEPAXI@Z PROC			; CWhisperCash::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWhisperCash@@UAE@XZ	; CWhisperCash::~CWhisperCash
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 38		 push	 56			; 00000038H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCWhisperCash@@UAEPAXI@Z ENDP			; CWhisperCash::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ?TimeCheckCashDelete@CWhisperCash@@QAEXXZ
_TEXT	SEGMENT
?TimeCheckCashDelete@CWhisperCash@@QAEXXZ PROC		; CWhisperCash::TimeCheckCashDelete, COMDAT
; _this$ = ecx

; 122  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 123  : 	int n = 0;
; 124  : 	unsigned long CurTime = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 125  : 
; 126  : 	for ( n=0;n<2;n++)
; 127  : 	{
; 128  : 		if ( this->WChash[n].Live == 1 )

  00009	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  0000d	75 14		 jne	 SHORT $LN2@TimeCheckC

; 129  : 		{
; 130  : 			if ( (CurTime-this->WChash[n].m_Time ) > 60000)

  0000f	8b d0		 mov	 edx, eax
  00011	2b 56 18	 sub	 edx, DWORD PTR [esi+24]
  00014	81 fa 60 ea 00
	00		 cmp	 edx, 60000		; 0000ea60H
  0001a	76 07		 jbe	 SHORT $LN2@TimeCheckC

; 131  : 			{
; 132  : 				this->WChash[n].Live=0;

  0001c	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN2@TimeCheckC:

; 125  : 
; 126  : 	for ( n=0;n<2;n++)
; 127  : 	{
; 128  : 		if ( this->WChash[n].Live == 1 )

  00023	83 7e 1c 01	 cmp	 DWORD PTR [esi+28], 1
  00027	75 11		 jne	 SHORT $LN15@TimeCheckC

; 129  : 		{
; 130  : 			if ( (CurTime-this->WChash[n].m_Time ) > 60000)

  00029	2b 46 30	 sub	 eax, DWORD PTR [esi+48]
  0002c	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  00031	76 07		 jbe	 SHORT $LN15@TimeCheckC

; 131  : 			{
; 132  : 				this->WChash[n].Live=0;

  00033	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN15@TimeCheckC:
  0003a	5e		 pop	 esi

; 133  : 			}
; 134  : 		}
; 135  : 	}
; 136  : }

  0003b	c3		 ret	 0
?TimeCheckCashDelete@CWhisperCash@@QAEXXZ ENDP		; CWhisperCash::TimeCheckCashDelete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ?SearchCash@CWhisperCash@@QAEHPAD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_id$ = 8						; size = 4
?SearchCash@CWhisperCash@@QAEHPAD@Z PROC		; CWhisperCash::SearchCash, COMDAT
; _this$ = ecx

; 100  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 101  : 	int n = 0;
; 102  : 
; 103  : 	for ( n=0; n<2;n++)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _id$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	33 ff		 xor	 edi, edi
  00011	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
$LL4@SearchCash:

; 104  : 	{
; 105  : 		if ( this->WChash[n].Live == 1 )

  00014	83 7e fc 01	 cmp	 DWORD PTR [esi-4], 1
  00018	75 33		 jne	 SHORT $LN2@SearchCash

; 106  : 		{
; 107  : 			if ( this->WChash[n].szId[0] == id[0] )

  0001a	8a 06		 mov	 al, BYTE PTR [esi]
  0001c	3a 03		 cmp	 al, BYTE PTR [ebx]
  0001e	75 2d		 jne	 SHORT $LN2@SearchCash

; 108  : 			{
; 109  : 				if ( strcmp(&this->WChash[n].szId[0], id) == 0)

  00020	8b c3		 mov	 eax, ebx
  00022	8b ce		 mov	 ecx, esi
$LL15@SearchCash:
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	3a 10		 cmp	 dl, BYTE PTR [eax]
  00028	75 1a		 jne	 SHORT $LN16@SearchCash
  0002a	84 d2		 test	 dl, dl
  0002c	74 12		 je	 SHORT $LN17@SearchCash
  0002e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00031	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00034	75 0e		 jne	 SHORT $LN16@SearchCash
  00036	83 c1 02	 add	 ecx, 2
  00039	83 c0 02	 add	 eax, 2
  0003c	84 d2		 test	 dl, dl
  0003e	75 e4		 jne	 SHORT $LL15@SearchCash
$LN17@SearchCash:
  00040	33 c0		 xor	 eax, eax
  00042	eb 05		 jmp	 SHORT $LN18@SearchCash
$LN16@SearchCash:
  00044	1b c0		 sbb	 eax, eax
  00046	83 c8 01	 or	 eax, 1
$LN18@SearchCash:
  00049	85 c0		 test	 eax, eax
  0004b	74 15		 je	 SHORT $LN10@SearchCash
$LN2@SearchCash:

; 101  : 	int n = 0;
; 102  : 
; 103  : 	for ( n=0; n<2;n++)

  0004d	47		 inc	 edi
  0004e	83 c6 18	 add	 esi, 24			; 00000018H
  00051	83 ff 02	 cmp	 edi, 2
  00054	7c be		 jl	 SHORT $LL4@SearchCash

; 113  : 				}
; 114  : 			}
; 115  : 		}
; 116  : 	}
; 117  : 	
; 118  : 	return -1;

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	83 c8 ff	 or	 eax, -1
  0005b	5b		 pop	 ebx

; 119  : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
$LN10@SearchCash:

; 110  : 				{
; 111  : 					this->WChash[n].m_Time = GetTickCount();

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00065	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00068	8d 34 c1	 lea	 esi, DWORD PTR [ecx+eax*8]
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00071	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 112  : 					return this->WChash[n].m_Index ;

  00074	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 119  : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?SearchCash@CWhisperCash@@QAEHPAD@Z ENDP		; CWhisperCash::SearchCash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ?DelCash@CWhisperCash@@QAEXPAD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_id$ = 8						; size = 4
?DelCash@CWhisperCash@@QAEXPAD@Z PROC			; CWhisperCash::DelCash, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 81   : 	int n = 0;
; 82   : 
; 83   : 	for ( n=0; n<2;n++)

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _id$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	33 ff		 xor	 edi, edi
  00011	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
$LL4@DelCash:

; 84   : 	{
; 85   : 		if ( this->WChash[n].Live == 1 )

  00014	83 7e fc 01	 cmp	 DWORD PTR [esi-4], 1
  00018	75 33		 jne	 SHORT $LN2@DelCash

; 86   : 		{
; 87   : 			if ( this->WChash[n].szId[0] == id[0] )

  0001a	8a 06		 mov	 al, BYTE PTR [esi]
  0001c	3a 03		 cmp	 al, BYTE PTR [ebx]
  0001e	75 2d		 jne	 SHORT $LN2@DelCash

; 88   : 			{
; 89   : 				if ( strcmp(&this->WChash[n].szId[0], id) == 0)

  00020	8b c3		 mov	 eax, ebx
  00022	8b ce		 mov	 ecx, esi
$LL15@DelCash:
  00024	8a 11		 mov	 dl, BYTE PTR [ecx]
  00026	3a 10		 cmp	 dl, BYTE PTR [eax]
  00028	75 1a		 jne	 SHORT $LN16@DelCash
  0002a	84 d2		 test	 dl, dl
  0002c	74 12		 je	 SHORT $LN17@DelCash
  0002e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00031	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00034	75 0e		 jne	 SHORT $LN16@DelCash
  00036	83 c1 02	 add	 ecx, 2
  00039	83 c0 02	 add	 eax, 2
  0003c	84 d2		 test	 dl, dl
  0003e	75 e4		 jne	 SHORT $LL15@DelCash
$LN17@DelCash:
  00040	33 c0		 xor	 eax, eax
  00042	eb 05		 jmp	 SHORT $LN18@DelCash
$LN16@DelCash:
  00044	1b c0		 sbb	 eax, eax
  00046	83 c8 01	 or	 eax, 1
$LN18@DelCash:
  00049	85 c0		 test	 eax, eax
  0004b	74 12		 je	 SHORT $LN10@DelCash
$LN2@DelCash:

; 81   : 	int n = 0;
; 82   : 
; 83   : 	for ( n=0; n<2;n++)

  0004d	47		 inc	 edi
  0004e	83 c6 18	 add	 esi, 24			; 00000018H
  00051	83 ff 02	 cmp	 edi, 2
  00054	7c be		 jl	 SHORT $LL4@DelCash
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx

; 92   : 					return;
; 93   : 				}
; 94   : 			}
; 95   : 		}
; 96   : 	}
; 97   : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN10@DelCash:

; 90   : 				{
; 91   : 					this->WChash[n].Live = 0;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00062	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	c7 44 c1 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*8+4], 0

; 92   : 					return;
; 93   : 				}
; 94   : 			}
; 95   : 		}
; 96   : 	}
; 97   : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?DelCash@CWhisperCash@@QAEXPAD@Z ENDP			; CWhisperCash::DelCash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ?AddCash@CWhisperCash@@QAEHPAD@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
?AddCash@CWhisperCash@@QAEHPAD@Z PROC			; CWhisperCash::AddCash, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 28   : 	int count =0;
; 29   : 	int maxcount = 2;
; 30   : 	int result;
; 31   : 
; 32   : 	result=this->SearchCash(id);

  00006	ff 75 08	 push	 DWORD PTR _id$[ebp]
  00009	8b f9		 mov	 edi, ecx
  0000b	be 02 00 00 00	 mov	 esi, 2
  00010	e8 00 00 00 00	 call	 ?SearchCash@CWhisperCash@@QAEHPAD@Z ; CWhisperCash::SearchCash
  00015	8b d8		 mov	 ebx, eax

; 33   : 
; 34   : 	if (result != -1)

  00017	83 fb ff	 cmp	 ebx, -1
  0001a	74 1d		 je	 SHORT $LN4@AddCash

; 35   : 	{
; 36   : 		if (gObjUserIdConnectCheck(id,result) == 0)

  0001c	53		 push	 ebx
  0001d	ff 75 08	 push	 DWORD PTR _id$[ebp]
  00020	e8 00 00 00 00	 call	 ?gObjUserIdConnectCheck@@YAHPADH@Z ; gObjUserIdConnectCheck
  00025	83 c4 08	 add	 esp, 8
  00028	83 c9 ff	 or	 ecx, -1
  0002b	85 c0		 test	 eax, eax
  0002d	0f 44 d9	 cmove	 ebx, ecx
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 72   : 			}
; 73   : 			return result;

  00032	8b c3		 mov	 eax, ebx
  00034	5b		 pop	 ebx

; 74   : 		}
; 75   : 	}
; 76   : 	return result;
; 77   : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
$LN4@AddCash:

; 37   : 		{
; 38   : 			return -1;
; 39   : 		}
; 40   : 		return result;
; 41   : 	}
; 42   : 
; 43   : 	result=gObjGetIndex(id);

  00039	ff 75 08	 push	 DWORD PTR _id$[ebp]
  0003c	e8 00 00 00 00	 call	 ?gObjGetIndex@@YAHPAD@Z	; gObjGetIndex
  00041	8b d8		 mov	 ebx, eax
  00043	83 c4 04	 add	 esp, 4

; 44   : 
; 45   : 	if (result == -1)

  00046	83 fb ff	 cmp	 ebx, -1
  00049	75 09		 jne	 SHORT $LN6@AddCash

; 46   : 	{
; 47   : 		return -1;

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	0b c0		 or	 eax, eax
  0004f	5b		 pop	 ebx

; 74   : 		}
; 75   : 	}
; 76   : 	return result;
; 77   : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
$LN6@AddCash:

; 48   : 	}
; 49   : 
; 50   : 	count=this->WChashCount ;

  00054	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
$LL2@AddCash:

; 53   : 	{
; 54   : 		count++;

  00057	40		 inc	 eax

; 55   : 
; 56   : 		if (count > 1)

  00058	33 c9		 xor	 ecx, ecx
  0005a	4e		 dec	 esi
  0005b	83 f8 01	 cmp	 eax, 1
  0005e	0f 4f c1	 cmovg	 eax, ecx

; 57   : 		{
; 58   : 			count=0;
; 59   : 		}
; 60   : 
; 61   : 		if ( this->WChash[count].Live == 0 )

  00061	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00064	83 7c cf 04 00	 cmp	 DWORD PTR [edi+ecx*8+4], 0
  00069	74 0d		 je	 SHORT $LN12@AddCash

; 51   : 
; 52   : 	while ( maxcount-- != 0)

  0006b	85 f6		 test	 esi, esi
  0006d	75 e8		 jne	 SHORT $LL2@AddCash

; 72   : 			}
; 73   : 			return result;

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	8b c3		 mov	 eax, ebx
  00073	5b		 pop	 ebx

; 74   : 		}
; 75   : 	}
; 76   : 	return result;
; 77   : }

  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN12@AddCash:

; 62   : 		{
; 63   : 			memcpy(&this->WChash[count].szId[0], id, 10 );

  00078	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0007b	8d 34 c7	 lea	 esi, DWORD PTR [edi+eax*8]
  0007e	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00081	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00085	66 0f d6 46 08	 movq	 QWORD PTR [esi+8], xmm0
  0008a	66 8b 40 08	 mov	 ax, WORD PTR [eax+8]
  0008e	66 89 46 10	 mov	 WORD PTR [esi+16], ax

; 64   : 			this->WChash[count].Live = 1;

  00092	c7 46 04 01 00
	00 00		 mov	 DWORD PTR [esi+4], 1

; 65   : 			this->WChash[count].m_Index = result;

  00099	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 66   : 			this->WChash[count].m_Time = GetTickCount();

  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000a2	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000a5	ff 47 34	 inc	 DWORD PTR [edi+52]

; 67   : 			this->WChashCount++;
; 68   : 
; 69   : 			if ( this->WChashCount > 1)

  000a8	83 7f 34 01	 cmp	 DWORD PTR [edi+52], 1
  000ac	7e 07		 jle	 SHORT $LN9@AddCash

; 70   : 			{
; 71   : 				this->WChashCount = 0;

  000ae	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
$LN9@AddCash:
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi

; 72   : 			}
; 73   : 			return result;

  000b7	8b c3		 mov	 eax, ebx
  000b9	5b		 pop	 ebx

; 74   : 		}
; 75   : 	}
; 76   : 	return result;
; 77   : }

  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
?AddCash@CWhisperCash@@QAEHPAD@Z ENDP			; CWhisperCash::AddCash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ??1CWhisperCash@@UAE@XZ
_TEXT	SEGMENT
??1CWhisperCash@@UAE@XZ PROC				; CWhisperCash::~CWhisperCash, COMDAT
; _this$ = ecx

; 21   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWhisperCash@@6B@

; 22   : 	return;
; 23   : }

  00006	c3		 ret	 0
??1CWhisperCash@@UAE@XZ ENDP				; CWhisperCash::~CWhisperCash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ??0CWhisperCash@@QAE@XZ
_TEXT	SEGMENT
??0CWhisperCash@@QAE@XZ PROC				; CWhisperCash::CWhisperCash, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWhisperCash@@6B@

; 16   : 	return;
; 17   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CWhisperCash@@QAE@XZ ENDP				; CWhisperCash::CWhisperCash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\whispercash.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
