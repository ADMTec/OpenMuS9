; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\CWhatsUpDummyServer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA ; CWhatsUpDummyServer::m_lpOldProc
_BSS	SEGMENT
?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA DD 01H DUP (?) ; CWhatsUpDummyServer::m_lpOldProc
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CWhatsUpDummyServer@@QAE@XZ			; CWhatsUpDummyServer::CWhatsUpDummyServer
PUBLIC	??1CWhatsUpDummyServer@@QAE@XZ			; CWhatsUpDummyServer::~CWhatsUpDummyServer
PUBLIC	?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z	; CWhatsUpDummyServer::Start
PUBLIC	?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z ; CWhatsUpDummyServer::ParentWndProc
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__imp__CallWindowProcA@20:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp__SetWindowLongA@12:PROC
EXTRN	__imp__accept@12:PROC
EXTRN	__imp__bind@12:PROC
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__listen@8:PROC
EXTRN	__imp__recv@16:PROC
EXTRN	__imp__socket@12:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cwhatsupdummyserver.cpp
;	COMDAT ?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_isockinfolen$1 = -280					; size = 4
_sockinfo$2 = -276					; size = 16
_cBUFFER$3 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_iMessage$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z PROC ; CWhatsUpDummyServer::ParentWndProc, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 99   : 	switch ( iMessage )

  00013	8b 45 0c	 mov	 eax, DWORD PTR _iMessage$[ebp]
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]
  0001a	3d 0f 04 00 00	 cmp	 eax, 1039		; 0000040fH
  0001f	74 23		 je	 SHORT $LN6@ParentWndP

; 140  : 				default:
; 141  : 					return FALSE;
; 142  : 			}
; 143  : 			break;
; 144  : 		default:
; 145  : 			return CallWindowProcA(CWhatsUpDummyServer::m_lpOldProc, hWnd, iMessage, wParam, lParam);

  00021	ff 75 14	 push	 DWORD PTR _lParam$[ebp]
  00024	ff 75 10	 push	 DWORD PTR _wParam$[ebp]
  00027	50		 push	 eax
  00028	57		 push	 edi
  00029	ff 35 00 00 00
	00		 push	 DWORD PTR ?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA ; CWhatsUpDummyServer::m_lpOldProc
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CallWindowProcA@20
  00035	5f		 pop	 edi

; 146  : 	}
; 147  : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	33 cd		 xor	 ecx, ebp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
$LN6@ParentWndP:

; 100  : 	{
; 101  : 		case WM_GM_CONNECT_SERVER_MSG:
; 102  : 			switch ( lParam & 0xFFFF & 0xFFFF )

  00044	0f b7 45 14	 movzx	 eax, WORD PTR _lParam$[ebp]
  00048	56		 push	 esi
  00049	83 e8 01	 sub	 eax, 1
  0004c	74 51		 je	 SHORT $LN10@ParentWndP
  0004e	83 e8 07	 sub	 eax, 7
  00051	74 0c		 je	 SHORT $LN7@ParentWndP
  00053	83 e8 18	 sub	 eax, 24			; 00000018H
  00056	75 6b		 jne	 SHORT $LN11@ParentWndP

; 133  : 						}
; 134  : 						return FALSE;
; 135  : 					}
; 136  : 					break;
; 137  : 				case FD_CLOSE:
; 138  : 					closesocket(wParam & 0xFFFF & 0xFFFF);

  00058	0f b7 45 10	 movzx	 eax, WORD PTR _wParam$[ebp]
  0005c	50		 push	 eax

; 139  : 					return FALSE;

  0005d	eb 5e		 jmp	 SHORT $LN17@ParentWndP
$LN7@ParentWndP:

; 103  : 			{
; 104  : 				case FD_ACCEPT:
; 105  : 					{
; 106  : 						sockaddr_in sockinfo;
; 107  : 						int isockinfolen=16;
; 108  : 						SOCKET sckTemp;
; 109  : 						int iRetVal;
; 110  : 
; 111  : 						sckTemp = accept(wParam & 0xFFFF & 0xFFFF, (sockaddr *)&sockinfo, &isockinfolen);

  0005f	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _isockinfolen$1[ebp]
  00065	c7 85 e8 fe ff
	ff 10 00 00 00	 mov	 DWORD PTR _isockinfolen$1[ebp], 16 ; 00000010H
  0006f	50		 push	 eax
  00070	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _sockinfo$2[ebp]
  00076	50		 push	 eax
  00077	0f b7 45 10	 movzx	 eax, WORD PTR _wParam$[ebp]
  0007b	50		 push	 eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__accept@12
  00082	8b f0		 mov	 esi, eax

; 112  : 
; 113  : 						if ( sckTemp == INVALID_SOCKET )

  00084	83 fe ff	 cmp	 esi, -1
  00087	74 3a		 je	 SHORT $LN11@ParentWndP

; 114  : 							return FALSE;
; 115  : 
; 116  : 						iRetVal = WSAAsyncSelect(sckTemp, hWnd, WM_GM_CONNECT_SERVER_MSG, FD_READ|FD_CLOSE);

  00089	6a 21		 push	 33			; 00000021H
  0008b	68 0f 04 00 00	 push	 1039			; 0000040fH
  00090	57		 push	 edi
  00091	56		 push	 esi
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 117  : 
; 118  : 						if ( iRetVal == -1 )

  00098	83 f8 ff	 cmp	 eax, -1
  0009b	75 26		 jne	 SHORT $LN11@ParentWndP

; 119  : 						{
; 120  : 							closesocket(sckTemp);
; 121  : 						}
; 122  : 						return FALSE;

  0009d	eb 1d		 jmp	 SHORT $LN18@ParentWndP
$LN10@ParentWndP:

; 123  : 					}
; 124  : 					break;
; 125  : 				case FD_READ:
; 126  : 					{
; 127  : 						char cBUFFER[256];
; 128  : 						int iRecvBytes = recv(wParam & 0xFFFF & 0xFFFF, cBUFFER, sizeof(cBUFFER), 0);

  0009f	0f b7 75 10	 movzx	 esi, WORD PTR _wParam$[ebp]
  000a3	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _cBUFFER$3[ebp]
  000a9	6a 00		 push	 0
  000ab	68 00 01 00 00	 push	 256			; 00000100H
  000b0	50		 push	 eax
  000b1	56		 push	 esi
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recv@16

; 129  : 
; 130  : 						if ( iRecvBytes <= 0 )

  000b8	85 c0		 test	 eax, eax
  000ba	7f 07		 jg	 SHORT $LN11@ParentWndP
$LN18@ParentWndP:

; 131  : 						{
; 132  : 							closesocket(wParam & 0xFFFF & 0xFFFF);

  000bc	56		 push	 esi
$LN17@ParentWndP:
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN11@ParentWndP:

; 146  : 	}
; 147  : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 c0		 xor	 eax, eax
  000c8	5e		 pop	 esi
  000c9	33 cd		 xor	 ecx, ebp
  000cb	5f		 pop	 edi
  000cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z ENDP ; CWhatsUpDummyServer::ParentWndProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cwhatsupdummyserver.cpp
;	COMDAT ?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z
_TEXT	SEGMENT
_sockinfo$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_wPort$ = 12						; size = 2
?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z PROC	; CWhatsUpDummyServer::Start, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]
  00015	8b f1		 mov	 esi, ecx

; 35   : 	sockaddr_in sockinfo;
; 36   : 	int iRetVal;
; 37   : 
; 38   : 	if ( hWnd == 0 )

  00017	85 ff		 test	 edi, edi
  00019	74 5f		 je	 SHORT $LN9@Start

; 39   : 	{
; 40   : 		return 0;
; 41   : 	}
; 42   : 
; 43   : 	if ( !IsWindow(hWnd) )

  0001b	57		 push	 edi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsWindow@4
  00022	85 c0		 test	 eax, eax
  00024	74 54		 je	 SHORT $LN9@Start

; 44   : 	{
; 45   : 		return 0;
; 46   : 	}
; 47   : 
; 48   : 	this->m_hParentWnd = hWnd;
; 49   : 
; 50   : 	this->m_sckDUMMY=socket(AF_INET, SOCK_STREAM, IPPROTO_IP);

  00026	6a 00		 push	 0
  00028	6a 01		 push	 1
  0002a	6a 02		 push	 2
  0002c	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  00035	89 06		 mov	 DWORD PTR [esi], eax

; 51   : 	
; 52   : 	if ( this->m_sckDUMMY == INVALID_SOCKET ) // INVALID_SOCKET

  00037	83 f8 ff	 cmp	 eax, -1
  0003a	74 3e		 je	 SHORT $LN9@Start

; 53   : 	{
; 54   : 		return 0;
; 55   : 	}
; 56   : 
; 57   : 	sockinfo.sin_family =AF_INET;
; 58   : 	sockinfo.sin_addr.S_un.S_addr=0;
; 59   : 	sockinfo.sin_port=htons(wPort);

  0003c	ff 75 0c	 push	 DWORD PTR _wPort$[ebp]
  0003f	b8 02 00 00 00	 mov	 eax, 2
  00044	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _sockinfo$[ebp+4], 0
  0004b	66 89 45 ec	 mov	 WORD PTR _sockinfo$[ebp], ax
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  00055	66 89 45 ee	 mov	 WORD PTR _sockinfo$[ebp+2], ax

; 60   : 	
; 61   : 	iRetVal=0;
; 62   : 	iRetVal=bind(this->m_sckDUMMY , (sockaddr*)&sockinfo,16);

  00059	8d 45 ec	 lea	 eax, DWORD PTR _sockinfo$[ebp]
  0005c	6a 10		 push	 16			; 00000010H
  0005e	50		 push	 eax
  0005f	ff 36		 push	 DWORD PTR [esi]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12

; 63   : 
; 64   : 	if (iRetVal == -1)

  00067	83 f8 ff	 cmp	 eax, -1
  0006a	75 22		 jne	 SHORT $LN5@Start
$LN10@Start:

; 65   : 	{
; 66   : 		closesocket(this->m_sckDUMMY);

  0006c	ff 36		 push	 DWORD PTR [esi]
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 67   : 		this->m_sckDUMMY = INVALID_SOCKET;

  00074	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$LN9@Start:

; 68   : 		return 0;

  0007a	5f		 pop	 edi
  0007b	33 c0		 xor	 eax, eax
  0007d	5e		 pop	 esi

; 90   : 	return 1;
; 91   : }

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00081	33 cd		 xor	 ecx, ebp
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c2 08 00	 ret	 8
$LN5@Start:

; 69   : 	}
; 70   : 
; 71   : 	iRetVal=listen(this->m_sckDUMMY, 2147483647 );

  0008e	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  00093	ff 36		 push	 DWORD PTR [esi]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8

; 72   : 
; 73   : 	if (iRetVal == -1 )

  0009b	83 f8 ff	 cmp	 eax, -1
  0009e	74 cc		 je	 SHORT $LN10@Start

; 74   : 	{
; 75   : 		closesocket(this->m_sckDUMMY);
; 76   : 		this->m_sckDUMMY = INVALID_SOCKET;
; 77   : 		return 0;
; 78   : 	}
; 79   : 
; 80   : 	iRetVal=WSAAsyncSelect(this->m_sckDUMMY , hWnd, WM_GM_CONNECT_SERVER_MSG, FD_ACCEPT);

  000a0	6a 08		 push	 8
  000a2	68 0f 04 00 00	 push	 1039			; 0000040fH
  000a7	57		 push	 edi
  000a8	ff 36		 push	 DWORD PTR [esi]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 81   : 
; 82   : 	if (iRetVal == -1 )

  000b0	83 f8 ff	 cmp	 eax, -1
  000b3	74 b7		 je	 SHORT $LN10@Start

; 83   : 	{
; 84   : 		closesocket(this->m_sckDUMMY);
; 85   : 		this->m_sckDUMMY = INVALID_SOCKET;
; 86   : 		return 0;
; 87   : 	}
; 88   : 
; 89   : 	CWhatsUpDummyServer::m_lpOldProc=(WNDPROC)SetWindowLong(hWnd, GWL_WNDPROC, (LONG)ParentWndProc  );

  000b5	68 00 00 00 00	 push	 OFFSET ?ParentWndProc@CWhatsUpDummyServer@@SAJPAUHWND__@@IIJ@Z ; CWhatsUpDummyServer::ParentWndProc
  000ba	6a fc		 push	 -4			; fffffffcH
  000bc	57		 push	 edi
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowLongA@12

; 90   : 	return 1;
; 91   : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	5f		 pop	 edi
  000c7	a3 00 00 00 00	 mov	 DWORD PTR ?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA, eax ; CWhatsUpDummyServer::m_lpOldProc
  000cc	33 cd		 xor	 ecx, ebp
  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	5e		 pop	 esi
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
?Start@CWhatsUpDummyServer@@QAEHPAUHWND__@@G@Z ENDP	; CWhatsUpDummyServer::Start
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cwhatsupdummyserver.cpp
;	COMDAT ??1CWhatsUpDummyServer@@QAE@XZ
_TEXT	SEGMENT
??1CWhatsUpDummyServer@@QAE@XZ PROC			; CWhatsUpDummyServer::~CWhatsUpDummyServer, COMDAT
; _this$ = ecx

; 26   : 	if ( this->m_sckDUMMY != INVALID_SOCKET ) // INVALID_SOCKET

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 f8 ff	 cmp	 eax, -1
  00005	74 07		 je	 SHORT $LN2@CWhatsUpDu

; 27   : 	{
; 28   : 		closesocket(this->m_sckDUMMY );

  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$LN2@CWhatsUpDu:

; 29   : 	}
; 30   : }

  0000e	c3		 ret	 0
??1CWhatsUpDummyServer@@QAE@XZ ENDP			; CWhatsUpDummyServer::~CWhatsUpDummyServer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cwhatsupdummyserver.cpp
;	COMDAT ??0CWhatsUpDummyServer@@QAE@XZ
_TEXT	SEGMENT
_wsaVer$ = -404						; size = 400
__$ArrayPad$ = -4					; size = 4
??0CWhatsUpDummyServer@@QAE@XZ PROC			; CWhatsUpDummyServer::CWhatsUpDummyServer, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 01 00
	00		 sub	 esp, 404		; 00000194H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 16   : 	WSADATA wsaVer;
; 17   : 	this->m_sckDUMMY = INVALID_SOCKET;	// INVALID_SOCKET
; 18   : 	this->m_hParentWnd = NULL;
; 19   : 	CWhatsUpDummyServer::m_lpOldProc=0;
; 20   : 	WSAStartup(WINSOCK_REQUESTED_VERSION, &wsaVer);

  00016	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _wsaVer$[ebp]
  0001c	50		 push	 eax
  0001d	68 02 02 00 00	 push	 514			; 00000202H
  00022	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00028	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_lpOldProc@CWhatsUpDummyServer@@2P6GJPAUHWND__@@IIJ@ZA, 0 ; CWhatsUpDummyServer::m_lpOldProc
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8

; 21   : }

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00042	8b c6		 mov	 eax, esi
  00044	33 cd		 xor	 ecx, ebp
  00046	5e		 pop	 esi
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??0CWhatsUpDummyServer@@QAE@XZ ENDP			; CWhatsUpDummyServer::CWhatsUpDummyServer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cwhatsupdummyserver.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 148  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\cwhatsupdummyserver.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 148  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
