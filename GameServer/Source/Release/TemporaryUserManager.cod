; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\TemporaryUserManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_pInstance@CTemporaryUserManager@@2PAV1@A	; CTemporaryUserManager::m_pInstance
PUBLIC	?g_MaintainUserConnectionSecond@@3HA		; g_MaintainUserConnectionSecond
_BSS	SEGMENT
?m_pInstance@CTemporaryUserManager@@2PAV1@A DD 01H DUP (?) ; CTemporaryUserManager::m_pInstance
_BSS	ENDS
_DATA	SEGMENT
?g_MaintainUserConnectionSecond@@3HA DD 012cH		; g_MaintainUserConnectionSecond
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CTemporaryUserManager@@QAE@XZ		; CTemporaryUserManager::CTemporaryUserManager
PUBLIC	??1CTemporaryUserManager@@QAE@XZ		; CTemporaryUserManager::~CTemporaryUserManager
PUBLIC	?GetInstance@CTemporaryUserManager@@SAPAV1@XZ	; CTemporaryUserManager::GetInstance
PUBLIC	?AddUserData@CTemporaryUserManager@@QAEHPADHH@Z	; CTemporaryUserManager::AddUserData
PUBLIC	?AddToPriviousParty@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::AddToPriviousParty
PUBLIC	?ClearOverTimeUserData@CTemporaryUserManager@@QAEHK@Z ; CTemporaryUserManager::ClearOverTimeUserData
PUBLIC	?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::TidyUpTempuserdate
PUBLIC	?DeleteUserInParty@CTemporaryUserManager@@QAEXH@Z ; CTemporaryUserManager::DeleteUserInParty
PUBLIC	?DeleteAllPartyUserData@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::DeleteAllPartyUserData
PUBLIC	?CheckMatchCharacter@CTemporaryUserManager@@QAEHPAD@Z ; CTemporaryUserManager::CheckMatchCharacter
PUBLIC	?CheckMatchIndex@CTemporaryUserManager@@QAEHH@Z	; CTemporaryUserManager::CheckMatchIndex
PUBLIC	?SendEventMapInfo@CTemporaryUserManager@@QAEXHH@Z ; CTemporaryUserManager::SendEventMapInfo
PUBLIC	?ResumeEvent@CTemporaryUserManager@@QAEHHH@Z	; CTemporaryUserManager::ResumeEvent
PUBLIC	?ResumeIllusionTemple@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeIllusionTemple
PUBLIC	?ResumeImperialguardian@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeImperialguardian
PUBLIC	?ResumeBloodCastle@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeBloodCastle
PUBLIC	?ResumeDoppelganger@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeDoppelganger
PUBLIC	?ResumeDevilsquare@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeDevilsquare
PUBLIC	?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z	; CTemporaryUserManager::CheckInEventMap
PUBLIC	?LeaveEvent@CTemporaryUserManager@@QAEXH@Z	; CTemporaryUserManager::LeaveEvent
PUBLIC	?SearchEmptyIndex@CTemporaryUserManager@@AAEHXZ	; CTemporaryUserManager::SearchEmptyIndex
PUBLIC	?InitializeTempUserData@CTemporaryUserManager@@AAEXXZ ; CTemporaryUserManager::InitializeTempUserData
PUBLIC	?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z ; CTemporaryUserManager::ClearSpecificUserData
PUBLIC	?TidyUpTempuserdate@@YAXHHE@Z			; TidyUpTempuserdate
PUBLIC	?cpDSPTempUserManager@@3PAVCTemporaryUserManager@@A ; cpDSPTempUserManager
PUBLIC	?cpTempUserManager@@3PAVCTemporaryUserManager@@A ; cpTempUserManager
PUBLIC	?cpTimerTempUserManager@@3PAVCTemporaryUserManager@@A ; cpTimerTempUserManager
PUBLIC	??_C@_0BI@LAKABJHE@Failed?5to?5add?5in?5party?$CB?$AA@ ; `string'
PUBLIC	??_C@_0BL@JGIENAIP@SkillPoint?5?3?5?$CFd?0?5Name?5?3?5?$CFs?$AA@ ; `string'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?CGPartyListAll@@YAXH@Z:PROC			; CGPartyListAll
EXTRN	?GCPartyDelUserSend@@YAXH@Z:PROC		; GCPartyDelUserSend
EXTRN	?GCIllusionSendPoint@@YAXHE@Z:PROC		; GCIllusionSendPoint
EXTRN	?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z:PROC ; CImperialGuardian::GetCurrentZoneIndex
EXTRN	?ChangeUserIndex@CImperialGuardian@@QAEHHHH@Z:PROC ; CImperialGuardian::ChangeUserIndex
EXTRN	?SendCurStateToUser@CImperialGuardian@@QAEHHH@Z:PROC ; CImperialGuardian::SendCurStateToUser
EXTRN	?SendCurGateInfoToUser@CImperialGuardian@@QAEHHH@Z:PROC ; CImperialGuardian::SendCurGateInfoToUser
EXTRN	?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z:PROC ; CImperialGuardian::GetPlayUserCountRightNow
EXTRN	?Destroy@PartyClass@@QAEHH@Z:PROC		; PartyClass::Destroy
EXTRN	?Add@PartyClass@@QAEHHHHH@Z:PROC		; PartyClass::Add
EXTRN	?Delete@PartyClass@@QAEXHH@Z:PROC		; PartyClass::Delete
EXTRN	?Delete@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::Delete
EXTRN	?GetCount@PartyClass@@QAEHH@Z:PROC		; PartyClass::GetCount
EXTRN	?PartyLog@PartyClass@@QAEXHHH@Z:PROC		; PartyClass::PartyLog
EXTRN	?UpdatePKPartyPanalty@PartyClass@@QAEXH@Z:PROC	; PartyClass::UpdatePKPartyPanalty
EXTRN	?SendCastleEntranceBlockInfo@CBloodCastle@@QAEXH_N@Z:PROC ; CBloodCastle::SendCastleEntranceBlockInfo
EXTRN	?SendCastleBridgeBlockInfo@CBloodCastle@@QAEXH_N@Z:PROC ; CBloodCastle::SendCastleBridgeBlockInfo
EXTRN	?SendCastleDoorBlockInfo@CBloodCastle@@QAEXH_N@Z:PROC ; CBloodCastle::SendCastleDoorBlockInfo
EXTRN	?GetCurrentState@CBloodCastle@@QAEHH@Z:PROC	; CBloodCastle::GetCurrentState
EXTRN	?ChangeUserIndex@CBloodCastle@@QAEHHHH@Z:PROC	; CBloodCastle::ChangeUserIndex
EXTRN	?SendNoticeMessageToSpecificUser@CBloodCastle@@QAEXHHH@Z:PROC ; CBloodCastle::SendNoticeMessageToSpecificUser
EXTRN	?GetCastleBlockInfo@CBloodCastle@@QAEHH@Z:PROC	; CBloodCastle::GetCastleBlockInfo
EXTRN	?GetPlayUserCountRightNow@CBloodCastle@@QAEHH@Z:PROC ; CBloodCastle::GetPlayUserCountRightNow
EXTRN	?ChangeUserIndex@CDevilSquare@@QAEHHHH@Z:PROC	; CDevilSquare::ChangeUserIndex
EXTRN	?LeaveDevilSquare@CDevilSquare@@QAEHHH@Z:PROC	; CDevilSquare::LeaveDevilSquare
EXTRN	?GetPlayUserCountRightNow@CDevilSquare@@QAEHH@Z:PROC ; CDevilSquare::GetPlayUserCountRightNow
EXTRN	?LeaveUser@CIllusionTempleEvent@@QAEHHE@Z:PROC	; CIllusionTempleEvent::LeaveUser
EXTRN	?GetState@CIllusionTempleEvent@@QAEEE@Z:PROC	; CIllusionTempleEvent::GetState
EXTRN	?ChangeTempleUserInformation@CIllusionTempleEvent@@QAEHHHHE@Z:PROC ; CIllusionTempleEvent::ChangeTempleUserInformation
EXTRN	?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z:PROC ; CIllusionTempleEvent::GetSkillPoint
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	?Send@DBSockMng@@QAEHPADH@Z:PROC		; DBSockMng::Send
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?g_ImperialGuardian@@3VCImperialGuardian@@A:BYTE ; g_ImperialGuardian
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_BloodCastle@@3VCBloodCastle@@A:BYTE		; g_BloodCastle
EXTRN	?g_DevilSquare@@3VCDevilSquare@@A:BYTE		; g_DevilSquare
EXTRN	?g_IllusionTemple@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTemple
EXTRN	?cDBSMng@@3VDBSockMng@@A:BYTE			; cDBSMng
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?cpDSPTempUserManager@@3PAVCTemporaryUserManager@@A DD 01H DUP (?) ; cpDSPTempUserManager
?cpTempUserManager@@3PAVCTemporaryUserManager@@A DD 01H DUP (?) ; cpTempUserManager
?cpTimerTempUserManager@@3PAVCTemporaryUserManager@@A DD 01H DUP (?) ; cpTimerTempUserManager
_BSS	ENDS
CRT$XCU	SEGMENT
?cpDSPTempUserManager$initializer$@@3P6AXXZA DD FLAT:??__EcpDSPTempUserManager@@YAXXZ ; cpDSPTempUserManager$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_0BL@JGIENAIP@SkillPoint?5?3?5?$CFd?0?5Name?5?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BL@JGIENAIP@SkillPoint?5?3?5?$CFd?0?5Name?5?3?5?$CFs?$AA@ DB 'Skil'
	DB	'lPoint : %d, Name : %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LAKABJHE@Failed?5to?5add?5in?5party?$CB?$AA@
CONST	SEGMENT
??_C@_0BI@LAKABJHE@Failed?5to?5add?5in?5party?$CB?$AA@ DB 'Failed to add '
	DB	'in party!', 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?cpTempUserManager$initializer$@@3P6AXXZA DD FLAT:??__EcpTempUserManager@@YAXXZ ; cpTempUserManager$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?cpTimerTempUserManager$initializer$@@3P6AXXZA DD FLAT:??__EcpTimerTempUserManager@@YAXXZ ; cpTimerTempUserManager$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ??__EcpTimerTempUserManager@@YAXXZ
text$di	SEGMENT
??__EcpTimerTempUserManager@@YAXXZ PROC			; `dynamic initializer for 'cpTimerTempUserManager'', COMDAT

; 15   : CTemporaryUserManager* cpTimerTempUserManager = CTemporaryUserManager::GetInstance();

  00000	e8 00 00 00 00	 call	 ?GetInstance@CTemporaryUserManager@@SAPAV1@XZ ; CTemporaryUserManager::GetInstance
  00005	a3 00 00 00 00	 mov	 DWORD PTR ?cpTimerTempUserManager@@3PAVCTemporaryUserManager@@A, eax ; cpTimerTempUserManager
  0000a	c3		 ret	 0
??__EcpTimerTempUserManager@@YAXXZ ENDP			; `dynamic initializer for 'cpTimerTempUserManager''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ??__EcpTempUserManager@@YAXXZ
text$di	SEGMENT
??__EcpTempUserManager@@YAXXZ PROC			; `dynamic initializer for 'cpTempUserManager'', COMDAT

; 14   : CTemporaryUserManager* cpTempUserManager = CTemporaryUserManager::GetInstance();

  00000	e8 00 00 00 00	 call	 ?GetInstance@CTemporaryUserManager@@SAPAV1@XZ ; CTemporaryUserManager::GetInstance
  00005	a3 00 00 00 00	 mov	 DWORD PTR ?cpTempUserManager@@3PAVCTemporaryUserManager@@A, eax ; cpTempUserManager
  0000a	c3		 ret	 0
??__EcpTempUserManager@@YAXXZ ENDP			; `dynamic initializer for 'cpTempUserManager''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ??__EcpDSPTempUserManager@@YAXXZ
text$di	SEGMENT
??__EcpDSPTempUserManager@@YAXXZ PROC			; `dynamic initializer for 'cpDSPTempUserManager'', COMDAT

; 13   : CTemporaryUserManager* cpDSPTempUserManager = CTemporaryUserManager::GetInstance();

  00000	e8 00 00 00 00	 call	 ?GetInstance@CTemporaryUserManager@@SAPAV1@XZ ; CTemporaryUserManager::GetInstance
  00005	a3 00 00 00 00	 mov	 DWORD PTR ?cpDSPTempUserManager@@3PAVCTemporaryUserManager@@A, eax ; cpDSPTempUserManager
  0000a	c3		 ret	 0
??__EcpDSPTempUserManager@@YAXXZ ENDP			; `dynamic initializer for 'cpDSPTempUserManager''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.h
;	COMDAT ?GetState@CDevilSquare@@QAE?AW4eDevilSquareState@@XZ
_TEXT	SEGMENT
?GetState@CDevilSquare@@QAE?AW4eDevilSquareState@@XZ PROC ; CDevilSquare::GetState, COMDAT
; _this$ = ecx

; 46   : 	enum eDevilSquareState GetState(){return this->m_eState;};	// line : 93

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetState@CDevilSquare@@QAE?AW4eDevilSquareState@@XZ ENDP ; CDevilSquare::GetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?TidyUpTempuserdate@@YAXHHE@Z
_TEXT	SEGMENT
_DeletedUserIndex$ = 8					; size = 4
_PartyNumber$ = 12					; size = 4
tv212 = 16						; size = 4
_UserNumberInParty$ = 16				; size = 1
?TidyUpTempuserdate@@YAXHHE@Z PROC			; TidyUpTempuserdate, COMDAT

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 510  : 	if( UserNumberInParty == 0 )

  00003	80 7d 10 00	 cmp	 BYTE PTR _UserNumberInParty$[ebp], 0
  00007	56		 push	 esi

; 511  : 	{
; 512  : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00008	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?cpTempUserManager@@3PAVCTemporaryUserManager@@A ; cpTempUserManager
  0000e	75 79		 jne	 SHORT $LN5@TidyUpTemp
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _PartyNumber$[ebp]
  00013	c1 e1 04	 shl	 ecx, 4
  00016	2b 4d 0c	 sub	 ecx, DWORD PTR _PartyNumber$[ebp]
  00019	53		 push	 ebx
  0001a	57		 push	 edi
  0001b	c7 45 10 05 00
	00 00		 mov	 DWORD PTR tv212[ebp], 5
  00022	8d 1c 8d 0c 00
	00 00		 lea	 ebx, DWORD PTR ?gParty@@3VPartyClass@@A[ecx*4+12]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@TidyUpTemp:

; 513  : 		{
; 514  : 			int iUserIndex = gParty.m_PartyS[PartyNumber].Number[n];

  00030	8b 03		 mov	 eax, DWORD PTR [ebx]

; 515  : 
; 516  : 			if( iUserIndex == -1 )

  00032	83 f8 ff	 cmp	 eax, -1
  00035	74 44		 je	 SHORT $LN2@TidyUpTemp

; 517  : 				continue;
; 518  : 
; 519  : 			int iMatchUserSlotIndex = cpTempUserManager->CheckMatchIndex(iUserIndex);

  00037	50		 push	 eax
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ?CheckMatchIndex@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckMatchIndex
  0003f	8b f8		 mov	 edi, eax

; 520  : 
; 521  : 			if( iMatchUserSlotIndex == -1 )

  00041	83 ff ff	 cmp	 edi, -1
  00044	74 35		 je	 SHORT $LN2@TidyUpTemp

; 522  : 				continue;
; 523  : 
; 524  : 			if( cpTempUserManager->CheckInEventMap(iMatchUserSlotIndex) == 3 ||
; 525  : 				cpTempUserManager->CheckInEventMap(iMatchUserSlotIndex) == 4 ||

  00046	57		 push	 edi
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap
  0004e	83 f8 03	 cmp	 eax, 3
  00051	74 28		 je	 SHORT $LN2@TidyUpTemp
  00053	57		 push	 edi
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap
  0005b	83 f8 04	 cmp	 eax, 4
  0005e	74 1b		 je	 SHORT $LN2@TidyUpTemp
  00060	57		 push	 edi
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap
  00068	83 f8 02	 cmp	 eax, 2
  0006b	74 0e		 je	 SHORT $LN2@TidyUpTemp

; 526  : 				cpTempUserManager->CheckInEventMap(iMatchUserSlotIndex) == 2 )
; 527  : 				continue;
; 528  : 
; 529  : 			cpTempUserManager->TidyUpTempuserdate(iMatchUserSlotIndex);

  0006d	57		 push	 edi
  0006e	8b ce		 mov	 ecx, esi
  00070	e8 00 00 00 00	 call	 ?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::TidyUpTempuserdate
  00075	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?cpTempUserManager@@3PAVCTemporaryUserManager@@A ; cpTempUserManager
$LN2@TidyUpTemp:

; 511  : 	{
; 512  : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  0007b	83 c3 04	 add	 ebx, 4
  0007e	83 6d 10 01	 sub	 DWORD PTR tv212[ebp], 1
  00082	75 ac		 jne	 SHORT $LL4@TidyUpTemp
  00084	5f		 pop	 edi
  00085	5b		 pop	 ebx
  00086	5e		 pop	 esi

; 543  : 		}
; 544  : 	}
; 545  : }

  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
$LN5@TidyUpTemp:

; 530  : 		}
; 531  : 	}
; 532  : 	else
; 533  : 	{
; 534  : 		int iSlotIndex = cpTempUserManager->CheckMatchIndex(DeletedUserIndex);

  00089	ff 75 08	 push	 DWORD PTR _DeletedUserIndex$[ebp]
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?CheckMatchIndex@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckMatchIndex

; 535  : 
; 536  : 		if( iSlotIndex == -1 )

  00093	83 f8 ff	 cmp	 eax, -1
  00096	74 08		 je	 SHORT $LN12@TidyUpTemp

; 537  : 		{
; 538  : 
; 539  : 		}
; 540  : 		else
; 541  : 		{
; 542  : 			cpTempUserManager->TidyUpTempuserdate(iSlotIndex);

  00098	50		 push	 eax
  00099	8b ce		 mov	 ecx, esi
  0009b	e8 00 00 00 00	 call	 ?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::TidyUpTempuserdate
$LN12@TidyUpTemp:
  000a0	5e		 pop	 esi

; 543  : 		}
; 544  : 	}
; 545  : }

  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
?TidyUpTempuserdate@@YAXHHE@Z ENDP			; TidyUpTempuserdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z
_TEXT	SEGMENT
_iSlotIndex$ = 8					; size = 4
?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z PROC ; CTemporaryUserManager::ClearSpecificUserData, COMDAT
; _this$ = ecx

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   : 	if( !TEMP_USER_CHECK(iSlotIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iSlotIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 4f		 js	 SHORT $LN1@ClearSpeci
  0000a	33 c0		 xor	 eax, eax
  0000c	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 40		 je	 SHORT $LN1@ClearSpeci

; 61   : 		return;
; 62   : 
; 63   : 	if( !OBJMAX_RANGE(this->m_TempUserData[iSlotIndex].m_iIndex) )

  00019	8b c2		 mov	 eax, edx
  0001b	c1 e0 04	 shl	 eax, 4
  0001e	03 c2		 add	 eax, edx
  00020	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00023	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00026	85 c9		 test	 ecx, ecx
  00028	78 2f		 js	 SHORT $LN1@ClearSpeci
  0002a	33 c0		 xor	 eax, eax
  0002c	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00032	0f 9e c0	 setle	 al
  00035	85 c0		 test	 eax, eax
  00037	74 20		 je	 SHORT $LN1@ClearSpeci

; 64   : 		return;
; 65   : 
; 66   : 	gObj[this->m_TempUserData[iSlotIndex].m_iIndex].Connected = 0;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003e	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048

; 67   : 	memset(&this->m_TempUserData[iSlotIndex],0,sizeof(_TempUserData));

  00044	6a 44		 push	 68			; 00000044H
  00046	6a 00		 push	 0
  00048	52		 push	 edx
  00049	c7 44 01 04 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+4], 0
  00051	e8 00 00 00 00	 call	 _memset
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ClearSpeci:

; 68   : }

  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z ENDP ; CTemporaryUserManager::ClearSpecificUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?InitializeTempUserData@CTemporaryUserManager@@AAEXXZ
_TEXT	SEGMENT
?InitializeTempUserData@CTemporaryUserManager@@AAEXXZ PROC ; CTemporaryUserManager::InitializeTempUserData, COMDAT
; _this$ = ecx

; 45   : 	memset(this->m_TempUserData,0,sizeof(this->m_TempUserData));

  00000	68 a0 09 01 00	 push	 68000			; 000109a0H
  00005	6a 00		 push	 0
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 _memset
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 46   : }

  00010	c3		 ret	 0
?InitializeTempUserData@CTemporaryUserManager@@AAEXXZ ENDP ; CTemporaryUserManager::InitializeTempUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?SearchEmptyIndex@CTemporaryUserManager@@AAEHXZ
_TEXT	SEGMENT
?SearchEmptyIndex@CTemporaryUserManager@@AAEHXZ PROC	; CTemporaryUserManager::SearchEmptyIndex, COMDAT
; _this$ = ecx

; 50   : 	for(int i = 0; i < OBJMAXUSER; i++)

  00000	33 c0		 xor	 eax, eax
  00002	83 c1 10	 add	 ecx, 16			; 00000010H
$LL4@SearchEmpt:

; 51   : 	{
; 52   : 		if( this->m_TempUserData[i].m_iIndex == 0 )

  00005	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00008	74 0e		 je	 SHORT $LN1@SearchEmpt

; 50   : 	for(int i = 0; i < OBJMAXUSER; i++)

  0000a	40		 inc	 eax
  0000b	83 c1 44	 add	 ecx, 68			; 00000044H
  0000e	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00013	7c f0		 jl	 SHORT $LL4@SearchEmpt

; 53   : 			return i;
; 54   : 	}
; 55   : return -1;

  00015	83 c8 ff	 or	 eax, -1
$LN1@SearchEmpt:

; 56   : }

  00018	c3		 ret	 0
?SearchEmptyIndex@CTemporaryUserManager@@AAEHXZ ENDP	; CTemporaryUserManager::SearchEmptyIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?LeaveEvent@CTemporaryUserManager@@QAEXH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
?LeaveEvent@CTemporaryUserManager@@QAEXH@Z PROC		; CTemporaryUserManager::LeaveEvent, COMDAT
; _this$ = ecx

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 294  : 	int bResult = this->CheckInEventMap(SlotIndex);

  00004	8b 75 08	 mov	 esi, DWORD PTR _SlotIndex$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap

; 295  : 
; 296  : 	if( bResult == 1 )

  00010	83 f8 01	 cmp	 eax, 1
  00013	74 51		 je	 SHORT $LN10@LeaveEvent

; 297  : 	{
; 298  : 
; 299  : 	}
; 300  : 	else if( bResult == 2 )

  00015	83 f8 02	 cmp	 eax, 2
  00018	75 22		 jne	 SHORT $LN4@LeaveEvent

; 301  : 	{
; 302  : 		g_IllusionTemple.LeaveUser(this->m_TempUserData[SlotIndex].m_iIndex,

  0001a	8b c6		 mov	 eax, esi
  0001c	c1 e0 04	 shl	 eax, 4
  0001f	03 c6		 add	 eax, esi
  00021	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  00024	0f b6 41 1c	 movzx	 eax, BYTE PTR [ecx+28]
  00028	50		 push	 eax
  00029	ff 71 10	 push	 DWORD PTR [ecx+16]
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00031	e8 00 00 00 00	 call	 ?LeaveUser@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::LeaveUser
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 316  : 			this->m_TempUserData[SlotIndex].m_iIndex);
; 317  : 	}
; 318  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
$LN4@LeaveEvent:

; 303  : 			this->m_TempUserData[SlotIndex].m_MapNumber);
; 304  : 	}
; 305  : 	else if( bResult == 3 )

  0003c	83 f8 03	 cmp	 eax, 3
  0003f	74 25		 je	 SHORT $LN10@LeaveEvent

; 306  : 	{
; 307  : 
; 308  : 	}
; 309  : 	else if( bResult == 4 )

  00041	83 f8 04	 cmp	 eax, 4
  00044	74 20		 je	 SHORT $LN10@LeaveEvent

; 310  : 	{
; 311  : 		// doppleganger leave
; 312  : 	}
; 313  : 	else if( bResult == 5 )

  00046	83 f8 05	 cmp	 eax, 5
  00049	75 1b		 jne	 SHORT $LN10@LeaveEvent

; 314  : 	{
; 315  : 		g_DevilSquare.LeaveDevilSquare(this->m_TempUserData[SlotIndex].m_bDevilSquareIndex,

  0004b	8b c6		 mov	 eax, esi
  0004d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  00052	c1 e0 04	 shl	 eax, 4
  00055	03 c6		 add	 eax, esi
  00057	ff 74 87 10	 push	 DWORD PTR [edi+eax*4+16]
  0005b	0f b6 44 87 40	 movzx	 eax, BYTE PTR [edi+eax*4+64]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?LeaveDevilSquare@CDevilSquare@@QAEHHH@Z ; CDevilSquare::LeaveDevilSquare
$LN10@LeaveEvent:
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 316  : 			this->m_TempUserData[SlotIndex].m_iIndex);
; 317  : 	}
; 318  : }

  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?LeaveEvent@CTemporaryUserManager@@QAEXH@Z ENDP		; CTemporaryUserManager::LeaveEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z PROC	; CTemporaryUserManager::CheckInEventMap, COMDAT
; _this$ = ecx

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _SlotIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 88 00 00
	00		 js	 $LN20@CheckInEve
  0000e	33 c0		 xor	 eax, eax
  00010	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 79		 je	 SHORT $LN20@CheckInEve

; 274  : 
; 275  : 	if( BC_MAP_RANGE(this->m_TempUserData[SlotIndex].m_MapNumber) )

  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e0 04	 shl	 eax, 4
  00022	03 c2		 add	 eax, edx
  00024	8a 4c 81 1c	 mov	 cl, BYTE PTR [ecx+eax*4+28]
  00028	80 f9 34	 cmp	 cl, 52			; 00000034H
  0002b	74 60		 je	 SHORT $LN21@CheckInEve
  0002d	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00030	72 0b		 jb	 SHORT $LN3@CheckInEve
  00032	b0 11		 mov	 al, 17			; 00000011H
  00034	3a c1		 cmp	 al, cl
  00036	1b c0		 sbb	 eax, eax
  00038	83 c0 01	 add	 eax, 1
  0003b	75 50		 jne	 SHORT $LN21@CheckInEve
$LN3@CheckInEve:

; 277  : 
; 278  : 	if( IT_MAP_RANGE(this->m_TempUserData[SlotIndex].m_MapNumber) )

  0003d	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  00040	72 14		 jb	 SHORT $LN4@CheckInEve
  00042	b0 32		 mov	 al, 50			; 00000032H
  00044	3a c1		 cmp	 al, cl
  00046	1b c0		 sbb	 eax, eax
  00048	83 c0 01	 add	 eax, 1
  0004b	74 09		 je	 SHORT $LN4@CheckInEve

; 279  : 		return 2;

  0004d	b8 02 00 00 00	 mov	 eax, 2

; 288  : 
; 289  : return 0;
; 290  : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN4@CheckInEve:

; 280  : 
; 281  : 	if( IF_MAP_RANGE(this->m_TempUserData[SlotIndex].m_MapNumber) )

  00056	80 f9 45	 cmp	 cl, 69			; 00000045H
  00059	72 14		 jb	 SHORT $LN5@CheckInEve
  0005b	b0 48		 mov	 al, 72			; 00000048H
  0005d	3a c1		 cmp	 al, cl
  0005f	1b c0		 sbb	 eax, eax
  00061	83 c0 01	 add	 eax, 1
  00064	74 09		 je	 SHORT $LN5@CheckInEve

; 282  : 		return 3;

  00066	b8 03 00 00 00	 mov	 eax, 3

; 288  : 
; 289  : return 0;
; 290  : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN5@CheckInEve:

; 283  : 
; 284  : 	// DG map check - 4
; 285  : 
; 286  : 	if( DS_MAP_RANGE(this->m_TempUserData[SlotIndex].m_MapNumber) )

  0006f	80 f9 09	 cmp	 cl, 9
  00072	74 10		 je	 SHORT $LN22@CheckInEve
  00074	33 c0		 xor	 eax, eax
  00076	80 f9 20	 cmp	 cl, 32			; 00000020H
  00079	0f 94 c0	 sete	 al
  0007c	85 c0		 test	 eax, eax
  0007e	75 04		 jne	 SHORT $LN22@CheckInEve

; 288  : 
; 289  : return 0;
; 290  : }

  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN22@CheckInEve:

; 287  : 		return 5;

  00084	b8 05 00 00 00	 mov	 eax, 5

; 288  : 
; 289  : return 0;
; 290  : }

  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN21@CheckInEve:

; 276  : 		return 1;

  0008d	b8 01 00 00 00	 mov	 eax, 1

; 288  : 
; 289  : return 0;
; 290  : }

  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN20@CheckInEve:

; 273  : 		return -1;

  00096	83 c8 ff	 or	 eax, -1

; 288  : 
; 289  : return 0;
; 290  : }

  00099	5d		 pop	 ebp
  0009a	c2 04 00	 ret	 4
?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ENDP	; CTemporaryUserManager::CheckInEventMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ResumeDevilsquare@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?ResumeDevilsquare@CTemporaryUserManager@@QAEHHH@Z PROC	; CTemporaryUserManager::ResumeDevilsquare, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 489  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _SlotIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 bb 00 00
	00		 js	 $LN10@ResumeDevi
  0000e	33 c0		 xor	 eax, eax
  00010	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 a8 00 00
	00		 je	 $LN10@ResumeDevi

; 491  : 
; 492  : 	if( g_DevilSquare.GetPlayUserCountRightNow(this->m_TempUserData[SlotIndex].m_bDevilSquareIndex) < 1 )

  00021	8b c2		 mov	 eax, edx
  00023	c1 e0 04	 shl	 eax, 4
  00026	03 c2		 add	 eax, edx
  00028	53		 push	 ebx
  00029	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  00031	0f b6 43 40	 movzx	 eax, BYTE PTR [ebx+64]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?GetPlayUserCountRightNow@CDevilSquare@@QAEHH@Z ; CDevilSquare::GetPlayUserCountRightNow
  0003b	83 f8 01	 cmp	 eax, 1
  0003e	7c 09		 jl	 SHORT $LN12@ResumeDevi

; 493  : 		return 0;
; 494  : 
; 495  : 	if( g_DevilSquare.GetState() == DevilSquare_CLOSE )

  00040	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR ?g_DevilSquare@@3VCDevilSquare@@A+4, 0
  00047	75 07		 jne	 SHORT $LN4@ResumeDevi
$LN12@ResumeDevi:

; 496  : 		return 0;

  00049	33 c0		 xor	 eax, eax
  0004b	5b		 pop	 ebx

; 505  : 	return bResult;
; 506  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN4@ResumeDevi:

; 497  : 
; 498  : 	gObj[CurUserIndex].m_nEventScore = this->m_TempUserData[SlotIndex].m_nEventScore;

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00055	8b 4b 34	 mov	 ecx, DWORD PTR [ebx+52]
  00058	56		 push	 esi
  00059	57		 push	 edi
  0005a	8b 7d 0c	 mov	 edi, DWORD PTR _CurUserIndex$[ebp]
  0005d	69 f7 40 27 00
	00		 imul	 esi, edi, 10048
  00063	89 8c 06 28 12
	00 00		 mov	 DWORD PTR [esi+eax+4648], ecx

; 499  : 	gObj[CurUserIndex].m_nEventExp = this->m_TempUserData[SlotIndex].m_nEventExp;

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006f	8b 4b 38	 mov	 ecx, DWORD PTR [ebx+56]
  00072	89 8c 06 2c 12
	00 00		 mov	 DWORD PTR [esi+eax+4652], ecx

; 500  : 	gObj[CurUserIndex].m_nEventMoney = this->m_TempUserData[SlotIndex].m_nEventMoney;

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007e	8b 4b 3c	 mov	 ecx, DWORD PTR [ebx+60]
  00081	89 8c 06 30 12
	00 00		 mov	 DWORD PTR [esi+eax+4656], ecx

; 501  : 	gObj[CurUserIndex].m_bDevilSquareIndex = this->m_TempUserData[SlotIndex].m_bDevilSquareIndex;

  00088	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008d	8a 4b 40	 mov	 cl, BYTE PTR [ebx+64]
  00090	88 8c 06 34 12
	00 00		 mov	 BYTE PTR [esi+eax+4660], cl

; 502  : 	gObj[CurUserIndex].m_bDevilSquareAuth = this->m_TempUserData[SlotIndex].m_bDevilSquareAuth;
; 503  : 
; 504  : 	int bResult = g_DevilSquare.ChangeUserIndex(this->m_TempUserData[SlotIndex].m_iIndex,CurUserIndex,gObj[CurUserIndex].m_bDevilSquareIndex);

  00097	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  0009c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a1	8a 53 41	 mov	 dl, BYTE PTR [ebx+65]
  000a4	88 94 06 35 12
	00 00		 mov	 BYTE PTR [esi+eax+4661], dl
  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b0	0f b6 84 06 34
	12 00 00	 movzx	 eax, BYTE PTR [esi+eax+4660]
  000b8	50		 push	 eax
  000b9	57		 push	 edi
  000ba	ff 73 10	 push	 DWORD PTR [ebx+16]
  000bd	e8 00 00 00 00	 call	 ?ChangeUserIndex@CDevilSquare@@QAEHHHH@Z ; CDevilSquare::ChangeUserIndex
  000c2	5f		 pop	 edi
  000c3	5e		 pop	 esi
  000c4	5b		 pop	 ebx

; 505  : 	return bResult;
; 506  : }

  000c5	5d		 pop	 ebp
  000c6	c2 08 00	 ret	 8
$LN10@ResumeDevi:

; 490  : 		return 0;

  000c9	33 c0		 xor	 eax, eax

; 505  : 	return bResult;
; 506  : }

  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
?ResumeDevilsquare@CTemporaryUserManager@@QAEHHH@Z ENDP	; CTemporaryUserManager::ResumeDevilsquare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ResumeDoppelganger@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?ResumeDoppelganger@CTemporaryUserManager@@QAEHHH@Z PROC ; CTemporaryUserManager::ResumeDoppelganger, COMDAT
; _this$ = ecx

; 484  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 485  : }

  00002	c2 08 00	 ret	 8
?ResumeDoppelganger@CTemporaryUserManager@@QAEHHH@Z ENDP ; CTemporaryUserManager::ResumeDoppelganger
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ResumeBloodCastle@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?ResumeBloodCastle@CTemporaryUserManager@@QAEHHH@Z PROC	; CTemporaryUserManager::ResumeBloodCastle, COMDAT
; _this$ = ecx

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 464  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _SlotIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 88 95 00 00
	00		 js	 $LN8@ResumeBloo
  0000e	33 c0		 xor	 eax, eax
  00010	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	0f 84 82 00 00
	00		 je	 $LN8@ResumeBloo

; 466  : 
; 467  : 	if( g_BloodCastle.GetPlayUserCountRightNow(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex) < 1 )

  00021	8b c2		 mov	 eax, edx
  00023	c1 e0 04	 shl	 eax, 4
  00026	03 c2		 add	 eax, edx
  00028	57		 push	 edi
  00029	ff 74 81 20	 push	 DWORD PTR [ecx+eax*4+32]
  0002d	8d 3c 81	 lea	 edi, DWORD PTR [ecx+eax*4]
  00030	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00035	e8 00 00 00 00	 call	 ?GetPlayUserCountRightNow@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetPlayUserCountRightNow
  0003a	83 f8 01	 cmp	 eax, 1
  0003d	7d 07		 jge	 SHORT $LN3@ResumeBloo

; 468  : 		return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	5f		 pop	 edi

; 480  : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN3@ResumeBloo:
  00046	53		 push	 ebx
  00047	56		 push	 esi

; 469  : 
; 470  : 	int bResult = g_BloodCastle.ChangeUserIndex(this->m_TempUserData[SlotIndex].m_iIndex,CurUserIndex,

  00048	ff 77 20	 push	 DWORD PTR [edi+32]
  0004b	8b 75 0c	 mov	 esi, DWORD PTR _CurUserIndex$[ebp]
  0004e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00053	56		 push	 esi
  00054	ff 77 10	 push	 DWORD PTR [edi+16]
  00057	e8 00 00 00 00	 call	 ?ChangeUserIndex@CBloodCastle@@QAEHHHH@Z ; CBloodCastle::ChangeUserIndex
  0005c	8b d8		 mov	 ebx, eax

; 471  : 		this->m_TempUserData[SlotIndex].m_iBloodCastleIndex);
; 472  : 
; 473  : 	if( bResult == TRUE )

  0005e	83 fb 01	 cmp	 ebx, 1
  00061	75 37		 jne	 SHORT $LN4@ResumeBloo

; 474  : 	{
; 475  : 		gObj[CurUserIndex].m_cBloodCastleIndex = this->m_TempUserData[SlotIndex].m_iBloodCastleIndex;

  00063	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00069	0f b6 57 20	 movzx	 edx, BYTE PTR [edi+32]
  0006d	69 f6 40 27 00
	00		 imul	 esi, esi, 10048
  00073	88 94 0e 36 12
	00 00		 mov	 BYTE PTR [esi+ecx+4662], dl

; 476  : 		gObj[CurUserIndex].m_cBloodCastleSubIndex = this->m_TempUserData[SlotIndex].m_iBloodCastleSubIndex;

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00080	0f b6 57 24	 movzx	 edx, BYTE PTR [edi+36]
  00084	88 94 0e 37 12
	00 00		 mov	 BYTE PTR [esi+ecx+4663], dl

; 477  : 		gObj[CurUserIndex].m_iBloodCastleEXP = this->m_TempUserData[SlotIndex].m_iBloodCaslteExp;

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00090	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00093	89 8c 06 38 12
	00 00		 mov	 DWORD PTR [esi+eax+4664], ecx
$LN4@ResumeBloo:

; 478  : 	}
; 479  : 	return bResult;

  0009a	5e		 pop	 esi
  0009b	8b c3		 mov	 eax, ebx
  0009d	5b		 pop	 ebx
  0009e	5f		 pop	 edi

; 480  : }

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
$LN8@ResumeBloo:

; 465  : 		return 0;

  000a3	33 c0		 xor	 eax, eax

; 480  : }

  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
?ResumeBloodCastle@CTemporaryUserManager@@QAEHHH@Z ENDP	; CTemporaryUserManager::ResumeBloodCastle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ResumeImperialguardian@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?ResumeImperialguardian@CTemporaryUserManager@@QAEHHH@Z PROC ; CTemporaryUserManager::ResumeImperialguardian, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 450  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _SlotIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 4c		 js	 SHORT $LN7@ResumeImpe
  0000a	33 c0		 xor	 eax, eax
  0000c	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 3d		 je	 SHORT $LN7@ResumeImpe

; 452  : 
; 453  : 	if( g_ImperialGuardian.GetPlayUserCountRightNow(this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex) < 1 )

  00019	8b c2		 mov	 eax, edx
  0001b	c1 e0 04	 shl	 eax, 4
  0001e	03 c2		 add	 eax, edx
  00020	56		 push	 esi
  00021	ff 74 81 30	 push	 DWORD PTR [ecx+eax*4+48]
  00025	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  0002d	e8 00 00 00 00	 call	 ?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayUserCountRightNow
  00032	83 f8 01	 cmp	 eax, 1
  00035	7d 07		 jge	 SHORT $LN3@ResumeImpe

; 454  : 		return 0;

  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 457  : 		this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex);
; 458  : 
; 459  : 	return bResult;
; 460  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN3@ResumeImpe:

; 455  : 
; 456  : 	int bResult = g_ImperialGuardian.ChangeUserIndex(this->m_TempUserData[SlotIndex].m_iIndex,CurUserIndex,

  0003e	ff 76 30	 push	 DWORD PTR [esi+48]
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  00046	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  00049	ff 76 10	 push	 DWORD PTR [esi+16]
  0004c	e8 00 00 00 00	 call	 ?ChangeUserIndex@CImperialGuardian@@QAEHHHH@Z ; CImperialGuardian::ChangeUserIndex
  00051	5e		 pop	 esi

; 457  : 		this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex);
; 458  : 
; 459  : 	return bResult;
; 460  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN7@ResumeImpe:

; 451  : 		return 0;

  00056	33 c0		 xor	 eax, eax

; 457  : 		this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex);
; 458  : 
; 459  : 	return bResult;
; 460  : }

  00058	5d		 pop	 ebp
  00059	c2 08 00	 ret	 8
?ResumeImperialguardian@CTemporaryUserManager@@QAEHHH@Z ENDP ; CTemporaryUserManager::ResumeImperialguardian
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ResumeIllusionTemple@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_pMsg$1 = -8						; size = 6
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?ResumeIllusionTemple@CTemporaryUserManager@@QAEHHH@Z PROC ; CTemporaryUserManager::ResumeIllusionTemple, COMDAT
; _this$ = ecx

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _SlotIndex$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	85 d2		 test	 edx, edx
  0000b	0f 88 08 01 00
	00		 js	 $LN9@ResumeIllu
  00011	33 c0		 xor	 eax, eax
  00013	81 fa e7 03 00
	00		 cmp	 edx, 999		; 000003e7H
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 f5 00 00
	00		 je	 $LN9@ResumeIllu

; 417  : 
; 418  : 	if( g_IllusionTemple.GetState(this->m_TempUserData[SlotIndex].m_MapNumber) == IT_STATE_PLAYEND )

  00024	8b c2		 mov	 eax, edx
  00026	c1 e0 04	 shl	 eax, 4
  00029	03 c2		 add	 eax, edx
  0002b	56		 push	 esi
  0002c	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00034	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  0003e	3c 03		 cmp	 al, 3
  00040	75 09		 jne	 SHORT $LN3@ResumeIllu

; 419  : 		return 0;

  00042	33 c0		 xor	 eax, eax
  00044	5e		 pop	 esi

; 446  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN3@ResumeIllu:

; 420  : 
; 421  : 	int bResult = g_IllusionTemple.ChangeTempleUserInformation(this->m_TempUserData[SlotIndex].m_iIndex,

  0004b	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00054	53		 push	 ebx
  00055	57		 push	 edi
  00056	8b 7d 0c	 mov	 edi, DWORD PTR _CurUserIndex$[ebp]
  00059	50		 push	 eax
  0005a	ff 76 2c	 push	 DWORD PTR [esi+44]
  0005d	57		 push	 edi
  0005e	ff 76 10	 push	 DWORD PTR [esi+16]
  00061	e8 00 00 00 00	 call	 ?ChangeTempleUserInformation@CIllusionTempleEvent@@QAEHHHHE@Z ; CIllusionTempleEvent::ChangeTempleUserInformation
  00066	8b d8		 mov	 ebx, eax

; 422  : 		CurUserIndex,this->m_TempUserData[SlotIndex].m_iIllusionTempleIndex,
; 423  : 		this->m_TempUserData[SlotIndex].m_MapNumber);
; 424  : 
; 425  : 	if( bResult == 0 )

  00068	85 db		 test	 ebx, ebx
  0006a	75 09		 jne	 SHORT $LN4@ResumeIllu
  0006c	5f		 pop	 edi
  0006d	5b		 pop	 ebx
  0006e	5e		 pop	 esi

; 446  : }

  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 08 00	 ret	 8
$LN4@ResumeIllu:

; 426  : 		return 0;
; 427  : 
; 428  : 	gObj[CurUserIndex].iTempleIndex = this->m_TempUserData[SlotIndex].m_iIllusionTempleIndex;

  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0007a	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0007d	69 d7 40 27 00
	00		 imul	 edx, edi, 10048
  00083	89 8c 02 78 24
	00 00		 mov	 DWORD PTR [edx+eax+9336], ecx

; 429  : 
; 430  : 	if( g_IllusionTemple.GetState(this->m_TempUserData[SlotIndex].m_MapNumber) > IT_STATE_CLOSED )

  0008a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  0008f	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  00099	84 c0		 test	 al, al
  0009b	74 71		 je	 SHORT $LN5@ResumeIllu

; 431  : 	{
; 432  : 		PMSG_ILLUSIONTEMPLE_STATESEND pMsg;
; 433  : 		PHeadSubSetB((LPBYTE)&pMsg,0xBF,0x09,sizeof(pMsg));

  0009d	6a 06		 push	 6
  0009f	6a 09		 push	 9
  000a1	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000a4	68 bf 00 00 00	 push	 191			; 000000bfH
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 434  : 
; 435  : 		pMsg.Temple = this->m_TempUserData[SlotIndex].m_iIllusionTempleIndex;

  000af	8a 46 2c	 mov	 al, BYTE PTR [esi+44]
  000b2	88 45 fc	 mov	 BYTE PTR _pMsg$1[ebp+4], al

; 436  : 		pMsg.State = IT_STATE_PREPARE;
; 437  : 		DataSend(CurUserIndex,(LPBYTE)&pMsg,pMsg.h.size);

  000b5	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  000b9	50		 push	 eax
  000ba	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000bd	c6 45 fd 01	 mov	 BYTE PTR _pMsg$1[ebp+5], 1
  000c1	50		 push	 eax
  000c2	57		 push	 edi
  000c3	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000c8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 438  : 
; 439  : 		LogAddTD("SkillPoint : %d, Name : %s",

  000cb	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  000d3	50		 push	 eax
  000d4	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  000d8	50		 push	 eax
  000d9	57		 push	 edi
  000da	e8 00 00 00 00	 call	 ?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z ; CIllusionTempleEvent::GetSkillPoint
  000df	0f b6 c0	 movzx	 eax, al
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JGIENAIP@SkillPoint?5?3?5?$CFd?0?5Name?5?3?5?$CFs?$AA@
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 440  : 			g_IllusionTemple.GetSkillPoint(CurUserIndex,this->m_TempUserData[SlotIndex].m_MapNumber),
; 441  : 			this->m_TempUserData[SlotIndex].szName);
; 442  : 
; 443  : 		GCIllusionSendPoint(CurUserIndex,g_IllusionTemple.GetSkillPoint(CurUserIndex,this->m_TempUserData[SlotIndex].m_MapNumber));

  000ee	0f b6 46 1c	 movzx	 eax, BYTE PTR [esi+28]
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  000fa	50		 push	 eax
  000fb	57		 push	 edi
  000fc	e8 00 00 00 00	 call	 ?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z ; CIllusionTempleEvent::GetSkillPoint
  00101	0f b6 c0	 movzx	 eax, al
  00104	50		 push	 eax
  00105	57		 push	 edi
  00106	e8 00 00 00 00	 call	 ?GCIllusionSendPoint@@YAXHE@Z ; GCIllusionSendPoint
  0010b	83 c4 08	 add	 esp, 8
$LN5@ResumeIllu:

; 444  : 	}
; 445  : 	return bResult;

  0010e	5f		 pop	 edi
  0010f	8b c3		 mov	 eax, ebx
  00111	5b		 pop	 ebx
  00112	5e		 pop	 esi

; 446  : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN9@ResumeIllu:

; 416  : 		return 0;

  00119	33 c0		 xor	 eax, eax

; 446  : }

  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 08 00	 ret	 8
?ResumeIllusionTemple@CTemporaryUserManager@@QAEHHH@Z ENDP ; CTemporaryUserManager::ResumeIllusionTemple
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ResumeEvent@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?ResumeEvent@CTemporaryUserManager@@QAEHHH@Z PROC	; CTemporaryUserManager::ResumeEvent, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 384  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00004	8b 75 08	 mov	 esi, DWORD PTR _SlotIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	0f 88 83 00 00
	00		 js	 $LN15@ResumeEven
  00012	33 c0		 xor	 eax, eax
  00014	81 fe e7 03 00
	00		 cmp	 esi, 999		; 000003e7H
  0001a	0f 9e c0	 setle	 al
  0001d	85 c0		 test	 eax, eax
  0001f	74 74		 je	 SHORT $LN15@ResumeEven

; 386  : 
; 387  : 	int bResult = this->CheckInEventMap(SlotIndex);

  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap

; 388  : 
; 389  : 	if( bResult == 1 )

  00027	83 f8 01	 cmp	 eax, 1
  0002a	75 11		 jne	 SHORT $LN3@ResumeEven

; 390  : 	{
; 391  : 		return this->ResumeBloodCastle(SlotIndex,CurUserIndex);

  0002c	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  0002f	8b cf		 mov	 ecx, edi
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ?ResumeBloodCastle@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeBloodCastle
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 408  : 	}
; 409  : 
; 410  : 	return 0;
; 411  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
$LN3@ResumeEven:

; 392  : 	}
; 393  : 	else if( bResult == 2 )

  0003d	83 f8 02	 cmp	 eax, 2
  00040	75 11		 jne	 SHORT $LN5@ResumeEven

; 394  : 	{
; 395  : 		return this->ResumeIllusionTemple(SlotIndex,CurUserIndex);

  00042	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  00045	8b cf		 mov	 ecx, edi
  00047	56		 push	 esi
  00048	e8 00 00 00 00	 call	 ?ResumeIllusionTemple@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeIllusionTemple
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 408  : 	}
; 409  : 
; 410  : 	return 0;
; 411  : }

  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
$LN5@ResumeEven:

; 396  : 	}
; 397  : 	else if( bResult == 3 )

  00053	83 f8 03	 cmp	 eax, 3
  00056	75 11		 jne	 SHORT $LN7@ResumeEven

; 398  : 	{
; 399  : 		return this->ResumeImperialguardian(SlotIndex,CurUserIndex);

  00058	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  0005b	8b cf		 mov	 ecx, edi
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ?ResumeImperialguardian@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeImperialguardian
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 408  : 	}
; 409  : 
; 410  : 	return 0;
; 411  : }

  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
$LN7@ResumeEven:

; 400  : 	}
; 401  : 	else if( bResult == 4 )

  00069	83 f8 04	 cmp	 eax, 4
  0006c	75 11		 jne	 SHORT $LN9@ResumeEven

; 402  : 	{
; 403  : 		return this->ResumeDoppelganger(SlotIndex,CurUserIndex);

  0006e	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  00071	8b cf		 mov	 ecx, edi
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?ResumeDoppelganger@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeDoppelganger
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 408  : 	}
; 409  : 
; 410  : 	return 0;
; 411  : }

  0007b	5d		 pop	 ebp
  0007c	c2 08 00	 ret	 8
$LN9@ResumeEven:

; 404  : 	}
; 405  : 	else if( bResult == 5 )

  0007f	83 f8 05	 cmp	 eax, 5
  00082	75 11		 jne	 SHORT $LN15@ResumeEven

; 406  : 	{
; 407  : 		return this->ResumeDevilsquare(SlotIndex,CurUserIndex);

  00084	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  00087	8b cf		 mov	 ecx, edi
  00089	56		 push	 esi
  0008a	e8 00 00 00 00	 call	 ?ResumeDevilsquare@CTemporaryUserManager@@QAEHHH@Z ; CTemporaryUserManager::ResumeDevilsquare
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi

; 408  : 	}
; 409  : 
; 410  : 	return 0;
; 411  : }

  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
$LN15@ResumeEven:
  00095	5f		 pop	 edi

; 385  : 		return 0;

  00096	33 c0		 xor	 eax, eax
  00098	5e		 pop	 esi

; 408  : 	}
; 409  : 
; 410  : 	return 0;
; 411  : }

  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
?ResumeEvent@CTemporaryUserManager@@QAEHHH@Z ENDP	; CTemporaryUserManager::ResumeEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?SendEventMapInfo@CTemporaryUserManager@@QAEXHH@Z
_TEXT	SEGMENT
_pMsg$1 = -8						; size = 6
_SlotIndex$ = 8						; size = 4
_CurUserIndex$ = 12					; size = 4
?SendEventMapInfo@CTemporaryUserManager@@QAEXHH@Z PROC	; CTemporaryUserManager::SendEventMapInfo, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 322  : 	int bResult = this->CheckInEventMap(SlotIndex);

  00007	8b 75 08	 mov	 esi, DWORD PTR _SlotIndex$[ebp]
  0000a	57		 push	 edi
  0000b	56		 push	 esi
  0000c	8b f9		 mov	 edi, ecx
  0000e	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap

; 323  : 
; 324  : 	if( bResult == 2 )

  00013	83 f8 02	 cmp	 eax, 2
  00016	75 53		 jne	 SHORT $LN2@SendEventM

; 325  : 	{
; 326  : 		PMSG_ILLUSIONTEMPLE_STATESEND pMsg;
; 327  : 		PHeadSubSetB((LPBYTE)&pMsg,0xBF,0x09,sizeof(pMsg));

  00018	6a 06		 push	 6
  0001a	6a 09		 push	 9
  0001c	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0001f	68 bf 00 00 00	 push	 191			; 000000bfH
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB

; 328  : 
; 329  : 		pMsg.Temple = this->m_TempUserData[SlotIndex].m_iIllusionTempleIndex;

  0002a	8b c6		 mov	 eax, esi
  0002c	83 c4 10	 add	 esp, 16			; 00000010H
  0002f	c1 e0 04	 shl	 eax, 4
  00032	03 c6		 add	 eax, esi
  00034	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  00037	8a 41 2c	 mov	 al, BYTE PTR [ecx+44]
  0003a	88 45 fc	 mov	 BYTE PTR _pMsg$1[ebp+4], al

; 330  : 		pMsg.State = g_IllusionTemple.GetState(this->m_TempUserData[SlotIndex].m_MapNumber);

  0003d	0f b6 41 1c	 movzx	 eax, BYTE PTR [ecx+28]
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  0004c	88 45 fd	 mov	 BYTE PTR _pMsg$1[ebp+5], al

; 331  : 
; 332  : 		DataSend(CurUserIndex,(LPBYTE)&pMsg,pMsg.h.size);

  0004f	0f b6 45 f9	 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  00053	50		 push	 eax
  00054	8d 45 f8	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00057	50		 push	 eax
  00058	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  0005b	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 379  : 	}
; 380  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN2@SendEventM:

; 333  : 		return;
; 334  : 	}
; 335  : 
; 336  : 	if( bResult == 1 )

  0006b	83 f8 01	 cmp	 eax, 1
  0006e	0f 85 a1 00 00
	00		 jne	 $LN3@SendEventM

; 337  : 	{
; 338  : 		if( g_BloodCastle.GetPlayUserCountRightNow(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex) < 1 )

  00074	8b c6		 mov	 eax, esi
  00076	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  0007b	c1 e0 04	 shl	 eax, 4
  0007e	03 c6		 add	 eax, esi
  00080	ff 74 87 20	 push	 DWORD PTR [edi+eax*4+32]
  00084	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
  00087	e8 00 00 00 00	 call	 ?GetPlayUserCountRightNow@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetPlayUserCountRightNow
  0008c	83 f8 01	 cmp	 eax, 1
  0008f	0f 8c cb 00 00
	00		 jl	 $LN11@SendEventM

; 339  : 			return;
; 340  : 
; 341  : 		int nCastleBlockInfo = g_BloodCastle.GetCastleBlockInfo(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex);

  00095	ff 76 20	 push	 DWORD PTR [esi+32]
  00098	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  0009d	e8 00 00 00 00	 call	 ?GetCastleBlockInfo@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetCastleBlockInfo
  000a2	8b f8		 mov	 edi, eax

; 342  : 
; 343  : 		if( nCastleBlockInfo >= 1001 )

  000a4	81 ff e9 03 00
	00		 cmp	 edi, 1001		; 000003e9H
  000aa	7c 0f		 jl	 SHORT $LN5@SendEventM

; 344  : 			g_BloodCastle.SendCastleEntranceBlockInfo(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex,0);

  000ac	6a 00		 push	 0
  000ae	ff 76 20	 push	 DWORD PTR [esi+32]
  000b1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  000b6	e8 00 00 00 00	 call	 ?SendCastleEntranceBlockInfo@CBloodCastle@@QAEXH_N@Z ; CBloodCastle::SendCastleEntranceBlockInfo
$LN5@SendEventM:

; 345  : 
; 346  : 		if( nCastleBlockInfo >= 1002 )

  000bb	81 ff ea 03 00
	00		 cmp	 edi, 1002		; 000003eaH
  000c1	7c 0f		 jl	 SHORT $LN6@SendEventM

; 347  : 			g_BloodCastle.SendCastleBridgeBlockInfo(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex,0);

  000c3	6a 00		 push	 0
  000c5	ff 76 20	 push	 DWORD PTR [esi+32]
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  000cd	e8 00 00 00 00	 call	 ?SendCastleBridgeBlockInfo@CBloodCastle@@QAEXH_N@Z ; CBloodCastle::SendCastleBridgeBlockInfo
$LN6@SendEventM:

; 348  : 
; 349  : 		if( nCastleBlockInfo == 1003 )

  000d2	81 ff eb 03 00
	00		 cmp	 edi, 1003		; 000003ebH
  000d8	75 0f		 jne	 SHORT $LN7@SendEventM

; 350  : 			g_BloodCastle.SendCastleDoorBlockInfo(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex,0);

  000da	6a 00		 push	 0
  000dc	ff 76 20	 push	 DWORD PTR [esi+32]
  000df	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  000e4	e8 00 00 00 00	 call	 ?SendCastleDoorBlockInfo@CBloodCastle@@QAEXH_N@Z ; CBloodCastle::SendCastleDoorBlockInfo
$LN7@SendEventM:

; 351  : 
; 352  : 		int nCastleState = g_BloodCastle.GetCurrentState(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex);

  000e9	ff 76 20	 push	 DWORD PTR [esi+32]
  000ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  000f1	e8 00 00 00 00	 call	 ?GetCurrentState@CBloodCastle@@QAEHH@Z ; CBloodCastle::GetCurrentState

; 353  : 
; 354  : 		if( nCastleState == BC_STATE_PLAYING )

  000f6	83 f8 02	 cmp	 eax, 2
  000f9	75 65		 jne	 SHORT $LN11@SendEventM

; 355  : 		{
; 356  : 			g_BloodCastle.SendNoticeMessageToSpecificUser(this->m_TempUserData[SlotIndex].m_iBloodCastleIndex,CurUserIndex,0);

  000fb	6a 00		 push	 0
  000fd	ff 75 0c	 push	 DWORD PTR _CurUserIndex$[ebp]
  00100	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BloodCastle@@3VCBloodCastle@@A ; g_BloodCastle
  00105	ff 76 20	 push	 DWORD PTR [esi+32]
  00108	e8 00 00 00 00	 call	 ?SendNoticeMessageToSpecificUser@CBloodCastle@@QAEXHHH@Z ; CBloodCastle::SendNoticeMessageToSpecificUser
  0010d	5f		 pop	 edi
  0010e	5e		 pop	 esi

; 379  : 	}
; 380  : }

  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c2 08 00	 ret	 8
$LN3@SendEventM:

; 357  : 		}
; 358  : 		return;
; 359  : 	}
; 360  : 
; 361  : 	if( bResult == 4 )

  00115	83 f8 04	 cmp	 eax, 4
  00118	74 46		 je	 SHORT $LN11@SendEventM

; 362  : 	{
; 363  : 		// dopleganger
; 364  : 		return;
; 365  : 	}
; 366  : 
; 367  : 	if( bResult == 5 )

  0011a	83 f8 05	 cmp	 eax, 5
  0011d	74 41		 je	 SHORT $LN11@SendEventM

; 368  : 	{
; 369  : 		return;
; 370  : 	}
; 371  : 
; 372  : 	if( bResult == 3 )

  0011f	83 f8 03	 cmp	 eax, 3
  00122	75 3c		 jne	 SHORT $LN11@SendEventM

; 373  : 	{
; 374  : 		if( g_ImperialGuardian.GetPlayUserCountRightNow(this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex) < 1 )

  00124	8b c6		 mov	 eax, esi
  00126	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  0012b	c1 e0 04	 shl	 eax, 4
  0012e	03 c6		 add	 eax, esi
  00130	ff 74 87 30	 push	 DWORD PTR [edi+eax*4+48]
  00134	8d 3c 87	 lea	 edi, DWORD PTR [edi+eax*4]
  00137	e8 00 00 00 00	 call	 ?GetPlayUserCountRightNow@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetPlayUserCountRightNow
  0013c	83 f8 01	 cmp	 eax, 1
  0013f	7c 1f		 jl	 SHORT $LN11@SendEventM

; 375  : 			return;
; 376  : 
; 377  : 		g_ImperialGuardian.SendCurStateToUser(CurUserIndex,this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex);

  00141	ff 77 30	 push	 DWORD PTR [edi+48]
  00144	8b 75 0c	 mov	 esi, DWORD PTR _CurUserIndex$[ebp]
  00147	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  0014c	56		 push	 esi
  0014d	e8 00 00 00 00	 call	 ?SendCurStateToUser@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::SendCurStateToUser

; 378  : 		g_ImperialGuardian.SendCurGateInfoToUser(CurUserIndex,this->m_TempUserData[SlotIndex].m_iImperialGuardianZoneIndex);

  00152	ff 77 30	 push	 DWORD PTR [edi+48]
  00155	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  0015a	56		 push	 esi
  0015b	e8 00 00 00 00	 call	 ?SendCurGateInfoToUser@CImperialGuardian@@QAEHHH@Z ; CImperialGuardian::SendCurGateInfoToUser
$LN11@SendEventM:
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi

; 379  : 	}
; 380  : }

  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c2 08 00	 ret	 8
?SendEventMapInfo@CTemporaryUserManager@@QAEXHH@Z ENDP	; CTemporaryUserManager::SendEventMapInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?CheckMatchIndex@CTemporaryUserManager@@QAEHH@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 4
?CheckMatchIndex@CTemporaryUserManager@@QAEHH@Z PROC	; CTemporaryUserManager::CheckMatchIndex, COMDAT
; _this$ = ecx

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00003	8b 55 08	 mov	 edx, DWORD PTR _UserIndex$[ebp]
  00006	33 c0		 xor	 eax, eax
  00008	83 c1 10	 add	 ecx, 16			; 00000010H
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@CheckMatch:

; 263  : 	{
; 264  : 		if( this->m_TempUserData[i].m_iIndex == UserIndex )

  00010	39 11		 cmp	 DWORD PTR [ecx], edx
  00012	74 0e		 je	 SHORT $LN1@CheckMatch

; 262  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00014	40		 inc	 eax
  00015	83 c1 44	 add	 ecx, 68			; 00000044H
  00018	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0001d	7c f1		 jl	 SHORT $LL4@CheckMatch

; 265  : 			return i;
; 266  : 	}
; 267  : return -1;

  0001f	83 c8 ff	 or	 eax, -1
$LN1@CheckMatch:

; 268  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?CheckMatchIndex@CTemporaryUserManager@@QAEHH@Z ENDP	; CTemporaryUserManager::CheckMatchIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?CheckMatchCharacter@CTemporaryUserManager@@QAEHPAD@Z
_TEXT	SEGMENT
_CharacterName$ = 8					; size = 4
?CheckMatchCharacter@CTemporaryUserManager@@QAEHPAD@Z PROC ; CTemporaryUserManager::CheckMatchCharacter, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 249  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _CharacterName$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000e	66 90		 npad	 2
$LL4@CheckMatch:

; 250  : 	{
; 251  : 		if( this->m_TempUserData[i].m_iIndex != 0 )

  00010	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00014	74 33		 je	 SHORT $LN2@CheckMatch

; 252  : 		{
; 253  : 			if( !strcmp(CharacterName,this->m_TempUserData[i].szName) )

  00016	8b c6		 mov	 eax, esi
  00018	8b cb		 mov	 ecx, ebx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL14@CheckMatch:
  00020	8a 11		 mov	 dl, BYTE PTR [ecx]
  00022	3a 10		 cmp	 dl, BYTE PTR [eax]
  00024	75 1a		 jne	 SHORT $LN15@CheckMatch
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN16@CheckMatch
  0002a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0002d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00030	75 0e		 jne	 SHORT $LN15@CheckMatch
  00032	83 c1 02	 add	 ecx, 2
  00035	83 c0 02	 add	 eax, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL14@CheckMatch
$LN16@CheckMatch:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN17@CheckMatch
$LN15@CheckMatch:
  00040	1b c0		 sbb	 eax, eax
  00042	83 c8 01	 or	 eax, 1
$LN17@CheckMatch:
  00045	85 c0		 test	 eax, eax
  00047	74 16		 je	 SHORT $LN9@CheckMatch
$LN2@CheckMatch:

; 249  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00049	47		 inc	 edi
  0004a	83 c6 44	 add	 esi, 68			; 00000044H
  0004d	81 ff e8 03 00
	00		 cmp	 edi, 1000		; 000003e8H
  00053	7c bb		 jl	 SHORT $LL4@CheckMatch

; 255  : 		}
; 256  : 	}
; 257  : return -1;

  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	83 c8 ff	 or	 eax, -1
  0005a	5b		 pop	 ebx

; 258  : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN9@CheckMatch:

; 254  : 				return i;

  0005f	8b c7		 mov	 eax, edi
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi
  00063	5b		 pop	 ebx

; 258  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?CheckMatchCharacter@CTemporaryUserManager@@QAEHPAD@Z ENDP ; CTemporaryUserManager::CheckMatchCharacter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?DeleteAllPartyUserData@CTemporaryUserManager@@QAEHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_PartyNumber$ = 8					; size = 4
?DeleteAllPartyUserData@CTemporaryUserManager@@QAEHH@Z PROC ; CTemporaryUserManager::DeleteAllPartyUserData, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 234  : 	if( !OBJMAX_RANGE(PartyNumber) )

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _PartyNumber$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	85 db		 test	 ebx, ebx
  0000d	78 3d		 js	 SHORT $LN14@DeleteAllP
  0000f	33 c0		 xor	 eax, eax
  00011	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	74 2e		 je	 SHORT $LN14@DeleteAllP

; 236  : 
; 237  : 	for(int i = 0; i < OBJMAXUSER; i++)

  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	33 f6		 xor	 esi, esi
  00022	8d 79 18	 lea	 edi, DWORD PTR [ecx+24]
$LL4@DeleteAllP:

; 238  : 	{
; 239  : 		if( this->m_TempUserData[i].m_PartyNumber == PartyNumber )

  00025	39 1f		 cmp	 DWORD PTR [edi], ebx
  00027	75 09		 jne	 SHORT $LN2@DeleteAllP

; 240  : 		{
; 241  : 			this->TidyUpTempuserdate(i);

  00029	56		 push	 esi
  0002a	e8 00 00 00 00	 call	 ?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::TidyUpTempuserdate
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
$LN2@DeleteAllP:

; 236  : 
; 237  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00032	46		 inc	 esi
  00033	83 c7 44	 add	 edi, 68			; 00000044H
  00036	81 fe e8 03 00
	00		 cmp	 esi, 1000		; 000003e8H
  0003c	7c e7		 jl	 SHORT $LL4@DeleteAllP

; 242  : 		}
; 243  : 	}
; 244  : 	return true;

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	5b		 pop	 ebx

; 245  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN14@DeleteAllP:

; 235  : 		return 0;

  0004c	33 c0		 xor	 eax, eax
  0004e	5b		 pop	 ebx

; 245  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?DeleteAllPartyUserData@CTemporaryUserManager@@QAEHH@Z ENDP ; CTemporaryUserManager::DeleteAllPartyUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?DeleteUserInParty@CTemporaryUserManager@@QAEXH@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_nPartyNumber$1$ = -4					; size = 4
_SlotIndex$ = 8						; size = 4
?DeleteUserInParty@CTemporaryUserManager@@QAEXH@Z PROC	; CTemporaryUserManager::DeleteUserInParty, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b d1		 mov	 edx, ecx

; 199  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _SlotIndex$[ebp]
  0000b	89 55 f8	 mov	 DWORD PTR _this$1$[ebp], edx
  0000e	85 c9		 test	 ecx, ecx
  00010	0f 88 01 01 00
	00		 js	 $LN1@DeleteUser
  00016	33 c0		 xor	 eax, eax
  00018	81 f9 e7 03 00
	00		 cmp	 ecx, 999		; 000003e7H
  0001e	0f 9e c0	 setle	 al
  00021	85 c0		 test	 eax, eax
  00023	0f 84 ee 00 00
	00		 je	 $LN1@DeleteUser

; 200  : 		return;
; 201  : 
; 202  : 	int nPartyNumber = this->m_TempUserData[SlotIndex].m_PartyNumber;

  00029	8b c1		 mov	 eax, ecx
  0002b	c1 e0 04	 shl	 eax, 4
  0002e	03 c1		 add	 eax, ecx
  00030	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00033	53		 push	 ebx
  00034	8b 5a 18	 mov	 ebx, DWORD PTR [edx+24]
  00037	89 5d fc	 mov	 DWORD PTR _nPartyNumber$1$[ebp], ebx

; 203  : 
; 204  : 	if( !OBJMAX_RANGE(nPartyNumber) )

  0003a	85 db		 test	 ebx, ebx
  0003c	0f 88 d4 00 00
	00		 js	 $LN18@DeleteUser
  00042	33 c0		 xor	 eax, eax
  00044	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  0004a	0f 9e c0	 setle	 al
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 c1 00 00
	00		 je	 $LN18@DeleteUser

; 205  : 		return;
; 206  : 
; 207  : 	gParty.Delete(nPartyNumber,this->m_TempUserData[SlotIndex].m_iIndex,gObj[this->m_TempUserData[SlotIndex].m_iIndex].DBNumber);

  00055	8b 52 10	 mov	 edx, DWORD PTR [edx+16]
  00058	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0005d	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00063	ff 74 01 30	 push	 DWORD PTR [ecx+eax+48]
  00067	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0006c	52		 push	 edx
  0006d	53		 push	 ebx
  0006e	e8 00 00 00 00	 call	 ?Delete@PartyClass@@QAEHHHH@Z ; PartyClass::Delete

; 208  : 	gParty.UpdatePKPartyPanalty(nPartyNumber);

  00073	53		 push	 ebx
  00074	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00079	e8 00 00 00 00	 call	 ?UpdatePKPartyPanalty@PartyClass@@QAEXH@Z ; PartyClass::UpdatePKPartyPanalty

; 209  : 	CGPartyListAll(nPartyNumber);

  0007e	53		 push	 ebx
  0007f	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  00084	83 c4 04	 add	 esp, 4

; 210  : 
; 211  : 	if( gParty.GetCount(nPartyNumber) < 2 )

  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  00092	83 f8 02	 cmp	 eax, 2
  00095	7d 74		 jge	 SHORT $LN7@DeleteUser

; 212  : 	{
; 213  : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00097	8b c3		 mov	 eax, ebx
  00099	56		 push	 esi
  0009a	c1 e0 04	 shl	 eax, 4
  0009d	33 f6		 xor	 esi, esi
  0009f	2b c3		 sub	 eax, ebx
  000a1	57		 push	 edi
  000a2	8d 3c 85 0c 00
	00 00		 lea	 edi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  000a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@DeleteUser:

; 214  : 		{
; 215  : 			int number = gParty.m_PartyS[nPartyNumber].Number[n];

  000b0	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 216  : 			
; 217  : 			if( number >= 0 )

  000b2	85 db		 test	 ebx, ebx
  000b4	78 3d		 js	 SHORT $LN2@DeleteUser

; 218  : 			{
; 219  : 				gParty.Delete(nPartyNumber,n);

  000b6	56		 push	 esi
  000b7	ff 75 fc	 push	 DWORD PTR _nPartyNumber$1$[ebp]
  000ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000bf	e8 00 00 00 00	 call	 ?Delete@PartyClass@@QAEXHH@Z ; PartyClass::Delete

; 220  : 				gObj[number].PartyNumber = -1;

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c9	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048

; 221  : 				gObj[number].PartyTargetUser = -1;
; 222  : 				GCPartyDelUserSend(number);

  000cf	53		 push	 ebx
  000d0	c7 84 01 0c 06
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+1548], -1
  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e0	c7 84 01 10 06
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+1552], -1
  000eb	e8 00 00 00 00	 call	 ?GCPartyDelUserSend@@YAXH@Z ; GCPartyDelUserSend
  000f0	83 c4 04	 add	 esp, 4
$LN2@DeleteUser:

; 212  : 	{
; 213  : 		for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000f3	46		 inc	 esi
  000f4	83 c7 04	 add	 edi, 4
  000f7	83 fe 05	 cmp	 esi, 5
  000fa	7c b4		 jl	 SHORT $LL4@DeleteUser

; 223  : 			}
; 224  : 		}
; 225  : 
; 226  : 		gParty.Destroy(nPartyNumber);

  000fc	ff 75 fc	 push	 DWORD PTR _nPartyNumber$1$[ebp]
  000ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00104	e8 00 00 00 00	 call	 ?Destroy@PartyClass@@QAEHH@Z ; PartyClass::Destroy
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
$LN7@DeleteUser:

; 227  : 	}
; 228  : 
; 229  : 	this->TidyUpTempuserdate(SlotIndex);

  0010b	ff 75 08	 push	 DWORD PTR _SlotIndex$[ebp]
  0010e	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00111	e8 00 00 00 00	 call	 ?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::TidyUpTempuserdate
$LN18@DeleteUser:
  00116	5b		 pop	 ebx
$LN1@DeleteUser:

; 230  : }

  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
?DeleteUserInParty@CTemporaryUserManager@@QAEXH@Z ENDP	; CTemporaryUserManager::DeleteUserInParty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z
_TEXT	SEGMENT
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_SlotIndex$ = 8						; size = 4
?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z PROC	; CTemporaryUserManager::TidyUpTempuserdate, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _SlotIndex$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 180  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00017	85 ff		 test	 edi, edi
  00019	78 7e		 js	 SHORT $LN8@TidyUpTemp
  0001b	33 c0		 xor	 eax, eax
  0001d	81 ff e7 03 00
	00		 cmp	 edi, 999		; 000003e7H
  00023	0f 9e c0	 setle	 al
  00026	85 c0		 test	 eax, eax
  00028	74 6f		 je	 SHORT $LN8@TidyUpTemp

; 184  : 	int nPartyNumber = this->m_TempUserData[SlotIndex].m_PartyNumber;

  0002a	8b c7		 mov	 eax, edi
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 86   : 		lpBuf[0] = 0xC1;

  0002c	66 c7 45 ec c1
	10		 mov	 WORD PTR _pMsg$[ebp], 4289 ; 000010c1H
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp

; 184  : 	int nPartyNumber = this->m_TempUserData[SlotIndex].m_PartyNumber;

  00032	c1 e0 04	 shl	 eax, 4
  00035	03 c7		 add	 eax, edi
; File c:\users\michel\desktop\source\gameserver\include\prodef.h

; 88   : 		lpBuf[2] = head;

  00037	c6 45 ee a6	 mov	 BYTE PTR _pMsg$[ebp+2], 166 ; 000000a6H
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp

; 188  : 	memcpy(pMsg.szName,m_TempUserData[SlotIndex].szName,11);

  0003b	f3 0f 7e 44 83
	04		 movq	 xmm0, QWORD PTR [ebx+eax*4+4]
  00041	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  00044	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  00048	66 89 45 f7	 mov	 WORD PTR _pMsg$[ebp+11], ax
  0004c	8a 41 0e	 mov	 al, BYTE PTR [ecx+14]
  0004f	88 45 f9	 mov	 BYTE PTR _pMsg$[ebp+13], al

; 189  : 	pMsg.server = -1;

  00052	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00057	56		 push	 esi
  00058	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]

; 190  : 	cDBSMng.Send((PCHAR)&pMsg,sizeof(pMsg));

  0005b	b9 00 00 00 00	 mov	 ecx, OFFSET ?cDBSMng@@3VDBSockMng@@A ; cDBSMng
  00060	66 89 45 fa	 mov	 WORD PTR _pMsg$[ebp+14], ax
  00064	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00067	6a 10		 push	 16			; 00000010H
  00069	50		 push	 eax
  0006a	66 0f d6 45 ef	 movq	 QWORD PTR _pMsg$[ebp+3], xmm0
  0006f	e8 00 00 00 00	 call	 ?Send@DBSockMng@@QAEHPADH@Z ; DBSockMng::Send

; 191  : 
; 192  : 	this->LeaveEvent(SlotIndex);

  00074	57		 push	 edi
  00075	8b cb		 mov	 ecx, ebx
  00077	e8 00 00 00 00	 call	 ?LeaveEvent@CTemporaryUserManager@@QAEXH@Z ; CTemporaryUserManager::LeaveEvent

; 193  : 	this->ClearSpecificUserData(SlotIndex);

  0007c	57		 push	 edi
  0007d	8b cb		 mov	 ecx, ebx
  0007f	e8 00 00 00 00	 call	 ?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z ; CTemporaryUserManager::ClearSpecificUserData

; 194  : 	return nPartyNumber;

  00084	8b c6		 mov	 eax, esi
  00086	5e		 pop	 esi
  00087	5f		 pop	 edi
  00088	5b		 pop	 ebx

; 195  : }

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008c	33 cd		 xor	 ecx, ebp
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
$LN8@TidyUpTemp:
  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	83 c8 ff	 or	 eax, -1
  0009f	5f		 pop	 edi
  000a0	33 cd		 xor	 ecx, ebp
  000a2	5b		 pop	 ebx
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ENDP	; CTemporaryUserManager::TidyUpTempuserdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?ClearOverTimeUserData@CTemporaryUserManager@@QAEHK@Z
_TEXT	SEGMENT
tv417 = -20						; size = 4
_i$1$ = -16						; size = 4
_PartyNumber$1$ = -12					; size = 4
_dwCurrentTickCount$1$ = -8				; size = 4
_this$1$ = -4						; size = 4
_Second$ = 8						; size = 4
?ClearOverTimeUserData@CTemporaryUserManager@@QAEHK@Z PROC ; CTemporaryUserManager::ClearOverTimeUserData, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 123  : 	DWORD dwCurrentTickCount = GetTickCount();

  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00015	8b c8		 mov	 ecx, eax

; 124  : 
; 125  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00017	33 f6		 xor	 esi, esi
  00019	89 4d f8	 mov	 DWORD PTR _dwCurrentTickCount$1$[ebp], ecx
  0001c	89 75 f0	 mov	 DWORD PTR _i$1$[ebp], esi
  0001f	8d 7a 10	 lea	 edi, DWORD PTR [edx+16]
  00022	89 7d ec	 mov	 DWORD PTR tv417[ebp], edi
$LL4@ClearOverT:

; 126  : 	{
; 127  : 		if( this->m_TempUserData[i].m_iIndex != 0 &&

  00025	8b 07		 mov	 eax, DWORD PTR [edi]
  00027	85 c0		 test	 eax, eax
  00029	0f 84 23 01 00
	00		 je	 $LN2@ClearOverT
  0002f	69 45 08 e8 03
	00 00		 imul	 eax, DWORD PTR _Second$[ebp], 1000
  00036	2b 4f f0	 sub	 ecx, DWORD PTR [edi-16]
  00039	3b c8		 cmp	 ecx, eax
  0003b	0f 86 0e 01 00
	00		 jbe	 $LN26@ClearOverT

; 128  : 			(dwCurrentTickCount-this->m_TempUserData[i].m_dwTICK_COUNT) > Second*1000 )
; 129  : 		{
; 130  : 			int PartyNumber = this->m_TempUserData[i].m_PartyNumber;

  00041	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00044	89 5d f4	 mov	 DWORD PTR _PartyNumber$1$[ebp], ebx

; 131  : 
; 132  : 			if( !OBJMAX_RANGE(PartyNumber) )

  00047	85 db		 test	 ebx, ebx
  00049	0f 88 f5 00 00
	00		 js	 $LN25@ClearOverT
  0004f	33 c0		 xor	 eax, eax
  00051	81 fb eb 2c 00
	00		 cmp	 ebx, 11499		; 00002cebH
  00057	0f 9e c0	 setle	 al
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 e2 00 00
	00		 je	 $LN25@ClearOverT

; 135  : 				continue;
; 136  : 			}
; 137  : 
; 138  : 			if( this->CheckInEventMap(i) == 0 ||
; 139  : 				this->CheckInEventMap(i) == 1 || 

  00062	56		 push	 esi
  00063	8b ca		 mov	 ecx, edx
  00065	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap
  0006a	85 c0		 test	 eax, eax
  0006c	74 20		 je	 SHORT $LN11@ClearOverT
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap
  00077	83 f8 01	 cmp	 eax, 1
  0007a	74 12		 je	 SHORT $LN11@ClearOverT
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007f	56		 push	 esi
  00080	e8 00 00 00 00	 call	 ?CheckInEventMap@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::CheckInEventMap
  00085	83 f8 05	 cmp	 eax, 5
  00088	0f 85 b1 00 00
	00		 jne	 $LN12@ClearOverT
$LN11@ClearOverT:

; 140  : 				this->CheckInEventMap(i) == 5 )
; 141  : 			{
; 142  : 				gParty.Delete(PartyNumber,this->m_TempUserData[i].m_iIndex,gObj[this->m_TempUserData[i].m_iIndex].DBNumber);

  0008e	8b 17		 mov	 edx, DWORD PTR [edi]
  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00095	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0009b	ff 74 01 30	 push	 DWORD PTR [ecx+eax+48]
  0009f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000a4	52		 push	 edx
  000a5	53		 push	 ebx
  000a6	e8 00 00 00 00	 call	 ?Delete@PartyClass@@QAEHHHH@Z ; PartyClass::Delete

; 143  : 				gParty.UpdatePKPartyPanalty(PartyNumber);

  000ab	53		 push	 ebx
  000ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000b1	e8 00 00 00 00	 call	 ?UpdatePKPartyPanalty@PartyClass@@QAEXH@Z ; PartyClass::UpdatePKPartyPanalty

; 144  : 				CGPartyListAll(PartyNumber);

  000b6	53		 push	 ebx
  000b7	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  000bc	83 c4 04	 add	 esp, 4

; 145  : 
; 146  : 				if( gParty.GetCount(PartyNumber) < 2 )

  000bf	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000c4	53		 push	 ebx
  000c5	e8 00 00 00 00	 call	 ?GetCount@PartyClass@@QAEHH@Z ; PartyClass::GetCount
  000ca	83 f8 02	 cmp	 eax, 2
  000cd	7d 70		 jge	 SHORT $LN12@ClearOverT

; 147  : 				{
; 148  : 					for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  000cf	8b c3		 mov	 eax, ebx
  000d1	33 f6		 xor	 esi, esi
  000d3	c1 e0 04	 shl	 eax, 4
  000d6	2b c3		 sub	 eax, ebx
  000d8	8d 3c 85 0c 00
	00 00		 lea	 edi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  000df	90		 npad	 1
$LL7@ClearOverT:

; 149  : 					{
; 150  : 						int number = gParty.m_PartyS[PartyNumber].Number[n];

  000e0	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 151  : 
; 152  : 						if( number >= 0 )

  000e2	85 db		 test	 ebx, ebx
  000e4	78 3d		 js	 SHORT $LN5@ClearOverT

; 153  : 						{
; 154  : 							gParty.Delete(PartyNumber,n);

  000e6	56		 push	 esi
  000e7	ff 75 f4	 push	 DWORD PTR _PartyNumber$1$[ebp]
  000ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000ef	e8 00 00 00 00	 call	 ?Delete@PartyClass@@QAEXHH@Z ; PartyClass::Delete

; 155  : 							gObj[number].PartyNumber = -1;

  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f9	69 cb 40 27 00
	00		 imul	 ecx, ebx, 10048

; 156  : 							gObj[number].PartyTargetUser = -1;
; 157  : 							GCPartyDelUserSend(number);

  000ff	53		 push	 ebx
  00100	c7 84 01 0c 06
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+1548], -1
  0010b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00110	c7 84 01 10 06
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [ecx+eax+1552], -1
  0011b	e8 00 00 00 00	 call	 ?GCPartyDelUserSend@@YAXH@Z ; GCPartyDelUserSend
  00120	83 c4 04	 add	 esp, 4
$LN5@ClearOverT:

; 147  : 				{
; 148  : 					for(int n = 0; n < MAX_USER_IN_PARTY; n++)

  00123	46		 inc	 esi
  00124	83 c7 04	 add	 edi, 4
  00127	83 fe 05	 cmp	 esi, 5
  0012a	7c b4		 jl	 SHORT $LL7@ClearOverT

; 158  : 						}
; 159  : 					}
; 160  : 
; 161  : 					gParty.Destroy(PartyNumber);

  0012c	ff 75 f4	 push	 DWORD PTR _PartyNumber$1$[ebp]
  0012f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  00134	e8 00 00 00 00	 call	 ?Destroy@PartyClass@@QAEHH@Z ; PartyClass::Destroy
  00139	8b 75 f0	 mov	 esi, DWORD PTR _i$1$[ebp]
  0013c	8b 7d ec	 mov	 edi, DWORD PTR tv417[ebp]
$LN12@ClearOverT:

; 162  : 				}
; 163  : 			}
; 164  : 
; 165  : 			this->TidyUpTempuserdate(i);

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00142	eb 02		 jmp	 SHORT $LN27@ClearOverT
$LN25@ClearOverT:

; 133  : 			{
; 134  : 				this->TidyUpTempuserdate(i);

  00144	8b ca		 mov	 ecx, edx
$LN27@ClearOverT:
  00146	56		 push	 esi
  00147	e8 00 00 00 00	 call	 ?TidyUpTempuserdate@CTemporaryUserManager@@QAEHH@Z ; CTemporaryUserManager::TidyUpTempuserdate
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN26@ClearOverT:
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurrentTickCount$1$[ebp]
$LN2@ClearOverT:

; 124  : 
; 125  : 	for(int i = 0; i < OBJMAXUSER; i++)

  00152	46		 inc	 esi
  00153	83 c7 44	 add	 edi, 68			; 00000044H
  00156	89 75 f0	 mov	 DWORD PTR _i$1$[ebp], esi
  00159	89 7d ec	 mov	 DWORD PTR tv417[ebp], edi
  0015c	81 fe e8 03 00
	00		 cmp	 esi, 1000		; 000003e8H
  00162	0f 8c bd fe ff
	ff		 jl	 $LL4@ClearOverT

; 166  : 		}
; 167  : 	}
; 168  : return true;

  00168	5f		 pop	 edi
  00169	5e		 pop	 esi
  0016a	b8 01 00 00 00	 mov	 eax, 1
  0016f	5b		 pop	 ebx

; 169  : }

  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c2 04 00	 ret	 4
?ClearOverTimeUserData@CTemporaryUserManager@@QAEHK@Z ENDP ; CTemporaryUserManager::ClearOverTimeUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?AddToPriviousParty@CTemporaryUserManager@@QAEHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
tv151 = 8						; size = 4
_UserIndex$ = 8						; size = 4
tv153 = 12						; size = 4
_SlotIndex$ = 12					; size = 4
?AddToPriviousParty@CTemporaryUserManager@@QAEHHH@Z PROC ; CTemporaryUserManager::AddToPriviousParty, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 100  : 	if( !TEMP_USER_CHECK(SlotIndex) )

  00005	8b 75 0c	 mov	 esi, DWORD PTR _SlotIndex$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	85 f6		 test	 esi, esi
  0000d	0f 88 1d 01 00
	00		 js	 $LN9@AddToPrivi
  00013	33 c0		 xor	 eax, eax
  00015	81 fe e7 03 00
	00		 cmp	 esi, 999		; 000003e7H
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	0f 84 0a 01 00
	00		 je	 $LN9@AddToPrivi

; 102  : 
; 103  : 	if( strcmp(this->m_TempUserData[SlotIndex].szName,gObj[UserIndex].Name) )

  00026	53		 push	 ebx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR _UserIndex$[ebp]
  0002a	8b c6		 mov	 eax, esi
  0002c	69 d3 40 27 00
	00		 imul	 edx, ebx, 10048
  00032	c1 e0 04	 shl	 eax, 4
  00035	57		 push	 edi
  00036	89 55 0c	 mov	 DWORD PTR tv153[ebp], edx
  00039	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003f	03 c6		 add	 eax, esi
  00041	89 55 08	 mov	 DWORD PTR tv151[ebp], edx
  00044	8d 3c 81	 lea	 edi, DWORD PTR [ecx+eax*4]
  00047	8d 4a 5d	 lea	 ecx, DWORD PTR [edx+93]
  0004a	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0004d	0f 1f 00	 npad	 3
$LL10@AddToPrivi:
  00050	8a 10		 mov	 dl, BYTE PTR [eax]
  00052	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00054	75 1a		 jne	 SHORT $LN11@AddToPrivi
  00056	84 d2		 test	 dl, dl
  00058	74 12		 je	 SHORT $LN12@AddToPrivi
  0005a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0005d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00060	75 0e		 jne	 SHORT $LN11@AddToPrivi
  00062	83 c0 02	 add	 eax, 2
  00065	83 c1 02	 add	 ecx, 2
  00068	84 d2		 test	 dl, dl
  0006a	75 e4		 jne	 SHORT $LL10@AddToPrivi
$LN12@AddToPrivi:
  0006c	33 c0		 xor	 eax, eax
  0006e	eb 05		 jmp	 SHORT $LN13@AddToPrivi
$LN11@AddToPrivi:
  00070	1b c0		 sbb	 eax, eax
  00072	83 c8 01	 or	 eax, 1
$LN13@AddToPrivi:
  00075	85 c0		 test	 eax, eax
  00077	74 0b		 je	 SHORT $LN3@AddToPrivi

; 104  : 		return 0;

  00079	5f		 pop	 edi
  0007a	5b		 pop	 ebx
  0007b	33 c0		 xor	 eax, eax
  0007d	5e		 pop	 esi

; 119  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 08 00	 ret	 8
$LN3@AddToPrivi:

; 105  : 
; 106  : 	gParty.Delete(this->m_TempUserData[SlotIndex].m_PartyNumber,this->m_TempUserData[SlotIndex].m_iIndex,gObj[UserIndex].DBNumber);

  00084	8b 45 08	 mov	 eax, DWORD PTR tv151[ebp]
  00087	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0008c	ff 70 30	 push	 DWORD PTR [eax+48]
  0008f	ff 77 10	 push	 DWORD PTR [edi+16]
  00092	ff 77 18	 push	 DWORD PTR [edi+24]
  00095	e8 00 00 00 00	 call	 ?Delete@PartyClass@@QAEHHHH@Z ; PartyClass::Delete

; 107  : 	if( gParty.Add(this->m_TempUserData[SlotIndex].m_PartyNumber,UserIndex,gObj[UserIndex].DbClass,gObj[UserIndex].Level) < 0 )

  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR tv153[ebp]
  0009d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000a3	0f bf 81 96 00
	00 00		 movsx	 eax, WORD PTR [ecx+150]
  000aa	50		 push	 eax
  000ab	0f b6 81 92 00
	00 00		 movzx	 eax, BYTE PTR [ecx+146]
  000b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  000b7	50		 push	 eax
  000b8	53		 push	 ebx
  000b9	ff 77 18	 push	 DWORD PTR [edi+24]
  000bc	e8 00 00 00 00	 call	 ?Add@PartyClass@@QAEHHHHH@Z ; PartyClass::Add
  000c1	85 c0		 test	 eax, eax
  000c3	79 27		 jns	 SHORT $LN4@AddToPrivi

; 108  : 	{
; 109  : 		GCServerMsgStringSend("Failed to add in party!",UserIndex,1);

  000c5	6a 01		 push	 1
  000c7	53		 push	 ebx
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LAKABJHE@Failed?5to?5add?5in?5party?$CB?$AA@
  000cd	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 116  : 	}
; 117  : 	this->ClearSpecificUserData(SlotIndex);

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	56		 push	 esi
  000d9	e8 00 00 00 00	 call	 ?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z ; CTemporaryUserManager::ClearSpecificUserData
  000de	5f		 pop	 edi
  000df	5b		 pop	 ebx

; 118  : 	return 1;

  000e0	b8 01 00 00 00	 mov	 eax, 1
  000e5	5e		 pop	 esi

; 119  : }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN4@AddToPrivi:

; 110  : 	}
; 111  : 	else
; 112  : 	{
; 113  : 		gObj[UserIndex].PartyNumber = this->m_TempUserData[SlotIndex].m_PartyNumber;

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR tv153[ebp]
  000f4	8b 57 18	 mov	 edx, DWORD PTR [edi+24]
  000f7	89 94 01 0c 06
	00 00		 mov	 DWORD PTR [ecx+eax+1548], edx

; 114  : 		CGPartyListAll(this->m_TempUserData[SlotIndex].m_PartyNumber);

  000fe	ff 77 18	 push	 DWORD PTR [edi+24]
  00101	e8 00 00 00 00	 call	 ?CGPartyListAll@@YAXH@Z	; CGPartyListAll
  00106	83 c4 04	 add	 esp, 4

; 115  : 		gParty.PartyLog(this->m_TempUserData[SlotIndex].m_PartyNumber,UserIndex,2);

  00109	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0010e	6a 02		 push	 2
  00110	53		 push	 ebx
  00111	ff 77 18	 push	 DWORD PTR [edi+24]
  00114	e8 00 00 00 00	 call	 ?PartyLog@PartyClass@@QAEXHHH@Z ; PartyClass::PartyLog

; 116  : 	}
; 117  : 	this->ClearSpecificUserData(SlotIndex);

  00119	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011c	56		 push	 esi
  0011d	e8 00 00 00 00	 call	 ?ClearSpecificUserData@CTemporaryUserManager@@AAEXH@Z ; CTemporaryUserManager::ClearSpecificUserData
  00122	5f		 pop	 edi
  00123	5b		 pop	 ebx

; 118  : 	return 1;

  00124	b8 01 00 00 00	 mov	 eax, 1
  00129	5e		 pop	 esi

; 119  : }

  0012a	8b e5		 mov	 esp, ebp
  0012c	5d		 pop	 ebp
  0012d	c2 08 00	 ret	 8
$LN9@AddToPrivi:

; 101  : 		return 0;

  00130	33 c0		 xor	 eax, eax
  00132	5e		 pop	 esi

; 119  : }

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c2 08 00	 ret	 8
?AddToPriviousParty@CTemporaryUserManager@@QAEHHH@Z ENDP ; CTemporaryUserManager::AddToPriviousParty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?AddUserData@CTemporaryUserManager@@QAEHPADHH@Z
_TEXT	SEGMENT
_Name$ = 8						; size = 4
_UserIndex$ = 12					; size = 4
_PartyNumber$ = 16					; size = 4
?AddUserData@CTemporaryUserManager@@QAEHPADHH@Z PROC	; CTemporaryUserManager::AddUserData, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 72   : 	EnterCriticalSection(&this->m_CritSect);

  00008	8d b7 a0 09 01
	00		 lea	 esi, DWORD PTR [edi+68000]
  0000e	56		 push	 esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 73   : 	int iSlot = this->SearchEmptyIndex();

  00015	8b cf		 mov	 ecx, edi
  00017	e8 00 00 00 00	 call	 ?SearchEmptyIndex@CTemporaryUserManager@@AAEHXZ ; CTemporaryUserManager::SearchEmptyIndex

; 74   : 	LeaveCriticalSection(&this->m_CritSect);

  0001c	56		 push	 esi
  0001d	8b d8		 mov	 ebx, eax
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 75   : 
; 76   : 	if( iSlot == -1 )

  00025	83 fb ff	 cmp	 ebx, -1
  00028	75 09		 jne	 SHORT $LN2@AddUserDat

; 77   : 		return 0;

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	33 c0		 xor	 eax, eax
  0002e	5b		 pop	 ebx

; 96   : }

  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN2@AddUserDat:

; 78   : 
; 79   : 	this->m_TempUserData[iSlot].m_dwTICK_COUNT = GetTickCount();

  00033	8b c3		 mov	 eax, ebx
  00035	c1 e0 04	 shl	 eax, 4
  00038	03 c3		 add	 eax, ebx
  0003a	8d 3c 87	 lea	 edi, DWORD PTR [edi+eax*4]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 80   : 	memcpy(this->m_TempUserData[iSlot].szName,Name,sizeof(this->m_TempUserData[iSlot].szName));

  00043	8b 4d 08	 mov	 ecx, DWORD PTR _Name$[ebp]
  00046	89 07		 mov	 DWORD PTR [edi], eax
  00048	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  0004c	66 0f d6 47 04	 movq	 QWORD PTR [edi+4], xmm0
  00051	66 8b 41 08	 mov	 ax, WORD PTR [ecx+8]
  00055	66 89 47 0c	 mov	 WORD PTR [edi+12], ax
  00059	0f b6 41 0a	 movzx	 eax, BYTE PTR [ecx+10]

; 81   : 	this->m_TempUserData[iSlot].m_iIndex = UserIndex;

  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _UserIndex$[ebp]
  00060	88 47 0e	 mov	 BYTE PTR [edi+14], al
  00063	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 82   : 	this->m_TempUserData[iSlot].m_Change = gObj[UserIndex].m_Change;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0006b	69 f1 40 27 00
	00		 imul	 esi, ecx, 10048

; 83   : 	this->m_TempUserData[iSlot].m_PartyNumber = PartyNumber;
; 84   : 	this->m_TempUserData[iSlot].m_MapNumber = gObj[UserIndex].MapNumber;
; 85   : 	this->m_TempUserData[iSlot].m_iIllusionTempleIndex = gObj[UserIndex].iTempleIndex;
; 86   : 	this->m_TempUserData[iSlot].m_iImperialGuardianZoneIndex = g_ImperialGuardian.GetCurrentZoneIndex(UserIndex);

  00071	51		 push	 ecx
  00072	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  00077	8b 84 06 34 06
	00 00		 mov	 eax, DWORD PTR [esi+eax+1588]
  0007e	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00081	8b 45 10	 mov	 eax, DWORD PTR _PartyNumber$[ebp]
  00084	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00087	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0008c	0f b6 84 06 23
	01 00 00	 movzx	 eax, BYTE PTR [esi+eax+291]
  00094	88 47 1c	 mov	 BYTE PTR [edi+28], al
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009c	8b 84 06 78 24
	00 00		 mov	 eax, DWORD PTR [esi+eax+9336]
  000a3	89 47 2c	 mov	 DWORD PTR [edi+44], eax
  000a6	e8 00 00 00 00	 call	 ?GetCurrentZoneIndex@CImperialGuardian@@QAEHH@Z ; CImperialGuardian::GetCurrentZoneIndex
  000ab	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 87   : 	this->m_TempUserData[iSlot].m_iBloodCastleIndex = gObj[UserIndex].m_cBloodCastleIndex;

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b3	0f be 84 06 36
	12 00 00	 movsx	 eax, BYTE PTR [esi+eax+4662]
  000bb	89 47 20	 mov	 DWORD PTR [edi+32], eax

; 88   : 	this->m_TempUserData[iSlot].m_iBloodCastleSubIndex = gObj[UserIndex].m_cBloodCastleSubIndex;

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c3	0f be 84 06 37
	12 00 00	 movsx	 eax, BYTE PTR [esi+eax+4663]
  000cb	89 47 24	 mov	 DWORD PTR [edi+36], eax

; 89   : 	this->m_TempUserData[iSlot].m_iBloodCaslteExp = gObj[UserIndex].m_iBloodCastleEXP;

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000d3	8b 84 06 38 12
	00 00		 mov	 eax, DWORD PTR [esi+eax+4664]
  000da	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 90   : 	this->m_TempUserData[iSlot].m_nEventScore = gObj[UserIndex].m_nEventScore;

  000dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000e2	8b 84 06 28 12
	00 00		 mov	 eax, DWORD PTR [esi+eax+4648]
  000e9	89 47 34	 mov	 DWORD PTR [edi+52], eax

; 91   : 	this->m_TempUserData[iSlot].m_nEventExp = gObj[UserIndex].m_nEventExp;

  000ec	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f1	8b 84 06 2c 12
	00 00		 mov	 eax, DWORD PTR [esi+eax+4652]
  000f8	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 92   : 	this->m_TempUserData[iSlot].m_nEventMoney = gObj[UserIndex].m_nEventMoney;

  000fb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00100	8b 84 06 30 12
	00 00		 mov	 eax, DWORD PTR [esi+eax+4656]
  00107	89 47 3c	 mov	 DWORD PTR [edi+60], eax

; 93   : 	this->m_TempUserData[iSlot].m_bDevilSquareIndex = gObj[UserIndex].m_bDevilSquareIndex;

  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010f	0f b6 84 06 34
	12 00 00	 movzx	 eax, BYTE PTR [esi+eax+4660]
  00117	88 47 40	 mov	 BYTE PTR [edi+64], al

; 94   : 	this->m_TempUserData[iSlot].m_bDevilSquareAuth = gObj[UserIndex].m_bDevilSquareAuth;

  0011a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011f	0f b6 84 06 35
	12 00 00	 movzx	 eax, BYTE PTR [esi+eax+4661]
  00127	88 47 41	 mov	 BYTE PTR [edi+65], al

; 95   : 	return true;

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx

; 96   : }

  00132	5d		 pop	 ebp
  00133	c2 0c 00	 ret	 12			; 0000000cH
?AddUserData@CTemporaryUserManager@@QAEHPADHH@Z ENDP	; CTemporaryUserManager::AddUserData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?GetInstance@CTemporaryUserManager@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
?GetInstance@CTemporaryUserManager@@SAPAV1@XZ PROC	; CTemporaryUserManager::GetInstance, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 32   : 	if( CTemporaryUserManager::m_pInstance == 0 )

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_pInstance@CTemporaryUserManager@@2PAV1@A ; CTemporaryUserManager::m_pInstance
  00009	85 c0		 test	 eax, eax
  0000b	75 2b		 jne	 SHORT $LN3@GetInstanc

; 33   : 	{
; 34   : 		CTemporaryUserManager::m_pInstance = new CTemporaryUserManager;

  0000d	68 b8 09 01 00	 push	 68024			; 000109b8H
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
  0001a	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001d	85 c0		 test	 eax, eax
  0001f	74 10		 je	 SHORT $LN5@GetInstanc
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ??0CTemporaryUserManager@@QAE@XZ ; CTemporaryUserManager::CTemporaryUserManager
  00028	a3 00 00 00 00	 mov	 DWORD PTR ?m_pInstance@CTemporaryUserManager@@2PAV1@A, eax ; CTemporaryUserManager::m_pInstance

; 35   : 		return CTemporaryUserManager::m_pInstance;
; 36   : 	}
; 37   : 	else
; 38   : 	{
; 39   : 		return CTemporaryUserManager::m_pInstance;
; 40   : 	}
; 41   : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN5@GetInstanc:

; 33   : 	{
; 34   : 		CTemporaryUserManager::m_pInstance = new CTemporaryUserManager;

  00031	33 c0		 xor	 eax, eax
  00033	a3 00 00 00 00	 mov	 DWORD PTR ?m_pInstance@CTemporaryUserManager@@2PAV1@A, eax ; CTemporaryUserManager::m_pInstance
$LN3@GetInstanc:

; 35   : 		return CTemporaryUserManager::m_pInstance;
; 36   : 	}
; 37   : 	else
; 38   : 	{
; 39   : 		return CTemporaryUserManager::m_pInstance;
; 40   : 	}
; 41   : }

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?GetInstance@CTemporaryUserManager@@SAPAV1@XZ ENDP	; CTemporaryUserManager::GetInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ??1CTemporaryUserManager@@QAE@XZ
_TEXT	SEGMENT
??1CTemporaryUserManager@@QAE@XZ PROC			; CTemporaryUserManager::~CTemporaryUserManager, COMDAT
; _this$ = ecx

; 27   : 	DeleteCriticalSection(&this->m_CritSect);

  00000	8d 81 a0 09 01
	00		 lea	 eax, DWORD PTR [ecx+68000]
  00006	50		 push	 eax
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 28   : }

  0000d	c3		 ret	 0
??1CTemporaryUserManager@@QAE@XZ ENDP			; CTemporaryUserManager::~CTemporaryUserManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ??0CTemporaryUserManager@@QAE@XZ
_TEXT	SEGMENT
??0CTemporaryUserManager@@QAE@XZ PROC			; CTemporaryUserManager::CTemporaryUserManager, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20   : 	this->InitializeTempUserData();

  00003	e8 00 00 00 00	 call	 ?InitializeTempUserData@CTemporaryUserManager@@AAEXXZ ; CTemporaryUserManager::InitializeTempUserData

; 21   : 	InitializeCriticalSection(&this->m_CritSect);

  00008	8d 86 a0 09 01
	00		 lea	 eax, DWORD PTR [esi+68000]
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 22   : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0CTemporaryUserManager@@QAE@XZ ENDP			; CTemporaryUserManager::CTemporaryUserManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\prodef.h
;	COMDAT ?set@PBMSG_HEAD@@QAEXPAEEE@Z
_TEXT	SEGMENT
_lpBuf$ = 8						; size = 4
_head$ = 12						; size = 1
_size$ = 16						; size = 1
?set@PBMSG_HEAD@@QAEXPAEEE@Z PROC			; PBMSG_HEAD::set, COMDAT
; _this$ = ecx

; 85   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 		lpBuf[0] = 0xC1;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpBuf$[ebp]

; 87   : 		lpBuf[1] = size;

  00006	8a 45 10	 mov	 al, BYTE PTR _size$[ebp]
  00009	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 88   : 		lpBuf[2] = head;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _head$[ebp]
  0000f	c6 01 c1	 mov	 BYTE PTR [ecx], 193	; 000000c1H
  00012	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 89   : 	};	// line : 22

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?set@PBMSG_HEAD@@QAEXPAEEE@Z ENDP			; PBMSG_HEAD::set
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 546  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\temporaryusermanager.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 546  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
