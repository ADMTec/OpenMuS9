; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ObjAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CObjAttack@@QAE@XZ				; CObjAttack::CObjAttack
PUBLIC	??1CObjAttack@@UAE@XZ				; CObjAttack::~CObjAttack
PUBLIC	?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ; CObjAttack::Attack
PUBLIC	?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
PUBLIC	?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z ; CObjAttack::GetAttackDamageWizard
PUBLIC	?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z ; CObjAttack::GetAttackDamageSummoner
PUBLIC	?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage
PUBLIC	?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z ; CObjAttack::GetBuffTypePhysicalIncrease
PUBLIC	??_GCObjAttack@@UAEPAXI@Z			; CObjAttack::`scalar deleting destructor'
PUBLIC	?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z	; gObjDenorantSprite
PUBLIC	?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z		; gObjDarkHorse
PUBLIC	?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z		; gObjFenrir
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CObjAttack@@6B@				; CObjAttack::`vftable'
PUBLIC	?gclassObjAttack@@3VCObjAttack@@A		; gclassObjAttack
PUBLIC	??_C@_08FOLAHAHG@CRITICAL?$AA@			; `string'
PUBLIC	??_C@_09PBMNMIBJ@EXCELLENT?$AA@			; `string'
PUBLIC	??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@ ; `string'
PUBLIC	??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@ ; `string'
PUBLIC	??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@ ; `string'
PUBLIC	??_R4CObjAttack@@6B@				; CObjAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObjAttack@@@8				; CObjAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjAttack@@8				; CObjAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjAttack@@8				; CObjAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjAttack@@8			; CObjAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CObjBaseAttack@@8			; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObjBaseAttack@@@8			; CObjBaseAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4004000000000000
PUBLIC	__real@400ccccd
PUBLIC	__real@40133333
PUBLIC	__real@40200000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@41200000
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@42700000
PUBLIC	__real@42c80000
PUBLIC	__real@447a0000
PUBLIC	__xmm@00000005000000040000000300000002
PUBLIC	__xmm@00000063000000320000001400000000
PUBLIC	__xmm@000001a900000145000000e1000000a0
PUBLIC	__xmm@0000044200000370000002bc00000226
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_rand:PROC
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ:PROC ; CItem::IsDinorantReduceAttackDamaege
EXTRN	?IsFenrirIncLastAttackDamage@CItem@@QAEHXZ:PROC	; CItem::IsFenrirIncLastAttackDamage
EXTRN	?IsFenrirDecLastAttackDamage@CItem@@QAEHXZ:PROC	; CItem::IsFenrirDecLastAttackDamage
EXTRN	?GetDetailItemType@CItem@@QAEHXZ:PROC		; CItem::GetDetailItemType
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	?GetSkillAttr@CMagicDamage@@QAEHH@Z:PROC	; CMagicDamage::GetSkillAttr
EXTRN	?GetDamage@CMagicInf@@QAEHXZ:PROC		; CMagicInf::GetDamage
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?GensMap@CGensSystem@@QAEHH@Z:PROC		; CGensSystem::GensMap
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?IncAgro@TMonsterAIAgro@@QAEHHH@Z:PROC		; TMonsterAIAgro::IncAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?GCActionSend@@YAXPAUOBJECTSTRUCT@@EHH@Z:PROC	; GCActionSend
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?GCMagicCancelSend@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; GCMagicCancelSend
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	?GCManaSend@@YAXHFEEG@Z:PROC			; GCManaSend
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?GCSendEffectInfo@@YAXHE@Z:PROC			; GCSendEffectInfo
EXTRN	?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjIsConnected
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjBackSpring@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjBackSpring
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAttackQ
EXTRN	?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjAngelSprite
EXTRN	?gObjSatanSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjSatanSprite
EXTRN	?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjWingSprite
EXTRN	?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUniriaSprite
EXTRN	?gObjSpriteDamage@@YAXPAUOBJECTSTRUCT@@H@Z:PROC	; gObjSpriteDamage
EXTRN	?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z:PROC ; gObjWeaponDurDown
EXTRN	?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z:PROC ; gObjArmorRandomDurDown
EXTRN	?gObjCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckSelfDefense
EXTRN	?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z:PROC ; gObjLifeCheck
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjDuelCheck
EXTRN	?gObjCheckAttackTypeMagic@@YAHHH@Z:PROC		; gObjCheckAttackTypeMagic
EXTRN	?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjGetRelationShip
EXTRN	?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z:PROC ; gObjWeaponDurDownInCastle
EXTRN	?gObjGuardianSprice@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjGuardianSprice
EXTRN	??0CObjBaseAttack@@QAE@XZ:PROC			; CObjBaseAttack::CObjBaseAttack
EXTRN	??1CObjBaseAttack@@UAE@XZ:PROC			; CObjBaseAttack::~CObjBaseAttack
EXTRN	?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CObjBaseAttack::DecreaseArrow
EXTRN	?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CObjBaseAttack::CheckAttackArea
EXTRN	?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z:PROC ; CObjBaseAttack::PkCheck
EXTRN	?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; CObjBaseAttack::ResistanceCheck
EXTRN	?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z:PROC ; CObjBaseAttack::MissCheckPvP
EXTRN	?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAH@Z:PROC ; CObjBaseAttack::GetTargetDefense
EXTRN	?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CObjBaseAttack::GetPartyMemberCount
EXTRN	?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z:PROC ; CObjBaseAttack::MissCheck
EXTRN	??_ECObjAttack@@UAEPAXI@Z:PROC			; CObjAttack::`vector deleting destructor'
EXTRN	?GetBattleSoccerGoalMove@@YAHH@Z:PROC		; GetBattleSoccerGoalMove
EXTRN	?SetTarget@CDarkSpirit@@QAEXH@Z:PROC		; CDarkSpirit::SetTarget
EXTRN	?RemoveCloakingEffect@CObjUseSkill@@QAEHH@Z:PROC ; CObjUseSkill::RemoveCloakingEffect
EXTRN	?FireScreamExplosionAttack@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; CObjUseSkill::FireScreamExplosionAttack
EXTRN	?SpecificSkillAdditionTreat@CObjUseSkill@@QAEXPAUOBJECTSTRUCT@@0PAVCMagicInf@@H@Z:PROC ; CObjUseSkill::SpecificSkillAdditionTreat
EXTRN	?SkillLightExplode@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0HHHH@Z:PROC ; CObjUseSkill::SkillLightExplode
EXTRN	?gObjCallMonsterSetEnemy@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCallMonsterSetEnemy
EXTRN	?gObjMonsterStateProc@@YAXPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjMonsterStateProc
EXTRN	?GetCastleState@CCastleSiege@@QAEHXZ:PROC	; CCastleSiege::GetCastleState
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjRemoveBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z:PROC ; gObjCheckPowerfulEffect
EXTRN	?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetTotalValueOfEffect
EXTRN	?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjGetValueOfBuffIndex
EXTRN	?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
EXTRN	?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill
EXTRN	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
EXTRN	?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z:PROC ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue
EXTRN	?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z:PROC ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
EXTRN	?GetPartyPkLevel@PartyClass@@QAEDH@Z:PROC	; PartyClass::GetPartyPkLevel
EXTRN	?IsAttackAbleMonster@CImperialGuardian@@QAE_NH@Z:PROC ; CImperialGuardian::IsAttackAbleMonster
EXTRN	?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z:PROC ; BuffSkillEffect::GetEffect
EXTRN	?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z:PROC ; CNewPVP::IsSafeState
EXTRN	?modifyDamage@PvPBalance@@QAEXFFAAH@Z:PROC	; PvPBalance::modifyDamage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__except_handler4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gGensSystem@@3VCGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDarkSpirit@@3PAVCDarkSpirit@@A:BYTE		; gDarkSpirit
EXTRN	?gObjUseSkill@@3VCObjUseSkill@@A:DWORD		; gObjUseSkill
EXTRN	?g_CastleSiege@@3VCCastleSiege@@A:BYTE		; g_CastleSiege
EXTRN	?g_Crywolf@@3VCCrywolf@@A:BYTE			; g_Crywolf
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_iUseCharacterAutoRecuperationSystem@@3HA:DWORD ; g_iUseCharacterAutoRecuperationSystem
EXTRN	?g_iCharacterRecuperationMaxLevel@@3HA:DWORD	; g_iCharacterRecuperationMaxLevel
EXTRN	?g_ShieldSystemOn@@3HA:DWORD			; g_ShieldSystemOn
EXTRN	?g_iDamageDevideToSDRate@@3HA:DWORD		; g_iDamageDevideToSDRate
EXTRN	?g_bAbilityDebug@@3HA:DWORD			; g_bAbilityDebug
EXTRN	?g_ImperialGuardian@@3VCImperialGuardian@@A:BYTE ; g_ImperialGuardian
EXTRN	?g_BuffSkillEffect@@3VBuffSkillEffect@@A:BYTE	; g_BuffSkillEffect
EXTRN	?g_NewPVP@@3VCNewPVP@@A:BYTE			; g_NewPVP
EXTRN	?g_PvPBalance@@3VPvPBalance@@A:BYTE		; g_PvPBalance
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?gclassObjAttack@@3VCObjAttack@@A DD 01H DUP (?)	; gclassObjAttack
_BSS	ENDS
CRT$XCU	SEGMENT
?gclassObjAttack$initializer$@@3P6AXXZA DD FLAT:??__EgclassObjAttack@@YAXXZ ; gclassObjAttack$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@0000044200000370000002bc00000226
CONST	SEGMENT
__xmm@0000044200000370000002bc00000226 DB '&', 02H, 00H, 00H, 0bcH, 02H, 00H
	DB	00H, 'p', 03H, 00H, 00H, 'B', 04H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000001a900000145000000e1000000a0
CONST	SEGMENT
__xmm@000001a900000145000000e1000000a0 DB 0a0H, 00H, 00H, 00H, 0e1H, 00H, 00H
	DB	00H, 'E', 01H, 00H, 00H, 0a9H, 01H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000063000000320000001400000000
CONST	SEGMENT
__xmm@00000063000000320000001400000000 DB 00H, 00H, 00H, 00H, 014H, 00H, 00H
	DB	00H, '2', 00H, 00H, 00H, 'c', 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000005000000040000000300000002
CONST	SEGMENT
__xmm@00000005000000040000000300000002 DB 02H, 00H, 00H, 00H, 03H, 00H, 00H
	DB	00H, 04H, 00H, 00H, 00H, 05H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@40133333
CONST	SEGMENT
__real@40133333 DD 040133333r			; 2.3
CONST	ENDS
;	COMDAT __real@400ccccd
CONST	SEGMENT
__real@400ccccd DD 0400ccccdr			; 2.2
CONST	ENDS
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CObjBaseAttack@@8
rdata$r	SEGMENT
??_R2CObjBaseAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8 ; CObjBaseAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObjBaseAttack@@8
rdata$r	SEGMENT
??_R3CObjBaseAttack@@8 DD 00H				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjBaseAttack@@@8
data$r	SEGMENT
??_R0?AVCObjBaseAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjBaseAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjBaseAttack@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjBaseAttack@@8 DD FLAT:??_R0?AVCObjBaseAttack@@@8 ; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjAttack@@8 DD FLAT:??_R0?AVCObjAttack@@@8 ; CObjAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjAttack@@8
rdata$r	SEGMENT
??_R2CObjAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjAttack@@8	; CObjAttack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R3CObjAttack@@8
rdata$r	SEGMENT
??_R3CObjAttack@@8 DD 00H				; CObjAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjAttack@@@8
data$r	SEGMENT
??_R0?AVCObjAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjAttack@@', 00H
data$r	ENDS
;	COMDAT ??_R4CObjAttack@@6B@
rdata$r	SEGMENT
??_R4CObjAttack@@6B@ DD 00H				; CObjAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjAttack@@@8
	DD	FLAT:??_R3CObjAttack@@8
rdata$r	ENDS
;	COMDAT ??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@
CONST	SEGMENT
??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@ DB '[J'
	DB	'ewelOfHarmony][PvP System] Attacker:[%s][%s]-SD Decrease[%d] '
	DB	'SD Ignore[%d] Defender:[%s][%s] SD Increase Option[%d] - SD R'
	DB	'ate[%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@
CONST	SEGMENT
??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@ DB '['
	DB	'PvP System] Victim:[%s][%s], Attacker:[%s][%s] - SD[%d] HP[%f'
	DB	'] -> SD[%d] HP[%f]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@
CONST	SEGMENT
??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@ DB 'e'
	DB	'rror-Level1 : [%s][%s] Str:%d %d %d %d %d %d %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@ DB '%s Attack'
	DB	'Damage: %d %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBMNMIBJ@EXCELLENT?$AA@
CONST	SEGMENT
??_C@_09PBMNMIBJ@EXCELLENT?$AA@ DB 'EXCELLENT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FOLAHAHG@CRITICAL?$AA@
CONST	SEGMENT
??_C@_08FOLAHAHG@CRITICAL?$AA@ DB 'CRITICAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CObjAttack@@6B@
CONST	SEGMENT
??_7CObjAttack@@6B@ DD FLAT:??_R4CObjAttack@@6B@	; CObjAttack::`vftable'
	DD	FLAT:??_ECObjAttack@@UAEPAXI@Z
	DD	FLAT:?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc0H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN64@GetAttackD
	DD	FLAT:$LN48@GetAttackD
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z DD 0ffffffe4H
	DD	00H
	DD	0ffffff80H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN58@GetAttackD
	DD	FLAT:$LN40@GetAttackD
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffa4H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN170@GetAttackD
	DD	FLAT:$LN123@GetAttackD
	DD	0fffffffeH
	DD	FLAT:$LN171@GetAttackD
	DD	FLAT:$LN127@GetAttackD
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FgclassObjAttack@@YAXXZ
text$yd	SEGMENT
??__FgclassObjAttack@@YAXXZ PROC			; `dynamic atexit destructor for 'gclassObjAttack'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gclassObjAttack@@3VCObjAttack@@A ; gclassObjAttack
  00005	e9 00 00 00 00	 jmp	 ??1CObjAttack@@UAE@XZ	; CObjAttack::~CObjAttack
??__FgclassObjAttack@@YAXXZ ENDP			; `dynamic atexit destructor for 'gclassObjAttack''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ??__EgclassObjAttack@@YAXXZ
text$di	SEGMENT
??__EgclassObjAttack@@YAXXZ PROC			; `dynamic initializer for 'gclassObjAttack'', COMDAT

; 46   : CObjAttack gclassObjAttack;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gclassObjAttack@@3VCObjAttack@@A ; gclassObjAttack
  00005	e8 00 00 00 00	 call	 ??0CObjAttack@@QAE@XZ	; CObjAttack::CObjAttack
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgclassObjAttack@@YAXXZ ; `dynamic atexit destructor for 'gclassObjAttack''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgclassObjAttack@@YAXXZ ENDP			; `dynamic initializer for 'gclassObjAttack''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsVulcanusMap@CNewPVP@@QAEHH@Z
_TEXT	SEGMENT
_nMapNumber$ = 8					; size = 4
?IsVulcanusMap@CNewPVP@@QAEHH@Z PROC			; CNewPVP::IsVulcanusMap, COMDAT
; _this$ = ecx

; 307  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  00003	33 c0		 xor	 eax, eax
  00005	83 7d 08 3f	 cmp	 DWORD PTR _nMapNumber$[ebp], 63 ; 0000003fH
  00009	0f 94 c0	 sete	 al

; 309  : 	}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?IsVulcanusMap@CNewPVP@@QAEHH@Z ENDP			; CNewPVP::IsVulcanusMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
;	COMDAT ?IsDuel@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?IsDuel@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z PROC		; CNewPVP::IsDuel, COMDAT
; _this$ = ecx

; 296  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  00003	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00006	8b 88 50 12 00
	00		 mov	 ecx, DWORD PTR [eax+4688]
  0000c	33 c0		 xor	 eax, eax
  0000e	85 c9		 test	 ecx, ecx
  00010	78 09		 js	 SHORT $LN4@IsDuel
  00012	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
$LN4@IsDuel:

; 298  : 	}

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?IsDuel@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ENDP		; CNewPVP::IsDuel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\crywolf.h
;	COMDAT ?GetCrywolfState@CCrywolf@@QAEHXZ
_TEXT	SEGMENT
?GetCrywolfState@CCrywolf@@QAEHXZ PROC			; CCrywolf::GetCrywolfState, COMDAT
; _this$ = ecx

; 92   : 	int GetCrywolfState(){return this->m_iCrywolfState;}

  00000	8b 81 8c a8 0f
	00		 mov	 eax, DWORD PTR [ecx+1026188]
  00006	c3		 ret	 0
?GetCrywolfState@CCrywolf@@QAEHXZ ENDP			; CCrywolf::GetCrywolfState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z PROC		; gObjFenrir, COMDAT

; 4588 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4589 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0000b	75 42		 jne	 SHORT $LN5@gObjFenrir

; 4590 : 	{
; 4591 : 		return FALSE;
; 4592 : 	}
; 4593 : 
; 4594 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000d	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00013	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00019	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001e	85 c0		 test	 eax, eax
  00020	74 2d		 je	 SHORT $LN5@gObjFenrir

; 4595 : 	{
; 4596 : 		return FALSE;
; 4597 : 	}
; 4598 : 
; 4599 : 	CItem * lpFenrir = & lpObj->pInventory[8];

  00022	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]

; 4600 : 
; 4601 : 	if ( lpFenrir->m_Type == ITEMGET(13,37) )	// Fenrir

  00028	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  0002d	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00034	75 19		 jne	 SHORT $LN5@gObjFenrir

; 4602 : 	{
; 4603 : 		if ( lpFenrir->m_Durability > 0.0f )

  00036	f3 0f 10 80 c4
	06 00 00	 movss	 xmm0, DWORD PTR [eax+1732]
  0003e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00045	76 08		 jbe	 SHORT $LN5@gObjFenrir

; 4604 : 		{
; 4605 : 			return TRUE;

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	5e		 pop	 esi

; 4610 : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN5@gObjFenrir:

; 4606 : 		}
; 4607 : 	}
; 4608 : 
; 4609 : 	return FALSE;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 4610 : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; gObjFenrir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z PROC		; gObjDarkHorse, COMDAT

; 4561 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4562 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0000b	75 42		 jne	 SHORT $LN5@gObjDarkHo

; 4563 : 	{
; 4564 : 		return FALSE;
; 4565 : 	}
; 4566 : 
; 4567 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000d	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00013	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00019	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001e	85 c0		 test	 eax, eax
  00020	74 2d		 je	 SHORT $LN5@gObjDarkHo

; 4568 : 	{
; 4569 : 		return FALSE;
; 4570 : 	}
; 4571 : 
; 4572 : 	CItem * Denorant = & lpObj->pInventory[8];

  00022	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]

; 4573 : 
; 4574 : 	if ( Denorant->m_Type == ITEMGET(13,4) )

  00028	b9 04 1a 00 00	 mov	 ecx, 6660		; 00001a04H
  0002d	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00034	75 19		 jne	 SHORT $LN5@gObjDarkHo

; 4575 : 	{
; 4576 : 		if ( Denorant->m_Durability > 0.0f )

  00036	f3 0f 10 80 c4
	06 00 00	 movss	 xmm0, DWORD PTR [eax+1732]
  0003e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00045	76 08		 jbe	 SHORT $LN5@gObjDarkHo

; 4577 : 		{
; 4578 : 			return TRUE;

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	5e		 pop	 esi

; 4583 : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN5@gObjDarkHo:

; 4579 : 		}
; 4580 : 	}
; 4581 : 
; 4582 : 	return FALSE;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 4583 : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ENDP		; gObjDarkHorse
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z PROC	; gObjDenorantSprite, COMDAT

; 4533 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 4534 : 	if ( lpObj->Type != OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0000b	75 42		 jne	 SHORT $LN5@gObjDenora

; 4535 : 	{
; 4536 : 		return FALSE;
; 4537 : 	}
; 4538 : 
; 4539 : 	if ( lpObj->pInventory[8].IsItem() == FALSE )

  0000d	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00013	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  00019	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001e	85 c0		 test	 eax, eax
  00020	74 2d		 je	 SHORT $LN5@gObjDenora

; 4540 : 	{
; 4541 : 		return FALSE;
; 4542 : 	}
; 4543 : 
; 4544 : 	CItem * Denorant = & lpObj->pInventory[8];

  00022	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]

; 4545 : 
; 4546 : 	if ( Denorant->m_Type == ITEMGET(13,3) )

  00028	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  0002d	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  00034	75 19		 jne	 SHORT $LN5@gObjDenora

; 4547 : 	{
; 4548 : 		if ( Denorant->m_Durability > 0.0f )

  00036	f3 0f 10 80 c4
	06 00 00	 movss	 xmm0, DWORD PTR [eax+1732]
  0003e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00045	76 08		 jbe	 SHORT $LN5@gObjDenora

; 4549 : 		{
; 4550 : 			return TRUE;

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	5e		 pop	 esi

; 4555 : }

  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
$LN5@gObjDenora:

; 4551 : 		}
; 4552 : 	}
; 4553 : 
; 4554 : 	return FALSE;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 4555 : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; gObjDenorantSprite
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCObjAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCObjAttack@@UAEPAXI@Z PROC				; CObjAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CObjAttack@@UAE@XZ	; CObjAttack::~CObjAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCObjAttack@@UAEPAXI@Z ENDP				; CObjAttack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z
_TEXT	SEGMENT
_iValue$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_iAttackBerserkerMin$ = 12				; size = 4
_iAttackBerserkerMax$ = 16				; size = 4
_nBuffType$ = 20					; size = 4
?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z PROC ; CObjAttack::GetBuffTypePhysicalIncrease, COMDAT
; _this$ = ecx

; 4689 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 4690 : 	iAttackBerserkerMin = ( lpObj->Strength+lpObj->AddStrength + lpObj->Dexterity + lpObj->AddDexterity ) / 7;

  00005	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR _iAttackBerserkerMin$[ebp]
  0000b	57		 push	 edi

; 4691 : 	iAttackBerserkerMax = ( lpObj->Strength+lpObj->AddStrength + lpObj->Dexterity + lpObj->AddDexterity ) / 4;

  0000c	8b 7d 10	 mov	 edi, DWORD PTR _iAttackBerserkerMax$[ebp]
  0000f	0f b7 86 d2 00
	00 00		 movzx	 eax, WORD PTR [esi+210]
  00016	0f b7 8e d0 00
	00 00		 movzx	 ecx, WORD PTR [esi+208]
  0001d	03 c8		 add	 ecx, eax

; 4692 : 
; 4693 : 	int iValue = 0;

  0001f	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _iValue$[ebp], 0
  00026	0f b7 86 fe 00
	00 00		 movzx	 eax, WORD PTR [esi+254]
  0002d	03 c8		 add	 ecx, eax
  0002f	0f b7 86 fc 00
	00 00		 movzx	 eax, WORD PTR [esi+252]
  00036	03 c8		 add	 ecx, eax
  00038	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0003d	f7 e9		 imul	 ecx

; 4694 : 	gObjGetValueOfBuffIndex(lpObj,nBuffType,&iValue,0);

  0003f	6a 00		 push	 0
  00041	03 d1		 add	 edx, ecx
  00043	c1 fa 02	 sar	 edx, 2
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 03		 mov	 DWORD PTR [ebx], eax
  0004f	0f b7 8e d2 00
	00 00		 movzx	 ecx, WORD PTR [esi+210]
  00056	0f b7 86 d0 00
	00 00		 movzx	 eax, WORD PTR [esi+208]
  0005d	03 c1		 add	 eax, ecx
  0005f	0f b7 8e fe 00
	00 00		 movzx	 ecx, WORD PTR [esi+254]
  00066	03 c1		 add	 eax, ecx
  00068	0f b7 8e fc 00
	00 00		 movzx	 ecx, WORD PTR [esi+252]
  0006f	03 c1		 add	 eax, ecx
  00071	99		 cdq
  00072	83 e2 03	 and	 edx, 3
  00075	03 c2		 add	 eax, edx
  00077	c1 f8 02	 sar	 eax, 2
  0007a	89 07		 mov	 DWORD PTR [edi], eax
  0007c	8d 45 08	 lea	 eax, DWORD PTR _iValue$[ebp]
  0007f	50		 push	 eax
  00080	ff 75 14	 push	 DWORD PTR _nBuffType$[ebp]
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 4695 : 
; 4696 : 	iAttackBerserkerMin = iAttackBerserkerMin*iValue / 100;

  00089	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0008b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00090	0f af 4d 08	 imul	 ecx, DWORD PTR _iValue$[ebp]
  00094	83 c4 10	 add	 esp, 16			; 00000010H
  00097	f7 e9		 imul	 ecx

; 4697 : 	iAttackBerserkerMax = iAttackBerserkerMax*iValue / 100;

  00099	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0009e	c1 fa 05	 sar	 edx, 5
  000a1	8b ca		 mov	 ecx, edx
  000a3	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000a6	03 ca		 add	 ecx, edx
  000a8	89 0b		 mov	 DWORD PTR [ebx], ecx
  000aa	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000ac	0f af 4d 08	 imul	 ecx, DWORD PTR _iValue$[ebp]
  000b0	f7 e9		 imul	 ecx
  000b2	c1 fa 05	 sar	 edx, 5
  000b5	8b c2		 mov	 eax, edx
  000b7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ba	03 c2		 add	 eax, edx
  000bc	89 07		 mov	 DWORD PTR [edi], eax

; 4698 : return true;

  000be	b0 01		 mov	 al, 1
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	5b		 pop	 ebx

; 4699 : }

  000c3	5d		 pop	 ebp
  000c4	c2 10 00	 ret	 16			; 00000010H
?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z ENDP ; CObjAttack::GetBuffTypePhysicalIncrease
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
tv280 = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_iAttackDamage$ = 16					; size = 4
?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z PROC ; CObjAttack::GetShieldDamage, COMDAT
; _this$ = ecx

; 4614 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4615 : 	int iShieldDamage = 0;
; 4616 : 
; 4617 : 	if ( g_ShieldSystemOn == FALSE )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 0 ; g_ShieldSystemOn
  0000a	75 06		 jne	 SHORT $LN2@GetShieldD

; 4618 : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 4685 : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetShieldD:
  00012	53		 push	 ebx

; 4619 : 
; 4620 : 	if ( iAttackDamage <= 0 )

  00013	8b 5d 10	 mov	 ebx, DWORD PTR _iAttackDamage$[ebp]
  00016	85 db		 test	 ebx, ebx
  00018	7f 07		 jg	 SHORT $LN3@GetShieldD

; 4621 : 		return 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	5b		 pop	 ebx

; 4685 : }

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
$LN3@GetShieldD:

; 4622 : 
; 4623 : 	int iReduceLife = 0;
; 4624 : 	int iReduceShield = 0;
; 4625 : 	int iReduceLifeForEffect = 0; 
; 4626 : 	bool bReduceShieldGage = 0;
; 4627 : 	int iDamageDevideToSDRate = g_iDamageDevideToSDRate;
; 4628 : 	iDamageDevideToSDRate -= lpObj->m_JewelOfHarmonyEffect.HJOpDecreaseSDRate;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00024	56		 push	 esi
  00025	57		 push	 edi

; 4629 : 	iDamageDevideToSDRate += lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddSDRate;

  00026	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00029	0f bf 81 3c 24
	00 00		 movsx	 eax, WORD PTR [ecx+9276]
  00030	0f bf b7 50 24
	00 00		 movsx	 esi, WORD PTR [edi+9296]
  00037	2b f0		 sub	 esi, eax

; 4630 : 
; 4631 : 	if ( iDamageDevideToSDRate < 0 )

  00039	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  0003e	03 35 00 00 00
	00		 add	 esi, DWORD PTR ?g_iDamageDevideToSDRate@@3HA ; g_iDamageDevideToSDRate
  00044	79 04		 jns	 SHORT $LN4@GetShieldD

; 4632 : 		iDamageDevideToSDRate = 0;

  00046	33 f6		 xor	 esi, esi

; 4633 : 
; 4634 : 	if ( iDamageDevideToSDRate > 100 )

  00048	eb 05		 jmp	 SHORT $LN5@GetShieldD
$LN4@GetShieldD:
  0004a	3b f0		 cmp	 esi, eax
  0004c	0f 4f f0	 cmovg	 esi, eax
$LN5@GetShieldD:

; 4635 : 		iDamageDevideToSDRate = 100;
; 4636 : 
; 4637 : 	if ( lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate > 0 )

  0004f	0f b7 91 3e 24
	00 00		 movzx	 edx, WORD PTR [ecx+9278]
  00056	66 85 d2	 test	 dx, dx
  00059	7e 2c		 jle	 SHORT $LN7@GetShieldD

; 4638 : 	{
; 4639 : 		int iRand = rand()%100;

  0005b	e8 00 00 00 00	 call	 _rand
  00060	99		 cdq
  00061	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00066	f7 f9		 idiv	 ecx

; 4640 : 
; 4641 : 		if ( iRand < lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate )

  00068	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0006b	c7 45 08 00 00
	00 00		 mov	 DWORD PTR tv280[ebp], 0
  00072	0f b7 81 3e 24
	00 00		 movzx	 eax, WORD PTR [ecx+9278]
  00079	98		 cwde
  0007a	3b d0		 cmp	 edx, eax
  0007c	0f b7 91 3e 24
	00 00		 movzx	 edx, WORD PTR [ecx+9278]
  00083	0f 4c 75 08	 cmovl	 esi, DWORD PTR tv280[ebp]
$LN7@GetShieldD:

; 4642 : 		{
; 4643 : 			iDamageDevideToSDRate = 0;
; 4644 : 		}
; 4645 : 	}
; 4646 : 
; 4647 : 	if ( lpObj->m_JewelOfHarmonyEffect.HJOpDecreaseSDRate ||
; 4648 : 		 lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddSDRate ||

  00087	0f b7 81 3c 24
	00 00		 movzx	 eax, WORD PTR [ecx+9276]
  0008e	66 85 c0	 test	 ax, ax
  00091	75 0e		 jne	 SHORT $LN9@GetShieldD
  00093	66 39 87 50 24
	00 00		 cmp	 WORD PTR [edi+9296], ax
  0009a	75 05		 jne	 SHORT $LN9@GetShieldD
  0009c	66 85 d2	 test	 dx, dx
  0009f	74 34		 je	 SHORT $LN8@GetShieldD
$LN9@GetShieldD:

; 4649 : 		 lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate )
; 4650 : 	{
; 4651 : 		LogAddTD("[JewelOfHarmony][PvP System] Attacker:[%s][%s]-SD Decrease[%d] SD Ignore[%d] Defender:[%s][%s] SD Increase Option[%d] - SD Rate[%d]",

  000a1	0f bf 87 50 24
	00 00		 movsx	 eax, WORD PTR [edi+9296]
  000a8	56		 push	 esi
  000a9	50		 push	 eax
  000aa	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  000ad	50		 push	 eax
  000ae	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  000b1	50		 push	 eax
  000b2	0f bf c2	 movsx	 eax, dx
  000b5	50		 push	 eax
  000b6	0f b7 81 3c 24
	00 00		 movzx	 eax, WORD PTR [ecx+9276]
  000bd	98		 cwde
  000be	50		 push	 eax
  000bf	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  000c2	50		 push	 eax
  000c3	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  000c6	50		 push	 eax
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0IE@HMIJIHBA@?$FLJewelOfHarmony?$FN?$FLPvP?5System?$FN?5Att@
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000d2	83 c4 24	 add	 esp, 36			; 00000024H
$LN8@GetShieldD:

; 4652 : 			lpObj->AccountID, lpObj->Name,
; 4653 : 			lpObj->m_JewelOfHarmonyEffect.HJOpDecreaseSDRate,
; 4654 : 			lpObj->m_JewelOfHarmonyEffect.HJOpAddIgnoreSDRate,
; 4655 : 			lpTargetObj->AccountID, lpTargetObj->Name,
; 4656 : 			lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddSDRate,
; 4657 : 			iDamageDevideToSDRate);
; 4658 : 	}
; 4659 : 
; 4660 : 	iReduceShield = iAttackDamage * iDamageDevideToSDRate / 100;
; 4661 : 	iReduceLife = iAttackDamage - iReduceShield;
; 4662 : 
; 4663 : 	if ( (lpTargetObj->iShield-iReduceShield) <0 )

  000d5	8b 8f 2c 01 00
	00		 mov	 ecx, DWORD PTR [edi+300]
  000db	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000e0	0f af f3	 imul	 esi, ebx
  000e3	f7 ee		 imul	 esi
  000e5	8b c1		 mov	 eax, ecx
  000e7	c1 fa 05	 sar	 edx, 5
  000ea	8b f2		 mov	 esi, edx
  000ec	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  000ef	03 f2		 add	 esi, edx
  000f1	2b de		 sub	 ebx, esi
  000f3	2b c6		 sub	 eax, esi
  000f5	79 5a		 jns	 SHORT $LN13@GetShieldD

; 4664 : 	{
; 4665 : 		iReduceLife += iReduceShield  - lpTargetObj->iShield;

  000f7	2b f1		 sub	 esi, ecx
  000f9	03 de		 add	 ebx, esi

; 4666 : 		iReduceShield = lpTargetObj->iShield;

  000fb	8b f1		 mov	 esi, ecx

; 4667 : 
; 4668 : 		if ( lpTargetObj->iShield > 0 )

  000fd	85 c9		 test	 ecx, ecx
  000ff	7e 50		 jle	 SHORT $LN13@GetShieldD

; 4669 : 		{
; 4670 : 			bReduceShieldGage = true;
; 4671 : 		}
; 4672 : 	}
; 4673 : 
; 4674 : 	iReduceLifeForEffect = (int)(( lpTargetObj->MaxLife + lpTargetObj->AddLife ) * 20.0f / 100.0f);

  00101	66 0f 6e 87 24
	01 00 00	 movd	 xmm0, DWORD PTR [edi+292]
  00109	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0010c	f3 0f 58 87 dc
	00 00 00	 addss	 xmm0, DWORD PTR [edi+220]
  00114	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  0011c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  00124	f3 0f 2c c0	 cvttss2si eax, xmm0

; 4675 : 
; 4676 : 	if ( bReduceShieldGage == true && iReduceLife > iReduceLifeForEffect )

  00128	3b d8		 cmp	 ebx, eax
  0012a	7e 25		 jle	 SHORT $LN13@GetShieldD

; 4677 : 	{
; 4678 : 		if ( !CC_MAP_RANGE(lpTargetObj->MapNumber) )

  0012c	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00132	3c 35		 cmp	 al, 53			; 00000035H
  00134	74 1b		 je	 SHORT $LN13@GetShieldD
  00136	3c 12		 cmp	 al, 18			; 00000012H
  00138	72 0b		 jb	 SHORT $LN20@GetShieldD
  0013a	b1 17		 mov	 cl, 23			; 00000017H
  0013c	3a c8		 cmp	 cl, al
  0013e	1b c0		 sbb	 eax, eax
  00140	83 c0 01	 add	 eax, 1
  00143	75 0c		 jne	 SHORT $LN13@GetShieldD
$LN20@GetShieldD:

; 4679 : 		{
; 4680 : 			GCSendEffectInfo(lpTargetObj->m_Index, 17);

  00145	6a 11		 push	 17			; 00000011H
  00147	ff 37		 push	 DWORD PTR [edi]
  00149	e8 00 00 00 00	 call	 ?GCSendEffectInfo@@YAXHE@Z ; GCSendEffectInfo
  0014e	83 c4 08	 add	 esp, 8
$LN13@GetShieldD:

; 4681 : 		}
; 4682 : 	}
; 4683 : 
; 4684 : 	return iReduceShield;

  00151	5f		 pop	 edi
  00152	8b c6		 mov	 eax, esi
  00154	5e		 pop	 esi
  00155	5b		 pop	 ebx

; 4685 : }

  00156	5d		 pop	 ebp
  00157	c2 0c 00	 ret	 12			; 0000000cH
?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ENDP ; CObjAttack::GetShieldDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z
_TEXT	SEGMENT
_fMagicDamageMax$1$ = -48				; size = 4
_Left$1$ = -48						; size = 4
_Right$1$ = -48						; size = 4
_ad$ = -48						; size = 4
_fMagicDamageMin$1$ = -44				; size = 4
_subd$ = -40						; size = 4
_fCurseDamageMax$1$ = -36				; size = 4
_bIsOnDuel$1$ = -32					; size = 4
_skilldamage$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_targetDefense$ = 12					; size = 4
_AddCriticalDmg$2 = 16					; size = 4
_lpMagic$ = 16						; size = 4
_effect$ = 20						; size = 4
_fCurseDamageMin$1$ = 24				; size = 4
_damagemin$1$ = 24					; size = 4
_fDamage$3 = 24						; size = 4
_fDamage$4 = 24						; size = 4
_bIsOnDuel$ = 24					; size = 4
?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z PROC ; CObjAttack::GetAttackDamageSummoner, COMDAT
; _this$ = ecx

; 4219 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 4220 : 	if ( g_ShieldSystemOn == TRUE )

  00033	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 1 ; g_ShieldSystemOn
  0003a	75 10		 jne	 SHORT $LN51@GetAttackD

; 4221 : 	{
; 4222 : 		if ( bIsOnDuel == TRUE )

  0003c	8b 75 18	 mov	 esi, DWORD PTR _bIsOnDuel$[ebp]
  0003f	33 c0		 xor	 eax, eax
  00041	83 fe 01	 cmp	 esi, 1
  00044	0f 44 f0	 cmove	 esi, eax
  00047	89 75 e0	 mov	 DWORD PTR _bIsOnDuel$1$[ebp], esi
  0004a	eb 06		 jmp	 SHORT $LN5@GetAttackD
$LN51@GetAttackD:
  0004c	8b 45 18	 mov	 eax, DWORD PTR _bIsOnDuel$[ebp]
  0004f	89 45 e0	 mov	 DWORD PTR _bIsOnDuel$1$[ebp], eax
$LN5@GetAttackD:
  00052	0f 57 c0	 xorps	 xmm0, xmm0

; 4223 : 		{
; 4224 : 			bIsOnDuel = FALSE;
; 4225 : 		}
; 4226 : 	}
; 4227 : 
; 4228 : 	float fCurseDamageMin = 0;

  00055	f3 0f 11 45 18	 movss	 DWORD PTR _fCurseDamageMin$1$[ebp], xmm0

; 4229 : 	float fCurseDamageMax = 0;

  0005a	f3 0f 11 45 dc	 movss	 DWORD PTR _fCurseDamageMax$1$[ebp], xmm0

; 4230 : 
; 4231 : 	float fMagicDamageMin = 0;

  0005f	0f 28 c8	 movaps	 xmm1, xmm0
  00062	f3 0f 11 4d d4	 movss	 DWORD PTR _fMagicDamageMin$1$[ebp], xmm1

; 4232 : 	float fMagicDamageMax = 0;

  00067	f3 0f 11 45 d0	 movss	 DWORD PTR _fMagicDamageMax$1$[ebp], xmm0

; 4233 : 
; 4234 : 	int damagemin;
; 4235 : 	int damagemax;
; 4236 : 	int skilldamage;
; 4237 : 
; 4238 : 	int ad = 0;
; 4239 : 
; 4240 : 	skilldamage = lpMagic->GetDamage();

  0006c	8b 5d 10	 mov	 ebx, DWORD PTR _lpMagic$[ebp]
  0006f	8b cb		 mov	 ecx, ebx
  00071	e8 00 00 00 00	 call	 ?GetDamage@CMagicInf@@QAEHXZ ; CMagicInf::GetDamage
  00076	89 45 e4	 mov	 DWORD PTR _skilldamage$[ebp], eax

; 4241 : 
; 4242 : 	switch( lpMagic->m_Skill )

  00079	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0007c	3d db 00 00 00	 cmp	 eax, 219		; 000000dbH
  00081	0f 8c e8 02 00
	00		 jl	 $LN17@GetAttackD
  00087	3d e1 00 00 00	 cmp	 eax, 225		; 000000e1H
  0008c	7e 0b		 jle	 SHORT $LN6@GetAttackD
  0008e	3d cc 01 00 00	 cmp	 eax, 460		; 000001ccH
  00093	0f 85 d6 02 00
	00		 jne	 $LN17@GetAttackD
$LN6@GetAttackD:

; 4243 : 	{
; 4244 : 	case 219:
; 4245 : 	case 220:
; 4246 : 	case 221:
; 4247 : 	case AT_SKILL_INNOVATION:
; 4248 : 	case AT_MSKILL_SUM_INNOVATION1:
; 4249 : 	case 223:
; 4250 : 	case 224:
; 4251 : 	case 225:
; 4252 : 		{
; 4253 : 			if( gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER) == TRUE )

  00099	6a 51		 push	 81			; 00000051H
  0009b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0009e	57		 push	 edi
  0009f	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  000a4	83 c4 08	 add	 esp, 8
  000a7	3c 01		 cmp	 al, 1
  000a9	75 6d		 jne	 SHORT $LN52@GetAttackD

; 4254 : 			{
; 4255 : 				float adddmgperc = (float)gObjGetTotalValueOfEffect(lpObj,31);

  000ab	6a 1f		 push	 31			; 0000001fH
  000ad	57		 push	 edi
  000ae	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  000b3	83 c4 08	 add	 esp, 8
  000b6	66 0f 6e c0	 movd	 xmm0, eax
  000ba	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 4256 : 
; 4257 : 				fCurseDamageMax = ((lpObj->Energy + lpObj->AddEnergy)/4) * adddmgperc / 100.0f;

  000bd	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  000c4	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  000cb	03 c8		 add	 ecx, eax
  000cd	8b c1		 mov	 eax, ecx
  000cf	99		 cdq
  000d0	83 e2 03	 and	 edx, 3
  000d3	03 c2		 add	 eax, edx
  000d5	c1 f8 02	 sar	 eax, 2
  000d8	66 0f 6e c8	 movd	 xmm1, eax
  000dc	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000df	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000e3	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  000eb	f3 0f 11 4d dc	 movss	 DWORD PTR _fCurseDamageMax$1$[ebp], xmm1

; 4258 : 				fCurseDamageMin = ((lpObj->Energy + lpObj->AddEnergy)/9) * adddmgperc / 100.0f;

  000f0	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  000f5	f7 e9		 imul	 ecx
  000f7	d1 fa		 sar	 edx, 1
  000f9	8b c2		 mov	 eax, edx
  000fb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000fe	03 c2		 add	 eax, edx
  00100	66 0f 6e c8	 movd	 xmm1, eax
  00104	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00107	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0010b	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  00113	f3 0f 11 4d 18	 movss	 DWORD PTR _fCurseDamageMin$1$[ebp], xmm1
$LN52@GetAttackD:

; 4259 : 			}
; 4260 : 
; 4261 : 			if( gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER2) == TRUE ||
; 4262 : 				gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER3) == TRUE ||

  00118	68 96 00 00 00	 push	 150			; 00000096H
  0011d	57		 push	 edi
  0011e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00123	83 c4 08	 add	 esp, 8
  00126	3c 01		 cmp	 al, 1
  00128	74 28		 je	 SHORT $LN9@GetAttackD
  0012a	68 97 00 00 00	 push	 151			; 00000097H
  0012f	57		 push	 edi
  00130	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00135	83 c4 08	 add	 esp, 8
  00138	3c 01		 cmp	 al, 1
  0013a	74 16		 je	 SHORT $LN9@GetAttackD
  0013c	68 98 00 00 00	 push	 152			; 00000098H
  00141	57		 push	 edi
  00142	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00147	83 c4 08	 add	 esp, 8
  0014a	3c 01		 cmp	 al, 1
  0014c	0f 85 82 00 00
	00		 jne	 $LN8@GetAttackD
$LN9@GetAttackD:

; 4263 : 				gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER4) == TRUE )
; 4264 : 			{
; 4265 : 				float adddmgperc = (float)gObjGetTotalValueOfEffect(lpObj,31);

  00152	6a 1f		 push	 31			; 0000001fH
  00154	57		 push	 edi
  00155	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  0015a	83 c4 08	 add	 esp, 8
  0015d	66 0f 6e c8	 movd	 xmm1, eax
  00161	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 4266 : 
; 4267 : 				if( lpObj->m_MPSkillOpt.MpsBerserkInc1 > 0.0f )

  00164	f3 0f 10 87 90
	07 00 00	 movss	 xmm0, DWORD PTR [edi+1936]
  0016c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00173	76 04		 jbe	 SHORT $LN10@GetAttackD

; 4268 : 				{
; 4269 : 					adddmgperc += lpObj->m_MPSkillOpt.MpsBerserkInc1;

  00175	f3 0f 58 c8	 addss	 xmm1, xmm0
$LN10@GetAttackD:

; 4270 : 				}
; 4271 : 
; 4272 : 				fCurseDamageMax = ((lpObj->Energy + lpObj->AddEnergy)/4) * adddmgperc / 100.0f;

  00179	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  00180	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00187	03 c8		 add	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	99		 cdq
  0018c	83 e2 03	 and	 edx, 3
  0018f	03 c2		 add	 eax, edx
  00191	c1 f8 02	 sar	 eax, 2
  00194	66 0f 6e c0	 movd	 xmm0, eax
  00198	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0019b	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0019f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  001a7	f3 0f 11 45 dc	 movss	 DWORD PTR _fCurseDamageMax$1$[ebp], xmm0

; 4273 : 				fCurseDamageMin = ((lpObj->Energy + lpObj->AddEnergy)/9) * adddmgperc / 100.0f;

  001ac	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  001b1	f7 e9		 imul	 ecx
  001b3	d1 fa		 sar	 edx, 1
  001b5	8b c2		 mov	 eax, edx
  001b7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001ba	03 c2		 add	 eax, edx
  001bc	66 0f 6e c0	 movd	 xmm0, eax
  001c0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001c3	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001c7	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  001cf	f3 0f 11 45 18	 movss	 DWORD PTR _fCurseDamageMin$1$[ebp], xmm0
$LN8@GetAttackD:

; 4274 : 			}
; 4275 : 
; 4276 : 			damagemin = int(lpMagic->m_DamageMin + lpObj->m_CurseDamageMin + fCurseDamageMin);

  001d4	8b 87 84 06 00
	00		 mov	 eax, DWORD PTR [edi+1668]
  001da	03 43 0c	 add	 eax, DWORD PTR [ebx+12]
  001dd	66 0f 6e c0	 movd	 xmm0, eax
  001e1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001e4	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _fCurseDamageMin$1$[ebp]
  001e9	f3 0f 2c f0	 cvttss2si esi, xmm0
  001ed	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi

; 4277 : 			damagemax = int(lpMagic->m_DamageMax + lpObj->m_CurseDamageMax + fCurseDamageMax);

  001f0	8b 87 88 06 00
	00		 mov	 eax, DWORD PTR [edi+1672]
  001f6	03 43 10	 add	 eax, DWORD PTR [ebx+16]
  001f9	66 0f 6e c0	 movd	 xmm0, eax
  001fd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00200	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _fCurseDamageMax$1$[ebp]
  00205	f3 0f 2c d8	 cvttss2si ebx, xmm0

; 4278 : 
; 4279 : 			if( g_MasterSkillSystem.CheckMasterLevelSkill(lpMagic->m_Skill) )

  00209	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0020c	ff 70 08	 push	 DWORD PTR [eax+8]
  0020f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00214	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00219	85 c0		 test	 eax, eax
  0021b	74 3a		 je	 SHORT $LN11@GetAttackD

; 4280 : 			{
; 4281 : 				float fDamage = g_MasterSkillSystem.GetSkillAttackDamage(lpObj,lpMagic->m_Skill);

  0021d	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00220	ff 70 08	 push	 DWORD PTR [eax+8]
  00223	57		 push	 edi
  00224	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00229	e8 00 00 00 00	 call	 ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
  0022e	d9 5d 18	 fstp	 DWORD PTR _fDamage$4[ebp]
  00231	66 0f 6e c6	 movd	 xmm0, esi

; 4282 : 
; 4283 : 				damagemin += fDamage;

  00235	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00238	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _fDamage$4[ebp]
  0023d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00241	f3 0f 2c f0	 cvttss2si esi, xmm0
  00245	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi
  00248	66 0f 6e c3	 movd	 xmm0, ebx

; 4284 : 				damagemax += fDamage;

  0024c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0024f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00253	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN11@GetAttackD:

; 4285 : 			}
; 4286 : 
; 4287 : 			if( lpObj->m_MPSkillOpt.MpsMagicMastery2 > 0.0f )

  00257	f3 0f 10 97 64
	07 00 00	 movss	 xmm2, DWORD PTR [edi+1892]
  0025f	0f 57 c9	 xorps	 xmm1, xmm1
  00262	0f 2f d1	 comiss	 xmm2, xmm1
  00265	76 21		 jbe	 SHORT $LN12@GetAttackD
  00267	66 0f 6e c6	 movd	 xmm0, esi

; 4288 : 			{
; 4289 : 				damagemin += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  0026b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0026e	f3 0f 58 c2	 addss	 xmm0, xmm2
  00272	f3 0f 2c f0	 cvttss2si esi, xmm0
  00276	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi
  00279	66 0f 6e c3	 movd	 xmm0, ebx

; 4290 : 				damagemax += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  0027d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00280	f3 0f 58 c2	 addss	 xmm0, xmm2
  00284	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN12@GetAttackD:

; 4291 : 			}
; 4292 : 
; 4293 : 			if( lpObj->m_MPSkillOpt.MpsMinWizCurseInc > 0.0f )

  00288	f3 0f 10 97 9c
	07 00 00	 movss	 xmm2, DWORD PTR [edi+1948]
  00290	0f 2f d1	 comiss	 xmm2, xmm1
  00293	76 12		 jbe	 SHORT $LN13@GetAttackD
  00295	66 0f 6e c6	 movd	 xmm0, esi

; 4294 : 			{
; 4295 : 				damagemin += lpObj->m_MPSkillOpt.MpsMinWizCurseInc;

  00299	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0029c	f3 0f 58 c2	 addss	 xmm0, xmm2
  002a0	f3 0f 2c f0	 cvttss2si esi, xmm0
  002a4	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi
$LN13@GetAttackD:

; 4296 : 			}
; 4297 : 
; 4298 : 			if( lpObj->m_MPSkillOpt.MpsWingAttackIncrease > 0.0f )

  002a7	f3 0f 10 97 4c
	08 00 00	 movss	 xmm2, DWORD PTR [edi+2124]
  002af	0f 2f d1	 comiss	 xmm2, xmm1
  002b2	76 21		 jbe	 SHORT $LN14@GetAttackD
  002b4	66 0f 6e c6	 movd	 xmm0, esi

; 4299 : 			{
; 4300 : 				damagemin += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  002b8	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002bb	f3 0f 58 c2	 addss	 xmm0, xmm2
  002bf	f3 0f 2c c0	 cvttss2si eax, xmm0
  002c3	89 45 18	 mov	 DWORD PTR _damagemin$1$[ebp], eax
  002c6	66 0f 6e c3	 movd	 xmm0, ebx

; 4301 : 				damagemax += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  002ca	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002cd	f3 0f 58 c2	 addss	 xmm0, xmm2
  002d1	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN14@GetAttackD:

; 4302 : 			}
; 4303 : 
; 4304 : 			CItem* Right = &lpObj->pInventory[1];

  002d5	8b b7 c0 11 00
	00		 mov	 esi, DWORD PTR [edi+4544]
  002db	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  002e1	89 75 d0	 mov	 DWORD PTR _Right$1$[ebp], esi

; 4305 : 	
; 4306 : 			int CurseDamage;
; 4307 : 	
; 4308 : 			if( Right->IsItem() )

  002e4	8b ce		 mov	 ecx, esi
  002e6	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  002eb	85 c0		 test	 eax, eax
  002ed	74 79		 je	 SHORT $LN53@GetAttackD

; 4309 : 			{
; 4310 : 				if( ( Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) )
; 4311 : 					&& Right->m_IsValidItem )

  002ef	0f b7 46 06	 movzx	 eax, WORD PTR [esi+6]
  002f3	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  002f8	66 3b c1	 cmp	 ax, cx
  002fb	7c 6b		 jl	 SHORT $LN53@GetAttackD
  002fd	b9 00 0c 00 00	 mov	 ecx, 3072		; 00000c00H
  00302	66 3b c1	 cmp	 ax, cx
  00305	7d 61		 jge	 SHORT $LN53@GetAttackD
  00307	80 be ac 00 00
	00 00		 cmp	 BYTE PTR [esi+172], 0
  0030e	74 58		 je	 SHORT $LN53@GetAttackD

; 4312 : 				{
; 4313 : 					CurseDamage = Right->m_CurseMagic / 2 + Right->m_Level * 2;

  00310	0f b7 4e 22	 movzx	 ecx, WORD PTR [esi+34]
  00314	d1 e9		 shr	 ecx, 1
  00316	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  0031a	8d 34 41	 lea	 esi, DWORD PTR [ecx+eax*2]
  0031d	66 0f 6e c6	 movd	 xmm0, esi

; 4314 : 					CurseDamage -= (WORD)(Right->m_CurrentDurabilityState * CurseDamage);	// #formula

  00321	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00324	8b 45 d0	 mov	 eax, DWORD PTR _Right$1$[ebp]
  00327	f3 0f 59 80 a4
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+164]
  0032f	f3 0f 2c c0	 cvttss2si eax, xmm0
  00333	0f b7 c0	 movzx	 eax, ax
  00336	2b f0		 sub	 esi, eax

; 4315 : 	
; 4316 : 					damagemin += damagemin * CurseDamage / 100;

  00338	8b ce		 mov	 ecx, esi
  0033a	0f af 4d 18	 imul	 ecx, DWORD PTR _damagemin$1$[ebp]
  0033e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00343	f7 e9		 imul	 ecx
  00345	c1 fa 05	 sar	 edx, 5
  00348	8b c2		 mov	 eax, edx
  0034a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0034d	03 c2		 add	 eax, edx
  0034f	01 45 18	 add	 DWORD PTR _damagemin$1$[ebp], eax

; 4317 : 					damagemax += damagemax * CurseDamage / 100;

  00352	0f af f3	 imul	 esi, ebx
  00355	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0035a	f7 ee		 imul	 esi
  0035c	c1 fa 05	 sar	 edx, 5
  0035f	8b c2		 mov	 eax, edx
  00361	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00364	03 c2		 add	 eax, edx
  00366	03 d8		 add	 ebx, eax
$LN53@GetAttackD:

; 4318 : 				}
; 4319 : 			}
; 4320 : 
; 4321 : 			ad += gObjGetTotalValueOfEffect(lpObj,0x1B);

  00368	6a 1b		 push	 27			; 0000001bH

; 4322 : 		}
; 4323 : 		break;

  0036a	e9 a6 02 00 00	 jmp	 $LN60@GetAttackD
$LN17@GetAttackD:

; 4324 : 	default:
; 4325 : 		{
; 4326 : 			if( gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER) == TRUE )

  0036f	6a 51		 push	 81			; 00000051H
  00371	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00374	57		 push	 edi
  00375	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0037a	83 c4 08	 add	 esp, 8
  0037d	3c 01		 cmp	 al, 1
  0037f	75 6d		 jne	 SHORT $LN54@GetAttackD

; 4327 : 			{
; 4328 : 				float adddmgperc = (float)gObjGetTotalValueOfEffect(lpObj,31);

  00381	6a 1f		 push	 31			; 0000001fH
  00383	57		 push	 edi
  00384	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  00389	83 c4 08	 add	 esp, 8
  0038c	66 0f 6e c0	 movd	 xmm0, eax
  00390	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 4329 : 
; 4330 : 				fMagicDamageMin = ((lpObj->Energy + lpObj->AddEnergy)/9) * adddmgperc / 100 ;

  00393	0f b7 b7 02 01
	00 00		 movzx	 esi, WORD PTR [edi+258]
  0039a	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  003a1	03 f0		 add	 esi, eax
  003a3	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  003a8	f7 ee		 imul	 esi
  003aa	d1 fa		 sar	 edx, 1
  003ac	8b ca		 mov	 ecx, edx
  003ae	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003b1	03 ca		 add	 ecx, edx
  003b3	66 0f 6e c9	 movd	 xmm1, ecx
  003b7	0f 5b c9	 cvtdq2ps xmm1, xmm1
  003ba	f3 0f 59 c8	 mulss	 xmm1, xmm0
  003be	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  003c6	f3 0f 11 4d d4	 movss	 DWORD PTR _fMagicDamageMin$1$[ebp], xmm1

; 4331 : 				fMagicDamageMax = ((lpObj->Energy + lpObj->AddEnergy)/4) * adddmgperc / 100 ;

  003cb	8b c6		 mov	 eax, esi
  003cd	99		 cdq
  003ce	83 e2 03	 and	 edx, 3
  003d1	03 c2		 add	 eax, edx
  003d3	c1 f8 02	 sar	 eax, 2
  003d6	66 0f 6e c8	 movd	 xmm1, eax
  003da	0f 5b c9	 cvtdq2ps xmm1, xmm1
  003dd	f3 0f 59 c8	 mulss	 xmm1, xmm0
  003e1	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  003e9	f3 0f 11 4d d0	 movss	 DWORD PTR _fMagicDamageMax$1$[ebp], xmm1
$LN54@GetAttackD:

; 4332 : 			}
; 4333 : 
; 4334 : 			if( gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER2) == TRUE ||
; 4335 : 				gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER3) == TRUE ||

  003ee	68 96 00 00 00	 push	 150			; 00000096H
  003f3	57		 push	 edi
  003f4	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  003f9	83 c4 08	 add	 esp, 8
  003fc	3c 01		 cmp	 al, 1
  003fe	74 24		 je	 SHORT $LN20@GetAttackD
  00400	68 97 00 00 00	 push	 151			; 00000097H
  00405	57		 push	 edi
  00406	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0040b	83 c4 08	 add	 esp, 8
  0040e	3c 01		 cmp	 al, 1
  00410	74 12		 je	 SHORT $LN20@GetAttackD
  00412	68 98 00 00 00	 push	 152			; 00000098H
  00417	57		 push	 edi
  00418	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0041d	83 c4 08	 add	 esp, 8
  00420	3c 01		 cmp	 al, 1
  00422	75 79		 jne	 SHORT $LN58@GetAttackD
$LN20@GetAttackD:

; 4336 : 				gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER4) == TRUE )
; 4337 : 			{
; 4338 : 				float adddmgperc = (float)gObjGetTotalValueOfEffect(lpObj,31);

  00424	6a 1f		 push	 31			; 0000001fH
  00426	57		 push	 edi
  00427	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  0042c	83 c4 08	 add	 esp, 8
  0042f	66 0f 6e d8	 movd	 xmm3, eax
  00433	0f 5b db	 cvtdq2ps xmm3, xmm3

; 4339 : 
; 4340 : 				if( lpObj->m_MPSkillOpt.MpsBerserkInc2 > 0.0f )

  00436	f3 0f 10 87 94
	07 00 00	 movss	 xmm0, DWORD PTR [edi+1940]
  0043e	0f 57 c9	 xorps	 xmm1, xmm1
  00441	0f 2f c1	 comiss	 xmm0, xmm1
  00444	76 04		 jbe	 SHORT $LN21@GetAttackD

; 4341 : 				{
; 4342 : 					adddmgperc += lpObj->m_MPSkillOpt.MpsBerserkInc2;

  00446	f3 0f 58 d8	 addss	 xmm3, xmm0
$LN21@GetAttackD:

; 4343 : 				}
; 4344 : 
; 4345 : 				fMagicDamageMin = ((lpObj->Energy + lpObj->AddEnergy)/9) * adddmgperc / 100;

  0044a	0f b7 b7 02 01
	00 00		 movzx	 esi, WORD PTR [edi+258]
  00451	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00458	03 f0		 add	 esi, eax
  0045a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0045f	f7 ee		 imul	 esi
  00461	d1 fa		 sar	 edx, 1
  00463	8b ca		 mov	 ecx, edx
  00465	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00468	03 ca		 add	 ecx, edx
  0046a	66 0f 6e d1	 movd	 xmm2, ecx
  0046e	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00471	f3 0f 59 d3	 mulss	 xmm2, xmm3
  00475	f3 0f 5e 15 00
	00 00 00	 divss	 xmm2, DWORD PTR __real@42c80000

; 4346 : 				fMagicDamageMax = ((lpObj->Energy + lpObj->AddEnergy)/4) * adddmgperc / 100;

  0047d	8b c6		 mov	 eax, esi
  0047f	99		 cdq
  00480	83 e2 03	 and	 edx, 3
  00483	03 c2		 add	 eax, edx
  00485	c1 f8 02	 sar	 eax, 2
  00488	66 0f 6e e0	 movd	 xmm4, eax
  0048c	0f 5b e4	 cvtdq2ps xmm4, xmm4
  0048f	f3 0f 59 e3	 mulss	 xmm4, xmm3
  00493	f3 0f 5e 25 00
	00 00 00	 divss	 xmm4, DWORD PTR __real@42c80000
  0049b	eb 0d		 jmp	 SHORT $LN19@GetAttackD
$LN58@GetAttackD:
  0049d	0f 57 c9	 xorps	 xmm1, xmm1
  004a0	f3 0f 10 55 d4	 movss	 xmm2, DWORD PTR _fMagicDamageMin$1$[ebp]
  004a5	f3 0f 10 65 d0	 movss	 xmm4, DWORD PTR _fMagicDamageMax$1$[ebp]
$LN19@GetAttackD:

; 4347 : 			}
; 4348 : 
; 4349 : 			if( lpObj->m_MPSkillOpt.MpsMagicMastery2 > 0.0f )

  004aa	f3 0f 10 9f 64
	07 00 00	 movss	 xmm3, DWORD PTR [edi+1892]
  004b2	0f 2f d9	 comiss	 xmm3, xmm1
  004b5	76 0b		 jbe	 SHORT $LN22@GetAttackD

; 4350 : 			{
; 4351 : 				fMagicDamageMin += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  004b7	0f 28 c3	 movaps	 xmm0, xmm3
  004ba	f3 0f 58 d0	 addss	 xmm2, xmm0

; 4352 : 				fMagicDamageMax += lpObj->m_MPSkillOpt.MpsMagicMastery2;

  004be	f3 0f 58 e3	 addss	 xmm4, xmm3
$LN22@GetAttackD:

; 4353 : 			}
; 4354 : 
; 4355 : 			if( lpObj->m_MPSkillOpt.MpsMinWizCurseInc > 0.0f )

  004c2	f3 0f 10 87 9c
	07 00 00	 movss	 xmm0, DWORD PTR [edi+1948]
  004ca	0f 2f c1	 comiss	 xmm0, xmm1
  004cd	76 04		 jbe	 SHORT $LN23@GetAttackD

; 4356 : 			{
; 4357 : 				fMagicDamageMin += lpObj->m_MPSkillOpt.MpsMinWizCurseInc;

  004cf	f3 0f 58 d0	 addss	 xmm2, xmm0
$LN23@GetAttackD:

; 4358 : 			}
; 4359 : 
; 4360 : 			damagemin = (int)(lpMagic->m_DamageMin + lpObj->m_MagicDamageMin + fMagicDamageMin);

  004d3	8b 87 48 06 00
	00		 mov	 eax, DWORD PTR [edi+1608]
  004d9	03 43 0c	 add	 eax, DWORD PTR [ebx+12]
  004dc	66 0f 6e c0	 movd	 xmm0, eax
  004e0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  004e3	f3 0f 58 c2	 addss	 xmm0, xmm2
  004e7	f3 0f 2c f0	 cvttss2si esi, xmm0
  004eb	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi

; 4361 : 			damagemax = (int)(lpMagic->m_DamageMax + lpObj->m_MagicDamageMax + fMagicDamageMax);

  004ee	8b 87 4c 06 00
	00		 mov	 eax, DWORD PTR [edi+1612]
  004f4	03 43 10	 add	 eax, DWORD PTR [ebx+16]
  004f7	66 0f 6e c0	 movd	 xmm0, eax
  004fb	0f 5b c0	 cvtdq2ps xmm0, xmm0
  004fe	f3 0f 58 c4	 addss	 xmm0, xmm4
  00502	f3 0f 2c d8	 cvttss2si ebx, xmm0

; 4362 : 
; 4363 : 			if( g_MasterSkillSystem.CheckMasterLevelSkill(lpMagic->m_Skill) )

  00506	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00509	ff 70 08	 push	 DWORD PTR [eax+8]
  0050c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00511	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00516	85 c0		 test	 eax, eax
  00518	74 3a		 je	 SHORT $LN24@GetAttackD

; 4364 : 			{
; 4365 : 				float fDamage = g_MasterSkillSystem.GetSkillAttackDamage(lpObj,lpMagic->m_Skill);

  0051a	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0051d	ff 70 08	 push	 DWORD PTR [eax+8]
  00520	57		 push	 edi
  00521	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00526	e8 00 00 00 00	 call	 ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
  0052b	d9 5d 18	 fstp	 DWORD PTR _fDamage$3[ebp]
  0052e	66 0f 6e c6	 movd	 xmm0, esi

; 4366 : 
; 4367 : 				damagemin += fDamage;

  00532	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00535	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _fDamage$3[ebp]
  0053a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0053e	f3 0f 2c f0	 cvttss2si esi, xmm0
  00542	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi
  00545	66 0f 6e c3	 movd	 xmm0, ebx

; 4368 : 				damagemax += fDamage;

  00549	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0054c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00550	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN24@GetAttackD:

; 4369 : 			}
; 4370 : 
; 4371 : 			if( lpObj->m_MPSkillOpt.MpsWingAttackIncrease > 0.0f )

  00554	f3 0f 10 8f 4c
	08 00 00	 movss	 xmm1, DWORD PTR [edi+2124]
  0055c	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@00000000
  00563	76 21		 jbe	 SHORT $LN25@GetAttackD
  00565	66 0f 6e c6	 movd	 xmm0, esi

; 4372 : 			{
; 4373 : 				damagemin += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  00569	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0056c	f3 0f 58 c1	 addss	 xmm0, xmm1
  00570	f3 0f 2c c0	 cvttss2si eax, xmm0
  00574	89 45 18	 mov	 DWORD PTR _damagemin$1$[ebp], eax
  00577	66 0f 6e c3	 movd	 xmm0, ebx

; 4374 : 				damagemax += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  0057b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0057e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00582	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN25@GetAttackD:

; 4375 : 			}
; 4376 : 	
; 4377 : 			CItem* Left = &lpObj->pInventory[0];

  00586	8b b7 c0 11 00
	00		 mov	 esi, DWORD PTR [edi+4544]
  0058c	89 75 d0	 mov	 DWORD PTR _Left$1$[ebp], esi

; 4378 : 
; 4379 : 			int Damage;
; 4380 : 	
; 4381 : 			if( Left->IsItem() )

  0058f	8b ce		 mov	 ecx, esi
  00591	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00596	85 c0		 test	 eax, eax
  00598	74 79		 je	 SHORT $LN55@GetAttackD

; 4382 : 			{
; 4383 : 				if( ( Left->m_Type >= ITEMGET(5,0) && Left->m_Type < ITEMGET(6,0) )
; 4384 : 					&& Left->m_IsValidItem )

  0059a	0f b7 46 06	 movzx	 eax, WORD PTR [esi+6]
  0059e	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  005a3	66 3b c1	 cmp	 ax, cx
  005a6	7c 6b		 jl	 SHORT $LN55@GetAttackD
  005a8	b9 00 0c 00 00	 mov	 ecx, 3072		; 00000c00H
  005ad	66 3b c1	 cmp	 ax, cx
  005b0	7d 61		 jge	 SHORT $LN55@GetAttackD
  005b2	80 be ac 00 00
	00 00		 cmp	 BYTE PTR [esi+172], 0
  005b9	74 58		 je	 SHORT $LN55@GetAttackD

; 4385 : 				{
; 4386 : 					Damage = Left->m_Magic / 2 + Left->m_Level * 2;

  005bb	0f b7 4e 20	 movzx	 ecx, WORD PTR [esi+32]
  005bf	d1 e9		 shr	 ecx, 1
  005c1	0f bf 46 08	 movsx	 eax, WORD PTR [esi+8]
  005c5	8d 34 41	 lea	 esi, DWORD PTR [ecx+eax*2]
  005c8	66 0f 6e c6	 movd	 xmm0, esi

; 4387 : 					Damage -= (WORD)(Left->m_CurrentDurabilityState * Damage);	// #formula

  005cc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  005cf	8b 45 d0	 mov	 eax, DWORD PTR _Left$1$[ebp]
  005d2	f3 0f 59 80 a4
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+164]
  005da	f3 0f 2c c0	 cvttss2si eax, xmm0
  005de	0f b7 c0	 movzx	 eax, ax
  005e1	2b f0		 sub	 esi, eax

; 4388 : 	
; 4389 : 					damagemin += damagemin * Damage / 100;

  005e3	8b ce		 mov	 ecx, esi
  005e5	0f af 4d 18	 imul	 ecx, DWORD PTR _damagemin$1$[ebp]
  005e9	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  005ee	f7 e9		 imul	 ecx
  005f0	c1 fa 05	 sar	 edx, 5
  005f3	8b c2		 mov	 eax, edx
  005f5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005f8	03 c2		 add	 eax, edx
  005fa	01 45 18	 add	 DWORD PTR _damagemin$1$[ebp], eax

; 4390 : 					damagemax += damagemax * Damage / 100;

  005fd	0f af f3	 imul	 esi, ebx
  00600	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00605	f7 ee		 imul	 esi
  00607	c1 fa 05	 sar	 edx, 5
  0060a	8b c2		 mov	 eax, edx
  0060c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0060f	03 c2		 add	 eax, edx
  00611	03 d8		 add	 ebx, eax
$LN55@GetAttackD:

; 4391 : 				}
; 4392 : 			}
; 4393 : 
; 4394 : 			ad += gObjGetTotalValueOfEffect(lpObj,15);

  00613	6a 0f		 push	 15			; 0000000fH
$LN60@GetAttackD:
  00615	57		 push	 edi
  00616	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  0061b	89 45 d0	 mov	 DWORD PTR _ad$[ebp], eax
  0061e	83 c4 08	 add	 esp, 8

; 4395 : 		}
; 4396 : 		break;
; 4397 : 	}
; 4398 : 
; 4399 : 	damagemin += lpObj->SetOpAddSkillAttack;

  00621	0f bf 87 b2 14
	00 00		 movsx	 eax, WORD PTR [edi+5298]
  00628	8b 75 18	 mov	 esi, DWORD PTR _damagemin$1$[ebp]
  0062b	03 f0		 add	 esi, eax

; 4400 : 	damagemax += lpObj->SetOpAddSkillAttack;

  0062d	03 d8		 add	 ebx, eax

; 4401 : 
; 4402 : 	int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  0062f	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00632	ff 70 08	 push	 DWORD PTR [eax+8]
  00635	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0063a	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 4403 : 
; 4404 : 	if ( SkillAttr != -1 )

  0063f	83 f8 ff	 cmp	 eax, -1
  00642	74 40		 je	 SHORT $LN30@GetAttackD

; 4405 : 	{
; 4406 : 		if( (lpObj->Authority & 32) == 32 &&

  00644	f6 87 bc 01 00
	00 20		 test	 BYTE PTR [edi+444], 32	; 00000020H
  0064b	74 2b		 je	 SHORT $LN29@GetAttackD
  0064d	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  00653	ba 2a 1a 00 00	 mov	 edx, 6698		; 00001a2aH
  00658	66 39 91 4e 08
	00 00		 cmp	 WORD PTR [ecx+2126], dx
  0065f	74 09		 je	 SHORT $LN31@GetAttackD
  00661	66 39 91 22 09
	00 00		 cmp	 WORD PTR [ecx+2338], dx
  00668	75 0e		 jne	 SHORT $LN29@GetAttackD
$LN31@GetAttackD:

; 4407 : 			(lpObj->pInventory[10].m_Type == ITEMGET(13,42) ||
; 4408 : 			lpObj->pInventory[11].m_Type == ITEMGET(13,42) ) )
; 4409 : 		{
; 4410 : 			damagemin += 0xFF;

  0066a	81 c6 ff 00 00
	00		 add	 esi, 255		; 000000ffH

; 4411 : 			damagemax += 0xFF;

  00670	81 c3 ff 00 00
	00		 add	 ebx, 255		; 000000ffH

; 4412 : 		}
; 4413 : 		else

  00676	eb 0c		 jmp	 SHORT $LN30@GetAttackD
$LN29@GetAttackD:

; 4414 : 		{
; 4415 : 			damagemin += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00678	0f b6 84 38 9d
	08 00 00	 movzx	 eax, BYTE PTR [eax+edi+2205]
  00680	03 f0		 add	 esi, eax

; 4416 : 			damagemax += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00682	03 d8		 add	 ebx, eax
$LN30@GetAttackD:

; 4417 : 		}
; 4418 : 	}
; 4419 : 
; 4420 : 
; 4421 : 	damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00684	0f bf 87 38 24
	00 00		 movsx	 eax, WORD PTR [edi+9272]
  0068b	03 f0		 add	 esi, eax
  0068d	89 75 18	 mov	 DWORD PTR _damagemin$1$[ebp], esi

; 4422 : 	damagemax += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00690	03 d8		 add	 ebx, eax

; 4423 : 
; 4424 : #if (ENABLETEST_MUUN == 1) 
; 4425 : 		int nMuunItemEffectValue = 0;
; 4426 : 		if (g_CMuunSystem.GetMuunItemValueOfOptType(lpObj, 5, &nMuunItemEffectValue, 0)) {
; 4427 : 			damagemin += nMuunItemEffectValue;
; 4428 : 			damagemax += nMuunItemEffectValue;
; 4429 : 		}
; 4430 : #endif
; 4431 : 
; 4432 : 	int subd = damagemax - damagemin;

  00692	8b c3		 mov	 eax, ebx
  00694	2b c6		 sub	 eax, esi
  00696	89 45 d8	 mov	 DWORD PTR _subd$[ebp], eax

; 4433 : 
; 4434 : 	__try

  00699	9b		 fwait
  0069a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 4437 : 		{
; 4438 : 			skilldamage = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  006a1	e8 00 00 00 00	 call	 _rand
  006a6	8b 4d d8	 mov	 ecx, DWORD PTR _subd$[ebp]
  006a9	99		 cdq
  006aa	41		 inc	 ecx
  006ab	f7 f9		 idiv	 ecx

; 4435 : 	{
; 4436 : 		if ( bIsOnDuel )

  006ad	83 7d e0 00	 cmp	 DWORD PTR _bIsOnDuel$1$[ebp], 0
  006b1	74 22		 je	 SHORT $LN33@GetAttackD

; 4437 : 		{
; 4438 : 			skilldamage = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  006b3	03 d6		 add	 edx, esi
  006b5	8b ca		 mov	 ecx, edx
  006b7	c1 e1 04	 shl	 ecx, 4
  006ba	2b ca		 sub	 ecx, edx
  006bc	c1 e1 02	 shl	 ecx, 2
  006bf	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  006c4	f7 e9		 imul	 ecx
  006c6	c1 fa 05	 sar	 edx, 5
  006c9	8b f2		 mov	 esi, edx
  006cb	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  006ce	03 f2		 add	 esi, edx
  006d0	2b 75 0c	 sub	 esi, DWORD PTR _targetDefense$[ebp]

; 4439 : 		}
; 4440 : 		else

  006d3	eb 08		 jmp	 SHORT $LN61@GetAttackD
$LN33@GetAttackD:

; 4441 : 		{
; 4442 : 			skilldamage = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  006d5	8b f2		 mov	 esi, edx
  006d7	2b 75 0c	 sub	 esi, DWORD PTR _targetDefense$[ebp]
  006da	03 75 18	 add	 esi, DWORD PTR _damagemin$1$[ebp]
$LN61@GetAttackD:
  006dd	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4443 : 		}
; 4444 : 
; 4445 : 		if ( lpObj->m_CriticalDamage > 0 )

  006e0	83 bf 9c 06 00
	00 00		 cmp	 DWORD PTR [edi+1692], 0
  006e7	0f 8e b1 00 00
	00		 jle	 $LN57@GetAttackD

; 4446 : 		{
; 4447 : 			if ( (rand()%100) < lpObj->m_CriticalDamage )

  006ed	e8 00 00 00 00	 call	 _rand
  006f2	99		 cdq
  006f3	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  006f8	f7 f9		 idiv	 ecx
  006fa	3b 97 9c 06 00
	00		 cmp	 edx, DWORD PTR [edi+1692]
  00700	0f 8d 98 00 00
	00		 jge	 $LN57@GetAttackD

; 4448 : 			{
; 4449 : 				if ( bIsOnDuel )

  00706	83 7d e0 00	 cmp	 DWORD PTR _bIsOnDuel$1$[ebp], 0
  0070a	74 1d		 je	 SHORT $LN37@GetAttackD

; 4450 : 				{
; 4451 : 					skilldamage = damagemax * 60 / 100 - targetDefense;

  0070c	8b cb		 mov	 ecx, ebx
  0070e	c1 e1 04	 shl	 ecx, 4
  00711	2b cb		 sub	 ecx, ebx
  00713	c1 e1 02	 shl	 ecx, 2
  00716	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0071b	f7 e9		 imul	 ecx
  0071d	c1 fa 05	 sar	 edx, 5
  00720	8b f2		 mov	 esi, edx
  00722	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00725	03 f2		 add	 esi, edx

; 4452 : 				}
; 4453 : 				else

  00727	eb 02		 jmp	 SHORT $LN62@GetAttackD
$LN37@GetAttackD:

; 4454 : 				{
; 4455 : 					skilldamage = damagemax - targetDefense;

  00729	8b f3		 mov	 esi, ebx
$LN62@GetAttackD:
  0072b	2b 75 0c	 sub	 esi, DWORD PTR _targetDefense$[ebp]
  0072e	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4456 : 				}
; 4457 : 
; 4458 : 				skilldamage += lpObj->SetOpAddCriticalDamage;

  00731	0f bf 87 b8 14
	00 00		 movsx	 eax, WORD PTR [edi+5304]
  00738	03 f0		 add	 esi, eax
  0073a	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4459 : 				skilldamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  0073d	0f bf 87 36 24
	00 00		 movsx	 eax, WORD PTR [edi+9270]
  00744	03 f0		 add	 esi, eax
  00746	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4460 : 
; 4461 : 				int AddCriticalDmg = 0;

  00749	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _AddCriticalDmg$2[ebp], 0

; 4462 : 				gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG,&AddCriticalDmg,0);

  00750	6a 00		 push	 0
  00752	8d 45 10	 lea	 eax, DWORD PTR _AddCriticalDmg$2[ebp]
  00755	50		 push	 eax
  00756	6a 05		 push	 5
  00758	57		 push	 edi
  00759	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 4463 : 				skilldamage += AddCriticalDmg;

  0075e	03 75 10	 add	 esi, DWORD PTR _AddCriticalDmg$2[ebp]
  00761	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4464 : 				gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG2,&AddCriticalDmg,0);

  00764	6a 00		 push	 0
  00766	8d 45 10	 lea	 eax, DWORD PTR _AddCriticalDmg$2[ebp]
  00769	50		 push	 eax
  0076a	68 94 00 00 00	 push	 148			; 00000094H
  0076f	57		 push	 edi
  00770	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 4465 : 				skilldamage += AddCriticalDmg;

  00775	03 75 10	 add	 esi, DWORD PTR _AddCriticalDmg$2[ebp]
  00778	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4466 : 				gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG3,&AddCriticalDmg,0);

  0077b	6a 00		 push	 0
  0077d	8d 45 10	 lea	 eax, DWORD PTR _AddCriticalDmg$2[ebp]
  00780	50		 push	 eax
  00781	68 95 00 00 00	 push	 149			; 00000095H
  00786	57		 push	 edi
  00787	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  0078c	83 c4 30	 add	 esp, 48			; 00000030H

; 4467 : 				skilldamage += AddCriticalDmg;

  0078f	03 75 10	 add	 esi, DWORD PTR _AddCriticalDmg$2[ebp]
  00792	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4468 : 				effect = 3;

  00795	8b 45 14	 mov	 eax, DWORD PTR _effect$[ebp]
  00798	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN57@GetAttackD:

; 4469 : 
; 4470 : #if (CUSTOM_EXOPT==1)
; 4471 : 				if( lpObj->m_CriticalDamageMul > 0 )
; 4472 : 				{
; 4473 : 					ad += ad * lpObj->m_CriticalDamageMul / 100;
; 4474 : 				}
; 4475 : #endif
; 4476 : 			}
; 4477 : 		}
; 4478 : 
; 4479 : 		if ( lpObj->m_ExcelentDamage > 0 )

  0079e	83 bf a0 06 00
	00 00		 cmp	 DWORD PTR [edi+1696], 0
  007a5	7e 71		 jle	 SHORT $LN40@GetAttackD

; 4480 : 		{
; 4481 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  007a7	e8 00 00 00 00	 call	 _rand
  007ac	99		 cdq
  007ad	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  007b2	f7 f9		 idiv	 ecx
  007b4	3b 97 a0 06 00
	00		 cmp	 edx, DWORD PTR [edi+1696]
  007ba	7d 5c		 jge	 SHORT $LN40@GetAttackD

; 4482 : 			{
; 4483 : 				if ( bIsOnDuel )

  007bc	83 7d e0 00	 cmp	 DWORD PTR _bIsOnDuel$1$[ebp], 0
  007c0	74 1d		 je	 SHORT $LN41@GetAttackD

; 4484 : 				{
; 4485 : 					skilldamage= damagemax * 60 / 100 - targetDefense;

  007c2	8b cb		 mov	 ecx, ebx
  007c4	c1 e1 04	 shl	 ecx, 4
  007c7	2b cb		 sub	 ecx, ebx
  007c9	c1 e1 02	 shl	 ecx, 2
  007cc	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  007d1	f7 e9		 imul	 ecx
  007d3	c1 fa 05	 sar	 edx, 5
  007d6	8b f2		 mov	 esi, edx
  007d8	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  007db	03 f2		 add	 esi, edx

; 4486 : 				}
; 4487 : 				else

  007dd	eb 02		 jmp	 SHORT $LN63@GetAttackD
$LN41@GetAttackD:

; 4488 : 				{
; 4489 : 					skilldamage = damagemax - targetDefense;

  007df	8b f3		 mov	 esi, ebx
$LN63@GetAttackD:
  007e1	2b 75 0c	 sub	 esi, DWORD PTR _targetDefense$[ebp]
  007e4	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4490 : 				}
; 4491 : 
; 4492 : 				skilldamage += damagemax * 20 / 100;

  007e7	8d 0c 9b	 lea	 ecx, DWORD PTR [ebx+ebx*4]
  007ea	c1 e1 02	 shl	 ecx, 2
  007ed	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  007f2	f7 e9		 imul	 ecx
  007f4	c1 fa 05	 sar	 edx, 5
  007f7	8b c2		 mov	 eax, edx
  007f9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  007fc	03 c2		 add	 eax, edx
  007fe	03 f0		 add	 esi, eax
  00800	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4493 : 				skilldamage += lpObj->SetOpAddExDamage;

  00803	0f bf 87 b4 14
	00 00		 movsx	 eax, WORD PTR [edi+5300]
  0080a	03 f0		 add	 esi, eax
  0080c	89 75 e4	 mov	 DWORD PTR _skilldamage$[ebp], esi

; 4494 : 
; 4495 : 				effect = 2;

  0080f	8b 45 14	 mov	 eax, DWORD PTR _effect$[ebp]
  00812	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$LN40@GetAttackD:

; 4496 : 
; 4497 : #if (CUSTOM_EXOPT==1)
; 4498 : 				if( lpObj->m_ExcelentDamageMul > 0 )
; 4499 : 				{
; 4500 : 					ad += ad * lpObj->m_ExcelentDamageMul / 100;
; 4501 : 				}
; 4502 : #endif
; 4503 : 			}
; 4504 : 		}
; 4505 : 	}

  00818	9b		 fwait
  00819	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00820	eb 1d		 jmp	 SHORT $LN50@GetAttackD
$LN47@GetAttackD:
$LN64@GetAttackD:

; 4506 : 	__except( subd=1, 1 )

  00822	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR _subd$[ebp], 1
  00829	b8 01 00 00 00	 mov	 eax, 1
$LN59@GetAttackD:
$LN49@GetAttackD:
  0082e	c3		 ret	 0
$LN48@GetAttackD:
  0082f	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 4496 : 
; 4497 : #if (CUSTOM_EXOPT==1)
; 4498 : 				if( lpObj->m_ExcelentDamageMul > 0 )
; 4499 : 				{
; 4500 : 					ad += ad * lpObj->m_ExcelentDamageMul / 100;
; 4501 : 				}
; 4502 : #endif
; 4503 : 			}
; 4504 : 		}
; 4505 : 	}

  00832	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00839	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0083c	8b 75 e4	 mov	 esi, DWORD PTR _skilldamage$[ebp]
$LN50@GetAttackD:

; 4507 : 	{
; 4508 : 
; 4509 : 	}
; 4510 : 
; 4511 : 	ad += gObjGetTotalValueOfEffect(lpObj,ADD_OPTION_ATTACK_DAMAGE);

  0083f	6a 02		 push	 2
  00841	57		 push	 edi
  00842	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  00847	83 c4 08	 add	 esp, 8

; 4512 : 	skilldamage += ad;

  0084a	03 45 d0	 add	 eax, DWORD PTR _ad$[ebp]
  0084d	03 f0		 add	 esi, eax

; 4513 : 
; 4514 : 	if ( lpObj->m_SkillAttack2 )

  0084f	83 bf 04 06 00
	00 00		 cmp	 DWORD PTR [edi+1540], 0
  00856	74 03		 je	 SHORT $LN43@GetAttackD

; 4515 : 	{
; 4516 : #ifdef __NOVUS__
; 4517 : 		skilldamage += 15 + lpObj->Level / 2;
; 4518 : #else
; 4519 : 		skilldamage += 10;

  00858	83 c6 0a	 add	 esi, 10			; 0000000aH
$LN43@GetAttackD:

; 4520 : #endif
; 4521 : 	}
; 4522 : 
; 4523 : 	if( lpObj->m_MPSkillOpt.MpsBerserkInc2 > 0.0f )

  0085b	f3 0f 10 8f 94
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1940]
  00863	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@00000000
  0086a	76 1b		 jbe	 SHORT $LN44@GetAttackD
  0086c	66 0f 6e c6	 movd	 xmm0, esi

; 4524 : 	{
; 4525 : 		skilldamage += skilldamage*lpObj->m_MPSkillOpt.MpsBerserkInc2/100.0f;

  00870	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00873	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00877	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  0087f	f3 0f 58 c8	 addss	 xmm1, xmm0
  00883	f3 0f 2c f1	 cvttss2si esi, xmm1
$LN44@GetAttackD:

; 4526 : 	}
; 4527 : 	
; 4528 : 	return skilldamage;

  00887	8b c6		 mov	 eax, esi

; 4529 : }

  00889	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  0088c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00893	59		 pop	 ecx
  00894	5f		 pop	 edi
  00895	5e		 pop	 esi
  00896	5b		 pop	 ebx
  00897	8b e5		 mov	 esp, ebp
  00899	5d		 pop	 ebp
  0089a	c2 14 00	 ret	 20			; 00000014H
?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z ENDP ; CObjAttack::GetAttackDamageSummoner
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z
_TEXT	SEGMENT
_lpObj$GSCopy$ = -112					; size = 4
_Staff$1$ = -108					; size = 4
_effect$GSCopy$1$ = -104				; size = 4
_subd$ = -100						; size = 4
_bIsOnDuel$2$ = -96					; size = 4
_nCritical$1$ = -92					; size = 4
_damagemin$1$ = -92					; size = 4
tv583 = -92						; size = 4
_fDamage$2 = -92					; size = 4
_ad$ = -88						; size = 4
_lpMagic$GSCopy$1$ = -84				; size = 4
_damagemax$1$ = -84					; size = 4
_AddCriticalDmg$3 = -84					; size = 4
_SkillHellFire2CountDamageTable$4 = -80			; size = 52
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_targetDefense$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_effect$ = 20						; size = 4
_bIsOnDuel$ = 24					; size = 4
?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z PROC ; CObjAttack::GetAttackDamageWizard, COMDAT
; _this$ = ecx

; 3966 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 e4	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00033	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00036	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00039	89 5d 90	 mov	 DWORD PTR _lpObj$GSCopy$[ebp], ebx
  0003c	8b 75 10	 mov	 esi, DWORD PTR _lpMagic$[ebp]
  0003f	89 75 ac	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], esi
  00042	8b 45 14	 mov	 eax, DWORD PTR _effect$[ebp]
  00045	89 45 98	 mov	 DWORD PTR _effect$GSCopy$1$[ebp], eax

; 3968 : 	{
; 3969 : 		if ( bIsOnDuel == TRUE )

  00048	8b 45 18	 mov	 eax, DWORD PTR _bIsOnDuel$[ebp]

; 3967 : 	if ( g_ShieldSystemOn == TRUE )

  0004b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 1 ; g_ShieldSystemOn
  00052	75 08		 jne	 SHORT $LN43@GetAttackD

; 3968 : 	{
; 3969 : 		if ( bIsOnDuel == TRUE )

  00054	33 c9		 xor	 ecx, ecx
  00056	83 f8 01	 cmp	 eax, 1
  00059	0f 44 c1	 cmove	 eax, ecx
$LN43@GetAttackD:
  0005c	89 45 a0	 mov	 DWORD PTR _bIsOnDuel$2$[ebp], eax

; 3970 : 		{
; 3971 : 			bIsOnDuel = FALSE;
; 3972 : 		}
; 3973 : 	}
; 3974 : 
; 3975 : 	int damagemin;
; 3976 : 	int damagemax;
; 3977 : 	int ad;
; 3978 : 
; 3979 : 	if ( lpMagic->m_Skill == AT_SKILL_EXPHELL || lpMagic->m_Skill == AT_MSKILL_DW_NOVA1 )

  0005f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00062	89 45 a4	 mov	 DWORD PTR tv583[ebp], eax
  00065	83 f8 28	 cmp	 eax, 40			; 00000028H
  00068	74 2b		 je	 SHORT $LN6@GetAttackD
  0006a	3d 88 01 00 00	 cmp	 eax, 392		; 00000188H
  0006f	74 24		 je	 SHORT $LN6@GetAttackD

; 4038 : 		}
; 4039 : 	}
; 4040 : 	else
; 4041 : 	{
; 4042 : 		ad = lpMagic->GetDamage();

  00071	8b ce		 mov	 ecx, esi
  00073	e8 00 00 00 00	 call	 ?GetDamage@CMagicInf@@QAEHXZ ; CMagicInf::GetDamage
  00078	89 45 a8	 mov	 DWORD PTR _ad$[ebp], eax

; 4043 : 
; 4044 : 
; 4045 : 		damagemin = lpMagic->m_DamageMin + lpObj->m_MagicDamageMin;

  0007b	8b bb 48 06 00
	00		 mov	 edi, DWORD PTR [ebx+1608]
  00081	03 7e 0c	 add	 edi, DWORD PTR [esi+12]

; 4046 : 		damagemax = lpMagic->m_DamageMax + lpObj->m_MagicDamageMax;

  00084	8b b3 4c 06 00
	00		 mov	 esi, DWORD PTR [ebx+1612]
  0008a	8b 45 ac	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0008d	03 70 10	 add	 esi, DWORD PTR [eax+16]

; 4047 : 
; 4048 : 		if( g_MasterSkillSystem.CheckMasterLevelSkill(lpMagic->m_Skill) )

  00090	ff 70 08	 push	 DWORD PTR [eax+8]

; 4049 : 		{
; 4050 : 			float fDamage = g_MasterSkillSystem.GetSkillAttackDamage(lpObj,lpMagic->m_Skill);
; 4051 : 
; 4052 : 			damagemin += fDamage;
; 4053 : 			damagemax += fDamage;
; 4054 : 		}
; 4055 : 
; 4056 : #if (ENABLETEST_MUUN == 1) 
; 4057 : 		int nMuunItemEffectValue = 0;
; 4058 : 		if (g_CMuunSystem.GetMuunItemValueOfOptType(lpObj, 5, &nMuunItemEffectValue, 0)) {
; 4059 : 			damagemin += nMuunItemEffectValue;
; 4060 : 			damagemax += nMuunItemEffectValue;
; 4061 : 		}
; 4062 : #endif
; 4063 : 
; 4064 : 		damagemin += lpObj->SetOpAddSkillAttack;
; 4065 : 		damagemax += lpObj->SetOpAddSkillAttack;
; 4066 : 
; 4067 : 		int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);
; 4068 : 
; 4069 : 		if ( SkillAttr != -1 )
; 4070 : 		{
; 4071 : 			if( (lpObj->Authority & 32) == 32 &&
; 4072 : 				(lpObj->pInventory[10].m_Type == ITEMGET(13,42) ||
; 4073 : 				lpObj->pInventory[11].m_Type == ITEMGET(13,42) ) )
; 4074 : 			{
; 4075 : 				damagemin += 0xFF;
; 4076 : 				damagemax += 0xFF;
; 4077 : 			}
; 4078 : 		}
; 4079 : 
; 4080 : 		damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;
; 4081 : 		damagemax += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00093	eb 6a		 jmp	 SHORT $LN54@GetAttackD
$LN6@GetAttackD:
  00095	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000063000000320000001400000000
  0009c	0f 11 45 b0	 movups	 XMMWORD PTR _SkillHellFire2CountDamageTable$4[ebp], xmm0
  000a0	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000001a900000145000000e1000000a0
  000a7	0f 11 45 c0	 movups	 XMMWORD PTR _SkillHellFire2CountDamageTable$4[ebp+16], xmm0
  000ab	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@0000044200000370000002bc00000226
  000b2	0f 11 45 d0	 movups	 XMMWORD PTR _SkillHellFire2CountDamageTable$4[ebp+32], xmm0

; 3980 : 	{
; 3981 : 		if ( lpObj->SkillHellFire2Count >= 0 )
; 3982 : 		{
; 3983 : 			int SkillHellFire2CountDamageTable[13] =
; 3984 : 			{
; 3985 : 				0,	20,	50,	99,	160,
; 3986 : 				225,	325,	425,	550,	700,
; 3987 : 				880,	1090,	1320

  000b6	c7 45 e0 28 05
	00 00		 mov	 DWORD PTR _SkillHellFire2CountDamageTable$4[ebp+48], 1320 ; 00000528H

; 3988 : 			};
; 3989 : 			int CountDamage;
; 3990 : 
; 3991 : 			if ( lpObj->SkillHellFire2Count > 12 )

  000bd	8a 83 a9 14 00
	00		 mov	 al, BYTE PTR [ebx+5289]
  000c3	3c 0c		 cmp	 al, 12			; 0000000cH
  000c5	76 04		 jbe	 SHORT $LN8@GetAttackD

; 3992 : 			{
; 3993 : 				CountDamage = 0;

  000c7	33 f6		 xor	 esi, esi

; 3994 : 			}
; 3995 : 			else

  000c9	eb 07		 jmp	 SHORT $LN9@GetAttackD
$LN8@GetAttackD:

; 3996 : 			{
; 3997 : 				CountDamage = SkillHellFire2CountDamageTable[lpObj->SkillHellFire2Count];

  000cb	0f b6 c0	 movzx	 eax, al
  000ce	8b 74 85 b0	 mov	 esi, DWORD PTR _SkillHellFire2CountDamageTable$4[ebp+eax*4]
$LN9@GetAttackD:

; 3998 : 			}
; 3999 : 
; 4000 : 			ad = ( lpObj->Strength + lpObj->AddStrength ) / 2 + CountDamage;

  000d2	0f b7 83 fc 00
	00 00		 movzx	 eax, WORD PTR [ebx+252]
  000d9	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  000e0	03 c1		 add	 eax, ecx
  000e2	99		 cdq
  000e3	2b c2		 sub	 eax, edx
  000e5	d1 f8		 sar	 eax, 1
  000e7	03 c6		 add	 eax, esi
  000e9	89 45 a8	 mov	 DWORD PTR _ad$[ebp], eax

; 4001 : 			damagemin = ad + lpObj->m_MagicDamageMin;

  000ec	8b bb 48 06 00
	00		 mov	 edi, DWORD PTR [ebx+1608]
  000f2	03 f8		 add	 edi, eax

; 4002 : 			damagemax = ad + lpObj->m_MagicDamageMax;

  000f4	8b b3 4c 06 00
	00		 mov	 esi, DWORD PTR [ebx+1612]
  000fa	03 f0		 add	 esi, eax

; 4003 : 
; 4004 : 			if( g_MasterSkillSystem.CheckMasterLevelSkill(lpMagic->m_Skill) )

  000fc	ff 75 a4	 push	 DWORD PTR tv583[ebp]
$LN54@GetAttackD:
  000ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00104	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00109	85 c0		 test	 eax, eax
  0010b	74 34		 je	 SHORT $LN10@GetAttackD

; 4005 : 			{
; 4006 : 				float fDamage = g_MasterSkillSystem.GetSkillAttackDamage(lpObj,lpMagic->m_Skill);

  0010d	8b 45 ac	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00110	ff 70 08	 push	 DWORD PTR [eax+8]
  00113	53		 push	 ebx
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00119	e8 00 00 00 00	 call	 ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
  0011e	66 0f 6e c7	 movd	 xmm0, edi
  00122	d9 5d a4	 fstp	 DWORD PTR _fDamage$2[ebp]

; 4007 : 
; 4008 : 				damagemin += fDamage;

  00125	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00128	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _fDamage$2[ebp]
  0012d	f3 0f 2c f8	 cvttss2si edi, xmm0
  00131	66 0f 6e c6	 movd	 xmm0, esi

; 4009 : 				damagemax += fDamage;

  00135	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00138	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR _fDamage$2[ebp]
  0013d	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN10@GetAttackD:

; 4010 : 			}
; 4011 : 
; 4012 : #if (ENABLETEST_MUUN == 1) 
; 4013 : 			int nMuunItemEffectValue = 0;
; 4014 : 			if (g_CMuunSystem.GetMuunItemValueOfOptType(lpObj, 5, &nMuunItemEffectValue, 0)) {
; 4015 : 				damagemin += nMuunItemEffectValue;
; 4016 : 				damagemax += nMuunItemEffectValue;
; 4017 : 			}
; 4018 : #endif
; 4019 : 
; 4020 : 			damagemin += lpObj->SetOpAddSkillAttack;

  00141	0f bf 83 b2 14
	00 00		 movsx	 eax, WORD PTR [ebx+5298]
  00148	03 f8		 add	 edi, eax

; 4021 : 			damagemax += lpObj->SetOpAddSkillAttack;

  0014a	03 f0		 add	 esi, eax

; 4022 : 
; 4023 : 			int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  0014c	8b 45 ac	 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0014f	ff 70 08	 push	 DWORD PTR [eax+8]
  00152	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00157	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 4024 : 
; 4025 : 			if ( SkillAttr != -1 )

  0015c	83 f8 ff	 cmp	 eax, -1
  0015f	74 32		 je	 SHORT $LN12@GetAttackD

; 4026 : 			{
; 4027 : 				if( (lpObj->Authority & 32) == 32 &&

  00161	f6 83 bc 01 00
	00 20		 test	 BYTE PTR [ebx+444], 32	; 00000020H
  00168	74 29		 je	 SHORT $LN12@GetAttackD
  0016a	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  00170	b8 2a 1a 00 00	 mov	 eax, 6698		; 00001a2aH
  00175	66 39 81 4e 08
	00 00		 cmp	 WORD PTR [ecx+2126], ax
  0017c	74 09		 je	 SHORT $LN13@GetAttackD
  0017e	66 39 81 22 09
	00 00		 cmp	 WORD PTR [ecx+2338], ax
  00185	75 0c		 jne	 SHORT $LN12@GetAttackD
$LN13@GetAttackD:

; 4028 : 					(lpObj->pInventory[10].m_Type == ITEMGET(13,42) ||
; 4029 : 					lpObj->pInventory[11].m_Type == ITEMGET(13,42) ) )
; 4030 : 				{
; 4031 : 					damagemin += 0xFF;

  00187	81 c7 ff 00 00
	00		 add	 edi, 255		; 000000ffH

; 4032 : 					damagemax += 0xFF;

  0018d	81 c6 ff 00 00
	00		 add	 esi, 255		; 000000ffH
$LN12@GetAttackD:

; 4033 : 				}
; 4034 : 			}
; 4035 : 
; 4036 : 			damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00193	0f bf 83 38 24
	00 00		 movsx	 eax, WORD PTR [ebx+9272]
  0019a	03 f8		 add	 edi, eax

; 4037 : 			damagemax += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  0019c	03 f0		 add	 esi, eax
  0019e	89 75 ac	 mov	 DWORD PTR _damagemax$1$[ebp], esi

; 4033 : 				}
; 4034 : 			}
; 4035 : 
; 4036 : 			damagemin += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  001a1	89 7d a4	 mov	 DWORD PTR _damagemin$1$[ebp], edi

; 4082 : 	}
; 4083 : 
; 4084 : 	if( lpObj->m_MPSkillOpt.MpsWingAttackIncrease > 0.0f )

  001a4	f3 0f 10 8b 4c
	08 00 00	 movss	 xmm1, DWORD PTR [ebx+2124]
  001ac	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@00000000
  001b3	76 24		 jbe	 SHORT $LN18@GetAttackD
  001b5	66 0f 6e c7	 movd	 xmm0, edi

; 4085 : 	{
; 4086 : 		damagemin += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  001b9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001bc	f3 0f 58 c1	 addss	 xmm0, xmm1
  001c0	f3 0f 2c f8	 cvttss2si edi, xmm0
  001c4	89 7d a4	 mov	 DWORD PTR _damagemin$1$[ebp], edi
  001c7	66 0f 6e c6	 movd	 xmm0, esi

; 4087 : 		damagemax += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  001cb	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001ce	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d2	f3 0f 2c f0	 cvttss2si esi, xmm0
  001d6	89 75 ac	 mov	 DWORD PTR _damagemax$1$[ebp], esi
$LN18@GetAttackD:

; 4088 : 	}
; 4089 : 
; 4090 : 	CItem * Staff = &lpObj->pInventory[0];

  001d9	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  001df	89 4d 94	 mov	 DWORD PTR _Staff$1$[ebp], ecx

; 4091 : 
; 4092 : 	if ( Staff->IsItem() )

  001e2	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  001e7	85 c0		 test	 eax, eax
  001e9	0f 84 a2 00 00
	00		 je	 $LN44@GetAttackD

; 4093 : 	{
; 4094 : 		if ( (Staff->m_Type >= ITEMGET(5,0) && Staff->m_Type < ITEMGET(6,0) ) ||
; 4095 : 			 Staff->m_Type == ITEMGET(0,30) ||
; 4096 : 			 Staff->m_Type == ITEMGET(0,31) ||
; 4097 : 			 Staff->m_Type == ITEMGET(0,21) ||
; 4098 : 			 Staff->m_Type == ITEMGET(0,23) ||
; 4099 : 			 Staff->m_Type == ITEMGET(0,25) ||

  001ef	8b 55 94	 mov	 edx, DWORD PTR _Staff$1$[ebp]
  001f2	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  001f6	b9 00 0a 00 00	 mov	 ecx, 2560		; 00000a00H
  001fb	66 3b c1	 cmp	 ax, cx
  001fe	7c 0a		 jl	 SHORT $LN22@GetAttackD
  00200	b9 00 0c 00 00	 mov	 ecx, 3072		; 00000c00H
  00205	66 3b c1	 cmp	 ax, cx
  00208	7c 24		 jl	 SHORT $LN21@GetAttackD
$LN22@GetAttackD:
  0020a	66 83 f8 1e	 cmp	 ax, 30			; 0000001eH
  0020e	74 1e		 je	 SHORT $LN21@GetAttackD
  00210	66 83 f8 1f	 cmp	 ax, 31			; 0000001fH
  00214	74 18		 je	 SHORT $LN21@GetAttackD
  00216	66 83 f8 15	 cmp	 ax, 21			; 00000015H
  0021a	74 12		 je	 SHORT $LN21@GetAttackD
  0021c	66 83 f8 17	 cmp	 ax, 23			; 00000017H
  00220	74 0c		 je	 SHORT $LN21@GetAttackD
  00222	66 83 f8 19	 cmp	 ax, 25			; 00000019H
  00226	74 06		 je	 SHORT $LN21@GetAttackD
  00228	66 83 f8 1c	 cmp	 ax, 28			; 0000001cH
  0022c	75 63		 jne	 SHORT $LN44@GetAttackD
$LN21@GetAttackD:

; 4100 : 			 Staff->m_Type == ITEMGET(0,28) )
; 4101 : 		{
; 4102 : 			if ( Staff->m_IsValidItem  )

  0022e	80 ba ac 00 00
	00 00		 cmp	 BYTE PTR [edx+172], 0
  00235	74 5a		 je	 SHORT $LN44@GetAttackD

; 4103 : 			{
; 4104 : 				int damage = Staff->m_Magic / 2 + Staff->m_Level * 2;	// #formula

  00237	0f b7 4a 20	 movzx	 ecx, WORD PTR [edx+32]
  0023b	d1 e9		 shr	 ecx, 1
  0023d	0f bf 42 08	 movsx	 eax, WORD PTR [edx+8]
  00241	8d 34 41	 lea	 esi, DWORD PTR [ecx+eax*2]
  00244	66 0f 6e c6	 movd	 xmm0, esi

; 4105 : 				damage -= (WORD)(Staff->m_CurrentDurabilityState * damage);	// #formula

  00248	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0024b	f3 0f 59 82 a4
	00 00 00	 mulss	 xmm0, DWORD PTR [edx+164]
  00253	f3 0f 2c c0	 cvttss2si eax, xmm0
  00257	0f b7 c0	 movzx	 eax, ax
  0025a	2b f0		 sub	 esi, eax

; 4106 : 
; 4107 : 				damagemin += damagemin * damage / 100;	// #formula

  0025c	8b ce		 mov	 ecx, esi
  0025e	0f af cf	 imul	 ecx, edi
  00261	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00266	f7 e9		 imul	 ecx
  00268	c1 fa 05	 sar	 edx, 5
  0026b	8b c2		 mov	 eax, edx
  0026d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00270	03 c2		 add	 eax, edx
  00272	03 f8		 add	 edi, eax
  00274	89 7d a4	 mov	 DWORD PTR _damagemin$1$[ebp], edi

; 4108 : 				damagemax += damagemax * damage / 100;	// #formula

  00277	0f af 75 ac	 imul	 esi, DWORD PTR _damagemax$1$[ebp]
  0027b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00280	f7 ee		 imul	 esi
  00282	c1 fa 05	 sar	 edx, 5
  00285	8b c2		 mov	 eax, edx
  00287	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0028a	03 c2		 add	 eax, edx
  0028c	8b 75 ac	 mov	 esi, DWORD PTR _damagemax$1$[ebp]
  0028f	03 f0		 add	 esi, eax
$LN44@GetAttackD:

; 4109 : 			}
; 4110 : 		}
; 4111 : 	}
; 4112 : 
; 4113 : 	int subd = damagemax - damagemin;

  00291	8b c6		 mov	 eax, esi
  00293	2b c7		 sub	 eax, edi
  00295	89 45 9c	 mov	 DWORD PTR _subd$[ebp], eax

; 4114 : 
; 4115 : 	__try

  00298	9b		 fwait
  00299	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 4118 : 		{
; 4119 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  002a0	e8 00 00 00 00	 call	 _rand
  002a5	8b 4d 9c	 mov	 ecx, DWORD PTR _subd$[ebp]
  002a8	99		 cdq
  002a9	41		 inc	 ecx
  002aa	f7 f9		 idiv	 ecx

; 4116 : 	{
; 4117 : 		if ( bIsOnDuel )

  002ac	83 7d a0 00	 cmp	 DWORD PTR _bIsOnDuel$2$[ebp], 0
  002b0	74 22		 je	 SHORT $LN25@GetAttackD

; 4118 : 		{
; 4119 : 			ad = ( damagemin + (rand()%(subd+1)) ) * 60 / 100 - targetDefense;	// #formula

  002b2	03 d7		 add	 edx, edi
  002b4	8b ca		 mov	 ecx, edx
  002b6	c1 e1 04	 shl	 ecx, 4
  002b9	2b ca		 sub	 ecx, edx
  002bb	c1 e1 02	 shl	 ecx, 2
  002be	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002c3	f7 e9		 imul	 ecx
  002c5	c1 fa 05	 sar	 edx, 5
  002c8	8b fa		 mov	 edi, edx
  002ca	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  002cd	03 fa		 add	 edi, edx
  002cf	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]

; 4120 : 		}
; 4121 : 		else

  002d2	eb 08		 jmp	 SHORT $LN55@GetAttackD
$LN25@GetAttackD:

; 4122 : 		{
; 4123 : 			ad = ( damagemin + (rand()%(subd+1)) ) - targetDefense;

  002d4	8b fa		 mov	 edi, edx
  002d6	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  002d9	03 7d a4	 add	 edi, DWORD PTR _damagemin$1$[ebp]
$LN55@GetAttackD:
  002dc	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4124 : 		}
; 4125 : 
; 4126 : 		int nCritical = lpObj->m_CriticalDamage;

  002df	8b 83 9c 06 00
	00		 mov	 eax, DWORD PTR [ebx+1692]
  002e5	89 45 a4	 mov	 DWORD PTR _nCritical$1$[ebp], eax

; 4127 : 
; 4128 : 		if ( gObjCheckUsedBuffEffect(lpObj,BUFF_EXP_WIZARDRY3) == TRUE )

  002e8	68 8b 00 00 00	 push	 139			; 0000008bH
  002ed	53		 push	 ebx
  002ee	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  002f3	83 c4 08	 add	 esp, 8
  002f6	3c 01		 cmp	 al, 1
  002f8	75 19		 jne	 SHORT $LN46@GetAttackD
  002fa	66 0f 6e 45 a4	 movd	 xmm0, DWORD PTR _nCritical$1$[ebp]

; 4129 : 		{
; 4130 : 			nCritical += lpObj->m_MPSkillOpt.MpsExpWizardryCrit;

  002ff	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00302	f3 0f 58 83 d4
	07 00 00	 addss	 xmm0, DWORD PTR [ebx+2004]
  0030a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0030e	89 45 a4	 mov	 DWORD PTR _nCritical$1$[ebp], eax
  00311	eb 03		 jmp	 SHORT $LN27@GetAttackD
$LN46@GetAttackD:
  00313	8b 45 a4	 mov	 eax, DWORD PTR _nCritical$1$[ebp]
$LN27@GetAttackD:

; 4131 : 		}
; 4132 : 
; 4133 : 		if ( nCritical )

  00316	85 c0		 test	 eax, eax
  00318	0f 84 ae 00 00
	00		 je	 $LN45@GetAttackD

; 4134 : 		{
; 4135 : 			if ( (rand()%100) < nCritical )

  0031e	e8 00 00 00 00	 call	 _rand
  00323	99		 cdq
  00324	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00329	f7 f9		 idiv	 ecx
  0032b	3b 55 a4	 cmp	 edx, DWORD PTR _nCritical$1$[ebp]
  0032e	0f 8d 98 00 00
	00		 jge	 $LN45@GetAttackD

; 4136 : 			{
; 4137 : 				if ( bIsOnDuel )

  00334	83 7d a0 00	 cmp	 DWORD PTR _bIsOnDuel$2$[ebp], 0
  00338	74 1d		 je	 SHORT $LN30@GetAttackD

; 4138 : 				{
; 4139 : 					ad = damagemax * 60 / 100 - targetDefense;

  0033a	8b ce		 mov	 ecx, esi
  0033c	c1 e1 04	 shl	 ecx, 4
  0033f	2b ce		 sub	 ecx, esi
  00341	c1 e1 02	 shl	 ecx, 2
  00344	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00349	f7 e9		 imul	 ecx
  0034b	c1 fa 05	 sar	 edx, 5
  0034e	8b fa		 mov	 edi, edx
  00350	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00353	03 fa		 add	 edi, edx

; 4140 : 				}
; 4141 : 				else

  00355	eb 02		 jmp	 SHORT $LN56@GetAttackD
$LN30@GetAttackD:

; 4142 : 				{
; 4143 : 					ad = damagemax - targetDefense;

  00357	8b fe		 mov	 edi, esi
$LN56@GetAttackD:
  00359	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  0035c	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4144 : 				}
; 4145 : 
; 4146 : 				ad += lpObj->SetOpAddCriticalDamage;

  0035f	0f bf 83 b8 14
	00 00		 movsx	 eax, WORD PTR [ebx+5304]
  00366	03 f8		 add	 edi, eax
  00368	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4147 : 				ad += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  0036b	0f bf 83 36 24
	00 00		 movsx	 eax, WORD PTR [ebx+9270]
  00372	03 f8		 add	 edi, eax
  00374	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4148 : 
; 4149 : 				int AddCriticalDmg = 0;

  00377	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _AddCriticalDmg$3[ebp], 0

; 4150 : 				gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG,&AddCriticalDmg,0);

  0037e	6a 00		 push	 0
  00380	8d 45 ac	 lea	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  00383	50		 push	 eax
  00384	6a 05		 push	 5
  00386	53		 push	 ebx
  00387	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 4151 : 				ad += AddCriticalDmg;

  0038c	03 7d ac	 add	 edi, DWORD PTR _AddCriticalDmg$3[ebp]
  0038f	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4152 : 				gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG2,&AddCriticalDmg,0);

  00392	6a 00		 push	 0
  00394	8d 45 ac	 lea	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  00397	50		 push	 eax
  00398	68 94 00 00 00	 push	 148			; 00000094H
  0039d	53		 push	 ebx
  0039e	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 4153 : 				ad += AddCriticalDmg;

  003a3	03 7d ac	 add	 edi, DWORD PTR _AddCriticalDmg$3[ebp]
  003a6	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4154 : 				gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG3,&AddCriticalDmg,0);

  003a9	6a 00		 push	 0
  003ab	8d 45 ac	 lea	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  003ae	50		 push	 eax
  003af	68 95 00 00 00	 push	 149			; 00000095H
  003b4	53		 push	 ebx
  003b5	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  003ba	83 c4 30	 add	 esp, 48			; 00000030H

; 4155 : 				ad += AddCriticalDmg;

  003bd	03 7d ac	 add	 edi, DWORD PTR _AddCriticalDmg$3[ebp]
  003c0	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4156 : 
; 4157 : 				effect = 3;

  003c3	8b 45 98	 mov	 eax, DWORD PTR _effect$GSCopy$1$[ebp]
  003c6	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN45@GetAttackD:

; 4158 : 
; 4159 : #if (CUSTOM_EXOPT==1)
; 4160 : 				if( lpObj->m_CriticalDamageMul > 0 )
; 4161 : 				{
; 4162 : 					ad += ad * lpObj->m_CriticalDamageMul / 100;
; 4163 : 				}
; 4164 : #endif
; 4165 : 			}
; 4166 : 		}
; 4167 : 
; 4168 : 		if ( lpObj->m_ExcelentDamage > 0 )

  003cc	83 bb a0 06 00
	00 00		 cmp	 DWORD PTR [ebx+1696], 0
  003d3	7e 71		 jle	 SHORT $LN33@GetAttackD

; 4169 : 		{
; 4170 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  003d5	e8 00 00 00 00	 call	 _rand
  003da	99		 cdq
  003db	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  003e0	f7 f9		 idiv	 ecx
  003e2	3b 93 a0 06 00
	00		 cmp	 edx, DWORD PTR [ebx+1696]
  003e8	7d 5c		 jge	 SHORT $LN33@GetAttackD

; 4171 : 			{
; 4172 : 				if ( bIsOnDuel )

  003ea	83 7d a0 00	 cmp	 DWORD PTR _bIsOnDuel$2$[ebp], 0
  003ee	74 1d		 je	 SHORT $LN34@GetAttackD

; 4173 : 				{
; 4174 : 					ad = damagemax * 60 / 100 - targetDefense;

  003f0	8b ce		 mov	 ecx, esi
  003f2	c1 e1 04	 shl	 ecx, 4
  003f5	2b ce		 sub	 ecx, esi
  003f7	c1 e1 02	 shl	 ecx, 2
  003fa	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  003ff	f7 e9		 imul	 ecx
  00401	c1 fa 05	 sar	 edx, 5
  00404	8b fa		 mov	 edi, edx
  00406	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00409	03 fa		 add	 edi, edx

; 4175 : 				}
; 4176 : 				else

  0040b	eb 02		 jmp	 SHORT $LN57@GetAttackD
$LN34@GetAttackD:

; 4177 : 				{
; 4178 : 					ad = damagemax - targetDefense;

  0040d	8b fe		 mov	 edi, esi
$LN57@GetAttackD:
  0040f	2b 7d 0c	 sub	 edi, DWORD PTR _targetDefense$[ebp]
  00412	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4179 : 				}
; 4180 : 
; 4181 : 				ad += damagemax * 20 / 100;

  00415	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00418	c1 e1 02	 shl	 ecx, 2
  0041b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00420	f7 e9		 imul	 ecx
  00422	c1 fa 05	 sar	 edx, 5
  00425	8b c2		 mov	 eax, edx
  00427	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0042a	03 c2		 add	 eax, edx
  0042c	03 f8		 add	 edi, eax
  0042e	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4182 : 				ad += lpObj->SetOpAddExDamage;

  00431	0f bf 83 b4 14
	00 00		 movsx	 eax, WORD PTR [ebx+5300]
  00438	03 f8		 add	 edi, eax
  0043a	89 7d a8	 mov	 DWORD PTR _ad$[ebp], edi

; 4183 : 
; 4184 : 				effect = 2;

  0043d	8b 45 98	 mov	 eax, DWORD PTR _effect$GSCopy$1$[ebp]
  00440	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$LN33@GetAttackD:

; 4185 : 
; 4186 : #if (CUSTOM_EXOPT==1)
; 4187 : 				if( lpObj->m_ExcelentDamageMul > 0 )
; 4188 : 				{
; 4189 : 					ad += ad * lpObj->m_ExcelentDamageMul / 100;
; 4190 : 				}
; 4191 : #endif
; 4192 : 			}
; 4193 : 		}
; 4194 : 	}

  00446	9b		 fwait
  00447	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  0044e	eb 1d		 jmp	 SHORT $LN42@GetAttackD
$LN39@GetAttackD:
$LN58@GetAttackD:

; 4195 : 	__except ( subd=1, 1 )

  00450	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR _subd$[ebp], 1
  00457	b8 01 00 00 00	 mov	 eax, 1
$LN47@GetAttackD:
$LN41@GetAttackD:
  0045c	c3		 ret	 0
$LN40@GetAttackD:
  0045d	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 4185 : 
; 4186 : #if (CUSTOM_EXOPT==1)
; 4187 : 				if( lpObj->m_ExcelentDamageMul > 0 )
; 4188 : 				{
; 4189 : 					ad += ad * lpObj->m_ExcelentDamageMul / 100;
; 4190 : 				}
; 4191 : #endif
; 4192 : 			}
; 4193 : 		}
; 4194 : 	}

  00460	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00467	8b 7d a8	 mov	 edi, DWORD PTR _ad$[ebp]
  0046a	8b 5d 90	 mov	 ebx, DWORD PTR _lpObj$GSCopy$[ebp]
$LN42@GetAttackD:

; 4196 : 	{
; 4197 : 
; 4198 : 	}
; 4199 : 
; 4200 : 	int AddDamage = 0;
; 4201 : 
; 4202 : 	AddDamage = gObjGetTotalValueOfEffect(lpObj,ADD_OPTION_ATTACK_DAMAGE);

  0046d	6a 02		 push	 2
  0046f	53		 push	 ebx
  00470	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  00475	8b f0		 mov	 esi, eax

; 4203 : 	AddDamage += gObjGetTotalValueOfEffect(lpObj,15);

  00477	6a 0f		 push	 15			; 0000000fH
  00479	53		 push	 ebx
  0047a	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  0047f	83 c4 10	 add	 esp, 16			; 00000010H

; 4204 : 	ad+= AddDamage;

  00482	03 c6		 add	 eax, esi
  00484	03 f8		 add	 edi, eax

; 4205 : 
; 4206 : 	if ( lpObj->m_SkillAttack2 )

  00486	83 bb 04 06 00
	00 00		 cmp	 DWORD PTR [ebx+1540], 0
  0048d	74 03		 je	 SHORT $LN36@GetAttackD

; 4207 : 	{
; 4208 : #ifdef __NOVUS__
; 4209 : 		ad += 15 + lpObj->Level / 2;
; 4210 : #else
; 4211 : 		ad += 10;

  0048f	83 c7 0a	 add	 edi, 10			; 0000000aH
$LN36@GetAttackD:

; 4212 : #endif
; 4213 : 	}
; 4214 : 
; 4215 : 	return ad;

  00492	8b c7		 mov	 eax, edi

; 4216 : }

  00494	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00497	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0049e	59		 pop	 ecx
  0049f	5f		 pop	 edi
  004a0	5e		 pop	 esi
  004a1	5b		 pop	 ebx
  004a2	8b 4d e4	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a5	33 cd		 xor	 ecx, ebp
  004a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ac	8b e5		 mov	 esp, ebp
  004ae	5d		 pop	 ebp
  004af	c2 14 00	 ret	 20			; 00000014H
?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z ENDP ; CObjAttack::GetAttackDamageWizard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z
_TEXT	SEGMENT
_ReduceDamage$ = -76					; size = 4
_cDamage$2 = -72					; size = 4
_Right$ = -68						; size = 4
_Left$ = -64						; size = 4
_sub$ = -60						; size = 4
_bTwoHandWeapon$ = -56					; size = 4
_this$1$ = -52						; size = 4
_AddCriticalDmg$3 = -52					; size = 4
_AddDmgMax$4 = -48					; size = 4
_fDamage$5 = -48					; size = 4
_SkillRightMaxDamage$ = -44				; size = 4
_SkillLeftMinDamage$ = -40				; size = 4
_SkillLeftMaxDamage$ = -36				; size = 4
_SkillLeftMinDamage$1$ = -32				; size = 4
_SkillRightMinDamage$1$ = -28				; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_nAddAttackDamageLeft$1$ = 12				; size = 4
_targetDefense$ = 12					; size = 4
_effect$ = 16						; size = 4
_nAddAttackDamageRight$1$ = 20				; size = 4
_bIsOnDuel$ = 20					; size = 4
_AddDmgMin$6 = 24					; size = 4
_lpMagic$ = 24						; size = 4
?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z PROC ; CObjAttack::GetAttackDamage, COMDAT
; _this$ = ecx

; 3416 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp
  00033	89 4d cc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 3417 : 	if ( g_ShieldSystemOn == TRUE )

  00036	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 1 ; g_ShieldSystemOn
  0003d	75 0e		 jne	 SHORT $LN132@GetAttackD

; 3418 : 	{
; 3419 : 		if ( bIsOnDuel == TRUE )

  0003f	33 c9		 xor	 ecx, ecx
  00041	8b 45 14	 mov	 eax, DWORD PTR _bIsOnDuel$[ebp]
  00044	83 f8 01	 cmp	 eax, 1
  00047	0f 44 c1	 cmove	 eax, ecx
  0004a	89 45 14	 mov	 DWORD PTR _bIsOnDuel$[ebp], eax
$LN132@GetAttackD:

; 3420 : 		{
; 3421 : 			bIsOnDuel = FALSE;
; 3422 : 		}
; 3423 : 	}
; 3424 : 
; 3425 : 	int ad;
; 3426 : 	int sub;
; 3427 : 	int SkillRightMaxDamage =0;

  0004d	33 db		 xor	 ebx, ebx
  0004f	89 5d d4	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], ebx

; 3428 : 	int SkillRightMinDamage =0;

  00052	89 5d e4	 mov	 DWORD PTR _SkillRightMinDamage$1$[ebp], ebx

; 3429 : 	int SkillLeftMaxDamage =0;

  00055	33 f6		 xor	 esi, esi
  00057	89 75 dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], esi

; 3430 : 	int SkillLeftMinDamage =0;

  0005a	33 c0		 xor	 eax, eax
  0005c	89 45 e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], eax
  0005f	89 45 d8	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], eax

; 3431 : 	CItem * Right = &lpObj->pInventory[0];

  00062	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00065	8b 97 c0 11 00
	00		 mov	 edx, DWORD PTR [edi+4544]
  0006b	89 55 bc	 mov	 DWORD PTR _Right$[ebp], edx

; 3432 : 	CItem * Left = &lpObj->pInventory[1];

  0006e	8d 82 d4 00 00
	00		 lea	 eax, DWORD PTR [edx+212]
  00074	89 45 c0	 mov	 DWORD PTR _Left$[ebp], eax

; 3433 : 	BOOL bTwoHandWeapon = FALSE;

  00077	33 c0		 xor	 eax, eax
  00079	89 45 c8	 mov	 DWORD PTR _bTwoHandWeapon$[ebp], eax

; 3434 : 
; 3435 : 	if ( lpObj->Type == OBJ_MONSTER || lpObj->Type == OBJ_NPC )

  0007c	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  0007f	3c 02		 cmp	 al, 2
  00081	0f 84 a1 06 00
	00		 je	 $LN10@GetAttackD
  00087	3c 03		 cmp	 al, 3
  00089	0f 84 99 06 00
	00		 je	 $LN10@GetAttackD

; 3442 : 	}
; 3443 : 	else
; 3444 : 	{
; 3445 : 		int cDamage=0;

  0008f	89 5d b8	 mov	 DWORD PTR _cDamage$2[ebp], ebx

; 3446 : 
; 3447 : 		if ( lpObj->Class == CLASS_DARKLORD ||
; 3448 : 			 lpObj->Class == CLASS_KNIGHT   ||
; 3449 : 			 lpObj->Class == CLASS_MAGUMSA ||

  00092	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00099	83 f8 04	 cmp	 eax, 4
  0009c	74 0f		 je	 SHORT $LN12@GetAttackD
  0009e	83 f8 01	 cmp	 eax, 1
  000a1	74 0a		 je	 SHORT $LN12@GetAttackD
  000a3	83 f8 03	 cmp	 eax, 3
  000a6	74 05		 je	 SHORT $LN12@GetAttackD
  000a8	83 f8 06	 cmp	 eax, 6
  000ab	75 42		 jne	 SHORT $LN133@GetAttackD
$LN12@GetAttackD:

; 3450 : 			 lpObj->Class == CLASS_FIGHTER )
; 3451 : 		{
; 3452 : 			if ( Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(4,0) &&
; 3453 : 				 Left->m_Type >= ITEMGET(0,0) && Left->m_Type < ITEMGET(4,0) )

  000ad	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  000b1	66 85 c0	 test	 ax, ax
  000b4	78 39		 js	 SHORT $LN133@GetAttackD
  000b6	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  000bb	66 3b c1	 cmp	 ax, cx
  000be	7d 2f		 jge	 SHORT $LN133@GetAttackD
  000c0	8b 45 c0	 mov	 eax, DWORD PTR _Left$[ebp]
  000c3	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  000c7	66 85 c0	 test	 ax, ax
  000ca	78 23		 js	 SHORT $LN133@GetAttackD
  000cc	66 3b c1	 cmp	 ax, cx
  000cf	7d 1e		 jge	 SHORT $LN133@GetAttackD

; 3454 : 			{
; 3455 : 				if ( Right->m_IsValidItem && Left->m_IsValidItem )

  000d1	38 9a ac 00 00
	00		 cmp	 BYTE PTR [edx+172], bl
  000d7	74 16		 je	 SHORT $LN133@GetAttackD
  000d9	33 c9		 xor	 ecx, ecx
  000db	ba 01 00 00 00	 mov	 edx, 1
  000e0	8b 45 c0	 mov	 eax, DWORD PTR _Left$[ebp]
  000e3	38 88 ac 00 00
	00		 cmp	 BYTE PTR [eax+172], cl
  000e9	0f 45 ca	 cmovne	 ecx, edx
  000ec	89 4d c8	 mov	 DWORD PTR _bTwoHandWeapon$[ebp], ecx
$LN133@GetAttackD:

; 3456 : 				{
; 3457 : 					bTwoHandWeapon = TRUE;
; 3458 : 				}
; 3459 : 			}
; 3460 : 		}
; 3461 : 
; 3462 : 		if ( lpMagic )

  000ef	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 42 03 00
	00		 je	 $LN135@GetAttackD

; 3463 : 		{
; 3464 : 			if ( (lpMagic ->m_Skill == AT_SKILL_SPEAR ||
; 3465 : 				  lpMagic ->m_Skill == AT_MSKILL_DL_FORCEWAVE1)
; 3466 : 				 && lpObj->SkillLongSpearChange )

  000fa	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fd	83 f9 3c	 cmp	 ecx, 60			; 0000003cH
  00100	74 08		 je	 SHORT $LN18@GetAttackD
  00102	81 f9 fd 01 00
	00		 cmp	 ecx, 509		; 000001fdH
  00108	75 15		 jne	 SHORT $LN16@GetAttackD
$LN18@GetAttackD:
  0010a	38 9f 0a 16 00
	00		 cmp	 BYTE PTR [edi+5642], bl
  00110	74 0d		 je	 SHORT $LN16@GetAttackD

; 3467 : 			{
; 3468 : 				SkillRightMaxDamage = DefMagicInf[66].m_DamageMax;

  00112	8b 1d 40 06 00
	00		 mov	 ebx, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A+1600

; 3469 : 				SkillRightMinDamage = DefMagicInf[66].m_DamageMin;

  00118	a1 3c 06 00 00	 mov	 eax, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A+1596

; 3470 : 			}
; 3471 : 			else

  0011d	eb 06		 jmp	 SHORT $LN153@GetAttackD
$LN16@GetAttackD:

; 3472 : 			{
; 3473 : 				SkillRightMaxDamage = lpMagic->m_DamageMax;

  0011f	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 3474 : 				SkillRightMinDamage = lpMagic->m_DamageMin;

  00122	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
$LN153@GetAttackD:
  00125	89 45 e4	 mov	 DWORD PTR _SkillRightMinDamage$1$[ebp], eax

; 3475 : 			}
; 3476 : 
; 3477 : 			if ( g_MasterSkillSystem.CheckMasterLevelSkill(lpMagic->m_Skill) )

  00128	51		 push	 ecx
  00129	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0012e	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00133	85 c0		 test	 eax, eax
  00135	74 3a		 je	 SHORT $LN148@GetAttackD

; 3478 : 			{
; 3479 : 				float fDamage = g_MasterSkillSystem.GetSkillAttackDamage(lpObj,lpMagic->m_Skill);

  00137	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  0013a	ff 70 08	 push	 DWORD PTR [eax+8]
  0013d	57		 push	 edi
  0013e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00143	e8 00 00 00 00	 call	 ?GetSkillAttackDamage@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@H@Z ; CMasterLevelSkillTreeSystem::GetSkillAttackDamage
  00148	d9 5d d0	 fstp	 DWORD PTR _fDamage$5[ebp]
  0014b	66 0f 6e c3	 movd	 xmm0, ebx

; 3480 : 				SkillRightMaxDamage += fDamage;

  0014f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00152	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _fDamage$5[ebp]
  00157	f3 0f 58 c1	 addss	 xmm0, xmm1
  0015b	f3 0f 2c d8	 cvttss2si ebx, xmm0
  0015f	66 0f 6e 45 e4	 movd	 xmm0, DWORD PTR _SkillRightMinDamage$1$[ebp]

; 3481 : 				SkillRightMinDamage += fDamage;

  00164	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00167	f3 0f 58 c1	 addss	 xmm0, xmm1
  0016b	f3 0f 2c d0	 cvttss2si edx, xmm0
  0016f	eb 03		 jmp	 SHORT $LN19@GetAttackD
$LN148@GetAttackD:
  00171	8b 55 e4	 mov	 edx, DWORD PTR _SkillRightMinDamage$1$[ebp]
$LN19@GetAttackD:

; 3482 : 			}
; 3483 : 
; 3484 : 			if ( bTwoHandWeapon == FALSE )

  00174	39 75 c8	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], esi
  00177	75 06		 jne	 SHORT $LN146@GetAttackD

; 3485 : 			{
; 3486 : 				SkillLeftMaxDamage = SkillRightMaxDamage;

  00179	8b f3		 mov	 esi, ebx

; 3487 : 				SkillLeftMinDamage = SkillRightMinDamage;

  0017b	8b ca		 mov	 ecx, edx
  0017d	eb 02		 jmp	 SHORT $LN20@GetAttackD
$LN146@GetAttackD:
  0017f	33 c9		 xor	 ecx, ecx
$LN20@GetAttackD:

; 3488 : 			}
; 3489 : 
; 3490 : 			SkillRightMaxDamage += lpObj->SetOpAddSkillAttack;

  00181	0f bf 87 b2 14
	00 00		 movsx	 eax, WORD PTR [edi+5298]
  00188	03 d8		 add	 ebx, eax

; 3491 : 			SkillRightMinDamage += lpObj->SetOpAddSkillAttack;

  0018a	03 d0		 add	 edx, eax
  0018c	89 55 e4	 mov	 DWORD PTR _SkillRightMinDamage$1$[ebp], edx

; 3492 : 			SkillLeftMaxDamage += lpObj->SetOpAddSkillAttack;

  0018f	03 f0		 add	 esi, eax

; 3493 : 			SkillLeftMinDamage += lpObj->SetOpAddSkillAttack;

  00191	03 c8		 add	 ecx, eax
  00193	89 4d e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], ecx

; 3494 : 
; 3495 : #if (ENABLETEST_MUUN == 1) 
; 3496 : 			int nMuunItemEffectValue = 0;
; 3497 : 			if (g_CMuunSystem.GetMuunItemValueOfOptType(lpObj, 5, &nMuunItemEffectValue, 0)) {
; 3498 : 				SkillLeftMaxDamage += nMuunItemEffectValue;
; 3499 : 				SkillLeftMinDamage += nMuunItemEffectValue;
; 3500 : 				SkillRightMaxDamage += nMuunItemEffectValue;
; 3501 : 				SkillRightMinDamage += nMuunItemEffectValue;
; 3502 : 			}
; 3503 : #endif
; 3504 : 
; 3505 : 			int SkillAttr = MagicDamageC.GetSkillAttr(lpMagic->m_Skill);

  00196	8b 45 18	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00199	ff 70 08	 push	 DWORD PTR [eax+8]
  0019c	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  001a1	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr

; 3506 : 
; 3507 : 			if ( SkillAttr != -1 )

  001a6	83 f8 ff	 cmp	 eax, -1
  001a9	74 5e		 je	 SHORT $LN147@GetAttackD

; 3508 : 			{
; 3509 : 				if( (lpObj->Authority & 32) == 32 && 

  001ab	f6 87 bc 01 00
	00 20		 test	 BYTE PTR [edi+444], 32	; 00000020H
  001b2	74 3d		 je	 SHORT $LN22@GetAttackD
  001b4	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  001ba	ba 2a 1a 00 00	 mov	 edx, 6698		; 00001a2aH
  001bf	66 39 91 4e 08
	00 00		 cmp	 WORD PTR [ecx+2126], dx
  001c6	74 09		 je	 SHORT $LN24@GetAttackD
  001c8	66 39 91 22 09
	00 00		 cmp	 WORD PTR [ecx+2338], dx
  001cf	75 20		 jne	 SHORT $LN22@GetAttackD
$LN24@GetAttackD:

; 3510 : 					(lpObj->pInventory[10].m_Type == ITEMGET(13,42) ||
; 3511 : 						lpObj->pInventory[11].m_Type == ITEMGET(13,42) ))
; 3512 : 				{
; 3513 : 					SkillRightMaxDamage += 0xFF;

  001d1	81 c3 ff 00 00
	00		 add	 ebx, 255		; 000000ffH

; 3514 : 					SkillRightMinDamage += 0xFF;

  001d7	8b 55 e4	 mov	 edx, DWORD PTR _SkillRightMinDamage$1$[ebp]
  001da	81 c2 ff 00 00
	00		 add	 edx, 255		; 000000ffH

; 3515 : 					SkillLeftMaxDamage += 0xFF;

  001e0	81 c6 ff 00 00
	00		 add	 esi, 255		; 000000ffH

; 3516 : 					SkillLeftMinDamage += 0xFF;

  001e6	8b 4d e0	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  001e9	81 c1 ff 00 00
	00		 add	 ecx, 255		; 000000ffH

; 3517 : 				}
; 3518 : 				else

  001ef	eb 1e		 jmp	 SHORT $LN23@GetAttackD
$LN22@GetAttackD:

; 3519 : 				{
; 3520 : 					SkillRightMaxDamage += (BYTE)lpObj->m_AddResistance[SkillAttr];

  001f1	0f b6 84 38 9d
	08 00 00	 movzx	 eax, BYTE PTR [eax+edi+2205]
  001f9	03 d8		 add	 ebx, eax

; 3521 : 					SkillRightMinDamage += (BYTE)lpObj->m_AddResistance[SkillAttr];

  001fb	8b 55 e4	 mov	 edx, DWORD PTR _SkillRightMinDamage$1$[ebp]
  001fe	03 d0		 add	 edx, eax

; 3522 : 					SkillLeftMaxDamage  += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00200	03 f0		 add	 esi, eax

; 3523 : 					SkillLeftMinDamage  += (BYTE)lpObj->m_AddResistance[SkillAttr];

  00202	8b 4d e0	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  00205	03 c8		 add	 ecx, eax
  00207	eb 06		 jmp	 SHORT $LN23@GetAttackD
$LN147@GetAttackD:
  00209	8b 4d e0	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  0020c	8b 55 e4	 mov	 edx, DWORD PTR _SkillRightMinDamage$1$[ebp]
$LN23@GetAttackD:

; 3524 : 				}
; 3525 : 			}
; 3526 : 
; 3527 : 			SkillRightMaxDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  0020f	0f bf 87 38 24
	00 00		 movsx	 eax, WORD PTR [edi+9272]
  00216	03 d8		 add	 ebx, eax
  00218	89 5d d4	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], ebx

; 3528 : 			SkillRightMinDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  0021b	03 d0		 add	 edx, eax
  0021d	89 55 e4	 mov	 DWORD PTR _SkillRightMinDamage$1$[ebp], edx

; 3529 : 			SkillLeftMaxDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00220	03 f0		 add	 esi, eax
  00222	89 75 dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], esi

; 3530 : 			SkillLeftMinDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddSkillAttack;

  00225	03 c8		 add	 ecx, eax
  00227	89 4d e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], ecx
  0022a	89 4d d8	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], ecx

; 3531 : 
; 3532 : 			if ( lpMagic->m_Skill == 65 )

  0022d	8b 4d 18	 mov	 ecx, DWORD PTR _lpMagic$[ebp]
  00230	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00233	83 f8 41	 cmp	 eax, 65			; 00000041H
  00236	75 4b		 jne	 SHORT $LN25@GetAttackD

; 3533 : 			{
; 3534 : 				int iPartyCount = this->GetPartyMemberCount(lpObj);

  00238	57		 push	 edi
  00239	8b 4d cc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0023c	e8 00 00 00 00	 call	 ?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::GetPartyMemberCount
  00241	8b f0		 mov	 esi, eax

; 3535 : 				int addskilldamage = ( lpObj->Leadership + lpObj->AddLeadership ) / 10 + ( iPartyCount * 50 );	// #formula

  00243	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  0024a	0f b7 8f f4 00
	00 00		 movzx	 ecx, WORD PTR [edi+244]
  00251	03 d1		 add	 edx, ecx
  00253	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00258	f7 ea		 imul	 edx
  0025a	c1 fa 02	 sar	 edx, 2
  0025d	8b ca		 mov	 ecx, edx
  0025f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00262	03 ca		 add	 ecx, edx
  00264	6b c6 32	 imul	 eax, esi, 50
  00267	03 c8		 add	 ecx, eax

; 3536 : 
; 3537 : 				SkillRightMaxDamage += addskilldamage;

  00269	03 d9		 add	 ebx, ecx

; 3538 : 				SkillRightMinDamage += addskilldamage;

  0026b	01 4d e4	 add	 DWORD PTR _SkillRightMinDamage$1$[ebp], ecx

; 3539 : 				SkillLeftMaxDamage += addskilldamage;

  0026e	8b 75 dc	 mov	 esi, DWORD PTR _SkillLeftMaxDamage$[ebp]
  00271	03 f1		 add	 esi, ecx

; 3540 : 				SkillLeftMinDamage += addskilldamage;

  00273	8b 55 e0	 mov	 edx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  00276	03 d1		 add	 edx, ecx
  00278	89 55 e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], edx
  0027b	89 55 d8	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], edx

; 3541 : 			}
; 3542 : 			else if( lpMagic->m_Skill == 62

  0027e	e9 54 01 00 00	 jmp	 $LN154@GetAttackD
$LN25@GetAttackD:

; 3543 : 					|| lpMagic->m_Skill == AT_MSKILL_DL_EARTHSHAKE1
; 3544 : 					|| lpMagic->m_Skill == AT_MSKILL_DL_EARTHSHAKE2 )

  00283	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  00286	0f 84 cd 00 00
	00		 je	 $LN29@GetAttackD
  0028c	3d 00 02 00 00	 cmp	 eax, 512		; 00000200H
  00291	0f 84 c2 00 00
	00		 je	 $LN29@GetAttackD
  00297	3d 04 02 00 00	 cmp	 eax, 516		; 00000204H
  0029c	0f 84 b7 00 00
	00		 je	 $LN29@GetAttackD

; 3554 : 				}
; 3555 : 			}
; 3556 : 			else if ( lpObj->Class == CLASS_DARKLORD && 

  002a2	0f b7 97 90 00
	00 00		 movzx	 edx, WORD PTR [edi+144]
  002a9	83 fa 04	 cmp	 edx, 4
  002ac	0f 85 2e 01 00
	00		 jne	 $LN134@GetAttackD
  002b2	3d ee 00 00 00	 cmp	 eax, 238		; 000000eeH
  002b7	74 07		 je	 SHORT $LN33@GetAttackD
  002b9	3d 0b 02 00 00	 cmp	 eax, 523		; 0000020bH
  002be	75 4a		 jne	 SHORT $LN31@GetAttackD
$LN33@GetAttackD:

; 3557 : 				(lpMagic->m_Skill == AT_SKILL_CHAOTICDISEIER || lpMagic->m_Skill == AT_MSKILL_DL_CHAOTICDESEAR1))
; 3558 : 			{
; 3559 : 				int addskilldamage = ( lpObj->Strength + lpObj->AddStrength ) / 30 + ( lpObj->Energy + lpObj->AddEnergy ) / 55;

  002c0	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  002c7	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  002ce	03 c8		 add	 ecx, eax
  002d0	b8 95 20 4f 09	 mov	 eax, 156180629		; 094f2095H
  002d5	f7 e9		 imul	 ecx
  002d7	d1 fa		 sar	 edx, 1
  002d9	8b f2		 mov	 esi, edx
  002db	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  002de	03 f2		 add	 esi, edx
  002e0	0f b7 8f fc 00
	00 00		 movzx	 ecx, WORD PTR [edi+252]
  002e7	0f b7 87 d0 00
	00 00		 movzx	 eax, WORD PTR [edi+208]
  002ee	03 c8		 add	 ecx, eax
  002f0	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  002f5	f7 e9		 imul	 ecx
  002f7	03 d1		 add	 edx, ecx
  002f9	c1 fa 04	 sar	 edx, 4
  002fc	8b c2		 mov	 eax, edx
  002fe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00301	03 f2		 add	 esi, edx
  00303	03 c6		 add	 eax, esi

; 3560 : 
; 3561 : 
; 3562 : 				SkillRightMaxDamage += addskilldamage;
; 3563 : 				SkillRightMinDamage += addskilldamage;
; 3564 : 				SkillLeftMaxDamage += addskilldamage;
; 3565 : 				SkillLeftMinDamage += addskilldamage;

  00305	e9 b8 00 00 00	 jmp	 $LN156@GetAttackD
$LN31@GetAttackD:

; 3566 : 			}
; 3567 : 			else if ( lpObj->Class == CLASS_DARKLORD )

  0030a	83 fa 04	 cmp	 edx, 4
  0030d	0f 85 cd 00 00
	00		 jne	 $LN134@GetAttackD

; 3568 : 			{
; 3569 : 				int iadddamage = ( lpObj->Strength + lpObj->AddStrength ) / 25 + ( lpObj->Energy + lpObj->AddEnergy ) / 50;	// #formula

  00313	0f b7 8f 02 01
	00 00		 movzx	 ecx, WORD PTR [edi+258]
  0031a	0f b7 87 d6 00
	00 00		 movzx	 eax, WORD PTR [edi+214]
  00321	03 c8		 add	 ecx, eax
  00323	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00328	f7 e9		 imul	 ecx
  0032a	c1 fa 04	 sar	 edx, 4
  0032d	8b f2		 mov	 esi, edx
  0032f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00332	03 f2		 add	 esi, edx
  00334	0f b7 8f fc 00
	00 00		 movzx	 ecx, WORD PTR [edi+252]
  0033b	0f b7 87 d0 00
	00 00		 movzx	 eax, WORD PTR [edi+208]
  00342	03 c8		 add	 ecx, eax
  00344	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00349	f7 e9		 imul	 ecx
  0034b	c1 fa 03	 sar	 edx, 3
  0034e	8b c2		 mov	 eax, edx
  00350	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00353	03 f2		 add	 esi, edx
  00355	03 c6		 add	 eax, esi

; 3570 : 
; 3571 : 				SkillRightMaxDamage += iadddamage;
; 3572 : 				SkillRightMinDamage += iadddamage;
; 3573 : 				SkillLeftMaxDamage += iadddamage;
; 3574 : 				SkillLeftMinDamage += iadddamage;

  00357	eb 69		 jmp	 SHORT $LN156@GetAttackD
$LN29@GetAttackD:

; 3545 : 			{
; 3546 : 				if (lpObj->pInventory[8].m_Type == ITEMGET(13,4) )	// Dark Horse

  00359	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  0035f	ba 04 1a 00 00	 mov	 edx, 6660		; 00001a04H
  00364	66 39 90 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], dx
  0036b	75 73		 jne	 SHORT $LN134@GetAttackD

; 3547 : 				{
; 3548 : 					int addskilldamage = ( lpObj->Strength + lpObj->AddStrength ) / 10 + ( lpObj->Leadership + lpObj->AddLeadership ) / 5 + lpObj->pInventory[8].m_PetItem_Level * 10;	// #formula

  0036d	0f b7 8f f6 00
	00 00		 movzx	 ecx, WORD PTR [edi+246]
  00374	0f b7 87 f4 00
	00 00		 movzx	 eax, WORD PTR [edi+244]
  0037b	03 c8		 add	 ecx, eax
  0037d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00382	f7 e9		 imul	 ecx
  00384	d1 fa		 sar	 edx, 1
  00386	8b f2		 mov	 esi, edx
  00388	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0038b	03 f2		 add	 esi, edx
  0038d	0f b7 97 fc 00
	00 00		 movzx	 edx, WORD PTR [edi+252]
  00394	0f b7 8f d0 00
	00 00		 movzx	 ecx, WORD PTR [edi+208]
  0039b	03 d1		 add	 edx, ecx
  0039d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  003a2	f7 ea		 imul	 edx
  003a4	c1 fa 02	 sar	 edx, 2
  003a7	8b ca		 mov	 ecx, edx
  003a9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003ac	03 f2		 add	 esi, edx
  003ae	03 ce		 add	 ecx, esi
  003b0	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  003b6	8b 80 58 07 00
	00		 mov	 eax, DWORD PTR [eax+1880]
  003bc	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  003bf	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
$LN156@GetAttackD:

; 3552 : 					SkillLeftMaxDamage += addskilldamage;

  003c2	8b 75 dc	 mov	 esi, DWORD PTR _SkillLeftMaxDamage$[ebp]

; 3549 : 
; 3550 : 					SkillRightMaxDamage += addskilldamage;

  003c5	03 d8		 add	 ebx, eax

; 3551 : 					SkillRightMinDamage += addskilldamage;

  003c7	01 45 e4	 add	 DWORD PTR _SkillRightMinDamage$1$[ebp], eax

; 3552 : 					SkillLeftMaxDamage += addskilldamage;

  003ca	03 f0		 add	 esi, eax

; 3553 : 					SkillLeftMinDamage += addskilldamage;

  003cc	8b 4d e0	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  003cf	03 c8		 add	 ecx, eax
  003d1	89 4d e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], ecx
  003d4	89 4d d8	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], ecx
$LN154@GetAttackD:
  003d7	8b 4d 18	 mov	 ecx, DWORD PTR _lpMagic$[ebp]

; 3552 : 					SkillLeftMaxDamage += addskilldamage;

  003da	89 75 dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], esi

; 3549 : 
; 3550 : 					SkillRightMaxDamage += addskilldamage;

  003dd	89 5d d4	 mov	 DWORD PTR _SkillRightMaxDamage$[ebp], ebx
$LN134@GetAttackD:

; 3575 : 			}
; 3576 : 			
; 3577 : 			
; 3578 : 			if ( lpObj->Class == CLASS_ELF && 

  003e0	66 83 bf 90 00
	00 00 02	 cmp	 WORD PTR [edi+144], 2
  003e8	75 52		 jne	 SHORT $LN135@GetAttackD
  003ea	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003ed	3d eb 00 00 00	 cmp	 eax, 235		; 000000ebH
  003f2	74 0e		 je	 SHORT $LN36@GetAttackD
  003f4	3d 9b 01 00 00	 cmp	 eax, 411		; 0000019bH
  003f9	74 07		 je	 SHORT $LN36@GetAttackD
  003fb	3d af 01 00 00	 cmp	 eax, 431		; 000001afH
  00400	75 3a		 jne	 SHORT $LN135@GetAttackD
$LN36@GetAttackD:

; 3579 : 				(lpMagic->m_Skill == AT_SKILL_MULTISHOT ||
; 3580 : 				 lpMagic->m_Skill == AT_MSKILL_FE_MULTISHOT1 ||
; 3581 : 				 lpMagic->m_Skill == AT_MSKILL_FE_MULTISHOT2) )
; 3582 : 			{
; 3583 : 				SkillLeftMaxDamage = SkillLeftMaxDamage * 80 / 100;

  00402	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00405	c1 e1 04	 shl	 ecx, 4
  00408	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0040d	f7 e9		 imul	 ecx
  0040f	c1 fa 05	 sar	 edx, 5
  00412	8b f2		 mov	 esi, edx
  00414	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00417	03 f2		 add	 esi, edx
  00419	89 75 dc	 mov	 DWORD PTR _SkillLeftMaxDamage$[ebp], esi

; 3584 : 				SkillLeftMinDamage = SkillLeftMinDamage * 80 / 100;

  0041c	8b 4d e0	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  0041f	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  00422	c1 e1 04	 shl	 ecx, 4
  00425	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0042a	f7 e9		 imul	 ecx
  0042c	c1 fa 05	 sar	 edx, 5
  0042f	8b ca		 mov	 ecx, edx
  00431	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00434	03 ca		 add	 ecx, edx
  00436	89 4d e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], ecx
  00439	89 4d d8	 mov	 DWORD PTR _SkillLeftMinDamage$[ebp], ecx
$LN135@GetAttackD:

; 3585 : 			}
; 3586 : 		}
; 3587 : 
; 3588 : 		if ( lpObj->m_CriticalDamage > 0 )

  0043c	83 bf 9c 06 00
	00 00		 cmp	 DWORD PTR [edi+1692], 0
  00443	7e 25		 jle	 SHORT $LN137@GetAttackD

; 3589 : 		{
; 3590 : 			if ( (rand()%100) < lpObj->m_CriticalDamage )

  00445	e8 00 00 00 00	 call	 _rand
  0044a	99		 cdq
  0044b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00450	f7 f9		 idiv	 ecx
  00452	3b 97 9c 06 00
	00		 cmp	 edx, DWORD PTR [edi+1692]
  00458	7d 10		 jge	 SHORT $LN137@GetAttackD

; 3591 : 			{
; 3592 : 				cDamage = TRUE;

  0045a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _cDamage$2[ebp], 1

; 3593 : 				effect = 3;

  00461	8b 45 10	 mov	 eax, DWORD PTR _effect$[ebp]
  00464	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3
$LN137@GetAttackD:

; 3594 : 			}
; 3595 : 		}
; 3596 : 
; 3597 : 		if ( lpObj->m_ExcelentDamage > 0 )

  0046a	83 bf a0 06 00
	00 00		 cmp	 DWORD PTR [edi+1696], 0
  00471	7e 25		 jle	 SHORT $LN40@GetAttackD

; 3598 : 		{
; 3599 : 			if ( (rand()%100) < lpObj->m_ExcelentDamage )

  00473	e8 00 00 00 00	 call	 _rand
  00478	99		 cdq
  00479	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0047e	f7 f9		 idiv	 ecx
  00480	3b 97 a0 06 00
	00		 cmp	 edx, DWORD PTR [edi+1696]
  00486	7d 10		 jge	 SHORT $LN40@GetAttackD

; 3600 : 			{
; 3601 : 				cDamage = TRUE;

  00488	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR _cDamage$2[ebp], 1

; 3602 : 				effect = 2;

  0048f	8b 45 10	 mov	 eax, DWORD PTR _effect$[ebp]
  00492	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
$LN40@GetAttackD:

; 3603 : 			}
; 3604 : 		}
; 3605 : 
; 3606 : 		int AddDmgMin = 0;

  00498	c7 45 18 00 00
	00 00		 mov	 DWORD PTR _AddDmgMin$6[ebp], 0

; 3607 : 		int AddDmgMax = 0;

  0049f	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _AddDmgMax$4[ebp], 0

; 3608 : 
; 3609 : 		if( gObjCheckUsedBuffEffect( lpObj,BUFF_BERSERKER ) == TRUE )

  004a6	6a 51		 push	 81			; 00000051H
  004a8	57		 push	 edi
  004a9	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  004ae	83 c4 08	 add	 esp, 8
  004b1	3c 01		 cmp	 al, 1
  004b3	75 13		 jne	 SHORT $LN41@GetAttackD

; 3610 : 		{
; 3611 : 			this->GetBuffTypePhysicalIncrease( lpObj, AddDmgMin,AddDmgMax, BUFF_BERSERKER );

  004b5	6a 51		 push	 81			; 00000051H
  004b7	8d 45 d0	 lea	 eax, DWORD PTR _AddDmgMax$4[ebp]
  004ba	50		 push	 eax
  004bb	8d 45 18	 lea	 eax, DWORD PTR _AddDmgMin$6[ebp]
  004be	50		 push	 eax
  004bf	57		 push	 edi
  004c0	8b 4d cc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  004c3	e8 00 00 00 00	 call	 ?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z ; CObjAttack::GetBuffTypePhysicalIncrease
$LN41@GetAttackD:

; 3612 : 		}
; 3613 : 
; 3614 : 		if( gObjCheckUsedBuffEffect( lpObj,BUFF_BERSERKER2 ) == TRUE )

  004c8	68 96 00 00 00	 push	 150			; 00000096H
  004cd	57		 push	 edi
  004ce	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  004d3	83 c4 08	 add	 esp, 8
  004d6	3c 01		 cmp	 al, 1
  004d8	75 16		 jne	 SHORT $LN42@GetAttackD

; 3615 : 		{
; 3616 : 			this->GetBuffTypePhysicalIncrease( lpObj, AddDmgMin,AddDmgMax, BUFF_BERSERKER2 );

  004da	68 96 00 00 00	 push	 150			; 00000096H
  004df	8d 45 d0	 lea	 eax, DWORD PTR _AddDmgMax$4[ebp]
  004e2	50		 push	 eax
  004e3	8d 45 18	 lea	 eax, DWORD PTR _AddDmgMin$6[ebp]
  004e6	50		 push	 eax
  004e7	57		 push	 edi
  004e8	8b 4d cc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  004eb	e8 00 00 00 00	 call	 ?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z ; CObjAttack::GetBuffTypePhysicalIncrease
$LN42@GetAttackD:

; 3617 : 		}
; 3618 : 
; 3619 : 		if( gObjCheckUsedBuffEffect( lpObj,BUFF_BERSERKER3 ) == TRUE )

  004f0	68 97 00 00 00	 push	 151			; 00000097H
  004f5	57		 push	 edi
  004f6	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  004fb	83 c4 08	 add	 esp, 8
  004fe	3c 01		 cmp	 al, 1
  00500	75 16		 jne	 SHORT $LN43@GetAttackD

; 3620 : 		{
; 3621 : 			this->GetBuffTypePhysicalIncrease( lpObj, AddDmgMin,AddDmgMax, BUFF_BERSERKER3 );

  00502	68 97 00 00 00	 push	 151			; 00000097H
  00507	8d 45 d0	 lea	 eax, DWORD PTR _AddDmgMax$4[ebp]
  0050a	50		 push	 eax
  0050b	8d 45 18	 lea	 eax, DWORD PTR _AddDmgMin$6[ebp]
  0050e	50		 push	 eax
  0050f	57		 push	 edi
  00510	8b 4d cc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00513	e8 00 00 00 00	 call	 ?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z ; CObjAttack::GetBuffTypePhysicalIncrease
$LN43@GetAttackD:

; 3622 : 		}
; 3623 : 
; 3624 : 		if( gObjCheckUsedBuffEffect( lpObj,BUFF_BERSERKER4 ) == TRUE )

  00518	68 98 00 00 00	 push	 152			; 00000098H
  0051d	57		 push	 edi
  0051e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00523	83 c4 08	 add	 esp, 8
  00526	3c 01		 cmp	 al, 1
  00528	75 16		 jne	 SHORT $LN44@GetAttackD

; 3625 : 		{
; 3626 : 			this->GetBuffTypePhysicalIncrease( lpObj, AddDmgMin,AddDmgMax, BUFF_BERSERKER4 );

  0052a	68 98 00 00 00	 push	 152			; 00000098H
  0052f	8d 45 d0	 lea	 eax, DWORD PTR _AddDmgMax$4[ebp]
  00532	50		 push	 eax
  00533	8d 45 18	 lea	 eax, DWORD PTR _AddDmgMin$6[ebp]
  00536	50		 push	 eax
  00537	57		 push	 edi
  00538	8b 4d cc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0053b	e8 00 00 00 00	 call	 ?GetBuffTypePhysicalIncrease@CObjAttack@@QAE_NPAUOBJECTSTRUCT@@AAH1H@Z ; CObjAttack::GetBuffTypePhysicalIncrease
$LN44@GetAttackD:

; 3627 : 		}
; 3628 : 
; 3629 : 		__try

  00540	9b		 fwait
  00541	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 3630 : 		{
; 3631 : 			sub = ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage + AddDmgMax) - ( lpObj->m_AttackDamageMinRight + SkillRightMinDamage + AddDmgMin );	// #formula

  00548	8b 87 60 06 00
	00		 mov	 eax, DWORD PTR [edi+1632]
  0054e	2b 87 64 06 00
	00		 sub	 eax, DWORD PTR [edi+1636]
  00554	2b 45 18	 sub	 eax, DWORD PTR _AddDmgMin$6[ebp]
  00557	2b 45 e4	 sub	 eax, DWORD PTR _SkillRightMinDamage$1$[ebp]
  0055a	03 45 d0	 add	 eax, DWORD PTR _AddDmgMax$4[ebp]
  0055d	03 c3		 add	 eax, ebx
  0055f	89 45 c4	 mov	 DWORD PTR _sub$[ebp], eax

; 3632 : 			lpObj->m_AttackDamageRight = ( lpObj->m_AttackDamageMinRight + SkillRightMinDamage + AddDmgMin ) + (rand()%(sub+1));

  00562	e8 00 00 00 00	 call	 _rand
  00567	8b 4d c4	 mov	 ecx, DWORD PTR _sub$[ebp]
  0056a	41		 inc	 ecx
  0056b	99		 cdq
  0056c	f7 f9		 idiv	 ecx
  0056e	03 97 64 06 00
	00		 add	 edx, DWORD PTR [edi+1636]
  00574	03 55 18	 add	 edx, DWORD PTR _AddDmgMin$6[ebp]
  00577	03 55 e4	 add	 edx, DWORD PTR _SkillRightMinDamage$1$[ebp]
  0057a	89 97 54 06 00
	00		 mov	 DWORD PTR [edi+1620], edx

; 3633 : 		}

  00580	9b		 fwait
  00581	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00588	8b 4d e0	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  0058b	eb 26		 jmp	 SHORT $LN125@GetAttackD
$LN122@GetAttackD:
$LN170@GetAttackD:

; 3634 : 		__except ( sub=1, 1 )

  0058d	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _sub$[ebp], 1
  00594	b8 01 00 00 00	 mov	 eax, 1
$LN151@GetAttackD:
$LN124@GetAttackD:
  00599	c3		 ret	 0
$LN123@GetAttackD:
  0059a	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 3633 : 		}

  0059d	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  005a4	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  005a7	8b 5d d4	 mov	 ebx, DWORD PTR _SkillRightMaxDamage$[ebp]
  005aa	8b 75 dc	 mov	 esi, DWORD PTR _SkillLeftMaxDamage$[ebp]
  005ad	8b 4d d8	 mov	 ecx, DWORD PTR _SkillLeftMinDamage$[ebp]
  005b0	89 4d e0	 mov	 DWORD PTR _SkillLeftMinDamage$1$[ebp], ecx
$LN125@GetAttackD:

; 3635 : 		{
; 3636 : 
; 3637 : 		}
; 3638 : 
; 3639 : 		__try

  005b3	9b		 fwait
  005b4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 1

; 3640 : 		{
; 3641 : 			sub = ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage + AddDmgMax ) - ( lpObj->m_AttackDamageMinLeft + SkillLeftMinDamage + AddDmgMin );	// #formula

  005bb	8b 87 58 06 00
	00		 mov	 eax, DWORD PTR [edi+1624]
  005c1	2b 87 5c 06 00
	00		 sub	 eax, DWORD PTR [edi+1628]
  005c7	2b 45 18	 sub	 eax, DWORD PTR _AddDmgMin$6[ebp]
  005ca	2b c1		 sub	 eax, ecx
  005cc	03 45 d0	 add	 eax, DWORD PTR _AddDmgMax$4[ebp]
  005cf	03 c6		 add	 eax, esi
  005d1	89 45 c4	 mov	 DWORD PTR _sub$[ebp], eax

; 3642 : 			lpObj->m_AttackDamageLeft = ( lpObj->m_AttackDamageMinLeft + SkillLeftMinDamage + AddDmgMin ) + (rand()%(sub+1));

  005d4	e8 00 00 00 00	 call	 _rand
  005d9	8b 4d c4	 mov	 ecx, DWORD PTR _sub$[ebp]
  005dc	41		 inc	 ecx
  005dd	99		 cdq
  005de	f7 f9		 idiv	 ecx
  005e0	03 97 5c 06 00
	00		 add	 edx, DWORD PTR [edi+1628]
  005e6	03 55 18	 add	 edx, DWORD PTR _AddDmgMin$6[ebp]
  005e9	03 55 e0	 add	 edx, DWORD PTR _SkillLeftMinDamage$1$[ebp]
  005ec	89 97 50 06 00
	00		 mov	 DWORD PTR [edi+1616], edx

; 3643 : 		}

  005f2	9b		 fwait
  005f3	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  005fa	eb 20		 jmp	 SHORT $LN129@GetAttackD
$LN126@GetAttackD:
$LN171@GetAttackD:

; 3644 : 		__except ( sub=1, 1 )

  005fc	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR _sub$[ebp], 1
  00603	b8 01 00 00 00	 mov	 eax, 1
$LN152@GetAttackD:
$LN128@GetAttackD:
  00608	c3		 ret	 0
$LN127@GetAttackD:
  00609	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 3643 : 		}

  0060c	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00613	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00616	8b 5d d4	 mov	 ebx, DWORD PTR _SkillRightMaxDamage$[ebp]
  00619	8b 75 dc	 mov	 esi, DWORD PTR _SkillLeftMaxDamage$[ebp]
$LN129@GetAttackD:

; 3645 : 		{
; 3646 : 
; 3647 : 		}
; 3648 : 
; 3649 : 		if ( cDamage )

  0061c	83 7d b8 00	 cmp	 DWORD PTR _cDamage$2[ebp], 0
  00620	0f 84 2b 01 00
	00		 je	 $LN150@GetAttackD

; 3650 : 		{
; 3651 : 			lpObj->m_AttackDamageRight = lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage+ AddDmgMax;
; 3652 : 			lpObj->m_AttackDamageLeft = lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage+AddDmgMin;
; 3653 : 
; 3654 : 			lpObj->m_AttackDamageRight += lpObj->SetOpAddCriticalDamage;

  00626	0f bf 97 b8 14
	00 00		 movsx	 edx, WORD PTR [edi+5304]

; 3655 : 			lpObj->m_AttackDamageLeft += lpObj->SetOpAddCriticalDamage;
; 3656 : 
; 3657 : 			lpObj->m_AttackDamageRight += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  0062d	0f bf 8f 36 24
	00 00		 movsx	 ecx, WORD PTR [edi+9270]
  00634	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00637	03 45 d0	 add	 eax, DWORD PTR _AddDmgMax$4[ebp]
  0063a	03 c3		 add	 eax, ebx
  0063c	03 87 60 06 00
	00		 add	 eax, DWORD PTR [edi+1632]
  00642	89 87 54 06 00
	00		 mov	 DWORD PTR [edi+1620], eax

; 3658 : 			lpObj->m_AttackDamageLeft += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  00648	8b 87 58 06 00
	00		 mov	 eax, DWORD PTR [edi+1624]
  0064e	03 c1		 add	 eax, ecx
  00650	03 c2		 add	 eax, edx
  00652	03 45 18	 add	 eax, DWORD PTR _AddDmgMin$6[ebp]
  00655	03 c6		 add	 eax, esi
  00657	89 87 50 06 00
	00		 mov	 DWORD PTR [edi+1616], eax

; 3659 : 
; 3660 : 			int AddCriticalDmg = 0;

  0065d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _AddCriticalDmg$3[ebp], 0

; 3661 : 
; 3662 : 			gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG,&AddCriticalDmg,0);

  00664	6a 00		 push	 0
  00666	8d 45 cc	 lea	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  00669	50		 push	 eax
  0066a	6a 05		 push	 5
  0066c	57		 push	 edi
  0066d	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 3663 : 
; 3664 : 			lpObj->m_AttackDamageRight += AddCriticalDmg;

  00672	8b 45 cc	 mov	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  00675	01 87 54 06 00
	00		 add	 DWORD PTR [edi+1620], eax

; 3665 : 			lpObj->m_AttackDamageLeft += AddCriticalDmg;

  0067b	01 87 50 06 00
	00		 add	 DWORD PTR [edi+1616], eax

; 3666 : 
; 3667 : 			gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG2,&AddCriticalDmg,0);

  00681	6a 00		 push	 0
  00683	8d 45 cc	 lea	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  00686	50		 push	 eax
  00687	68 94 00 00 00	 push	 148			; 00000094H
  0068c	57		 push	 edi
  0068d	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 3668 : 
; 3669 : 			lpObj->m_AttackDamageRight += AddCriticalDmg;

  00692	8b 45 cc	 mov	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  00695	01 87 54 06 00
	00		 add	 DWORD PTR [edi+1620], eax

; 3670 : 			lpObj->m_AttackDamageLeft += AddCriticalDmg;

  0069b	01 87 50 06 00
	00		 add	 DWORD PTR [edi+1616], eax

; 3671 : 
; 3672 : 			gObjGetValueOfBuffIndex(lpObj,BUFF_ADD_CRITDMG3,&AddCriticalDmg,0);

  006a1	6a 00		 push	 0
  006a3	8d 45 cc	 lea	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  006a6	50		 push	 eax
  006a7	68 95 00 00 00	 push	 149			; 00000095H
  006ac	57		 push	 edi
  006ad	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  006b2	83 c4 30	 add	 esp, 48			; 00000030H

; 3673 : 
; 3674 : 			lpObj->m_AttackDamageRight += AddCriticalDmg;

  006b5	8b 45 cc	 mov	 eax, DWORD PTR _AddCriticalDmg$3[ebp]
  006b8	01 87 54 06 00
	00		 add	 DWORD PTR [edi+1620], eax

; 3675 : 			lpObj->m_AttackDamageLeft += AddCriticalDmg;

  006be	01 87 50 06 00
	00		 add	 DWORD PTR [edi+1616], eax

; 3676 : 
; 3677 : 			
; 3678 : 
; 3679 : 			if ( effect == 2 )

  006c4	8b 45 10	 mov	 eax, DWORD PTR _effect$[ebp]
  006c7	83 38 02	 cmp	 DWORD PTR [eax], 2
  006ca	0f 85 81 00 00
	00		 jne	 $LN150@GetAttackD

; 3683 : 
; 3684 : 				lpObj->m_AttackDamageRight += lpObj->SetOpAddExDamage;

  006d0	0f bf b7 b4 14
	00 00		 movsx	 esi, WORD PTR [edi+5300]
  006d7	8b 87 60 06 00
	00		 mov	 eax, DWORD PTR [edi+1632]
  006dd	03 c3		 add	 eax, ebx

; 3680 : 			{
; 3681 : 				lpObj->m_AttackDamageRight += ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage ) * 20 / 100;

  006df	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  006e2	c1 e1 02	 shl	 ecx, 2
  006e5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  006ea	f7 e9		 imul	 ecx
  006ec	c1 fa 05	 sar	 edx, 5
  006ef	8b c2		 mov	 eax, edx
  006f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  006f4	03 c2		 add	 eax, edx

; 3683 : 
; 3684 : 				lpObj->m_AttackDamageRight += lpObj->SetOpAddExDamage;

  006f6	03 c6		 add	 eax, esi
  006f8	01 87 54 06 00
	00		 add	 DWORD PTR [edi+1620], eax

; 3685 : 				lpObj->m_AttackDamageLeft += lpObj->SetOpAddExDamage;

  006fe	8b 87 58 06 00
	00		 mov	 eax, DWORD PTR [edi+1624]
  00704	03 45 dc	 add	 eax, DWORD PTR _SkillLeftMaxDamage$[ebp]

; 3682 : 				lpObj->m_AttackDamageLeft += ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage ) * 20 / 100;

  00707	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  0070a	c1 e1 02	 shl	 ecx, 2
  0070d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00712	f7 e9		 imul	 ecx
  00714	c1 fa 05	 sar	 edx, 5
  00717	8b c2		 mov	 eax, edx
  00719	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0071c	03 c2		 add	 eax, edx

; 3685 : 				lpObj->m_AttackDamageLeft += lpObj->SetOpAddExDamage;

  0071e	03 c6		 add	 eax, esi
  00720	01 87 50 06 00
	00		 add	 DWORD PTR [edi+1616], eax
  00726	eb 29		 jmp	 SHORT $LN150@GetAttackD
$LN10@GetAttackD:

; 3436 : 	{
; 3437 : 		int AttackMin = 0;
; 3438 : 		sub = lpObj->m_AttackDamageMax - lpObj->m_AttackDamageMin;

  00728	8b b7 44 06 00
	00		 mov	 esi, DWORD PTR [edi+1604]
  0072e	2b b7 40 06 00
	00		 sub	 esi, DWORD PTR [edi+1600]

; 3439 : 		AttackMin = lpObj->m_AttackDamageMin + (rand()%(sub+1));

  00734	e8 00 00 00 00	 call	 _rand
  00739	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0073c	99		 cdq
  0073d	f7 f9		 idiv	 ecx
  0073f	03 97 40 06 00
	00		 add	 edx, DWORD PTR [edi+1600]

; 3440 : 		lpObj->m_AttackDamageRight = AttackMin;

  00745	89 97 54 06 00
	00		 mov	 DWORD PTR [edi+1620], edx

; 3441 : 		lpObj->m_AttackDamageLeft = AttackMin;

  0074b	89 97 50 06 00
	00		 mov	 DWORD PTR [edi+1616], edx
$LN150@GetAttackD:
  00751	bb 00 08 00 00	 mov	 ebx, 2048		; 00000800H

; 3686 : 			}
; 3687 : 
; 3688 : #if (CUSTOM_EXOPT==1)
; 3689 : 
; 3690 : 			if( effect == 3 )
; 3691 : 			{
; 3692 : 				if( lpObj->m_CriticalDamageMul > 0 )
; 3693 : 				{
; 3694 : 					lpObj->m_AttackDamageRight += ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage ) * lpObj->m_CriticalDamageMul / 100;
; 3695 : 					lpObj->m_AttackDamageLeft += ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage ) * lpObj->m_CriticalDamageMul / 100;
; 3696 : 				}
; 3697 : 			}
; 3698 : 			else if( effect == 2 )
; 3699 : 			{
; 3700 : 				if( lpObj->m_ExcelentDamageMul > 0 )
; 3701 : 				{
; 3702 : 					lpObj->m_AttackDamageRight += ( lpObj->m_AttackDamageMaxRight + SkillRightMaxDamage ) * lpObj->m_ExcelentDamageMul / 100;
; 3703 : 					lpObj->m_AttackDamageLeft += ( lpObj->m_AttackDamageMaxLeft + SkillLeftMaxDamage ) * lpObj->m_ExcelentDamageMul / 100;
; 3704 : 				}
; 3705 : 			}
; 3706 : 
; 3707 : #endif
; 3708 : 		}
; 3709 : 	}
; 3710 : 
; 3711 : 	if ( bTwoHandWeapon )

  00756	83 7d c8 00	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], 0
  0075a	74 5b		 je	 SHORT $LN49@GetAttackD

; 3712 : 	{
; 3713 : 		if ( bIsOnDuel )

  0075c	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  00760	74 38		 je	 SHORT $LN51@GetAttackD

; 3714 : 		{
; 3715 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  00762	8b 87 54 06 00
	00		 mov	 eax, DWORD PTR [edi+1620]
  00768	03 87 50 06 00
	00		 add	 eax, DWORD PTR [edi+1616]
  0076e	8b c8		 mov	 ecx, eax
  00770	c1 e1 04	 shl	 ecx, 4
  00773	2b c8		 sub	 ecx, eax
  00775	c1 e1 02	 shl	 ecx, 2
  00778	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0077d	f7 e9		 imul	 ecx
  0077f	c1 fa 05	 sar	 edx, 5
  00782	8b da		 mov	 ebx, edx
  00784	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00787	03 da		 add	 ebx, edx

; 3716 : 		}
; 3717 : 		else
; 3718 : 		{
; 3719 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) - targetDefense;

  00789	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]

; 3720 : 		}
; 3721 : 
; 3722 : 		ad -= lpObj->SetOpAddCriticalDamage;

  0078c	0f bf 87 b8 14
	00 00		 movsx	 eax, WORD PTR [edi+5304]
  00793	2b d8		 sub	 ebx, eax

; 3723 : 	}
; 3724 : 	else if ( (Left->m_Type >= ITEMGET(4, 0) && Left->m_Type < ITEMGET(4, 7)) ||

  00795	e9 2f 02 00 00	 jmp	 $LN59@GetAttackD
$LN51@GetAttackD:

; 3716 : 		}
; 3717 : 		else
; 3718 : 		{
; 3719 : 			ad = ( lpObj->m_AttackDamageRight + lpObj->m_AttackDamageLeft ) - targetDefense;

  0079a	8b 9f 54 06 00
	00		 mov	 ebx, DWORD PTR [edi+1620]
  007a0	03 9f 50 06 00
	00		 add	 ebx, DWORD PTR [edi+1616]
  007a6	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]

; 3720 : 		}
; 3721 : 
; 3722 : 		ad -= lpObj->SetOpAddCriticalDamage;

  007a9	0f bf 87 b8 14
	00 00		 movsx	 eax, WORD PTR [edi+5304]
  007b0	2b d8		 sub	 ebx, eax

; 3723 : 	}
; 3724 : 	else if ( (Left->m_Type >= ITEMGET(4, 0) && Left->m_Type < ITEMGET(4, 7)) ||

  007b2	e9 12 02 00 00	 jmp	 $LN59@GetAttackD
$LN49@GetAttackD:

; 3725 : 			 Left->m_Type == ITEMGET(4,20) ||
; 3726 : 			 Left->m_Type == ITEMGET(4,21) ||
; 3727 : 			 Left->m_Type == ITEMGET(4,22) ||

  007b7	8b 45 c0	 mov	 eax, DWORD PTR _Left$[ebp]
  007ba	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  007be	66 3b c3	 cmp	 ax, bx
  007c1	7c 0e		 jl	 SHORT $LN56@GetAttackD
  007c3	b9 07 08 00 00	 mov	 ecx, 2055		; 00000807H
  007c8	66 3b c1	 cmp	 ax, cx
  007cb	0f 8c a6 01 00
	00		 jl	 $LN55@GetAttackD
$LN56@GetAttackD:
  007d1	b9 14 08 00 00	 mov	 ecx, 2068		; 00000814H
  007d6	66 3b c1	 cmp	 ax, cx
  007d9	0f 84 98 01 00
	00		 je	 $LN55@GetAttackD
  007df	b9 15 08 00 00	 mov	 ecx, 2069		; 00000815H
  007e4	66 3b c1	 cmp	 ax, cx
  007e7	0f 84 8a 01 00
	00		 je	 $LN55@GetAttackD
  007ed	b9 16 08 00 00	 mov	 ecx, 2070		; 00000816H
  007f2	66 3b c1	 cmp	 ax, cx
  007f5	0f 84 7c 01 00
	00		 je	 $LN55@GetAttackD
  007fb	b9 17 08 00 00	 mov	 ecx, 2071		; 00000817H
  00800	66 3b c1	 cmp	 ax, cx
  00803	0f 84 6e 01 00
	00		 je	 $LN55@GetAttackD

; 3742 : 		}
; 3743 : 	}
; 3744 : 	else if ( (Right->m_Type >= ITEMGET(4, 8) && Right->m_Type < ITEMGET(4, 15)) ||

  00809	8b 4d bc	 mov	 ecx, DWORD PTR _Right$[ebp]
  0080c	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  00810	ba 08 08 00 00	 mov	 edx, 2056		; 00000808H
  00815	66 3b c2	 cmp	 ax, dx
  00818	7c 0a		 jl	 SHORT $LN63@GetAttackD
  0081a	ba 0f 08 00 00	 mov	 edx, 2063		; 0000080fH
  0081f	66 3b c2	 cmp	 ax, dx
  00822	7c 14		 jl	 SHORT $LN62@GetAttackD
$LN63@GetAttackD:
  00824	ba 10 08 00 00	 mov	 edx, 2064		; 00000810H
  00829	be 00 0a 00 00	 mov	 esi, 2560		; 00000a00H
  0082e	66 3b c2	 cmp	 ax, dx
  00831	7c 4c		 jl	 SHORT $LN60@GetAttackD
  00833	66 3b c6	 cmp	 ax, si
  00836	7d 47		 jge	 SHORT $LN60@GetAttackD
$LN62@GetAttackD:

; 3745 : 			  ( Right->m_Type >= ITEMGET(4,16) && Right->m_Type < ITEMGET(5,0) )  )
; 3746 : 	{
; 3747 : 		if ( bIsOnDuel )

  00838	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0083c	74 2e		 je	 SHORT $LN64@GetAttackD

; 3748 : 		{
; 3749 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  0083e	8b 87 54 06 00
	00		 mov	 eax, DWORD PTR [edi+1620]
  00844	8b c8		 mov	 ecx, eax
  00846	c1 e1 04	 shl	 ecx, 4
  00849	2b c8		 sub	 ecx, eax
  0084b	c1 e1 02	 shl	 ecx, 2
  0084e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00853	f7 e9		 imul	 ecx
  00855	c1 fa 05	 sar	 edx, 5
  00858	8b da		 mov	 ebx, edx
  0085a	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0085d	03 da		 add	 ebx, edx

; 3754 : 		}
; 3755 : 
; 3756 : 		if( lpObj->m_MPSkillOpt.MpsCrossbowStrength > 0.0f )

  0085f	f3 0f 10 8f 44
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1860]

; 3757 : 		{
; 3758 : 			ad += lpObj->m_MPSkillOpt.MpsCrossbowStrength;
; 3759 : 		}
; 3760 : 	}

  00867	e9 42 01 00 00	 jmp	 $LN167@GetAttackD
$LN64@GetAttackD:

; 3750 : 		}
; 3751 : 		else
; 3752 : 		{
; 3753 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  0086c	8b 9f 54 06 00
	00		 mov	 ebx, DWORD PTR [edi+1620]

; 3754 : 		}
; 3755 : 
; 3756 : 		if( lpObj->m_MPSkillOpt.MpsCrossbowStrength > 0.0f )

  00872	f3 0f 10 8f 44
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1860]

; 3757 : 		{
; 3758 : 			ad += lpObj->m_MPSkillOpt.MpsCrossbowStrength;
; 3759 : 		}
; 3760 : 	}

  0087a	e9 2f 01 00 00	 jmp	 $LN167@GetAttackD
$LN60@GetAttackD:

; 3761 : 	else if ( Right->GetDetailItemType() == 0 || Left->GetDetailItemType() == 0 )

  0087f	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00884	85 c0		 test	 eax, eax
  00886	0f 84 aa 00 00
	00		 je	 $LN69@GetAttackD
  0088c	8b 4d c0	 mov	 ecx, DWORD PTR _Left$[ebp]
  0088f	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00894	85 c0		 test	 eax, eax
  00896	0f 84 9a 00 00
	00		 je	 $LN69@GetAttackD

; 3777 : 	else if ( Right->m_Type >= ITEMGET(0,0) && Right->m_Type < ITEMGET(4,0) )

  0089c	8b 45 bc	 mov	 eax, DWORD PTR _Right$[ebp]
  0089f	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  008a3	66 85 c0	 test	 ax, ax
  008a6	78 34		 js	 SHORT $LN73@GetAttackD
  008a8	66 3b c3	 cmp	 ax, bx
  008ab	7d 2f		 jge	 SHORT $LN73@GetAttackD
$LN163@GetAttackD:

; 3778 : 	{
; 3779 : 		if ( bIsOnDuel )

  008ad	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  008b1	74 67		 je	 SHORT $LN79@GetAttackD

; 3780 : 		{
; 3781 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  008b3	8b 87 54 06 00
	00		 mov	 eax, DWORD PTR [edi+1620]
  008b9	8b c8		 mov	 ecx, eax
  008bb	c1 e1 04	 shl	 ecx, 4
  008be	2b c8		 sub	 ecx, eax
  008c0	c1 e1 02	 shl	 ecx, 2
  008c3	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  008c8	f7 e9		 imul	 ecx
  008ca	c1 fa 05	 sar	 edx, 5
  008cd	8b da		 mov	 ebx, edx
  008cf	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  008d2	03 da		 add	 ebx, edx
  008d4	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]

; 3782 : 		}
; 3783 : 		else

  008d7	e9 ed 00 00 00	 jmp	 $LN59@GetAttackD
$LN73@GetAttackD:

; 3784 : 		{
; 3785 : 			ad = lpObj->m_AttackDamageRight - targetDefense;
; 3786 : 		}
; 3787 : 	}
; 3788 : 	else if ( Right->m_Type >= ITEMGET(5,0) && Right->m_Type < ITEMGET(6,0) )

  008dc	66 3b c6	 cmp	 ax, si
  008df	7c 0a		 jl	 SHORT $LN77@GetAttackD
  008e1	b9 00 0c 00 00	 mov	 ecx, 3072		; 00000c00H
  008e6	66 3b c1	 cmp	 ax, cx
  008e9	7c c2		 jl	 SHORT $LN163@GetAttackD
$LN77@GetAttackD:

; 3798 : 	}
; 3799 : 	else if ( bIsOnDuel )

  008eb	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  008ef	74 37		 je	 SHORT $LN81@GetAttackD

; 3800 : 	{
; 3801 : 		ad = ( lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  008f1	8b 87 50 06 00
	00		 mov	 eax, DWORD PTR [edi+1616]
  008f7	8b c8		 mov	 ecx, eax
  008f9	c1 e1 04	 shl	 ecx, 4
  008fc	2b c8		 sub	 ecx, eax
  008fe	c1 e1 02	 shl	 ecx, 2
  00901	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00906	f7 e9		 imul	 ecx
  00908	c1 fa 05	 sar	 edx, 5
  0090b	8b da		 mov	 ebx, edx
  0090d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00910	03 da		 add	 ebx, edx
  00912	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]

; 3802 : 	}
; 3803 : 	else

  00915	e9 af 00 00 00	 jmp	 $LN59@GetAttackD
$LN79@GetAttackD:

; 3789 : 	{
; 3790 : 		if ( bIsOnDuel )
; 3791 : 		{
; 3792 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;
; 3793 : 		}
; 3794 : 		else
; 3795 : 		{
; 3796 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  0091a	8b 9f 54 06 00
	00		 mov	 ebx, DWORD PTR [edi+1620]
  00920	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]

; 3797 : 		}

  00923	e9 a1 00 00 00	 jmp	 $LN59@GetAttackD
$LN81@GetAttackD:

; 3804 : 	{
; 3805 : 		ad = lpObj->m_AttackDamageLeft - targetDefense;

  00928	8b 9f 50 06 00
	00		 mov	 ebx, DWORD PTR [edi+1616]
  0092e	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]
  00931	e9 93 00 00 00	 jmp	 $LN59@GetAttackD
$LN69@GetAttackD:

; 3762 : 	{
; 3763 : 		if ( bIsOnDuel )

  00936	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0093a	74 2b		 je	 SHORT $LN70@GetAttackD

; 3764 : 		{
; 3765 : 			ad = ( lpObj->m_AttackDamageRight ) * 60 / 100 - targetDefense;

  0093c	8b 87 54 06 00
	00		 mov	 eax, DWORD PTR [edi+1620]
  00942	8b c8		 mov	 ecx, eax
  00944	c1 e1 04	 shl	 ecx, 4
  00947	2b c8		 sub	 ecx, eax
  00949	c1 e1 02	 shl	 ecx, 2
  0094c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00951	f7 e9		 imul	 ecx
  00953	c1 fa 05	 sar	 edx, 5
  00956	8b da		 mov	 ebx, edx
  00958	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0095b	03 da		 add	 ebx, edx

; 3770 : 		}
; 3771 : 
; 3772 : 		if( lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength > 0.0f )

  0095d	f3 0f 10 8f f8
	06 00 00	 movss	 xmm1, DWORD PTR [edi+1784]

; 3773 : 		{
; 3774 : 			ad += lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength;
; 3775 : 		}
; 3776 : 	}

  00965	eb 47		 jmp	 SHORT $LN167@GetAttackD
$LN70@GetAttackD:

; 3766 : 		}
; 3767 : 		else
; 3768 : 		{
; 3769 : 			ad = lpObj->m_AttackDamageRight - targetDefense;

  00967	8b 9f 54 06 00
	00		 mov	 ebx, DWORD PTR [edi+1620]

; 3770 : 		}
; 3771 : 
; 3772 : 		if( lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength > 0.0f )

  0096d	f3 0f 10 8f f8
	06 00 00	 movss	 xmm1, DWORD PTR [edi+1784]

; 3773 : 		{
; 3774 : 			ad += lpObj->m_MPSkillOpt.MpsTwoHandSwordStrength;
; 3775 : 		}
; 3776 : 	}

  00975	eb 37		 jmp	 SHORT $LN167@GetAttackD
$LN55@GetAttackD:

; 3728 : 			 Left->m_Type == ITEMGET(4,23) )
; 3729 : 	{
; 3730 : 		if ( bIsOnDuel )

  00977	83 7d 14 00	 cmp	 DWORD PTR _bIsOnDuel$[ebp], 0
  0097b	74 23		 je	 SHORT $LN57@GetAttackD

; 3731 : 		{
; 3732 : 			ad = ( lpObj->m_AttackDamageLeft ) * 60 / 100 - targetDefense;

  0097d	8b 87 50 06 00
	00		 mov	 eax, DWORD PTR [edi+1616]
  00983	8b c8		 mov	 ecx, eax
  00985	c1 e1 04	 shl	 ecx, 4
  00988	2b c8		 sub	 ecx, eax
  0098a	c1 e1 02	 shl	 ecx, 2
  0098d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00992	f7 e9		 imul	 ecx
  00994	c1 fa 05	 sar	 edx, 5
  00997	8b da		 mov	 ebx, edx
  00999	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0099c	03 da		 add	 ebx, edx

; 3733 : 		}
; 3734 : 		else

  0099e	eb 06		 jmp	 SHORT $LN162@GetAttackD
$LN57@GetAttackD:

; 3735 : 		{
; 3736 : 			ad = lpObj->m_AttackDamageLeft - targetDefense;

  009a0	8b 9f 50 06 00
	00		 mov	 ebx, DWORD PTR [edi+1616]
$LN162@GetAttackD:

; 3737 : 		}
; 3738 : 
; 3739 : 		if( lpObj->m_MPSkillOpt.MpsBowStrength > 0.0f )

  009a6	f3 0f 10 8f 3c
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1852]
$LN167@GetAttackD:

; 3735 : 		{
; 3736 : 			ad = lpObj->m_AttackDamageLeft - targetDefense;

  009ae	2b 5d 0c	 sub	 ebx, DWORD PTR _targetDefense$[ebp]

; 3737 : 		}
; 3738 : 
; 3739 : 		if( lpObj->m_MPSkillOpt.MpsBowStrength > 0.0f )

  009b1	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@00000000
  009b8	76 0f		 jbe	 SHORT $LN59@GetAttackD
  009ba	66 0f 6e c3	 movd	 xmm0, ebx

; 3740 : 		{
; 3741 : 			ad += lpObj->m_MPSkillOpt.MpsBowStrength;

  009be	0f 5b c0	 cvtdq2ps xmm0, xmm0
  009c1	f3 0f 58 c1	 addss	 xmm0, xmm1
  009c5	f3 0f 2c d8	 cvttss2si ebx, xmm0
$LN59@GetAttackD:

; 3806 : 	}
; 3807 : 
; 3808 : 	if ( lpObj->SetOpTwoHandSwordImproveDamage )

  009c9	8a 87 ce 14 00
	00		 mov	 al, BYTE PTR [edi+5326]
  009cf	84 c0		 test	 al, al
  009d1	74 19		 je	 SHORT $LN83@GetAttackD

; 3809 : 	{
; 3810 : 		ad += ad * lpObj->SetOpTwoHandSwordImproveDamage  / 100;

  009d3	0f b6 c8	 movzx	 ecx, al
  009d6	0f af cb	 imul	 ecx, ebx
  009d9	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  009de	f7 e9		 imul	 ecx
  009e0	c1 fa 05	 sar	 edx, 5
  009e3	8b c2		 mov	 eax, edx
  009e5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  009e8	03 c2		 add	 eax, edx
  009ea	03 d8		 add	 ebx, eax
$LN83@GetAttackD:

; 3811 : 	}
; 3812 : 
; 3813 : 	int AddDamage = 0;
; 3814 : 	AddDamage = gObjGetTotalValueOfEffect(lpObj,ADD_OPTION_ATTACK_DAMAGE);

  009ec	6a 02		 push	 2
  009ee	57		 push	 edi
  009ef	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  009f4	8b f0		 mov	 esi, eax

; 3815 : 	AddDamage += gObjGetTotalValueOfEffect(lpObj,14);

  009f6	6a 0e		 push	 14			; 0000000eH
  009f8	57		 push	 edi
  009f9	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  009fe	83 c4 10	 add	 esp, 16			; 00000010H

; 3816 : 	ad += AddDamage;

  00a01	03 c6		 add	 eax, esi
  00a03	03 d8		 add	 ebx, eax

; 3817 : 	
; 3818 : 	if( lpObj->m_SkillAttack2 )

  00a05	83 bf 04 06 00
	00 00		 cmp	 DWORD PTR [edi+1540], 0
  00a0c	74 03		 je	 SHORT $LN84@GetAttackD

; 3819 : 	{
; 3820 : #ifdef __NOVUS__
; 3821 : 		ad += 15 + lpObj->Level / 2;
; 3822 : #else
; 3823 : 		ad += 15;

  00a0e	83 c3 0f	 add	 ebx, 15			; 0000000fH
$LN84@GetAttackD:

; 3824 : #endif
; 3825 : 	}
; 3826 : 
; 3827 : 	if ( lpObj->m_MonsterSkillElementInfo.m_iSkillElementAttackTime > 0 )

  00a11	83 bf 84 20 00
	00 00		 cmp	 DWORD PTR [edi+8324], 0
  00a18	7e 0e		 jle	 SHORT $LN86@GetAttackD

; 3828 : 	{
; 3829 : 		ad += lpObj->m_MonsterSkillElementInfo.m_iSkillElementAttack;

  00a1a	03 9f 80 20 00
	00		 add	 ebx, DWORD PTR [edi+8320]

; 3830 : 
; 3831 : 		if ( ad < 0 )

  00a20	b8 00 00 00 00	 mov	 eax, 0
  00a25	0f 48 d8	 cmovs	 ebx, eax
$LN86@GetAttackD:

; 3832 : 		{
; 3833 : 			ad = 0;
; 3834 : 		}
; 3835 : 	}
; 3836 : 
; 3837 : 	int ReduceDamage = 0;

  00a28	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _ReduceDamage$[ebp], 0

; 3838 : 	gObjGetValueOfBuffIndex(lpObj,BUFF_WEAKNESS,&ReduceDamage,0);

  00a2f	6a 00		 push	 0
  00a31	8d 45 b4	 lea	 eax, DWORD PTR _ReduceDamage$[ebp]
  00a34	50		 push	 eax
  00a35	6a 4c		 push	 76			; 0000004cH
  00a37	57		 push	 edi
  00a38	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  00a3d	83 c4 10	 add	 esp, 16			; 00000010H

; 3839 : 	ad -= ad * ReduceDamage / 100;

  00a40	8b 4d b4	 mov	 ecx, DWORD PTR _ReduceDamage$[ebp]
  00a43	0f af cb	 imul	 ecx, ebx
  00a46	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00a4b	f7 e9		 imul	 ecx
  00a4d	c1 fa 05	 sar	 edx, 5
  00a50	8b c2		 mov	 eax, edx
  00a52	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00a55	03 c2		 add	 eax, edx
  00a57	03 d8		 add	 ebx, eax
  00a59	0f 57 c0	 xorps	 xmm0, xmm0

; 3840 : 
; 3841 : 	float nAddAttackDamageLeft = 0;

  00a5c	f3 0f 11 45 0c	 movss	 DWORD PTR _nAddAttackDamageLeft$1$[ebp], xmm0

; 3842 : 	float nAddAttackDamageRight = 0;

  00a61	f3 0f 11 45 14	 movss	 DWORD PTR _nAddAttackDamageRight$1$[ebp], xmm0

; 3843 : 
; 3844 : 	switch( Left->GetDetailItemType() )

  00a66	8b 4d c0	 mov	 ecx, DWORD PTR _Left$[ebp]
  00a69	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00a6e	48		 dec	 eax
  00a6f	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00a72	77 4f		 ja	 SHORT $LN96@GetAttackD
  00a74	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN130@GetAttackD[eax]
  00a7b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN168@GetAttackD[eax*4]
$LN87@GetAttackD:

; 3845 : 	{
; 3846 : 	case 1:
; 3847 : 		if( lpObj->m_MPSkillOpt.MpsOneHandSwordStrength > 0.0f )

  00a82	f3 0f 10 8f fc
	06 00 00	 movss	 xmm1, DWORD PTR [edi+1788]

; 3848 : 		{
; 3849 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsOneHandSwordStrength;
; 3850 : 		}
; 3851 : 		break;

  00a8a	eb 26		 jmp	 SHORT $LN165@GetAttackD
$LN89@GetAttackD:

; 3852 : 	case 2:
; 3853 : 		if( lpObj->m_MPSkillOpt.MpsMaceStrength > 0.0f )

  00a8c	f3 0f 10 8f 00
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1792]

; 3854 : 		{
; 3855 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsMaceStrength;
; 3856 : 		}
; 3857 : 		break;

  00a94	eb 1c		 jmp	 SHORT $LN165@GetAttackD
$LN91@GetAttackD:

; 3858 : 	case 3:
; 3859 : 		if( lpObj->m_MPSkillOpt.MpsSpearStrength > 0.0f )

  00a96	f3 0f 10 8f 04
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1796]

; 3860 : 		{
; 3861 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsSpearStrength;
; 3862 : 		}
; 3863 : 		break;

  00a9e	eb 12		 jmp	 SHORT $LN165@GetAttackD
$LN93@GetAttackD:

; 3864 : 	case 11:
; 3865 : 		if( lpObj->m_MPSkillOpt.MpsScepterStrength > 0.0f )

  00aa0	f3 0f 10 8f b4
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1972]

; 3866 : 		{
; 3867 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsScepterStrength;
; 3868 : 		}
; 3869 : 		break;

  00aa8	eb 08		 jmp	 SHORT $LN165@GetAttackD
$LN95@GetAttackD:

; 3870 : 	case 12:
; 3871 : 		if( lpObj->m_MPSkillOpt.MpsFistStrength > 0.0f )

  00aaa	f3 0f 10 8f 24
	08 00 00	 movss	 xmm1, DWORD PTR [edi+2084]
$LN165@GetAttackD:
  00ab2	0f 57 c0	 xorps	 xmm0, xmm0
  00ab5	0f 2f c8	 comiss	 xmm1, xmm0
  00ab8	76 09		 jbe	 SHORT $LN96@GetAttackD

; 3872 : 		{
; 3873 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsFistStrength;

  00aba	f3 0f 58 c8	 addss	 xmm1, xmm0
  00abe	f3 0f 11 4d 0c	 movss	 DWORD PTR _nAddAttackDamageLeft$1$[ebp], xmm1
$LN96@GetAttackD:

; 3874 : 		}
; 3875 : 		break;
; 3876 : 	default:break;
; 3877 : 	}
; 3878 : 
; 3879 : 	switch( Right->GetDetailItemType() )

  00ac3	8b 4d bc	 mov	 ecx, DWORD PTR _Right$[ebp]
  00ac6	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00acb	48		 dec	 eax
  00acc	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00acf	77 61		 ja	 SHORT $LN139@GetAttackD
  00ad1	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN131@GetAttackD[eax]
  00ad8	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN169@GetAttackD[eax*4]
$LN98@GetAttackD:

; 3880 : 	{
; 3881 : 	case 1:
; 3882 : 		if( lpObj->m_MPSkillOpt.MpsOneHandSwordStrength > 0.0f )

  00adf	f3 0f 10 8f fc
	06 00 00	 movss	 xmm1, DWORD PTR [edi+1788]
$LN166@GetAttackD:
  00ae7	0f 57 db	 xorps	 xmm3, xmm3

; 3885 : 		}
; 3886 : 		break;

  00aea	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _nAddAttackDamageLeft$1$[ebp]

; 3880 : 	{
; 3881 : 	case 1:
; 3882 : 		if( lpObj->m_MPSkillOpt.MpsOneHandSwordStrength > 0.0f )

  00aef	0f 2f cb	 comiss	 xmm1, xmm3
  00af2	76 7d		 jbe	 SHORT $LN141@GetAttackD

; 3883 : 		{
; 3884 : 			nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsOneHandSwordStrength;

  00af4	f3 0f 58 cb	 addss	 xmm1, xmm3

; 3885 : 		}
; 3886 : 		break;

  00af8	eb 45		 jmp	 SHORT $LN107@GetAttackD
$LN100@GetAttackD:

; 3887 : 	case 2:
; 3888 : 		if( lpObj->m_MPSkillOpt.MpsMaceStrength > 0.0f )

  00afa	f3 0f 10 8f 00
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1792]

; 3889 : 		{
; 3890 : 			nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsMaceStrength;
; 3891 : 		}
; 3892 : 		break;

  00b02	eb e3		 jmp	 SHORT $LN166@GetAttackD
$LN102@GetAttackD:

; 3893 : 	case 3:
; 3894 : 		if( lpObj->m_MPSkillOpt.MpsSpearStrength > 0.0f )

  00b04	f3 0f 10 8f 04
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1796]

; 3895 : 		{
; 3896 : 			nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsSpearStrength;
; 3897 : 		}
; 3898 : 		break;

  00b0c	eb d9		 jmp	 SHORT $LN166@GetAttackD
$LN104@GetAttackD:

; 3899 : 	case 11:
; 3900 : 		if( lpObj->m_MPSkillOpt.MpsScepterStrength > 0.0f )

  00b0e	f3 0f 10 8f b4
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1972]

; 3901 : 		{
; 3902 : 			nAddAttackDamageRight += lpObj->m_MPSkillOpt.MpsScepterStrength;
; 3903 : 		}
; 3904 : 		break;

  00b16	eb cf		 jmp	 SHORT $LN166@GetAttackD
$LN106@GetAttackD:

; 3905 : 	case 12:
; 3906 : 		if( lpObj->m_MPSkillOpt.MpsFistStrength > 0.0f )

  00b18	f3 0f 10 a7 24
	08 00 00	 movss	 xmm4, DWORD PTR [edi+2084]
  00b20	0f 57 db	 xorps	 xmm3, xmm3

; 3907 : 		{
; 3908 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsFistStrength;

  00b23	0f 28 cb	 movaps	 xmm1, xmm3

; 3905 : 	case 12:
; 3906 : 		if( lpObj->m_MPSkillOpt.MpsFistStrength > 0.0f )

  00b26	0f 2f e3	 comiss	 xmm4, xmm3
  00b29	76 0f		 jbe	 SHORT $LN145@GetAttackD

; 3907 : 		{
; 3908 : 			nAddAttackDamageLeft += lpObj->m_MPSkillOpt.MpsFistStrength;

  00b2b	f3 0f 58 65 0c	 addss	 xmm4, DWORD PTR _nAddAttackDamageLeft$1$[ebp]
  00b30	eb 0d		 jmp	 SHORT $LN107@GetAttackD
$LN139@GetAttackD:
  00b32	0f 57 db	 xorps	 xmm3, xmm3
  00b35	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _nAddAttackDamageRight$1$[ebp]
$LN145@GetAttackD:
  00b3a	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _nAddAttackDamageLeft$1$[ebp]
$LN107@GetAttackD:

; 3909 : 		}
; 3910 : 		break;
; 3911 : 	default:break;
; 3912 : 	}
; 3913 : 
; 3914 : 	if( bTwoHandWeapon != 0 )

  00b3f	83 7d c8 00	 cmp	 DWORD PTR _bTwoHandWeapon$[ebp], 0
  00b43	74 31		 je	 SHORT $LN109@GetAttackD

; 3915 : 	{
; 3916 : 		ad += nAddAttackDamageRight*0.5+nAddAttackDamageLeft*0.5;

  00b45	0f 5a d1	 cvtps2pd xmm2, xmm1
  00b48	f2 0f 59 15 00
	00 00 00	 mulsd	 xmm2, QWORD PTR __real@3fe0000000000000
  00b50	0f 5a c4	 cvtps2pd xmm0, xmm4
  00b53	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00b5b	f2 0f 58 d0	 addsd	 xmm2, xmm0
  00b5f	66 0f 6e c3	 movd	 xmm0, ebx
  00b63	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00b67	f2 0f 58 d0	 addsd	 xmm2, xmm0
  00b6b	f2 0f 2c f2	 cvttsd2si esi, xmm2

; 3917 : 	}
; 3918 : 	else

  00b6f	eb 23		 jmp	 SHORT $LN110@GetAttackD
$LN141@GetAttackD:
  00b71	0f 28 cb	 movaps	 xmm1, xmm3
  00b74	eb c9		 jmp	 SHORT $LN107@GetAttackD
$LN109@GetAttackD:
  00b76	66 0f 6e c3	 movd	 xmm0, ebx

; 3919 : 	{
; 3920 : 		ad += nAddAttackDamageRight;

  00b7a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00b7d	f3 0f 58 c1	 addss	 xmm0, xmm1
  00b81	f3 0f 2c c0	 cvttss2si eax, xmm0
  00b85	66 0f 6e c0	 movd	 xmm0, eax

; 3921 : 		ad += nAddAttackDamageLeft;

  00b89	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00b8c	f3 0f 58 c4	 addss	 xmm0, xmm4
  00b90	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN110@GetAttackD:

; 3922 : 	}
; 3923 : 
; 3924 : 	if( lpObj->Class == CLASS_KNIGHT ||
; 3925 : 		lpObj->Class == CLASS_MAGUMSA ||
; 3926 : 		lpObj->Class == CLASS_DARKLORD || 

  00b94	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00b9b	83 f8 01	 cmp	 eax, 1
  00b9e	74 0f		 je	 SHORT $LN112@GetAttackD
  00ba0	83 f8 03	 cmp	 eax, 3
  00ba3	74 0a		 je	 SHORT $LN112@GetAttackD
  00ba5	83 f8 04	 cmp	 eax, 4
  00ba8	74 05		 je	 SHORT $LN112@GetAttackD
  00baa	83 f8 06	 cmp	 eax, 6
  00bad	75 1c		 jne	 SHORT $LN113@GetAttackD
$LN112@GetAttackD:

; 3927 : 		lpObj->Class == CLASS_FIGHTER )
; 3928 : 	{
; 3929 : 		if( lpObj->m_MPSkillOpt.MpsWeaponMastery > 0.0f )

  00baf	f3 0f 10 8f f0
	06 00 00	 movss	 xmm1, DWORD PTR [edi+1776]
  00bb7	0f 2f cb	 comiss	 xmm1, xmm3
  00bba	76 0f		 jbe	 SHORT $LN113@GetAttackD
  00bbc	66 0f 6e c6	 movd	 xmm0, esi

; 3930 : 		{
; 3931 : 			ad += lpObj->m_MPSkillOpt.MpsWeaponMastery;

  00bc0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00bc3	f3 0f 58 c1	 addss	 xmm0, xmm1
  00bc7	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN113@GetAttackD:

; 3932 : 		}
; 3933 : 	}
; 3934 : 
; 3935 : 	if( lpObj->Class == CLASS_ELF )

  00bcb	83 f8 02	 cmp	 eax, 2
  00bce	75 1c		 jne	 SHORT $LN115@GetAttackD

; 3936 : 	{
; 3937 : 		if( lpObj->m_MPSkillOpt.MpsWeaponMastery2 > 0.0f )

  00bd0	f3 0f 10 8f 54
	07 00 00	 movss	 xmm1, DWORD PTR [edi+1876]
  00bd8	0f 2f cb	 comiss	 xmm1, xmm3
  00bdb	76 0f		 jbe	 SHORT $LN115@GetAttackD
  00bdd	66 0f 6e c6	 movd	 xmm0, esi

; 3938 : 		{
; 3939 : 			ad += lpObj->m_MPSkillOpt.MpsWeaponMastery2;

  00be1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00be4	f3 0f 58 c1	 addss	 xmm0, xmm1
  00be8	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN115@GetAttackD:

; 3940 : 		}
; 3941 : 	}
; 3942 : 
; 3943 : 	if( lpObj->m_MPSkillOpt.MpsWingAttackIncrease > 0.0f )

  00bec	f3 0f 10 8f 4c
	08 00 00	 movss	 xmm1, DWORD PTR [edi+2124]
  00bf4	0f 2f cb	 comiss	 xmm1, xmm3
  00bf7	76 0f		 jbe	 SHORT $LN116@GetAttackD
  00bf9	66 0f 6e c6	 movd	 xmm0, esi

; 3944 : 	{
; 3945 : 		ad += lpObj->m_MPSkillOpt.MpsWingAttackIncrease;

  00bfd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00c00	f3 0f 58 c1	 addss	 xmm0, xmm1
  00c04	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN116@GetAttackD:

; 3946 : 	}
; 3947 : 
; 3948 : 	if( lpObj->m_MPSkillOpt.MpsCommandAttackInc > 0.0f )

  00c08	f3 0f 10 87 c8
	07 00 00	 movss	 xmm0, DWORD PTR [edi+1992]
  00c10	0f 2f c3	 comiss	 xmm0, xmm3
  00c13	76 4b		 jbe	 SHORT $LN118@GetAttackD

; 3949 : 	{
; 3950 : 		if( lpObj->pInventory[0].GetDetailItemType() == 11 ||

  00c15	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  00c1b	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00c20	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00c23	74 16		 je	 SHORT $LN119@GetAttackD
  00c25	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  00c2b	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00c31	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  00c36	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00c39	75 25		 jne	 SHORT $LN118@GetAttackD
$LN119@GetAttackD:

; 3951 : 			lpObj->pInventory[1].GetDetailItemType() == 11 )
; 3952 : 		{
; 3953 : 			int nAddAttack = (lpObj->Leadership+lpObj->AddLeadership)/lpObj->m_MPSkillOpt.MpsCommandAttackInc;

  00c3b	0f b7 97 f6 00
	00 00		 movzx	 edx, WORD PTR [edi+246]
  00c42	0f b7 8f f4 00
	00 00		 movzx	 ecx, WORD PTR [edi+244]
  00c49	03 d1		 add	 edx, ecx
  00c4b	66 0f 6e c2	 movd	 xmm0, edx
  00c4f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00c52	f3 0f 5e 87 c8
	07 00 00	 divss	 xmm0, DWORD PTR [edi+1992]
  00c5a	f3 0f 2c c8	 cvttss2si ecx, xmm0

; 3954 : 			ad += nAddAttack;

  00c5e	03 f1		 add	 esi, ecx
$LN118@GetAttackD:

; 3955 : 		}
; 3956 : 	}
; 3957 : 
; 3958 : 	return ad;

  00c60	8b c6		 mov	 eax, esi

; 3959 : }

  00c62	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00c65	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c6c	59		 pop	 ecx
  00c6d	5f		 pop	 edi
  00c6e	5e		 pop	 esi
  00c6f	5b		 pop	 ebx
  00c70	8b e5		 mov	 esp, ebp
  00c72	5d		 pop	 ebp
  00c73	c2 14 00	 ret	 20			; 00000014H
  00c76	66 90		 npad	 2
$LN168@GetAttackD:
  00c78	00 00 00 00	 DD	 $LN87@GetAttackD
  00c7c	00 00 00 00	 DD	 $LN89@GetAttackD
  00c80	00 00 00 00	 DD	 $LN91@GetAttackD
  00c84	00 00 00 00	 DD	 $LN93@GetAttackD
  00c88	00 00 00 00	 DD	 $LN95@GetAttackD
  00c8c	00 00 00 00	 DD	 $LN96@GetAttackD
$LN130@GetAttackD:
  00c90	00		 DB	 0
  00c91	01		 DB	 1
  00c92	02		 DB	 2
  00c93	05		 DB	 5
  00c94	05		 DB	 5
  00c95	05		 DB	 5
  00c96	05		 DB	 5
  00c97	05		 DB	 5
  00c98	05		 DB	 5
  00c99	05		 DB	 5
  00c9a	03		 DB	 3
  00c9b	04		 DB	 4
$LN169@GetAttackD:
  00c9c	00 00 00 00	 DD	 $LN98@GetAttackD
  00ca0	00 00 00 00	 DD	 $LN100@GetAttackD
  00ca4	00 00 00 00	 DD	 $LN102@GetAttackD
  00ca8	00 00 00 00	 DD	 $LN104@GetAttackD
  00cac	00 00 00 00	 DD	 $LN106@GetAttackD
  00cb0	00 00 00 00	 DD	 $LN139@GetAttackD
$LN131@GetAttackD:
  00cb4	00		 DB	 0
  00cb5	01		 DB	 1
  00cb6	02		 DB	 2
  00cb7	05		 DB	 5
  00cb8	05		 DB	 5
  00cb9	05		 DB	 5
  00cba	05		 DB	 5
  00cbb	05		 DB	 5
  00cbc	05		 DB	 5
  00cbd	05		 DB	 5
  00cbe	03		 DB	 3
  00cbf	04		 DB	 4
?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z ENDP ; CObjAttack::GetAttackDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z
_TEXT	SEGMENT
tv3265 = -384						; size = 4
tv3257 = -380						; size = 4
_bDamageReflect$1$ = -376				; size = 4
_Dexterity$1$ = -372					; size = 4
_iCurseValue$1 = -368					; size = 4
_bDragonKickSDAttackSuccess$1$ = -364			; size = 4
_iEquipmentPos$1$ = -360				; size = 4
_iEquipmentPos$1$ = -360				; size = 4
tv3275 = -360						; size = 4
_ManaChange$1$ = -356					; size = 4
_fSpringValue$2 = -356					; size = 4
_iDurEquipment$1$ = -352				; size = 4
_Vitality$1$ = -352					; size = 4
_iFenrirAttackDmg$2$ = -348				; size = 4
_iWizardSkillDefense$3 = -348				; size = 4
_bAllMiss$ = -344					; size = 4
_magicsend$1$ = -340					; size = 4
_nValue$4 = -336					; size = 4
_MSBFlag$1$ = -329					; size = 1
_lpEquipment$1$ = -328					; size = 4
_iDurEquipment$1$ = -328				; size = 4
_RestoreSD$1$ = -328					; size = 4
tv4541 = -328						; size = 4
_fSkillValue$5 = -328					; size = 4
_fDurDownRate$6 = -328					; size = 4
tv3322 = -328						; size = 4
_fRate$1$ = -324					; size = 4
_lpInfo$1$ = -324					; size = 4
_Strength$1$ = -324					; size = 4
_this$GSCopy$1$ = -320					; size = 4
_iTotalShieldDamage$1$ = -316				; size = 4
_MsgDamage$ = -312					; size = 4
_DecTime$1$ = -308					; size = 4
_DecTime$1$ = -308					; size = 4
_DecTime$1$ = -308					; size = 4
_DecTime$1$ = -308					; size = 4
_skillSuccess$1$ = -308					; size = 4
_targetdefense$1$ = -304				; size = 4
_iSkillValue$7 = -304					; size = 4
_Energy$1$ = -300					; size = 4
_lpTargetObj$GSCopy$1$ = -296				; size = 4
_Rate$1$ = -296						; size = 4
_Rate$1$ = -296						; size = 4
_Rate$1$ = -296						; size = 4
_Rate$1$ = -296						; size = 4
_RestoreMP$1$ = -296					; size = 4
_attackdamagebefore$1$ = -296				; size = 4
_lpCallObj$2$ = -296					; size = 4
_iManaRate$8 = -296					; size = 4
_lpMagic$GSCopy$1$ = -292				; size = 4
_skill$1$ = -288					; size = 4
_DecValue$1$ = -284					; size = 4
_DecValue$1$ = -284					; size = 4
_DecValue$1$ = -284					; size = 4
_DecValue$1$ = -284					; size = 4
_bIsOnDuel$1$ = -284					; size = 4
_AttackDamage$5$ = -284					; size = 4
_iSkillBrandValue1$9 = -284				; size = 4
_adddamage$10 = -284					; size = 4
_item_num$11 = -280					; size = 20
_szTmpMsg$12 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_lpMagic$ = 16						; size = 4
_magicsend$ = 20					; size = 4
_MSBFlag$ = 24						; size = 1
_AttackDamage$ = 28					; size = 4
_bCombo$ = 32						; size = 4
_byBarrageCount$ = 36					; size = 1
_byReflect$ = 40					; size = 1
?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z PROC ; CObjAttack::Attack, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _lpMagic$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0001a	57		 push	 edi
  0001b	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  0001e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], eax
  00024	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002a	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _lpTargetObj$GSCopy$1$[ebp], edi

; 64   : 	int skillSuccess = 0;
; 65   : 	LPOBJ lpCallObj;
; 66   : 	LPOBJ lpCallTargetObj;
; 67   : 	int MsgDamage = 0;
; 68   : 	int ManaChange = 0;
; 69   : 	int iTempShieldDamage = 0;
; 70   : 	int iTotalShieldDamage = 0;
; 71   : 	int bDragonKickSDAttackSuccess = 0;
; 72   : 
; 73   : 	if ( (lpTargetObj->Authority&2) == 2 )

  00030	8b 87 bc 01 00
	00		 mov	 eax, DWORD PTR [edi+444]
  00036	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _MsgDamage$[ebp], 0
  00040	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _ManaChange$1$[ebp], 0
  0004a	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iTotalShieldDamage$1$[ebp], 0
  00054	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bDragonKickSDAttackSuccess$1$[ebp], 0
  0005e	a8 02		 test	 al, 2
  00060	74 14		 je	 SHORT $LN20@Attack
$LN961@Attack:
  00062	5f		 pop	 edi

; 74   : 		return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  00066	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00069	33 cd		 xor	 ecx, ebp
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 24 00	 ret	 36			; 00000024H
$LN20@Attack:

; 75   : 
; 76   : 	if ( (lpObj->Authority&32) == 32 ||

  00076	f6 83 bc 01 00
	00 20		 test	 BYTE PTR [ebx+444], 32	; 00000020H
  0007d	75 04		 jne	 SHORT $LN22@Attack
  0007f	a8 20		 test	 al, 32			; 00000020H
  00081	74 0f		 je	 SHORT $LN23@Attack
$LN22@Attack:

; 77   : 		 (lpTargetObj->Authority&32) == 32 )
; 78   : 	{
; 79   : 		if( gObjCheckUsedBuffEffect(lpObj,BUFF_INVISIBILITY) == TRUE)

  00083	6a 12		 push	 18			; 00000012H
  00085	53		 push	 ebx
  00086	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0008b	83 c4 08	 add	 esp, 8
  0008e	3c 01		 cmp	 al, 1
  00090	74 d0		 je	 SHORT $LN961@Attack
$LN23@Attack:

; 80   : 		{
; 81   : 			return false;
; 82   : 		}
; 83   : 	}
; 84   : 
; 85   : 	if ( lpObj->MapNumber != lpTargetObj->MapNumber )

  00092	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  00098	3a 87 23 01 00
	00		 cmp	 al, BYTE PTR [edi+291]
  0009e	75 c2		 jne	 SHORT $LN961@Attack

; 91   : 	if (lpObj->Type == OBJ_USER && g_NewPVP.IsDuel(*lpObj) && g_NewPVP.IsSafeState(*lpObj)) {

  000a0	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  000a4	75 28		 jne	 SHORT $LN25@Attack
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  000a6	8b 8b 50 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4688]
  000ac	85 c9		 test	 ecx, ecx
  000ae	78 1e		 js	 SHORT $LN25@Attack
  000b0	33 c0		 xor	 eax, eax
  000b2	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  000b8	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp

; 91   : 	if (lpObj->Type == OBJ_USER && g_NewPVP.IsDuel(*lpObj) && g_NewPVP.IsSafeState(*lpObj)) {

  000bb	85 c0		 test	 eax, eax
  000bd	74 0f		 je	 SHORT $LN25@Attack
  000bf	53		 push	 ebx
  000c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  000c5	e8 00 00 00 00	 call	 ?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::IsSafeState
  000ca	85 c0		 test	 eax, eax
  000cc	75 94		 jne	 SHORT $LN961@Attack
$LN25@Attack:

; 95   : 	if (lpTargetObj->Type == OBJ_USER && g_NewPVP.IsDuel(*lpTargetObj) && g_NewPVP.IsSafeState(*lpTargetObj)) {

  000ce	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  000d2	75 2c		 jne	 SHORT $LN26@Attack
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 297  : 		return CHECK_LIMIT(obj.m_iDuelUser, OBJMAX);

  000d4	8b 8f 50 12 00
	00		 mov	 ecx, DWORD PTR [edi+4688]
  000da	85 c9		 test	 ecx, ecx
  000dc	78 22		 js	 SHORT $LN26@Attack
  000de	33 c0		 xor	 eax, eax
  000e0	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  000e6	0f 9e c0	 setle	 al
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp

; 95   : 	if (lpTargetObj->Type == OBJ_USER && g_NewPVP.IsDuel(*lpTargetObj) && g_NewPVP.IsSafeState(*lpTargetObj)) {

  000e9	85 c0		 test	 eax, eax
  000eb	74 13		 je	 SHORT $LN26@Attack
  000ed	57		 push	 edi
  000ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_NewPVP@@3VCNewPVP@@A ; g_NewPVP
  000f3	e8 00 00 00 00	 call	 ?IsSafeState@CNewPVP@@QAEHAAUOBJECTSTRUCT@@@Z ; CNewPVP::IsSafeState
  000f8	85 c0		 test	 eax, eax
  000fa	0f 85 62 ff ff
	ff		 jne	 $LN961@Attack
$LN26@Attack:

; 96   : 		return false;
; 97   : 	}
; 98   : #endif
; 99   : 
; 100  : #if (__GENS_SYSTEM__ == 1)
; 101  : 	if (!gGensSystem.GetFriendlyFire() && gGensSystem.GensMap(lpObj->MapNumber)) {

  00100	80 3d 38 00 00
	00 00		 cmp	 BYTE PTR ?gGensSystem@@3VCGensSystem@@A+56, 0
  00107	75 34		 jne	 SHORT $LN28@Attack
  00109	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  00110	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VCGensSystem@@A ; gGensSystem
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ?GensMap@CGensSystem@@QAEHH@Z ; CGensSystem::GensMap
  0011b	85 c0		 test	 eax, eax
  0011d	74 1e		 je	 SHORT $LN28@Attack

; 102  : 		if (lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER
; 103  : 			&& lpObj->m_GensInfo.btFamily == lpTargetObj->m_GensInfo.btFamily) {

  0011f	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00123	75 18		 jne	 SHORT $LN28@Attack
  00125	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00129	75 12		 jne	 SHORT $LN28@Attack
  0012b	8a 83 ac 26 00
	00		 mov	 al, BYTE PTR [ebx+9900]
  00131	3a 87 ac 26 00
	00		 cmp	 al, BYTE PTR [edi+9900]
  00137	0f 84 25 ff ff
	ff		 je	 $LN961@Attack
$LN28@Attack:

; 104  : 			return false;
; 105  : 		}
; 106  : 	}
; 107  : #endif
; 108  : 
; 109  : #if (GS_CASTLE == 1)
; 110  : 
; 111  : 	if(g_Crywolf.GetCrywolfState() == CRYWOLF_STATE_READY || g_Crywolf.GetCrywolfState() == CRYWOLF_STATE_END)

  0013d	a1 8c a8 0f 00	 mov	 eax, DWORD PTR ?g_Crywolf@@3VCCrywolf@@A+1026188
  00142	83 f8 03	 cmp	 eax, 3
  00145	74 05		 je	 SHORT $LN30@Attack
  00147	83 f8 05	 cmp	 eax, 5
  0014a	75 13		 jne	 SHORT $LN31@Attack
$LN30@Attack:

; 112  : 	{
; 113  : 		if( ((lpTargetObj->MapNumber == MAP_INDEX_CRYWOLF_FIRSTZONE) ? TRUE : FALSE) && lpTargetObj->Type == OBJ_MONSTER)

  0014c	80 bf 23 01 00
	00 22		 cmp	 BYTE PTR [edi+291], 34	; 00000022H
  00153	75 0a		 jne	 SHORT $LN31@Attack
  00155	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  00159	0f 84 03 ff ff
	ff		 je	 $LN961@Attack
$LN31@Attack:

; 114  : 		{
; 115  : 			return FALSE;
; 116  : 		}
; 117  : 	}
; 118  : 
; 119  : #endif
; 120  : 
; 121  : #if (ENABLETEST_ARCA)
; 122  : 	if (g_ArcaBattle.IsArcaBattleServer() && !g_AcheronGuardianEvent.IsPlayStart() )
; 123  : 	{
; 124  : 		if (lpObj->Type == 1 && lpTargetObj->Type == 1 && !g_ArcaBattle.IsPkEnable(*lpObj, *lpTargetObj))
; 125  : 		  return 0;
; 126  : 
; 127  : 		if (lpObj->Type == 1 && lpTargetObj->Type == 2 && !g_ArcaBattle.IsEnableAttackObelisk(*lpObj, lpTargetObj->Class))
; 128  : 		  return 0;
; 129  : 
; 130  : 		if (lpObj->Type == 2 && lpTargetObj->Type == 2 && lpObj->m_Attribute == 100 
; 131  : 			&& !g_ArcaBattle.IsEnableAttackObelisk(*lpObj, lpTargetObj->Class))
; 132  : 		{
; 133  : 			//lpObj->m_ActState._bf0 &= 0xFFFF00FFu;
; 134  : 			//lpObj->m_ActState._bf0 &= 0xFFFFFF0Fu;
; 135  : 			return 0;
; 136  : 		}
; 137  : 	}
; 138  : #endif
; 139  : 
; 140  : 	if ( g_iUseCharacterAutoRecuperationSystem && lpObj->Level <= g_iCharacterRecuperationMaxLevel )

  0015f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iUseCharacterAutoRecuperationSystem@@3HA, 0 ; g_iUseCharacterAutoRecuperationSystem
  00166	56		 push	 esi
  00167	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetTickCount@0
  0016d	74 3e		 je	 SHORT $LN36@Attack
  0016f	0f bf 83 96 00
	00 00		 movsx	 eax, WORD PTR [ebx+150]
  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCharacterRecuperationMaxLevel@@3HA ; g_iCharacterRecuperationMaxLevel
  0017c	3b c1		 cmp	 eax, ecx
  0017e	7f 2d		 jg	 SHORT $LN36@Attack

; 141  : 	{
; 142  : 		if ( lpObj->Type == OBJ_USER )

  00180	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00184	75 0e		 jne	 SHORT $LN34@Attack

; 143  : 		{
; 144  : 			if ( lpObj->Level <= g_iCharacterRecuperationMaxLevel ) // #warning useless code
; 145  : 			{
; 146  : 				lpObj->m_iAutoRecuperationTime = GetTickCount();

  00186	ff d6		 call	 esi
  00188	89 83 20 24 00
	00		 mov	 DWORD PTR [ebx+9248], eax
  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_iCharacterRecuperationMaxLevel@@3HA ; g_iCharacterRecuperationMaxLevel
$LN34@Attack:

; 147  : 			}
; 148  : 		}
; 149  : 
; 150  : 		if ( lpTargetObj->Type == OBJ_USER )

  00194	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00198	75 13		 jne	 SHORT $LN36@Attack

; 151  : 		{
; 152  : 			if ( lpTargetObj->Level <= g_iCharacterRecuperationMaxLevel )

  0019a	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  001a1	3b c1		 cmp	 eax, ecx
  001a3	7f 08		 jg	 SHORT $LN36@Attack

; 153  : 			{
; 154  : 				lpTargetObj->m_iAutoRecuperationTime = GetTickCount();

  001a5	ff d6		 call	 esi
  001a7	89 87 20 24 00
	00		 mov	 DWORD PTR [edi+9248], eax
$LN36@Attack:

; 155  : 			}
; 156  : 		}
; 157  : 	}
; 158  : 
; 159  : 	if ( lpObj->Type == OBJ_USER )

  001ad	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  001b1	75 08		 jne	 SHORT $LN37@Attack

; 160  : 		lpObj->dwShieldAutoRefillTimer = GetTickCount();

  001b3	ff d6		 call	 esi
  001b5	89 83 44 01 00
	00		 mov	 DWORD PTR [ebx+324], eax
$LN37@Attack:

; 161  : 
; 162  : 	if ( lpTargetObj->Type == OBJ_USER )

  001bb	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  001bf	75 08		 jne	 SHORT $LN38@Attack

; 163  : 		lpTargetObj->dwShieldAutoRefillTimer = GetTickCount();

  001c1	ff d6		 call	 esi
  001c3	89 87 44 01 00
	00		 mov	 DWORD PTR [edi+324], eax
$LN38@Attack:

; 164  : 
; 165  : 	int skill = 0;
; 166  : 	
; 167  : 	if ( lpMagic )

  001c9	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  001cf	33 c0		 xor	 eax, eax
  001d1	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _skill$1$[ebp], eax
  001d7	85 c9		 test	 ecx, ecx
  001d9	74 09		 je	 SHORT $LN39@Attack

; 168  : 		skill = lpMagic->m_Skill;

  001db	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001de	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _skill$1$[ebp], eax
$LN39@Attack:

; 169  : 
; 170  : 	if ( lpObj->Class == 77 )

  001e4	66 83 bb 90 00
	00 00 4d	 cmp	 WORD PTR [ebx+144], 77	; 0000004dH
  001ec	b9 03 00 00 00	 mov	 ecx, 3
  001f1	75 15		 jne	 SHORT $LN41@Attack

; 171  : 	{
; 172  : 		if ( lpObj->m_SkyBossMonSheild && skill == 17 )

  001f3	83 bb 5c 14 00
	00 00		 cmp	 DWORD PTR [ebx+5212], 0
  001fa	74 0c		 je	 SHORT $LN41@Attack
  001fc	83 f8 11	 cmp	 eax, 17			; 00000011H
  001ff	0f 44 c1	 cmove	 eax, ecx
  00202	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _skill$1$[ebp], eax
$LN41@Attack:

; 173  : 		{
; 174  : 			skill = 3;
; 175  : 		}
; 176  : 	}
; 177  : 
; 178  : 	skillSuccess = TRUE;
; 179  : 
; 180  : 	if ( lpObj->GuildNumber > 0 )

  00208	83 bb 14 06 00
	00 00		 cmp	 DWORD PTR [ebx+1556], 0
  0020f	7e 55		 jle	 SHORT $LN49@Attack

; 181  : 	{
; 182  : 		if ( lpObj->lpGuild )

  00211	8b 83 18 06 00
	00		 mov	 eax, DWORD PTR [ebx+1560]
  00217	85 c0		 test	 eax, eax
  00219	74 4b		 je	 SHORT $LN49@Attack

; 183  : 		{
; 184  : 			if ( lpObj->lpGuild->WarState )

  0021b	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  00222	74 1b		 je	 SHORT $LN46@Attack

; 185  : 			{
; 186  : 				if ( lpObj->lpGuild->WarType == 1 )

  00224	80 b8 92 05 00
	00 01		 cmp	 BYTE PTR [eax+1426], 1
  0022b	75 12		 jne	 SHORT $LN46@Attack

; 187  : 				{
; 188  : 					if ( !GetBattleSoccerGoalMove(0) )

  0022d	6a 00		 push	 0
  0022f	e8 00 00 00 00	 call	 ?GetBattleSoccerGoalMove@@YAHH@Z ; GetBattleSoccerGoalMove
  00234	83 c4 04	 add	 esp, 4
  00237	85 c0		 test	 eax, eax
  00239	0f 84 65 49 00
	00		 je	 $LN739@Attack
$LN46@Attack:

; 189  : 					{
; 190  : 						return TRUE;
; 191  : 					}
; 192  : 				}
; 193  : 			}
; 194  : 
; 195  : 			if ( lpObj->lpGuild->WarState )

  0023f	8b 83 18 06 00
	00		 mov	 eax, DWORD PTR [ebx+1560]
  00245	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  0024c	74 18		 je	 SHORT $LN49@Attack

; 196  : 			{
; 197  : 				if ( lpObj->lpGuild->WarType == 0 )

  0024e	80 b8 92 05 00
	00 00		 cmp	 BYTE PTR [eax+1426], 0
  00255	75 0f		 jne	 SHORT $LN49@Attack

; 198  : 				{
; 199  : 					if ( lpTargetObj->Type == OBJ_MONSTER )

  00257	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  0025b	0f 85 57 01 00
	00		 jne	 $LN65@Attack

; 200  : 					{
; 201  : 						return TRUE;

  00261	e9 3e 49 00 00	 jmp	 $LN739@Attack
$LN49@Attack:

; 202  : 					}
; 203  : 				}
; 204  : 			}
; 205  : 		}
; 206  : 	}
; 207  : 
; 208  : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  00266	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  0026a	0f 85 48 01 00
	00		 jne	 $LN65@Attack

; 209  : 	{
; 210  : 		if ( lpTargetObj->m_iMonsterBattleDelay > 0 )

  00270	80 bf a9 05 00
	00 00		 cmp	 BYTE PTR [edi+1449], 0
  00277	0f 8f 27 49 00
	00		 jg	 $LN739@Attack

; 211  : 			return TRUE;
; 212  : 
; 213  : 		if ( lpTargetObj->Class == 200 )

  0027d	b8 c8 00 00 00	 mov	 eax, 200		; 000000c8H
  00282	66 39 87 90 00
	00 00		 cmp	 WORD PTR [edi+144], ax
  00289	75 3a		 jne	 SHORT $LN52@Attack

; 214  : 		{
; 215  : 			if ( skill )

  0028b	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]

; 216  : 			{
; 217  : 				gObjMonsterStateProc(lpTargetObj, 7, lpObj->m_Index, 0);

  00291	6a 00		 push	 0
  00293	ff 33		 push	 DWORD PTR [ebx]
  00295	85 f6		 test	 esi, esi
  00297	74 04		 je	 SHORT $LN53@Attack
  00299	6a 07		 push	 7

; 218  : 			}
; 219  : 			else

  0029b	eb 02		 jmp	 SHORT $LN884@Attack
$LN53@Attack:

; 220  : 			{
; 221  : 				gObjMonsterStateProc(lpTargetObj, 6, lpObj->m_Index, 0);

  0029d	6a 06		 push	 6
$LN884@Attack:
  0029f	57		 push	 edi
  002a0	e8 00 00 00 00	 call	 ?gObjMonsterStateProc@@YAXPAUOBJECTSTRUCT@@HHH@Z ; gObjMonsterStateProc
  002a5	83 c4 10	 add	 esp, 16			; 00000010H

; 222  : 			}
; 223  : 
; 224  : 			if ( magicsend )

  002a8	83 7d 14 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  002ac	0f 84 f2 48 00
	00		 je	 $LN739@Attack

; 225  : 			{
; 226  : 				GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  002b2	6a 01		 push	 1
  002b4	ff 37		 push	 DWORD PTR [edi]
  002b6	56		 push	 esi
  002b7	53		 push	 ebx
  002b8	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  002bd	83 c4 10	 add	 esp, 16			; 00000010H

; 227  : 			}
; 228  : 
; 229  : 			return TRUE;

  002c0	e9 df 48 00 00	 jmp	 $LN739@Attack
$LN52@Attack:

; 230  : 		}
; 231  : 
; 232  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_MONSTERMAGIC_RESIST) == TRUE )

  002c5	6a 3f		 push	 63			; 0000003fH
  002c7	57		 push	 edi
  002c8	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  002cd	83 c4 08	 add	 esp, 8
  002d0	3c 01		 cmp	 al, 1
  002d2	75 33		 jne	 SHORT $LN57@Attack

; 233  : 		{
; 234  : 			BOOL bCheckAttackIsMagicType = gObjCheckAttackTypeMagic(lpObj->Class, skill);

  002d4	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  002da	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 ?gObjCheckAttackTypeMagic@@YAHHH@Z ; gObjCheckAttackTypeMagic
  002e7	83 c4 08	 add	 esp, 8

; 235  : 
; 236  : 			if ( bCheckAttackIsMagicType == 1 )

  002ea	83 f8 01	 cmp	 eax, 1
  002ed	75 18		 jne	 SHORT $LN57@Attack

; 237  : 			{
; 238  : 				GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, 0);

  002ef	6a 00		 push	 0
  002f1	ff 37		 push	 DWORD PTR [edi]
  002f3	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  002f9	53		 push	 ebx
  002fa	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  002ff	83 c4 10	 add	 esp, 16			; 00000010H

; 239  : 				return TRUE;

  00302	e9 9d 48 00 00	 jmp	 $LN739@Attack
$LN57@Attack:

; 240  : 			}
; 241  : 		}
; 242  : 
; 243  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_MONCHEMISTRY_RESIST) == TRUE  )

  00307	6a 40		 push	 64			; 00000040H
  00309	57		 push	 edi
  0030a	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0030f	83 c4 08	 add	 esp, 8
  00312	3c 01		 cmp	 al, 1
  00314	75 31		 jne	 SHORT $LN59@Attack

; 244  : 		{
; 245  : 			BOOL bCheckAttackIsMagicType = gObjCheckAttackTypeMagic(lpObj->Class, skill);

  00316	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  0031c	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00323	50		 push	 eax
  00324	e8 00 00 00 00	 call	 ?gObjCheckAttackTypeMagic@@YAHHH@Z ; gObjCheckAttackTypeMagic
  00329	83 c4 08	 add	 esp, 8

; 246  : 
; 247  : 			if ( bCheckAttackIsMagicType == 0 )

  0032c	85 c0		 test	 eax, eax
  0032e	75 17		 jne	 SHORT $LN59@Attack

; 248  : 			{
; 249  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, 0, 0);

  00330	50		 push	 eax
  00331	50		 push	 eax
$LN954@Attack:
  00332	6a 00		 push	 0
  00334	6a 00		 push	 0
  00336	ff 37		 push	 DWORD PTR [edi]
  00338	ff 33		 push	 DWORD PTR [ebx]
  0033a	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0033f	83 c4 18	 add	 esp, 24			; 00000018H

; 250  : 				return TRUE;

  00342	e9 5d 48 00 00	 jmp	 $LN739@Attack
$LN59@Attack:

; 251  : 			}
; 252  : 		}
; 253  : 
; 254  : 
; 255  : 		if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementImmuneTime > 0 )

  00347	83 bf b0 20 00
	00 00		 cmp	 DWORD PTR [edi+8368], 0
  0034e	7e 12		 jle	 SHORT $LN61@Attack

; 256  : 		{
; 257  : 			if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementImmuneNumber == skill )

  00350	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$1$[ebp]
  00356	39 87 ac 20 00
	00		 cmp	 DWORD PTR [edi+8364], eax
  0035c	0f 84 42 48 00
	00		 je	 $LN739@Attack
$LN61@Attack:

; 258  : 			{
; 259  : 				return TRUE;
; 260  : 			}
; 261  : 		}
; 262  : 
; 263  : 		if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementSpecialImmuneTime > 0 )

  00362	83 bf c8 20 00
	00 00		 cmp	 DWORD PTR [edi+8392], 0
  00369	7e 06		 jle	 SHORT $LN62@Attack

; 264  : 		{
; 265  : 			int MSBDamage = 32;
; 266  : 			GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, MSBDamage, 0);

  0036b	6a 00		 push	 0
  0036d	6a 20		 push	 32			; 00000020H

; 267  : 			return TRUE;

  0036f	eb c1		 jmp	 SHORT $LN954@Attack
$LN62@Attack:

; 268  : 		}
; 269  : 
; 270  : 		if ( lpTargetObj->Class == 523 )

  00371	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  00378	b9 0b 02 00 00	 mov	 ecx, 523		; 0000020bH
  0037d	66 3b c1	 cmp	 ax, cx
  00380	0f 84 1e 48 00
	00		 je	 $LN739@Attack

; 271  : 			return true;
; 272  : 
; 273  : 		if ( lpTargetObj->Class >= 524 && lpTargetObj->Class <= 528 && lpTargetObj->Class != 526 )

  00386	b9 0c 02 00 00	 mov	 ecx, 524		; 0000020cH
  0038b	66 3b c1	 cmp	 ax, cx
  0038e	72 28		 jb	 SHORT $LN65@Attack
  00390	b9 10 02 00 00	 mov	 ecx, 528		; 00000210H
  00395	66 3b c1	 cmp	 ax, cx
  00398	77 1e		 ja	 SHORT $LN65@Attack
  0039a	b9 0e 02 00 00	 mov	 ecx, 526		; 0000020eH
  0039f	66 3b c1	 cmp	 ax, cx
  003a2	74 14		 je	 SHORT $LN65@Attack

; 274  : 		{
; 275  : 			if( !g_ImperialGuardian.IsAttackAbleMonster(lpTargetObj->m_Index) )

  003a4	ff 37		 push	 DWORD PTR [edi]
  003a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ImperialGuardian@@3VCImperialGuardian@@A ; g_ImperialGuardian
  003ab	e8 00 00 00 00	 call	 ?IsAttackAbleMonster@CImperialGuardian@@QAE_NH@Z ; CImperialGuardian::IsAttackAbleMonster
  003b0	84 c0		 test	 al, al
  003b2	0f 84 ec 47 00
	00		 je	 $LN739@Attack
$LN65@Attack:

; 276  : 				return true;
; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	if ( lpObj->Type == OBJ_USER )

  003b8	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  003bc	75 26		 jne	 SHORT $LN66@Attack

; 281  : 	{
; 282  : 		if ( !gObjIsConnected(lpObj) )

  003be	53		 push	 ebx
  003bf	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  003c4	83 c4 04	 add	 esp, 4
  003c7	85 c0		 test	 eax, eax
  003c9	0f 84 86 38 00
	00		 je	 $LN956@Attack

; 283  : 		{
; 284  : 			return FALSE;
; 285  : 		}
; 286  : 
; 287  : 		gDarkSpirit[lpObj->m_Index].SetTarget(lpTargetObj->m_Index);

  003cf	8b 03		 mov	 eax, DWORD PTR [ebx]
  003d1	ff 37		 push	 DWORD PTR [edi]
  003d3	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  003d6	c1 e1 04	 shl	 ecx, 4
  003d9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?gDarkSpirit@@3PAVCDarkSpirit@@A ; gDarkSpirit
  003df	e8 00 00 00 00	 call	 ?SetTarget@CDarkSpirit@@QAEXH@Z ; CDarkSpirit::SetTarget
$LN66@Attack:

; 288  : 	}
; 289  : 
; 290  : 	if ( lpTargetObj->Type == OBJ_USER )

  003e4	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  003e8	75 11		 jne	 SHORT $LN69@Attack

; 291  : 	{
; 292  : 		if ( !gObjIsConnected(lpTargetObj))

  003ea	57		 push	 edi
  003eb	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHPAUOBJECTSTRUCT@@@Z ; gObjIsConnected
  003f0	83 c4 04	 add	 esp, 4
  003f3	85 c0		 test	 eax, eax
  003f5	0f 84 5a 38 00
	00		 je	 $LN956@Attack
$LN69@Attack:

; 293  : 		{
; 294  : 			return FALSE;
; 295  : 		}
; 296  : 	}
; 297  : 
; 298  : 	if(lpObj->m_RecallMon == lpTargetObj->m_Index)

  003fb	8b 83 30 06 00
	00		 mov	 eax, DWORD PTR [ebx+1584]
  00401	3b 07		 cmp	 eax, DWORD PTR [edi]
  00403	75 14		 jne	 SHORT $LN73@Attack

; 299  : 
; 300  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )	// PLAYER VS MONSTER

  00405	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00409	75 0e		 jne	 SHORT $LN73@Attack
  0040b	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  0040f	75 08		 jne	 SHORT $LN73@Attack

; 301  : 	{
; 302  : 		if ( lpObj->m_RecallMon >= 0 )

  00411	85 c0		 test	 eax, eax
  00413	0f 89 3c 38 00
	00		 jns	 $LN956@Attack
$LN73@Attack:

; 303  : 		{
; 304  : 			if ( lpObj->m_RecallMon == lpTargetObj->m_Index )
; 305  : 			{
; 306  : 				return FALSE;
; 307  : 			}
; 308  : 		}
; 309  : 	}
; 310  : 	
; 311  : 	if ( !gObjAttackQ(lpTargetObj))

  00419	57		 push	 edi
  0041a	e8 00 00 00 00	 call	 ?gObjAttackQ@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAttackQ
  0041f	83 c4 04	 add	 esp, 4
  00422	85 c0		 test	 eax, eax
  00424	0f 84 2b 38 00
	00		 je	 $LN956@Attack

; 312  : 	{
; 313  : 		return FALSE;
; 314  : 	}
; 315  : 
; 316  : 	if ( lpObj->m_RecallMon >= 0 )

  0042a	83 bb 30 06 00
	00 00		 cmp	 DWORD PTR [ebx+1584], 0
  00431	7c 0b		 jl	 SHORT $LN75@Attack

; 317  : 		gObjCallMonsterSetEnemy(lpObj, lpTargetObj->m_Index);

  00433	ff 37		 push	 DWORD PTR [edi]
  00435	53		 push	 ebx
  00436	e8 00 00 00 00	 call	 ?gObjCallMonsterSetEnemy@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjCallMonsterSetEnemy
  0043b	83 c4 08	 add	 esp, 8
$LN75@Attack:

; 318  : 
; 319  : 	if ( AttackDamage == 0 )

  0043e	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  00442	75 3e		 jne	 SHORT $LN79@Attack

; 320  : 	{
; 321  : 		if ( skill != 76 )

  00444	83 bd e0 fe ff
	ff 4c		 cmp	 DWORD PTR _skill$1$[ebp], 76 ; 0000004cH
  0044b	74 35		 je	 SHORT $LN79@Attack

; 322  : 		{
; 323  : 			if ( gObjCheckUsedBuffEffect(lpObj,BUFF_INFINITY_ARROW) == FALSE &&

  0044d	6a 06		 push	 6
  0044f	53		 push	 ebx
  00450	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00455	83 c4 08	 add	 esp, 8
  00458	84 c0		 test	 al, al
  0045a	75 26		 jne	 SHORT $LN79@Attack
  0045c	68 8f 00 00 00	 push	 143			; 0000008fH
  00461	53		 push	 ebx
  00462	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00467	83 c4 08	 add	 esp, 8
  0046a	84 c0		 test	 al, al
  0046c	75 14		 jne	 SHORT $LN79@Attack

; 324  : 				 gObjCheckUsedBuffEffect(lpObj,BUFF_INFINITY_ARROW2) == FALSE )
; 325  : 			{
; 326  : 				if ( !this->DecreaseArrow(lpObj) )

  0046e	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00474	53		 push	 ebx
  00475	e8 00 00 00 00	 call	 ?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::DecreaseArrow
  0047a	85 c0		 test	 eax, eax
  0047c	0f 84 d3 37 00
	00		 je	 $LN956@Attack
$LN79@Attack:

; 327  : 				{
; 328  : 					return FALSE;
; 329  : 				}
; 330  : 			}
; 331  : 		}
; 332  : 	}
; 333  : 
; 334  : 	if ( this->CheckAttackArea(lpObj, lpTargetObj) == FALSE )

  00482	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00488	57		 push	 edi
  00489	53		 push	 ebx
  0048a	e8 00 00 00 00	 call	 ?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::CheckAttackArea
  0048f	85 c0		 test	 eax, eax
  00491	0f 84 be 37 00
	00		 je	 $LN956@Attack

; 335  : 	{
; 336  : 		return FALSE;
; 337  : 	}
; 338  : 
; 339  : 	lpCallObj = lpObj;
; 340  : 
; 341  : 	if ( lpObj->Type == OBJ_MONSTER )

  00497	80 7b 50 02	 cmp	 BYTE PTR [ebx+80], 2
  0049b	8b c3		 mov	 eax, ebx
  0049d	75 16		 jne	 SHORT $LN82@Attack

; 342  : 	{
; 343  : 		if ( lpObj->m_RecallMon >= 0 )

  0049f	8b 8b 30 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1584]
  004a5	85 c9		 test	 ecx, ecx
  004a7	78 0c		 js	 SHORT $LN82@Attack

; 344  : 		{
; 345  : 			lpCallObj = &gObj[lpObj->m_RecallMon];

  004a9	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  004af	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
$LN82@Attack:

; 346  : 		}
; 347  : 	}
; 348  : 
; 349  : 	lpCallTargetObj = lpTargetObj;
; 350  : 
; 351  : 	if ( lpTargetObj->Type == OBJ_MONSTER )
; 352  : 	{
; 353  : 		if ( lpTargetObj->m_RecallMon >= 0 )
; 354  : 		{
; 355  : 			lpCallTargetObj = &gObj[lpTargetObj->m_RecallMon];
; 356  : 		}
; 357  : 	}
; 358  : 
; 359  : 	if ( this->PkCheck(lpCallObj, lpTargetObj) == FALSE )

  004b5	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  004bb	57		 push	 edi
  004bc	50		 push	 eax
  004bd	e8 00 00 00 00	 call	 ?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::PkCheck
  004c2	85 c0		 test	 eax, eax
  004c4	0f 84 8b 37 00
	00		 je	 $LN956@Attack

; 360  : 		return FALSE;
; 361  : 
; 362  : 	int Strength = lpObj->Strength + lpObj->AddStrength;

  004ca	0f b7 83 d0 00
	00 00		 movzx	 eax, WORD PTR [ebx+208]
  004d1	0f b7 8b fc 00
	00 00		 movzx	 ecx, WORD PTR [ebx+252]
  004d8	03 c8		 add	 ecx, eax

; 363  : 	int Dexterity = lpObj->Dexterity + lpObj->AddDexterity;

  004da	0f b7 83 d2 00
	00 00		 movzx	 eax, WORD PTR [ebx+210]
  004e1	89 8d bc fe ff
	ff		 mov	 DWORD PTR _Strength$1$[ebp], ecx
  004e7	0f b7 8b fe 00
	00 00		 movzx	 ecx, WORD PTR [ebx+254]
  004ee	03 c8		 add	 ecx, eax

; 364  : 	int Vitality = lpObj->Vitality + lpObj->AddVitality;

  004f0	0f b7 83 d4 00
	00 00		 movzx	 eax, WORD PTR [ebx+212]
  004f7	89 8d 8c fe ff
	ff		 mov	 DWORD PTR _Dexterity$1$[ebp], ecx
  004fd	0f b7 8b 00 01
	00 00		 movzx	 ecx, WORD PTR [ebx+256]
  00504	03 c8		 add	 ecx, eax

; 365  : 	int Energy = lpObj->Energy + lpObj->AddEnergy;

  00506	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  0050d	89 8d a0 fe ff
	ff		 mov	 DWORD PTR _Vitality$1$[ebp], ecx
  00513	0f b7 8b 02 01
	00 00		 movzx	 ecx, WORD PTR [ebx+258]
  0051a	03 c8		 add	 ecx, eax

; 366  : 	BOOL bIsOnDuel = gObjDuelCheck(lpObj, lpTargetObj);

  0051c	57		 push	 edi
  0051d	53		 push	 ebx
  0051e	89 8d d4 fe ff
	ff		 mov	 DWORD PTR _Energy$1$[ebp], ecx
  00524	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  00529	83 c4 08	 add	 esp, 8
  0052c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _bIsOnDuel$1$[ebp], eax

; 367  : 
; 368  : #if (CUSTOM_OLYMP!=1)
; 369  : 	if ( bIsOnDuel )

  00532	85 c0		 test	 eax, eax
  00534	74 10		 je	 SHORT $LN86@Attack

; 370  : 	{
; 371  : 		lpObj->m_iDuelTickCount = GetTickCount();

  00536	ff d6		 call	 esi
  00538	89 83 58 12 00
	00		 mov	 DWORD PTR [ebx+4696], eax

; 372  : 		lpTargetObj->m_iDuelTickCount = GetTickCount();

  0053e	ff d6		 call	 esi
  00540	89 87 58 12 00
	00		 mov	 DWORD PTR [edi+4696], eax
$LN86@Attack:

; 373  : 	}
; 374  : #endif
; 375  : 
; 376  : 	if ( lpObj->pInventory[0].m_Type == ITEMGET(2,5) && lpObj->pInventory[0].m_IsValidItem != false )	// Crystal Sword

  00546	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  0054c	b9 05 04 00 00	 mov	 ecx, 1029		; 00000405H
  00551	66 39 48 06	 cmp	 WORD PTR [eax+6], cx
  00555	75 3b		 jne	 SHORT $LN87@Attack
  00557	80 b8 ac 00 00
	00 00		 cmp	 BYTE PTR [eax+172], 0
  0055e	74 32		 je	 SHORT $LN87@Attack
$LN885@Attack:

; 377  : 	{
; 378  : 		if ( (rand()%20) == 0 )

  00560	e8 00 00 00 00	 call	 _rand
  00565	99		 cdq
  00566	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0056b	f7 f9		 idiv	 ecx
  0056d	85 d2		 test	 edx, edx
  0056f	75 33		 jne	 SHORT $LN824@Attack

; 379  : 		{
; 380  : 			skill = 7;

  00571	b8 07 00 00 00	 mov	 eax, 7

; 381  : 			lpMagic = &DefMagicInf[7];

  00576	c7 85 dc fe ff
	ff a8 00 00 00	 mov	 DWORD PTR _lpMagic$GSCopy$1$[ebp], OFFSET ?DefMagicInf@@3PAVCMagicInf@@A+168
  00580	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _skill$1$[ebp], eax

; 382  : 			magicsend = 1;

  00586	c7 85 ac fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _magicsend$1$[ebp], 1

; 383  : 		}
; 384  : 	}

  00590	eb 21		 jmp	 SHORT $LN91@Attack
$LN87@Attack:

; 385  : 	else if ( lpObj->pInventory[1].m_Type == ITEMGET(2,5) && lpObj->pInventory[1].m_IsValidItem != false )	// Crystal Sword

  00592	66 39 88 da 00
	00 00		 cmp	 WORD PTR [eax+218], cx
  00599	75 09		 jne	 SHORT $LN824@Attack
  0059b	80 b8 80 01 00
	00 00		 cmp	 BYTE PTR [eax+384], 0
  005a2	75 bc		 jne	 SHORT $LN885@Attack
$LN824@Attack:

; 386  : 	{
; 387  : 		if ( (rand()%20) == 0 )
; 388  : 		{
; 389  : 			skill = 7;
; 390  : 			lpMagic = &DefMagicInf[7];
; 391  : 			magicsend = 1;

  005a4	8b 45 14	 mov	 eax, DWORD PTR _magicsend$[ebp]
  005a7	89 85 ac fe ff
	ff		 mov	 DWORD PTR _magicsend$1$[ebp], eax
  005ad	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$1$[ebp]
$LN91@Attack:

; 392  : 		}
; 393  : 	}
; 394  : 
; 395  : 	MSBFlag = 0;
; 396  : 	MsgDamage = 0;
; 397  : 	skillSuccess = this->ResistanceCheck(lpObj, lpTargetObj, skill);

  005b3	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  005b9	50		 push	 eax
  005ba	57		 push	 edi
  005bb	53		 push	 ebx
  005bc	c6 85 b7 fe ff
	ff 00		 mov	 BYTE PTR _MSBFlag$1$[ebp], 0
  005c3	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _MsgDamage$[ebp], 0
  005cd	e8 00 00 00 00	 call	 ?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjBaseAttack::ResistanceCheck
  005d2	89 85 cc fe ff
	ff		 mov	 DWORD PTR _skillSuccess$1$[ebp], eax

; 398  : 	BOOL skillIceArrowSuccess = skillSuccess;

  005d8	8b f0		 mov	 esi, eax

; 399  : 
; 400  : 	if ( skill == AT_SKILL_ELFHARDEN || skill == AT_MSKILL_FE_ICEARROW1 )

  005da	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$1$[ebp]
  005e0	83 f8 33	 cmp	 eax, 51			; 00000033H
  005e3	74 07		 je	 SHORT $LN93@Attack
  005e5	3d a8 01 00 00	 cmp	 eax, 424		; 000001a8H
  005ea	75 0a		 jne	 SHORT $LN92@Attack
$LN93@Attack:

; 401  : 	{
; 402  : 		skillSuccess = 0;

  005ec	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _skillSuccess$1$[ebp], 0
$LN92@Attack:

; 403  : 	}
; 404  : 	BOOL bAllMiss = FALSE;
; 405  : 	
; 406  : 	if ( gObjCheckUsedBuffEffect(lpObj,BUFF_INVISIBILITY) == TRUE && (lpObj->Authority & 32) != 32)

  005f6	6a 12		 push	 18			; 00000012H
  005f8	53		 push	 ebx
  005f9	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bAllMiss$[ebp], 0
  00603	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00608	83 c4 08	 add	 esp, 8
  0060b	3c 01		 cmp	 al, 1
  0060d	75 15		 jne	 SHORT $LN94@Attack
  0060f	f6 83 bc 01 00
	00 20		 test	 BYTE PTR [ebx+444], 32	; 00000020H
  00616	75 0c		 jne	 SHORT $LN94@Attack

; 407  : 	{
; 408  : 		gObjUseSkill.RemoveCloakingEffect(lpObj->m_Index);

  00618	ff 33		 push	 DWORD PTR [ebx]
  0061a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  0061f	e8 00 00 00 00	 call	 ?RemoveCloakingEffect@CObjUseSkill@@QAEHH@Z ; CObjUseSkill::RemoveCloakingEffect
$LN94@Attack:

; 409  : 	}
; 410  : 
; 411  : 	BOOL bDamageReflect = FALSE;
; 412  : 	
; 413  : 	if ( AttackDamage == 0 )

  00624	83 7d 1c 00	 cmp	 DWORD PTR _AttackDamage$[ebp], 0
  00628	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _bDamageReflect$1$[ebp], 0
  00632	c7 85 84 fe ff
	ff 24 18 00 00	 mov	 DWORD PTR tv3257[ebp], 6180 ; 00001824H
  0063c	c7 85 80 fe ff
	ff 28 18 00 00	 mov	 DWORD PTR tv3265[ebp], 6184 ; 00001828H
  00646	c7 85 98 fe ff
	ff 2b 18 00 00	 mov	 DWORD PTR tv3275[ebp], 6187 ; 0000182bH
  00650	c7 85 b8 fe ff
	ff 32 18 00 00	 mov	 DWORD PTR tv3322[ebp], 6194 ; 00001832H
  0065a	0f 85 a6 35 00
	00		 jne	 $LN95@Attack

; 414  : 	{
; 415  : 		if ( g_ShieldSystemOn == TRUE )

  00660	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 1 ; g_ShieldSystemOn
  00667	0f 85 90 00 00
	00		 jne	 $LN97@Attack

; 416  : 		{
; 417  : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  0066d	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00671	75 4a		 jne	 SHORT $LN99@Attack
  00673	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00677	75 44		 jne	 SHORT $LN99@Attack

; 418  : 			{
; 419  : 				if ( !this->MissCheckPvP(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss, byBarrageCount) )

  00679	ff 75 24	 push	 DWORD PTR _byBarrageCount$[ebp]
  0067c	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00682	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  00688	50		 push	 eax
  00689	ff b5 ac fe ff
	ff		 push	 DWORD PTR _magicsend$1$[ebp]
  0068f	ff b5 cc fe ff
	ff		 push	 DWORD PTR _skillSuccess$1$[ebp]
  00695	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  0069b	57		 push	 edi
  0069c	53		 push	 ebx
  0069d	e8 00 00 00 00	 call	 ?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
  006a2	85 c0		 test	 eax, eax
  006a4	0f 85 84 00 00
	00		 jne	 $LN103@Attack
  006aa	5e		 pop	 esi
  006ab	5f		 pop	 edi
  006ac	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  006ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006b0	33 cd		 xor	 ecx, ebp
  006b2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006b7	8b e5		 mov	 esp, ebp
  006b9	5d		 pop	 ebp
  006ba	c2 24 00	 ret	 36			; 00000024H
$LN99@Attack:

; 420  : 				{
; 421  : 					return FALSE;
; 422  : 				}
; 423  : 			}
; 424  : 			else if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss, byBarrageCount) )

  006bd	ff 75 24	 push	 DWORD PTR _byBarrageCount$[ebp]
  006c0	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  006c6	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _bAllMiss$[ebp]
  006cc	52		 push	 edx
  006cd	ff b5 ac fe ff
	ff		 push	 DWORD PTR _magicsend$1$[ebp]
  006d3	ff b5 cc fe ff
	ff		 push	 DWORD PTR _skillSuccess$1$[ebp]
  006d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  006db	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  006e1	57		 push	 edi
  006e2	53		 push	 ebx
  006e3	ff 50 04	 call	 DWORD PTR [eax+4]
  006e6	85 c0		 test	 eax, eax
  006e8	75 44		 jne	 SHORT $LN103@Attack
  006ea	5e		 pop	 esi
  006eb	5f		 pop	 edi
  006ec	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  006ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006f0	33 cd		 xor	 ecx, ebp
  006f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006f7	8b e5		 mov	 esp, ebp
  006f9	5d		 pop	 ebp
  006fa	c2 24 00	 ret	 36			; 00000024H
$LN97@Attack:

; 425  : 			{
; 426  : 				return FALSE;
; 427  : 			}
; 428  : 
; 429  : 		}
; 430  : 		else if ( !this->MissCheck(lpObj, lpTargetObj, skill, skillSuccess, magicsend, bAllMiss, byBarrageCount) )

  006fd	ff 75 24	 push	 DWORD PTR _byBarrageCount$[ebp]
  00700	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00706	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _bAllMiss$[ebp]
  0070c	52		 push	 edx
  0070d	ff b5 ac fe ff
	ff		 push	 DWORD PTR _magicsend$1$[ebp]
  00713	ff b5 cc fe ff
	ff		 push	 DWORD PTR _skillSuccess$1$[ebp]
  00719	8b 01		 mov	 eax, DWORD PTR [ecx]
  0071b	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  00721	57		 push	 edi
  00722	53		 push	 ebx
  00723	ff 50 04	 call	 DWORD PTR [eax+4]
  00726	85 c0		 test	 eax, eax
  00728	0f 84 27 35 00
	00		 je	 $LN956@Attack
$LN103@Attack:

; 431  : 		{
; 432  : 			return FALSE;
; 433  : 		}
; 434  : 
; 435  : 		if ( (skill == AT_SKILL_ELFHARDEN || skill == AT_MSKILL_FE_ICEARROW1) && skillIceArrowSuccess == TRUE )

  0072e	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$1$[ebp]
  00734	83 f8 33	 cmp	 eax, 51			; 00000033H
  00737	74 07		 je	 SHORT $LN105@Attack
  00739	3d a8 01 00 00	 cmp	 eax, 424		; 000001a8H
  0073e	75 65		 jne	 SHORT $LN104@Attack
$LN105@Attack:
  00740	83 fe 01	 cmp	 esi, 1
  00743	75 60		 jne	 SHORT $LN104@Attack

; 436  : 		{
; 437  : 			BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(skill);

  00745	50		 push	 eax
  00746	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0074b	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 438  : 
; 439  : 			if( !lpInfo )

  00750	85 c0		 test	 eax, eax
  00752	0f 84 fd 34 00
	00		 je	 $LN956@Attack

; 440  : 			{
; 441  : 				return 0;
; 442  : 			}
; 443  : 
; 444  : 			gObjAddBuffEffect(lpTargetObj,BUFF_ICEARROW,0,0,0,0,lpInfo->m_Arg1);

  00758	f3 0f 2c 40 04	 cvttss2si eax, DWORD PTR [eax+4]
  0075d	50		 push	 eax
  0075e	6a 00		 push	 0
  00760	6a 00		 push	 0
  00762	6a 00		 push	 0
  00764	6a 00		 push	 0
  00766	6a 39		 push	 57			; 00000039H
  00768	57		 push	 edi
  00769	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 445  : 			lpTargetObj->lpAttackObj = lpObj;
; 446  : 			lpTargetObj->PathCount = 0;
; 447  : 			lpTargetObj->PathStartEnd = 0;
; 448  : 			skillSuccess = TRUE;
; 449  : 			gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  0076e	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  00775	50		 push	 eax
  00776	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  0077d	50		 push	 eax
  0077e	ff 37		 push	 DWORD PTR [edi]
  00780	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  00786	c7 87 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+344], 0
  00790	c6 87 60 01 00
	00 00		 mov	 BYTE PTR [edi+352], 0
  00797	89 b5 cc fe ff
	ff		 mov	 DWORD PTR _skillSuccess$1$[ebp], esi
  0079d	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  007a2	83 c4 28	 add	 esp, 40			; 00000028H
$LN104@Attack:

; 450  : 		}
; 451  : 		
; 452  : 		int targetdefense = this->GetTargetDefense(lpObj, lpTargetObj, MsgDamage);

  007a5	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  007ab	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  007b1	50		 push	 eax
  007b2	57		 push	 edi
  007b3	53		 push	 ebx
  007b4	e8 00 00 00 00	 call	 ?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAH@Z ; CObjBaseAttack::GetTargetDefense

; 453  : 		
; 454  : 		if( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_BERSERKER) == TRUE ||
; 455  : 			gObjCheckUsedBuffEffect(lpTargetObj,BUFF_BERSERKER2) == TRUE ||
; 456  : 			gObjCheckUsedBuffEffect(lpTargetObj,BUFF_BERSERKER3) == TRUE ||

  007b9	6a 51		 push	 81			; 00000051H
  007bb	57		 push	 edi
  007bc	8b f0		 mov	 esi, eax
  007be	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  007c3	83 c4 08	 add	 esp, 8
  007c6	3c 01		 cmp	 al, 1
  007c8	74 36		 je	 SHORT $LN108@Attack
  007ca	68 96 00 00 00	 push	 150			; 00000096H
  007cf	57		 push	 edi
  007d0	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  007d5	83 c4 08	 add	 esp, 8
  007d8	3c 01		 cmp	 al, 1
  007da	74 24		 je	 SHORT $LN108@Attack
  007dc	68 97 00 00 00	 push	 151			; 00000097H
  007e1	57		 push	 edi
  007e2	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  007e7	83 c4 08	 add	 esp, 8
  007ea	3c 01		 cmp	 al, 1
  007ec	74 12		 je	 SHORT $LN108@Attack
  007ee	68 98 00 00 00	 push	 152			; 00000098H
  007f3	57		 push	 edi
  007f4	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  007f9	83 c4 08	 add	 esp, 8
  007fc	3c 01		 cmp	 al, 1
  007fe	75 0b		 jne	 SHORT $LN741@Attack
$LN108@Attack:

; 457  : 			gObjCheckUsedBuffEffect(lpTargetObj,BUFF_BERSERKER4) == TRUE )
; 458  : 		{
; 459  : 			float fDefense = (lpTargetObj->Dexterity+lpTargetObj->AddDexterity)/3;
; 460  : 			float fValue = (float)gObjGetTotalValueOfEffect(lpTargetObj,ADD_OPTION_BERSERKLIFE_PERC);

  00800	6a 20		 push	 32			; 00000020H
  00802	57		 push	 edi
  00803	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  00808	83 c4 08	 add	 esp, 8
$LN741@Attack:

; 461  : 			float fPercent = (40- (fValue+lpObj->m_MPSkillOpt.MpsBerserkInc1))/100;
; 462  : 			fPercent = (0.1f > fPercent) ? 0.1f : fPercent;
; 463  : 		}
; 464  : 
; 465  : 		int iCurseValue = 0;
; 466  : 		if( !gObjGetValueOfBuffIndex(lpTargetObj,BUFF_INNOVATION2,&iCurseValue,0) )

  0080b	6a 00		 push	 0
  0080d	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _iCurseValue$1[ebp]
  00813	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iCurseValue$1[ebp], 0
  0081d	50		 push	 eax
  0081e	68 a3 00 00 00	 push	 163			; 000000a3H
  00823	57		 push	 edi
  00824	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  00829	83 c4 10	 add	 esp, 16			; 00000010H
  0082c	84 c0		 test	 al, al
  0082e	75 14		 jne	 SHORT $LN109@Attack

; 467  : 			gObjGetValueOfBuffIndex(lpTargetObj,BUFF_INNOVATION,&iCurseValue,0);

  00830	6a 00		 push	 0
  00832	8d 85 90 fe ff
	ff		 lea	 eax, DWORD PTR _iCurseValue$1[ebp]
  00838	50		 push	 eax
  00839	6a 4d		 push	 77			; 0000004dH
  0083b	57		 push	 edi
  0083c	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  00841	83 c4 10	 add	 esp, 16			; 00000010H
$LN109@Attack:

; 468  : 
; 469  : 		targetdefense -= targetdefense * iCurseValue / 100;

  00844	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR _iCurseValue$1[ebp]
  0084a	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  0084f	0f af ce	 imul	 ecx, esi
  00852	f7 e9		 imul	 ecx

; 470  : 		
; 471  : 		switch( skill )

  00854	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _skill$1$[ebp]
  0085a	c1 fa 05	 sar	 edx, 5
  0085d	8b c2		 mov	 eax, edx
  0085f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00862	03 c2		 add	 eax, edx
  00864	03 f0		 add	 esi, eax
  00866	89 b5 d0 fe ff
	ff		 mov	 DWORD PTR _targetdefense$1$[ebp], esi
  0086c	81 f9 4d 01 00
	00		 cmp	 ecx, 333		; 0000014dH
  00872	0f 8f 21 03 00
	00		 jg	 $LN743@Attack
  00878	81 f9 46 01 00
	00		 cmp	 ecx, 326		; 00000146H
  0087e	0f 8d aa 03 00
	00		 jge	 $LN137@Attack
  00884	8d 41 ed	 lea	 eax, DWORD PTR [ecx-19]
  00887	3d db 00 00 00	 cmp	 eax, 219		; 000000dbH
  0088c	0f 87 22 03 00
	00		 ja	 $LN129@Attack
  00892	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN820@Attack[eax]
  00899	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN983@Attack[eax*4]
$LN112@Attack:

; 472  : 		{
; 473  : 		case AT_SKILL_SWORD1:
; 474  : 		case AT_SKILL_SWORD2:
; 475  : 		case AT_SKILL_SWORD3:
; 476  : 		case AT_SKILL_SWORD4:
; 477  : 		case AT_SKILL_SWORD5:
; 478  : 		case AT_SKILL_SWORD6:
; 479  : 		case AT_SKILL_WHEEL:
; 480  : 		case AT_SKILL_KNIGHTSPEAR:
; 481  : 		case AT_SKILL_BLOWOFFURY:
; 482  : 		case AT_SKILL_KNIGHTDINORANT:
; 483  : 		case AT_SKILL_STRIKE:
; 484  : 		case AT_SKILL_DEFENSEDOWN:
; 485  : 		case AT_SKILL_RUSH:
; 486  : 		case AT_SKILL_ONE_FLASH:
; 487  : 		case AT_SKILL_SPACE_SPLIT:
; 488  : 		case AT_SKILL_MULTISHOT:
; 489  : 		case AT_SKILL_DESTRUCT:
; 490  : 		case AT_SKILL_FLAMESTRIKE:
; 491  : 		case AT_SKILL_CHAOTICDISEIER:
; 492  : 		case AT_MSKILL_DK_CYCLONE1:
; 493  : 		case AT_MSKILL_DK_SLASH1:
; 494  : 		case AT_MSKILL_DK_FALLINGSLASH1:
; 495  : 		case AT_MSKILL_DK_LUNGE1:
; 496  : 		case AT_MSKILL_DK_TWISTINGSLASH1:
; 497  : 		case AT_MSKILL_DK_RAGEFULBLOW1:
; 498  : 		case AT_MSKILL_DK_TWISTINGSLASH2:
; 499  : 		case AT_MSKILL_DK_RAGEFULBLOW2:
; 500  : 		case AT_MSKILL_DK_DEATHSTAB1:
; 501  : 		case AT_MSKILL_DK_DEATHSTAB2:
; 502  : 		case AT_MSKILL_DK_DEATHSTAB3:
; 503  : 		case AT_MSKILL_DK_DESTRUCTION1:
; 504  : 		case AT_MSKILL_DK_DESTRUCTION2:
; 505  : 		case AT_MSKILL_DK_DESTRUCTION3:
; 506  : 		case AT_MSKILL_DK_BLOODSTORM:
; 507  : 		case AT_MSKILL_DK_BLOODSTORM1:
; 508  : 		case AT_MSKILL_FE_MULTISHOT1:
; 509  : 		case AT_MSKILL_FE_MULTISHOT2:
; 510  : 		case AT_MSKILL_MG_CYCLONE1:
; 511  : 		case AT_MSKILL_MG_TWISTINGSLASH1:
; 512  : 		case AT_MSKILL_MG_FIRESLASH1:
; 513  : 		case AT_MSKILL_MG_FIRESLASH2:
; 514  : 		case AT_MSKILL_MG_POWERSLASH1:
; 515  : 		case AT_MSKILL_MG_FLAMESTRIKE1:
; 516  : 		case AT_MSKILL_MG_FLAMESTRIKE2:
; 517  : 			{
; 518  : 				AttackDamage = this->GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);
; 519  : 
; 520  : 				if ( AttackDamage > 0 )
; 521  : 				{
; 522  : 					gObjWeaponDurDown(lpObj, lpTargetObj, 0);
; 523  : 				}
; 524  : 			}
; 525  : 			break;
; 526  : 		case 76:
; 527  : 			{
; 528  : 				int iFenrirAttackDmg = 0;
; 529  : 
; 530  : 				if ( lpObj->Class == CLASS_KNIGHT || lpObj->Class == CLASS_MAGUMSA )

  008a0	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  008a7	83 f8 01	 cmp	 eax, 1
  008aa	0f 84 03 01 00
	00		 je	 $LN115@Attack
  008b0	83 f8 03	 cmp	 eax, 3
  008b3	0f 84 fa 00 00
	00		 je	 $LN115@Attack

; 533  : 				}
; 534  : 				else if ( lpObj->Class == CLASS_WIZARD )

  008b9	66 85 c0	 test	 ax, ax
  008bc	75 68		 jne	 SHORT $LN116@Attack

; 535  : 				{
; 536  : 					iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 5 + lpObj->Vitality / 7 + lpObj->Energy / 3;	// #formula

  008be	0f b7 8b d2 00
	00 00		 movzx	 ecx, WORD PTR [ebx+210]
  008c5	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  008ca	f7 e9		 imul	 ecx
  008cc	d1 fa		 sar	 edx, 1
  008ce	8b fa		 mov	 edi, edx
  008d0	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  008d3	03 fa		 add	 edi, edx
$LN887@Attack:
  008d5	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  008dc	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  008e1	f7 e9		 imul	 ecx
  008e3	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  008ea	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  008ef	d1 fa		 sar	 edx, 1
  008f1	03 fa		 add	 edi, edx
  008f3	8b f2		 mov	 esi, edx
  008f5	f7 e9		 imul	 ecx
  008f7	0f b7 8b d4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+212]
  008fe	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00903	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00906	03 f7		 add	 esi, edi
  00908	8b fa		 mov	 edi, edx
  0090a	03 f2		 add	 esi, edx
  0090c	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0090f	f7 e9		 imul	 ecx
  00911	03 fe		 add	 edi, esi
  00913	03 d1		 add	 edx, ecx
  00915	c1 fa 02	 sar	 edx, 2
  00918	8b c2		 mov	 eax, edx
  0091a	03 fa		 add	 edi, edx
  0091c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0091f	03 c7		 add	 eax, edi
  00921	e9 f0 00 00 00	 jmp	 $LN119@Attack
$LN116@Attack:

; 537  : 				}
; 538  : 				else if ( lpObj->Class == CLASS_ELF )

  00926	83 f8 02	 cmp	 eax, 2

; 539  : 				{
; 540  : 					iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 3 + lpObj->Vitality / 7 + lpObj->Energy / 5;	// #formula

  00929	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  0092e	75 55		 jne	 SHORT $LN118@Attack
  00930	0f b7 8b d2 00
	00 00		 movzx	 ecx, WORD PTR [ebx+210]
  00937	f7 e9		 imul	 ecx
  00939	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  00940	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00945	8b f2		 mov	 esi, edx
  00947	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0094a	03 f2		 add	 esi, edx
  0094c	f7 e9		 imul	 ecx
  0094e	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  00955	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0095a	d1 fa		 sar	 edx, 1
  0095c	03 f2		 add	 esi, edx
  0095e	8b fa		 mov	 edi, edx
  00960	f7 e9		 imul	 ecx
  00962	0f b7 8b d4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+212]
  00969	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0096e	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00971	d1 fa		 sar	 edx, 1
  00973	03 fe		 add	 edi, esi
  00975	8b f2		 mov	 esi, edx
  00977	03 fa		 add	 edi, edx
  00979	f7 e9		 imul	 ecx
  0097b	03 d1		 add	 edx, ecx
  0097d	c1 fa 02	 sar	 edx, 2

; 541  : 				}
; 542  : 				else	// Dark Lord

  00980	e9 83 00 00 00	 jmp	 $LN886@Attack
$LN118@Attack:

; 543  : 				{
; 544  : 					iFenrirAttackDmg = lpObj->Strength / 5 + lpObj->Dexterity / 5 + lpObj->Vitality / 7 + lpObj->Energy / 3 + lpObj->Leadership / 3;	// #formula

  00985	0f b7 8b f4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+244]
  0098c	f7 e9		 imul	 ecx
  0098e	0f b7 8b d2 00
	00 00		 movzx	 ecx, WORD PTR [ebx+210]
  00995	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0099a	8b f2		 mov	 esi, edx
  0099c	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0099f	03 f2		 add	 esi, edx
  009a1	f7 e9		 imul	 ecx
  009a3	d1 fa		 sar	 edx, 1
  009a5	8b fa		 mov	 edi, edx
  009a7	03 f2		 add	 esi, edx
  009a9	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  009ac	03 fe		 add	 edi, esi
  009ae	e9 22 ff ff ff	 jmp	 $LN887@Attack
$LN115@Attack:

; 531  : 				{
; 532  : 					iFenrirAttackDmg = lpObj->Strength / 3 + lpObj->Dexterity / 5 + lpObj->Vitality / 5 + lpObj->Energy / 7;	// #formula

  009b3	0f b7 8b d2 00
	00 00		 movzx	 ecx, WORD PTR [ebx+210]
  009ba	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  009bf	f7 e9		 imul	 ecx
  009c1	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  009c8	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  009cd	d1 fa		 sar	 edx, 1
  009cf	8b f2		 mov	 esi, edx
  009d1	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  009d4	03 f2		 add	 esi, edx
  009d6	f7 e9		 imul	 ecx
  009d8	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  009df	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  009e4	03 f2		 add	 esi, edx
  009e6	8b fa		 mov	 edi, edx
  009e8	f7 e9		 imul	 ecx
  009ea	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  009ed	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  009f2	03 d1		 add	 edx, ecx
  009f4	03 fe		 add	 edi, esi
  009f6	0f b7 8b d4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+212]
  009fd	c1 fa 02	 sar	 edx, 2
  00a00	8b f2		 mov	 esi, edx
  00a02	03 fa		 add	 edi, edx
  00a04	f7 e9		 imul	 ecx
  00a06	d1 fa		 sar	 edx, 1
$LN886@Attack:
  00a08	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00a0b	8b c2		 mov	 eax, edx
  00a0d	03 f7		 add	 esi, edi
  00a0f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00a12	03 f2		 add	 esi, edx
  00a14	03 c6		 add	 eax, esi
$LN119@Attack:

; 545  : 				}
; 546  : 
; 547  : 				if ( iFenrirAttackDmg < 0 )

  00a16	33 c9		 xor	 ecx, ecx
  00a18	85 c0		 test	 eax, eax
  00a1a	0f 48 c1	 cmovs	 eax, ecx
  00a1d	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _iFenrirAttackDmg$2$[ebp], eax

; 548  : 					iFenrirAttackDmg = 0;
; 549  : 
; 550  : 				if ( lpObj->m_CriticalDamage > 0 )

  00a23	39 8b 9c 06 00
	00		 cmp	 DWORD PTR [ebx+1692], ecx
  00a29	7e 29		 jle	 SHORT $LN874@Attack

; 551  : 				{
; 552  : 					if ( (rand()%100) < lpObj->m_CriticalDamage )

  00a2b	e8 00 00 00 00	 call	 _rand
  00a30	99		 cdq
  00a31	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  00a36	f7 fe		 idiv	 esi
  00a38	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _MsgDamage$[ebp]
  00a3e	b9 03 00 00 00	 mov	 ecx, 3
  00a43	3b 93 9c 06 00
	00		 cmp	 edx, DWORD PTR [ebx+1692]
  00a49	0f 4c c1	 cmovl	 eax, ecx
  00a4c	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _MsgDamage$[ebp], eax
  00a52	eb 05		 jmp	 SHORT $LN825@Attack
$LN874@Attack:
  00a54	be 64 00 00 00	 mov	 esi, 100		; 00000064H
$LN825@Attack:

; 553  : 					{
; 554  : 						MsgDamage = 3;
; 555  : 					}
; 556  : 				}
; 557  : 
; 558  : 				if ( lpObj->m_ExcelentDamage > 0 )

  00a59	83 bb a0 06 00
	00 00		 cmp	 DWORD PTR [ebx+1696], 0
  00a60	7e 1f		 jle	 SHORT $LN826@Attack

; 559  : 				{
; 560  : 					if ( (rand()%100) < lpObj->m_ExcelentDamage )

  00a62	e8 00 00 00 00	 call	 _rand
  00a67	99		 cdq
  00a68	f7 fe		 idiv	 esi
  00a6a	3b 93 a0 06 00
	00		 cmp	 edx, DWORD PTR [ebx+1696]
  00a70	7d 0f		 jge	 SHORT $LN826@Attack

; 561  : 					{
; 562  : 						MsgDamage = 2;

  00a72	c7 85 c8 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _MsgDamage$[ebp], 2

; 563  : 					}
; 564  : 				}
; 565  : 
; 566  : 				if ( MsgDamage == 3 )	// Critical Damage

  00a7c	e9 8c 00 00 00	 jmp	 $LN802@Attack
$LN826@Attack:
  00a81	83 bd c8 fe ff
	ff 03		 cmp	 DWORD PTR _MsgDamage$[ebp], 3
  00a88	75 7a		 jne	 SHORT $LN125@Attack

; 567  : 				{
; 568  : 					AttackDamage =  iFenrirAttackDmg + lpMagic->m_DamageMax;
; 569  : 					AttackDamage += lpObj->SetOpAddCriticalDamage;

  00a8a	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00a90	0f bf 83 b8 14
	00 00		 movsx	 eax, WORD PTR [ebx+5304]

; 570  : 					int adddamage = 0;
; 571  : 					gObjGetValueOfBuffIndex(lpObj,5,&adddamage,0);

  00a97	6a 00		 push	 0
  00a99	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _adddamage$10[ebp], 0
  00aa3	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00aa6	03 85 a4 fe ff
	ff		 add	 eax, DWORD PTR _iFenrirAttackDmg$2$[ebp]
  00aac	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  00aaf	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _adddamage$10[ebp]
  00ab5	50		 push	 eax
  00ab6	6a 05		 push	 5
  00ab8	53		 push	 ebx
  00ab9	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 572  : 					AttackDamage += adddamage;

  00abe	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _adddamage$10[ebp]
  00ac4	01 45 1c	 add	 DWORD PTR _AttackDamage$[ebp], eax

; 573  : 					gObjGetValueOfBuffIndex(lpObj,148,&adddamage,0);

  00ac7	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _adddamage$10[ebp]
  00acd	6a 00		 push	 0
  00acf	50		 push	 eax
  00ad0	68 94 00 00 00	 push	 148			; 00000094H
  00ad5	53		 push	 ebx
  00ad6	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 574  : 					AttackDamage += adddamage;
; 575  : 					AttackDamage += lpObj->m_JewelOfHarmonyEffect.HJOpAddCriticalDamage;

  00adb	0f bf 83 36 24
	00 00		 movsx	 eax, WORD PTR [ebx+9270]
  00ae2	83 c4 20	 add	 esp, 32			; 00000020H

; 576  : 					AttackDamage -= targetdefense;

  00ae5	2b 85 d0 fe ff
	ff		 sub	 eax, DWORD PTR _targetdefense$1$[ebp]
  00aeb	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  00aee	03 85 e4 fe ff
	ff		 add	 eax, DWORD PTR _adddamage$10[ebp]
  00af4	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$1$[ebp]
  00afa	03 f0		 add	 esi, eax
  00afc	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
  00aff	e9 63 01 00 00	 jmp	 $LN827@Attack
$LN125@Attack:

; 577  : 				}
; 578  : 				else if ( MsgDamage == 2 )	// Excellent

  00b04	83 bd c8 fe ff
	ff 02		 cmp	 DWORD PTR _MsgDamage$[ebp], 2
  00b0b	75 51		 jne	 SHORT $LN127@Attack
$LN802@Attack:

; 579  : 				{
; 580  : 					
; 581  : 					AttackDamage = iFenrirAttackDmg + lpMagic->m_DamageMax;

  00b0d	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]

; 582  : 					AttackDamage += AttackDamage * 20 / 100;

  00b13	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH

; 583  : 					AttackDamage += lpObj->SetOpAddExDamage;

  00b18	0f bf b3 b4 14
	00 00		 movsx	 esi, WORD PTR [ebx+5300]

; 584  : 					AttackDamage -= targetdefense;
; 585  : 				}
; 586  : 				else

  00b1f	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$1$[ebp]
  00b25	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00b28	03 95 a4 fe ff
	ff		 add	 edx, DWORD PTR _iFenrirAttackDmg$2$[ebp]
  00b2e	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _AttackDamage$5$[ebp], edx
  00b34	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  00b37	c1 e1 02	 shl	 ecx, 2
  00b3a	f7 e9		 imul	 ecx
  00b3c	c1 fa 05	 sar	 edx, 5
  00b3f	8b c2		 mov	 eax, edx
  00b41	03 f2		 add	 esi, edx
  00b43	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00b46	03 c6		 add	 eax, esi
  00b48	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _AttackDamage$5$[ebp]
  00b4e	2b 85 d0 fe ff
	ff		 sub	 eax, DWORD PTR _targetdefense$1$[ebp]
  00b54	03 f0		 add	 esi, eax
  00b56	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
  00b59	e9 09 01 00 00	 jmp	 $LN827@Attack
$LN127@Attack:

; 587  : 				{
; 588  : 					AttackDamage = (iFenrirAttackDmg + lpMagic->m_DamageMin) + (rand()%(lpMagic->m_DamageMax - lpMagic->m_DamageMin + 1));
; 589  : 					AttackDamage -= targetdefense;

  00b5e	8b bd dc fe ff
	ff		 mov	 edi, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00b64	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00b67	e8 00 00 00 00	 call	 _rand
  00b6c	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00b6f	2b ce		 sub	 ecx, esi
  00b71	99		 cdq
  00b72	41		 inc	 ecx

; 590  : 				}
; 591  : 			}
; 592  : 			break;

  00b73	8b bd d8 fe ff
	ff		 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$1$[ebp]
  00b79	f7 f9		 idiv	 ecx
  00b7b	2b 95 d0 fe ff
	ff		 sub	 edx, DWORD PTR _targetdefense$1$[ebp]
  00b81	03 d6		 add	 edx, esi
  00b83	8b f2		 mov	 esi, edx
  00b85	89 95 e4 fe ff
	ff		 mov	 DWORD PTR _AttackDamage$5$[ebp], edx
  00b8b	03 b5 a4 fe ff
	ff		 add	 esi, DWORD PTR _iFenrirAttackDmg$2$[ebp]
  00b91	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
  00b94	e9 ce 00 00 00	 jmp	 $LN827@Attack
$LN743@Attack:

; 470  : 		
; 471  : 		switch( skill )

  00b99	8d 81 b0 fe ff
	ff		 lea	 eax, DWORD PTR [ecx-336]
  00b9f	3d 9e 00 00 00	 cmp	 eax, 158		; 0000009eH
  00ba4	77 0e		 ja	 SHORT $LN129@Attack
  00ba6	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN821@Attack[eax]
  00bad	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN984@Attack[eax*4]
$LN129@Attack:

; 593  : 		default:
; 594  : 			{
; 595  : 				if ( ( lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_MAGUMSA ) && skill )

  00bb4	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00bbb	66 85 c0	 test	 ax, ax
  00bbe	74 05		 je	 SHORT $LN132@Attack
  00bc0	83 f8 03	 cmp	 eax, 3
  00bc3	75 32		 jne	 SHORT $LN130@Attack
$LN132@Attack:
  00bc5	85 c9		 test	 ecx, ecx
  00bc7	74 2e		 je	 SHORT $LN130@Attack

; 596  : 				{
; 597  : 					AttackDamage = GetAttackDamageWizard(lpObj, targetdefense, lpMagic, MsgDamage, bIsOnDuel);

  00bc9	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _bIsOnDuel$1$[ebp]
  00bcf	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00bd5	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  00bdb	50		 push	 eax
  00bdc	51		 push	 ecx
  00bdd	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00be3	56		 push	 esi
  00be4	53		 push	 ebx
  00be5	e8 00 00 00 00	 call	 ?GetAttackDamageWizard@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z ; CObjAttack::GetAttackDamageWizard
  00bea	8b f0		 mov	 esi, eax
  00bec	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi

; 598  : 	
; 599  : 					if ( AttackDamage > 0 )

  00bef	85 f6		 test	 esi, esi
  00bf1	7e 74		 jle	 SHORT $LN827@Attack

; 600  : 					{
; 601  : 						gObjWeaponDurDown(lpObj, lpTargetObj, 1);

  00bf3	6a 01		 push	 1

; 602  : 					}
; 603  : 				}

  00bf5	eb 63		 jmp	 SHORT $LN889@Attack
$LN130@Attack:

; 604  : 				else if( lpObj->Class == CLASS_SUMMONER && skill )

  00bf7	83 f8 05	 cmp	 eax, 5
  00bfa	75 32		 jne	 SHORT $LN137@Attack
  00bfc	85 c9		 test	 ecx, ecx
  00bfe	74 2e		 je	 SHORT $LN137@Attack

; 605  : 				{
; 606  : 					AttackDamage = GetAttackDamageSummoner(lpObj, targetdefense, lpMagic, MsgDamage, bIsOnDuel);

  00c00	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _bIsOnDuel$1$[ebp]
  00c06	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00c0c	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  00c12	50		 push	 eax
  00c13	51		 push	 ecx
  00c14	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00c1a	56		 push	 esi
  00c1b	53		 push	 ebx
  00c1c	e8 00 00 00 00	 call	 ?GetAttackDamageSummoner@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HPAVCMagicInf@@AAHH@Z ; CObjAttack::GetAttackDamageSummoner
  00c21	8b f0		 mov	 esi, eax
  00c23	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi

; 607  : 	
; 608  : 					if ( AttackDamage > 0 )

  00c26	85 f6		 test	 esi, esi
  00c28	7e 3d		 jle	 SHORT $LN827@Attack

; 609  : 					{
; 610  : 						gObjWeaponDurDown(lpObj, lpTargetObj, 1);

  00c2a	6a 01		 push	 1

; 611  : 					}
; 612  : 				}

  00c2c	eb 2c		 jmp	 SHORT $LN889@Attack
$LN137@Attack:

; 613  : 				else if( lpObj->Class == CLASS_FIGHTER )
; 614  : 				{
; 615  : 					AttackDamage = GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);
; 616  : 	
; 617  : 					if ( AttackDamage > 0 )
; 618  : 					{
; 619  : 						gObjWeaponDurDown(lpObj, lpTargetObj, 0);
; 620  : 					}
; 621  : 				}
; 622  : 				else
; 623  : 				{
; 624  : 					AttackDamage = GetAttackDamage(lpObj, targetdefense, MsgDamage, bIsOnDuel, lpMagic);

  00c2e	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  00c34	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _MsgDamage$[ebp]
  00c3a	51		 push	 ecx
  00c3b	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _bIsOnDuel$1$[ebp]
  00c41	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00c47	50		 push	 eax
  00c48	56		 push	 esi
  00c49	53		 push	 ebx
  00c4a	e8 00 00 00 00	 call	 ?GetAttackDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@HAAHHPAVCMagicInf@@@Z ; CObjAttack::GetAttackDamage
  00c4f	8b f0		 mov	 esi, eax
  00c51	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi

; 625  : 					if ( AttackDamage > 0 )

  00c54	85 f6		 test	 esi, esi
  00c56	7e 0f		 jle	 SHORT $LN827@Attack

; 626  : 					{
; 627  : 						gObjWeaponDurDown(lpObj, lpTargetObj, 0);

  00c58	6a 00		 push	 0
$LN889@Attack:
  00c5a	57		 push	 edi
  00c5b	53		 push	 ebx
  00c5c	e8 00 00 00 00	 call	 ?gObjWeaponDurDown@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDown
  00c61	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  00c64	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN827@Attack:

; 628  : 					}
; 629  : 				}
; 630  : 			}
; 631  : 			break;
; 632  : 		}
; 633  : 		
; 634  : 		int nBuffIndex = -1;
; 635  : 		int nValue = 0;
; 636  : 
; 637  : 		int attackdamagebefore = AttackDamage;
; 638  : 
; 639  : 		switch( MsgDamage )

  00c67	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _MsgDamage$[ebp]
  00c6d	8b ce		 mov	 ecx, esi
  00c6f	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nValue$4[ebp], 0
  00c79	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _attackdamagebefore$1$[ebp], ecx
  00c7f	83 e8 02	 sub	 eax, 2
  00c82	0f 84 8f 00 00
	00		 je	 $LN146@Attack
  00c88	83 e8 01	 sub	 eax, 1
  00c8b	0f 85 0f 01 00
	00		 jne	 $LN150@Attack

; 640  : 		{
; 641  : 		case 3:
; 642  : 			nBuffIndex = AT_CSHOP_SCROLL_OF_BATTLE;
; 643  : 
; 644  : 			if( nBuffIndex > -1 )
; 645  : 			{
; 646  : 				gObjGetValueOfBuffIndex(lpObj,nBuffIndex,&nValue,0);

  00c91	50		 push	 eax
  00c92	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _nValue$4[ebp]
  00c98	50		 push	 eax
  00c99	6a 59		 push	 89			; 00000059H
  00c9b	53		 push	 ebx
  00c9c	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 647  : 				if( nValue > 0 )

  00ca1	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR _nValue$4[ebp]
  00ca7	83 c4 10	 add	 esp, 16			; 00000010H
  00caa	85 d2		 test	 edx, edx
  00cac	7e 1c		 jle	 SHORT $LN143@Attack

; 648  : 				{
; 649  : 					AttackDamage += AttackDamage * nValue / 100;

  00cae	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  00cb1	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00cb6	0f af d1	 imul	 edx, ecx
  00cb9	f7 ea		 imul	 edx
  00cbb	c1 fa 05	 sar	 edx, 5
  00cbe	8b c2		 mov	 eax, edx
  00cc0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00cc3	03 c2		 add	 eax, edx
  00cc5	03 c8		 add	 ecx, eax
  00cc7	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN143@Attack:

; 650  : 				}
; 651  : 			}
; 652  : 
; 653  : 			nValue = 0;
; 654  : 			nBuffIndex = 0x7A;
; 655  : 
; 656  : 			if( nBuffIndex > -1 )
; 657  : 			{
; 658  : 				gObjGetValueOfBuffIndex(lpObj,nBuffIndex,&nValue,0);

  00cca	6a 00		 push	 0
  00ccc	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _nValue$4[ebp]
  00cd2	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nValue$4[ebp], 0
  00cdc	50		 push	 eax
  00cdd	6a 7a		 push	 122			; 0000007aH
  00cdf	53		 push	 ebx
  00ce0	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 659  : 				if( nValue > 0 )

  00ce5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _nValue$4[ebp]
  00ceb	83 c4 10	 add	 esp, 16			; 00000010H
  00cee	85 c9		 test	 ecx, ecx
  00cf0	0f 8e a1 00 00
	00		 jle	 $LN828@Attack

; 660  : 				{
; 661  : 					AttackDamage += AttackDamage * nValue / 100;

  00cf6	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  00cf9	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00cfe	0f af ce	 imul	 ecx, esi
  00d01	f7 e9		 imul	 ecx
  00d03	c1 fa 05	 sar	 edx, 5
  00d06	8b c2		 mov	 eax, edx
  00d08	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00d0b	03 c2		 add	 eax, edx
  00d0d	03 f0		 add	 esi, eax
  00d0f	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi

; 662  : 				}
; 663  : 			}
; 664  : 			break;

  00d12	e9 83 00 00 00	 jmp	 $LN890@Attack
$LN146@Attack:

; 665  : 		case 2:
; 666  : 			nBuffIndex = AT_CSHOP_SCROLL_OF_STRENGTHENER;
; 667  : 			if( nBuffIndex > -1 )
; 668  : 			{
; 669  : 				gObjGetValueOfBuffIndex(lpObj,nBuffIndex,&nValue,0);

  00d17	6a 00		 push	 0
  00d19	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _nValue$4[ebp]
  00d1f	50		 push	 eax
  00d20	6a 5a		 push	 90			; 0000005aH
  00d22	53		 push	 ebx
  00d23	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 670  : 				if( nValue > 0 )

  00d28	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR _nValue$4[ebp]
  00d2e	83 c4 10	 add	 esp, 16			; 00000010H
  00d31	85 d2		 test	 edx, edx
  00d33	7e 1c		 jle	 SHORT $LN148@Attack

; 671  : 				{
; 672  : 					AttackDamage += AttackDamage * nValue / 100;

  00d35	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  00d38	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00d3d	0f af d1	 imul	 edx, ecx
  00d40	f7 ea		 imul	 edx
  00d42	c1 fa 05	 sar	 edx, 5
  00d45	8b c2		 mov	 eax, edx
  00d47	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00d4a	03 c2		 add	 eax, edx
  00d4c	03 c8		 add	 ecx, eax
  00d4e	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN148@Attack:

; 673  : 				}
; 674  : 			}
; 675  : 
; 676  : 			nValue = 0;
; 677  : 			nBuffIndex = 0x7B;
; 678  : 
; 679  : 			if( nBuffIndex > -1 )
; 680  : 			{
; 681  : 				gObjGetValueOfBuffIndex(lpObj,nBuffIndex,&nValue,0);

  00d51	6a 00		 push	 0
  00d53	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR _nValue$4[ebp]
  00d59	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _nValue$4[ebp], 0
  00d63	50		 push	 eax
  00d64	6a 7b		 push	 123			; 0000007bH
  00d66	53		 push	 ebx
  00d67	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 682  : 				if( nValue > 0 )

  00d6c	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _nValue$4[ebp]
  00d72	83 c4 10	 add	 esp, 16			; 00000010H
  00d75	85 c9		 test	 ecx, ecx
  00d77	7e 1e		 jle	 SHORT $LN828@Attack

; 683  : 				{
; 684  : 					AttackDamage += AttackDamage * nValue / 100;

  00d79	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  00d7c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00d81	0f af ce	 imul	 ecx, esi
  00d84	f7 e9		 imul	 ecx
  00d86	c1 fa 05	 sar	 edx, 5
  00d89	8b c2		 mov	 eax, edx
  00d8b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00d8e	03 c2		 add	 eax, edx
  00d90	03 f0		 add	 esi, eax
  00d92	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
  00d95	eb 03		 jmp	 SHORT $LN890@Attack
$LN828@Attack:
  00d97	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
$LN890@Attack:
  00d9a	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _attackdamagebefore$1$[ebp]
$LN150@Attack:

; 685  : 				}
; 686  : 			}
; 687  : 			break;
; 688  : 		default:
; 689  : 			nBuffIndex = -1;
; 690  : 			break;
; 691  : 		}
; 692  : 
; 693  : #if (ENABLETEST_MUUN == 1)
; 694  : 		if (ManaChange == 2) {
; 695  : 			int EffectValue1 = 0;
; 696  : 			if (g_CMuunSystem.GetMuunItemValueOfOptType(lpObj, 3, &EffectValue1, 0)) {
; 697  : 				AttackDamage += EffectValue1;
; 698  : 			}
; 699  : 		} else if (ManaChange == 3) {
; 700  : 			int nMuunItemEffectValue = 0;
; 701  : 			if (g_CMuunSystem.GetMuunItemValueOfOptType(lpObj, 4, &nMuunItemEffectValue, 0)) {
; 702  : 				AttackDamage += nMuunItemEffectValue;
; 703  : 			}
; 704  : 		}
; 705  : #endif
; 706  : 
; 707  : 		if( g_bAbilityDebug == TRUE )

  00da0	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bAbilityDebug@@3HA, 1 ; g_bAbilityDebug
  00da7	75 4e		 jne	 SHORT $LN153@Attack

; 708  : 		{
; 709  : 			if( MsgDamage == 3 || MsgDamage == 2)

  00da9	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _MsgDamage$[ebp]
  00daf	83 f8 03	 cmp	 eax, 3
  00db2	74 05		 je	 SHORT $LN154@Attack
  00db4	83 f8 02	 cmp	 eax, 2
  00db7	75 3e		 jne	 SHORT $LN153@Attack
$LN154@Attack:

; 710  : 			{
; 711  : 				char szTmpMsg[256];
; 712  : 				sprintf(szTmpMsg,"%s AttackDamage: %d %d",(MsgDamage == 3)?"CRITICAL":"EXCELLENT",

  00db9	83 bd c8 fe ff
	ff 03		 cmp	 DWORD PTR _MsgDamage$[ebp], 3
  00dc0	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08FOLAHAHG@CRITICAL?$AA@
  00dc5	56		 push	 esi
  00dc6	51		 push	 ecx
  00dc7	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09PBMNMIBJ@EXCELLENT?$AA@
  00dcc	0f 45 c1	 cmovne	 eax, ecx
  00dcf	50		 push	 eax
  00dd0	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTmpMsg$12[ebp]
  00dd6	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NMKEOPCM@?$CFs?5AttackDamage?3?5?$CFd?5?$CFd?$AA@
  00ddb	50		 push	 eax
  00ddc	e8 00 00 00 00	 call	 _sprintf

; 713  : 					attackdamagebefore,AttackDamage);
; 714  : 				GCServerMsgStringSend(szTmpMsg,lpObj->m_Index,1);

  00de1	6a 01		 push	 1
  00de3	ff 33		 push	 DWORD PTR [ebx]
  00de5	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTmpMsg$12[ebp]
  00deb	50		 push	 eax
  00dec	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00df1	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  00df4	83 c4 20	 add	 esp, 32			; 00000020H
$LN153@Attack:

; 715  : 			}
; 716  : 		}
; 717  : 
; 718  : 		if ( bAllMiss )

  00df7	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR _bAllMiss$[ebp], 0
  00dfe	74 1d		 je	 SHORT $LN155@Attack

; 719  : 		{
; 720  : 			AttackDamage = ( AttackDamage * 30 ) / 100;

  00e00	8b ce		 mov	 ecx, esi
  00e02	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00e07	c1 e1 04	 shl	 ecx, 4
  00e0a	2b ce		 sub	 ecx, esi
  00e0c	03 c9		 add	 ecx, ecx
  00e0e	f7 e9		 imul	 ecx
  00e10	c1 fa 05	 sar	 edx, 5
  00e13	8b f2		 mov	 esi, edx
  00e15	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00e18	03 f2		 add	 esi, edx
  00e1a	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
$LN155@Attack:

; 721  : 		}
; 722  : 		
; 723  : 		if ( lpTargetObj->DamageMinus )

  00e1d	8a 87 48 01 00
	00		 mov	 al, BYTE PTR [edi+328]
  00e23	84 c0		 test	 al, al
  00e25	74 1c		 je	 SHORT $LN156@Attack

; 724  : 		{
; 725  : 			int beforeDamage = AttackDamage;
; 726  : 			AttackDamage -= ( ( AttackDamage * (int)lpTargetObj->DamageMinus) / 100 );

  00e27	0f b6 c8	 movzx	 ecx, al
  00e2a	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00e2f	0f af ce	 imul	 ecx, esi
  00e32	f7 e9		 imul	 ecx
  00e34	c1 fa 05	 sar	 edx, 5
  00e37	8b c2		 mov	 eax, edx
  00e39	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00e3c	03 c2		 add	 eax, edx
  00e3e	03 f0		 add	 esi, eax
  00e40	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
$LN156@Attack:

; 727  : 		}
; 728  : 
; 729  : 		int tlevel = (lpObj->Level+lpObj->MasterLevel) / 10;

  00e43	0f bf 83 96 00
	00 00		 movsx	 eax, WORD PTR [ebx+150]
  00e4a	0f bf 8b a8 00
	00 00		 movsx	 ecx, WORD PTR [ebx+168]
  00e51	03 c8		 add	 ecx, eax
  00e53	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00e58	f7 e9		 imul	 ecx
  00e5a	c1 fa 02	 sar	 edx, 2
  00e5d	8b c2		 mov	 eax, edx
  00e5f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00e62	03 c2		 add	 eax, edx

; 730  : 
; 731  : 		if ( AttackDamage < tlevel )

  00e64	3b f0		 cmp	 esi, eax
  00e66	7d 10		 jge	 SHORT $LN157@Attack

; 732  : 		{
; 733  : 			if ( tlevel < 1 )

  00e68	8b f0		 mov	 esi, eax
  00e6a	83 f8 01	 cmp	 eax, 1
  00e6d	b8 01 00 00 00	 mov	 eax, 1
  00e72	0f 4c f0	 cmovl	 esi, eax

; 734  : 			{
; 735  : 				tlevel = 1;
; 736  : 			}
; 737  : 
; 738  : 			AttackDamage = tlevel;

  00e75	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
$LN157@Attack:

; 739  : 		}
; 740  : 
; 741  : 		if ( lpTargetObj->m_SkillNumber == 18 )

  00e78	66 83 bf b8 05
	00 00 12	 cmp	 WORD PTR [edi+1464], 18	; 00000012H
  00e80	75 0a		 jne	 SHORT $LN160@Attack

; 742  : 		{
; 743  : 			if ( AttackDamage > 1 )

  00e82	83 fe 01	 cmp	 esi, 1
  00e85	7e 05		 jle	 SHORT $LN160@Attack

; 744  : 			{
; 745  : 				AttackDamage >>= 1;

  00e87	d1 fe		 sar	 esi, 1
  00e89	89 75 1c	 mov	 DWORD PTR _AttackDamage$[ebp], esi
$LN160@Attack:

; 746  : 			}
; 747  : 		}
; 748  : 
; 749  : #if(__NOVUS__==1)
; 750  : 		if( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )
; 751  : 		{
; 752  : 			if( g_SoulSystem.IsMap(lpObj->MapNumber) && !g_SoulSystem.WithSoul(lpObj) )
; 753  : 			{
; 754  : 				int OldAttack = AttackDamage;
; 755  : 				AttackDamage = AttackDamage * 5 / 100;
; 756  : 				LogAddC(2, "[DEBUG] [SoulSystem] [%s] [%d / %d] Damage has been decreased", lpObj->Name, OldAttack, AttackDamage);
; 757  : 			}
; 758  : 		}
; 759  : 
; 760  : 		if( lpObj->Type == OBJ_MONSTER && lpTargetObj->Type == OBJ_USER )
; 761  : 		{
; 762  : 			if( g_SoulSystem.IsMap(lpTargetObj->MapNumber) && !g_SoulSystem.WithSoul(lpTargetObj) )
; 763  : 			{
; 764  : 				AttackDamage = lpTargetObj->MaxLife + lpTargetObj->AddLife + 1000;
; 765  : 				LogAddC(2, "[DEBUG] [SoulSystem] [%s] Defense has been ignored", lpTargetObj->Name);
; 766  : 			}
; 767  : 		}
; 768  : #endif
; 769  : 		gObjSpriteDamage(lpTargetObj, AttackDamage);

  00e8c	56		 push	 esi
  00e8d	57		 push	 edi
  00e8e	e8 00 00 00 00	 call	 ?gObjSpriteDamage@@YAXPAUOBJECTSTRUCT@@H@Z ; gObjSpriteDamage

; 770  : 
; 771  : #if (ENABLETEST_MUUN == 1)
; 772  : 		g_CMuunSystem.MuunItemDamage(lpTargetObj, AttackDamage);
; 773  : #endif
; 774  : 		if ( gObjSatanSprite(lpObj) == TRUE )

  00e93	53		 push	 ebx
  00e94	e8 00 00 00 00	 call	 ?gObjSatanSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjSatanSprite
  00e99	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00ea1	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ea4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40400000
  00eac	83 f8 01	 cmp	 eax, 1
  00eaf	0f 85 3d 01 00
	00		 jne	 $LN161@Attack

; 775  : 		{
; 776  : 			if( lpObj->Class == CLASS_FIGHTER )

  00eb5	66 83 bb 90 00
	00 00 06	 cmp	 WORD PTR [ebx+144], 6
  00ebd	0f 85 c6 00 00
	00		 jne	 $LN162@Attack

; 777  : 			{
; 778  : 				if( skill == AT_SKILL_RAGEFIGHTER_DARKSIDE ||
; 779  : 					skill == AT_SKILL_RAGEFIGHTER_SIEGE ||
; 780  : 					skill == AT_SKILL_RAGEFIGHTER_CHAINDRIVE ||
; 781  : 					skill == AT_MSKILL_RF_CHAINDRIVE1 ||
; 782  : 					skill == AT_MSKILL_RF_CHAINDRIVE2 ||
; 783  : 					skill == AT_MSKILL_RF_DARKSIDE1 ||

  00ec3	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$1$[ebp]
  00ec9	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  00ece	0f 84 a3 00 00
	00		 je	 $LN166@Attack
  00ed4	3d 0d 01 00 00	 cmp	 eax, 269		; 0000010dH
  00ed9	0f 84 98 00 00
	00		 je	 $LN166@Attack
  00edf	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  00ee4	0f 84 8d 00 00
	00		 je	 $LN166@Attack
  00eea	3d 2e 02 00 00	 cmp	 eax, 558		; 0000022eH
  00eef	0f 84 82 00 00
	00		 je	 $LN166@Attack
  00ef5	3d 32 02 00 00	 cmp	 eax, 562		; 00000232H
  00efa	74 7b		 je	 SHORT $LN166@Attack
  00efc	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  00f01	74 74		 je	 SHORT $LN166@Attack
  00f03	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  00f08	74 6d		 je	 SHORT $LN166@Attack

; 787  : 				}
; 788  : 				else if( skill == AT_SKILL_RAGEFIGHTER_DRAGONSLAYER )

  00f0a	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  00f0f	75 12		 jne	 SHORT $LN167@Attack

; 789  : 				{
; 790  : 					lpObj->Life -= 100.0f;

  00f11	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  00f19	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000

; 791  : 				}
; 792  : 				else if( skill == AT_SKILL_RAGEFIGHTER_WEAPON1 ||

  00f21	eb 72		 jmp	 SHORT $LN891@Attack
$LN167@Attack:

; 793  : 					skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 794  : 					skill == AT_SKILL_RAGEFIGHTER_DRAGONLORE ||
; 795  : 					skill == AT_MSKILL_RF_KILLBLOW1 || 
; 796  : 					skill == AT_MSKILL_RF_KILLBLOW2 || 
; 797  : 					skill == AT_MSKILL_RF_UPERCUT1 ||

  00f23	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  00f28	74 3f		 je	 SHORT $LN171@Attack
  00f2a	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  00f2f	74 38		 je	 SHORT $LN171@Attack
  00f31	3d 08 01 00 00	 cmp	 eax, 264		; 00000108H
  00f36	74 31		 je	 SHORT $LN171@Attack
  00f38	3d 27 02 00 00	 cmp	 eax, 551		; 00000227H
  00f3d	74 2a		 je	 SHORT $LN171@Attack
  00f3f	3d 2a 02 00 00	 cmp	 eax, 554		; 0000022aH
  00f44	74 23		 je	 SHORT $LN171@Attack
  00f46	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  00f4b	74 1c		 je	 SHORT $LN171@Attack
  00f4d	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  00f52	74 15		 je	 SHORT $LN171@Attack

; 801  : 				}
; 802  : 				else if( skill == AT_SKILL_PHOENIXSHOT )
; 803  : 				{
; 804  : 					lpObj->Life -= 2.0f;

  00f54	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  00f5c	3d 0e 01 00 00	 cmp	 eax, 270		; 0000010eH
  00f61	75 2e		 jne	 SHORT $LN172@Attack
  00f63	f3 0f 5c c1	 subss	 xmm0, xmm1

; 805  : 				}
; 806  : 				else

  00f67	eb 2c		 jmp	 SHORT $LN891@Attack
$LN171@Attack:

; 798  : 					skill == AT_MSKILL_RF_UPERCUT2 )
; 799  : 				{
; 800  : 					lpObj->Life -= 2.0f;

  00f69	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  00f71	f3 0f 5c c1	 subss	 xmm0, xmm1
  00f75	eb 1e		 jmp	 SHORT $LN891@Attack
$LN166@Attack:

; 784  : 					skill == AT_MSKILL_RF_DARKSIDE2 )
; 785  : 				{
; 786  : 					lpObj->Life -= 4.0f;

  00f77	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  00f7f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000

; 807  : 				{
; 808  : 					lpObj->Life -= 3.0f;
; 809  : 				}
; 810  : 			}
; 811  : 			else

  00f87	eb 0c		 jmp	 SHORT $LN891@Attack
$LN162@Attack:

; 812  : 			{
; 813  : 				lpObj->Life -= 3.0f;

  00f89	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
$LN172@Attack:
  00f91	f3 0f 5c c2	 subss	 xmm0, xmm2
$LN891@Attack:
  00f95	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0
  00f9d	0f 57 c0	 xorps	 xmm0, xmm0

; 814  : 			}
; 815  : 
; 816  : 			if ( lpObj->Life < 0.0f )

  00fa0	0f 2f 83 d8 00
	00 00		 comiss	 xmm0, DWORD PTR [ebx+216]
  00fa7	76 0c		 jbe	 SHORT $LN174@Attack

; 817  : 			{
; 818  : 				lpObj->Life = 0.0f;

  00fa9	c7 83 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+216], 0

; 819  : 			}
; 820  : 			else

  00fb3	eb 18		 jmp	 SHORT $LN175@Attack
$LN174@Attack:

; 821  : 			{
; 822  : 				AttackDamage = AttackDamage * 13 / 10;

  00fb5	6b 4d 1c 0d	 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 13
  00fb9	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00fbe	f7 e9		 imul	 ecx
  00fc0	c1 fa 02	 sar	 edx, 2
  00fc3	8b c2		 mov	 eax, edx
  00fc5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00fc8	03 c2		 add	 eax, edx
  00fca	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN175@Attack:

; 823  : 			}
; 824  : 
; 825  : 			GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  00fcd	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  00fd4	50		 push	 eax
  00fd5	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  00fdd	6a 00		 push	 0
  00fdf	68 ff 00 00 00	 push	 255			; 000000ffH
  00fe4	0f b7 c0	 movzx	 eax, ax
  00fe7	50		 push	 eax
  00fe8	ff 33		 push	 DWORD PTR [ebx]
  00fea	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  00fef	83 c4 14	 add	 esp, 20			; 00000014H
$LN161@Attack:

; 826  : 		}
; 827  : 
; 828  : 		if ( gObjAngelSprite(lpTargetObj) == TRUE )

  00ff2	57		 push	 edi
  00ff3	e8 00 00 00 00	 call	 ?gObjAngelSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjAngelSprite
  00ff8	83 c4 04	 add	 esp, 4
  00ffb	83 f8 01	 cmp	 eax, 1
  00ffe	75 21		 jne	 SHORT $LN177@Attack

; 829  : 		{
; 830  : 			if ( AttackDamage > 1 )

  01000	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01003	83 f8 01	 cmp	 eax, 1
  01006	7e 19		 jle	 SHORT $LN177@Attack

; 831  : 			{
; 832  : 				float  damage = (AttackDamage * 8) / 10.0f;

  01008	c1 e0 03	 shl	 eax, 3
  0100b	66 0f 6e c0	 movd	 xmm0, eax
  0100f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01012	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000

; 833  : 				AttackDamage = (int)damage;

  0101a	f3 0f 2c c0	 cvttss2si eax, xmm0
  0101e	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN177@Attack:

; 834  : 			}
; 835  : 		}
; 836  : 		
; 837  : 		
; 838  : 		if ( gObjGuardianSprice(lpTargetObj) == TRUE )

  01021	57		 push	 edi
  01022	e8 00 00 00 00	 call	 ?gObjGuardianSprice@@YAHPAUOBJECTSTRUCT@@@Z ; gObjGuardianSprice
  01027	83 c4 04	 add	 esp, 4
  0102a	83 f8 01	 cmp	 eax, 1
  0102d	75 26		 jne	 SHORT $LN179@Attack

; 839  : 		{
; 840  : 			if ( AttackDamage > 1 )

  0102f	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01032	3b c8		 cmp	 ecx, eax
  01034	7e 1f		 jle	 SHORT $LN179@Attack

; 841  : 			{
; 842  : 				float damage = AttackDamage * 7 / 10.0f;

  01036	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0103d	2b c1		 sub	 eax, ecx
  0103f	66 0f 6e c0	 movd	 xmm0, eax
  01043	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01046	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41200000

; 843  : 				AttackDamage = (int)damage;

  0104e	f3 0f 2c c0	 cvttss2si eax, xmm0
  01052	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN179@Attack:

; 844  : 			}
; 845  : 		}
; 846  : 
; 847  : 		if ( (lpObj->pInventory[10].IsItem() &&
; 848  : 			 (lpObj->pInventory[10].m_Type == ITEMGET(13, 76) || lpObj->pInventory[10].m_Type == ITEMGET(13, 77) || lpObj->pInventory[10].m_Type == ITEMGET(13, 78)) &&
; 849  : 			 lpObj->pInventory[10].m_Durability > 0.0f) || 

  01055	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  0105b	81 c1 48 08 00
	00		 add	 ecx, 2120		; 00000848H
  01061	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  01066	be 4c 1a 00 00	 mov	 esi, 6732		; 00001a4cH
  0106b	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  0106e	85 c0		 test	 eax, eax
  01070	74 32		 je	 SHORT $LN182@Attack
  01072	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  01078	0f b7 81 4e 08
	00 00		 movzx	 eax, WORD PTR [ecx+2126]
  0107f	66 3b c6	 cmp	 ax, si
  01082	74 0f		 je	 SHORT $LN183@Attack
  01084	66 3b c2	 cmp	 ax, dx
  01087	74 0a		 je	 SHORT $LN183@Attack
  01089	ba 4e 1a 00 00	 mov	 edx, 6734		; 00001a4eH
  0108e	66 3b c2	 cmp	 ax, dx
  01091	75 11		 jne	 SHORT $LN182@Attack
$LN183@Attack:
  01093	f3 0f 10 81 6c
	08 00 00	 movss	 xmm0, DWORD PTR [ecx+2156]
  0109b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  010a2	77 4c		 ja	 SHORT $LN181@Attack
$LN182@Attack:
  010a4	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  010aa	81 c1 1c 09 00
	00		 add	 ecx, 2332		; 0000091cH
  010b0	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  010b5	85 c0		 test	 eax, eax
  010b7	74 3b		 je	 SHORT $LN180@Attack
  010b9	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  010bf	0f b7 81 22 09
	00 00		 movzx	 eax, WORD PTR [ecx+2338]
  010c6	66 3b c6	 cmp	 ax, si
  010c9	74 14		 je	 SHORT $LN184@Attack
  010cb	ba 4d 1a 00 00	 mov	 edx, 6733		; 00001a4dH
  010d0	66 3b c2	 cmp	 ax, dx
  010d3	74 0a		 je	 SHORT $LN184@Attack
  010d5	ba 4e 1a 00 00	 mov	 edx, 6734		; 00001a4eH
  010da	66 3b c2	 cmp	 ax, dx
  010dd	75 15		 jne	 SHORT $LN180@Attack
$LN184@Attack:
  010df	f3 0f 10 81 40
	09 00 00	 movss	 xmm0, DWORD PTR [ecx+2368]
  010e7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  010ee	76 04		 jbe	 SHORT $LN180@Attack
$LN181@Attack:

; 850  : 
; 851  : 			 (lpObj->pInventory[11].IsItem() &&
; 852  : 			 (lpObj->pInventory[11].m_Type == ITEMGET(13, 76) || lpObj->pInventory[11].m_Type == ITEMGET(13, 77) || lpObj->pInventory[11].m_Type == ITEMGET(13, 78)) &&
; 853  : 			 lpObj->pInventory[11].m_Durability > 0.0f) )
; 854  : 		{
; 855  : 			AttackDamage += 30;

  010f0	83 45 1c 1e	 add	 DWORD PTR _AttackDamage$[ebp], 30 ; 0000001eH
$LN180@Attack:

; 856  : 		}
; 857  : 
; 858  : 		if ( gObjWingSprite(lpObj) == TRUE )

  010f4	53		 push	 ebx
  010f5	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  010fa	ba 06 19 00 00	 mov	 edx, 6406		; 00001906H
  010ff	83 c4 04	 add	 esp, 4
  01102	8d 72 03	 lea	 esi, DWORD PTR [edx+3]
  01105	83 f8 01	 cmp	 eax, 1
  01108	0f 85 ef 02 00
	00		 jne	 $LN185@Attack

; 859  : 		{
; 860  : 			CItem * Wing = &lpObj->pInventory[7];

  0110e	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]

; 861  : 
; 862  : 			if ( lpObj->Class == CLASS_WIZARD || lpObj->Class == CLASS_ELF )

  01114	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  0111b	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  01121	66 85 c0	 test	 ax, ax
  01124	0f 84 02 01 00
	00		 je	 $LN188@Attack
  0112a	83 f8 02	 cmp	 eax, 2
  0112d	0f 84 f9 00 00
	00		 je	 $LN188@Attack

; 865  : 			}
; 866  : 			else if ( lpObj->Class == CLASS_SUMMONER )

  01133	83 f8 05	 cmp	 eax, 5
  01136	0f 84 f0 00 00
	00		 je	 $LN188@Attack

; 867  : 			{
; 868  : 				lpObj->Life -= 1.0f;
; 869  : 			}
; 870  : 			else if( lpObj->Class == CLASS_FIGHTER )

  0113c	83 f8 06	 cmp	 eax, 6
  0113f	0f 85 d5 00 00
	00		 jne	 $LN191@Attack

; 871  : 			{
; 872  : 				if( skill == AT_SKILL_RAGEFIGHTER_DARKSIDE ||
; 873  : 					skill == AT_SKILL_RAGEFIGHTER_SIEGE ||
; 874  : 					skill == AT_SKILL_RAGEFIGHTER_CHAINDRIVE ||
; 875  : 					skill == AT_MSKILL_RF_CHAINDRIVE1 ||
; 876  : 					skill == AT_MSKILL_RF_CHAINDRIVE2 ||
; 877  : 					skill == AT_MSKILL_RF_DARKSIDE1 ||

  01145	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _skill$1$[ebp]
  0114b	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  01150	0f 84 b2 00 00
	00		 je	 $LN195@Attack
  01156	3d 0d 01 00 00	 cmp	 eax, 269		; 0000010dH
  0115b	0f 84 a7 00 00
	00		 je	 $LN195@Attack
  01161	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  01166	0f 84 9c 00 00
	00		 je	 $LN195@Attack
  0116c	3d 2e 02 00 00	 cmp	 eax, 558		; 0000022eH
  01171	0f 84 91 00 00
	00		 je	 $LN195@Attack
  01177	3d 32 02 00 00	 cmp	 eax, 562		; 00000232H
  0117c	0f 84 86 00 00
	00		 je	 $LN195@Attack
  01182	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  01187	74 7f		 je	 SHORT $LN195@Attack
  01189	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  0118e	74 78		 je	 SHORT $LN195@Attack

; 881  : 				}
; 882  : 				else if( skill == AT_SKILL_RAGEFIGHTER_DRAGONSLAYER )

  01190	3d 09 01 00 00	 cmp	 eax, 265		; 00000109H
  01195	75 15		 jne	 SHORT $LN196@Attack

; 883  : 				{
; 884  : 					lpObj->Life -= 100.0f;

  01197	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  0119f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@42c80000

; 885  : 				}
; 886  : 				else if( skill == AT_SKILL_RAGEFIGHTER_WEAPON1 ||

  011a7	e9 90 00 00 00	 jmp	 $LN892@Attack
$LN196@Attack:

; 887  : 					skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 888  : 					skill == AT_SKILL_RAGEFIGHTER_DRAGONLORE ||
; 889  : 					skill == AT_MSKILL_RF_KILLBLOW1 || 
; 890  : 					skill == AT_MSKILL_RF_KILLBLOW2 || 
; 891  : 					skill == AT_MSKILL_RF_UPERCUT1 ||

  011ac	3d 04 01 00 00	 cmp	 eax, 260		; 00000104H
  011b1	74 43		 je	 SHORT $LN200@Attack
  011b3	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  011b8	74 3c		 je	 SHORT $LN200@Attack
  011ba	3d 08 01 00 00	 cmp	 eax, 264		; 00000108H
  011bf	74 35		 je	 SHORT $LN200@Attack
  011c1	3d 27 02 00 00	 cmp	 eax, 551		; 00000227H
  011c6	74 2e		 je	 SHORT $LN200@Attack
  011c8	3d 2a 02 00 00	 cmp	 eax, 554		; 0000022aH
  011cd	74 27		 je	 SHORT $LN200@Attack
  011cf	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  011d4	74 20		 je	 SHORT $LN200@Attack
  011d6	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  011db	74 19		 je	 SHORT $LN200@Attack

; 895  : 				}
; 896  : 				else if( skill == AT_SKILL_PHOENIXSHOT )
; 897  : 				{
; 898  : 					lpObj->Life -= 2.0f;

  011dd	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  011e5	3d 0e 01 00 00	 cmp	 eax, 270		; 0000010eH
  011ea	75 36		 jne	 SHORT $LN201@Attack
  011ec	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000

; 899  : 				}
; 900  : 				else

  011f4	eb 46		 jmp	 SHORT $LN892@Attack
$LN200@Attack:

; 892  : 					skill == AT_MSKILL_RF_UPERCUT2 )
; 893  : 				{
; 894  : 					lpObj->Life -= 2.0f;

  011f6	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  011fe	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  01206	eb 34		 jmp	 SHORT $LN892@Attack
$LN195@Attack:

; 878  : 					skill == AT_MSKILL_RF_DARKSIDE2 )
; 879  : 				{
; 880  : 					lpObj->Life -= 4.0f;

  01208	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  01210	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000

; 901  : 				{
; 902  : 					lpObj->Life -= 3.0f;
; 903  : 				}
; 904  : 			}
; 905  : 			else

  01218	eb 22		 jmp	 SHORT $LN892@Attack
$LN191@Attack:

; 906  : 			{
; 907  : 				lpObj->Life -= 3.0f;

  0121a	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
$LN201@Attack:
  01222	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40400000
  0122a	eb 10		 jmp	 SHORT $LN892@Attack
$LN188@Attack:

; 863  : 			{
; 864  : 				lpObj->Life -= 1.0f;

  0122c	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  01234	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
$LN892@Attack:
  0123c	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0
  01244	0f 57 c0	 xorps	 xmm0, xmm0

; 908  : 			}
; 909  : 
; 910  : 			if ( lpObj->Life < 0.0f )

  01247	0f 2f 83 d8 00
	00 00		 comiss	 xmm0, DWORD PTR [ebx+216]
  0124e	76 0f		 jbe	 SHORT $LN203@Attack

; 911  : 			{
; 912  : 				lpObj->Life = 0.0f;

  01250	c7 83 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+216], 0

; 913  : 			}
; 914  : 			else

  0125a	e9 79 01 00 00	 jmp	 $LN232@Attack
$LN203@Attack:

; 915  : 			{
; 916  : 				if( Wing->m_Type >= ITEMGET(12,36) && Wing->m_Type <= ITEMGET(12,40) )

  0125f	0f b7 41 06	 movzx	 eax, WORD PTR [ecx+6]
  01263	66 3b 85 84 fe
	ff ff		 cmp	 ax, WORD PTR tv3257[ebp]
  0126a	7c 19		 jl	 SHORT $LN205@Attack
  0126c	66 3b 85 80 fe
	ff ff		 cmp	 ax, WORD PTR tv3265[ebp]
  01273	7f 10		 jg	 SHORT $LN205@Attack

; 917  : 				{
; 918  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 139) / 100;

  01275	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  01279	8d 0c 45 8b 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+139]
  01280	e9 3b 01 00 00	 jmp	 $LN893@Attack
$LN205@Attack:

; 919  : 				}
; 920  : 				else if( Wing->m_Type == ITEMGET(12,262) )

  01285	66 3b c2	 cmp	 ax, dx
  01288	75 0c		 jne	 SHORT $LN207@Attack

; 921  : 				{
; 922  : 					AttackDamage = AttackDamage * (Wing->m_Level + 127) / 100;

  0128a	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  0128e	83 c1 7f	 add	 ecx, 127		; 0000007fH
  01291	e9 2a 01 00 00	 jmp	 $LN893@Attack
$LN207@Attack:

; 923  : 				}
; 924  : 				else if( Wing->m_Type == ITEMGET(12,263) )

  01296	ba 07 19 00 00	 mov	 edx, 6407		; 00001907H
  0129b	66 3b c2	 cmp	 ax, dx
  0129e	75 0f		 jne	 SHORT $LN209@Attack

; 925  : 				{
; 926  : 					AttackDamage = AttackDamage * (Wing->m_Level + 133) / 100;

  012a0	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  012a4	81 c1 85 00 00
	00		 add	 ecx, 133		; 00000085H
  012aa	e9 11 01 00 00	 jmp	 $LN893@Attack
$LN209@Attack:

; 927  : 				}
; 928  : 				else if( Wing->m_Type == ITEMGET(12,264) || Wing->m_Type == ITEMGET(12,265) )

  012af	ba 08 19 00 00	 mov	 edx, 6408		; 00001908H
  012b4	66 3b c2	 cmp	 ax, dx
  012b7	0f 84 f9 00 00
	00		 je	 $LN213@Attack
  012bd	66 3b c6	 cmp	 ax, si
  012c0	0f 84 f0 00 00
	00		 je	 $LN213@Attack

; 931  : 				}
; 932  : 				else if( Wing->m_Type == ITEMGET(12,266) )

  012c6	ba 0a 19 00 00	 mov	 edx, 6410		; 0000190aH
  012cb	66 3b c2	 cmp	 ax, dx
  012ce	75 0c		 jne	 SHORT $LN214@Attack

; 933  : 				{
; 934  : 					AttackDamage = AttackDamage * 171 / 100;

  012d0	69 4d 1c ab 00
	00 00		 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 171
  012d7	e9 e8 00 00 00	 jmp	 $LN894@Attack
$LN214@Attack:

; 935  : 				}
; 936  : 				else if( Wing->m_Type == ITEMGET(12,267) )

  012dc	ba 0b 19 00 00	 mov	 edx, 6411		; 0000190bH
  012e1	66 3b c2	 cmp	 ax, dx
  012e4	75 0f		 jne	 SHORT $LN216@Attack

; 937  : 				{
; 938  : 					AttackDamage = AttackDamage * (Wing->m_Level + 160) / 100;

  012e6	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  012ea	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  012f0	e9 cb 00 00 00	 jmp	 $LN893@Attack
$LN216@Attack:

; 939  : 				}
; 940  : #if (CUSTOM_WINGS == 1)
; 941  : 				else if( Wing->m_Type >= ITEMGET(12,440) && Wing->m_Type <= ITEMGET(12,445))
; 942  : 				{
; 943  : 					if( Wing->m_Type == ITEMGET(12,444) )
; 944  : 					{
; 945  : 						AttackDamage = AttackDamage * (Wing->m_Level*3 + 130) / 100;
; 946  : 					}
; 947  : 					else
; 948  : 					{
; 949  : 						AttackDamage = AttackDamage * (Wing->m_Level*3 + 139) / 100;
; 950  : 					}
; 951  : 				}
; 952  : #endif
; 953  : 				else if( Wing->m_Type == ITEMGET(13,30) || Wing->m_Type == ITEMGET(12,130) || Wing->m_Type == ITEMGET(12,135) )

  012f5	ba 1e 1a 00 00	 mov	 edx, 6686		; 00001a1eH
  012fa	66 3b c2	 cmp	 ax, dx
  012fd	74 67		 je	 SHORT $LN220@Attack
  012ff	ba 82 18 00 00	 mov	 edx, 6274		; 00001882H
  01304	66 3b c2	 cmp	 ax, dx
  01307	74 5d		 je	 SHORT $LN220@Attack
  01309	ba 87 18 00 00	 mov	 edx, 6279		; 00001887H
  0130e	66 3b c2	 cmp	 ax, dx
  01311	74 53		 je	 SHORT $LN220@Attack

; 954  : 				{
; 955  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 120) / 100;
; 956  : 				}
; 957  : 				else if( Wing->m_Type == ITEMGET(12,41) )

  01313	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  01318	66 3b c2	 cmp	 ax, dx
  0131b	75 12		 jne	 SHORT $LN221@Attack

; 958  : 				{
; 959  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 112) / 100;

  0131d	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  01321	83 c1 38	 add	 ecx, 56			; 00000038H
  01324	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01328	03 c9		 add	 ecx, ecx
  0132a	e9 95 00 00 00	 jmp	 $LN894@Attack
$LN221@Attack:

; 960  : 				}
; 961  : 				else if( Wing->m_Type == ITEMGET(12,42) )

  0132f	ba 2a 18 00 00	 mov	 edx, 6186		; 0000182aH
  01334	66 3b c2	 cmp	 ax, dx
  01337	75 0c		 jne	 SHORT $LN223@Attack

; 962  : 				{
; 963  : 					AttackDamage = AttackDamage * (Wing->m_Level + 132) / 100;

  01339	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  0133d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  01343	eb 7b		 jmp	 SHORT $LN893@Attack
$LN223@Attack:

; 964  : 				}
; 965  : 				else if( Wing->m_Type == ITEMGET(12,43) )

  01345	ba 2b 18 00 00	 mov	 edx, 6187		; 0000182bH
  0134a	66 3b c2	 cmp	 ax, dx
  0134d	75 0d		 jne	 SHORT $LN225@Attack

; 966  : 				{
; 967  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 139) / 100;

  0134f	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  01353	8d 0c 45 8b 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+139]
  0135a	eb 64		 jmp	 SHORT $LN893@Attack
$LN225@Attack:

; 968  : 				}
; 969  : 				else if( Wing->m_Type == ITEMGET(12,49) )

  0135c	ba 31 18 00 00	 mov	 edx, 6193		; 00001831H
  01361	66 3b c2	 cmp	 ax, dx
  01364	75 0f		 jne	 SHORT $LN227@Attack
$LN220@Attack:

; 970  : 				{
; 971  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 120) / 100;

  01366	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  0136a	83 c1 3c	 add	 ecx, 60			; 0000003cH
  0136d	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01371	03 c9		 add	 ecx, ecx
  01373	eb 4f		 jmp	 SHORT $LN894@Attack
$LN227@Attack:

; 972  : 				}
; 973  : 				else if( Wing->m_Type == ITEMGET(12,50) )

  01375	ba 32 18 00 00	 mov	 edx, 6194		; 00001832H
  0137a	66 3b c2	 cmp	 ax, dx
  0137d	75 0d		 jne	 SHORT $LN229@Attack

; 974  : 				{
; 975  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 139) / 100;

  0137f	0f bf 41 08	 movsx	 eax, WORD PTR [ecx+8]
  01383	8d 0c 45 8b 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+139]
  0138a	eb 34		 jmp	 SHORT $LN893@Attack
$LN229@Attack:

; 976  : 				}
; 977  : 				else if( Wing->m_Type > ITEMGET(12,2) )
; 978  : 				{
; 979  : 					AttackDamage = AttackDamage * (Wing->m_Level + 132) / 100;

  0138c	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  01390	ba 02 18 00 00	 mov	 edx, 6146		; 00001802H
  01395	66 3b c2	 cmp	 ax, dx
  01398	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0139d	7e 0c		 jle	 SHORT $LN231@Attack
  0139f	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  013a5	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]

; 980  : 				}
; 981  : 				else

  013a9	eb 1e		 jmp	 SHORT $LN895@Attack
$LN231@Attack:

; 982  : 				{
; 983  : 					AttackDamage = AttackDamage * (Wing->m_Level*2 + 112) / 100;

  013ab	83 c1 38	 add	 ecx, 56			; 00000038H
  013ae	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  013b2	03 c9		 add	 ecx, ecx
  013b4	eb 13		 jmp	 SHORT $LN895@Attack
$LN213@Attack:

; 929  : 				{
; 930  : 					AttackDamage = AttackDamage * (Wing->m_Level + 135) / 100;

  013b6	0f bf 49 08	 movsx	 ecx, WORD PTR [ecx+8]
  013ba	81 c1 87 00 00
	00		 add	 ecx, 135		; 00000087H
$LN893@Attack:
  013c0	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN894@Attack:
  013c4	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
$LN895@Attack:
  013c9	f7 e9		 imul	 ecx
  013cb	c1 fa 05	 sar	 edx, 5
  013ce	8b c2		 mov	 eax, edx
  013d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  013d3	03 c2		 add	 eax, edx
  013d5	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN232@Attack:

; 984  : 				}
; 985  : 			}
; 986  : 
; 987  : 			GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  013d8	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  013df	50		 push	 eax
  013e0	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  013e8	6a 00		 push	 0
  013ea	68 ff 00 00 00	 push	 255			; 000000ffH
  013ef	0f b7 c0	 movzx	 eax, ax
  013f2	50		 push	 eax
  013f3	ff 33		 push	 DWORD PTR [ebx]
  013f5	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  013fa	83 c4 14	 add	 esp, 20			; 00000014H
$LN185@Attack:

; 988  : 		}
; 989  : 
; 990  : 		int RestoreHP = 0;
; 991  : 		int RestoreMP = 0;
; 992  : 		int RestoreSD = 0;
; 993  : 
; 994  : #if(__NOVUS__==1)
; 995  : 		if( lpObj->Type == OBJ_MONSTER && lpTargetObj->Type == OBJ_USER )
; 996  : 		{
; 997  : 			if( g_SoulSystem.IsMap(lpTargetObj->MapNumber) && !g_SoulSystem.WithSoul(lpTargetObj) )
; 998  : 			{
; 999  : 
; 1000 : 			}
; 1001 : 		}
; 1002 : 		else
; 1003 : 		{
; 1004 : #endif
; 1005 : 		if ( gObjWingSprite(lpTargetObj) == TRUE )

  013fd	57		 push	 edi
  013fe	33 f6		 xor	 esi, esi
  01400	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  01405	83 c4 04	 add	 esp, 4
  01408	83 f8 01	 cmp	 eax, 1
  0140b	0f 85 5c 01 00
	00		 jne	 $LN859@Attack

; 1006 : 		{
; 1007 : 			CItem * Wing = &lpTargetObj->pInventory[7];
; 1008 : 
; 1009 : 			if ( AttackDamage > 1 )

  01411	8b 75 1c	 mov	 esi, DWORD PTR _AttackDamage$[ebp]
  01414	8b 97 c0 11 00
	00		 mov	 edx, DWORD PTR [edi+4544]
  0141a	3b f0		 cmp	 esi, eax
  0141c	0f 8e 49 01 00
	00		 jle	 $LN857@Attack

; 1010 : 			{
; 1011 : 				if( (Wing->m_Type >= ITEMGET(12,36) && Wing->m_Type <= ITEMGET(12,40)) ||
; 1012 : 					 Wing->m_Type == ITEMGET(12,43) || Wing->m_Type == ITEMGET(12,50) )

  01422	0f b7 82 d2 05
	00 00		 movzx	 eax, WORD PTR [edx+1490]
  01429	b9 24 18 00 00	 mov	 ecx, 6180		; 00001824H
  0142e	66 3b c1	 cmp	 ax, cx
  01431	b9 28 18 00 00	 mov	 ecx, 6184		; 00001828H
  01436	7c 09		 jl	 SHORT $LN238@Attack
  01438	66 3b c1	 cmp	 ax, cx
  0143b	0f 8e 3f 02 00
	00		 jle	 $LN896@Attack
$LN238@Attack:
  01441	66 3b 85 98 fe
	ff ff		 cmp	 ax, WORD PTR tv3275[ebp]
  01448	0f 84 2f 02 00
	00		 je	 $LN237@Attack
  0144e	66 3b 85 b8 fe
	ff ff		 cmp	 ax, WORD PTR tv3322[ebp]
  01455	0f 84 22 02 00
	00		 je	 $LN237@Attack

; 1036 : 						RestoreMP += 5;
; 1037 : 				}
; 1038 : 				else if( Wing->m_Type >= ITEMGET(12,262) && Wing->m_Type <= ITEMGET(12,265) )

  0145b	b9 06 19 00 00	 mov	 ecx, 6406		; 00001906H
  01460	66 3b c1	 cmp	 ax, cx
  01463	7c 4a		 jl	 SHORT $LN245@Attack
  01465	b9 09 19 00 00	 mov	 ecx, 6409		; 00001909H
  0146a	66 3b c1	 cmp	 ax, cx
  0146d	7f 40		 jg	 SHORT $LN245@Attack

; 1039 : 				{
; 1040 : 					float damage = AttackDamage * (70 - Wing->m_Level*2) / 100.0f;

  0146f	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
  01476	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  0147b	2b c8		 sub	 ecx, eax
  0147d	0f af ce	 imul	 ecx, esi
  01480	03 c9		 add	 ecx, ecx
  01482	66 0f 6e c1	 movd	 xmm0, ecx
  01486	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01489	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000

; 1041 : 					AttackDamage = (int)damage;

  01491	f3 0f 2c c0	 cvttss2si eax, xmm0
  01495	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1042 : 
; 1043 : 					BYTE ExcOp = lpTargetObj->pInventory[7].m_NewOption;
; 1044 : 
; 1045 : 					if( (ExcOp&2) == 2 )

  01498	f6 82 5f 06 00
	00 02		 test	 BYTE PTR [edx+1631], 2
  0149f	0f 84 c6 00 00
	00		 je	 $LN857@Attack

; 1046 : 						RestoreHP += 5;

  014a5	be 05 00 00 00	 mov	 esi, 5

; 1047 : 				}

  014aa	e9 be 00 00 00	 jmp	 $LN859@Attack
$LN245@Attack:

; 1048 : 				else if( Wing->m_Type == ITEMGET(12,266) )

  014af	b9 0a 19 00 00	 mov	 ecx, 6410		; 0000190aH
  014b4	66 3b c1	 cmp	 ax, cx
  014b7	75 3a		 jne	 SHORT $LN248@Attack

; 1049 : 				{
; 1050 : 					float damage = AttackDamage * 29 / 100.0f;

  014b9	6b c6 1d	 imul	 eax, esi, 29

; 1051 : 					AttackDamage = (int)damage;
; 1052 : 
; 1053 : 					BYTE ExcOp = lpTargetObj->pInventory[7].m_NewOption;
; 1054 : 
; 1055 : 					if( (ExcOp&8) == 8 )

  014bc	b9 00 00 00 00	 mov	 ecx, 0
  014c1	66 0f 6e c0	 movd	 xmm0, eax
  014c5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  014c8	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  014d0	f3 0f 2c c0	 cvttss2si eax, xmm0
  014d4	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  014d7	8a 82 5f 06 00
	00		 mov	 al, BYTE PTR [edx+1631]
  014dd	ba 05 00 00 00	 mov	 edx, 5
  014e2	a8 08		 test	 al, 8
  014e4	0f 45 ca	 cmovne	 ecx, edx

; 1056 : 						RestoreMP += 5;
; 1057 : 
; 1058 : 					if( (ExcOp&4) == 4 )

  014e7	a8 04		 test	 al, 4
  014e9	0f 84 0d 02 00
	00		 je	 $LN855@Attack

; 1059 : 						RestoreHP += 5;

  014ef	8b f2		 mov	 esi, edx

; 1060 : 				}

  014f1	eb 7c		 jmp	 SHORT $LN244@Attack
$LN248@Attack:

; 1061 : 				else if( Wing->m_Type == ITEMGET(12,267) )

  014f3	b9 0b 19 00 00	 mov	 ecx, 6411		; 0000190bH
  014f8	66 3b c1	 cmp	 ax, cx
  014fb	75 37		 jne	 SHORT $LN252@Attack

; 1062 : 				{
; 1063 : 					float damage = AttackDamage * (40 - Wing->m_Level) / 100.0f;

  014fd	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
  01504	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  01509	2b c8		 sub	 ecx, eax
  0150b	0f af ce	 imul	 ecx, esi
  0150e	66 0f 6e c1	 movd	 xmm0, ecx
  01512	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01515	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000

; 1064 : 					AttackDamage = (int)damage;

  0151d	f3 0f 2c c0	 cvttss2si eax, xmm0
  01521	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1065 : 
; 1066 : 					BYTE ExcOp = lpTargetObj->pInventory[7].m_NewOption;
; 1067 : 
; 1068 : 					if( (ExcOp&4) == 4 )

  01524	f6 82 5f 06 00
	00 04		 test	 BYTE PTR [edx+1631], 4
  0152b	74 3e		 je	 SHORT $LN857@Attack

; 1069 : 						RestoreHP += 5;

  0152d	be 05 00 00 00	 mov	 esi, 5

; 1070 : 				}

  01532	eb 39		 jmp	 SHORT $LN859@Attack
$LN252@Attack:

; 1071 : 				else if( Wing->m_Type == ITEMGET(12,49) )

  01534	b9 31 18 00 00	 mov	 ecx, 6193		; 00001831H
  01539	66 3b c1	 cmp	 ax, cx
  0153c	0f 85 d1 00 00
	00		 jne	 $LN255@Attack

; 1072 : 				{
; 1073 : 					float damage = AttackDamage * (90 - Wing->m_Level*2) / 100.0f;

  01542	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
$LN962@Attack:
  01547	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
$LN899@Attack:
  0154e	2b c8		 sub	 ecx, eax
  01550	0f af ce	 imul	 ecx, esi
  01553	03 c9		 add	 ecx, ecx
$LN898@Attack:
  01555	66 0f 6e c1	 movd	 xmm0, ecx
  01559	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0155c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000

; 1074 : 					AttackDamage = (int)damage;

  01564	f3 0f 2c c0	 cvttss2si eax, xmm0
  01568	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN857@Attack:
  0156b	33 f6		 xor	 esi, esi
$LN859@Attack:
  0156d	33 c9		 xor	 ecx, ecx
$LN244@Attack:

; 1119 : 				}
; 1120 : 			}
; 1121 : 		}
; 1122 : #if(__NOVUS__==1)
; 1123 : 		}
; 1124 : #endif
; 1125 : 
; 1126 : 		if( lpTargetObj->Type == OBJ_USER )

  0156f	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  01573	75 55		 jne	 SHORT $LN877@Attack

; 1127 : 		{
; 1128 : 			RestoreHP += (int)lpTargetObj->m_MPSkillOpt.MpsRestoreFullHP;

  01575	f3 0f 2c 87 5c
	08 00 00	 cvttss2si eax, DWORD PTR [edi+2140]
  0157d	03 f0		 add	 esi, eax

; 1129 : 			RestoreMP += (int)lpTargetObj->m_MPSkillOpt.MpsRestoreFullMP;

  0157f	f3 0f 2c 87 60
	08 00 00	 cvttss2si eax, DWORD PTR [edi+2144]
  01587	03 c8		 add	 ecx, eax
  01589	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _RestoreMP$1$[ebp], ecx

; 1130 : 			RestoreSD += (int)lpTargetObj->m_MPSkillOpt.MpsRestoreFullSD;

  0158f	f3 0f 2c 87 64
	08 00 00	 cvttss2si eax, DWORD PTR [edi+2148]
  01597	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _RestoreSD$1$[ebp], eax

; 1131 : 
; 1132 : 			if( RestoreHP && rand()%100 < RestoreHP )

  0159d	85 f6		 test	 esi, esi
  0159f	0f 84 64 01 00
	00		 je	 $LN265@Attack
  015a5	e8 00 00 00 00	 call	 _rand
  015aa	99		 cdq
  015ab	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  015b0	f7 f9		 idiv	 ecx
  015b2	3b d6		 cmp	 edx, esi
  015b4	0f 8d 49 01 00
	00		 jge	 $LN858@Attack

; 1133 : 			{
; 1134 : 				gObjAddMsgSendDelay(lpTargetObj,13,lpObj->m_Index,100,0);

  015ba	6a 00		 push	 0
  015bc	51		 push	 ecx
  015bd	ff 33		 push	 DWORD PTR [ebx]
  015bf	6a 0d		 push	 13			; 0000000dH
$LN900@Attack:

; 1141 : 			{
; 1142 : 				gObjAddMsgSendDelay(lpTargetObj,15,lpObj->m_Index,100,0);

  015c1	57		 push	 edi
  015c2	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  015c7	83 c4 14	 add	 esp, 20			; 00000014H
$LN877@Attack:
  015ca	be 64 00 00 00	 mov	 esi, 100		; 00000064H
$LN269@Attack:

; 1143 : 			}
; 1144 : 		}
; 1145 : 
; 1146 : 		if ( gObjDenorantSprite(lpObj ) )

  015cf	53		 push	 ebx
  015d0	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  015d5	83 c4 04	 add	 esp, 4
  015d8	85 c0		 test	 eax, eax
  015da	0f 84 c6 01 00
	00		 je	 $LN270@Attack

; 1147 : 		{
; 1148 : 			lpObj->Life -= 1.0f;

  015e0	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  015e8	0f 57 c9	 xorps	 xmm1, xmm1
  015eb	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000

; 1149 : 
; 1150 : 			if ( lpObj->Life < 0.0f )

  015f3	0f 2f c8	 comiss	 xmm1, xmm0
  015f6	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0
  015fe	0f 86 65 01 00
	00		 jbe	 $LN271@Attack

; 1151 : 			{
; 1152 : 				lpObj->Life = 0.0f;

  01604	c7 83 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+216], 0

; 1153 : 			}
; 1154 : 			else

  0160e	e9 6e 01 00 00	 jmp	 $LN272@Attack
$LN255@Attack:

; 1075 : 				}
; 1076 : 				else if( Wing->m_Type == ITEMGET(12,130) || Wing->m_Type == ITEMGET(12,135) )

  01613	b9 82 18 00 00	 mov	 ecx, 6274		; 00001882H
  01618	66 3b c1	 cmp	 ax, cx
  0161b	74 56		 je	 SHORT $LN259@Attack
  0161d	b9 87 18 00 00	 mov	 ecx, 6279		; 00001887H
  01622	66 3b c1	 cmp	 ax, cx
  01625	74 4c		 je	 SHORT $LN259@Attack

; 1080 : 				}
; 1081 : 				else if( Wing->m_Type == ITEMGET(13,30) )

  01627	b9 1e 1a 00 00	 mov	 ecx, 6686		; 00001a1eH
  0162c	66 3b c1	 cmp	 ax, cx
  0162f	75 16		 jne	 SHORT $LN260@Attack

; 1082 : 				{
; 1083 : 					float damage = AttackDamage * (90 - Wing->m_Level) / 100.0f;

  01631	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
  01638	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  0163d	2b c8		 sub	 ecx, eax
  0163f	0f af ce	 imul	 ecx, esi

; 1084 : 					AttackDamage = (int)damage;

  01642	e9 0e ff ff ff	 jmp	 $LN898@Attack
$LN260@Attack:

; 1085 : 				}
; 1086 : #if (CUSTOM_WINGS == 1)
; 1087 : 				else if( Wing->m_Type >= ITEMGET(12,440) && Wing->m_Type <= ITEMGET(12,445) )
; 1088 : 				{
; 1089 : 					float damage;
; 1090 : 
; 1091 : 					if( Wing->m_Type == ITEMGET(12,444) )
; 1092 : 					{
; 1093 : 						damage = AttackDamage * (70 - Wing->m_Level*3) / 100.0f;
; 1094 : 					}
; 1095 : 					else
; 1096 : 					{
; 1097 : 						damage = AttackDamage * (61 - Wing->m_Level*3) / 100.0f;
; 1098 : 					}
; 1099 : 					
; 1100 : 					AttackDamage = (int)damage;
; 1101 : 
; 1102 : 					BYTE ExcOp = lpTargetObj->pInventory[7].m_NewOption;
; 1103 : 
; 1104 : 					if( (ExcOp&4) == 4 )
; 1105 : 					{
; 1106 : 						RestoreHP += 10;
; 1107 : 					}
; 1108 : 				}
; 1109 : #endif
; 1110 : 				else if( Wing->m_Type > ITEMGET(12,2) )

  01647	b9 02 18 00 00	 mov	 ecx, 6146		; 00001802H
  0164c	66 3b c1	 cmp	 ax, cx

; 1111 : 				{
; 1112 : 					float damage = AttackDamage * (75 - Wing->m_Level*2) / 100.0f;

  0164f	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
  01656	7e 11		 jle	 SHORT $LN262@Attack
  01658	03 c0		 add	 eax, eax
  0165a	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  0165f	2b c8		 sub	 ecx, eax
  01661	0f af ce	 imul	 ecx, esi

; 1113 : 					AttackDamage = (int)damage;
; 1114 : 				}
; 1115 : 				else

  01664	e9 ec fe ff ff	 jmp	 $LN898@Attack
$LN262@Attack:

; 1116 : 				{
; 1117 : 					float damage = AttackDamage * (88 - Wing->m_Level*2) / 100.0f;

  01669	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH

; 1118 : 					AttackDamage = (int)damage;

  0166e	e9 db fe ff ff	 jmp	 $LN899@Attack
$LN259@Attack:

; 1077 : 				{
; 1078 : 					float damage = AttackDamage * (80 - Wing->m_Level*2) / 100.0f;

  01673	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H

; 1079 : 					AttackDamage = (int)damage;

  01678	e9 ca fe ff ff	 jmp	 $LN962@Attack
$LN237@Attack:

; 1013 : 				{
; 1014 : 					if( Wing->m_Type == ITEMGET(12,40) )

  0167d	66 3b c1	 cmp	 ax, cx
$LN896@Attack:
  01680	75 15		 jne	 SHORT $LN239@Attack

; 1015 : 					{
; 1016 : 						float damage = AttackDamage * (76 - Wing->m_Level*2) / 100.0f;

  01682	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
  01689	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0168e	2b c8		 sub	 ecx, eax
  01690	0f af ce	 imul	 ecx, esi
  01693	03 c9		 add	 ecx, ecx

; 1017 : 						AttackDamage = (int)damage;

  01695	eb 2b		 jmp	 SHORT $LN897@Attack
$LN239@Attack:

; 1018 : 					}
; 1019 : 					else if( Wing->m_Type == ITEMGET(12,50) )

  01697	b9 32 18 00 00	 mov	 ecx, 6194		; 00001832H
  0169c	66 3b c1	 cmp	 ax, cx

; 1020 : 					{
; 1021 : 						float damage = AttackDamage * (76 - Wing->m_Level*2) / 100.0f;

  0169f	0f bf 82 d4 05
	00 00		 movsx	 eax, WORD PTR [edx+1492]
  016a6	75 0e		 jne	 SHORT $LN241@Attack
  016a8	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  016ad	2b c8		 sub	 ecx, eax
  016af	0f af ce	 imul	 ecx, esi
  016b2	03 c9		 add	 ecx, ecx

; 1022 : 						AttackDamage = (int)damage;
; 1023 : 					}
; 1024 : 					else

  016b4	eb 0c		 jmp	 SHORT $LN897@Attack
$LN241@Attack:

; 1025 : 					{
; 1026 : 						float damage = AttackDamage * (61 - Wing->m_Level*2) / 100.0f;

  016b6	03 c0		 add	 eax, eax
  016b8	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  016bd	2b c8		 sub	 ecx, eax
  016bf	0f af ce	 imul	 ecx, esi
$LN897@Attack:

; 1027 : 						AttackDamage = (int)damage;
; 1028 : 					}
; 1029 : 
; 1030 : 					BYTE ExcOp = lpTargetObj->pInventory[7].m_NewOption;
; 1031 : 
; 1032 : 					if( (ExcOp&4) == 4 )

  016c2	66 0f 6e c1	 movd	 xmm0, ecx
  016c6	be 00 00 00 00	 mov	 esi, 0
  016cb	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1033 : 						RestoreHP += 5;
; 1034 : 					
; 1035 : 					if( (ExcOp&8) == 8 )

  016ce	b9 00 00 00 00	 mov	 ecx, 0
  016d3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  016db	f3 0f 2c c0	 cvttss2si eax, xmm0
  016df	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  016e2	8a 82 5f 06 00
	00		 mov	 al, BYTE PTR [edx+1631]
  016e8	ba 05 00 00 00	 mov	 edx, 5
  016ed	a8 04		 test	 al, 4
  016ef	0f 45 f2	 cmovne	 esi, edx
  016f2	a8 08		 test	 al, 8
  016f4	0f 45 ca	 cmovne	 ecx, edx
  016f7	e9 73 fe ff ff	 jmp	 $LN244@Attack
$LN855@Attack:
  016fc	33 f6		 xor	 esi, esi
  016fe	e9 6c fe ff ff	 jmp	 $LN244@Attack
$LN858@Attack:
  01703	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _RestoreMP$1$[ebp]
$LN265@Attack:

; 1135 : 			}
; 1136 : 			else if( RestoreMP && rand()%100 < RestoreMP )

  01709	85 c9		 test	 ecx, ecx
  0170b	74 2a		 je	 SHORT $LN267@Attack
  0170d	e8 00 00 00 00	 call	 _rand
  01712	99		 cdq
  01713	be 64 00 00 00	 mov	 esi, 100		; 00000064H
  01718	f7 fe		 idiv	 esi
  0171a	3b 95 d8 fe ff
	ff		 cmp	 edx, DWORD PTR _RestoreMP$1$[ebp]
  01720	7d 15		 jge	 SHORT $LN267@Attack

; 1137 : 			{
; 1138 : 				gObjAddMsgSendDelay(lpTargetObj,14,lpObj->m_Index,100,0);

  01722	6a 00		 push	 0
  01724	56		 push	 esi
  01725	ff 33		 push	 DWORD PTR [ebx]
  01727	6a 0e		 push	 14			; 0000000eH
  01729	57		 push	 edi
  0172a	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  0172f	83 c4 14	 add	 esp, 20			; 00000014H
  01732	e9 98 fe ff ff	 jmp	 $LN269@Attack
$LN267@Attack:

; 1139 : 			}
; 1140 : 			else if( RestoreSD && rand()%100 < RestoreSD )

  01737	8b b5 b8 fe ff
	ff		 mov	 esi, DWORD PTR _RestoreSD$1$[ebp]
  0173d	85 f6		 test	 esi, esi
  0173f	0f 84 85 fe ff
	ff		 je	 $LN877@Attack
  01745	e8 00 00 00 00	 call	 _rand
  0174a	99		 cdq
  0174b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01750	f7 f9		 idiv	 ecx
  01752	3b d6		 cmp	 edx, esi
  01754	7d 0c		 jge	 SHORT $LN876@Attack

; 1141 : 			{
; 1142 : 				gObjAddMsgSendDelay(lpTargetObj,15,lpObj->m_Index,100,0);

  01756	6a 00		 push	 0
  01758	51		 push	 ecx
  01759	ff 33		 push	 DWORD PTR [ebx]
  0175b	6a 0f		 push	 15			; 0000000fH
  0175d	e9 5f fe ff ff	 jmp	 $LN900@Attack
$LN876@Attack:
  01762	8b f1		 mov	 esi, ecx
  01764	e9 66 fe ff ff	 jmp	 $LN269@Attack
$LN271@Attack:

; 1155 : 			{
; 1156 : 				AttackDamage = AttackDamage * 115 / 100;

  01769	6b 4d 1c 73	 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 115
  0176d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01772	f7 e9		 imul	 ecx
  01774	c1 fa 05	 sar	 edx, 5
  01777	8b c2		 mov	 eax, edx
  01779	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0177c	03 c2		 add	 eax, edx
  0177e	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN272@Attack:

; 1157 : 			}
; 1158 : 
; 1159 : 			GCReFillSend(lpObj->m_Index, (WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  01781	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  01788	50		 push	 eax
  01789	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  01791	6a 00		 push	 0
  01793	68 ff 00 00 00	 push	 255			; 000000ffH
  01798	0f b7 c0	 movzx	 eax, ax
  0179b	50		 push	 eax
  0179c	ff 33		 push	 DWORD PTR [ebx]
  0179e	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  017a3	83 c4 14	 add	 esp, 20			; 00000014H
$LN270@Attack:

; 1160 : 		}
; 1161 : 
; 1162 : 		if ( gObjDenorantSprite(lpTargetObj ) )

  017a6	57		 push	 edi
  017a7	e8 00 00 00 00	 call	 ?gObjDenorantSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDenorantSprite
  017ac	83 c4 04	 add	 esp, 4
  017af	85 c0		 test	 eax, eax
  017b1	0f 84 81 00 00
	00		 je	 $LN273@Attack

; 1163 : 		{
; 1164 : 			CItem * Dinorant = &lpTargetObj->pInventory[8];

  017b7	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  017bd	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H

; 1165 : 			int dinorantdecdamage = 90 - Dinorant->IsDinorantReduceAttackDamaege();

  017c3	e8 00 00 00 00	 call	 ?IsDinorantReduceAttackDamaege@CItem@@QAEHXZ ; CItem::IsDinorantReduceAttackDamaege

; 1166 : 			lpObj->Life -= 1.0f;

  017c8	f3 0f 10 83 d8
	00 00 00	 movss	 xmm0, DWORD PTR [ebx+216]
  017d0	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  017d5	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  017dd	0f 57 c9	 xorps	 xmm1, xmm1
  017e0	2b c8		 sub	 ecx, eax

; 1167 : 
; 1168 : 			if ( lpObj->Life < 0.0f )

  017e2	0f 2f c8	 comiss	 xmm1, xmm0
  017e5	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0
  017ed	76 0c		 jbe	 SHORT $LN274@Attack

; 1169 : 			{
; 1170 : 				lpObj->Life = 0.0f;

  017ef	c7 83 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+216], 0

; 1171 : 			}
; 1172 : 			else

  017f9	eb 18		 jmp	 SHORT $LN275@Attack
$LN274@Attack:

; 1173 : 			{
; 1174 : 				AttackDamage = AttackDamage * dinorantdecdamage / 100;

  017fb	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  017ff	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01804	f7 e9		 imul	 ecx
  01806	c1 fa 05	 sar	 edx, 5
  01809	8b c2		 mov	 eax, edx
  0180b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0180e	03 c2		 add	 eax, edx
  01810	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN275@Attack:

; 1175 : 			}
; 1176 : 
; 1177 : 			GCReFillSend(lpObj->m_Index, (WORD)lpObj->Life, 0xFF, 0, lpObj->iShield);

  01813	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  0181a	50		 push	 eax
  0181b	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  01823	6a 00		 push	 0
  01825	68 ff 00 00 00	 push	 255			; 000000ffH
  0182a	0f b7 c0	 movzx	 eax, ax
  0182d	50		 push	 eax
  0182e	ff 33		 push	 DWORD PTR [ebx]
  01830	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  01835	83 c4 14	 add	 esp, 20			; 00000014H
$LN273@Attack:

; 1178 : 		}
; 1179 : 
; 1180 : 		if ( gObjDarkHorse(lpTargetObj ) )

  01838	57		 push	 edi
  01839	e8 00 00 00 00	 call	 ?gObjDarkHorse@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDarkHorse
  0183e	83 c4 04	 add	 esp, 4
  01841	85 c0		 test	 eax, eax
  01843	0f 84 81 00 00
	00		 je	 $LN276@Attack

; 1181 : 		{
; 1182 : 			CItem * Darkhorse = &lpTargetObj->pInventory[8];
; 1183 : 			int decdamage = 100 - ((Darkhorse->m_PetItem_Level + 30) / 2 );

  01849	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  0184f	8b ce		 mov	 ecx, esi

; 1184 : 
; 1185 : 			lpTargetObj->Life -= 1.0f;

  01851	f3 0f 10 87 d8
	00 00 00	 movss	 xmm0, DWORD PTR [edi+216]
  01859	0f 57 c9	 xorps	 xmm1, xmm1
  0185c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  01864	8b 80 58 07 00
	00		 mov	 eax, DWORD PTR [eax+1880]
  0186a	83 c0 1e	 add	 eax, 30			; 0000001eH
  0186d	99		 cdq
  0186e	2b c2		 sub	 eax, edx
  01870	f3 0f 11 87 d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm0
  01878	d1 f8		 sar	 eax, 1
  0187a	2b c8		 sub	 ecx, eax

; 1186 : 
; 1187 : 			if ( lpTargetObj->Life < 0.0f )

  0187c	0f 2f c8	 comiss	 xmm1, xmm0
  0187f	76 0c		 jbe	 SHORT $LN277@Attack

; 1188 : 			{
; 1189 : 				lpTargetObj->Life = 0.0f;

  01881	c7 87 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+216], 0

; 1190 : 			}
; 1191 : 			else

  0188b	eb 18		 jmp	 SHORT $LN278@Attack
$LN277@Attack:

; 1192 : 			{
; 1193 : 				AttackDamage = AttackDamage * decdamage / 100;

  0188d	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  01891	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01896	f7 e9		 imul	 ecx
  01898	c1 fa 05	 sar	 edx, 5
  0189b	8b c2		 mov	 eax, edx
  0189d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  018a0	03 c2		 add	 eax, edx
  018a2	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN278@Attack:

; 1194 : 			}
; 1195 : 
; 1196 : 			GCReFillSend(lpTargetObj->m_Index, (WORD)lpTargetObj->Life, 0xFF, 0, lpTargetObj->iShield);

  018a5	0f b7 87 2c 01
	00 00		 movzx	 eax, WORD PTR [edi+300]
  018ac	50		 push	 eax
  018ad	f3 0f 2c 87 d8
	00 00 00	 cvttss2si eax, DWORD PTR [edi+216]
  018b5	6a 00		 push	 0
  018b7	68 ff 00 00 00	 push	 255			; 000000ffH
  018bc	0f b7 c0	 movzx	 eax, ax
  018bf	50		 push	 eax
  018c0	ff 37		 push	 DWORD PTR [edi]
  018c2	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  018c7	83 c4 14	 add	 esp, 20			; 00000014H
$LN276@Attack:

; 1197 : 		}
; 1198 : 
; 1199 : 		if ( lpTargetObj->Live )

  018ca	80 7f 51 00	 cmp	 BYTE PTR [edi+81], 0
  018ce	0f 84 a8 25 00
	00		 je	 $LN839@Attack

; 1200 : 		{
; 1201 : 			switch ( skill )

  018d4	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
  018da	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  018df	8d 46 ed	 lea	 eax, DWORD PTR [esi-19]
  018e2	3d fb 00 00 00	 cmp	 eax, 251		; 000000fbH
  018e7	0f 87 66 0a 00
	00		 ja	 $LN829@Attack
  018ed	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN822@Attack[eax]
  018f4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN985@Attack[eax*4]
$LN280@Attack:

; 1202 : 			{
; 1203 : 				case AT_SKILL_SWORD1:
; 1204 : 				case AT_SKILL_SWORD2:
; 1205 : 				case AT_SKILL_SWORD3:
; 1206 : 				case AT_SKILL_SWORD4:
; 1207 : 				case AT_SKILL_SWORD5:
; 1208 : 				case AT_SKILL_WHEEL:
; 1209 : 				case AT_SKILL_BLOWOFFURY:
; 1210 : 				case AT_SKILL_STRIKE:
; 1211 : 				case AT_SKILL_RUSH:
; 1212 : 				case AT_SKILL_KNIGHTDINORANT:
; 1213 : 				case AT_SKILL_DEFENSEDOWN:
; 1214 : 				case AT_SKILL_ONE_FLASH:
; 1215 : 					if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )

  018fb	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  01902	83 f8 04	 cmp	 eax, 4
  01905	74 0a		 je	 SHORT $LN283@Attack
  01907	83 f8 03	 cmp	 eax, 3
  0190a	74 05		 je	 SHORT $LN283@Attack

; 1216 : 					{
; 1217 : 						AttackDamage *= 2;
; 1218 : 					}
; 1219 : 					else if( lpObj->Class == CLASS_FIGHTER )

  0190c	83 f8 06	 cmp	 eax, 6
  0190f	75 45		 jne	 SHORT $LN284@Attack
$LN283@Attack:

; 1220 : 					{
; 1221 : 						AttackDamage *= 2;

  01911	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01914	03 c0		 add	 eax, eax

; 1222 : 					}
; 1223 : 					else

  01916	e9 35 0a 00 00	 jmp	 $LN901@Attack
$LN286@Attack:

; 1224 : 					{
; 1225 : 						AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;
; 1226 : 					}
; 1227 : 					break;
; 1228 : 				case AT_SKILL_KNIGHTSPEAR:
; 1229 : 					if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) ||
; 1230 : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||

  0191b	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  01921	0f b7 80 a6 06
	00 00		 movzx	 eax, WORD PTR [eax+1702]
  01928	66 3b c1	 cmp	 ax, cx
  0192b	74 18		 je	 SHORT $LN288@Attack
  0192d	b9 02 1a 00 00	 mov	 ecx, 6658		; 00001a02H
  01932	66 3b c1	 cmp	 ax, cx
  01935	74 0e		 je	 SHORT $LN288@Attack
  01937	b9 25 1a 00 00	 mov	 ecx, 6693		; 00001a25H
  0193c	66 3b c1	 cmp	 ax, cx
  0193f	0f 85 0e 0a 00
	00		 jne	 $LN829@Attack
$LN288@Attack:

; 1231 : 						 lpObj->pInventory[8].m_Type == ITEMGET(13,37) )
; 1232 : 					{
; 1233 : 						if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA )

  01945	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  0194c	83 f8 04	 cmp	 eax, 4
  0194f	74 c0		 je	 SHORT $LN283@Attack
  01951	83 f8 03	 cmp	 eax, 3
  01954	74 bb		 je	 SHORT $LN283@Attack
$LN284@Attack:

; 1234 : 						{
; 1235 : 							AttackDamage *= 2;
; 1236 : 						}
; 1237 : 						else
; 1238 : 						{
; 1239 : 							AttackDamage = ( AttackDamage * ( Energy / 10 + 200 )  ) / 100;

  01956	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0195b	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
  01961	c1 fa 02	 sar	 edx, 2
$LN915@Attack:
  01964	8b ca		 mov	 ecx, edx
  01966	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0196b	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  01971	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01974	03 ca		 add	 ecx, edx
  01976	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  0197a	f7 e9		 imul	 ecx
  0197c	c1 fa 05	 sar	 edx, 5
  0197f	8b c2		 mov	 eax, edx
  01981	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01984	03 c2		 add	 eax, edx
  01986	e9 c5 09 00 00	 jmp	 $LN901@Attack
$LN294@Attack:

; 1240 : 						}
; 1241 : 					}
; 1242 : 					break;
; 1243 : 				case AT_SKILL_SWORD6:
; 1244 : 					AttackDamage *= 2;
; 1245 : 					break;
; 1246 : 				case AT_SKILL_DEEPIMPACT:
; 1247 : 				case AT_SKILL_ELFHARDEN:
; 1248 : 				case AT_SKILL_PENETRATION:
; 1249 : 					AttackDamage *= 2;
; 1250 : 					break;
; 1251 : 				case AT_SKILL_SPEAR:
; 1252 : 				case AT_SKILL_FIREBURST:
; 1253 : 				case AT_SKILL_DARKHORSE_ATTACK:
; 1254 : 				case AT_SKILL_ELECTRICSPARK:
; 1255 : 				case AT_SKILL_SPACE_SPLIT:
; 1256 : 				case AT_SKILL_FIRESCREAM:
; 1257 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;

  0198b	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  01992	0f b7 8b 02 01
	00 00		 movzx	 ecx, WORD PTR [ebx+258]
  01999	03 c8		 add	 ecx, eax
  0199b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  019a0	f7 e9		 imul	 ecx
  019a2	c1 fa 03	 sar	 edx, 3

; 1258 : 					break;

  019a5	eb bd		 jmp	 SHORT $LN915@Attack
$LN295@Attack:

; 1259 : 
; 1260 : 				case AT_SKILL_FENRIR_ATTACK:
; 1261 : 					{
; 1262 : 						int iDamageInc = lpObj->Level - 300;
; 1263 : 						iDamageInc += lpObj->MasterLevel;

  019a7	0f bf 8b a8 00
	00 00		 movsx	 ecx, WORD PTR [ebx+168]
  019ae	0f bf 83 96 00
	00 00		 movsx	 eax, WORD PTR [ebx+150]
  019b5	81 c1 d4 fe ff
	ff		 add	 ecx, -300		; fffffed4H
  019bb	03 c8		 add	 ecx, eax

; 1264 : 
; 1265 : 						if ( iDamageInc < 0 )

  019bd	33 c0		 xor	 eax, eax
  019bf	85 c9		 test	 ecx, ecx
  019c1	0f 48 c8	 cmovs	 ecx, eax

; 1266 : 							iDamageInc = 0;
; 1267 : 
; 1268 : 						iDamageInc /= 5;

  019c4	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  019c9	f7 e9		 imul	 ecx
  019cb	d1 fa		 sar	 edx, 1

; 1269 : 						AttackDamage = ( AttackDamage * ( iDamageInc + 200 ) ) / 100;
; 1270 : 					}
; 1271 : 					break;

  019cd	eb 95		 jmp	 SHORT $LN915@Attack
$LN297@Attack:

; 1272 : 				case AT_SKILL_LIGHTEXPLODE:
; 1273 : 					// rename to SplashDamage
; 1274 : 					gObjUseSkill.SkillLightExplode(lpObj,lpTargetObj,216,AttackDamage,1,50);

  019cf	6a 32		 push	 50			; 00000032H
  019d1	6a 01		 push	 1
  019d3	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
  019d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  019db	68 d8 00 00 00	 push	 216			; 000000d8H
  019e0	57		 push	 edi
  019e1	53		 push	 ebx
  019e2	e8 00 00 00 00	 call	 ?SkillLightExplode@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0HHHH@Z ; CObjUseSkill::SkillLightExplode

; 1275 : 					break;

  019e7	e9 67 09 00 00	 jmp	 $LN829@Attack
$LN298@Attack:

; 1276 : 				case AT_SKILL_DRAINLIFE:
; 1277 : 					{
; 1278 : 						int RestoreHP =0;
; 1279 : 
; 1280 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  019ec	8a 4f 50	 mov	 cl, BYTE PTR [edi+80]
  019ef	33 c0		 xor	 eax, eax
  019f1	80 f9 02	 cmp	 cl, 2
  019f4	75 41		 jne	 SHORT $LN299@Attack

; 1281 : 						{
; 1282 : 							RestoreHP = (int)(float(lpObj->Energy / 15) + float(lpTargetObj->Level / 2.5f));

  019f6	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  019fd	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01a04	66 0f 6e c8	 movd	 xmm1, eax
  01a08	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  01a0d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01a10	f7 e9		 imul	 ecx
  01a12	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40200000
  01a1a	03 d1		 add	 edx, ecx
  01a1c	c1 fa 03	 sar	 edx, 3
  01a1f	8b c2		 mov	 eax, edx
  01a21	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01a24	03 c2		 add	 eax, edx
  01a26	66 0f 6e c0	 movd	 xmm0, eax
  01a2a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01a2d	f3 0f 58 c8	 addss	 xmm1, xmm0
  01a31	f3 0f 2c c1	 cvttss2si eax, xmm1
  01a35	eb 40		 jmp	 SHORT $LN301@Attack
$LN299@Attack:

; 1283 : 						}
; 1284 : 						else if( lpTargetObj->Type == OBJ_USER )

  01a37	80 f9 01	 cmp	 cl, 1
  01a3a	75 3b		 jne	 SHORT $LN301@Attack

; 1285 : 						{
; 1286 : 							RestoreHP = AttackDamage * 10 / 100 + lpObj->Energy / 23;

  01a3c	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01a43	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  01a48	f7 e9		 imul	 ecx
  01a4a	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  01a4d	03 d1		 add	 edx, ecx
  01a4f	c1 fa 04	 sar	 edx, 4
  01a52	8b f2		 mov	 esi, edx
  01a54	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  01a57	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  01a5a	03 f2		 add	 esi, edx
  01a5c	03 c9		 add	 ecx, ecx
  01a5e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01a63	f7 e9		 imul	 ecx
  01a65	c1 fa 05	 sar	 edx, 5
  01a68	8b c2		 mov	 eax, edx
  01a6a	03 f2		 add	 esi, edx
  01a6c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01a6f	03 c6		 add	 eax, esi
  01a71	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
$LN301@Attack:

; 1287 : 						}
; 1288 : 	
; 1289 : 						int totalhp = (int)(lpObj->Life + RestoreHP);

  01a77	66 0f 6e c0	 movd	 xmm0, eax
  01a7b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01a7e	f3 0f 58 83 d8
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+216]
  01a86	f3 0f 2c c0	 cvttss2si eax, xmm0
  01a8a	66 0f 6e 83 24
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+292]

; 1290 : 	
; 1291 : 						if( totalhp > lpObj->MaxLife + lpObj->AddLife )

  01a92	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01a95	66 0f 6e c8	 movd	 xmm1, eax
  01a99	f3 0f 58 83 dc
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+220]
  01aa1	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01aa4	0f 2f c8	 comiss	 xmm1, xmm0
  01aa7	76 0a		 jbe	 SHORT $LN302@Attack

; 1292 : 						{
; 1293 : 							lpObj->Life = lpObj->MaxLife + lpObj->AddLife;

  01aa9	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0

; 1294 : 						}
; 1295 : 						else	

  01ab1	eb 08		 jmp	 SHORT $LN303@Attack
$LN302@Attack:

; 1296 : 						{
; 1297 : 							lpObj->Life = (float)totalhp;

  01ab3	f3 0f 11 8b d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm1
$LN303@Attack:

; 1298 : 						}
; 1299 : 	
; 1300 : 						GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life,0xFF,0,lpObj->iShield);

  01abb	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  01ac2	50		 push	 eax
  01ac3	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  01acb	6a 00		 push	 0
  01acd	68 ff 00 00 00	 push	 255			; 000000ffH
  01ad2	0f b7 c0	 movzx	 eax, ax
  01ad5	50		 push	 eax
  01ad6	ff 33		 push	 DWORD PTR [ebx]
  01ad8	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  01add	83 c4 14	 add	 esp, 20			; 00000014H

; 1301 : 					}	
; 1302 : 					break;

  01ae0	e9 6e 08 00 00	 jmp	 $LN829@Attack
$LN304@Attack:

; 1303 : 				case AT_SKILL_CHAINLIGHTING:
; 1304 : 					switch( bCombo )

  01ae5	8b 45 20	 mov	 eax, DWORD PTR _bCombo$[ebp]
  01ae8	83 e8 01	 sub	 eax, 1
  01aeb	74 2c		 je	 SHORT $LN305@Attack
  01aed	83 e8 01	 sub	 eax, 1
  01af0	74 0f		 je	 SHORT $LN306@Attack
  01af2	83 e8 01	 sub	 eax, 1
  01af5	0f 85 5a 21 00
	00		 jne	 $LN956@Attack

; 1310 : 						break;
; 1311 : 					case 3:
; 1312 : 						AttackDamage = AttackDamage * 50 / 100;

  01afb	6b 4d 1c 32	 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 50

; 1313 : 						break;

  01aff	eb 04		 jmp	 SHORT $LN902@Attack
$LN306@Attack:

; 1305 : 					{
; 1306 : 					case 1:
; 1307 : 						break;
; 1308 : 					case 2:
; 1309 : 						AttackDamage = AttackDamage * 70 / 100;

  01b01	6b 4d 1c 46	 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 70
$LN902@Attack:
  01b05	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01b0a	f7 e9		 imul	 ecx
  01b0c	c1 fa 05	 sar	 edx, 5
  01b0f	8b c2		 mov	 eax, edx
  01b11	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01b14	03 c2		 add	 eax, edx
  01b16	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN305@Attack:

; 1314 : 					default:
; 1315 : 						return FALSE;
; 1316 : 					}
; 1317 : 
; 1318 : 					bCombo = FALSE;

  01b19	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _bCombo$[ebp], 0

; 1319 : 					break;

  01b20	e9 2e 08 00 00	 jmp	 $LN829@Attack
$LN309@Attack:

; 1320 : 				case AT_SKILL_SAHAMUT:
; 1321 : 					{
; 1322 : 						int Damage;
; 1323 : 						if( lpObj->m_MPSkillOpt.MpsFireTomeMastery > 0 )

  01b25	f3 0f 10 8b 74
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1908]
  01b2d	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@00000000
  01b34	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 1324 : 						{
; 1325 : 							Damage = AttackDamage * (60.0f+lpObj->m_MPSkillOpt.MpsFireTomeMastery) / 100.0f;

  01b39	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01b3c	76 1a		 jbe	 SHORT $LN310@Attack
  01b3e	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42700000
  01b46	f3 0f 59 c8	 mulss	 xmm1, xmm0
  01b4a	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  01b52	f3 0f 2c c1	 cvttss2si eax, xmm1

; 1326 : 						}
; 1327 : 						else

  01b56	eb 14		 jmp	 SHORT $LN311@Attack
$LN310@Attack:

; 1328 : 						{
; 1329 : 							Damage = AttackDamage * 60.0f / 100.0f;

  01b58	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42700000
  01b60	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  01b68	f3 0f 2c c0	 cvttss2si eax, xmm0
$LN311@Attack:

; 1330 : 						}
; 1331 : 
; 1332 : 						gObjAddBuffEffect(lpTargetObj,BUFF_EXPLOSION,ADD_OPTION_REDUCE_HP,Damage,0,0,5);

  01b6c	6a 05		 push	 5
  01b6e	6a 00		 push	 0
  01b70	6a 00		 push	 0
  01b72	50		 push	 eax
  01b73	6a 12		 push	 18			; 00000012H
  01b75	6a 4b		 push	 75			; 0000004bH
  01b77	57		 push	 edi
  01b78	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  01b7d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1333 : 					}
; 1334 : 					break;

  01b80	e9 ce 07 00 00	 jmp	 $LN829@Attack
$LN312@Attack:

; 1335 : 				case AT_SKILL_NEIL:
; 1336 : 					{
; 1337 : 						int Damage = AttackDamage * 60 / 100;

  01b85	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  01b88	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01b8d	c1 e1 04	 shl	 ecx, 4
  01b90	2b 4d 1c	 sub	 ecx, DWORD PTR _AttackDamage$[ebp]
  01b93	c1 e1 02	 shl	 ecx, 2
  01b96	f7 e9		 imul	 ecx

; 1338 : 						gObjAddBuffEffect(lpTargetObj,BUFF_REQUIEM,ADD_OPTION_REDUCE_HP,Damage,0,0,5);

  01b98	6a 05		 push	 5
  01b9a	c1 fa 05	 sar	 edx, 5
  01b9d	6a 00		 push	 0
  01b9f	8b c2		 mov	 eax, edx
  01ba1	6a 00		 push	 0
  01ba3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01ba6	03 c2		 add	 eax, edx
  01ba8	50		 push	 eax
  01ba9	6a 12		 push	 18			; 00000012H
  01bab	6a 4a		 push	 74			; 0000004aH
  01bad	57		 push	 edi
  01bae	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  01bb3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1339 : 					}
; 1340 : 					break;

  01bb6	e9 98 07 00 00	 jmp	 $LN829@Attack
$LN313@Attack:

; 1341 : 				case AT_SKILL_SLEEP:
; 1342 : 					{
; 1343 : 						int Rate = 0;
; 1344 : 
; 1345 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  01bbb	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  01bbe	33 f6		 xor	 esi, esi
  01bc0	3c 02		 cmp	 al, 2
  01bc2	75 2f		 jne	 SHORT $LN314@Attack

; 1346 : 						{
; 1347 : 							Rate = 20 + lpObj->Energy / 30 + lpObj->m_CurseDamageBook / 6;

  01bc4	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01bcb	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  01bd0	f7 e9		 imul	 ecx
  01bd2	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  01bd7	03 d1		 add	 edx, ecx
  01bd9	c1 fa 04	 sar	 edx, 4
  01bdc	8b f2		 mov	 esi, edx
  01bde	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  01be1	03 f2		 add	 esi, edx
  01be3	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  01be9	8b c2		 mov	 eax, edx
  01beb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01bee	83 c0 14	 add	 eax, 20			; 00000014H
  01bf1	eb 31		 jmp	 SHORT $LN903@Attack
$LN314@Attack:

; 1348 : 						}
; 1349 : 						else if( lpTargetObj->Type == OBJ_USER )

  01bf3	3c 01		 cmp	 al, 1
  01bf5	75 31		 jne	 SHORT $LN316@Attack

; 1350 : 						{
; 1351 : 							Rate = 15 + lpObj->Energy / 37 + lpObj->m_CurseDamageBook / 6;

  01bf7	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01bfe	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  01c03	f7 e9		 imul	 ecx
  01c05	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  01c0a	03 d1		 add	 edx, ecx
  01c0c	c1 fa 05	 sar	 edx, 5
  01c0f	8b f2		 mov	 esi, edx
  01c11	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  01c14	03 f2		 add	 esi, edx
  01c16	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  01c1c	8b c2		 mov	 eax, edx
  01c1e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01c21	83 c0 0f	 add	 eax, 15			; 0000000fH
$LN903@Attack:
  01c24	03 f2		 add	 esi, edx
  01c26	03 f0		 add	 esi, eax
$LN316@Attack:

; 1352 : 						}
; 1353 : 
; 1354 : 						if( Rate < rand()%100)

  01c28	e8 00 00 00 00	 call	 _rand
  01c2d	99		 cdq
  01c2e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01c33	f7 f9		 idiv	 ecx
  01c35	3b f2		 cmp	 esi, edx

; 1355 : 						{
; 1356 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1357 : 							return FALSE;
; 1358 : 						}
; 1359 : 
; 1360 : 						int SleepTime = 0;
; 1361 : 
; 1362 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);
; 1363 : 
; 1364 : 						if( !lpInfo )
; 1365 : 						{
; 1366 : 							return 0;
; 1367 : 						}
; 1368 : 
; 1369 : 						if( lpTargetObj->Type == OBJ_MONSTER )
; 1370 : 						{
; 1371 : 							SleepTime = (lpInfo->m_Arg4 + lpObj->Energy /lpInfo->m_Arg5) - lpTargetObj->Level / 20;
; 1372 : 
; 1373 : 							if( SleepTime > lpInfo->m_Arg6 )
; 1374 : 							{
; 1375 : 								SleepTime = lpInfo->m_Arg6;
; 1376 : 							}
; 1377 : 						}
; 1378 : 						else if( lpTargetObj->Type == OBJ_USER )
; 1379 : 						{
; 1380 : 							SleepTime = lpInfo->m_Arg1 + ((lpObj->Energy /lpInfo->m_Arg2) + (lpObj->Level - lpTargetObj->Level) / 100);
; 1381 : 
; 1382 : 							if( SleepTime > lpInfo->m_Arg3 )
; 1383 : 							{
; 1384 : 								SleepTime = lpInfo->m_Arg3;
; 1385 : 							}
; 1386 : 						}
; 1387 : 
; 1388 : 						if( SleepTime < 1 )
; 1389 : 						{
; 1390 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1391 : 							return FALSE;
; 1392 : 						}
; 1393 : 
; 1394 : 						if( gObjCheckPowerfulEffect(lpTargetObj,0x48,SleepTime,0) == TRUE )
; 1395 : 						{
; 1396 : 							GCMagicAttackNumberSend(lpObj,219,lpTargetObj->m_Index,0);
; 1397 : 							return FALSE;

  01c37	e9 c8 0c 00 00	 jmp	 $LN981@Attack
$LN325@Attack:

; 1398 : 						}
; 1399 : 
; 1400 : 						gObjAddBuffEffect(lpTargetObj,BUFF_SLEEP,ADD_OPTION_SLEEPTIME,SleepTime,0,0,SleepTime);

  01c3c	56		 push	 esi
  01c3d	6a 00		 push	 0
  01c3f	6a 00		 push	 0
  01c41	56		 push	 esi
  01c42	6a 19		 push	 25			; 00000019H
  01c44	6a 48		 push	 72			; 00000048H
  01c46	57		 push	 edi
  01c47	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  01c4c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1401 : 						return TRUE;

  01c4f	e9 50 2f 00 00	 jmp	 $LN739@Attack
$LN326@Attack:

; 1402 : 					}
; 1403 : 					break;
; 1404 : 				case AT_SKILL_WEAKNESS:
; 1405 : 					{
; 1406 : 						int Rate = 0;
; 1407 : 
; 1408 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  01c54	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  01c57	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Rate$1$[ebp], 0
  01c61	3c 02		 cmp	 al, 2
  01c63	75 2d		 jne	 SHORT $LN327@Attack

; 1409 : 						{
; 1410 : 							Rate = 32 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  01c65	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01c6c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01c71	f7 e9		 imul	 ecx
  01c73	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  01c78	c1 fa 04	 sar	 edx, 4
  01c7b	8b ca		 mov	 ecx, edx
  01c7d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01c80	03 ca		 add	 ecx, edx
  01c82	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  01c88	8b c2		 mov	 eax, edx
  01c8a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01c8d	83 c0 20	 add	 eax, 32			; 00000020H
  01c90	eb 2f		 jmp	 SHORT $LN906@Attack
$LN327@Attack:

; 1411 : 						}
; 1412 : 						else if( lpTargetObj->Type == OBJ_USER )

  01c92	3c 01		 cmp	 al, 1
  01c94	75 35		 jne	 SHORT $LN329@Attack

; 1413 : 						{
; 1414 : 							Rate = 17 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  01c96	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01c9d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01ca2	f7 e9		 imul	 ecx
  01ca4	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  01ca9	c1 fa 04	 sar	 edx, 4
  01cac	8b ca		 mov	 ecx, edx
  01cae	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01cb1	03 ca		 add	 ecx, edx
  01cb3	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  01cb9	8b c2		 mov	 eax, edx
  01cbb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01cbe	83 c0 11	 add	 eax, 17			; 00000011H
$LN906@Attack:
  01cc1	03 ca		 add	 ecx, edx
  01cc3	03 c1		 add	 eax, ecx
  01cc5	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _Rate$1$[ebp], eax
$LN329@Attack:

; 1415 : 						}
; 1416 : 
; 1417 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  01ccb	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  01cd1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  01cd6	ff 70 08	 push	 DWORD PTR [eax+8]
  01cd9	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  01cde	8b f0		 mov	 esi, eax

; 1418 : 
; 1419 : 						if( !lpInfo )

  01ce0	85 f6		 test	 esi, esi
  01ce2	0f 84 6d 1f 00
	00		 je	 $LN956@Attack

; 1420 : 						{
; 1421 : 							return 0;
; 1422 : 						}
; 1423 : 
; 1424 : 						if( Rate >= rand() % 100 )

  01ce8	e8 00 00 00 00	 call	 _rand
  01ced	99		 cdq
  01cee	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01cf3	f7 f9		 idiv	 ecx
  01cf5	39 95 d8 fe ff
	ff		 cmp	 DWORD PTR _Rate$1$[ebp], edx
  01cfb	0f 8c 2d 16 00
	00		 jl	 $LN502@Attack

; 1425 : 						{
; 1426 : 							int DecValue = 0;
; 1427 : 							int DecTime = 0;
; 1428 : 
; 1429 : 							if( lpTargetObj->Type == OBJ_MONSTER )

  01d01	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  01d04	3c 02		 cmp	 al, 2
  01d06	0f 85 88 00 00
	00		 jne	 $LN333@Attack

; 1430 : 							{
; 1431 : 								int MaxEnergy = lpObj->Energy;

  01d0c	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 1432 : 
; 1433 : 								if( lpObj->Energy > 4000 )

  01d13	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  01d18	66 3b c2	 cmp	 ax, dx

; 1434 : 								{
; 1435 : 									MaxEnergy = 4000;
; 1436 : 								}
; 1437 : 
; 1438 : 								DecValue = lpInfo->m_Arg7 + MaxEnergy / lpInfo->m_Arg8;
; 1439 : 	
; 1440 : 								if( DecValue > lpInfo->m_Arg9 )

  01d1b	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  01d20	8b c8		 mov	 ecx, eax
  01d22	0f 47 ca	 cmova	 ecx, edx
  01d25	66 0f 6e c9	 movd	 xmm1, ecx
  01d29	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01d2c	0f 28 c1	 movaps	 xmm0, xmm1
  01d2f	f3 0f 5e 46 20	 divss	 xmm0, DWORD PTR [esi+32]
  01d34	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]
  01d39	f3 0f 2c c0	 cvttss2si eax, xmm0
  01d3d	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  01d43	66 0f 6e c0	 movd	 xmm0, eax
  01d47	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01d4a	0f 2f c2	 comiss	 xmm0, xmm2
  01d4d	76 0a		 jbe	 SHORT $LN336@Attack

; 1441 : 								{
; 1442 : 									DecValue = lpInfo->m_Arg9;

  01d4f	f3 0f 2c c2	 cvttss2si eax, xmm2
  01d53	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN336@Attack:

; 1443 : 								}
; 1444 : 
; 1445 : 								DecTime = lpInfo->m_Arg10 + MaxEnergy / lpInfo->m_Arg11 - lpTargetObj->Level / 20;

  01d59	f3 0f 5e 4e 2c	 divss	 xmm1, DWORD PTR [esi+44]
  01d5e	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  01d65	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01d6a	f7 e9		 imul	 ecx
  01d6c	f3 0f 58 4e 28	 addss	 xmm1, DWORD PTR [esi+40]
  01d71	c1 fa 03	 sar	 edx, 3
  01d74	8b c2		 mov	 eax, edx
  01d76	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01d79	03 c2		 add	 eax, edx
  01d7b	66 0f 6e c0	 movd	 xmm0, eax
  01d7f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01d82	f3 0f 5c c8	 subss	 xmm1, xmm0
  01d86	f3 0f 2c c1	 cvttss2si eax, xmm1

; 1446 : 
; 1447 : 								if( DecTime > lpInfo->m_Arg12 )

  01d8a	f3 0f 10 4e 30	 movss	 xmm1, DWORD PTR [esi+48]

; 1448 : 								{
; 1449 : 									DecTime = lpInfo->m_Arg12;
; 1450 : 								}
; 1451 : 							}

  01d8f	e9 35 15 00 00	 jmp	 $LN930@Attack
$LN333@Attack:

; 1452 : 							else if( lpTargetObj->Type == OBJ_USER )

  01d94	3c 01		 cmp	 al, 1
  01d96	0f 85 92 15 00
	00		 jne	 $LN502@Attack

; 1453 : 							{
; 1454 : 								int MaxEnergy = lpObj->Energy;

  01d9c	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 1455 : 
; 1456 : 								DecValue = lpInfo->m_Arg1 + MaxEnergy / lpInfo->m_Arg2;
; 1457 : 
; 1458 : 								if( DecValue > lpInfo->m_Arg3 )

  01da3	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
  01da8	66 0f 6e c8	 movd	 xmm1, eax
  01dac	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01daf	0f 28 c1	 movaps	 xmm0, xmm1
  01db2	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  01db7	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  01dbc	f3 0f 2c c0	 cvttss2si eax, xmm0
  01dc0	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  01dc6	66 0f 6e c0	 movd	 xmm0, eax
  01dca	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01dcd	0f 2f c2	 comiss	 xmm0, xmm2
  01dd0	76 0a		 jbe	 SHORT $LN339@Attack

; 1459 : 								{
; 1460 : 									DecValue = lpInfo->m_Arg3;

  01dd2	f3 0f 2c c2	 cvttss2si eax, xmm2
  01dd6	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN339@Attack:

; 1461 : 								}
; 1462 : 
; 1463 : 								DecTime = lpInfo->m_Arg4 + MaxEnergy / lpInfo->m_Arg5 + (lpObj->Level - lpTargetObj->Level) / 150;

  01ddc	f3 0f 5e 4e 14	 divss	 xmm1, DWORD PTR [esi+20]
  01de1	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  01de8	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  01def	2b c8		 sub	 ecx, eax
  01df1	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  01df6	f7 e9		 imul	 ecx
  01df8	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]
  01dfd	c1 fa 04	 sar	 edx, 4
  01e00	8b c2		 mov	 eax, edx
  01e02	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01e05	03 c2		 add	 eax, edx
  01e07	66 0f 6e c0	 movd	 xmm0, eax
  01e0b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01e0e	f3 0f 58 c1	 addss	 xmm0, xmm1

; 1464 : 
; 1465 : 								if( DecTime > lpInfo->m_Arg6 )
; 1466 : 								{
; 1467 : 									DecTime = lpInfo->m_Arg6;
; 1468 : 								}
; 1469 : 							}
; 1470 : 
; 1471 : 							if( DecTime < 1 )
; 1472 : 							{
; 1473 : 								GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1474 : 								return FALSE;
; 1475 : 							}
; 1476 : 
; 1477 : 							if( gObjCheckPowerfulEffect(lpObj,AT_WEAKNESS,DecValue,0) == TRUE )
; 1478 : 							{
; 1479 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);
; 1480 : 								return FALSE;

  01e12	e9 a9 14 00 00	 jmp	 $LN964@Attack
$LN342@Attack:

; 1481 : 							}
; 1482 : 
; 1483 : 							gObjAddBuffEffect(lpTargetObj,AT_WEAKNESS,ADD_OPTION_WEAKNESS,DecValue,0,0,DecTime);

  01e17	ff b5 cc fe ff
	ff		 push	 DWORD PTR _DecTime$1$[ebp]
  01e1d	6a 00		 push	 0
  01e1f	6a 00		 push	 0
  01e21	56		 push	 esi
  01e22	6a 1d		 push	 29			; 0000001dH
  01e24	6a 4c		 push	 76			; 0000004cH
  01e26	57		 push	 edi
  01e27	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  01e2c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1484 : 							return TRUE;

  01e2f	e9 70 2d 00 00	 jmp	 $LN739@Attack
$LN343@Attack:

; 1485 : 						}
; 1486 : 						else
; 1487 : 						{
; 1488 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1489 : 							return FALSE;
; 1490 : 						}
; 1491 : 					}
; 1492 : 					break;
; 1493 : 				case AT_SKILL_INNOVATION:
; 1494 : 					{
; 1495 : 						int Rate = 0;
; 1496 : 
; 1497 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  01e34	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  01e37	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Rate$1$[ebp], 0
  01e41	3c 02		 cmp	 al, 2
  01e43	75 2d		 jne	 SHORT $LN344@Attack

; 1498 : 						{
; 1499 : 							Rate = 32 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  01e45	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01e4c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01e51	f7 e9		 imul	 ecx
  01e53	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  01e58	c1 fa 04	 sar	 edx, 4
  01e5b	8b ca		 mov	 ecx, edx
  01e5d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01e60	03 ca		 add	 ecx, edx
  01e62	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  01e68	8b c2		 mov	 eax, edx
  01e6a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01e6d	83 c0 20	 add	 eax, 32			; 00000020H
  01e70	eb 2f		 jmp	 SHORT $LN909@Attack
$LN344@Attack:

; 1500 : 						}
; 1501 : 						else if( lpTargetObj->Type == OBJ_USER )

  01e72	3c 01		 cmp	 al, 1
  01e74	75 35		 jne	 SHORT $LN346@Attack

; 1502 : 						{
; 1503 : 							Rate = 17 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  01e76	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  01e7d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  01e82	f7 e9		 imul	 ecx
  01e84	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  01e89	c1 fa 04	 sar	 edx, 4
  01e8c	8b ca		 mov	 ecx, edx
  01e8e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  01e91	03 ca		 add	 ecx, edx
  01e93	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  01e99	8b c2		 mov	 eax, edx
  01e9b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01e9e	83 c0 11	 add	 eax, 17			; 00000011H
$LN909@Attack:
  01ea1	03 ca		 add	 ecx, edx
  01ea3	03 c1		 add	 eax, ecx
  01ea5	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _Rate$1$[ebp], eax
$LN346@Attack:

; 1504 : 						}
; 1505 : 
; 1506 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  01eab	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  01eb1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  01eb6	ff 70 08	 push	 DWORD PTR [eax+8]
  01eb9	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  01ebe	8b f0		 mov	 esi, eax

; 1507 : 
; 1508 : 						if( !lpInfo )

  01ec0	85 f6		 test	 esi, esi
  01ec2	0f 84 8d 1d 00
	00		 je	 $LN956@Attack

; 1509 : 						{
; 1510 : 							return 0;
; 1511 : 						}
; 1512 : 
; 1513 : 						if( Rate >= rand()%100 )

  01ec8	e8 00 00 00 00	 call	 _rand
  01ecd	99		 cdq
  01ece	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  01ed3	f7 f9		 idiv	 ecx
  01ed5	39 95 d8 fe ff
	ff		 cmp	 DWORD PTR _Rate$1$[ebp], edx
  01edb	0f 8c 4d 14 00
	00		 jl	 $LN502@Attack

; 1514 : 						{
; 1515 : 							int DecValue = 0;
; 1516 : 							int DecTime = 0;
; 1517 : 
; 1518 : 							if( lpTargetObj->Type == OBJ_MONSTER )

  01ee1	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  01ee4	3c 02		 cmp	 al, 2
  01ee6	75 7b		 jne	 SHORT $LN350@Attack

; 1519 : 							{
; 1520 : 								int MaxEnergy = lpObj->Energy;

  01ee8	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 1521 : 
; 1522 : 								DecValue = lpInfo->m_Arg7 + MaxEnergy / lpInfo->m_Arg8;
; 1523 : 
; 1524 : 								if( DecValue > lpInfo->m_Arg9 )

  01eef	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  01ef4	66 0f 6e c8	 movd	 xmm1, eax
  01ef8	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01efb	0f 28 c1	 movaps	 xmm0, xmm1
  01efe	f3 0f 5e 46 20	 divss	 xmm0, DWORD PTR [esi+32]
  01f03	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]
  01f08	f3 0f 2c c0	 cvttss2si eax, xmm0
  01f0c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  01f12	66 0f 6e c0	 movd	 xmm0, eax
  01f16	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01f19	0f 2f c2	 comiss	 xmm0, xmm2
  01f1c	76 0a		 jbe	 SHORT $LN352@Attack

; 1525 : 								{
; 1526 : 									DecValue = lpInfo->m_Arg9;

  01f1e	f3 0f 2c c2	 cvttss2si eax, xmm2
  01f22	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN352@Attack:

; 1527 : 								}
; 1528 : 
; 1529 : 								DecTime = lpInfo->m_Arg10 + MaxEnergy / lpInfo->m_Arg11 - lpTargetObj->Level / 20;

  01f28	f3 0f 5e 4e 2c	 divss	 xmm1, DWORD PTR [esi+44]
  01f2d	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  01f34	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  01f39	f7 e9		 imul	 ecx
  01f3b	f3 0f 58 4e 28	 addss	 xmm1, DWORD PTR [esi+40]
  01f40	c1 fa 03	 sar	 edx, 3
  01f43	8b c2		 mov	 eax, edx
  01f45	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01f48	03 c2		 add	 eax, edx
  01f4a	66 0f 6e c0	 movd	 xmm0, eax
  01f4e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01f51	f3 0f 5c c8	 subss	 xmm1, xmm0
  01f55	f3 0f 2c c1	 cvttss2si eax, xmm1

; 1530 : 
; 1531 : 								if( DecTime > lpInfo->m_Arg12 )

  01f59	f3 0f 10 4e 30	 movss	 xmm1, DWORD PTR [esi+48]

; 1532 : 								{
; 1533 : 									DecTime = lpInfo->m_Arg12;
; 1534 : 								}
; 1535 : 							}

  01f5e	e9 87 00 00 00	 jmp	 $LN911@Attack
$LN350@Attack:

; 1536 : 							else if( lpTargetObj->Type == OBJ_USER )

  01f63	3c 01		 cmp	 al, 1
  01f65	0f 85 c3 13 00
	00		 jne	 $LN502@Attack

; 1537 : 							{
; 1538 : 								int MaxEnergy = lpObj->Energy;

  01f6b	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 1539 : 
; 1540 : 								DecValue = lpInfo->m_Arg1 + MaxEnergy / lpInfo->m_Arg2;
; 1541 : 	
; 1542 : 								if( DecValue > lpInfo->m_Arg3 )

  01f72	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
  01f77	66 0f 6e c8	 movd	 xmm1, eax
  01f7b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  01f7e	0f 28 c1	 movaps	 xmm0, xmm1
  01f81	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  01f86	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  01f8b	f3 0f 2c c0	 cvttss2si eax, xmm0
  01f8f	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  01f95	66 0f 6e c0	 movd	 xmm0, eax
  01f99	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01f9c	0f 2f c2	 comiss	 xmm0, xmm2
  01f9f	76 0a		 jbe	 SHORT $LN355@Attack

; 1543 : 								{
; 1544 : 									DecValue = lpInfo->m_Arg3;

  01fa1	f3 0f 2c c2	 cvttss2si eax, xmm2
  01fa5	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN355@Attack:

; 1545 : 								}
; 1546 : 
; 1547 : 								DecTime = lpInfo->m_Arg4 + MaxEnergy / lpInfo->m_Arg5 + (lpObj->Level - lpTargetObj->Level) / 150;

  01fab	f3 0f 5e 4e 14	 divss	 xmm1, DWORD PTR [esi+20]
  01fb0	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  01fb7	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  01fbe	2b c8		 sub	 ecx, eax
  01fc0	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  01fc5	f7 e9		 imul	 ecx
  01fc7	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]
  01fcc	c1 fa 04	 sar	 edx, 4
  01fcf	8b c2		 mov	 eax, edx
  01fd1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  01fd4	03 c2		 add	 eax, edx
  01fd6	66 0f 6e c0	 movd	 xmm0, eax
  01fda	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01fdd	f3 0f 58 c1	 addss	 xmm0, xmm1

; 1548 : 
; 1549 : 								if( DecTime > lpInfo->m_Arg6 )

  01fe1	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  01fe6	f3 0f 2c c0	 cvttss2si eax, xmm0
$LN911@Attack:
  01fea	66 0f 6e c0	 movd	 xmm0, eax
  01fee	0f 5b c0	 cvtdq2ps xmm0, xmm0
  01ff1	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecTime$1$[ebp], eax
  01ff7	0f 2f c1	 comiss	 xmm0, xmm1
  01ffa	76 0a		 jbe	 SHORT $LN356@Attack

; 1550 : 								{
; 1551 : 									DecTime = lpInfo->m_Arg6;

  01ffc	f3 0f 2c c1	 cvttss2si eax, xmm1
  02000	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecTime$1$[ebp], eax
$LN356@Attack:

; 1552 : 								}
; 1553 : 							}
; 1554 : 
; 1555 : 							if( DecTime < 1 )

  02006	83 f8 01	 cmp	 eax, 1
  02009	0f 8c 1f 13 00
	00		 jl	 $LN502@Attack

; 1556 : 							{
; 1557 : 								GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1558 : 								return FALSE;
; 1559 : 							}
; 1560 : 
; 1561 : 							if( gObjCheckPowerfulEffect(lpObj,AT_INNOVATION,DecValue,0) == TRUE )

  0200f	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _DecValue$1$[ebp]
  02015	6a 00		 push	 0
  02017	56		 push	 esi
  02018	6a 4d		 push	 77			; 0000004dH
  0201a	53		 push	 ebx
  0201b	e8 00 00 00 00	 call	 ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
  02020	83 c4 10	 add	 esp, 16			; 00000010H
  02023	3c 01		 cmp	 al, 1
  02025	0f 84 db 12 00
	00		 je	 $LN957@Attack
$LN358@Attack:

; 1562 : 							{
; 1563 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);
; 1564 : 								return FALSE;
; 1565 : 							}
; 1566 : 
; 1567 : 							gObjAddBuffEffect(lpTargetObj,AT_INNOVATION,ADD_OPTION_INNOVATION,DecValue,0,0,DecTime);

  0202b	ff b5 cc fe ff
	ff		 push	 DWORD PTR _DecTime$1$[ebp]
  02031	6a 00		 push	 0
  02033	6a 00		 push	 0
  02035	56		 push	 esi
  02036	6a 1e		 push	 30			; 0000001eH
  02038	6a 4d		 push	 77			; 0000004dH
  0203a	57		 push	 edi
  0203b	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  02040	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1568 : 							return TRUE;

  02043	e9 5c 2b 00 00	 jmp	 $LN739@Attack
$LN359@Attack:

; 1569 : 						}
; 1570 : 						else
; 1571 : 						{
; 1572 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1573 : 							return FALSE;
; 1574 : 						}
; 1575 : 					}
; 1576 : 					break;
; 1577 : 				case AT_SKILL_LAGLE:
; 1578 : 
; 1579 : 					if( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_ICE) == FALSE )

  02048	6a 38		 push	 56			; 00000038H
  0204a	57		 push	 edi
  0204b	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  02050	83 c4 08	 add	 esp, 8
  02053	84 c0		 test	 al, al
  02055	0f 85 f8 02 00
	00		 jne	 $LN829@Attack

; 1580 : 					{
; 1581 : 						lpTargetObj->lpAttackObj = lpObj;
; 1582 : 						lpTargetObj->DelayActionTime = 1000;
; 1583 : 						lpTargetObj->DelayLevel = 1;
; 1584 : 
; 1585 : 						gObjAddBuffEffect(lpTargetObj,BUFF_ICE,ADD_OPTION_REDUCEMOVEMENT,0,0,0,2);

  0205b	6a 02		 push	 2
  0205d	6a 00		 push	 0
  0205f	6a 00		 push	 0
  02061	6a 00		 push	 0
  02063	6a 14		 push	 20			; 00000014H
  02065	6a 38		 push	 56			; 00000038H
  02067	57		 push	 edi
  02068	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  0206e	c7 87 a4 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1444], 1000 ; 000003e8H
  02078	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  0207f	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  02084	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1586 : 					}
; 1587 : 					break;

  02087	e9 c7 02 00 00	 jmp	 $LN829@Attack
$LN361@Attack:

; 1588 : 				case AT_SKILL_LIGHTSHOCK:
; 1589 : 					gObjAddBuffEffect(lpTargetObj,BUFF_LIGHTNINGSHOCK,0,0,0,0,1);

  0208c	6a 01		 push	 1
  0208e	6a 00		 push	 0
  02090	6a 00		 push	 0
  02092	6a 00		 push	 0
  02094	6a 00		 push	 0
  02096	6a 55		 push	 85			; 00000055H
  02098	57		 push	 edi
  02099	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0209e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1590 : 					break;

  020a1	e9 ad 02 00 00	 jmp	 $LN829@Attack
$LN362@Attack:

; 1591 : 				case AT_SKILL_DESTRUCT:
; 1592 : 					lpTargetObj->lpAttackObj = lpObj;
; 1593 : 					lpTargetObj->DelayActionTime = 1000;
; 1594 : 					lpTargetObj->DelayLevel = 1;
; 1595 : 						
; 1596 : 					gObjAddBuffEffect(lpTargetObj,BUFF_COLD,ADD_OPTION_REDUCEMOVEMENT,0,0,0,10);

  020a6	6a 0a		 push	 10			; 0000000aH
  020a8	6a 00		 push	 0
  020aa	6a 00		 push	 0
  020ac	6a 00		 push	 0
  020ae	6a 14		 push	 20			; 00000014H
  020b0	6a 56		 push	 86			; 00000056H
  020b2	57		 push	 edi
  020b3	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  020b9	c7 87 a4 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1444], 1000 ; 000003e8H
  020c3	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  020ca	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  020cf	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1597 : 
; 1598 : 					AttackDamage = AttackDamage*(200 + Energy/10)/100;
; 1599 : 					break;

  020d2	e9 7f f8 ff ff	 jmp	 $LN284@Attack
$LN363@Attack:

; 1600 : 				case AT_SKILL_FLAMESTRIKE:
; 1601 : 					AttackDamage *= 2;

  020d7	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]

; 1602 : 					gObjAddBuffEffect(lpTargetObj,BUFF_FLAMESTRIKE,0,0,0,0,1);

  020da	6a 01		 push	 1
  020dc	6a 00		 push	 0
  020de	6a 00		 push	 0
  020e0	6a 00		 push	 0
  020e2	6a 00		 push	 0
  020e4	03 c0		 add	 eax, eax
  020e6	6a 53		 push	 83			; 00000053H
  020e8	57		 push	 edi
  020e9	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  020ec	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  020f1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1603 : 					break;

  020f4	e9 5a 02 00 00	 jmp	 $LN829@Attack
$LN364@Attack:

; 1604 : 				case AT_SKILL_GIGANTICSTORM:
; 1605 : 					gObjAddBuffEffect(lpTargetObj,BUFF_GIGANTSTORM,0,0,0,0,1);

  020f9	6a 01		 push	 1
  020fb	6a 00		 push	 0
  020fd	6a 00		 push	 0
  020ff	6a 00		 push	 0
  02101	6a 00		 push	 0
  02103	6a 54		 push	 84			; 00000054H
  02105	57		 push	 edi
  02106	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0210b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1606 : 					break;

  0210e	e9 40 02 00 00	 jmp	 $LN829@Attack
$LN365@Attack:

; 1607 : 				case AT_SKILL_CHAOTICDISEIER:
; 1608 : 					AttackDamage = AttackDamage*(200 + Energy/25)/100;

  02113	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02118	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
  0211e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02123	c1 fa 03	 sar	 edx, 3
  02126	8b ca		 mov	 ecx, edx
  02128	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  0212e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02131	03 ca		 add	 ecx, edx
  02133	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02137	f7 e9		 imul	 ecx
  02139	c1 fa 05	 sar	 edx, 5
  0213c	8b c2		 mov	 eax, edx
  0213e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02141	03 c2		 add	 eax, edx
  02143	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 1609 : 
; 1610 : 					if( lpMagic->m_Skill == AT_SKILL_CHAOTICDISEIER &&

  02146	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0214c	81 78 08 ee 00
	00 00		 cmp	 DWORD PTR [eax+8], 238	; 000000eeH
  02153	0f 85 fa 01 00
	00		 jne	 $LN829@Attack
  02159	b8 31 02 00 00	 mov	 eax, 561		; 00000231H
  0215e	66 39 83 90 00
	00 00		 cmp	 WORD PTR [ebx+144], ax
  02165	0f 85 e8 01 00
	00		 jne	 $LN829@Attack

; 1611 : 						lpObj->Class == 561 )
; 1612 : 					{
; 1613 : 						if( gObjCheckUsedBuffEffect(lpTargetObj,AT_ICE) )

  0216b	6a 38		 push	 56			; 00000038H
  0216d	57		 push	 edi
  0216e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  02173	83 c4 08	 add	 esp, 8
  02176	84 c0		 test	 al, al
  02178	0f 84 d5 01 00
	00		 je	 $LN829@Attack

; 1614 : 						{
; 1615 : 							lpObj->DelayActionTime = 800;

  0217e	c7 83 a4 05 00
	00 20 03 00 00	 mov	 DWORD PTR [ebx+1444], 800 ; 00000320H

; 1616 : 							lpObj->DelayLevel = 1;

  02188	c6 83 a8 05 00
	00 01		 mov	 BYTE PTR [ebx+1448], 1

; 1617 : 							lpObj->lpAttackObj = lpObj;

  0218f	89 9b b4 05 00
	00		 mov	 DWORD PTR [ebx+1460], ebx

; 1618 : 
; 1619 : 							if( rand()%100 < 50 )

  02195	e8 00 00 00 00	 call	 _rand
  0219a	99		 cdq
  0219b	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  021a0	f7 f9		 idiv	 ecx
  021a2	83 fa 32	 cmp	 edx, 50			; 00000032H
  021a5	7d 15		 jge	 SHORT $LN368@Attack

; 1620 : 								gObjAddBuffEffect(lpTargetObj,AT_STUN,0,0,0,0,5);

  021a7	6a 05		 push	 5
  021a9	6a 00		 push	 0
  021ab	6a 00		 push	 0
  021ad	6a 00		 push	 0
  021af	6a 00		 push	 0
  021b1	6a 3d		 push	 61			; 0000003dH
  021b3	57		 push	 edi
  021b4	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  021b9	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN368@Attack:

; 1621 : 
; 1622 : 							AttackDamage = 1000;

  021bc	c7 45 1c e8 03
	00 00		 mov	 DWORD PTR _AttackDamage$[ebp], 1000 ; 000003e8H

; 1623 : 						}
; 1624 : 					}
; 1625 : 					break;

  021c3	e9 8b 01 00 00	 jmp	 $LN829@Attack
$LN370@Attack:
  021c8	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 1626 : 				case 250:
; 1627 : 					AttackDamage *= 2;
; 1628 : 					break;
; 1629 : 				case 251:
; 1630 : 					AttackDamage *= 2.2f;

  021cd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  021d0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@400ccccd
  021d8	f3 0f 2c c0	 cvttss2si eax, xmm0

; 1631 : 					break;

  021dc	e9 6f 01 00 00	 jmp	 $LN901@Attack
$LN371@Attack:
  021e1	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 1632 : 				case 252:
; 1633 : 					AttackDamage *= 2.3f;

  021e6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  021e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40133333
  021f1	f3 0f 2c c0	 cvttss2si eax, xmm0

; 1634 : 					break;

  021f5	e9 56 01 00 00	 jmp	 $LN901@Attack
$LN372@Attack:
  021fa	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 1635 : 				case 253:
; 1636 : 					AttackDamage *= 2.5;

  021ff	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  02203	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4004000000000000
  0220b	f2 0f 2c c0	 cvttsd2si eax, xmm0

; 1637 : 					break;

  0220f	e9 3c 01 00 00	 jmp	 $LN901@Attack
$LN373@Attack:

; 1638 : 				case 239:
; 1639 : 					gObjBackSpring(lpTargetObj,lpObj);

  02214	53		 push	 ebx
  02215	57		 push	 edi
  02216	e8 00 00 00 00	 call	 ?gObjBackSpring@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjBackSpring
  0221b	83 c4 08	 add	 esp, 8

; 1640 : 					break;

  0221e	e9 30 01 00 00	 jmp	 $LN829@Attack
$LN374@Attack:

; 1641 : 				case AT_SKILL_RAGEFIGHTER_WEAPON1:
; 1642 : 				case AT_SKILL_RAGEFIGHTER_WEAPON2:
; 1643 : 				case AT_SKILL_RAGEFIGHTER_CHAINDRIVE:
; 1644 : 				case AT_SKILL_RAGEFIGHTER_SIEGE:
; 1645 : 				case AT_SKILL_PHOENIXSHOT:
; 1646 : 					{
; 1647 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02223	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02229	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  0222e	ff 70 08	 push	 DWORD PTR [eax+8]
  02231	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 1648 : 
; 1649 : 						if( !lpInfo )

  02236	85 c0		 test	 eax, eax
  02238	0f 84 17 1a 00
	00		 je	 $LN956@Attack
  0223e	66 0f 6e 8d a0
	fe ff ff	 movd	 xmm1, DWORD PTR _Vitality$1$[ebp]
$LN913@Attack:
  02246	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 1650 : 						{
; 1651 : 							return 0;
; 1652 : 						}
; 1653 : 						
; 1654 : 						AttackDamage = AttackDamage * (lpInfo->m_Arg1 + (Vitality / lpInfo->m_Arg2)) / 100.0f;

  0224b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0224e	0f 5b c0	 cvtdq2ps xmm0, xmm0
$LN965@Attack:
  02251	f3 0f 5e 48 08	 divss	 xmm1, DWORD PTR [eax+8]
  02256	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  0225b	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0225f	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000

; 1655 : 					}
; 1656 : 					break;

  02267	e9 e0 00 00 00	 jmp	 $LN912@Attack
$LN376@Attack:

; 1657 : 				case AT_SKILL_RAGEFIGHTER_DARKSIDE:
; 1658 : 					{
; 1659 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  0226c	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02272	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02277	ff 70 08	 push	 DWORD PTR [eax+8]
  0227a	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 1660 : 
; 1661 : 						if( !lpInfo )

  0227f	85 c0		 test	 eax, eax
  02281	0f 84 ce 19 00
	00		 je	 $LN956@Attack

; 1662 : 						{
; 1663 : 							return 0;
; 1664 : 						}
; 1665 : 
; 1666 : 						AttackDamage = (AttackDamage)*(lpInfo->m_Arg1 + (Dexterity/lpInfo->m_Arg2) + (Energy/lpInfo->m_Arg3))/100.0f;

  02287	66 0f 6e 8d 8c
	fe ff ff	 movd	 xmm1, DWORD PTR _Dexterity$1$[ebp]
  0228f	66 0f 6e 85 d4
	fe ff ff	 movd	 xmm0, DWORD PTR _Energy$1$[ebp]
  02297	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0229a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0229d	f3 0f 5e 48 08	 divss	 xmm1, DWORD PTR [eax+8]
  022a2	f3 0f 5e 40 0c	 divss	 xmm0, DWORD PTR [eax+12]
  022a7	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  022ac	f3 0f 58 c8	 addss	 xmm1, xmm0
  022b0	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  022b5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  022b8	f3 0f 59 c8	 mulss	 xmm1, xmm0
  022bc	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000

; 1667 : 					}
; 1668 : 					break;

  022c4	e9 83 00 00 00	 jmp	 $LN912@Attack
$LN378@Attack:

; 1669 : 				case AT_SKILL_RAGEFIGHTER_DRAGONLORE:
; 1670 : 					{
; 1671 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  022c9	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  022cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  022d4	ff 70 08	 push	 DWORD PTR [eax+8]
  022d7	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 1672 : 
; 1673 : 						if( !lpInfo )

  022dc	85 c0		 test	 eax, eax
  022de	0f 84 71 19 00
	00		 je	 $LN956@Attack
  022e4	66 0f 6e 8d d4
	fe ff ff	 movd	 xmm1, DWORD PTR _Energy$1$[ebp]

; 1674 : 						{
; 1675 : 							return 0;
; 1676 : 						}
; 1677 : 						
; 1678 : 						AttackDamage = (AttackDamage) * (lpInfo->m_Arg1 + (Energy/lpInfo->m_Arg2)) / 100.0f;
; 1679 : 					}
; 1680 : 					break;

  022ec	e9 55 ff ff ff	 jmp	 $LN913@Attack
$LN380@Attack:

; 1681 : 				case AT_SKILL_RAGEFIGHTER_DRAGONSLAYER:
; 1682 : 					{
; 1683 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  022f1	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  022f7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  022fc	ff 70 08	 push	 DWORD PTR [eax+8]
  022ff	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 1684 : 
; 1685 : 						if( !lpInfo )

  02304	85 c0		 test	 eax, eax
  02306	0f 84 49 19 00
	00		 je	 $LN956@Attack

; 1686 : 						{
; 1687 : 							return 0;
; 1688 : 						}
; 1689 : 
; 1690 : 						if( lpTargetObj->Type == OBJ_USER )

  0230c	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  02310	66 0f 6e 8d d4
	fe ff ff	 movd	 xmm1, DWORD PTR _Energy$1$[ebp]
  02318	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 1691 : 						{
; 1692 : 							AttackDamage = AttackDamage * (lpInfo->m_Arg1 + (Energy/lpInfo->m_Arg2)) / 100.0f;

  0231d	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02320	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02323	0f 84 28 ff ff
	ff		 je	 $LN965@Attack

; 1693 : 						}
; 1694 : 						else
; 1695 : 						{
; 1696 : 							AttackDamage = ((AttackDamage * (lpInfo->m_Arg3 + (Energy/lpInfo->m_Arg4)) / 100.0f) + 100.0f)*lpInfo->m_Arg5;

  02329	f3 0f 5e 48 10	 divss	 xmm1, DWORD PTR [eax+16]
  0232e	f3 0f 58 48 0c	 addss	 xmm1, DWORD PTR [eax+12]
  02333	f3 0f 59 c8	 mulss	 xmm1, xmm0
  02337	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  0233f	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42c80000
  02347	f3 0f 59 48 14	 mulss	 xmm1, DWORD PTR [eax+20]
$LN912@Attack:
  0234c	f3 0f 2c c1	 cvttss2si eax, xmm1
$LN901@Attack:
  02350	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN829@Attack:

; 1697 : 						}
; 1698 : 					}
; 1699 : 					break;
; 1700 : 			}
; 1701 : 
; 1702 : 			if( g_MasterSkillSystem.CheckMasterLevelSkill(skill) )

  02353	56		 push	 esi
  02354	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  02359	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  0235e	85 c0		 test	 eax, eax
  02360	0f 84 24 10 00
	00		 je	 $LN10@Attack

; 1703 : 			{
; 1704 : 				float iSkillValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  02366	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0236c	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  02370	50		 push	 eax
  02371	ff 71 08	 push	 DWORD PTR [ecx+8]
  02374	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  02379	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0237e	50		 push	 eax
  0237f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  02384	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue

; 1705 : 				float iSkillBrandValue1 = g_MasterSkillSystem.GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,1);

  02389	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0238f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  02394	6a 01		 push	 1
  02396	d9 9d d0 fe ff
	ff		 fstp	 DWORD PTR _iSkillValue$7[ebp]
  0239c	ff 70 08	 push	 DWORD PTR [eax+8]
  0239f	53		 push	 ebx
  023a0	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 1706 : 				float iSkillBrandValue2 = g_MasterSkillSystem.GetBrandOfMasterSkillValue(lpObj,lpMagic->m_Skill,2);

  023a5	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  023ab	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  023b0	6a 02		 push	 2
  023b2	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR _iSkillBrandValue1$9[ebp]
  023b8	ff 70 08	 push	 DWORD PTR [eax+8]
  023bb	53		 push	 ebx
  023bc	e8 00 00 00 00	 call	 ?GetBrandOfMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMPAUOBJECTSTRUCT@@HH@Z ; CMasterLevelSkillTreeSystem::GetBrandOfMasterSkillValue

; 1707 : 
; 1708 : 				float fPrevValue = 0;
; 1709 : 
; 1710 : 				int iMLSBase = g_MasterSkillSystem.GetBaseMasterLevelSkill(skill);

  023c1	56		 push	 esi
  023c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  023c7	dd d8		 fstp	 ST(0)
  023c9	e8 00 00 00 00	 call	 ?GetBaseMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::GetBaseMasterLevelSkill

; 1711 : 
; 1712 : 				switch( iMLSBase )

  023ce	05 ba fe ff ff	 add	 eax, -326		; fffffebaH
  023d3	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  023d8	0f 87 ac 0f 00
	00		 ja	 $LN10@Attack
  023de	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN823@Attack[eax]
  023e5	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN986@Attack[eax*4]
$LN385@Attack:

; 1713 : 				{
; 1714 : 				case AT_MSKILL_DW_EARTHPRISON:
; 1715 : 				case AT_MSKILL_DW_EARTHPRISON1:
; 1716 : 					if (rand() % 100 < 10)

  023ec	e8 00 00 00 00	 call	 _rand
  023f1	99		 cdq
  023f2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  023f7	f7 f9		 idiv	 ecx
  023f9	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  023fc	0f 8d 88 0f 00
	00		 jge	 $LN10@Attack

; 1717 : 					{
; 1718 : 					  gObjAddBuffEffect(lpTargetObj, BUFF_EARTHBINDS, 0, 0, 0, 0, 5);

  02402	6a 05		 push	 5
  02404	6a 00		 push	 0
  02406	6a 00		 push	 0
  02408	6a 00		 push	 0
  0240a	6a 00		 push	 0
  0240c	68 93 00 00 00	 push	 147			; 00000093H
  02411	57		 push	 edi
  02412	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1719 : 					  lpTargetObj->PathCount = 0;

  02417	c7 87 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+344], 0

; 1720 : 					  lpTargetObj->PathStartEnd = 0;

  02421	c6 87 60 01 00
	00 00		 mov	 BYTE PTR [edi+352], 0
$LN934@Attack:

; 1721 : 					  gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  02428	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0242f	50		 push	 eax
  02430	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  02437	50		 push	 eax
  02438	ff 37		 push	 DWORD PTR [edi]
  0243a	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0243f	83 c4 28	 add	 esp, 40			; 00000028H

; 1722 : 					}
; 1723 : 					break;

  02442	e9 43 0f 00 00	 jmp	 $LN10@Attack
$LN387@Attack:

; 1724 : 				case AT_MSKILL_DK_TWISTINGSLASH1:
; 1725 : 				case AT_MSKILL_DK_TWISTINGSLASH2:
; 1726 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;

  02447	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0244c	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
  02452	c1 fa 02	 sar	 edx, 2

; 1727 : 					break;

  02455	e9 0b 0f 00 00	 jmp	 $LN916@Attack
$LN388@Attack:

; 1728 : 				case AT_MSKILL_MG_TWISTINGSLASH1:
; 1729 : 					AttackDamage *= 2;

  0245a	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0245d	03 c0		 add	 eax, eax

; 1730 : 					break;

  0245f	e9 23 0f 00 00	 jmp	 $LN917@Attack
$LN389@Attack:

; 1731 : 				case AT_MSKILL_DK_CYCLONE1:
; 1732 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;

  02464	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02469	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
  0246f	c1 fa 02	 sar	 edx, 2
  02472	8b c2		 mov	 eax, edx
  02474	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02477	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  0247c	03 c2		 add	 eax, edx
  0247e	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02482	66 0f 6e c0	 movd	 xmm0, eax
  02486	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02489	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  02491	f3 0f 2c c0	 cvttss2si eax, xmm0

; 1733 : 					break;

  02495	e9 ed 0e 00 00	 jmp	 $LN917@Attack
$LN394@Attack:

; 1734 : 				case AT_MSKILL_MG_CYCLONE1:
; 1735 : 					AttackDamage *= 2;
; 1736 : 					break;
; 1737 : 				case AT_MSKILL_DK_SLASH1:
; 1738 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;
; 1739 : 					break;
; 1740 : 				case AT_MSKILL_DK_FALLINGSLASH1:
; 1741 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;
; 1742 : 					break;
; 1743 : 				case AT_MSKILL_DK_LUNGE1:
; 1744 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;
; 1745 : 					break;
; 1746 : 				case AT_MSKILL_DK_DESTRUCTION1:
; 1747 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;

  0249a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 1748 : 
; 1749 : 					lpTargetObj->lpAttackObj = lpObj;

  0249f	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  024a5	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]

; 1750 : 					lpTargetObj->DelayActionTime = 1000;
; 1751 : 					lpTargetObj->DelayLevel = 1;
; 1752 : 						
; 1753 : 					gObjAddBuffEffect(lpTargetObj,BUFF_COLD,ADD_OPTION_REDUCEMOVEMENT,0,0,0,10);

  024ab	6a 0a		 push	 10			; 0000000aH
  024ad	c1 fa 02	 sar	 edx, 2
  024b0	8b c2		 mov	 eax, edx
  024b2	c7 87 a4 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1444], 1000 ; 000003e8H
  024bc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  024bf	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  024c4	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  024cb	03 c2		 add	 eax, edx
  024cd	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  024d1	6a 00		 push	 0
  024d3	6a 00		 push	 0
  024d5	6a 00		 push	 0
  024d7	6a 14		 push	 20			; 00000014H
  024d9	6a 56		 push	 86			; 00000056H
  024db	57		 push	 edi
  024dc	66 0f 6e c0	 movd	 xmm0, eax
  024e0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  024e3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  024eb	f3 0f 2c c0	 cvttss2si eax, xmm0
  024ef	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  024f2	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  024f7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1754 : 					break;

  024fa	e9 8b 0e 00 00	 jmp	 $LN10@Attack
$LN395@Attack:

; 1755 : 				case AT_MSKILL_DK_DESTRUCTION2:
; 1756 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;

  024ff	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 1757 : 
; 1758 : 					lpTargetObj->lpAttackObj = lpObj;

  02504	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  0250a	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]

; 1759 : 					lpTargetObj->DelayActionTime = 1000;
; 1760 : 					lpTargetObj->DelayLevel = 1;
; 1761 : 						
; 1762 : 					gObjAddBuffEffect(lpTargetObj,BUFF_COLD,ADD_OPTION_REDUCEMOVEMENT,0,0,0,10);

  02510	6a 0a		 push	 10			; 0000000aH
  02512	c1 fa 02	 sar	 edx, 2
  02515	8b c2		 mov	 eax, edx
  02517	c7 87 a4 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1444], 1000 ; 000003e8H
  02521	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02524	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  02529	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  02530	03 c2		 add	 eax, edx
  02532	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  02536	6a 00		 push	 0
  02538	6a 00		 push	 0
  0253a	6a 00		 push	 0
  0253c	6a 14		 push	 20			; 00000014H
  0253e	6a 56		 push	 86			; 00000056H
  02540	57		 push	 edi
  02541	66 0f 6e c0	 movd	 xmm0, eax
  02545	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02548	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  02550	f3 0f 2c c0	 cvttss2si eax, xmm0
  02554	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02557	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1763 : 
; 1764 : 					if( iSkillValue > 0 )

  0255c	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02564	83 c4 1c	 add	 esp, 28			; 0000001cH
  02567	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0256e	0f 86 16 0e 00
	00		 jbe	 $LN10@Attack

; 1765 : 					{
; 1766 : 						float fPercent = rand()%100;

  02574	e8 00 00 00 00	 call	 _rand

; 1767 : 
; 1768 : 						if( fPercent < iSkillValue )

  02579	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillValue$7[ebp]
$LN970@Attack:

; 1765 : 					{
; 1766 : 						float fPercent = rand()%100;

  02581	99		 cdq
  02582	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02587	f7 f9		 idiv	 ecx
  02589	66 0f 6e c2	 movd	 xmm0, edx
  0258d	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1767 : 
; 1768 : 						if( fPercent < iSkillValue )

  02590	0f 2f c8	 comiss	 xmm1, xmm0
$LN969@Attack:
  02593	0f 86 f1 0d 00
	00		 jbe	 $LN10@Attack

; 1769 : 						{
; 1770 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,3);

  02599	6a 03		 push	 3
$LN967@Attack:
  0259b	6a 00		 push	 0
  0259d	6a 00		 push	 0
  0259f	6a 00		 push	 0
  025a1	6a 00		 push	 0
  025a3	6a 3d		 push	 61			; 0000003dH
  025a5	57		 push	 edi
  025a6	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1771 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 1772 : 						}
; 1773 : 					}
; 1774 : 					break;

  025ab	e9 78 fe ff ff	 jmp	 $LN934@Attack
$LN398@Attack:

; 1775 : 				case AT_MSKILL_DK_DESTRUCTION3:
; 1776 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100.0f;

  025b0	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 1777 : 
; 1778 : 					lpTargetObj->lpAttackObj = lpObj;

  025b5	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  025bb	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]

; 1779 : 					lpTargetObj->DelayActionTime = 1000;
; 1780 : 					lpTargetObj->DelayLevel = 1;
; 1781 : 						
; 1782 : 					gObjAddBuffEffect(lpTargetObj,BUFF_COLD,ADD_OPTION_REDUCEMOVEMENT,0,0,0,10);

  025c1	6a 0a		 push	 10			; 0000000aH
  025c3	c1 fa 02	 sar	 edx, 2
  025c6	8b c2		 mov	 eax, edx
  025c8	c7 87 a4 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1444], 1000 ; 000003e8H
  025d2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  025d5	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  025da	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  025e1	03 c2		 add	 eax, edx
  025e3	0f af 45 1c	 imul	 eax, DWORD PTR _AttackDamage$[ebp]
  025e7	6a 00		 push	 0
  025e9	6a 00		 push	 0
  025eb	6a 00		 push	 0
  025ed	6a 14		 push	 20			; 00000014H
  025ef	6a 56		 push	 86			; 00000056H
  025f1	57		 push	 edi
  025f2	66 0f 6e c0	 movd	 xmm0, eax
  025f6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  025f9	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  02601	f3 0f 2c c0	 cvttss2si eax, xmm0
  02605	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02608	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1783 : 
; 1784 : 					if( iSkillValue > 0.0f )

  0260d	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02615	0f 57 c9	 xorps	 xmm1, xmm1
  02618	83 c4 1c	 add	 esp, 28			; 0000001cH
  0261b	0f 2f c1	 comiss	 xmm0, xmm1
  0261e	76 3c		 jbe	 SHORT $LN400@Attack

; 1785 : 					{
; 1786 : 						float fPercent = rand()%100;

  02620	e8 00 00 00 00	 call	 _rand
  02625	99		 cdq
  02626	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0262b	f7 f9		 idiv	 ecx

; 1787 : 
; 1788 : 						if( fPercent < iSkillValue )

  0262d	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillValue$7[ebp]
  02635	66 0f 6e c2	 movd	 xmm0, edx
  02639	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0263c	0f 2f c8	 comiss	 xmm1, xmm0
  0263f	76 18		 jbe	 SHORT $LN850@Attack

; 1789 : 						{
; 1790 : 							gObjAddBuffEffect(lpTargetObj,BUFF_DECREASE_ATTACKSPEED,0,0,0,0,5);

  02641	6a 05		 push	 5
  02643	6a 00		 push	 0
  02645	6a 00		 push	 0
  02647	6a 00		 push	 0
  02649	6a 00		 push	 0
  0264b	68 8d 00 00 00	 push	 141			; 0000008dH
  02650	57		 push	 edi
  02651	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  02656	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN850@Attack:
  02659	0f 57 c9	 xorps	 xmm1, xmm1
$LN400@Attack:

; 1791 : 						}
; 1792 : 					}
; 1793 : 
; 1794 : 					if( iSkillBrandValue1 > 0.0f )

  0265c	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillBrandValue1$9[ebp]
  02664	0f 2f c1	 comiss	 xmm0, xmm1
  02667	0f 86 1d 0d 00
	00		 jbe	 $LN10@Attack

; 1795 : 					{
; 1796 : 						float fPercent = rand()%100;

  0266d	e8 00 00 00 00	 call	 _rand

; 1797 : 
; 1798 : 						if( fPercent < iSkillBrandValue1 )

  02672	f3 0f 10 8d e4
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillBrandValue1$9[ebp]

; 1799 : 						{
; 1800 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,3);
; 1801 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 1802 : 						}
; 1803 : 					}
; 1804 : 					break;

  0267a	e9 02 ff ff ff	 jmp	 $LN970@Attack
$LN405@Attack:

; 1805 : 				case AT_MSKILL_FE_PENETRATION1:
; 1806 : 					AttackDamage *= 2;
; 1807 : 					break;
; 1808 : 				case AT_MSKILL_FE_ICEARROW1:
; 1809 : 					AttackDamage *= 2;
; 1810 : 					break;
; 1811 : 				case AT_MSKILL_DL_EARTHSHAKE2:
; 1812 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;

  0267f	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  02686	0f b7 8b 02 01
	00 00		 movzx	 ecx, WORD PTR [ebx+258]
  0268d	03 c8		 add	 ecx, eax
  0268f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02694	f7 e9		 imul	 ecx
  02696	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0269b	c1 fa 03	 sar	 edx, 3
  0269e	8b ca		 mov	 ecx, edx
  026a0	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  026a6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  026a9	03 ca		 add	 ecx, edx
  026ab	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  026af	f7 e9		 imul	 ecx
  026b1	c1 fa 05	 sar	 edx, 5
  026b4	8b c2		 mov	 eax, edx
  026b6	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  026b9	03 c2		 add	 eax, edx
  026bb	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN472@Attack:

; 1813 : 
; 1814 : 					if( iSkillValue > 0 )

  026be	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  026c6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  026cd	0f 86 b7 0c 00
	00		 jbe	 $LN10@Attack

; 1815 : 					{
; 1816 : 						float fPercent = rand()%100;

  026d3	e8 00 00 00 00	 call	 _rand
  026d8	99		 cdq
  026d9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  026de	f7 f9		 idiv	 ecx

; 1817 : 
; 1818 : 						if( fPercent < iSkillValue )

  026e0	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillValue$7[ebp]
  026e8	66 0f 6e c2	 movd	 xmm0, edx
  026ec	0f 5b c0	 cvtdq2ps xmm0, xmm0
  026ef	0f 2f c8	 comiss	 xmm1, xmm0
  026f2	0f 86 92 0c 00
	00		 jbe	 $LN10@Attack

; 1819 : 						{
; 1820 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,2);

  026f8	6a 02		 push	 2

; 1821 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 1822 : 						}
; 1823 : 					}
; 1824 : 					break;

  026fa	e9 9c fe ff ff	 jmp	 $LN967@Attack
$LN411@Attack:

; 1825 : 				case AT_MSKILL_DL_FIREBURST2:
; 1826 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;
; 1827 : 
; 1828 : 					if( iSkillValue > 0 )
; 1829 : 					{
; 1830 : 						float fPercent = rand()%100;
; 1831 : 
; 1832 : 						if( fPercent < iSkillValue )
; 1833 : 						{
; 1834 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,2);
; 1835 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 1836 : 						}
; 1837 : 					}
; 1838 : 					break;
; 1839 : 				case AT_MSKILL_DL_FORCEWAVE1:
; 1840 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;

  026ff	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  02706	0f b7 8b 02 01
	00 00		 movzx	 ecx, WORD PTR [ebx+258]
  0270d	03 c8		 add	 ecx, eax
  0270f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02714	f7 e9		 imul	 ecx

; 1841 : 					break;

  02716	e9 47 0c 00 00	 jmp	 $LN918@Attack
$LN415@Attack:

; 1842 : 				case AT_MSKILL_DL_EARTHSHAKE1:
; 1843 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;
; 1844 : 					break;
; 1845 : 				case AT_MSKILL_DL_FIREBURST1:
; 1846 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;
; 1847 : 					break;
; 1848 : 				case AT_MSKILL_DK_DEATHSTAB1:
; 1849 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;
; 1850 : 					break;
; 1851 : 				case AT_MSKILL_DK_DEATHSTAB2:
; 1852 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;

  0271b	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 1853 : 					if( iSkillValue > 0 )

  02720	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02728	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
  0272e	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02733	c1 fa 02	 sar	 edx, 2
  02736	8b ca		 mov	 ecx, edx
  02738	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  0273e	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02741	03 ca		 add	 ecx, edx
  02743	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  02747	f7 e9		 imul	 ecx
  02749	c1 fa 05	 sar	 edx, 5
  0274c	8b c2		 mov	 eax, edx
  0274e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02751	03 c2		 add	 eax, edx
  02753	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0275a	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  0275d	0f 86 27 0c 00
	00		 jbe	 $LN10@Attack

; 1854 : 					{
; 1855 : 						float fPercent = rand()%100;

  02763	e8 00 00 00 00	 call	 _rand

; 1856 : 
; 1857 : 						if( fPercent < iSkillValue )

  02768	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillValue$7[ebp]
$LN971@Attack:

; 1854 : 					{
; 1855 : 						float fPercent = rand()%100;

  02770	99		 cdq
  02771	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02776	f7 f9		 idiv	 ecx
  02778	66 0f 6e c2	 movd	 xmm0, edx
  0277c	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1856 : 
; 1857 : 						if( fPercent < iSkillValue )

  0277f	0f 2f c8	 comiss	 xmm1, xmm0
  02782	0f 86 02 0c 00
	00		 jbe	 $LN10@Attack

; 1858 : 						{
; 1859 : 							int Damage = Strength/10;

  02788	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 1860 : 							lpTargetObj->lpAttackObj = lpObj;

  0278d	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  02793	f7 ad bc fe ff
	ff		 imul	 DWORD PTR _Strength$1$[ebp]

; 1861 : 							gObjAddBuffEffect(lpTargetObj,BUFF_BLEEDING,ADD_OPTION_REDUCE_HP,Damage,0,0,10);

  02799	6a 0a		 push	 10			; 0000000aH
  0279b	c1 fa 02	 sar	 edx, 2
  0279e	6a 00		 push	 0
  027a0	8b c2		 mov	 eax, edx
  027a2	6a 00		 push	 0
  027a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  027a7	03 c2		 add	 eax, edx
  027a9	50		 push	 eax
  027aa	6a 12		 push	 18			; 00000012H
  027ac	68 89 00 00 00	 push	 137			; 00000089H
  027b1	57		 push	 edi
  027b2	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  027b7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1862 : 						}
; 1863 : 					}
; 1864 : 					break;

  027ba	e9 cb 0b 00 00	 jmp	 $LN10@Attack
$LN418@Attack:

; 1865 : 				case AT_MSKILL_DK_DEATHSTAB3:
; 1866 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;

  027bf	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H

; 1867 : 					if( iSkillValue > 0.0f )

  027c4	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  027cc	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
  027d2	0f 57 c9	 xorps	 xmm1, xmm1
  027d5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  027da	c1 fa 02	 sar	 edx, 2
  027dd	8b ca		 mov	 ecx, edx
  027df	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  027e5	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  027e8	03 ca		 add	 ecx, edx
  027ea	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  027ee	f7 e9		 imul	 ecx
  027f0	c1 fa 05	 sar	 edx, 5
  027f3	8b c2		 mov	 eax, edx
  027f5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  027f8	03 c2		 add	 eax, edx
  027fa	0f 2f c1	 comiss	 xmm0, xmm1
  027fd	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
  02800	76 50		 jbe	 SHORT $LN420@Attack

; 1868 : 					{
; 1869 : 						float fPercent = rand()%100;

  02802	e8 00 00 00 00	 call	 _rand
  02807	99		 cdq
  02808	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0280d	f7 f9		 idiv	 ecx

; 1870 : 
; 1871 : 						if( fPercent < iSkillValue )

  0280f	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillValue$7[ebp]
  02817	66 0f 6e c2	 movd	 xmm0, edx
  0281b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0281e	0f 2f c8	 comiss	 xmm1, xmm0
  02821	76 2c		 jbe	 SHORT $LN851@Attack

; 1872 : 						{
; 1873 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,2);

  02823	6a 02		 push	 2
  02825	6a 00		 push	 0
  02827	6a 00		 push	 0
  02829	6a 00		 push	 0
  0282b	6a 00		 push	 0
  0282d	6a 3d		 push	 61			; 0000003dH
  0282f	57		 push	 edi
  02830	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 1874 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  02835	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0283c	50		 push	 eax
  0283d	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  02844	50		 push	 eax
  02845	ff 37		 push	 DWORD PTR [edi]
  02847	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0284c	83 c4 28	 add	 esp, 40			; 00000028H
$LN851@Attack:
  0284f	0f 57 c9	 xorps	 xmm1, xmm1
$LN420@Attack:

; 1875 : 						}
; 1876 : 					}
; 1877 : 
; 1878 : 					if( iSkillBrandValue1 > 0.0f )

  02852	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillBrandValue1$9[ebp]
  0285a	0f 2f c1	 comiss	 xmm0, xmm1
  0285d	0f 86 27 0b 00
	00		 jbe	 $LN10@Attack

; 1879 : 					{
; 1880 : 						float fPercent = rand()%100;

  02863	e8 00 00 00 00	 call	 _rand

; 1881 : 
; 1882 : 						if( fPercent < iSkillBrandValue1 )

  02868	f3 0f 10 8d e4
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillBrandValue1$9[ebp]

; 1883 : 						{
; 1884 : 							int Damage = Strength/10;
; 1885 : 							lpTargetObj->lpAttackObj = lpObj;
; 1886 : 							gObjAddBuffEffect(lpTargetObj,BUFF_BLEEDING,ADD_OPTION_REDUCE_HP,Damage,0,0,10);
; 1887 : 						}
; 1888 : 					}
; 1889 : 					break;

  02870	e9 fb fe ff ff	 jmp	 $LN971@Attack
$LN427@Attack:

; 1890 : 				case AT_MSKILL_DK_RAGEFULBLOW1:
; 1891 : 				case AT_MSKILL_DK_RAGEFULBLOW2:
; 1892 : 					AttackDamage = ( AttackDamage * ( 200 + ( Energy / 10 ) ) ) / 100;
; 1893 : 					break;
; 1894 : 				case AT_MSKILL_MG_FIRESLASH1:
; 1895 : 				case AT_MSKILL_MG_FIRESLASH2:
; 1896 : 				case AT_MSKILL_MG_FLAMESTRIKE1:
; 1897 : 				case AT_MSKILL_MG_FLAMESTRIKE2:
; 1898 : 					AttackDamage *= 2;
; 1899 : 					break;
; 1900 : 				case AT_MSKILL_MG_POWERSLASH1:
; 1901 : 					AttackDamage *= 2;
; 1902 : 					break;
; 1903 : 				case AT_MSKILL_DL_FIRESCREAM1:
; 1904 : 				case AT_MSKILL_DL_FIRESCREAM2:
; 1905 : 					AttackDamage = ( AttackDamage * ( ( ( lpObj->Energy + lpObj->AddEnergy ) / 20 + 200 ) ) ) / 100;
; 1906 : 					break;
; 1907 : 				case AT_MSKILL_SUM_SLEEP1:
; 1908 : 					{
; 1909 : 						int skillSuccessRate = 0;
; 1910 : 
; 1911 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  02875	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  02878	33 f6		 xor	 esi, esi
  0287a	3c 02		 cmp	 al, 2
  0287c	75 2f		 jne	 SHORT $LN428@Attack

; 1912 : 						{
; 1913 : 							skillSuccessRate = 20 + lpObj->Energy/30 + lpObj->m_CurseDamageBook/6;

  0287e	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02885	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  0288a	f7 e9		 imul	 ecx
  0288c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02891	03 d1		 add	 edx, ecx
  02893	c1 fa 04	 sar	 edx, 4
  02896	8b f2		 mov	 esi, edx
  02898	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0289b	03 f2		 add	 esi, edx
  0289d	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  028a3	8b c2		 mov	 eax, edx
  028a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  028a8	83 c0 14	 add	 eax, 20			; 00000014H
  028ab	eb 31		 jmp	 SHORT $LN919@Attack
$LN428@Attack:

; 1914 : 						}
; 1915 : 						else if( lpTargetObj->Type == OBJ_USER )

  028ad	3c 01		 cmp	 al, 1
  028af	75 31		 jne	 SHORT $LN430@Attack

; 1916 : 						{
; 1917 : 							skillSuccessRate = 15 + lpObj->Energy/37 + lpObj->m_CurseDamageBook/6;

  028b1	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  028b8	b8 a7 c8 67 dd	 mov	 eax, -580400985		; dd67c8a7H
  028bd	f7 e9		 imul	 ecx
  028bf	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  028c4	03 d1		 add	 edx, ecx
  028c6	c1 fa 05	 sar	 edx, 5
  028c9	8b f2		 mov	 esi, edx
  028cb	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  028ce	03 f2		 add	 esi, edx
  028d0	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  028d6	8b c2		 mov	 eax, edx
  028d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  028db	83 c0 0f	 add	 eax, 15			; 0000000fH
$LN919@Attack:
  028de	03 f2		 add	 esi, edx
  028e0	03 f0		 add	 esi, eax
$LN430@Attack:

; 1918 : 						}
; 1919 : 
; 1920 : 						skillSuccessRate += iSkillValue;
; 1921 : 
; 1922 : 						if( skillSuccessRate < rand()%100 )

  028e2	e8 00 00 00 00	 call	 _rand
  028e7	99		 cdq
  028e8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  028ed	f7 f9		 idiv	 ecx
  028ef	66 0f 6e c6	 movd	 xmm0, esi
  028f3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  028f6	f3 0f 58 85 d0
	fe ff ff	 addss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  028fe	f3 0f 2c c0	 cvttss2si eax, xmm0
  02902	3b c2		 cmp	 eax, edx
$LN981@Attack:
  02904	0f 8c 24 0a 00
	00		 jl	 $LN502@Attack

; 1923 : 						{
; 1924 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1925 : 							return 0;
; 1926 : 						}
; 1927 : 
; 1928 : 						int nEffectTime = 0;
; 1929 : 						
; 1930 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  0290a	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02910	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02915	ff 70 08	 push	 DWORD PTR [eax+8]
  02918	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  0291d	8b f0		 mov	 esi, eax
  0291f	89 b5 bc fe ff
	ff		 mov	 DWORD PTR _lpInfo$1$[ebp], esi

; 1931 : 
; 1932 : 						if( !lpInfo )

  02925	85 f6		 test	 esi, esi
  02927	0f 84 28 13 00
	00		 je	 $LN956@Attack

; 1933 : 						{
; 1934 : 							return 0;
; 1935 : 						}
; 1936 : 
; 1937 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  0292d	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  02930	3c 02		 cmp	 al, 2
  02932	75 4c		 jne	 SHORT $LN433@Attack

; 1938 : 						{
; 1939 : 							nEffectTime = (lpInfo->m_Arg4 + lpObj->Energy /lpInfo->m_Arg5) - lpTargetObj->Level / 20;

  02934	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  0293b	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  02942	66 0f 6e c8	 movd	 xmm1, eax
  02946	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0294b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0294e	f7 e9		 imul	 ecx
  02950	f3 0f 5e 4e 14	 divss	 xmm1, DWORD PTR [esi+20]
  02955	c1 fa 03	 sar	 edx, 3
  02958	8b c2		 mov	 eax, edx
  0295a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0295d	03 c2		 add	 eax, edx
  0295f	66 0f 6e c0	 movd	 xmm0, eax
  02963	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]

; 1940 : 
; 1941 : 							if( nEffectTime > lpInfo->m_Arg6 )

  02968	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  0296e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02971	f3 0f 5c c8	 subss	 xmm1, xmm0
  02975	f3 0f 2c f1	 cvttss2si esi, xmm1
  02979	f3 0f 10 48 18	 movss	 xmm1, DWORD PTR [eax+24]

; 1942 : 							{
; 1943 : 								nEffectTime = lpInfo->m_Arg6;
; 1944 : 							}
; 1945 : 						}

  0297e	eb 5b		 jmp	 SHORT $LN921@Attack
$LN433@Attack:

; 1946 : 						else if( lpTargetObj->Type == OBJ_USER )

  02980	3c 01		 cmp	 al, 1
  02982	0f 85 a6 09 00
	00		 jne	 $LN502@Attack

; 1947 : 						{
; 1948 : 							nEffectTime = lpInfo->m_Arg1 + ((lpObj->Energy /lpInfo->m_Arg2) + (lpObj->Level - lpTargetObj->Level) / 100);

  02988	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  0298f	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  02996	2b c8		 sub	 ecx, eax
  02998	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0299d	f7 e9		 imul	 ecx
  0299f	c1 fa 05	 sar	 edx, 5
  029a2	8b c2		 mov	 eax, edx
  029a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  029a7	03 c2		 add	 eax, edx
  029a9	66 0f 6e c8	 movd	 xmm1, eax
  029ad	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]
  029b4	0f 5b c9	 cvtdq2ps xmm1, xmm1
  029b7	66 0f 6e c0	 movd	 xmm0, eax
  029bb	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 1949 : 
; 1950 : 							if( nEffectTime > lpInfo->m_Arg3 )

  029be	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR _lpInfo$1$[ebp]
  029c4	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  029c9	f3 0f 58 c8	 addss	 xmm1, xmm0
  029cd	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  029d2	f3 0f 2c f1	 cvttss2si esi, xmm1
  029d6	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
$LN921@Attack:
  029db	66 0f 6e c6	 movd	 xmm0, esi
  029df	0f 5b c0	 cvtdq2ps xmm0, xmm0
  029e2	0f 2f c1	 comiss	 xmm0, xmm1
  029e5	76 04		 jbe	 SHORT $LN437@Attack

; 1951 : 							{
; 1952 : 								nEffectTime = lpInfo->m_Arg3;

  029e7	f3 0f 2c f1	 cvttss2si esi, xmm1
$LN437@Attack:

; 1953 : 							}
; 1954 : 						}
; 1955 : 
; 1956 : 						if( nEffectTime < 1 )

  029eb	83 fe 01	 cmp	 esi, 1
  029ee	0f 8c 3a 09 00
	00		 jl	 $LN502@Attack

; 1957 : 						{
; 1958 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 1959 : 							return FALSE;
; 1960 : 						}
; 1961 : 
; 1962 : 						if( gObjCheckPowerfulEffect(lpTargetObj,BUFF_SLEEP,nEffectTime,0) == TRUE )

  029f4	6a 00		 push	 0
  029f6	56		 push	 esi
  029f7	6a 48		 push	 72			; 00000048H
  029f9	57		 push	 edi
  029fa	e8 00 00 00 00	 call	 ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
  029ff	83 c4 10	 add	 esp, 16			; 00000010H
  02a02	3c 01		 cmp	 al, 1
  02a04	0f 85 32 f2 ff
	ff		 jne	 $LN325@Attack

; 1963 : 						{
; 1964 : 							GCMagicAttackNumberSend(lpObj,AT_SKILL_SLEEP,lpTargetObj->m_Index,0);

  02a0a	6a 00		 push	 0
  02a0c	ff 37		 push	 DWORD PTR [edi]
  02a0e	68 db 00 00 00	 push	 219			; 000000dbH

; 2329 : 							{
; 2330 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);

  02a13	53		 push	 ebx
  02a14	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  02a19	83 c4 10	 add	 esp, 16			; 00000010H

; 2331 : 								return FALSE;

  02a1c	33 c0		 xor	 eax, eax
  02a1e	5e		 pop	 esi
  02a1f	5f		 pop	 edi
  02a20	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  02a21	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02a24	33 cd		 xor	 ecx, ebp
  02a26	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02a2b	8b e5		 mov	 esp, ebp
  02a2d	5d		 pop	 ebp
  02a2e	c2 24 00	 ret	 36			; 00000024H
$LN440@Attack:

; 1965 : 							return FALSE;
; 1966 : 						}
; 1967 : 
; 1968 : 						gObjAddBuffEffect(lpTargetObj,BUFF_SLEEP,ADD_OPTION_SLEEPTIME,nEffectTime,0,0,nEffectTime);
; 1969 : 						return TRUE;
; 1970 : 					}
; 1971 : 					break;
; 1972 : 				case AT_MSKILL_SUM_CHAINLIGHTNING1:
; 1973 : 					switch( bCombo )

  02a31	8b 45 20	 mov	 eax, DWORD PTR _bCombo$[ebp]
  02a34	83 e8 01	 sub	 eax, 1
  02a37	74 2c		 je	 SHORT $LN441@Attack
  02a39	83 e8 01	 sub	 eax, 1
  02a3c	74 0f		 je	 SHORT $LN442@Attack
  02a3e	83 e8 01	 sub	 eax, 1
  02a41	0f 85 0e 12 00
	00		 jne	 $LN956@Attack

; 1979 : 						break;
; 1980 : 					case 3:
; 1981 : 						AttackDamage = AttackDamage * 50 / 100;

  02a47	6b 4d 1c 32	 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 50

; 1982 : 						break;

  02a4b	eb 04		 jmp	 SHORT $LN922@Attack
$LN442@Attack:

; 1974 : 					{
; 1975 : 					case 1:
; 1976 : 						break;
; 1977 : 					case 2:
; 1978 : 						AttackDamage = AttackDamage * 70 / 100;

  02a4d	6b 4d 1c 46	 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 70
$LN922@Attack:
  02a51	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02a56	f7 e9		 imul	 ecx
  02a58	c1 fa 05	 sar	 edx, 5
  02a5b	8b c2		 mov	 eax, edx
  02a5d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02a60	03 c2		 add	 eax, edx
  02a62	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN441@Attack:

; 1983 : 					default:
; 1984 : 						return FALSE;
; 1985 : 					}
; 1986 : 
; 1987 : 					bCombo = FALSE;

  02a65	c7 45 20 00 00
	00 00		 mov	 DWORD PTR _bCombo$[ebp], 0

; 1988 : 					break;

  02a6c	e9 19 09 00 00	 jmp	 $LN10@Attack
$LN445@Attack:

; 1989 : 				case AT_MSKILL_SUM_LIGHTNSHOCK1:
; 1990 : 					gObjAddBuffEffect(lpTargetObj,BUFF_LIGHTNINGSHOCK,0,0,0,0,1);

  02a71	6a 01		 push	 1
  02a73	6a 00		 push	 0
  02a75	6a 00		 push	 0
  02a77	6a 00		 push	 0
  02a79	6a 00		 push	 0
  02a7b	6a 55		 push	 85			; 00000055H
  02a7d	57		 push	 edi
  02a7e	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  02a83	83 c4 1c	 add	 esp, 28			; 0000001cH
  02a86	e9 ff 08 00 00	 jmp	 $LN10@Attack
$LN446@Attack:

; 1991 : 					break;
; 1992 : 				case AT_MSKILL_SUM_DRAINLIFE1:
; 1993 : 					{
; 1994 : 						int nAddHP = 0;
; 1995 : 
; 1996 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  02a8b	8a 4f 50	 mov	 cl, BYTE PTR [edi+80]
  02a8e	33 c0		 xor	 eax, eax
  02a90	80 f9 02	 cmp	 cl, 2
  02a93	75 41		 jne	 SHORT $LN447@Attack

; 1997 : 						{
; 1998 : 							nAddHP = (int)(float(lpObj->Energy / 15) + float(lpTargetObj->Level / 2.5f));
; 1999 : 							nAddHP += iSkillValue;

  02a95	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  02a9c	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02aa3	66 0f 6e c8	 movd	 xmm1, eax
  02aa7	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  02aac	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02aaf	f7 e9		 imul	 ecx
  02ab1	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40200000
  02ab9	03 d1		 add	 edx, ecx
  02abb	c1 fa 03	 sar	 edx, 3
  02abe	8b c2		 mov	 eax, edx
  02ac0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02ac3	03 c2		 add	 eax, edx
  02ac5	66 0f 6e c0	 movd	 xmm0, eax
  02ac9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02acc	f3 0f 58 c8	 addss	 xmm1, xmm0
  02ad0	f3 0f 2c c1	 cvttss2si eax, xmm1
  02ad4	eb 40		 jmp	 SHORT $LN923@Attack
$LN447@Attack:

; 2000 : 						}
; 2001 : 						else if( lpTargetObj->Type == OBJ_USER )

  02ad6	80 f9 01	 cmp	 cl, 1
  02ad9	75 4e		 jne	 SHORT $LN449@Attack

; 2002 : 						{
; 2003 : 							nAddHP = AttackDamage * 10 / 100 + lpObj->Energy / 23;

  02adb	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02ae2	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  02ae7	f7 e9		 imul	 ecx
  02ae9	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  02aec	03 d1		 add	 edx, ecx
  02aee	c1 fa 04	 sar	 edx, 4
  02af1	8b f2		 mov	 esi, edx
  02af3	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  02af6	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  02af9	03 f2		 add	 esi, edx
  02afb	03 c9		 add	 ecx, ecx
  02afd	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02b02	f7 e9		 imul	 ecx
  02b04	c1 fa 05	 sar	 edx, 5
  02b07	8b c2		 mov	 eax, edx
  02b09	03 f2		 add	 esi, edx
  02b0b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02b0e	03 c6		 add	 eax, esi
  02b10	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
$LN923@Attack:

; 2004 : 							nAddHP += iSkillValue;

  02b16	66 0f 6e c0	 movd	 xmm0, eax
  02b1a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02b1d	f3 0f 58 85 d0
	fe ff ff	 addss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02b25	f3 0f 2c c0	 cvttss2si eax, xmm0
$LN449@Attack:

; 2005 : 						}
; 2006 : 	
; 2007 : 						int tmpLife = (int)(lpObj->Life + nAddHP);

  02b29	66 0f 6e c0	 movd	 xmm0, eax
  02b2d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02b30	f3 0f 58 83 d8
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+216]
  02b38	f3 0f 2c c0	 cvttss2si eax, xmm0
  02b3c	66 0f 6e 83 24
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+292]

; 2008 : 	
; 2009 : 						if( tmpLife > lpObj->MaxLife + lpObj->AddLife )

  02b44	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02b47	66 0f 6e c8	 movd	 xmm1, eax
  02b4b	f3 0f 58 83 dc
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+220]
  02b53	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02b56	0f 2f c8	 comiss	 xmm1, xmm0
  02b59	76 0a		 jbe	 SHORT $LN450@Attack

; 2010 : 						{
; 2011 : 							lpObj->Life = lpObj->MaxLife + lpObj->AddLife;

  02b5b	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0

; 2012 : 						}
; 2013 : 						else	

  02b63	eb 08		 jmp	 SHORT $LN451@Attack
$LN450@Attack:

; 2014 : 						{
; 2015 : 							lpObj->Life = (float)tmpLife;

  02b65	f3 0f 11 8b d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm1
$LN451@Attack:

; 2016 : 						}
; 2017 : 	
; 2018 : 						GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life,0xFF,0,lpObj->iShield);

  02b6d	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  02b74	50		 push	 eax
  02b75	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  02b7d	6a 00		 push	 0
  02b7f	68 ff 00 00 00	 push	 255			; 000000ffH
  02b84	0f b7 c0	 movzx	 eax, ax
  02b87	50		 push	 eax
  02b88	ff 33		 push	 DWORD PTR [ebx]
  02b8a	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend
  02b8f	83 c4 14	 add	 esp, 20			; 00000014H

; 2019 : 					}
; 2020 : 					break;

  02b92	e9 f3 07 00 00	 jmp	 $LN10@Attack
$LN452@Attack:

; 2021 : 				case AT_MSKILL_SUM_DRAINLIFE2:
; 2022 : 					{
; 2023 : 						int nAddHP = 0;
; 2024 : 
; 2025 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  02b97	8a 4f 50	 mov	 cl, BYTE PTR [edi+80]
  02b9a	33 c0		 xor	 eax, eax
  02b9c	80 f9 02	 cmp	 cl, 2
  02b9f	75 41		 jne	 SHORT $LN453@Attack

; 2026 : 						{
; 2027 : 							nAddHP = (int)(float(lpObj->Energy / 15) + float(lpTargetObj->Level / 2.5f));
; 2028 : 							nAddHP += iSkillBrandValue1;

  02ba1	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  02ba8	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02baf	66 0f 6e c8	 movd	 xmm1, eax
  02bb3	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  02bb8	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02bbb	f7 e9		 imul	 ecx
  02bbd	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40200000
  02bc5	03 d1		 add	 edx, ecx
  02bc7	c1 fa 03	 sar	 edx, 3
  02bca	8b c2		 mov	 eax, edx
  02bcc	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02bcf	03 c2		 add	 eax, edx
  02bd1	66 0f 6e c0	 movd	 xmm0, eax
  02bd5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02bd8	f3 0f 58 c8	 addss	 xmm1, xmm0
  02bdc	f3 0f 2c c1	 cvttss2si eax, xmm1
  02be0	eb 40		 jmp	 SHORT $LN924@Attack
$LN453@Attack:

; 2029 : 						}
; 2030 : 						else if( lpTargetObj->Type == OBJ_USER )

  02be2	80 f9 01	 cmp	 cl, 1
  02be5	75 4e		 jne	 SHORT $LN455@Attack

; 2031 : 						{
; 2032 : 							nAddHP = AttackDamage * 10 / 100 + lpObj->Energy / 23;

  02be7	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02bee	b8 c9 42 16 b2	 mov	 eax, -1307163959	; b21642c9H
  02bf3	f7 e9		 imul	 ecx
  02bf5	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  02bf8	03 d1		 add	 edx, ecx
  02bfa	c1 fa 04	 sar	 edx, 4
  02bfd	8b f2		 mov	 esi, edx
  02bff	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  02c02	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  02c05	03 f2		 add	 esi, edx
  02c07	03 c9		 add	 ecx, ecx
  02c09	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02c0e	f7 e9		 imul	 ecx
  02c10	c1 fa 05	 sar	 edx, 5
  02c13	8b c2		 mov	 eax, edx
  02c15	03 f2		 add	 esi, edx
  02c17	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02c1a	03 c6		 add	 eax, esi
  02c1c	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
$LN924@Attack:

; 2033 : 							nAddHP += iSkillBrandValue1;

  02c22	66 0f 6e c0	 movd	 xmm0, eax
  02c26	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02c29	f3 0f 58 85 e4
	fe ff ff	 addss	 xmm0, DWORD PTR _iSkillBrandValue1$9[ebp]
  02c31	f3 0f 2c c0	 cvttss2si eax, xmm0
$LN455@Attack:

; 2034 : 						}
; 2035 : 	
; 2036 : 						int tmpLife = (int)(lpObj->Life + nAddHP);

  02c35	66 0f 6e c0	 movd	 xmm0, eax
  02c39	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02c3c	f3 0f 58 83 d8
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+216]
  02c44	f3 0f 2c c0	 cvttss2si eax, xmm0
  02c48	66 0f 6e 83 24
	01 00 00	 movd	 xmm0, DWORD PTR [ebx+292]

; 2037 : 	
; 2038 : 						if( tmpLife > lpObj->MaxLife + lpObj->AddLife )

  02c50	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02c53	66 0f 6e c8	 movd	 xmm1, eax
  02c57	f3 0f 58 83 dc
	00 00 00	 addss	 xmm0, DWORD PTR [ebx+220]
  02c5f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02c62	0f 2f c8	 comiss	 xmm1, xmm0
  02c65	76 0a		 jbe	 SHORT $LN456@Attack

; 2039 : 						{
; 2040 : 							lpObj->Life = lpObj->MaxLife + lpObj->AddLife;

  02c67	f3 0f 11 83 d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm0

; 2041 : 						}
; 2042 : 						else	

  02c6f	eb 08		 jmp	 SHORT $LN457@Attack
$LN456@Attack:

; 2043 : 						{
; 2044 : 							lpObj->Life = (float)tmpLife;

  02c71	f3 0f 11 8b d8
	00 00 00	 movss	 DWORD PTR [ebx+216], xmm1
$LN457@Attack:

; 2045 : 						}
; 2046 : 	
; 2047 : 						GCReFillSend(lpObj->m_Index,(WORD)lpObj->Life,0xFF,0,lpObj->iShield);

  02c79	0f b7 83 2c 01
	00 00		 movzx	 eax, WORD PTR [ebx+300]
  02c80	50		 push	 eax
  02c81	f3 0f 2c 83 d8
	00 00 00	 cvttss2si eax, DWORD PTR [ebx+216]
  02c89	6a 00		 push	 0
  02c8b	68 ff 00 00 00	 push	 255			; 000000ffH
  02c90	0f b7 c0	 movzx	 eax, ax
  02c93	50		 push	 eax
  02c94	ff 33		 push	 DWORD PTR [ebx]
  02c96	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 2048 : 
; 2049 : 						if( iSkillValue > 0.0f )

  02c9b	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02ca3	83 c4 14	 add	 esp, 20			; 00000014H
  02ca6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  02cad	0f 86 d7 06 00
	00		 jbe	 $LN10@Attack

; 2050 : 						{
; 2051 : 							float fpercent = rand()%100;

  02cb3	e8 00 00 00 00	 call	 _rand
  02cb8	99		 cdq
  02cb9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02cbe	f7 f9		 idiv	 ecx

; 2052 : 
; 2053 : 							if( fpercent < 30 )

  02cc0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  02cc8	66 0f 6e ca	 movd	 xmm1, edx
  02ccc	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02ccf	0f 2f c1	 comiss	 xmm0, xmm1
  02cd2	0f 86 b2 06 00
	00		 jbe	 $LN10@Attack

; 2054 : 							{
; 2055 : 								lpTargetObj->lpAttackObj = lpObj;
; 2056 : 								gObjAddBuffEffect(lpTargetObj,BUFF_VAMPIRIC,BUFF_ABSORB_EFFECT,iSkillValue,0,0,5);

  02cd8	f3 0f 2c 85 d0
	fe ff ff	 cvttss2si eax, DWORD PTR _iSkillValue$7[ebp]
  02ce0	6a 05		 push	 5
  02ce2	6a 00		 push	 0
  02ce4	6a 00		 push	 0
  02ce6	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  02cec	50		 push	 eax
  02ced	6a 68		 push	 104			; 00000068H
  02cef	68 91 00 00 00	 push	 145			; 00000091H
  02cf4	57		 push	 edi
  02cf5	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  02cfa	83 c4 1c	 add	 esp, 28			; 0000001cH
  02cfd	e9 88 06 00 00	 jmp	 $LN10@Attack
$LN460@Attack:

; 2057 : 							}
; 2058 : 						}
; 2059 : 					}
; 2060 : 					break;
; 2061 : 				case AT_MSKILL_RF_KILLBLOW1:
; 2062 : 				case AT_MSKILL_RF_KILLBLOW2:
; 2063 : 				case AT_MSKILL_RF_UPERCUT1:
; 2064 : 				case AT_MSKILL_RF_UPERCUT2:
; 2065 : 				case AT_MSKILL_RF_CHAINDRIVE1:
; 2066 : 				case AT_MSKILL_RF_CHAINDRIVE2:
; 2067 : 					{
; 2068 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02d02	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02d08	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02d0d	ff 70 08	 push	 DWORD PTR [eax+8]
  02d10	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 2069 : 
; 2070 : 						if( !lpInfo )

  02d15	85 c0		 test	 eax, eax
  02d17	0f 84 38 0f 00
	00		 je	 $LN956@Attack
  02d1d	66 0f 6e 8d a0
	fe ff ff	 movd	 xmm1, DWORD PTR _Vitality$1$[ebp]
$LN931@Attack:
  02d25	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 2071 : 						{
; 2072 : 							return 0;
; 2073 : 						}
; 2074 : 						
; 2075 : 						AttackDamage = AttackDamage * (lpInfo->m_Arg1 + (Vitality / lpInfo->m_Arg2)) / 100.0f;

  02d2a	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02d2d	0f 5b c0	 cvtdq2ps xmm0, xmm0
$LN973@Attack:
  02d30	f3 0f 5e 48 08	 divss	 xmm1, DWORD PTR [eax+8]
  02d35	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
$LN932@Attack:
  02d3a	f3 0f 59 c8	 mulss	 xmm1, xmm0
  02d3e	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  02d46	f3 0f 2c c1	 cvttss2si eax, xmm1

; 2076 : 					}
; 2077 : 					break;

  02d4a	e9 38 06 00 00	 jmp	 $LN917@Attack
$LN462@Attack:

; 2078 : 				case AT_MSKILL_RF_DARKSIDE1:
; 2079 : 				case AT_MSKILL_RF_DARKSIDE2:
; 2080 : 					{
; 2081 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02d4f	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02d55	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02d5a	ff 70 08	 push	 DWORD PTR [eax+8]
  02d5d	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 2082 : 
; 2083 : 						if( !lpInfo )

  02d62	85 c0		 test	 eax, eax
  02d64	0f 84 eb 0e 00
	00		 je	 $LN956@Attack

; 2084 : 						{
; 2085 : 							return 0;
; 2086 : 						}
; 2087 : 						
; 2088 : 						AttackDamage = (AttackDamage)*(lpInfo->m_Arg1 + (Dexterity/lpInfo->m_Arg2) + (Energy/lpInfo->m_Arg3))/100.0f;

  02d6a	66 0f 6e 8d 8c
	fe ff ff	 movd	 xmm1, DWORD PTR _Dexterity$1$[ebp]
  02d72	66 0f 6e 85 d4
	fe ff ff	 movd	 xmm0, DWORD PTR _Energy$1$[ebp]
  02d7a	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02d7d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02d80	f3 0f 5e 48 08	 divss	 xmm1, DWORD PTR [eax+8]
  02d85	f3 0f 5e 40 0c	 divss	 xmm0, DWORD PTR [eax+12]
  02d8a	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]
  02d8f	f3 0f 58 c8	 addss	 xmm1, xmm0
  02d93	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  02d98	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2089 : 					}
; 2090 : 					break;

  02d9b	eb 9d		 jmp	 SHORT $LN932@Attack
$LN464@Attack:

; 2091 : 				case AT_MSKILL_RF_DRAGONRORE1:
; 2092 : 				case AT_MSKILL_RF_DRAGONRORE2:
; 2093 : 					{
; 2094 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02d9d	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02da3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02da8	ff 70 08	 push	 DWORD PTR [eax+8]
  02dab	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 2095 : 
; 2096 : 						if( !lpInfo )

  02db0	85 c0		 test	 eax, eax
  02db2	0f 84 9d 0e 00
	00		 je	 $LN956@Attack
$LN465@Attack:
  02db8	66 0f 6e 8d d4
	fe ff ff	 movd	 xmm1, DWORD PTR _Energy$1$[ebp]

; 2097 : 						{
; 2098 : 							return 0;
; 2099 : 						}
; 2100 : 
; 2101 : 						AttackDamage = (AttackDamage)*(lpInfo->m_Arg1 + (Energy/lpInfo->m_Arg2))/100.0f;
; 2102 : 					}
; 2103 : 					break;

  02dc0	e9 60 ff ff ff	 jmp	 $LN931@Attack
$LN466@Attack:

; 2104 : 				case AT_MSKILL_RF_DRAGONSLASH1:
; 2105 : 				case AT_MSKILL_RF_DRAGONSLASH2:
; 2106 : 					{
; 2107 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02dc5	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02dcb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02dd0	ff 70 08	 push	 DWORD PTR [eax+8]
  02dd3	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 2108 : 
; 2109 : 						if( !lpInfo )

  02dd8	85 c0		 test	 eax, eax
  02dda	0f 84 75 0e 00
	00		 je	 $LN956@Attack

; 2110 : 						{
; 2111 : 							return 0;
; 2112 : 						}
; 2113 : 
; 2114 : 						if( lpTargetObj->Type == OBJ_USER )

  02de0	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  02de4	66 0f 6e 8d d4
	fe ff ff	 movd	 xmm1, DWORD PTR _Energy$1$[ebp]
  02dec	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 2115 : 						{
; 2116 : 							AttackDamage = AttackDamage * (lpInfo->m_Arg1 + (Energy/lpInfo->m_Arg2)) / 100.0f;

  02df1	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02df4	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02df7	0f 84 33 ff ff
	ff		 je	 $LN973@Attack

; 2117 : 						}
; 2118 : 						else
; 2119 : 						{
; 2120 : 							AttackDamage = ((AttackDamage * (lpInfo->m_Arg3 + (Energy/lpInfo->m_Arg4)) / 100.0f) + 100.0f)*lpInfo->m_Arg5;

  02dfd	f3 0f 5e 48 10	 divss	 xmm1, DWORD PTR [eax+16]
  02e02	f3 0f 58 48 0c	 addss	 xmm1, DWORD PTR [eax+12]
  02e07	f3 0f 59 c8	 mulss	 xmm1, xmm0
  02e0b	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  02e13	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@42c80000
  02e1b	f3 0f 59 48 14	 mulss	 xmm1, DWORD PTR [eax+20]
  02e20	f3 0f 2c c1	 cvttss2si eax, xmm1
  02e24	e9 5e 05 00 00	 jmp	 $LN917@Attack
$LN470@Attack:

; 2121 : 						}
; 2122 : 					}
; 2123 : 					break;
; 2124 : 				case AT_MSKILL_DK_BLOODSTORM:
; 2125 : 				case AT_MSKILL_DK_BLOODSTORM1:
; 2126 : 					{
; 2127 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02e29	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02e2f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02e34	ff 70 08	 push	 DWORD PTR [eax+8]
  02e37	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 2128 : 
; 2129 : 						if( !lpInfo )

  02e3c	85 c0		 test	 eax, eax
  02e3e	0f 85 74 ff ff
	ff		 jne	 $LN465@Attack
  02e44	5e		 pop	 esi
  02e45	5f		 pop	 edi
  02e46	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  02e47	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02e4a	33 cd		 xor	 ecx, ebp
  02e4c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02e51	8b e5		 mov	 esp, ebp
  02e53	5d		 pop	 ebp
  02e54	c2 24 00	 ret	 36			; 00000024H
$LN475@Attack:

; 2130 : 						{
; 2131 : 							return 0;
; 2132 : 						}
; 2133 : 
; 2134 : 						AttackDamage = ( AttackDamage * ( lpInfo->m_Arg1 + ( Energy / lpInfo->m_Arg2 ) ) ) / 100.0f;
; 2135 : 					}
; 2136 : 					break;
; 2137 : 				case AT_MSKILL_DW_METEORIT2:
; 2138 : 					if( iSkillValue > 0.0f )
; 2139 : 					{
; 2140 : 						float fPercent = rand()%100;
; 2141 : 
; 2142 : 						if( fPercent < iSkillValue )
; 2143 : 						{
; 2144 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,2);
; 2145 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 2146 : 						}
; 2147 : 					}
; 2148 : 					break;
; 2149 : 				case AT_MSKILL_DW_ICESTORM2:
; 2150 : 					if( iSkillValue > 0.0f )

  02e57	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02e5f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  02e66	0f 86 1e 05 00
	00		 jbe	 $LN10@Attack

; 2151 : 					{
; 2152 : 						float fPercent = rand()%100;

  02e6c	e8 00 00 00 00	 call	 _rand
  02e71	99		 cdq
  02e72	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02e77	f7 f9		 idiv	 ecx

; 2153 : 						
; 2154 : 						if( fPercent < iSkillValue )

  02e79	f3 0f 10 8d d0
	fe ff ff	 movss	 xmm1, DWORD PTR _iSkillValue$7[ebp]
  02e81	66 0f 6e c2	 movd	 xmm0, edx
  02e85	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02e88	0f 2f c8	 comiss	 xmm1, xmm0
  02e8b	0f 86 f9 04 00
	00		 jbe	 $LN10@Attack

; 2155 : 						{
; 2156 : 							gObjAddBuffEffect(lpTargetObj,BUFF_FREEZE,0,0,0,0,3);

  02e91	6a 03		 push	 3
  02e93	6a 00		 push	 0
  02e95	6a 00		 push	 0
  02e97	6a 00		 push	 0
  02e99	6a 00		 push	 0
  02e9b	68 92 00 00 00	 push	 146			; 00000092H
  02ea0	57		 push	 edi
  02ea1	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  02ea6	e9 7d f5 ff ff	 jmp	 $LN934@Attack
$LN479@Attack:

; 2157 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 2158 : 						}
; 2159 : 					}
; 2160 : 					break;
; 2161 : 				case AT_MSKILL_FE_POISONARROW:
; 2162 : 				case AT_MSKILL_FE_POISONARROW1:
; 2163 : 					AttackDamage *= 2;
; 2164 : 					break;
; 2165 : 				case AT_MSKILL_MG_ICE2:
; 2166 : 					{
; 2167 : 						float fPercent = rand()%100;

  02eab	e8 00 00 00 00	 call	 _rand
  02eb0	99		 cdq
  02eb1	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02eb6	f7 f9		 idiv	 ecx

; 2168 : 	
; 2169 : 						if( fPercent < iSkillValue )

  02eb8	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _iSkillValue$7[ebp]
  02ec0	66 0f 6e ca	 movd	 xmm1, edx
  02ec4	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02ec7	0f 2f c1	 comiss	 xmm0, xmm1

; 2170 : 						{
; 2171 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,3);
; 2172 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);
; 2173 : 						}
; 2174 : 					}
; 2175 : 					break;

  02eca	e9 c4 f6 ff ff	 jmp	 $LN969@Attack
$LN481@Attack:

; 2176 : 					case AT_MSKILL_SUM_INNOVATION1:
; 2177 : 					{
; 2178 : 						int Rate = 0;
; 2179 : 
; 2180 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  02ecf	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  02ed2	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Rate$1$[ebp], 0
  02edc	3c 02		 cmp	 al, 2
  02ede	75 2d		 jne	 SHORT $LN482@Attack

; 2181 : 						{
; 2182 : 							Rate = 32 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  02ee0	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02ee7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02eec	f7 e9		 imul	 ecx
  02eee	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02ef3	c1 fa 04	 sar	 edx, 4
  02ef6	8b ca		 mov	 ecx, edx
  02ef8	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02efb	03 ca		 add	 ecx, edx
  02efd	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  02f03	8b c2		 mov	 eax, edx
  02f05	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02f08	83 c0 20	 add	 eax, 32			; 00000020H
  02f0b	eb 2f		 jmp	 SHORT $LN925@Attack
$LN482@Attack:

; 2183 : 						}
; 2184 : 						else if( lpTargetObj->Type == OBJ_USER )

  02f0d	3c 01		 cmp	 al, 1
  02f0f	75 35		 jne	 SHORT $LN484@Attack

; 2185 : 						{
; 2186 : 							Rate = 17 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  02f11	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  02f18	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  02f1d	f7 e9		 imul	 ecx
  02f1f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  02f24	c1 fa 04	 sar	 edx, 4
  02f27	8b ca		 mov	 ecx, edx
  02f29	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  02f2c	03 ca		 add	 ecx, edx
  02f2e	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  02f34	8b c2		 mov	 eax, edx
  02f36	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02f39	83 c0 11	 add	 eax, 17			; 00000011H
$LN925@Attack:
  02f3c	03 ca		 add	 ecx, edx
  02f3e	03 c1		 add	 eax, ecx
  02f40	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _Rate$1$[ebp], eax
$LN484@Attack:

; 2187 : 						}
; 2188 : 
; 2189 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  02f46	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  02f4c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  02f51	ff 70 08	 push	 DWORD PTR [eax+8]
  02f54	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  02f59	8b f0		 mov	 esi, eax

; 2190 : 
; 2191 : 						if( !lpInfo )

  02f5b	85 f6		 test	 esi, esi
  02f5d	0f 84 f2 0c 00
	00		 je	 $LN956@Attack

; 2192 : 						{
; 2193 : 							return 0;
; 2194 : 						}
; 2195 : 
; 2196 : 						if( Rate >= rand()%100 )

  02f63	e8 00 00 00 00	 call	 _rand
  02f68	99		 cdq
  02f69	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  02f6e	f7 f9		 idiv	 ecx
  02f70	39 95 d8 fe ff
	ff		 cmp	 DWORD PTR _Rate$1$[ebp], edx
  02f76	0f 8c b2 03 00
	00		 jl	 $LN502@Attack

; 2197 : 						{
; 2198 : 							int DecValue = 0;
; 2199 : 							int DecTime = 0;
; 2200 : 
; 2201 : 							if( lpTargetObj->Type == OBJ_MONSTER )

  02f7c	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  02f7f	3c 02		 cmp	 al, 2
  02f81	0f 85 8b 00 00
	00		 jne	 $LN488@Attack

; 2202 : 							{
; 2203 : 								int MaxEnergy = lpObj->Energy;

  02f87	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 2204 : 
; 2205 : 								DecValue = lpInfo->m_Arg7 + MaxEnergy / lpInfo->m_Arg8 + iSkillValue;

  02f8e	f3 0f 10 9d d0
	fe ff ff	 movss	 xmm3, DWORD PTR _iSkillValue$7[ebp]

; 2206 : 
; 2207 : 								if( DecValue > lpInfo->m_Arg9 )

  02f96	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  02f9b	66 0f 6e c8	 movd	 xmm1, eax
  02f9f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  02fa2	0f 28 c1	 movaps	 xmm0, xmm1
  02fa5	f3 0f 5e 46 20	 divss	 xmm0, DWORD PTR [esi+32]
  02faa	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]
  02faf	f3 0f 58 c3	 addss	 xmm0, xmm3
  02fb3	f3 0f 2c c0	 cvttss2si eax, xmm0
  02fb7	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  02fbd	66 0f 6e c0	 movd	 xmm0, eax
  02fc1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02fc4	0f 2f c2	 comiss	 xmm0, xmm2
  02fc7	76 0a		 jbe	 SHORT $LN490@Attack

; 2208 : 								{
; 2209 : 									DecValue = lpInfo->m_Arg9;

  02fc9	f3 0f 2c c2	 cvttss2si eax, xmm2
  02fcd	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN490@Attack:

; 2210 : 								}
; 2211 : 
; 2212 : 								DecTime = lpInfo->m_Arg10 + MaxEnergy / lpInfo->m_Arg11 - lpTargetObj->Level / 20 + iSkillValue;

  02fd3	f3 0f 5e 4e 2c	 divss	 xmm1, DWORD PTR [esi+44]
  02fd8	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  02fdf	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  02fe4	f7 e9		 imul	 ecx
  02fe6	f3 0f 58 4e 28	 addss	 xmm1, DWORD PTR [esi+40]
  02feb	c1 fa 03	 sar	 edx, 3
  02fee	8b c2		 mov	 eax, edx
  02ff0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  02ff3	03 c2		 add	 eax, edx
  02ff5	66 0f 6e c0	 movd	 xmm0, eax
  02ff9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  02ffc	f3 0f 5c c8	 subss	 xmm1, xmm0
  03000	f3 0f 58 cb	 addss	 xmm1, xmm3
  03004	f3 0f 2c c1	 cvttss2si eax, xmm1

; 2213 : 
; 2214 : 								if( DecTime > lpInfo->m_Arg12 )

  03008	f3 0f 10 4e 30	 movss	 xmm1, DWORD PTR [esi+48]

; 2215 : 								{
; 2216 : 									DecTime = lpInfo->m_Arg12;
; 2217 : 								}
; 2218 : 							}

  0300d	e9 97 00 00 00	 jmp	 $LN927@Attack
$LN488@Attack:

; 2219 : 							else if( lpTargetObj->Type == OBJ_USER )

  03012	3c 01		 cmp	 al, 1
  03014	0f 85 14 03 00
	00		 jne	 $LN502@Attack

; 2220 : 							{
; 2221 : 								int MaxEnergy = lpObj->Energy;

  0301a	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 2222 : 
; 2223 : 								DecValue = lpInfo->m_Arg1 + MaxEnergy / lpInfo->m_Arg2 + iSkillValue;

  03021	f3 0f 10 9d d0
	fe ff ff	 movss	 xmm3, DWORD PTR _iSkillValue$7[ebp]

; 2224 : 
; 2225 : 								if( DecValue > lpInfo->m_Arg3 )

  03029	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
  0302e	66 0f 6e c8	 movd	 xmm1, eax
  03032	0f 5b c9	 cvtdq2ps xmm1, xmm1
  03035	0f 28 c1	 movaps	 xmm0, xmm1
  03038	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  0303d	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  03042	f3 0f 58 c3	 addss	 xmm0, xmm3
  03046	f3 0f 2c c0	 cvttss2si eax, xmm0
  0304a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  03050	66 0f 6e c0	 movd	 xmm0, eax
  03054	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03057	0f 2f c2	 comiss	 xmm0, xmm2
  0305a	76 0a		 jbe	 SHORT $LN493@Attack

; 2226 : 								{
; 2227 : 									DecValue = lpInfo->m_Arg3;

  0305c	f3 0f 2c c2	 cvttss2si eax, xmm2
  03060	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN493@Attack:

; 2228 : 								}
; 2229 : 
; 2230 : 								DecTime = lpInfo->m_Arg4 + MaxEnergy / lpInfo->m_Arg5 + (lpObj->Level - lpTargetObj->Level) / 150 + iSkillValue;

  03066	f3 0f 5e 4e 14	 divss	 xmm1, DWORD PTR [esi+20]
  0306b	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  03072	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  03079	2b c8		 sub	 ecx, eax
  0307b	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  03080	f7 e9		 imul	 ecx
  03082	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]
  03087	c1 fa 04	 sar	 edx, 4
  0308a	8b c2		 mov	 eax, edx
  0308c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0308f	03 c2		 add	 eax, edx
  03091	66 0f 6e c0	 movd	 xmm0, eax
  03095	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03098	f3 0f 58 c1	 addss	 xmm0, xmm1

; 2231 : 
; 2232 : 								if( DecTime > lpInfo->m_Arg6 )

  0309c	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  030a1	f3 0f 58 c3	 addss	 xmm0, xmm3
  030a5	f3 0f 2c c0	 cvttss2si eax, xmm0
$LN927@Attack:
  030a9	66 0f 6e c0	 movd	 xmm0, eax
  030ad	0f 5b c0	 cvtdq2ps xmm0, xmm0
  030b0	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecTime$1$[ebp], eax
  030b6	0f 2f c1	 comiss	 xmm0, xmm1
  030b9	76 0a		 jbe	 SHORT $LN494@Attack

; 2233 : 								{
; 2234 : 									DecTime = lpInfo->m_Arg6;

  030bb	f3 0f 2c c1	 cvttss2si eax, xmm1
  030bf	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecTime$1$[ebp], eax
$LN494@Attack:

; 2235 : 								}
; 2236 : 							}
; 2237 : 
; 2238 : 							if( DecTime < 1 )

  030c5	83 f8 01	 cmp	 eax, 1
  030c8	0f 8c 60 02 00
	00		 jl	 $LN502@Attack

; 2239 : 							{
; 2240 : 								GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2241 : 								return FALSE;
; 2242 : 							}
; 2243 : 
; 2244 : 							if( gObjCheckPowerfulEffect(lpObj,AT_INNOVATION,DecValue,0) == TRUE )

  030ce	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _DecValue$1$[ebp]
  030d4	6a 00		 push	 0
  030d6	56		 push	 esi
  030d7	6a 4d		 push	 77			; 0000004dH
  030d9	53		 push	 ebx
  030da	e8 00 00 00 00	 call	 ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
  030df	83 c4 10	 add	 esp, 16			; 00000010H
  030e2	3c 01		 cmp	 al, 1
  030e4	0f 85 41 ef ff
	ff		 jne	 $LN358@Attack

; 2245 : 							{
; 2246 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);
; 2247 : 								return FALSE;

  030ea	e9 17 02 00 00	 jmp	 $LN957@Attack
$LN497@Attack:

; 2248 : 							}
; 2249 : 
; 2250 : 							gObjAddBuffEffect(lpTargetObj,AT_INNOVATION,ADD_OPTION_INNOVATION,DecValue,0,0,DecTime);
; 2251 : 							return TRUE;
; 2252 : 						}
; 2253 : 						else
; 2254 : 						{
; 2255 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2256 : 							return FALSE;
; 2257 : 						}
; 2258 : 					}
; 2259 : 					break;
; 2260 : 				case AT_MSKILL_SUM_WEAKNESS1:
; 2261 : 					{
; 2262 : 						int Rate = 0;
; 2263 : 
; 2264 : 						if( lpTargetObj->Type == OBJ_MONSTER )

  030ef	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  030f2	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _Rate$1$[ebp], 0
  030fc	3c 02		 cmp	 al, 2
  030fe	75 2d		 jne	 SHORT $LN498@Attack

; 2265 : 						{
; 2266 : 							Rate = 32 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  03100	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  03107	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0310c	f7 e9		 imul	 ecx
  0310e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  03113	c1 fa 04	 sar	 edx, 4
  03116	8b ca		 mov	 ecx, edx
  03118	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0311b	03 ca		 add	 ecx, edx
  0311d	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  03123	8b c2		 mov	 eax, edx
  03125	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03128	83 c0 20	 add	 eax, 32			; 00000020H
  0312b	eb 2f		 jmp	 SHORT $LN928@Attack
$LN498@Attack:

; 2267 : 						}
; 2268 : 						else if( lpTargetObj->Type == OBJ_USER )

  0312d	3c 01		 cmp	 al, 1
  0312f	75 35		 jne	 SHORT $LN500@Attack

; 2269 : 						{
; 2270 : 							Rate = 17 + lpObj->Energy / 50 + lpObj->m_CurseDamageBook / 6;

  03131	0f b7 8b d6 00
	00 00		 movzx	 ecx, WORD PTR [ebx+214]
  03138	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0313d	f7 e9		 imul	 ecx
  0313f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  03144	c1 fa 04	 sar	 edx, 4
  03147	8b ca		 mov	 ecx, edx
  03149	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0314c	03 ca		 add	 ecx, edx
  0314e	f7 ab 80 06 00
	00		 imul	 DWORD PTR [ebx+1664]
  03154	8b c2		 mov	 eax, edx
  03156	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03159	83 c0 11	 add	 eax, 17			; 00000011H
$LN928@Attack:
  0315c	03 ca		 add	 ecx, edx
  0315e	03 c1		 add	 eax, ecx
  03160	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _Rate$1$[ebp], eax
$LN500@Attack:

; 2271 : 						}
; 2272 : 
; 2273 : 						BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(lpMagic->m_Skill);

  03166	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0316c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  03171	ff 70 08	 push	 DWORD PTR [eax+8]
  03174	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect
  03179	8b f0		 mov	 esi, eax

; 2274 : 
; 2275 : 						if( !lpInfo )

  0317b	85 f6		 test	 esi, esi
  0317d	0f 84 d2 0a 00
	00		 je	 $LN956@Attack

; 2276 : 						{
; 2277 : 							return 0;
; 2278 : 						}
; 2279 : 
; 2280 : 						if( Rate >= rand() % 100 )

  03183	e8 00 00 00 00	 call	 _rand
  03188	99		 cdq
  03189	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0318e	f7 f9		 idiv	 ecx
  03190	39 95 d8 fe ff
	ff		 cmp	 DWORD PTR _Rate$1$[ebp], edx
  03196	0f 8c 92 01 00
	00		 jl	 $LN502@Attack

; 2281 : 						{
; 2282 : 							int DecValue = 0;
; 2283 : 							int DecTime = 0;
; 2284 : 
; 2285 : 							if( lpTargetObj->Type == OBJ_MONSTER )

  0319c	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  0319f	3c 02		 cmp	 al, 2
  031a1	0f 85 8b 00 00
	00		 jne	 $LN504@Attack

; 2286 : 							{
; 2287 : 								int MaxEnergy = lpObj->Energy;

  031a7	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 2288 : 
; 2289 : 								DecValue = lpInfo->m_Arg7 + MaxEnergy / lpInfo->m_Arg8 + iSkillValue;

  031ae	f3 0f 10 9d d0
	fe ff ff	 movss	 xmm3, DWORD PTR _iSkillValue$7[ebp]

; 2290 : 
; 2291 : 								if( DecValue > lpInfo->m_Arg9 )

  031b6	f3 0f 10 56 24	 movss	 xmm2, DWORD PTR [esi+36]
  031bb	66 0f 6e c8	 movd	 xmm1, eax
  031bf	0f 5b c9	 cvtdq2ps xmm1, xmm1
  031c2	0f 28 c1	 movaps	 xmm0, xmm1
  031c5	f3 0f 5e 46 20	 divss	 xmm0, DWORD PTR [esi+32]
  031ca	f3 0f 58 46 1c	 addss	 xmm0, DWORD PTR [esi+28]
  031cf	f3 0f 58 c3	 addss	 xmm0, xmm3
  031d3	f3 0f 2c c0	 cvttss2si eax, xmm0
  031d7	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  031dd	66 0f 6e c0	 movd	 xmm0, eax
  031e1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  031e4	0f 2f c2	 comiss	 xmm0, xmm2
  031e7	76 0a		 jbe	 SHORT $LN506@Attack

; 2292 : 								{
; 2293 : 									DecValue = lpInfo->m_Arg9;

  031e9	f3 0f 2c c2	 cvttss2si eax, xmm2
  031ed	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN506@Attack:

; 2294 : 								}
; 2295 : 
; 2296 : 								DecTime = lpInfo->m_Arg10 + MaxEnergy / lpInfo->m_Arg11 - lpTargetObj->Level / 20 + iSkillValue;

  031f3	f3 0f 5e 4e 2c	 divss	 xmm1, DWORD PTR [esi+44]
  031f8	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  031ff	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  03204	f7 e9		 imul	 ecx
  03206	f3 0f 58 4e 28	 addss	 xmm1, DWORD PTR [esi+40]
  0320b	c1 fa 03	 sar	 edx, 3
  0320e	8b c2		 mov	 eax, edx
  03210	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03213	03 c2		 add	 eax, edx
  03215	66 0f 6e c0	 movd	 xmm0, eax
  03219	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0321c	f3 0f 5c c8	 subss	 xmm1, xmm0
  03220	f3 0f 58 cb	 addss	 xmm1, xmm3
  03224	f3 0f 2c c1	 cvttss2si eax, xmm1

; 2297 : 
; 2298 : 								if( DecTime > lpInfo->m_Arg12 )

  03228	f3 0f 10 4e 30	 movss	 xmm1, DWORD PTR [esi+48]

; 2299 : 								{
; 2300 : 									DecTime = lpInfo->m_Arg12;
; 2301 : 								}
; 2302 : 							}

  0322d	e9 97 00 00 00	 jmp	 $LN930@Attack
$LN504@Attack:

; 2303 : 							else if( lpTargetObj->Type == OBJ_USER )

  03232	3c 01		 cmp	 al, 1
  03234	0f 85 f4 00 00
	00		 jne	 $LN502@Attack

; 2304 : 							{
; 2305 : 								int MaxEnergy = lpObj->Energy;

  0323a	0f b7 83 d6 00
	00 00		 movzx	 eax, WORD PTR [ebx+214]

; 2306 : 
; 2307 : 								DecValue = lpInfo->m_Arg1 + MaxEnergy / lpInfo->m_Arg2 + iSkillValue;

  03241	f3 0f 10 9d d0
	fe ff ff	 movss	 xmm3, DWORD PTR _iSkillValue$7[ebp]

; 2308 : 
; 2309 : 								if( DecValue > lpInfo->m_Arg3 )

  03249	f3 0f 10 56 0c	 movss	 xmm2, DWORD PTR [esi+12]
  0324e	66 0f 6e c8	 movd	 xmm1, eax
  03252	0f 5b c9	 cvtdq2ps xmm1, xmm1
  03255	0f 28 c1	 movaps	 xmm0, xmm1
  03258	f3 0f 5e 46 08	 divss	 xmm0, DWORD PTR [esi+8]
  0325d	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  03262	f3 0f 58 c3	 addss	 xmm0, xmm3
  03266	f3 0f 2c c0	 cvttss2si eax, xmm0
  0326a	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
  03270	66 0f 6e c0	 movd	 xmm0, eax
  03274	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03277	0f 2f c2	 comiss	 xmm0, xmm2
  0327a	76 0a		 jbe	 SHORT $LN509@Attack

; 2310 : 								{
; 2311 : 									DecValue = lpInfo->m_Arg3;

  0327c	f3 0f 2c c2	 cvttss2si eax, xmm2
  03280	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _DecValue$1$[ebp], eax
$LN509@Attack:

; 2312 : 								}
; 2313 : 
; 2314 : 								DecTime = lpInfo->m_Arg4 + MaxEnergy / lpInfo->m_Arg5 + (lpObj->Level - lpTargetObj->Level) / 150 + iSkillValue;

  03286	f3 0f 5e 4e 14	 divss	 xmm1, DWORD PTR [esi+20]
  0328b	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  03292	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  03299	2b c8		 sub	 ecx, eax
  0329b	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  032a0	f7 e9		 imul	 ecx
  032a2	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]
  032a7	c1 fa 04	 sar	 edx, 4
  032aa	8b c2		 mov	 eax, edx
  032ac	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  032af	03 c2		 add	 eax, edx
  032b1	66 0f 6e c0	 movd	 xmm0, eax
  032b5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  032b8	f3 0f 58 c1	 addss	 xmm0, xmm1
  032bc	f3 0f 58 c3	 addss	 xmm0, xmm3
$LN964@Attack:

; 2315 : 
; 2316 : 								if( DecTime > lpInfo->m_Arg6 )

  032c0	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  032c5	f3 0f 2c c0	 cvttss2si eax, xmm0
$LN930@Attack:
  032c9	66 0f 6e c0	 movd	 xmm0, eax
  032cd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  032d0	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecTime$1$[ebp], eax
  032d6	0f 2f c1	 comiss	 xmm0, xmm1
  032d9	76 0a		 jbe	 SHORT $LN510@Attack

; 2317 : 								{
; 2318 : 									DecTime = lpInfo->m_Arg6;

  032db	f3 0f 2c c1	 cvttss2si eax, xmm1
  032df	89 85 cc fe ff
	ff		 mov	 DWORD PTR _DecTime$1$[ebp], eax
$LN510@Attack:

; 2319 : 								}
; 2320 : 							}
; 2321 : 
; 2322 : 							if( DecTime < 1 )

  032e5	83 f8 01	 cmp	 eax, 1
  032e8	7c 44		 jl	 SHORT $LN502@Attack

; 2323 : 							{
; 2324 : 								GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);
; 2325 : 								return FALSE;
; 2326 : 							}
; 2327 : 
; 2328 : 							if( gObjCheckPowerfulEffect(lpObj,AT_WEAKNESS,DecValue,0) == TRUE )

  032ea	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _DecValue$1$[ebp]
  032f0	6a 00		 push	 0
  032f2	56		 push	 esi
  032f3	6a 4c		 push	 76			; 0000004cH
  032f5	53		 push	 ebx
  032f6	e8 00 00 00 00	 call	 ?gObjCheckPowerfulEffect@@YA_NPAUOBJECTSTRUCT@@HHH@Z ; gObjCheckPowerfulEffect
  032fb	83 c4 10	 add	 esp, 16			; 00000010H
  032fe	3c 01		 cmp	 al, 1
  03300	0f 85 11 eb ff
	ff		 jne	 $LN342@Attack
$LN957@Attack:

; 2329 : 							{
; 2330 : 								GCMagicAttackNumberSend(lpObj,skill,lpTargetObj->m_Index,0);

  03306	6a 00		 push	 0
  03308	ff 37		 push	 DWORD PTR [edi]
  0330a	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  03310	53		 push	 ebx
  03311	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  03316	83 c4 10	 add	 esp, 16			; 00000010H

; 2331 : 								return FALSE;

  03319	33 c0		 xor	 eax, eax
  0331b	5e		 pop	 esi
  0331c	5f		 pop	 edi
  0331d	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  0331e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03321	33 cd		 xor	 ecx, ebp
  03323	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03328	8b e5		 mov	 esp, ebp
  0332a	5d		 pop	 ebp
  0332b	c2 24 00	 ret	 36			; 00000024H
$LN502@Attack:

; 2332 : 							}
; 2333 : 
; 2334 : 							gObjAddBuffEffect(lpTargetObj,AT_WEAKNESS,ADD_OPTION_WEAKNESS,DecValue,0,0,DecTime);
; 2335 : 							return TRUE;
; 2336 : 						}
; 2337 : 						else
; 2338 : 						{
; 2339 : 							GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  0332e	6a 00		 push	 0
  03330	6a 00		 push	 0
  03332	6a 00		 push	 0
  03334	6a 00		 push	 0
  03336	ff 37		 push	 DWORD PTR [edi]
  03338	ff 33		 push	 DWORD PTR [ebx]
  0333a	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0333f	83 c4 18	 add	 esp, 24			; 00000018H
$LN955@Attack:

; 2340 : 							return FALSE;

  03342	5e		 pop	 esi
  03343	5f		 pop	 edi
  03344	33 c0		 xor	 eax, eax
  03346	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  03347	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0334a	33 cd		 xor	 ecx, ebp
  0334c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03351	8b e5		 mov	 esp, ebp
  03353	5d		 pop	 ebp
  03354	c2 24 00	 ret	 36			; 00000024H
$LN513@Attack:

; 2341 : 						}
; 2342 : 					}
; 2343 : 					break;
; 2344 : 				case AT_MSKILL_DL_CHAOTICDESEAR1:
; 2345 : 					AttackDamage = AttackDamage*(200 + Energy/25)/100;

  03357	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0335c	f7 ad d4 fe ff
	ff		 imul	 DWORD PTR _Energy$1$[ebp]
$LN918@Attack:
  03362	c1 fa 03	 sar	 edx, 3
$LN916@Attack:
  03365	8b ca		 mov	 ecx, edx
  03367	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0336c	81 c2 c8 00 00
	00		 add	 edx, 200		; 000000c8H
  03372	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03375	03 ca		 add	 ecx, edx
  03377	0f af 4d 1c	 imul	 ecx, DWORD PTR _AttackDamage$[ebp]
  0337b	f7 e9		 imul	 ecx
  0337d	c1 fa 05	 sar	 edx, 5
  03380	8b c2		 mov	 eax, edx
  03382	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03385	03 c2		 add	 eax, edx
$LN917@Attack:
  03387	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN10@Attack:

; 2346 : 					break;
; 2347 : 				}
; 2348 : 			}
; 2349 : 
; 2350 : 			if ( lpObj->pInventory[1].GetDetailItemType() == 10 &&

  0338a	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  03390	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  03396	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  0339b	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0339e	0f 85 59 01 00
	00		 jne	 $LN832@Attack
  033a4	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  033aa	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [eax+262]
  033b1	3b c6		 cmp	 eax, esi
  033b3	0f 85 44 01 00
	00		 jne	 $LN832@Attack

; 2351 : 				 lpObj->pInventory[1].m_Special[0] == skill )
; 2352 : 			{
; 2353 : 				if( MagicDamageC.GetSkillAttr(skill) == R_FIRE )

  033b9	56		 push	 esi
  033ba	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  033bf	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr
  033c4	83 f8 03	 cmp	 eax, 3
  033c7	75 2c		 jne	 SHORT $LN515@Attack

; 2354 : 				{
; 2355 : 					if( lpObj->m_MPSkillOpt.MpsFireTomeStrength > 0.0f )

  033c9	f3 0f 10 8b 68
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1896]
  033d1	0f 57 d2	 xorps	 xmm2, xmm2
  033d4	0f 2f ca	 comiss	 xmm1, xmm2
  033d7	0f 86 20 01 00
	00		 jbe	 $LN832@Attack

; 2356 : 					{
; 2357 : 						AttackDamage += lpObj->m_MPSkillOpt.MpsFireTomeStrength;

  033dd	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  033e2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  033e5	f3 0f 58 c1	 addss	 xmm0, xmm1
  033e9	f3 0f 2c c0	 cvttss2si eax, xmm0
  033ed	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax

; 2358 : 					}
; 2359 : 				}

  033f0	e9 08 01 00 00	 jmp	 $LN832@Attack
$LN515@Attack:

; 2360 : 				else if( MagicDamageC.GetSkillAttr(skill) == R_WIND )

  033f5	56		 push	 esi
  033f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  033fb	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr
  03400	83 f8 05	 cmp	 eax, 5
  03403	0f 85 87 00 00
	00		 jne	 $LN518@Attack

; 2361 : 				{
; 2362 : 					if( lpObj->m_MPSkillOpt.MpsWindTomeStrength > 0.0f )

  03409	f3 0f 10 8b 6c
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1900]
  03411	0f 57 d2	 xorps	 xmm2, xmm2
  03414	0f 2f ca	 comiss	 xmm1, xmm2
  03417	76 13		 jbe	 SHORT $LN830@Attack

; 2363 : 					{
; 2364 : 						AttackDamage += lpObj->m_MPSkillOpt.MpsWindTomeStrength;

  03419	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  0341e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03421	f3 0f 58 c1	 addss	 xmm0, xmm1
  03425	f3 0f 2c c0	 cvttss2si eax, xmm0
  03429	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN830@Attack:

; 2365 : 					}
; 2366 : 
; 2367 : 					if( lpObj->m_MPSkillOpt.MpsWindTomeMastery > 0.0f )

  0342c	f3 0f 10 83 78
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1912]
  03434	0f 2f c2	 comiss	 xmm0, xmm2
  03437	0f 86 c0 00 00
	00		 jbe	 $LN832@Attack

; 2368 : 					{
; 2369 : 						float fPercent = rand()%100;

  0343d	e8 00 00 00 00	 call	 _rand
  03442	99		 cdq
  03443	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03448	f7 f9		 idiv	 ecx

; 2370 : 
; 2371 : 						if( fPercent < lpObj->m_MPSkillOpt.MpsWindTomeMastery )

  0344a	f3 0f 10 83 78
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1912]
  03452	66 0f 6e ca	 movd	 xmm1, edx
  03456	0f 5b c9	 cvtdq2ps xmm1, xmm1
  03459	0f 2f c1	 comiss	 xmm0, xmm1
  0345c	0f 86 9b 00 00
	00		 jbe	 $LN832@Attack

; 2372 : 						{
; 2373 : 							gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,3);

  03462	6a 03		 push	 3
  03464	6a 00		 push	 0
  03466	6a 00		 push	 0
  03468	6a 00		 push	 0
  0346a	6a 00		 push	 0
  0346c	6a 3d		 push	 61			; 0000003dH
  0346e	57		 push	 edi
  0346f	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 2374 : 							gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  03474	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0347b	50		 push	 eax
  0347c	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  03483	50		 push	 eax
  03484	ff 37		 push	 DWORD PTR [edi]
  03486	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0348b	83 c4 28	 add	 esp, 40			; 00000028H

; 2375 : 						}
; 2376 : 					}
; 2377 : 				}

  0348e	eb 6d		 jmp	 SHORT $LN832@Attack
$LN518@Attack:

; 2378 : 				else if( MagicDamageC.GetSkillAttr(skill) == R_LIGHTNING )

  03490	56		 push	 esi
  03491	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  03496	e8 00 00 00 00	 call	 ?GetSkillAttr@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetSkillAttr
  0349b	83 f8 02	 cmp	 eax, 2
  0349e	75 5d		 jne	 SHORT $LN832@Attack

; 2379 : 				{
; 2380 : 					if( lpObj->m_MPSkillOpt.MpsLightTomeStrength > 0.0f )

  034a0	f3 0f 10 8b 70
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1904]
  034a8	0f 57 d2	 xorps	 xmm2, xmm2
  034ab	0f 2f ca	 comiss	 xmm1, xmm2
  034ae	76 13		 jbe	 SHORT $LN831@Attack

; 2381 : 					{
; 2382 : 						AttackDamage += lpObj->m_MPSkillOpt.MpsLightTomeStrength;

  034b0	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  034b5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  034b8	f3 0f 58 c1	 addss	 xmm0, xmm1
  034bc	f3 0f 2c c0	 cvttss2si eax, xmm0
  034c0	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN831@Attack:

; 2383 : 					}
; 2384 : 
; 2385 : 					if( lpObj->m_MPSkillOpt.MpsLightTomeMastery > 0.0f )

  034c3	f3 0f 10 83 7c
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1916]
  034cb	0f 2f c2	 comiss	 xmm0, xmm2
  034ce	76 2d		 jbe	 SHORT $LN832@Attack

; 2386 : 					{
; 2387 : 						float fPercent = rand()%100;

  034d0	e8 00 00 00 00	 call	 _rand
  034d5	99		 cdq
  034d6	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  034db	f7 f9		 idiv	 ecx

; 2388 : 
; 2389 : 						if( fPercent < lpObj->m_MPSkillOpt.MpsLightTomeMastery )

  034dd	f3 0f 10 83 7c
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1916]
  034e5	66 0f 6e ca	 movd	 xmm1, edx
  034e9	0f 5b c9	 cvtdq2ps xmm1, xmm1
  034ec	0f 2f c1	 comiss	 xmm0, xmm1
  034ef	76 0c		 jbe	 SHORT $LN832@Attack

; 2390 : 						{
; 2391 : 							gObjBackSpring2(lpTargetObj,lpObj,2);

  034f1	6a 02		 push	 2
  034f3	53		 push	 ebx
  034f4	57		 push	 edi
  034f5	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  034fa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN832@Attack:

; 2392 : 						}
; 2393 : 					}
; 2394 : 				}
; 2395 : 			}
; 2396 : 
; 2397 : 			if ( skill == 0 )

  034fd	85 f6		 test	 esi, esi
  034ff	75 2f		 jne	 SHORT $LN528@Attack

; 2398 : 			{
; 2399 : 				if ( lpObj->pInventory[8].m_Type == ITEMGET(13, 3) )

  03501	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  03507	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  0350c	66 39 88 a6 06
	00 00		 cmp	 WORD PTR [eax+1702], cx
  03513	75 1b		 jne	 SHORT $LN528@Attack

; 2400 : 				{
; 2401 : 					AttackDamage = AttackDamage * 130 / 100;

  03515	69 4d 1c 82 00
	00 00		 imul	 ecx, DWORD PTR _AttackDamage$[ebp], 130
  0351c	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03521	f7 e9		 imul	 ecx
  03523	c1 fa 05	 sar	 edx, 5
  03526	8b c2		 mov	 eax, edx
  03528	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0352b	03 c2		 add	 eax, edx
  0352d	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN528@Attack:

; 2402 : 				}
; 2403 : 			}
; 2404 : 
; 2405 : 			int iManaShieldType = 0;
; 2406 : 
; 2407 : 			if( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_MANASHIELD) == TRUE )

  03530	6a 04		 push	 4
  03532	57		 push	 edi
  03533	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  03538	83 c4 08	 add	 esp, 8
  0353b	3c 01		 cmp	 al, 1
  0353d	75 07		 jne	 SHORT $LN529@Attack

; 2408 : 				iManaShieldType = 1;

  0353f	b8 01 00 00 00	 mov	 eax, 1
  03544	eb 1b		 jmp	 SHORT $LN809@Attack
$LN529@Attack:

; 2409 : 			else if( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_MANASHIELD2) == TRUE )

  03546	68 8c 00 00 00	 push	 140			; 0000008cH
  0354b	57		 push	 edi
  0354c	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  03551	83 c4 08	 add	 esp, 8
  03554	3c 01		 cmp	 al, 1
  03556	0f 85 d2 00 00
	00		 jne	 $LN833@Attack

; 2410 : 				iManaShieldType = 2;

  0355c	b8 02 00 00 00	 mov	 eax, 2
$LN809@Attack:

; 2411 : 			
; 2412 : 			if ( iManaShieldType != 0 && AttackDamage > 0 )

  03561	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03564	85 c9		 test	 ecx, ecx
  03566	0f 8e c5 00 00
	00		 jle	 $LN537@Attack

; 2413 : 			{
; 2414 : 				int iWizardSkillDefense = 0;
; 2415 : 				int iManaRate = 0;
; 2416 : 
; 2417 : 				if( iManaShieldType == 1 )

  0356c	83 f8 01	 cmp	 eax, 1
  0356f	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iWizardSkillDefense$3[ebp], 0

; 2418 : 					gObjGetValueOfBuffIndex(lpTargetObj,BUFF_MANASHIELD,&iWizardSkillDefense,&iManaRate);

  03579	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _iManaRate$8[ebp]
  0357f	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _iManaRate$8[ebp], 0
  03589	50		 push	 eax
  0358a	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR _iWizardSkillDefense$3[ebp]
  03590	50		 push	 eax
  03591	75 04		 jne	 SHORT $LN533@Attack
  03593	6a 04		 push	 4

; 2419 : 				else

  03595	eb 05		 jmp	 SHORT $LN937@Attack
$LN533@Attack:

; 2420 : 					gObjGetValueOfBuffIndex(lpTargetObj,BUFF_MANASHIELD2,&iWizardSkillDefense,&iManaRate);

  03597	68 8c 00 00 00	 push	 140			; 0000008cH
$LN937@Attack:
  0359c	57		 push	 edi
  0359d	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex

; 2421 : 
; 2422 : 				int iReplacementMana = 0;
; 2423 : 
; 2424 : 				if( iManaRate > 0 )

  035a2	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _iManaRate$8[ebp]
  035a8	83 c4 10	 add	 esp, 16			; 00000010H

; 2425 : 				{
; 2426 : 					iReplacementMana = (lpTargetObj->Mana * iManaRate) / 1000;

  035ab	f3 0f 10 8f ec
	00 00 00	 movss	 xmm1, DWORD PTR [edi+236]
  035b3	85 c0		 test	 eax, eax
  035b5	7e 15		 jle	 SHORT $LN535@Attack
  035b7	66 0f 6e c0	 movd	 xmm0, eax
  035bb	0f 5b c0	 cvtdq2ps xmm0, xmm0
  035be	f3 0f 59 c1	 mulss	 xmm0, xmm1
  035c2	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@447a0000

; 2427 : 				}
; 2428 : 				else

  035ca	eb 0b		 jmp	 SHORT $LN938@Attack
$LN535@Attack:

; 2429 : 				{
; 2430 : 					iReplacementMana = (lpTargetObj->Mana * 0.02f);

  035cc	0f 28 c1	 movaps	 xmm0, xmm1
  035cf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ca3d70a
$LN938@Attack:
  035d7	f3 0f 2c c0	 cvttss2si eax, xmm0
  035db	66 0f 6e c0	 movd	 xmm0, eax

; 2431 : 				}
; 2432 : 
; 2433 : 				if ( iReplacementMana < lpTargetObj->Mana )

  035df	0f 5b c0	 cvtdq2ps xmm0, xmm0
  035e2	0f 2f c8	 comiss	 xmm1, xmm0
  035e5	76 47		 jbe	 SHORT $LN833@Attack

; 2437 : 					int decattackdamage = 0;
; 2438 : 					
; 2439 : 					if( iWizardSkillDefense > 0 )

  035e7	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR _iWizardSkillDefense$3[ebp]
  035ed	f3 0f 5c c8	 subss	 xmm1, xmm0
  035f1	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  035f4	33 c0		 xor	 eax, eax
  035f6	f3 0f 11 8f ec
	00 00 00	 movss	 DWORD PTR [edi+236], xmm1
  035fe	85 d2		 test	 edx, edx
  03600	7e 1e		 jle	 SHORT $LN538@Attack

; 2434 : 				{
; 2435 : 					lpTargetObj->Mana -= iReplacementMana;
; 2436 : 					float fWizardSkillDefense = iWizardSkillDefense/100.0f;

  03602	66 0f 6e ca	 movd	 xmm1, edx
  03606	0f 5b c9	 cvtdq2ps xmm1, xmm1
  03609	66 0f 6e c1	 movd	 xmm0, ecx
  0360d	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000

; 2440 : 					{
; 2441 : 						decattackdamage = AttackDamage * fWizardSkillDefense;

  03615	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03618	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0361c	f3 0f 2c c1	 cvttss2si eax, xmm1
$LN538@Attack:

; 2442 : 					}
; 2443 : 					AttackDamage -= decattackdamage;

  03620	2b c8		 sub	 ecx, eax

; 2444 : 					ManaChange = TRUE;

  03622	c7 85 9c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _ManaChange$1$[ebp], 1
  0362c	eb 03		 jmp	 SHORT $LN537@Attack
$LN833@Attack:
  0362e	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN537@Attack:

; 2445 : 				}
; 2446 : 			}
; 2447 : 
; 2448 : 			AttackDamage += lpObj->SetOpAddDamage;

  03631	0f bf 83 be 14
	00 00		 movsx	 eax, WORD PTR [ebx+5310]
  03638	03 c8		 add	 ecx, eax

; 2449 : 
; 2450 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  0363a	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0363e	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  03641	75 71		 jne	 SHORT $LN539@Attack
  03643	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03647	75 6b		 jne	 SHORT $LN539@Attack

; 2451 : 			{
; 2452 : 				AttackDamage += lpObj->m_ItemOptionExFor380.OpAddDamage;

  03649	0f bf 83 54 24
	00 00		 movsx	 eax, WORD PTR [ebx+9300]
  03650	03 c8		 add	 ecx, eax

; 2453 : 
; 2454 : 				if ( CC_MAP_RANGE(lpObj->MapNumber ) && CC_MAP_RANGE(lpTargetObj->MapNumber) )

  03652	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  03658	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
  0365b	3c 35		 cmp	 al, 53			; 00000035H
  0365d	74 0f		 je	 SHORT $LN810@Attack
  0365f	3c 12		 cmp	 al, 18			; 00000012H
  03661	72 3b		 jb	 SHORT $LN540@Attack
  03663	b2 17		 mov	 dl, 23			; 00000017H
  03665	3a d0		 cmp	 dl, al
  03667	1b c0		 sbb	 eax, eax
  03669	83 c0 01	 add	 eax, 1
  0366c	74 30		 je	 SHORT $LN540@Attack
$LN810@Attack:
  0366e	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  03674	3c 35		 cmp	 al, 53			; 00000035H
  03676	74 0f		 je	 SHORT $LN811@Attack
  03678	3c 12		 cmp	 al, 18			; 00000012H
  0367a	72 22		 jb	 SHORT $LN540@Attack
  0367c	b2 17		 mov	 dl, 23			; 00000017H
  0367e	3a d0		 cmp	 dl, al
  03680	1b c0		 sbb	 eax, eax
  03682	83 c0 01	 add	 eax, 1
  03685	74 17		 je	 SHORT $LN540@Attack
$LN811@Attack:

; 2455 : 				{
; 2456 : 					AttackDamage = AttackDamage * 50 / 100;

  03687	6b c9 32	 imul	 ecx, ecx, 50
  0368a	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0368f	f7 e9		 imul	 ecx
  03691	c1 fa 05	 sar	 edx, 5
  03694	8b c2		 mov	 eax, edx
  03696	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03699	03 c2		 add	 eax, edx
  0369b	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN540@Attack:

; 2457 : 				}
; 2458 : #if (ENABLE_CUSTOM_PVPBALANCE == 1)
; 2459 : 				g_PvPBalance.modifyDamage(lpObj->m_Index, lpTargetObj->m_Index, AttackDamage);

  0369e	8d 45 1c	 lea	 eax, DWORD PTR _AttackDamage$[ebp]
  036a1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PvPBalance@@3VPvPBalance@@A ; g_PvPBalance
  036a6	50		 push	 eax
  036a7	0f b7 07	 movzx	 eax, WORD PTR [edi]
  036aa	50		 push	 eax
  036ab	0f b7 03	 movzx	 eax, WORD PTR [ebx]
  036ae	50		 push	 eax
  036af	e8 00 00 00 00	 call	 ?modifyDamage@PvPBalance@@QAEXFFAAH@Z ; PvPBalance::modifyDamage
$LN539@Attack:

; 2460 : #endif
; 2461 : 
; 2462 : #if (ENABLETEST_ZTLUA == 1)
; 2463 : 			ZTLuaManager* LuaMng = new ZTLuaManager(FILE_LUA_CHARACTERBASICS);
; 2464 : 			ZTLuaUnit::Bind(LuaMng->getLua());
; 2465 : 			ZTLuaItem::Bind(LuaMng->getLua());
; 2466 : 			LuaMng->Call("correctDamagePvP", lpObj->m_Index, lpTargetObj->m_Index, AttackDamage);
; 2467 : 			AttackDamage = LuaMng->getRef()->cast<int>();
; 2468 : 			ZTLuaManager::Delete(LuaMng);
; 2469 : 			LogAddDebug("After: %d", AttackDamage);
; 2470 : 			LogAddDebug("Diff: %d", AttackDamage - Before);
; 2471 : #endif
; 2472 : 			}
; 2473 : 
; 2474 : #if (ENABLE_SWITCH_CS_DAMAGEDEC == 1)
; 2475 : 			if(g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE
; 2476 : 				&& lpObj->Type == OBJ_USER
; 2477 : 				&& lpTargetObj->Type == OBJ_USER
; 2478 : 				&& lpObj->MapNumber == MAP_INDEX_CASTLESIEGE
; 2479 : 				&& lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  036b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  036b9	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  036be	83 f8 07	 cmp	 eax, 7
  036c1	75 52		 jne	 SHORT $LN543@Attack
  036c3	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  036c7	0f 85 44 01 00
	00		 jne	 $LN556@Attack
  036cd	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  036d1	75 42		 jne	 SHORT $LN543@Attack
  036d3	80 bb 23 01 00
	00 1e		 cmp	 BYTE PTR [ebx+291], 30	; 0000001eH
  036da	75 39		 jne	 SHORT $LN543@Attack
  036dc	80 bf 23 01 00
	00 1e		 cmp	 BYTE PTR [edi+291], 30	; 0000001eH
  036e3	75 30		 jne	 SHORT $LN543@Attack

; 2480 : 			{
; 2481 : 				if(lpObj->m_btCsJoinSide == lpTargetObj->m_btCsJoinSide)

  036e5	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  036eb	3a 87 5a 20 00
	00		 cmp	 al, BYTE PTR [edi+8282]

; 2482 : 				{
; 2483 : 					AttackDamage = AttackDamage * 20 / 100;

  036f1	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  036f4	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  036f7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  036fc	75 05		 jne	 SHORT $LN542@Attack
  036fe	c1 e1 02	 shl	 ecx, 2

; 2484 : 				}
; 2485 : 				else

  03701	eb 03		 jmp	 SHORT $LN940@Attack
$LN542@Attack:

; 2486 : 				{
; 2487 : 					AttackDamage = AttackDamage * 40 / 100;

  03703	c1 e1 03	 shl	 ecx, 3
$LN940@Attack:
  03706	f7 e9		 imul	 ecx
  03708	c1 fa 05	 sar	 edx, 5
  0370b	8b c2		 mov	 eax, edx
  0370d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03710	03 c2		 add	 eax, edx
  03712	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN543@Attack:

; 2488 : 				}
; 2489 : 			}
; 2490 : #endif
; 2491 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )

  03715	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03719	0f 85 f2 00 00
	00		 jne	 $LN556@Attack
  0371f	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  03723	0f 85 e8 00 00
	00		 jne	 $LN556@Attack

; 2492 : 			{
; 2493 : 				if ( lpTargetObj->Class == 283 )

  03729	b8 1b 01 00 00	 mov	 eax, 283		; 0000011bH
  0372e	66 39 87 90 00
	00 00		 cmp	 WORD PTR [edi+144], ax
  03735	75 66		 jne	 SHORT $LN549@Attack

; 2494 : 				{
; 2495 : 					if ( gObjCheckUsedBuffEffect(lpObj,BUFF_POT_BLESS) == TRUE )

  03737	6a 0a		 push	 10			; 0000000aH
  03739	53		 push	 ebx
  0373a	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0373f	83 c4 08	 add	 esp, 8
  03742	3c 01		 cmp	 al, 1
  03744	74 57		 je	 SHORT $LN549@Attack

; 2496 : 					{
; 2497 : 						//AttackDamage = AttackDamage;
; 2498 : 					}
; 2499 : 					else if ( gObjCheckUsedBuffEffect(lpObj,BUFF_POT_SOUL) == TRUE )

  03746	6a 0b		 push	 11			; 0000000bH
  03748	53		 push	 ebx
  03749	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0374e	83 c4 08	 add	 esp, 8
  03751	3c 01		 cmp	 al, 1
  03753	74 48		 je	 SHORT $LN549@Attack

; 2500 : 					{
; 2501 : 						//AttackDamage = AttackDamage;
; 2502 : 					}
; 2503 : 					else 
; 2504 : 					{
; 2505 : 						if ( lpObj->m_iAccumulatedDamage > 100 )

  03755	8b 83 68 20 00
	00		 mov	 eax, DWORD PTR [ebx+8296]
  0375b	83 f8 64	 cmp	 eax, 100		; 00000064H
  0375e	7e 1b		 jle	 SHORT $LN550@Attack

; 2506 : 						{
; 2507 : 							gObjWeaponDurDownInCastle(lpObj, lpTargetObj, 1);

  03760	6a 01		 push	 1
  03762	57		 push	 edi
  03763	53		 push	 ebx
  03764	e8 00 00 00 00	 call	 ?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDownInCastle

; 2508 : 							lpObj->m_iAccumulatedDamage = 0;
; 2509 : 						}
; 2510 : 						else

  03769	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0376c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0376f	c7 83 68 20 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+8296], 0
  03779	eb 0b		 jmp	 SHORT $LN551@Attack
$LN550@Attack:

; 2511 : 						{
; 2512 : 							lpObj->m_iAccumulatedDamage += AttackDamage;

  0377b	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  0377e	03 c1		 add	 eax, ecx
  03780	89 83 68 20 00
	00		 mov	 DWORD PTR [ebx+8296], eax
$LN551@Attack:

; 2513 : 						}
; 2514 : 
; 2515 : 						AttackDamage = AttackDamage * 5 / 100;

  03786	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  03789	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0378e	f7 e9		 imul	 ecx
  03790	c1 fa 05	 sar	 edx, 5
  03793	8b c2		 mov	 eax, edx
  03795	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03798	03 c2		 add	 eax, edx
  0379a	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN549@Attack:

; 2516 : 					}
; 2517 : 				}
; 2518 : 
; 2519 : 				if ( lpTargetObj->Class == 277 )

  0379d	b8 15 01 00 00	 mov	 eax, 277		; 00000115H
  037a2	66 39 87 90 00
	00 00		 cmp	 WORD PTR [edi+144], ax
  037a9	75 66		 jne	 SHORT $LN556@Attack

; 2520 : 				{
; 2521 : 					if ( gObjCheckUsedBuffEffect(lpObj,BUFF_POT_BLESS) == TRUE )

  037ab	6a 0a		 push	 10			; 0000000aH
  037ad	53		 push	 ebx
  037ae	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  037b3	83 c4 08	 add	 esp, 8
  037b6	3c 01		 cmp	 al, 1
  037b8	74 57		 je	 SHORT $LN556@Attack

; 2522 : 					{
; 2523 : 						//AttackDamage = AttackDamage;
; 2524 : 					}
; 2525 : 					else if ( gObjCheckUsedBuffEffect(lpObj,BUFF_POT_SOUL) == TRUE )

  037ba	6a 0b		 push	 11			; 0000000bH
  037bc	53		 push	 ebx
  037bd	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  037c2	83 c4 08	 add	 esp, 8
  037c5	3c 01		 cmp	 al, 1
  037c7	74 48		 je	 SHORT $LN556@Attack

; 2526 : 					{
; 2527 : 						//AttackDamage = AttackDamage;
; 2528 : 					}
; 2529 : 					else 
; 2530 : 					{
; 2531 : 						if ( lpObj->m_iAccumulatedDamage > 100 )

  037c9	8b 83 68 20 00
	00		 mov	 eax, DWORD PTR [ebx+8296]
  037cf	83 f8 64	 cmp	 eax, 100		; 00000064H
  037d2	7e 1b		 jle	 SHORT $LN557@Attack

; 2532 : 						{
; 2533 : 							gObjWeaponDurDownInCastle(lpObj, lpTargetObj, 1);

  037d4	6a 01		 push	 1
  037d6	57		 push	 edi
  037d7	53		 push	 ebx
  037d8	e8 00 00 00 00	 call	 ?gObjWeaponDurDownInCastle@@YAXPAUOBJECTSTRUCT@@0H@Z ; gObjWeaponDurDownInCastle

; 2534 : 							lpObj->m_iAccumulatedDamage = 0;
; 2535 : 						}
; 2536 : 						else

  037dd	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  037e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  037e3	c7 83 68 20 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+8296], 0
  037ed	eb 0b		 jmp	 SHORT $LN558@Attack
$LN557@Attack:

; 2537 : 						{
; 2538 : 							lpObj->m_iAccumulatedDamage += AttackDamage;

  037ef	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  037f2	03 c1		 add	 eax, ecx
  037f4	89 83 68 20 00
	00		 mov	 DWORD PTR [ebx+8296], eax
$LN558@Attack:

; 2539 : 						}
; 2540 : 
; 2541 : 						AttackDamage = AttackDamage * 5 / 100;

  037fa	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  037fd	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03802	f7 e9		 imul	 ecx
  03804	c1 fa 05	 sar	 edx, 5
  03807	8b c2		 mov	 eax, edx
  03809	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0380c	03 c2		 add	 eax, edx
  0380e	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN556@Attack:

; 2542 : 					}
; 2543 : 				}
; 2544 : 			}
; 2545 : 
; 2546 : 			if( gObjCheckUsedBuffEffect(lpObj,BUFF_INFINITY_ARROW2) == TRUE )

  03811	68 8f 00 00 00	 push	 143			; 0000008fH
  03816	53		 push	 ebx
  03817	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0381c	83 c4 08	 add	 esp, 8
  0381f	3c 01		 cmp	 al, 1
  03821	75 26		 jne	 SHORT $LN559@Attack

; 2547 : 				AttackDamage += AttackDamage/100.0f * lpObj->m_InfinityArrowDmgMul;

  03823	66 0f 6e 4d 1c	 movd	 xmm1, DWORD PTR _AttackDamage$[ebp]
  03828	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0382b	0f 28 c1	 movaps	 xmm0, xmm1
  0382e	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  03836	f3 0f 59 83 bc
	26 00 00	 mulss	 xmm0, DWORD PTR [ebx+9916]
  0383e	f3 0f 58 c1	 addss	 xmm0, xmm1
  03842	f3 0f 2c c0	 cvttss2si eax, xmm0
  03846	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN559@Attack:

; 2548 : 
; 2549 : 			if ( gObjFenrir( lpObj ) )

  03849	53		 push	 ebx
  0384a	e8 00 00 00 00	 call	 ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ; gObjFenrir
  0384f	83 c4 04	 add	 esp, 4
  03852	85 c0		 test	 eax, eax
  03854	74 33		 je	 SHORT $LN561@Attack

; 2550 : 			{
; 2551 : 				int iIncPercent = lpObj->pInventory[8].IsFenrirIncLastAttackDamage();

  03856	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  0385c	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  03862	e8 00 00 00 00	 call	 ?IsFenrirIncLastAttackDamage@CItem@@QAEHXZ ; CItem::IsFenrirIncLastAttackDamage
  03867	8b d0		 mov	 edx, eax

; 2552 : 
; 2553 : 				if ( iIncPercent > 0 )

  03869	85 d2		 test	 edx, edx
  0386b	7e 1c		 jle	 SHORT $LN561@Attack

; 2554 : 				{
; 2555 : 					AttackDamage += AttackDamage * iIncPercent / 100;

  0386d	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03870	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03875	0f af d1	 imul	 edx, ecx
  03878	f7 ea		 imul	 edx
  0387a	c1 fa 05	 sar	 edx, 5
  0387d	8b c2		 mov	 eax, edx
  0387f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03882	03 c2		 add	 eax, edx
  03884	03 c8		 add	 ecx, eax
  03886	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN561@Attack:

; 2556 : 				}
; 2557 : 			}
; 2558 : 
; 2559 : 			if ( gObjFenrir( lpTargetObj ) )

  03889	57		 push	 edi
  0388a	e8 00 00 00 00	 call	 ?gObjFenrir@@YAHPAUOBJECTSTRUCT@@@Z ; gObjFenrir
  0388f	83 c4 04	 add	 esp, 4
  03892	85 c0		 test	 eax, eax
  03894	74 32		 je	 SHORT $LN834@Attack

; 2560 : 			{
; 2561 : 				int iDecPercent = lpTargetObj->pInventory[8].IsFenrirDecLastAttackDamage();

  03896	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]
  0389c	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  038a2	e8 00 00 00 00	 call	 ?IsFenrirDecLastAttackDamage@CItem@@QAEHXZ ; CItem::IsFenrirDecLastAttackDamage
  038a7	8b d0		 mov	 edx, eax

; 2562 : 
; 2563 : 				if ( iDecPercent > 0 )

  038a9	85 d2		 test	 edx, edx
  038ab	7e 1b		 jle	 SHORT $LN834@Attack

; 2564 : 				{
; 2565 : 					AttackDamage -= AttackDamage * iDecPercent / 100;

  038ad	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  038b0	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  038b5	0f af d1	 imul	 edx, ecx
  038b8	f7 ea		 imul	 edx
  038ba	c1 fa 05	 sar	 edx, 5
  038bd	8b c2		 mov	 eax, edx
  038bf	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  038c2	03 c2		 add	 eax, edx
  038c4	03 c8		 add	 ecx, eax
  038c6	eb 03		 jmp	 SHORT $LN563@Attack
$LN834@Attack:
  038c8	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
$LN563@Attack:

; 2566 : 				}
; 2567 : 			}
; 2568 : #if (ENABLETEST_MUUN == 1)
; 2569 : 			int MuunDecrease = 0;
; 2570 : 			if (g_CMuunSystem.GetMuunItemValueOfOptType(lpTargetObj, 6, &MuunDecrease, 0)) {
; 2571 : 				AttackDamage -= MuunDecrease;
; 2572 : 			}
; 2573 : #endif
; 2574 : 			if ( AttackDamage < 0 )

  038cb	33 c0		 xor	 eax, eax
  038cd	85 c9		 test	 ecx, ecx
  038cf	0f 48 c8	 cmovs	 ecx, eax
  038d2	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 2575 : 				AttackDamage = 0;
; 2576 : 
; 2577 : 			if ( skill == 76 )

  038d5	83 fe 4c	 cmp	 esi, 76			; 0000004cH
  038d8	0f 85 35 01 00
	00		 jne	 $LN835@Attack

; 2578 : 			{
; 2579 : 				if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  038de	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  038e2	0f 85 2b 01 00
	00		 jne	 $LN835@Attack
  038e8	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  038ec	0f 85 21 01 00
	00		 jne	 $LN835@Attack

; 2580 : 				{
; 2581 : 					if ( AttackDamage > 0 )

  038f2	85 c9		 test	 ecx, ecx
  038f4	0f 8e 19 01 00
	00		 jle	 $LN835@Attack

; 2582 : 					{
; 2583 : #if (GS_CASTLE == 1)
; 2584 : 						if(lpObj->m_btCsJoinSide == 0 || lpObj->m_btCsJoinSide != lpTargetObj->m_btCsJoinSide)

  038fa	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  03900	84 c0		 test	 al, al
  03902	74 0c		 je	 SHORT $LN569@Attack
  03904	3a 87 5a 20 00
	00		 cmp	 al, BYTE PTR [edi+8282]
  0390a	0f 84 03 01 00
	00		 je	 $LN835@Attack
$LN569@Attack:

; 2585 : 						{
; 2586 : #endif
; 2587 : 						int iEquipmentPos = rand()%5 + 2;	// Select and Armor

  03910	e8 00 00 00 00	 call	 _rand
  03915	99		 cdq
  03916	b9 05 00 00 00	 mov	 ecx, 5
  0391b	f7 f9		 idiv	 ecx
  0391d	8d 42 02	 lea	 eax, DWORD PTR [edx+2]

; 2588 : 						CItem * lpEquipment = &lpTargetObj->pInventory[iEquipmentPos];

  03920	69 f0 d4 00 00
	00		 imul	 esi, eax, 212
  03926	89 85 98 fe ff
	ff		 mov	 DWORD PTR _iEquipmentPos$1$[ebp], eax
  0392c	03 b7 c0 11 00
	00		 add	 esi, DWORD PTR [edi+4544]

; 2589 : 
; 2590 : 						if ( lpEquipment && lpEquipment->IsItem() && !lpEquipment->m_bLuckySet)

  03932	0f 84 d5 00 00
	00		 je	 $LN864@Attack
  03938	8b ce		 mov	 ecx, esi
  0393a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0393f	85 c0		 test	 eax, eax
  03941	0f 84 c6 00 00
	00		 je	 $LN864@Attack
  03947	80 be ce 00 00
	00 00		 cmp	 BYTE PTR [esi+206], 0
  0394e	0f 85 b9 00 00
	00		 jne	 $LN864@Attack

; 2591 : 						{
; 2592 : 							int ItemPerc = 50;
; 2593 : 
; 2594 : 							if( lpObj->m_MPSkillOpt.MpsDownDur1 != 0.0f )

  03954	f3 0f 10 83 c8
	06 00 00	 movss	 xmm0, DWORD PTR [ebx+1736]
  0395c	0f 57 c9	 xorps	 xmm1, xmm1
  0395f	0f 2e c1	 ucomiss xmm0, xmm1
  03962	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  03967	9f		 lahf
  03968	f6 c4 44	 test	 ah, 68			; 00000044H
  0396b	7b 1b		 jnp	 SHORT $LN572@Attack

; 2595 : 							{
; 2596 : 								ItemPerc += lpObj->m_MPSkillOpt.btMpsDownDur1Level*7;

  0396d	0f b6 83 cc 06
	00 00		 movzx	 eax, BYTE PTR [ebx+1740]
  03974	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0397b	2b c8		 sub	 ecx, eax

; 2597 : 							}
; 2598 : 
; 2599 : 							if( ItemPerc < 0 )

  0397d	b8 01 00 00 00	 mov	 eax, 1
  03982	83 c1 32	 add	 ecx, 50			; 00000032H
  03985	0f 48 c8	 cmovs	 ecx, eax
$LN572@Attack:

; 2603 : 
; 2604 : 							for(int iBuffIndex = 0; iBuffIndex < lpTargetObj->btEffectCount; iBuffIndex++)

  03988	66 0f 6e c1	 movd	 xmm0, ecx
  0398c	33 c9		 xor	 ecx, ecx
  0398e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03991	0f b6 97 d6 01
	00 00		 movzx	 edx, BYTE PTR [edi+470]
  03998	f3 0f 59 46 24	 mulss	 xmm0, DWORD PTR [esi+36]
  0399d	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  039a5	f3 0f 2c c0	 cvttss2si eax, xmm0
  039a9	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _iDurEquipment$1$[ebp], eax
  039af	85 d2		 test	 edx, edx
  039b1	7e 27		 jle	 SHORT $LN15@Attack

; 2600 : 								ItemPerc = 1;
; 2601 : 
; 2602 : 							int iDurEquipment = (int)(lpEquipment->m_Durability * ItemPerc / 100.0f);

  039b3	8d 83 d8 01 00
	00		 lea	 eax, DWORD PTR [ebx+472]
  039b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL16@Attack:

; 2605 : 							{
; 2606 : 								if( lpObj->pEffectInfo[iBuffIndex].btEffectNum == BUFF_TALISMAN_ITEMPROTECT )

  039c0	80 38 64	 cmp	 BYTE PTR [eax], 100	; 00000064H
  039c3	74 10		 je	 SHORT $LN794@Attack

; 2603 : 
; 2604 : 							for(int iBuffIndex = 0; iBuffIndex < lpTargetObj->btEffectCount; iBuffIndex++)

  039c5	41		 inc	 ecx
  039c6	83 c0 1c	 add	 eax, 28			; 0000001cH
  039c9	3b ca		 cmp	 ecx, edx
  039cb	7c f3		 jl	 SHORT $LL16@Attack

; 2939 : 							{
; 2940 : 								if( lpObj->pEffectInfo[iBuffIndex].btEffectNum == BUFF_TALISMAN_ITEMPROTECT )

  039cd	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _iDurEquipment$1$[ebp]
  039d3	eb 05		 jmp	 SHORT $LN15@Attack
$LN794@Attack:

; 2607 : 								{
; 2608 : 									iDurEquipment = lpEquipment->m_Durability;

  039d5	f3 0f 2c 46 24	 cvttss2si eax, DWORD PTR [esi+36]
$LN15@Attack:
  039da	66 0f 6e c0	 movd	 xmm0, eax

; 2609 : 									break;
; 2610 : 								}
; 2611 : 							}
; 2612 : 
; 2613 : 							// need to rewrite lucky system
; 2614 : 							if( lpEquipment->m_bLuckySet )
; 2615 : 							{
; 2616 : 								iDurEquipment = lpEquipment->m_Durability;
; 2617 : 							}
; 2618 : 
; 2619 : 							lpEquipment->m_Durability = (float)iDurEquipment;

  039de	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2620 : 
; 2621 : 							if ( lpEquipment->m_Durability < 0.0f )

  039e1	0f 2f c8	 comiss	 xmm1, xmm0
  039e4	f3 0f 11 46 24	 movss	 DWORD PTR [esi+36], xmm0
  039e9	76 07		 jbe	 SHORT $LN575@Attack

; 2622 : 							{
; 2623 : 								lpEquipment->m_Durability = 0.0f;

  039eb	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
$LN575@Attack:

; 2624 : 							}
; 2625 : 
; 2626 : 							GCItemDurSend(lpTargetObj->m_Index, iEquipmentPos, (BYTE)lpEquipment->m_Durability, 0);

  039f2	f3 0f 2c 46 24	 cvttss2si eax, DWORD PTR [esi+36]
  039f7	6a 00		 push	 0
  039f9	0f b6 c0	 movzx	 eax, al
  039fc	50		 push	 eax
  039fd	ff b5 98 fe ff
	ff		 push	 DWORD PTR _iEquipmentPos$1$[ebp]
  03a03	ff 37		 push	 DWORD PTR [edi]
  03a05	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  03a0a	83 c4 10	 add	 esp, 16			; 00000010H
$LN864@Attack:
  03a0d	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
$LN835@Attack:

; 2627 : 						}
; 2628 : #if (GS_CASTLE == 1)
; 2629 : 						}
; 2630 : #endif
; 2631 : 					}
; 2632 : 				}
; 2633 : 			}
; 2634 : 
; 2635 : 			if ( !byReflect )

  03a13	80 7d 28 00	 cmp	 BYTE PTR _byReflect$[ebp], 0
  03a17	0f 57 d2	 xorps	 xmm2, xmm2
  03a1a	0f 85 e0 00 00
	00		 jne	 $LN581@Attack

; 2636 : 			{
; 2637 : 				if( lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery > 0.0f &&
; 2638 : 					lpObj->Type == OBJ_USER &&

  03a20	f3 0f 10 8b 08
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1800]
  03a28	0f 2f ca	 comiss	 xmm1, xmm2
  03a2b	76 1f		 jbe	 SHORT $LN577@Attack
  03a2d	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03a31	75 19		 jne	 SHORT $LN577@Attack
  03a33	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03a37	75 13		 jne	 SHORT $LN577@Attack

; 2639 : 					lpTargetObj->Type == OBJ_USER )
; 2640 : 				{
; 2641 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsTwoHandSwordMastery;

  03a39	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03a3e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03a41	f3 0f 58 c1	 addss	 xmm0, xmm1
  03a45	f3 0f 2c c0	 cvttss2si eax, xmm0
  03a49	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN577@Attack:

; 2642 : 				}
; 2643 : 
; 2644 : 				if( lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery > 0.0f &&
; 2645 : 					lpObj->Type == OBJ_USER &&

  03a4c	f3 0f 10 8b 34
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1844]
  03a54	0f 2f ca	 comiss	 xmm1, xmm2
  03a57	76 1f		 jbe	 SHORT $LN578@Attack
  03a59	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03a5d	75 19		 jne	 SHORT $LN578@Attack
  03a5f	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03a63	75 13		 jne	 SHORT $LN578@Attack

; 2646 : 					lpTargetObj->Type == OBJ_USER )
; 2647 : 				{
; 2648 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsTwoHandStaffMastery;

  03a65	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03a6a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03a6d	f3 0f 58 c1	 addss	 xmm0, xmm1
  03a71	f3 0f 2c c0	 cvttss2si eax, xmm0
  03a75	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN578@Attack:

; 2649 : 				}
; 2650 : 
; 2651 : 				if( lpObj->m_MPSkillOpt.MpsCrossbowMastery > 0.0f &&
; 2652 : 					lpObj->Type == OBJ_USER &&

  03a78	f3 0f 10 8b 48
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1864]
  03a80	0f 2f ca	 comiss	 xmm1, xmm2
  03a83	76 1f		 jbe	 SHORT $LN579@Attack
  03a85	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03a89	75 19		 jne	 SHORT $LN579@Attack
  03a8b	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03a8f	75 13		 jne	 SHORT $LN579@Attack

; 2653 : 					lpTargetObj->Type == OBJ_USER )
; 2654 : 				{
; 2655 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsCrossbowMastery;

  03a91	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03a96	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03a99	f3 0f 58 c1	 addss	 xmm0, xmm1
  03a9d	f3 0f 2c c0	 cvttss2si eax, xmm0
  03aa1	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN579@Attack:

; 2656 : 				}
; 2657 : 
; 2658 : 				if( lpObj->m_MPSkillOpt.MpsStickMastery > 0.0f &&
; 2659 : 					lpObj->Type == OBJ_USER &&

  03aa4	f3 0f 10 8b 88
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1928]
  03aac	0f 2f ca	 comiss	 xmm1, xmm2
  03aaf	76 1f		 jbe	 SHORT $LN580@Attack
  03ab1	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03ab5	75 19		 jne	 SHORT $LN580@Attack
  03ab7	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03abb	75 13		 jne	 SHORT $LN580@Attack

; 2660 : 					lpTargetObj->Type == OBJ_USER )
; 2661 : 				{
; 2662 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsStickMastery;

  03abd	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03ac2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03ac5	f3 0f 58 c1	 addss	 xmm0, xmm1
  03ac9	f3 0f 2c c0	 cvttss2si eax, xmm0
  03acd	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN580@Attack:

; 2663 : 				}
; 2664 : 
; 2665 : 				if( lpObj->m_MPSkillOpt.MpsScepterMastery > 0.0f &&
; 2666 : 					lpObj->Type == OBJ_USER &&

  03ad0	f3 0f 10 8b b8
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1976]
  03ad8	0f 2f ca	 comiss	 xmm1, xmm2
  03adb	76 23		 jbe	 SHORT $LN581@Attack
  03add	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03ae1	0f 85 03 01 00
	00		 jne	 $LN582@Attack
  03ae7	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03aeb	75 13		 jne	 SHORT $LN581@Attack

; 2667 : 					lpTargetObj->Type == OBJ_USER )
; 2668 : 				{
; 2669 : 					AttackDamage += lpObj->m_MPSkillOpt.MpsScepterMastery;

  03aed	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03af2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03af5	f3 0f 58 c1	 addss	 xmm0, xmm1
  03af9	f3 0f 2c c0	 cvttss2si eax, xmm0
  03afd	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN581@Attack:

; 2670 : 				}
; 2671 : 			}
; 2672 : 
; 2673 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03b00	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03b04	0f 85 e0 00 00
	00		 jne	 $LN582@Attack
  03b0a	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03b0e	0f 85 d6 00 00
	00		 jne	 $LN582@Attack

; 2674 : 			{
; 2675 : 				if( skill == AT_SKILL_RAGEFIGHTER_DRAGONSLAYER && 

  03b14	81 fe 09 01 00
	00		 cmp	 esi, 265		; 00000109H
  03b1a	0f 85 83 00 00
	00		 jne	 $LN836@Attack
  03b20	e8 00 00 00 00	 call	 _rand
  03b25	99		 cdq
  03b26	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03b2b	f7 f9		 idiv	 ecx
  03b2d	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR _Energy$1$[ebp]
  03b33	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03b38	8b ca		 mov	 ecx, edx
  03b3a	f7 ee		 imul	 esi
  03b3c	c1 fa 05	 sar	 edx, 5
  03b3f	8b c2		 mov	 eax, edx
  03b41	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03b44	83 c0 0a	 add	 eax, 10			; 0000000aH
  03b47	03 c2		 add	 eax, edx
  03b49	3b c8		 cmp	 ecx, eax
  03b4b	7d 56		 jge	 SHORT $LN836@Attack

; 2676 : 					rand()%100 < (10+Energy/100) )
; 2677 : 				{
; 2678 : 					bDragonKickSDAttackSuccess = TRUE;
; 2679 : 					int nDecreaseSDRate = 10 + Energy/30;

  03b4d	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  03b52	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03b57	f7 ee		 imul	 esi

; 2680 : 
; 2681 : 					if( nDecreaseSDRate > 100 )

  03b59	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03b5e	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _bDragonKickSDAttackSuccess$1$[ebp], 1
  03b68	03 d6		 add	 edx, esi

; 2682 : 						nDecreaseSDRate = 100;
; 2683 : 
; 2684 : 					int nDecreaseSD = lpTargetObj->iShield*nDecreaseSDRate/100;

  03b6a	8b b7 2c 01 00
	00		 mov	 esi, DWORD PTR [edi+300]
  03b70	c1 fa 04	 sar	 edx, 4
  03b73	8b c2		 mov	 eax, edx
  03b75	83 c2 0a	 add	 edx, 10			; 0000000aH
  03b78	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03b7b	03 c2		 add	 eax, edx
  03b7d	83 f8 64	 cmp	 eax, 100		; 00000064H
  03b80	0f 4f c1	 cmovg	 eax, ecx
  03b83	8b ce		 mov	 ecx, esi
  03b85	0f af c8	 imul	 ecx, eax
  03b88	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03b8d	f7 e9		 imul	 ecx
  03b8f	c1 fa 05	 sar	 edx, 5
  03b92	8b c2		 mov	 eax, edx
  03b94	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03b97	03 c2		 add	 eax, edx

; 2685 : 					lpTargetObj->iShield -= nDecreaseSD;

  03b99	2b f0		 sub	 esi, eax
  03b9b	89 b7 2c 01 00
	00		 mov	 DWORD PTR [edi+300], esi

; 2686 : 					lpTargetObj->Life -= AttackDamage;
; 2687 : 					iTotalShieldDamage += nDecreaseSD;
; 2688 : 				}
; 2689 : 				else

  03ba1	eb 1f		 jmp	 SHORT $LN942@Attack
$LN836@Attack:

; 2690 : 				{
; 2691 : 					iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, AttackDamage);

  03ba3	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
  03ba6	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  03bac	57		 push	 edi
  03bad	53		 push	 ebx
  03bae	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 2692 : 					lpTargetObj->iShield -= iTempShieldDamage;
; 2693 : 					lpTargetObj->Life -= AttackDamage - iTempShieldDamage;

  03bb3	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  03bb6	29 87 2c 01 00
	00		 sub	 DWORD PTR [edi+300], eax
  03bbc	2b c8		 sub	 ecx, eax
  03bbe	66 0f 6e c1	 movd	 xmm0, ecx
$LN942@Attack:
  03bc2	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  03bca	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03bcd	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _iTotalShieldDamage$1$[ebp], eax
  03bd3	f3 0f 5c c8	 subss	 xmm1, xmm0
  03bd7	0f 57 c0	 xorps	 xmm0, xmm0
  03bda	f3 0f 11 8f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm1

; 2694 : 					iTotalShieldDamage += iTempShieldDamage;
; 2695 : 				}
; 2696 : 
; 2697 : 				if ( lpTargetObj->Life < 0.0f )

  03be2	0f 2f c1	 comiss	 xmm0, xmm1

; 2698 : 				{
; 2699 : 					lpTargetObj->Life = 0.0f;
; 2700 : 				}
; 2701 : 			}
; 2702 : 			else

  03be5	e9 86 02 00 00	 jmp	 $LN943@Attack
$LN582@Attack:
  03bea	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 2703 : 			{
; 2704 : 				lpTargetObj->Life -= AttackDamage;

  03bef	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  03bf7	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03bfa	f3 0f 5c c8	 subss	 xmm1, xmm0

; 2705 : 
; 2706 : 				if ( lpTargetObj->Life < 0.0f )

  03bfe	0f 2f d1	 comiss	 xmm2, xmm1

; 2707 : 				{
; 2708 : 					lpTargetObj->Life = 0.0f;
; 2709 : 				}
; 2710 : 			}
; 2711 : 		}
; 2712 : 	}	
; 2713 : 	else

  03c01	e9 62 02 00 00	 jmp	 $LN944@Attack
$LN95@Attack:

; 2714 : 	{
; 2715 : 		if( skill == AT_SKILL_LIGHTEXPLODE )

  03c06	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
  03c0c	81 fe d8 00 00
	00		 cmp	 esi, 216		; 000000d8H
  03c12	0f 85 82 00 00
	00		 jne	 $LN596@Attack

; 2716 : 		{
; 2717 : 			if( g_ShieldSystemOn ==  TRUE )

  03c18	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 1 ; g_ShieldSystemOn
  03c1f	75 49		 jne	 SHORT $LN590@Attack

; 2718 : 			{
; 2719 : 				if( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03c21	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03c25	75 43		 jne	 SHORT $LN590@Attack
  03c27	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03c2b	75 3d		 jne	 SHORT $LN590@Attack

; 2720 : 				{
; 2721 : 					if( MissCheckPvP(lpObj,lpTargetObj,skill,skillSuccess,magicsend,bAllMiss, byBarrageCount ) == FALSE )

  03c2d	ff 75 24	 push	 DWORD PTR _byBarrageCount$[ebp]
  03c30	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  03c36	8d 85 a8 fe ff
	ff		 lea	 eax, DWORD PTR _bAllMiss$[ebp]
  03c3c	50		 push	 eax
  03c3d	ff b5 ac fe ff
	ff		 push	 DWORD PTR _magicsend$1$[ebp]
  03c43	ff b5 cc fe ff
	ff		 push	 DWORD PTR _skillSuccess$1$[ebp]
  03c49	56		 push	 esi
  03c4a	57		 push	 edi
  03c4b	53		 push	 ebx
  03c4c	e8 00 00 00 00	 call	 ?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
  03c51	85 c0		 test	 eax, eax
  03c53	75 45		 jne	 SHORT $LN596@Attack
$LN956@Attack:
  03c55	5e		 pop	 esi
  03c56	5f		 pop	 edi

; 2722 : 					{
; 2723 : 						return FALSE;

  03c57	33 c0		 xor	 eax, eax
  03c59	5b		 pop	 ebx

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  03c5a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03c5d	33 cd		 xor	 ecx, ebp
  03c5f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  03c64	8b e5		 mov	 esp, ebp
  03c66	5d		 pop	 ebp
  03c67	c2 24 00	 ret	 36			; 00000024H
$LN590@Attack:

; 2724 : 					}
; 2725 : 				}
; 2726 : 				else
; 2727 : 				{
; 2728 : 					if( MissCheck(lpObj,lpTargetObj,skill,skillSuccess,magicsend,bAllMiss, byBarrageCount) == FALSE )
; 2729 : 					{
; 2730 : 						return FALSE;
; 2731 : 					}
; 2732 : 				}
; 2733 : 			}
; 2734 : 			else
; 2735 : 			{
; 2736 : 				if( MissCheck(lpObj,lpTargetObj,skill,skillSuccess,magicsend,bAllMiss, byBarrageCount) == FALSE )

  03c6a	ff 75 24	 push	 DWORD PTR _byBarrageCount$[ebp]
  03c6d	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  03c73	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _bAllMiss$[ebp]
  03c79	52		 push	 edx
  03c7a	ff b5 ac fe ff
	ff		 push	 DWORD PTR _magicsend$1$[ebp]
  03c80	ff b5 cc fe ff
	ff		 push	 DWORD PTR _skillSuccess$1$[ebp]
  03c86	8b 01		 mov	 eax, DWORD PTR [ecx]
  03c88	68 d8 00 00 00	 push	 216			; 000000d8H
  03c8d	57		 push	 edi
  03c8e	53		 push	 ebx
  03c8f	ff 50 04	 call	 DWORD PTR [eax+4]
  03c92	85 c0		 test	 eax, eax
  03c94	0f 84 a8 f6 ff
	ff		 je	 $LN955@Attack
$LN596@Attack:

; 2737 : 				{
; 2738 : 					return FALSE;
; 2739 : 				}
; 2740 : 			}
; 2741 : 		}
; 2742 : 
; 2743 : 
; 2744 : #if(GS_CASTLE == 1)
; 2745 : 		if(g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE
; 2746 : 			&& lpObj->Type == OBJ_USER
; 2747 : 			&& lpTargetObj->Type == OBJ_USER
; 2748 : 			&& lpObj->MapNumber == MAP_INDEX_CASTLESIEGE
; 2749 : 			&& lpTargetObj->MapNumber == MAP_INDEX_CASTLESIEGE )

  03c9a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  03c9f	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  03ca4	83 f8 07	 cmp	 eax, 7
  03ca7	75 5d		 jne	 SHORT $LN600@Attack
  03ca9	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03cad	75 57		 jne	 SHORT $LN600@Attack
  03caf	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03cb3	75 51		 jne	 SHORT $LN600@Attack
  03cb5	80 bb 23 01 00
	00 1e		 cmp	 BYTE PTR [ebx+291], 30	; 0000001eH
  03cbc	75 48		 jne	 SHORT $LN600@Attack
  03cbe	80 bf 23 01 00
	00 1e		 cmp	 BYTE PTR [edi+291], 30	; 0000001eH
  03cc5	75 3f		 jne	 SHORT $LN600@Attack

; 2750 : 		{
; 2751 : 			if(lpObj->m_btCsJoinSide == lpTargetObj->m_btCsJoinSide)

  03cc7	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  03ccd	3a 87 5a 20 00
	00		 cmp	 al, BYTE PTR [edi+8282]
  03cd3	75 0b		 jne	 SHORT $LN598@Attack

; 2752 : 			{
; 2753 : 				AttackDamage = AttackDamage * 20 / 100;

  03cd5	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03cd8	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  03cdb	c1 e1 02	 shl	 ecx, 2
  03cde	eb 12		 jmp	 SHORT $LN945@Attack
$LN598@Attack:

; 2754 : 			}
; 2755 : 			else if(g_ShieldSystemOn == FALSE)

  03ce0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_ShieldSystemOn@@3HA, 0 ; g_ShieldSystemOn
  03ce7	75 1d		 jne	 SHORT $LN600@Attack

; 2756 : 			{
; 2757 : 				AttackDamage = AttackDamage * 40 / 100;

  03ce9	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03cec	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  03cef	c1 e1 03	 shl	 ecx, 3
$LN945@Attack:
  03cf2	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03cf7	f7 e9		 imul	 ecx
  03cf9	c1 fa 05	 sar	 edx, 5
  03cfc	8b c2		 mov	 eax, edx
  03cfe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03d01	03 c2		 add	 eax, edx
  03d03	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN600@Attack:

; 2758 : 			}
; 2759 : 		}
; 2760 : #endif
; 2761 : 
; 2762 : 		if ( skill != AT_SKILL_EXPLOSION && skill != AT_SKILL_LIGHTEXPLODE )

  03d06	83 fe 4f	 cmp	 esi, 79			; 0000004fH
  03d09	74 1c		 je	 SHORT $LN601@Attack
  03d0b	81 fe d8 00 00
	00		 cmp	 esi, 216		; 000000d8H
  03d11	74 14		 je	 SHORT $LN601@Attack

; 2763 : 		{
; 2764 : 			bDamageReflect = TRUE;

  03d13	c7 85 88 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _bDamageReflect$1$[ebp], 1

; 2765 : 			MsgDamage = 4;

  03d1d	c7 85 c8 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _MsgDamage$[ebp], 4
$LN601@Attack:

; 2766 : 		}
; 2767 : #if(__NOVUS__==1)
; 2768 : 		if( lpObj->Type == OBJ_MONSTER && lpTargetObj->Type == OBJ_USER )
; 2769 : 		{
; 2770 : 			if( g_SoulSystem.IsMap(lpTargetObj->MapNumber) && !g_SoulSystem.WithSoul(lpTargetObj) )
; 2771 : 			{
; 2772 : 				AttackDamage = lpTargetObj->MaxLife + lpTargetObj->AddLife + 1000;
; 2773 : 				LogAddC(2, "[DEBUG] [SoulSystem] [%s] Defense has been ignored", lpTargetObj->Name);
; 2774 : 			}
; 2775 : 		}
; 2776 : #endif
; 2777 : 		if( gObjCheckUsedBuffEffect(lpObj,BUFF_INFINITY_ARROW2) == TRUE )

  03d27	68 8f 00 00 00	 push	 143			; 0000008fH
  03d2c	53		 push	 ebx
  03d2d	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  03d32	83 c4 08	 add	 esp, 8
  03d35	3c 01		 cmp	 al, 1
  03d37	75 26		 jne	 SHORT $LN837@Attack

; 2778 : 			AttackDamage += AttackDamage/100.0f * lpObj->m_InfinityArrowDmgMul;

  03d39	66 0f 6e 4d 1c	 movd	 xmm1, DWORD PTR _AttackDamage$[ebp]
  03d3e	0f 5b c9	 cvtdq2ps xmm1, xmm1
  03d41	0f 28 c1	 movaps	 xmm0, xmm1
  03d44	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  03d4c	f3 0f 59 83 bc
	26 00 00	 mulss	 xmm0, DWORD PTR [ebx+9916]
  03d54	f3 0f 58 c1	 addss	 xmm0, xmm1
  03d58	f3 0f 2c c0	 cvttss2si eax, xmm0
  03d5c	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN837@Attack:

; 2779 : 
; 2780 : 		if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03d5f	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  03d63	0f 85 e5 00 00
	00		 jne	 $LN603@Attack
  03d69	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03d6d	0f 85 db 00 00
	00		 jne	 $LN603@Attack

; 2781 : 		{
; 2782 : 			if( skill == AT_SKILL_RAGEFIGHTER_DRAGONSLAYER && 

  03d73	81 fe 09 01 00
	00		 cmp	 esi, 265		; 00000109H
  03d79	0f 85 89 00 00
	00		 jne	 $LN838@Attack
  03d7f	e8 00 00 00 00	 call	 _rand
  03d84	99		 cdq
  03d85	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03d8a	f7 f9		 idiv	 ecx
  03d8c	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR _Energy$1$[ebp]
  03d92	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03d97	8b ca		 mov	 ecx, edx
  03d99	f7 ee		 imul	 esi
  03d9b	c1 fa 05	 sar	 edx, 5
  03d9e	8b c2		 mov	 eax, edx
  03da0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03da3	83 c0 0a	 add	 eax, 10			; 0000000aH
  03da6	03 c2		 add	 eax, edx
  03da8	3b c8		 cmp	 ecx, eax
  03daa	7d 5c		 jge	 SHORT $LN838@Attack

; 2783 : 					rand()%100 < (10+Energy/100) )
; 2784 : 			{
; 2785 : 				bDragonKickSDAttackSuccess = TRUE;
; 2786 : 				int nDecreaseSDRate = 10 + Energy/30;

  03dac	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  03db1	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  03db6	f7 ee		 imul	 esi

; 2787 : 
; 2788 : 				if( nDecreaseSDRate > 100 )

  03db8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  03dbd	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _bDragonKickSDAttackSuccess$1$[ebp], 1
  03dc7	03 d6		 add	 edx, esi

; 2789 : 					nDecreaseSDRate = 100;
; 2790 : 
; 2791 : 				int nDecreaseSD = lpTargetObj->iShield*nDecreaseSDRate/100;

  03dc9	8b b7 2c 01 00
	00		 mov	 esi, DWORD PTR [edi+300]
  03dcf	c1 fa 04	 sar	 edx, 4
  03dd2	8b c2		 mov	 eax, edx
  03dd4	83 c2 0a	 add	 edx, 10			; 0000000aH
  03dd7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03dda	03 c2		 add	 eax, edx
  03ddc	83 f8 64	 cmp	 eax, 100		; 00000064H
  03ddf	0f 4f c1	 cmovg	 eax, ecx
  03de2	8b ce		 mov	 ecx, esi
  03de4	0f af c8	 imul	 ecx, eax
  03de7	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03dec	f7 e9		 imul	 ecx
  03dee	c1 fa 05	 sar	 edx, 5
  03df1	8b ca		 mov	 ecx, edx
  03df3	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  03df6	03 ca		 add	 ecx, edx

; 2792 : 				lpTargetObj->iShield -= nDecreaseSD;

  03df8	2b f1		 sub	 esi, ecx
  03dfa	89 8d c4 fe ff
	ff		 mov	 DWORD PTR _iTotalShieldDamage$1$[ebp], ecx
  03e00	89 b7 2c 01 00
	00		 mov	 DWORD PTR [edi+300], esi

; 2793 : 				lpTargetObj->Life -= AttackDamage;
; 2794 : 				iTotalShieldDamage += nDecreaseSD;
; 2795 : 			}
; 2796 : 			else

  03e06	eb 27		 jmp	 SHORT $LN946@Attack
$LN838@Attack:

; 2797 : 			{
; 2798 : 				iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, AttackDamage);

  03e08	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
  03e0b	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  03e11	57		 push	 edi
  03e12	53		 push	 ebx
  03e13	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage
  03e18	8b c8		 mov	 ecx, eax
  03e1a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _iTotalShieldDamage$1$[ebp], eax

; 2799 : 				lpTargetObj->iShield -= iTempShieldDamage;
; 2800 : 				lpTargetObj->Life -= AttackDamage - iTempShieldDamage;

  03e20	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  03e23	29 8f 2c 01 00
	00		 sub	 DWORD PTR [edi+300], ecx
  03e29	2b c1		 sub	 eax, ecx
  03e2b	66 0f 6e c0	 movd	 xmm0, eax
$LN946@Attack:
  03e2f	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  03e37	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03e3a	f3 0f 5c c8	 subss	 xmm1, xmm0
  03e3e	0f 57 c0	 xorps	 xmm0, xmm0
  03e41	f3 0f 11 8f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm1

; 2801 : 				iTotalShieldDamage += iTempShieldDamage;
; 2802 : 			}
; 2803 : 
; 2804 : 			if ( lpTargetObj->Life < 0.0f )

  03e49	0f 2f c1	 comiss	 xmm0, xmm1

; 2805 : 			{
; 2806 : 				lpTargetObj->Life = 0.0f;
; 2807 : 			}
; 2808 : 		}
; 2809 : 		else

  03e4c	eb 22		 jmp	 SHORT $LN943@Attack
$LN603@Attack:
  03e4e	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 2810 : 		{
; 2811 : 			lpTargetObj->Life -= AttackDamage;

  03e53	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  03e5b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  03e5e	f3 0f 5c c8	 subss	 xmm1, xmm0
  03e62	0f 57 c0	 xorps	 xmm0, xmm0

; 2812 : 
; 2813 : 			if ( lpTargetObj->Life < 0.0f )

  03e65	0f 2f c1	 comiss	 xmm0, xmm1
$LN944@Attack:

; 2810 : 		{
; 2811 : 			lpTargetObj->Life -= AttackDamage;

  03e68	f3 0f 11 8f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm1
$LN943@Attack:

; 2812 : 
; 2813 : 			if ( lpTargetObj->Life < 0.0f )

  03e70	76 0a		 jbe	 SHORT $LN839@Attack

; 2814 : 			{
; 2815 : 				lpTargetObj->Life = 0.0f;

  03e72	c7 87 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+216], 0
$LN839@Attack:

; 2816 : 			}
; 2817 : 		}
; 2818 : 	}
; 2819 : 
; 2820 : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  03e7c	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  03e80	75 44		 jne	 SHORT $LN842@Attack

; 2821 : 	{
; 2822 : 		gObjAddMsgSendDelay(lpTargetObj, 0, lpObj->m_Index, 100, 0);

  03e82	6a 00		 push	 0
  03e84	6a 64		 push	 100			; 00000064H
  03e86	ff 33		 push	 DWORD PTR [ebx]
  03e88	6a 00		 push	 0
  03e8a	57		 push	 edi
  03e8b	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 2823 : 		lpTargetObj->LastAttackerID = lpObj->m_Index;

  03e90	66 8b 03	 mov	 ax, WORD PTR [ebx]
  03e93	83 c4 14	 add	 esp, 20			; 00000014H

; 2824 : 
; 2825 : 		if ( lpTargetObj->m_iCurrentAI )

  03e96	83 bf d0 20 00
	00 00		 cmp	 DWORD PTR [edi+8400], 0
  03e9d	66 89 87 3e 06
	00 00		 mov	 WORD PTR [edi+1598], ax
  03ea4	74 20		 je	 SHORT $LN842@Attack

; 2826 : 		{
; 2827 : 			lpTargetObj->m_Agro.IncAgro(lpObj->m_Index, AttackDamage / 50);

  03ea6	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  03eab	8d 8f ec 20 00
	00		 lea	 ecx, DWORD PTR [edi+8428]
  03eb1	f7 6d 1c	 imul	 DWORD PTR _AttackDamage$[ebp]
  03eb4	c1 fa 04	 sar	 edx, 4
  03eb7	8b c2		 mov	 eax, edx
  03eb9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  03ebc	03 c2		 add	 eax, edx
  03ebe	50		 push	 eax
  03ebf	ff 33		 push	 DWORD PTR [ebx]
  03ec1	e8 00 00 00 00	 call	 ?IncAgro@TMonsterAIAgro@@QAEHHH@Z ; TMonsterAIAgro::IncAgro
$LN842@Attack:

; 2828 : 		}
; 2829 : 	}
; 2830 : 
; 2831 : 	BOOL selfdefense = 0;
; 2832 : 	lpCallObj = lpTargetObj;
; 2833 : 	
; 2834 : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  03ec6	8a 47 50	 mov	 al, BYTE PTR [edi+80]
  03ec9	33 f6		 xor	 esi, esi
  03ecb	89 bd d8 fe ff
	ff		 mov	 DWORD PTR _lpCallObj$2$[ebp], edi
  03ed1	3c 02		 cmp	 al, 2
  03ed3	75 1c		 jne	 SHORT $LN613@Attack

; 2835 : 	{
; 2836 : 		if ( lpTargetObj->m_RecallMon >= 0 )

  03ed5	8b 8f 30 06 00
	00		 mov	 ecx, DWORD PTR [edi+1584]
  03edb	85 c9		 test	 ecx, ecx
  03edd	78 12		 js	 SHORT $LN613@Attack

; 2837 : 		{
; 2838 : 			lpCallObj = &gObj[lpTargetObj->m_RecallMon];

  03edf	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  03ee5	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  03eeb	89 8d d8 fe ff
	ff		 mov	 DWORD PTR _lpCallObj$2$[ebp], ecx
$LN613@Attack:

; 2839 : 		}
; 2840 : 	}
; 2841 : 
; 2842 : 
; 2843 : 
; 2844 : 	if ( AttackDamage >= 1 )

  03ef1	83 7d 1c 01	 cmp	 DWORD PTR _AttackDamage$[ebp], 1
  03ef5	0f 8c 01 03 00
	00		 jl	 $LN843@Attack

; 2845 : 	{
; 2846 : 		if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  03efb	8a 4b 50	 mov	 cl, BYTE PTR [ebx+80]
  03efe	80 f9 01	 cmp	 cl, 1
  03f01	0f 85 bd 00 00
	00		 jne	 $LN615@Attack
  03f07	3a c1		 cmp	 al, cl
  03f09	0f 85 b5 00 00
	00		 jne	 $LN615@Attack

; 2847 : 		{
; 2848 : 			if ( gObjDuelCheck(lpObj, lpTargetObj) )

  03f0f	57		 push	 edi
  03f10	53		 push	 ebx
  03f11	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  03f16	83 c4 08	 add	 esp, 8
  03f19	85 c0		 test	 eax, eax
  03f1b	75 77		 jne	 SHORT $LN621@Attack
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  03f1d	8a 8b 23 01 00
	00		 mov	 cl, BYTE PTR [ebx+291]
  03f23	80 f9 3f	 cmp	 cl, 63			; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp

; 2853 : 			else if (g_NewPVP.IsVulcanusMap(lpObj->MapNumber) || g_NewPVP.IsVulcanusMap(lpTargetObj->MapNumber)) {

  03f26	74 6c		 je	 SHORT $LN621@Attack
; File c:\users\michel\desktop\source\gameserver\source\newpvp.h

; 308  : 		return nMapNumber == MAP_INDEX_VULCANUS;

  03f28	8a 97 23 01 00
	00		 mov	 dl, BYTE PTR [edi+291]
  03f2e	80 fa 3f	 cmp	 dl, 63			; 0000003fH
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp

; 2853 : 			else if (g_NewPVP.IsVulcanusMap(lpObj->MapNumber) || g_NewPVP.IsVulcanusMap(lpTargetObj->MapNumber)) {

  03f31	74 61		 je	 SHORT $LN621@Attack

; 2855 : 			}
; 2856 : #endif
; 2857 : 			else if ( CC_MAP_RANGE(lpObj->MapNumber) || CC_MAP_RANGE(lpTargetObj->MapNumber) )

  03f33	80 f9 35	 cmp	 cl, 53			; 00000035H
  03f36	74 5c		 je	 SHORT $LN621@Attack
  03f38	80 f9 12	 cmp	 cl, 18			; 00000012H
  03f3b	72 0b		 jb	 SHORT $LN812@Attack
  03f3d	b0 17		 mov	 al, 23			; 00000017H
  03f3f	3a c1		 cmp	 al, cl
  03f41	1b c0		 sbb	 eax, eax
  03f43	83 c0 01	 add	 eax, 1
  03f46	75 4c		 jne	 SHORT $LN621@Attack
$LN812@Attack:
  03f48	80 fa 35	 cmp	 dl, 53			; 00000035H
  03f4b	74 47		 je	 SHORT $LN621@Attack
  03f4d	80 fa 12	 cmp	 dl, 18			; 00000012H
  03f50	72 0b		 jb	 SHORT $LN813@Attack
  03f52	b0 17		 mov	 al, 23			; 00000017H
  03f54	3a c2		 cmp	 al, dl
  03f56	1b c0		 sbb	 eax, eax
  03f58	83 c0 01	 add	 eax, 1
  03f5b	75 37		 jne	 SHORT $LN621@Attack
$LN813@Attack:

; 2858 : 			{
; 2859 : 				selfdefense = 0;
; 2860 : 			}
; 2861 : 			else if ( IT_MAP_RANGE(lpObj->MapNumber) || IT_MAP_RANGE(lpTargetObj->MapNumber) )

  03f5d	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  03f60	72 0b		 jb	 SHORT $LN814@Attack
  03f62	b0 32		 mov	 al, 50			; 00000032H
  03f64	3a c1		 cmp	 al, cl
  03f66	1b c0		 sbb	 eax, eax
  03f68	83 c0 01	 add	 eax, 1
  03f6b	75 27		 jne	 SHORT $LN621@Attack
$LN814@Attack:
  03f6d	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  03f70	72 0b		 jb	 SHORT $LN815@Attack
  03f72	b0 32		 mov	 al, 50			; 00000032H
  03f74	3a c2		 cmp	 al, dl
  03f76	1b c0		 sbb	 eax, eax
  03f78	83 c0 01	 add	 eax, 1
  03f7b	75 17		 jne	 SHORT $LN621@Attack
$LN815@Attack:

; 2862 : 			{
; 2863 : 				selfdefense = 0;
; 2864 : 			}
; 2865 : 			else if ( lpObj->MapNumber == MAP_INDEX_VULCANUS || lpTargetObj->MapNumber == MAP_INDEX_VULCANUS )
; 2866 : 			{
; 2867 : 				selfdefense = 0;
; 2868 : 			}
; 2869 : #if (__GENS_SYSTEM__ == 1)
; 2870 : 			else if ( gGensSystem.GensMap(lpObj->MapNumber) )

  03f7d	0f b6 c1	 movzx	 eax, cl
  03f80	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VCGensSystem@@A ; gGensSystem
  03f85	50		 push	 eax
  03f86	e8 00 00 00 00	 call	 ?GensMap@CGensSystem@@QAEHH@Z ; CGensSystem::GensMap
  03f8b	8b f0		 mov	 esi, eax
  03f8d	f7 de		 neg	 esi
  03f8f	1b f6		 sbb	 esi, esi
  03f91	46		 inc	 esi

; 2871 : 			{
; 2872 : 				selfdefense = 0;
; 2873 : 			}
; 2874 : #endif
; 2875 : 			else
; 2876 : 			{
; 2877 : 				selfdefense = 1;

  03f92	eb 02		 jmp	 SHORT $LN632@Attack
$LN621@Attack:

; 2854 : 				selfdefense = 0;

  03f94	33 f6		 xor	 esi, esi
$LN632@Attack:

; 2878 : 			}
; 2879 : 
; 2880 : 			if ( gObjGetRelationShip(lpObj, lpTargetObj) == 2 )

  03f96	57		 push	 edi
  03f97	53		 push	 ebx
  03f98	e8 00 00 00 00	 call	 ?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjGetRelationShip
  03f9d	33 c9		 xor	 ecx, ecx
  03f9f	83 c4 08	 add	 esp, 8
  03fa2	83 f8 02	 cmp	 eax, 2
  03fa5	0f 44 f1	 cmove	 esi, ecx

; 2881 : 			{
; 2882 : 				selfdefense = FALSE;
; 2883 : 			}
; 2884 : #if (GS_CASTLE == 1)			
; 2885 : 			if(g_CastleSiege.GetCastleState() == CASTLESIEGE_STATE_STARTSIEGE && lpObj->m_btCsJoinSide > 0)

  03fa8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiege@@3VCCastleSiege@@A ; g_CastleSiege
  03fad	e8 00 00 00 00	 call	 ?GetCastleState@CCastleSiege@@QAEHXZ ; CCastleSiege::GetCastleState
  03fb2	83 f8 07	 cmp	 eax, 7
  03fb5	75 24		 jne	 SHORT $LN636@Attack
  03fb7	80 bb 5a 20 00
	00 00		 cmp	 BYTE PTR [ebx+8282], 0
  03fbe	76 1b		 jbe	 SHORT $LN636@Attack

; 2886 : 			{
; 2887 : 				selfdefense = FALSE;

  03fc0	33 f6		 xor	 esi, esi

; 2888 : 			}
; 2889 : #endif
; 2890 : 		}

  03fc2	eb 17		 jmp	 SHORT $LN636@Attack
$LN615@Attack:

; 2891 : 		else if ( lpTargetObj->Type == OBJ_MONSTER && lpObj->Type == OBJ_USER )

  03fc4	3c 02		 cmp	 al, 2
  03fc6	75 13		 jne	 SHORT $LN636@Attack
  03fc8	80 f9 01	 cmp	 cl, 1
  03fcb	75 0e		 jne	 SHORT $LN636@Attack

; 2892 : 		{
; 2893 : 			if ( lpTargetObj->m_RecallMon >= 0 )

  03fcd	39 b7 30 06 00
	00		 cmp	 DWORD PTR [edi+1584], esi
  03fd3	b8 01 00 00 00	 mov	 eax, 1
  03fd8	0f 4d f0	 cmovge	 esi, eax
$LN636@Attack:

; 2894 : 			{
; 2895 : 				selfdefense = TRUE;
; 2896 : 			}
; 2897 : 		}
; 2898 : 
; 2899 : 		if ( lpTargetObj->Type == OBJ_USER )

  03fdb	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  03fdf	0f 85 ca 01 00
	00		 jne	 $LN642@Attack

; 2900 : 		{
; 2901 : 			gObjArmorRandomDurDown(lpTargetObj, lpObj);

  03fe5	53		 push	 ebx
  03fe6	57		 push	 edi
  03fe7	e8 00 00 00 00	 call	 ?gObjArmorRandomDurDown@@YAXPAUOBJECTSTRUCT@@0@Z ; gObjArmorRandomDurDown
  03fec	83 c4 08	 add	 esp, 8

; 2902 : 
; 2903 : 			if( skill == AT_MSKILL_DK_RAGEFULBLOW2 )

  03fef	81 bd e0 fe ff
	ff 4d 01 00 00	 cmp	 DWORD PTR _skill$1$[ebp], 333 ; 0000014dH
  03ff9	0f 85 b0 01 00
	00		 jne	 $LN642@Attack

; 2904 : 			{
; 2905 : 				float fDurDownRate = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  03fff	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  04005	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  04009	50		 push	 eax
  0400a	ff 71 08	 push	 DWORD PTR [ecx+8]
  0400d	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04012	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04017	50		 push	 eax
  04018	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0401d	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04022	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR _fDurDownRate$6[ebp]

; 2906 : 
; 2907 : 				if( rand()%100 < fDurDownRate )

  04028	e8 00 00 00 00	 call	 _rand
  0402d	99		 cdq
  0402e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04033	f7 f9		 idiv	 ecx
  04035	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _fDurDownRate$6[ebp]
  0403d	66 0f 6e ca	 movd	 xmm1, edx
  04041	0f 5b c9	 cvtdq2ps xmm1, xmm1
  04044	0f 2f c1	 comiss	 xmm0, xmm1
  04047	0f 86 62 01 00
	00		 jbe	 $LN642@Attack

; 2908 : 				{
; 2909 : #if (GS_CASTLE == 1)
; 2910 : 					if(lpObj->m_btCsJoinSide == 0 || lpObj->m_btCsJoinSide != lpTargetObj->m_btCsJoinSide)

  0404d	8a 83 5a 20 00
	00		 mov	 al, BYTE PTR [ebx+8282]
  04053	84 c0		 test	 al, al
  04055	74 0c		 je	 SHORT $LN641@Attack
  04057	3a 87 5a 20 00
	00		 cmp	 al, BYTE PTR [edi+8282]
  0405d	0f 84 4c 01 00
	00		 je	 $LN642@Attack
$LN641@Attack:
  04063	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@00000005000000040000000300000002
  0406a	0f 11 85 e8 fe
	ff ff		 movups	 XMMWORD PTR _item_num$11[ebp], xmm0

; 2911 : 					{
; 2912 : #endif
; 2913 : 						int item_num[5];
; 2914 : 						item_num[0] = 2;
; 2915 : 						item_num[1] = 3;
; 2916 : 						item_num[2] = 4;
; 2917 : 						item_num[3] = 5;
; 2918 : 						item_num[4] = 6;

  04071	c7 85 f8 fe ff
	ff 06 00 00 00	 mov	 DWORD PTR _item_num$11[ebp+16], 6

; 2919 : 						int iEquipmentPos = rand()%5;	// Select and Armor

  0407b	e8 00 00 00 00	 call	 _rand
  04080	99		 cdq
  04081	b9 05 00 00 00	 mov	 ecx, 5
  04086	f7 f9		 idiv	 ecx
  04088	8b c2		 mov	 eax, edx
  0408a	89 85 98 fe ff
	ff		 mov	 DWORD PTR _iEquipmentPos$1$[ebp], eax

; 2920 : 						CItem * lpEquipment = &lpTargetObj->pInventory[item_num[iEquipmentPos]];

  04090	69 8c 85 e8 fe
	ff ff d4 00 00
	00		 imul	 ecx, DWORD PTR _item_num$11[ebp+eax*4], 212
  0409b	03 8f c0 11 00
	00		 add	 ecx, DWORD PTR [edi+4544]
  040a1	89 8d b8 fe ff
	ff		 mov	 DWORD PTR _lpEquipment$1$[ebp], ecx

; 2921 : 
; 2922 : 						if ( lpEquipment && lpEquipment->IsItem() )

  040a7	0f 84 02 01 00
	00		 je	 $LN642@Attack
  040ad	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  040b2	85 c0		 test	 eax, eax
  040b4	0f 84 f5 00 00
	00		 je	 $LN642@Attack

; 2923 : 						{
; 2924 : 							float iDurDecValue = 0;
; 2925 : 
; 2926 : 							if( lpObj->m_MPSkillOpt.MpsDownDur1 != 0.0f )

  040ba	f3 0f 10 83 c8
	06 00 00	 movss	 xmm0, DWORD PTR [ebx+1736]
  040c2	0f 57 d2	 xorps	 xmm2, xmm2
  040c5	0f 2e c2	 ucomiss xmm0, xmm2
  040c8	9f		 lahf
  040c9	f6 c4 44	 test	 ah, 68			; 00000044H
  040cc	7b 23		 jnp	 SHORT $LN816@Attack

; 2927 : 							{
; 2928 : 								iDurDecValue += lpObj->m_MPSkillOpt.btMpsDownDur1Level/5.0f;

  040ce	0f b6 83 cc 06
	00 00		 movzx	 eax, BYTE PTR [ebx+1740]
  040d5	66 0f 6e c8	 movd	 xmm1, eax
  040d9	0f 5b c9	 cvtdq2ps xmm1, xmm1
  040dc	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40a00000
  040e4	f3 0f 58 ca	 addss	 xmm1, xmm2

; 2929 : 							}
; 2930 : 
; 2931 : 							if( iDurDecValue == 0.0f )

  040e8	0f 2e ca	 ucomiss xmm1, xmm2
  040eb	9f		 lahf
  040ec	f6 c4 44	 test	 ah, 68			; 00000044H
  040ef	7a 08		 jp	 SHORT $LN644@Attack
$LN816@Attack:

; 2932 : 								iDurDecValue = 1.0f;

  040f1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
$LN644@Attack:

; 2933 : 
; 2934 : 							int damagemin = lpEquipment->m_BaseDurability/100.0f*(10-iDurDecValue);

  040f9	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR _lpEquipment$1$[ebp]

; 2937 : 
; 2938 : 							for(int iBuffIndex = 0; iBuffIndex < lpObj->btEffectCount; iBuffIndex++)

  040ff	33 c9		 xor	 ecx, ecx
  04101	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41200000
  04109	f3 0f 5c d9	 subss	 xmm3, xmm1
  0410d	f3 0f 10 42 2c	 movss	 xmm0, DWORD PTR [edx+44]
  04112	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  0411a	f3 0f 10 4a 24	 movss	 xmm1, DWORD PTR [edx+36]
  0411f	f3 0f 59 c3	 mulss	 xmm0, xmm3
  04123	f3 0f 2c c0	 cvttss2si eax, xmm0
  04127	66 0f 6e c0	 movd	 xmm0, eax
  0412b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0412e	f3 0f 5c c8	 subss	 xmm1, xmm0
  04132	f3 0f 2c c1	 cvttss2si eax, xmm1
  04136	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _iDurEquipment$1$[ebp], eax
  0413c	0f b6 83 d6 01
	00 00		 movzx	 eax, BYTE PTR [ebx+470]
  04143	89 85 b8 fe ff
	ff		 mov	 DWORD PTR tv4541[ebp], eax
  04149	85 c0		 test	 eax, eax
  0414b	7e 1b		 jle	 SHORT $LN860@Attack

; 2935 : 
; 2936 : 							int iDurEquipment = lpEquipment->m_Durability - damagemin;

  0414d	8d 83 d8 01 00
	00		 lea	 eax, DWORD PTR [ebx+472]
$LL19@Attack:

; 2939 : 							{
; 2940 : 								if( lpObj->pEffectInfo[iBuffIndex].btEffectNum == BUFF_TALISMAN_ITEMPROTECT )

  04153	80 38 64	 cmp	 BYTE PTR [eax], 100	; 00000064H
  04156	0f 84 ab 01 00
	00		 je	 $LN795@Attack

; 2937 : 
; 2938 : 							for(int iBuffIndex = 0; iBuffIndex < lpObj->btEffectCount; iBuffIndex++)

  0415c	41		 inc	 ecx
  0415d	83 c0 1c	 add	 eax, 28			; 0000001cH
  04160	3b 8d b8 fe ff
	ff		 cmp	 ecx, DWORD PTR tv4541[ebp]
  04166	7c eb		 jl	 SHORT $LL19@Attack
$LN860@Attack:
  04168	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _iDurEquipment$1$[ebp]
$LN18@Attack:

; 2943 : 									break;
; 2944 : 								}
; 2945 : 							}
; 2946 : 
; 2947 : 							if( lpEquipment->m_bLuckySet )

  0416e	80 ba ce 00 00
	00 00		 cmp	 BYTE PTR [edx+206], 0
  04175	74 05		 je	 SHORT $LN646@Attack

; 2948 : 							{
; 2949 : 								iDurEquipment = lpEquipment->m_Durability;

  04177	f3 0f 2c 42 24	 cvttss2si eax, DWORD PTR [edx+36]
$LN646@Attack:
  0417c	66 0f 6e c0	 movd	 xmm0, eax

; 2950 : 							}
; 2951 : 
; 2952 : 							lpEquipment->m_Durability = (float)iDurEquipment;

  04180	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 2953 : 
; 2954 : 							if ( lpEquipment->m_Durability < 0.0f )

  04183	0f 2f d0	 comiss	 xmm2, xmm0
  04186	f3 0f 11 42 24	 movss	 DWORD PTR [edx+36], xmm0
  0418b	76 07		 jbe	 SHORT $LN647@Attack

; 2955 : 							{
; 2956 : 								lpEquipment->m_Durability = 0.0f;

  0418d	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
$LN647@Attack:

; 2957 : 							}
; 2958 : 
; 2959 : 							GCItemDurSend(lpTargetObj->m_Index, iEquipmentPos, (BYTE)lpEquipment->m_Durability, 0);

  04194	f3 0f 2c 42 24	 cvttss2si eax, DWORD PTR [edx+36]
  04199	6a 00		 push	 0
  0419b	0f b6 c0	 movzx	 eax, al
  0419e	50		 push	 eax
  0419f	ff b5 98 fe ff
	ff		 push	 DWORD PTR _iEquipmentPos$1$[ebp]
  041a5	ff 37		 push	 DWORD PTR [edi]
  041a7	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  041ac	83 c4 10	 add	 esp, 16			; 00000010H
$LN642@Attack:

; 2960 : 						}
; 2961 : #if (GS_CASTLE == 1)
; 2962 : 					}
; 2963 : #endif
; 2964 : 				}
; 2965 : 			}
; 2966 : 		}
; 2967 : 
; 2968 : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_ICEARROW) == TRUE )

  041af	6a 39		 push	 57			; 00000039H
  041b1	57		 push	 edi
  041b2	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  041b7	83 c4 08	 add	 esp, 8
  041ba	3c 01		 cmp	 al, 1
  041bc	75 24		 jne	 SHORT $LN649@Attack

; 2969 : 		{
; 2970 : 			gObjAddBuffEffect(lpTargetObj,BUFF_ICEARROW,-1);

  041be	6a ff		 push	 -1
  041c0	6a 39		 push	 57			; 00000039H
  041c2	57		 push	 edi
  041c3	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HH@Z ; gObjAddBuffEffect

; 2971 : 
; 2972 : 			if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_ICEARROW) == FALSE )

  041c8	6a 39		 push	 57			; 00000039H
  041ca	57		 push	 edi
  041cb	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  041d0	83 c4 14	 add	 esp, 20			; 00000014H
  041d3	84 c0		 test	 al, al
  041d5	75 0b		 jne	 SHORT $LN649@Attack

; 2973 : 			{
; 2974 : 				GCMagicCancelSend(lpTargetObj,51);

  041d7	6a 33		 push	 51			; 00000033H
  041d9	57		 push	 edi
  041da	e8 00 00 00 00	 call	 ?GCMagicCancelSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCMagicCancelSend
  041df	83 c4 08	 add	 esp, 8
$LN649@Attack:

; 2975 : 			}
; 2976 : 		}
; 2977 : 
; 2978 : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_SLEEP) == TRUE )

  041e2	6a 48		 push	 72			; 00000048H
  041e4	57		 push	 edi
  041e5	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  041ea	83 c4 08	 add	 esp, 8
  041ed	3c 01		 cmp	 al, 1
  041ef	75 0b		 jne	 SHORT $LN843@Attack

; 2979 : 		{
; 2980 : 			gObjRemoveBuffEffect(lpTargetObj,BUFF_SLEEP);

  041f1	6a 48		 push	 72			; 00000048H
  041f3	57		 push	 edi
  041f4	e8 00 00 00 00	 call	 ?gObjRemoveBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjRemoveBuffEffect
  041f9	83 c4 08	 add	 esp, 8
$LN843@Attack:

; 2981 : 		}
; 2982 : 	}
; 2983 : 
; 2984 : 	if ( lpObj->PartyNumber >= 0 &&

  041fc	8b 8b 0c 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1548]
  04202	85 c9		 test	 ecx, ecx
  04204	78 14		 js	 SHORT $LN652@Attack
  04206	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _lpCallObj$2$[ebp]
  0420c	8b 80 0c 06 00
	00		 mov	 eax, DWORD PTR [eax+1548]
  04212	85 c0		 test	 eax, eax
  04214	78 04		 js	 SHORT $LN652@Attack

; 2985 : 		 lpCallObj->PartyNumber >= 0)
; 2986 : 	{
; 2987 : 		if( lpObj->PartyNumber == lpCallObj->PartyNumber )

  04216	3b c8		 cmp	 ecx, eax
  04218	74 46		 je	 SHORT $LN844@Attack
$LN652@Attack:

; 2988 : 		{
; 2989 : 			selfdefense = 0;
; 2990 : 		}
; 2991 : 	}
; 2992 : 
; 2993 : 	if ( selfdefense == TRUE && bDamageReflect == FALSE )

  0421a	83 fe 01	 cmp	 esi, 1
  0421d	75 41		 jne	 SHORT $LN844@Attack
  0421f	83 bd 88 fe ff
	ff 00		 cmp	 DWORD PTR _bDamageReflect$1$[ebp], 0
  04226	75 38		 jne	 SHORT $LN844@Attack

; 2994 : 	{
; 2995 : 		if ( !gObjTargetGuildWarCheck(lpObj, lpCallObj) )

  04228	8b b5 d8 fe ff
	ff		 mov	 esi, DWORD PTR _lpCallObj$2$[ebp]
  0422e	56		 push	 esi
  0422f	53		 push	 ebx
  04230	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  04235	83 c4 08	 add	 esp, 8
  04238	85 c0		 test	 eax, eax
  0423a	75 24		 jne	 SHORT $LN844@Attack

; 2996 : 		{
; 2997 : 			if( lpCallObj->PartyNumber >= 0 )

  0423c	8b 86 0c 06 00
	00		 mov	 eax, DWORD PTR [esi+1548]
  04242	85 c0		 test	 eax, eax
  04244	78 0f		 js	 SHORT $LN655@Attack

; 2998 : 			{
; 2999 : 				int bTmp = 0;
; 3000 : 				int PartyNumber = lpCallObj->PartyNumber;
; 3001 : 
; 3002 : 				if( gParty.GetPartyPkLevel(PartyNumber) < 5 )

  04246	50		 push	 eax
  04247	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0424c	e8 00 00 00 00	 call	 ?GetPartyPkLevel@PartyClass@@QAEDH@Z ; PartyClass::GetPartyPkLevel
  04251	3c 05		 cmp	 al, 5
  04253	7d 0b		 jge	 SHORT $LN844@Attack
$LN655@Attack:

; 3003 : 				{
; 3004 : 					gObjCheckSelfDefense(lpObj, lpCallObj->m_Index);
; 3005 : 				}
; 3006 : 			}
; 3007 : 			else
; 3008 : 			{
; 3009 : 				gObjCheckSelfDefense(lpObj, lpCallObj->m_Index);

  04255	ff 36		 push	 DWORD PTR [esi]
  04257	53		 push	 ebx
  04258	e8 00 00 00 00	 call	 ?gObjCheckSelfDefense@@YAXPAUOBJECTSTRUCT@@H@Z ; gObjCheckSelfDefense
  0425d	83 c4 08	 add	 esp, 8
$LN844@Attack:

; 3010 : 			}
; 3011 : 		}
; 3012 : 	}
; 3013 : 
; 3014 : 	if ( lpTargetObj->Class == 275 )	// KUNDUN

  04260	b8 13 01 00 00	 mov	 eax, 275		; 00000113H
  04265	66 39 87 90 00
	00 00		 cmp	 WORD PTR [edi+144], ax
  0426c	75 3f		 jne	 SHORT $LN845@Attack

; 3015 : 	{
; 3016 : 		if ( lpTargetObj->m_iMonsterBattleDelay <= 0 )

  0426e	80 bf a9 05 00
	00 00		 cmp	 BYTE PTR [edi+1449], 0
  04275	7f 36		 jg	 SHORT $LN845@Attack

; 3017 : 		{
; 3018 : 			if ( (rand()%15) < 1 )

  04277	e8 00 00 00 00	 call	 _rand
  0427c	99		 cdq
  0427d	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  04282	f7 f9		 idiv	 ecx
  04284	83 fa 01	 cmp	 edx, 1
  04287	7d 24		 jge	 SHORT $LN845@Attack

; 3019 : 			{
; 3020 : 				gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  04289	6a 00		 push	 0
  0428b	6a 64		 push	 100			; 00000064H
  0428d	ff 33		 push	 DWORD PTR [ebx]
  0428f	6a 04		 push	 4
  04291	57		 push	 edi
  04292	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 3021 : 				lpTargetObj->m_iMonsterBattleDelay = 10;

  04297	c6 87 a9 05 00
	00 0a		 mov	 BYTE PTR [edi+1449], 10	; 0000000aH

; 3022 : 				GCActionSend(lpTargetObj, 126, lpTargetObj->m_Index, lpObj->m_Index);

  0429e	ff 33		 push	 DWORD PTR [ebx]
  042a0	ff 37		 push	 DWORD PTR [edi]
  042a2	6a 7e		 push	 126			; 0000007eH
  042a4	57		 push	 edi
  042a5	e8 00 00 00 00	 call	 ?GCActionSend@@YAXPAUOBJECTSTRUCT@@EHH@Z ; GCActionSend
  042aa	83 c4 24	 add	 esp, 36			; 00000024H
$LN845@Attack:

; 3023 : 			}
; 3024 : 		}
; 3025 : 	}
; 3026 : 
; 3027 : 	if ( lpTargetObj->Class == 131 ||BC_STATUE_RANGE(lpTargetObj->Class-132) )

  042ad	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  042b4	b9 83 00 00 00	 mov	 ecx, 131		; 00000083H
  042b9	66 3b c1	 cmp	 ax, cx
  042bc	74 7c		 je	 SHORT $LN663@Attack
  042be	8b c8		 mov	 ecx, eax
  042c0	81 c1 7c ff ff
	ff		 add	 ecx, -132		; ffffff7cH
  042c6	78 0c		 js	 SHORT $LN817@Attack
  042c8	33 c0		 xor	 eax, eax
  042ca	83 f9 02	 cmp	 ecx, 2
  042cd	0f 9e c0	 setle	 al
  042d0	85 c0		 test	 eax, eax
  042d2	75 66		 jne	 SHORT $LN663@Attack
$LN817@Attack:

; 3031 : 	}
; 3032 : 	else if ( AttackDamage >= 5 )	// To make strong hit

  042d4	83 7d 1c 05	 cmp	 DWORD PTR _AttackDamage$[ebp], 5
  042d8	0f 8c 84 00 00
	00		 jl	 $LN669@Attack

; 3033 : 	{
; 3034 : 		if ( lpTargetObj->Type == OBJ_MONSTER )

  042de	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  042e2	75 2d		 jne	 SHORT $LN665@Attack

; 3035 : 		{
; 3036 : 			if ( (rand()%26) == 0 )

  042e4	e8 00 00 00 00	 call	 _rand
  042e9	99		 cdq
  042ea	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  042ef	f7 f9		 idiv	 ecx
  042f1	85 d2		 test	 edx, edx
  042f3	75 6d		 jne	 SHORT $LN669@Attack

; 3037 : 			{
; 3038 : 				gObjAddMsgSendDelay(lpTargetObj,4, lpObj->m_Index, 100, 0);

  042f5	52		 push	 edx
  042f6	6a 64		 push	 100			; 00000064H
  042f8	ff 33		 push	 DWORD PTR [ebx]
  042fa	6a 04		 push	 4
  042fc	57		 push	 edi
  042fd	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  04302	83 c4 14	 add	 esp, 20			; 00000014H

; 3039 : 			}
; 3040 : 		}

  04305	eb 5b		 jmp	 SHORT $LN669@Attack
$LN795@Attack:

; 2941 : 								{
; 2942 : 									iDurEquipment = lpEquipment->m_Durability;

  04307	f3 0f 2c 42 24	 cvttss2si eax, DWORD PTR [edx+36]
  0430c	e9 5d fe ff ff	 jmp	 $LN18@Attack
$LN665@Attack:

; 3041 : 		else if ( (rand()%4) == 0 )

  04311	e8 00 00 00 00	 call	 _rand
  04316	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0431b	79 05		 jns	 SHORT $LN880@Attack
  0431d	48		 dec	 eax
  0431e	83 c8 fc	 or	 eax, -4			; fffffffcH
  04321	40		 inc	 eax
$LN880@Attack:
  04322	75 3e		 jne	 SHORT $LN669@Attack

; 3042 : 		{
; 3043 : 			if ( !gObjUniriaSprite(lpTargetObj) )

  04324	57		 push	 edi
  04325	e8 00 00 00 00	 call	 ?gObjUniriaSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUniriaSprite
  0432a	83 c4 04	 add	 esp, 4
  0432d	85 c0		 test	 eax, eax
  0432f	75 31		 jne	 SHORT $LN669@Attack

; 3044 : 			{
; 3045 : 				MSBFlag = 1;

  04331	c6 85 b7 fe ff
	ff 01		 mov	 BYTE PTR _MSBFlag$1$[ebp], 1
  04338	eb 28		 jmp	 SHORT $LN669@Attack
$LN663@Attack:

; 3028 : 	{
; 3029 : 		gObjAddMsgSendDelay(lpTargetObj, 4, lpObj->m_Index, 100, 0);

  0433a	6a 00		 push	 0
  0433c	6a 64		 push	 100			; 00000064H
  0433e	ff 33		 push	 DWORD PTR [ebx]
  04340	6a 04		 push	 4
  04342	57		 push	 edi
  04343	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay

; 3030 : 		gObjSetPosition(lpTargetObj->m_Index, lpTargetObj->X, lpTargetObj->Y);

  04348	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0434f	50		 push	 eax
  04350	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  04357	50		 push	 eax
  04358	ff 37		 push	 DWORD PTR [edi]
  0435a	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0435f	83 c4 20	 add	 esp, 32			; 00000020H
$LN669@Attack:

; 3046 : 			}
; 3047 : 		}
; 3048 : 	}
; 3049 : 
; 3050 : 	if ( ManaChange )

  04362	83 bd 9c fe ff
	ff 00		 cmp	 DWORD PTR _ManaChange$1$[ebp], 0
  04369	74 25		 je	 SHORT $LN670@Attack

; 3051 : 	{
; 3052 : 		GCManaSend(lpTargetObj->m_Index, (WORD)lpTargetObj->Mana, 0xFF, 0, lpTargetObj->BP);

  0436b	0f b7 87 04 01
	00 00		 movzx	 eax, WORD PTR [edi+260]
  04372	50		 push	 eax
  04373	f3 0f 2c 87 ec
	00 00 00	 cvttss2si eax, DWORD PTR [edi+236]
  0437b	6a 00		 push	 0
  0437d	68 ff 00 00 00	 push	 255			; 000000ffH
  04382	0f b7 c0	 movzx	 eax, ax
  04385	50		 push	 eax
  04386	ff 37		 push	 DWORD PTR [edi]
  04388	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  0438d	83 c4 14	 add	 esp, 20			; 00000014H
$LN670@Attack:

; 3053 : 	}
; 3054 : 
; 3055 : 	if ( magicsend )

  04390	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR _magicsend$1$[ebp], 0
  04397	74 17		 je	 SHORT $LN671@Attack

; 3056 : 	{
; 3057 : 		GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  04399	ff b5 cc fe ff
	ff		 push	 DWORD PTR _skillSuccess$1$[ebp]
  0439f	ff 37		 push	 DWORD PTR [edi]
  043a1	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  043a7	53		 push	 ebx
  043a8	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  043ad	83 c4 10	 add	 esp, 16			; 00000010H
$LN671@Attack:

; 3058 : 	}
; 3059 : 
; 3060 : 	if ( lpObj->Type == OBJ_USER )

  043b0	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  043b4	75 18		 jne	 SHORT $LN673@Attack

; 3061 : 	{
; 3062 : 		if ( lpObj->m_Change == 9 )

  043b6	83 bb 34 06 00
	00 09		 cmp	 DWORD PTR [ebx+1588], 9
  043bd	75 0f		 jne	 SHORT $LN673@Attack

; 3063 : 		{
; 3064 : 			GCMagicAttackNumberSend(lpObj, 3, lpTargetObj->m_Index, 1);

  043bf	6a 01		 push	 1
  043c1	ff 37		 push	 DWORD PTR [edi]
  043c3	6a 03		 push	 3
  043c5	53		 push	 ebx
  043c6	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  043cb	83 c4 10	 add	 esp, 16			; 00000010H
$LN673@Attack:

; 3065 : 		}
; 3066 : 	}
; 3067 : 
; 3068 : 	if ( lpObj->Class == CLASS_ELF && lpObj->Level == 1 && AttackDamage > 10 )

  043ce	66 83 bb 90 00
	00 00 02	 cmp	 WORD PTR [ebx+144], 2
  043d6	75 52		 jne	 SHORT $LN674@Attack
  043d8	66 83 bb 96 00
	00 00 01	 cmp	 WORD PTR [ebx+150], 1
  043e0	75 48		 jne	 SHORT $LN674@Attack
  043e2	83 7d 1c 0a	 cmp	 DWORD PTR _AttackDamage$[ebp], 10 ; 0000000aH
  043e6	7e 42		 jle	 SHORT $LN674@Attack

; 3069 : 	{
; 3070 : 		LogAdd("error-Level1 : [%s][%s] Str:%d %d %d %d %d %d %d",

  043e8	ff b3 40 06 00
	00		 push	 DWORD PTR [ebx+1600]
  043ee	0f b7 83 d0 00
	00 00		 movzx	 eax, WORD PTR [ebx+208]
  043f5	ff b3 44 06 00
	00		 push	 DWORD PTR [ebx+1604]
  043fb	ff b3 58 06 00
	00		 push	 DWORD PTR [ebx+1624]
  04401	ff b3 5c 06 00
	00		 push	 DWORD PTR [ebx+1628]
  04407	ff b3 60 06 00
	00		 push	 DWORD PTR [ebx+1632]
  0440d	ff b3 64 06 00
	00		 push	 DWORD PTR [ebx+1636]
  04413	50		 push	 eax
  04414	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  04417	50		 push	 eax
  04418	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  0441b	50		 push	 eax
  0441c	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@MDAHJJLM@error?9Level1?5?3?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Str?3?$CFd?5?$CF@
  04421	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  04427	83 c4 28	 add	 esp, 40			; 00000028H
$LN674@Attack:

; 3071 : 			lpObj->AccountID, lpObj->Name, lpObj->Strength,
; 3072 : 			lpObj->m_AttackDamageMinRight, lpObj->m_AttackDamageMaxRight,
; 3073 : 			lpObj->m_AttackDamageMinLeft, lpObj->m_AttackDamageMaxLeft, 
; 3074 : 			lpObj->m_AttackDamageMax, lpObj->m_AttackDamageMin);
; 3075 : 	}
; 3076 : 
; 3077 : 	lpObj->m_Rest = 0;
; 3078 : 
; 3079 : 	if ( lpObj->Class >= 504 && lpObj->Class <= 511 )

  0442a	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  04431	b9 f8 01 00 00	 mov	 ecx, 504		; 000001f8H
  04436	c6 83 d4 01 00
	00 00		 mov	 BYTE PTR [ebx+468], 0
  0443d	8d 71 07	 lea	 esi, DWORD PTR [ecx+7]
  04440	66 3b c1	 cmp	 ax, cx
  04443	72 1f		 jb	 SHORT $LN847@Attack
  04445	66 3b c6	 cmp	 ax, si
  04448	77 1a		 ja	 SHORT $LN847@Attack

; 3080 : 	{
; 3081 : 		if( gObjCheckUsedBuffEffect(lpObj,BUFF_BERSERKER) )

  0444a	6a 51		 push	 81			; 00000051H
  0444c	53		 push	 ebx
  0444d	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  04452	83 c4 08	 add	 esp, 8
  04455	8d 4e f9	 lea	 ecx, DWORD PTR [esi-7]
  04458	84 c0		 test	 al, al
  0445a	74 08		 je	 SHORT $LN847@Attack

; 3082 : 			AttackDamage *= 2;

  0445c	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  0445f	03 c0		 add	 eax, eax
  04461	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN847@Attack:

; 3083 : 	}
; 3084 : 
; 3085 : 	if ( lpTargetObj->Class >= 504 && lpTargetObj->Class <= 511 )

  04464	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  0446b	66 3b c1	 cmp	 ax, cx
  0446e	72 1f		 jb	 SHORT $LN848@Attack
  04470	66 3b c6	 cmp	 ax, si
  04473	77 1a		 ja	 SHORT $LN848@Attack

; 3086 : 	{
; 3087 : 		if( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_BERSERKER) )

  04475	6a 51		 push	 81			; 00000051H
  04477	57		 push	 edi
  04478	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0447d	83 c4 08	 add	 esp, 8
  04480	84 c0		 test	 al, al
  04482	74 0b		 je	 SHORT $LN848@Attack

; 3088 : 			AttackDamage /= 2;

  04484	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  04487	99		 cdq
  04488	2b c2		 sub	 eax, edx
  0448a	d1 f8		 sar	 eax, 1
  0448c	89 45 1c	 mov	 DWORD PTR _AttackDamage$[ebp], eax
$LN848@Attack:

; 3089 : 	}
; 3090 : 
; 3091 : 	if ( AttackDamage > 0 )

  0448f	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  04492	85 c9		 test	 ecx, ecx
  04494	0f 8e b4 05 00
	00		 jle	 $LN679@Attack

; 3092 : 	{
; 3093 : 		int atd_reflect = (int)((float)AttackDamage * lpTargetObj->DamageReflect / 100.0f);

  0449a	0f b6 87 49 01
	00 00		 movzx	 eax, BYTE PTR [edi+329]
  044a1	66 0f 6e c1	 movd	 xmm0, ecx
  044a5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  044a8	66 0f 6e c8	 movd	 xmm1, eax
  044ac	0f 5b c9	 cvtdq2ps xmm1, xmm1
  044af	f3 0f 59 c8	 mulss	 xmm1, xmm0
  044b3	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@42c80000
  044bb	f3 0f 2c c1	 cvttss2si eax, xmm1

; 3094 : #if(__NOVUS__==1)
; 3095 : 		if( lpObj->Type == OBJ_MONSTER 
; 3096 : 			&& lpTargetObj->Type == OBJ_USER 
; 3097 : 			&& g_SoulSystem.IsMap(lpTargetObj->MapNumber) 
; 3098 : 			&& !g_SoulSystem.WithSoul(lpTargetObj) )
; 3099 : 		{
; 3100 : 
; 3101 : 		}
; 3102 : 		else
; 3103 : 		{
; 3104 : #endif
; 3105 : 			if ( atd_reflect )

  044bf	85 c0		 test	 eax, eax
  044c1	74 10		 je	 SHORT $LN681@Attack

; 3106 : 			{
; 3107 : 				gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, atd_reflect);

  044c3	50		 push	 eax
  044c4	6a 0a		 push	 10			; 0000000aH
  044c6	ff 33		 push	 DWORD PTR [ebx]
  044c8	6a 0a		 push	 10			; 0000000aH
  044ca	57		 push	 edi
  044cb	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  044d0	83 c4 14	 add	 esp, 20			; 00000014H
$LN681@Attack:

; 3108 : 			}
; 3109 : 
; 3110 : 			if ( (rand()%100) < lpObj->SetOpReflectionDamage )

  044d3	e8 00 00 00 00	 call	 _rand
  044d8	99		 cdq
  044d9	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  044de	f7 f9		 idiv	 ecx
  044e0	0f b6 83 d0 14
	00 00		 movzx	 eax, BYTE PTR [ebx+5328]
  044e7	3b d0		 cmp	 edx, eax
  044e9	7d 12		 jge	 SHORT $LN682@Attack

; 3111 : 			{
; 3112 : 				gObjAddMsgSendDelay(lpTargetObj, 10, lpObj->m_Index, 10, AttackDamage);

  044eb	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
  044ee	6a 0a		 push	 10			; 0000000aH
  044f0	ff 33		 push	 DWORD PTR [ebx]
  044f2	6a 0a		 push	 10			; 0000000aH
  044f4	57		 push	 edi
  044f5	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  044fa	83 c4 14	 add	 esp, 20			; 00000014H
$LN682@Attack:

; 3113 : 			}
; 3114 : #if(__NOVUS__==1)
; 3115 : 		}
; 3116 : #endif
; 3117 : 
; 3118 : 		int FullReflect = 0;
; 3119 : 
; 3120 : 		if( gObjWingSprite(lpTargetObj) == TRUE )

  044fd	57		 push	 edi
  044fe	33 f6		 xor	 esi, esi
  04500	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  04505	83 c4 04	 add	 esp, 4
  04508	83 f8 01	 cmp	 eax, 1
  0450b	75 5e		 jne	 SHORT $LN688@Attack

; 3121 : 		{
; 3122 : 			CItem * Wing = &lpTargetObj->pInventory[7];

  0450d	8b 8f c0 11 00
	00		 mov	 ecx, DWORD PTR [edi+4544]

; 3123 : 
; 3124 : 			if( (Wing->m_Type >= ITEMGET(12,36) && Wing->m_Type <= ITEMGET(12,40))
; 3125 : 				 || Wing->m_Type == ITEMGET(12,43) 
; 3126 : 				 || Wing->m_Type == ITEMGET(12,50) )

  04513	ba 24 18 00 00	 mov	 edx, 6180		; 00001824H
  04518	0f b7 81 d2 05
	00 00		 movzx	 eax, WORD PTR [ecx+1490]
  0451f	66 3b c2	 cmp	 ax, dx
  04522	7c 0a		 jl	 SHORT $LN687@Attack
  04524	ba 28 18 00 00	 mov	 edx, 6184		; 00001828H
  04529	66 3b c2	 cmp	 ax, dx
  0452c	7e 2e		 jle	 SHORT $LN686@Attack
$LN687@Attack:
  0452e	ba 2b 18 00 00	 mov	 edx, 6187		; 0000182bH
  04533	66 3b c2	 cmp	 ax, dx
  04536	74 24		 je	 SHORT $LN686@Attack
  04538	ba 32 18 00 00	 mov	 edx, 6194		; 00001832H
  0453d	66 3b c2	 cmp	 ax, dx
  04540	74 1a		 je	 SHORT $LN686@Attack

; 3131 : 					FullReflect+=5;
; 3132 : 				}
; 3133 : 			}
; 3134 : 			else if( Wing->m_Type == ITEMGET(12,266) )

  04542	ba 0a 19 00 00	 mov	 edx, 6410		; 0000190aH
  04547	66 3b c2	 cmp	 ax, dx
  0454a	75 1f		 jne	 SHORT $LN688@Attack

; 3135 : 			{
; 3136 : 				BYTE ExcOpt = lpTargetObj->pInventory[7].m_NewOption;
; 3137 : 
; 3138 : 				if( (ExcOpt & 2) == 2 )	{

  0454c	f6 81 5f 06 00
	00 02		 test	 BYTE PTR [ecx+1631], 2
  04553	74 16		 je	 SHORT $LN688@Attack

; 3139 : 					FullReflect+=5;

  04555	be 05 00 00 00	 mov	 esi, 5
  0455a	eb 0f		 jmp	 SHORT $LN688@Attack
$LN686@Attack:

; 3127 : 			{
; 3128 : 				BYTE ExcOpt = lpTargetObj->pInventory[7].m_NewOption;
; 3129 : 
; 3130 : 				if( (ExcOpt & 2) == 2 )	{

  0455c	f6 81 5f 06 00
	00 02		 test	 BYTE PTR [ecx+1631], 2
  04563	b8 05 00 00 00	 mov	 eax, 5
  04568	0f 45 f0	 cmovne	 esi, eax
$LN688@Attack:

; 3140 : 				}
; 3141 : 			}
; 3142 : #if (CUSTOM_WINGS == 1)
; 3143 : 			else if( Wing->m_Type >= ITEMGET(12,440) && Wing->m_Type <= ITEMGET(12,445) )
; 3144 : 			{
; 3145 : 				BYTE ExcOpt = lpTargetObj->pInventory[7].m_NewOption;
; 3146 : 
; 3147 : 				if( (ExcOpt & 2) == 2 )
; 3148 : 				{
; 3149 : 					FullReflect+=10;
; 3150 : 				}
; 3151 : 			}
; 3152 : #endif
; 3153 : 		}
; 3154 : 
; 3155 : 		if( lpTargetObj->m_MPSkillOpt.MpsReflectDamage > 0.0f )

  0456b	f3 0f 10 8f 30
	08 00 00	 movss	 xmm1, DWORD PTR [edi+2096]
  04573	0f 57 db	 xorps	 xmm3, xmm3
  04576	0f 2f cb	 comiss	 xmm1, xmm3
  04579	76 0f		 jbe	 SHORT $LN691@Attack

; 3156 : 		{
; 3157 : 			FullReflect += lpTargetObj->m_MPSkillOpt.MpsReflectDamage;

  0457b	66 0f 6e c6	 movd	 xmm0, esi
  0457f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04582	f3 0f 58 c1	 addss	 xmm0, xmm1
  04586	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN691@Attack:

; 3158 : 		}
; 3159 : #if(__NOVUS__==1)
; 3160 : 		if( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_MONSTER )
; 3161 : 		{
; 3162 : 			if( g_SoulSystem.IsMap(lpObj->MapNumber) && !g_SoulSystem.WithSoul(lpObj) )
; 3163 : 			{
; 3164 : 				FullReflect = 0;
; 3165 : 			}
; 3166 : 		}
; 3167 : #endif
; 3168 : 		if( FullReflect && (rand()%100 < FullReflect) )	

  0458a	85 f6		 test	 esi, esi
  0458c	74 34		 je	 SHORT $LN694@Attack
  0458e	e8 00 00 00 00	 call	 _rand
  04593	99		 cdq
  04594	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04599	f7 f9		 idiv	 ecx
  0459b	3b d6		 cmp	 edx, esi
  0459d	7d 20		 jge	 SHORT $LN852@Attack

; 3169 : 		{
; 3170 : 			if( lpObj->Type == OBJ_MONSTER )

  0459f	80 7b 50 02	 cmp	 BYTE PTR [ebx+80], 2
  045a3	75 08		 jne	 SHORT $LN693@Attack

; 3171 : 			{
; 3172 : 				gObjAddMsgSendDelay(lpTargetObj, 12, lpObj->m_Index, 10, lpObj->m_AttackDamageMax);

  045a5	ff b3 44 06 00
	00		 push	 DWORD PTR [ebx+1604]

; 3173 : 			}
; 3174 : 			else

  045ab	eb 03		 jmp	 SHORT $LN975@Attack
$LN693@Attack:

; 3175 : 			{
; 3176 : 				gObjAddMsgSendDelay(lpTargetObj, 12, lpObj->m_Index, 10, AttackDamage);

  045ad	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
$LN975@Attack:
  045b0	6a 0a		 push	 10			; 0000000aH
  045b2	ff 33		 push	 DWORD PTR [ebx]
  045b4	6a 0c		 push	 12			; 0000000cH
  045b6	57		 push	 edi
  045b7	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  045bc	83 c4 14	 add	 esp, 20			; 00000014H
$LN852@Attack:
  045bf	0f 57 db	 xorps	 xmm3, xmm3
$LN694@Attack:

; 3177 : 			}
; 3178 : 		}
; 3179 : 
; 3180 : 		if ( bCombo )

  045c2	83 7d 20 00	 cmp	 DWORD PTR _bCombo$[ebp], 0
  045c6	0f 84 cb 00 00
	00		 je	 $LN861@Attack

; 3181 : 		{
; 3182 : 			int iComboDamage = ( Strength + Dexterity + Energy ) / 2;	// #formula

  045cc	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR _Energy$1$[ebp]
  045d2	03 85 8c fe ff
	ff		 add	 eax, DWORD PTR _Dexterity$1$[ebp]
  045d8	03 85 bc fe ff
	ff		 add	 eax, DWORD PTR _Strength$1$[ebp]

; 3183 : 			
; 3184 : 
; 3185 : 			if( lpObj->m_MPSkillOpt.MpsComboAttackIncrease > 0.0f )

  045de	f3 0f 10 93 50
	08 00 00	 movss	 xmm2, DWORD PTR [ebx+2128]
  045e6	99		 cdq
  045e7	2b c2		 sub	 eax, edx
  045e9	8b f0		 mov	 esi, eax
  045eb	d1 fe		 sar	 esi, 1
  045ed	0f 2f d3	 comiss	 xmm2, xmm3
  045f0	76 1e		 jbe	 SHORT $LN696@Attack

; 3186 : 			{
; 3187 : 				iComboDamage += iComboDamage*lpObj->m_MPSkillOpt.MpsComboAttackIncrease/100.0f;

  045f2	66 0f 6e ce	 movd	 xmm1, esi
  045f6	0f 5b c9	 cvtdq2ps xmm1, xmm1
  045f9	0f 28 c1	 movaps	 xmm0, xmm1
  045fc	f3 0f 59 c2	 mulss	 xmm0, xmm2
  04600	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  04608	f3 0f 58 c1	 addss	 xmm0, xmm1
  0460c	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN696@Attack:

; 3188 : 			}
; 3189 : 
; 3190 : 			AttackDamage += iComboDamage;

  04610	01 75 1c	 add	 DWORD PTR _AttackDamage$[ebp], esi

; 3191 : 
; 3192 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  04613	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  04617	75 3d		 jne	 SHORT $LN697@Attack
  04619	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  0461d	75 37		 jne	 SHORT $LN697@Attack

; 3193 : 			{
; 3194 : 				iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, iComboDamage);

  0461f	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  04625	56		 push	 esi
  04626	57		 push	 edi
  04627	53		 push	 ebx
  04628	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 3195 : 				lpTargetObj->iShield -= iTempShieldDamage;
; 3196 : 				lpTargetObj->Life -= iComboDamage - iTempShieldDamage;

  0462d	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  04635	2b f0		 sub	 esi, eax
  04637	29 87 2c 01 00
	00		 sub	 DWORD PTR [edi+300], eax

; 3197 : 				iTotalShieldDamage += iTempShieldDamage;

  0463d	01 85 c4 fe ff
	ff		 add	 DWORD PTR _iTotalShieldDamage$1$[ebp], eax
  04643	66 0f 6e c6	 movd	 xmm0, esi
  04647	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0464a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0464e	0f 57 c0	 xorps	 xmm0, xmm0

; 3198 : 
; 3199 : 				if ( lpTargetObj->Life < 0.0f )

  04651	0f 2f c1	 comiss	 xmm0, xmm1

; 3200 : 				{
; 3201 : 					lpTargetObj->Life = 0.0f;
; 3202 : 				}
; 3203 : 			}
; 3204 : 			else

  04654	eb 16		 jmp	 SHORT $LN948@Attack
$LN697@Attack:

; 3205 : 			{
; 3206 : 				lpTargetObj->Life -= iComboDamage;

  04656	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  0465e	66 0f 6e c6	 movd	 xmm0, esi
  04662	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04665	f3 0f 5c c8	 subss	 xmm1, xmm0

; 3207 : 
; 3208 : 				if ( lpTargetObj->Life < 0.0f )

  04669	0f 2f d9	 comiss	 xmm3, xmm1
$LN948@Attack:

; 3205 : 			{
; 3206 : 				lpTargetObj->Life -= iComboDamage;

  0466c	f3 0f 11 8f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm1

; 3207 : 
; 3208 : 				if ( lpTargetObj->Life < 0.0f )

  04674	76 0a		 jbe	 SHORT $LN700@Attack

; 3209 : 				{
; 3210 : 					lpTargetObj->Life = 0.0f;

  04676	c7 87 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+216], 0
$LN700@Attack:

; 3211 : 				}
; 3212 : 			}
; 3213 : 
; 3214 : 			MsgDamage |= 0x80;

  04680	81 8d c8 fe ff
	ff 80 00 00 00	 or	 DWORD PTR _MsgDamage$[ebp], 128 ; 00000080H

; 3215 : 			skill = 59;

  0468a	be 3b 00 00 00	 mov	 esi, 59			; 0000003bH
  0468f	89 b5 e0 fe ff
	ff		 mov	 DWORD PTR _skill$1$[ebp], esi
  04695	eb 06		 jmp	 SHORT $LN695@Attack
$LN861@Attack:
  04697	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _skill$1$[ebp]
$LN695@Attack:

; 3216 : 		}
; 3217 : 
; 3218 : 		float fRate = lpObj->SetOpDoubleDamage+lpObj->m_MPSkillOpt.MpsSpearMastery;
; 3219 : 		fRate += lpObj->m_MPSkillOpt.MpsFistMastery;
; 3220 : 		fRate += lpObj->m_MPSkillOpt.MpsDoubleDamageRate;

  0469d	0f b6 83 cd 14
	00 00		 movzx	 eax, BYTE PTR [ebx+5325]

; 3221 : 
; 3222 : 		if( gObjWingSprite(lpObj) )

  046a4	53		 push	 ebx
  046a5	66 0f 6e c0	 movd	 xmm0, eax
  046a9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  046ac	f3 0f 58 83 14
	07 00 00	 addss	 xmm0, DWORD PTR [ebx+1812]
  046b4	f3 0f 58 83 28
	08 00 00	 addss	 xmm0, DWORD PTR [ebx+2088]
  046bc	f3 0f 58 83 68
	08 00 00	 addss	 xmm0, DWORD PTR [ebx+2152]
  046c4	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _fRate$1$[ebp], xmm0
  046cc	e8 00 00 00 00	 call	 ?gObjWingSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjWingSprite
  046d1	83 c4 04	 add	 esp, 4
  046d4	85 c0		 test	 eax, eax
  046d6	74 35		 je	 SHORT $LN702@Attack

; 3223 : 		{
; 3224 : 			if( lpObj->pInventory[7].m_Type == ITEMGET(12,267) &&

  046d8	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  046de	b9 0b 19 00 00	 mov	 ecx, 6411		; 0000190bH
  046e3	66 39 88 d2 05
	00 00		 cmp	 WORD PTR [eax+1490], cx
  046ea	75 21		 jne	 SHORT $LN702@Attack
  046ec	f6 80 5f 06 00
	00 01		 test	 BYTE PTR [eax+1631], 1
  046f3	74 18		 je	 SHORT $LN702@Attack

; 3225 : 				(lpObj->pInventory[7].m_NewOption&1) == 1)
; 3226 : 			{
; 3227 : 				fRate += 4;

  046f5	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _fRate$1$[ebp]
  046fd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  04705	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _fRate$1$[ebp], xmm0
$LN702@Attack:

; 3228 : 			}
; 3229 : 		}
; 3230 : 
; 3231 : 		if ( (rand()%100) < fRate )

  0470d	e8 00 00 00 00	 call	 _rand
  04712	99		 cdq
  04713	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04718	f7 f9		 idiv	 ecx
  0471a	f3 0f 10 8d bc
	fe ff ff	 movss	 xmm1, DWORD PTR _fRate$1$[ebp]
  04722	66 0f 6e c2	 movd	 xmm0, edx
  04726	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04729	0f 2f c8	 comiss	 xmm1, xmm0
  0472c	0f 86 97 01 00
	00		 jbe	 $LN849@Attack

; 3232 : 		{
; 3233 : 			if ( skill == AT_SKILL_FIRESCREAM || skill == AT_MSKILL_DL_FIRESCREAM1 )

  04732	83 fe 4e	 cmp	 esi, 78			; 0000004eH
  04735	74 50		 je	 SHORT $LN706@Attack
  04737	81 fe 06 02 00
	00		 cmp	 esi, 518		; 00000206H
  0473d	74 48		 je	 SHORT $LN706@Attack

; 3236 : 			}
; 3237 : 			else if( skill == AT_MSKILL_DL_FIRESCREAM2 )

  0473f	81 fe 08 02 00
	00		 cmp	 esi, 520		; 00000208H
  04745	75 4f		 jne	 SHORT $LN707@Attack

; 3238 : 			{
; 3239 : 				float fSkillValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  04747	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  0474d	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  04751	50		 push	 eax
  04752	ff 71 08	 push	 DWORD PTR [ecx+8]
  04755	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  0475a	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  0475f	50		 push	 eax
  04760	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04765	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0476a	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]

; 3240 : 
; 3241 : 				gObjUseSkill.FireScreamExplosionAttack(lpObj,lpTargetObj,AttackDamage+fSkillValue);

  0476f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04772	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR _fSkillValue$5[ebp]
  04778	f3 0f 58 85 b8
	fe ff ff	 addss	 xmm0, DWORD PTR _fSkillValue$5[ebp]
  04780	f3 0f 2c c0	 cvttss2si eax, xmm0
  04784	50		 push	 eax
  04785	eb 03		 jmp	 SHORT $LN949@Attack
$LN706@Attack:

; 3234 : 			{
; 3235 : 				gObjUseSkill.FireScreamExplosionAttack(lpObj, lpTargetObj, AttackDamage);

  04787	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
$LN949@Attack:
  0478a	57		 push	 edi
  0478b	53		 push	 ebx
  0478c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  04791	e8 00 00 00 00	 call	 ?FireScreamExplosionAttack@CObjUseSkill@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjUseSkill::FireScreamExplosionAttack
$LN707@Attack:

; 3242 : 			}
; 3243 : 
; 3244 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  04796	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0479a	0f 85 e2 00 00
	00		 jne	 $LN708@Attack
  047a0	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  047a4	0f 85 d8 00 00
	00		 jne	 $LN708@Attack

; 3245 : 			{
; 3246 : 				if( skill == AT_SKILL_RAGEFIGHTER_DRAGONSLAYER && 

  047aa	81 fe 09 01 00
	00		 cmp	 esi, 265		; 00000109H
  047b0	0f 85 83 00 00
	00		 jne	 $LN710@Attack
  047b6	e8 00 00 00 00	 call	 _rand
  047bb	99		 cdq
  047bc	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  047c1	f7 f9		 idiv	 ecx
  047c3	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR _Energy$1$[ebp]
  047c9	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  047ce	8b ca		 mov	 ecx, edx
  047d0	f7 ee		 imul	 esi
  047d2	c1 fa 05	 sar	 edx, 5
  047d5	8b c2		 mov	 eax, edx
  047d7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  047da	83 c0 0a	 add	 eax, 10			; 0000000aH
  047dd	03 c2		 add	 eax, edx
  047df	3b c8		 cmp	 ecx, eax
  047e1	7d 56		 jge	 SHORT $LN710@Attack

; 3247 : 					rand()%100 < (10+Energy/100) )
; 3248 : 				{	
; 3249 : 					bDragonKickSDAttackSuccess = TRUE;
; 3250 : 					
; 3251 : 					int nDecreaseSDRate = 10 + Energy/30;

  047e3	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  047e8	c7 85 94 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _bDragonKickSDAttackSuccess$1$[ebp], 1
  047f2	f7 ee		 imul	 esi

; 3252 : 
; 3253 : 					if( nDecreaseSDRate > 100 )

  047f4	b8 64 00 00 00	 mov	 eax, 100		; 00000064H
  047f9	03 d6		 add	 edx, esi

; 3254 : 					nDecreaseSDRate = 100;
; 3255 : 
; 3256 : 					int nDecreaseSD = lpTargetObj->iShield*nDecreaseSDRate/100;

  047fb	8b b7 2c 01 00
	00		 mov	 esi, DWORD PTR [edi+300]
  04801	c1 fa 04	 sar	 edx, 4
  04804	8b ca		 mov	 ecx, edx
  04806	83 c2 0a	 add	 edx, 10			; 0000000aH
  04809	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0480c	03 ca		 add	 ecx, edx
  0480e	83 f9 64	 cmp	 ecx, 100		; 00000064H
  04811	0f 4f c8	 cmovg	 ecx, eax
  04814	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  04819	0f af ce	 imul	 ecx, esi
  0481c	f7 e9		 imul	 ecx
  0481e	c1 fa 05	 sar	 edx, 5
  04821	8b c2		 mov	 eax, edx
  04823	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  04826	03 c2		 add	 eax, edx

; 3257 : 					lpTargetObj->iShield -= nDecreaseSD;
; 3258 : 					lpTargetObj->Life -= AttackDamage;

  04828	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0482b	2b f0		 sub	 esi, eax
  0482d	89 b7 2c 01 00
	00		 mov	 DWORD PTR [edi+300], esi
  04833	66 0f 6e c2	 movd	 xmm0, edx

; 3259 : 					iTotalShieldDamage += nDecreaseSD;
; 3260 : 				}
; 3261 : 				else

  04837	eb 21		 jmp	 SHORT $LN950@Attack
$LN710@Attack:

; 3262 : 				{
; 3263 : 					iTempShieldDamage = this->GetShieldDamage(lpObj, lpTargetObj, AttackDamage);

  04839	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
  0483c	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  04842	57		 push	 edi
  04843	53		 push	 ebx
  04844	e8 00 00 00 00	 call	 ?GetShieldDamage@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjAttack::GetShieldDamage

; 3264 : 					lpTargetObj->iShield -= iTempShieldDamage;
; 3265 : 					lpTargetObj->Life -= AttackDamage - iTempShieldDamage;

  04849	8b 55 1c	 mov	 edx, DWORD PTR _AttackDamage$[ebp]
  0484c	8b ca		 mov	 ecx, edx
  0484e	29 87 2c 01 00
	00		 sub	 DWORD PTR [edi+300], eax
  04854	2b c8		 sub	 ecx, eax
  04856	66 0f 6e c1	 movd	 xmm0, ecx
$LN950@Attack:
  0485a	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]

; 3266 : 					iTotalShieldDamage += iTempShieldDamage;
; 3267 : 				}
; 3268 : 
; 3269 : 				AttackDamage += AttackDamage;

  04862	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  04865	01 85 c4 fe ff
	ff		 add	 DWORD PTR _iTotalShieldDamage$1$[ebp], eax
  0486b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0486e	f3 0f 5c c8	 subss	 xmm1, xmm0
  04872	0f 57 c0	 xorps	 xmm0, xmm0
  04875	f3 0f 11 8f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm1

; 3270 : 
; 3271 : 				if ( lpTargetObj->Life < 0.0f )

  0487d	0f 2f c1	 comiss	 xmm0, xmm1

; 3272 : 				{
; 3273 : 					lpTargetObj->Life = 0.0f;
; 3274 : 				}
; 3275 : 			}
; 3276 : 			else

  04880	eb 27		 jmp	 SHORT $LN952@Attack
$LN708@Attack:

; 3277 : 			{
; 3278 : 				lpTargetObj->Life -= AttackDamage;

  04882	8b 45 1c	 mov	 eax, DWORD PTR _AttackDamage$[ebp]
  04885	f3 0f 10 8f d8
	00 00 00	 movss	 xmm1, DWORD PTR [edi+216]
  0488d	66 0f 6e c0	 movd	 xmm0, eax

; 3279 : 				AttackDamage += AttackDamage;

  04891	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]
  04894	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04897	f3 0f 5c c8	 subss	 xmm1, xmm0
  0489b	0f 57 c0	 xorps	 xmm0, xmm0
  0489e	f3 0f 11 8f d8
	00 00 00	 movss	 DWORD PTR [edi+216], xmm1

; 3280 : 
; 3281 : 				if ( lpTargetObj->Life < 0.0f )

  048a6	0f 2f c1	 comiss	 xmm0, xmm1
$LN952@Attack:

; 3279 : 				AttackDamage += AttackDamage;

  048a9	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 3280 : 
; 3281 : 				if ( lpTargetObj->Life < 0.0f )

  048ac	76 0a		 jbe	 SHORT $LN714@Attack

; 3282 : 				{
; 3283 : 					lpTargetObj->Life = 0.0f;

  048ae	c7 87 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+216], 0
$LN714@Attack:

; 3284 : 				}
; 3285 : 			}
; 3286 : 
; 3287 : 			MsgDamage |= 0x40;

  048b8	8b b5 c8 fe ff
	ff		 mov	 esi, DWORD PTR _MsgDamage$[ebp]
  048be	83 ce 40	 or	 esi, 64			; 00000040H
  048c1	89 b5 c8 fe ff
	ff		 mov	 DWORD PTR _MsgDamage$[ebp], esi
  048c7	eb 09		 jmp	 SHORT $LN703@Attack
$LN849@Attack:
  048c9	8b 4d 1c	 mov	 ecx, DWORD PTR _AttackDamage$[ebp]
  048cc	8b b5 c8 fe ff
	ff		 mov	 esi, DWORD PTR _MsgDamage$[ebp]
$LN703@Attack:

; 3288 : 		}
; 3289 : 
; 3290 : 		if ( g_ShieldSystemOn == TRUE && bDragonKickSDAttackSuccess == 0 )

  048d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_ShieldSystemOn@@3HA ; g_ShieldSystemOn
  048d7	83 f8 01	 cmp	 eax, 1
  048da	75 16		 jne	 SHORT $LN715@Attack
  048dc	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR _bDragonKickSDAttackSuccess$1$[ebp], 0

; 3291 : 		{
; 3292 : 			AttackDamage -= iTotalShieldDamage;

  048e3	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _iTotalShieldDamage$1$[ebp]
  048e9	75 66		 jne	 SHORT $LN718@Attack
  048eb	2b ca		 sub	 ecx, edx
  048ed	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx

; 3293 : 		}
; 3294 : 
; 3295 : 		if ( g_ShieldSystemOn == FALSE )

  048f0	eb 5f		 jmp	 SHORT $LN718@Attack
$LN715@Attack:
  048f2	85 c0		 test	 eax, eax
  048f4	75 55		 jne	 SHORT $LN872@Attack

; 3296 : 		{
; 3297 : 			if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  048f6	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  048fa	75 4f		 jne	 SHORT $LN872@Attack
  048fc	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  04900	75 49		 jne	 SHORT $LN872@Attack

; 3298 : 			{
; 3299 : 				if ( CC_MAP_RANGE(lpObj->MapNumber) && CC_MAP_RANGE(lpTargetObj->MapNumber) )

  04902	8a 83 23 01 00
	00		 mov	 al, BYTE PTR [ebx+291]
  04908	3c 35		 cmp	 al, 53			; 00000035H
  0490a	74 0f		 je	 SHORT $LN818@Attack
  0490c	3c 12		 cmp	 al, 18			; 00000012H
  0490e	72 3b		 jb	 SHORT $LN872@Attack
  04910	b2 17		 mov	 dl, 23			; 00000017H
  04912	3a d0		 cmp	 dl, al
  04914	1b c0		 sbb	 eax, eax
  04916	83 c0 01	 add	 eax, 1
  04919	74 30		 je	 SHORT $LN872@Attack
$LN818@Attack:
  0491b	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  04921	3c 35		 cmp	 al, 53			; 00000035H
  04923	74 0f		 je	 SHORT $LN819@Attack
  04925	3c 12		 cmp	 al, 18			; 00000012H
  04927	72 22		 jb	 SHORT $LN872@Attack
  04929	b2 17		 mov	 dl, 23			; 00000017H
  0492b	3a d0		 cmp	 dl, al
  0492d	1b c0		 sbb	 eax, eax
  0492f	83 c0 01	 add	 eax, 1
  04932	74 17		 je	 SHORT $LN872@Attack
$LN819@Attack:

; 3300 : 				{
; 3301 : 					AttackDamage = AttackDamage * 50 / 100;

  04934	6b c9 32	 imul	 ecx, ecx, 50
  04937	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0493c	f7 e9		 imul	 ecx
  0493e	c1 fa 05	 sar	 edx, 5
  04941	8b ca		 mov	 ecx, edx
  04943	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  04946	03 ca		 add	 ecx, edx
  04948	89 4d 1c	 mov	 DWORD PTR _AttackDamage$[ebp], ecx
$LN872@Attack:
  0494b	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _iTotalShieldDamage$1$[ebp]
$LN718@Attack:

; 3302 : 				}
; 3303 : 			}
; 3304 : 		}
; 3305 : 
; 3306 : 		if( lpObj->Class == CLASS_FIGHTER && byBarrageCount )

  04951	66 83 bb 90 00
	00 00 06	 cmp	 WORD PTR [ebx+144], 6
  04959	75 74		 jne	 SHORT $LN724@Attack
  0495b	80 7d 24 00	 cmp	 BYTE PTR _byBarrageCount$[ebp], 0
  0495f	74 6e		 je	 SHORT $LN724@Attack

; 3307 : 		{
; 3308 : 			if( lpMagic->m_Skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 3309 : 				lpMagic->m_Skill == AT_SKILL_RAGEFIGHTER_DARKSIDE ||
; 3310 : 				lpMagic->m_Skill == AT_MSKILL_RF_UPERCUT1 ||
; 3311 : 				lpMagic->m_Skill == AT_MSKILL_RF_UPERCUT2 ||
; 3312 : 				lpMagic->m_Skill == AT_MSKILL_RF_DARKSIDE1 ||

  04961	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  04967	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0496a	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  0496f	74 3c		 je	 SHORT $LN722@Attack
  04971	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  04976	74 35		 je	 SHORT $LN722@Attack
  04978	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  0497d	74 2e		 je	 SHORT $LN722@Attack
  0497f	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  04984	74 27		 je	 SHORT $LN722@Attack
  04986	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  0498b	74 20		 je	 SHORT $LN722@Attack
  0498d	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  04992	74 19		 je	 SHORT $LN722@Attack

; 3322 : 				}
; 3323 : 			}
; 3324 : 			else
; 3325 : 			{
; 3326 : 				if( (byBarrageCount%4) == 0 )

  04994	8b 45 24	 mov	 eax, DWORD PTR _byBarrageCount$[ebp]
  04997	0f b6 c0	 movzx	 eax, al
  0499a	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0499f	79 05		 jns	 SHORT $LN881@Attack
  049a1	48		 dec	 eax
  049a2	83 c8 fc	 or	 eax, -4			; fffffffcH
  049a5	40		 inc	 eax
$LN881@Attack:
  049a6	75 1e		 jne	 SHORT $LN723@Attack

; 3327 : 				{
; 3328 : 					MsgDamage |= 0x20;

  049a8	83 ce 20	 or	 esi, 32			; 00000020H

; 3329 : 				}
; 3330 : 				else

  049ab	eb 1c		 jmp	 SHORT $LN953@Attack
$LN722@Attack:

; 3313 : 				lpMagic->m_Skill == AT_MSKILL_RF_DARKSIDE2 )
; 3314 : 			{
; 3315 : 				if( (byBarrageCount%2) == 0 )

  049ad	8b 45 24	 mov	 eax, DWORD PTR _byBarrageCount$[ebp]
  049b0	0f b6 c0	 movzx	 eax, al
  049b3	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  049b8	79 05		 jns	 SHORT $LN882@Attack
  049ba	48		 dec	 eax
  049bb	83 c8 fe	 or	 eax, -2			; fffffffeH
  049be	40		 inc	 eax
$LN882@Attack:
  049bf	75 05		 jne	 SHORT $LN723@Attack

; 3316 : 				{
; 3317 : 					MsgDamage |= 0x20;

  049c1	83 ce 20	 or	 esi, 32			; 00000020H

; 3318 : 				}
; 3319 : 				else

  049c4	eb 03		 jmp	 SHORT $LN953@Attack
$LN723@Attack:

; 3320 : 				{
; 3321 : 					MsgDamage |= 0x10;

  049c6	83 ce 10	 or	 esi, 16			; 00000010H
$LN953@Attack:
  049c9	89 b5 c8 fe ff
	ff		 mov	 DWORD PTR _MsgDamage$[ebp], esi
$LN724@Attack:

; 3331 : 				{
; 3332 : 					MsgDamage |= 0x10;
; 3333 : 				}
; 3334 : 			}
; 3335 : 		}
; 3336 : 
; 3337 : 		gObjLifeCheck(lpTargetObj, lpObj, AttackDamage, 0, MSBFlag, MsgDamage, skill, iTotalShieldDamage);

  049cf	0f b6 85 b7 fe
	ff ff		 movzx	 eax, BYTE PTR _MSBFlag$1$[ebp]
  049d6	52		 push	 edx
  049d7	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _skill$1$[ebp]
  049dd	56		 push	 esi
  049de	50		 push	 eax
  049df	6a 00		 push	 0
  049e1	51		 push	 ecx
  049e2	53		 push	 ebx
  049e3	57		 push	 edi
  049e4	e8 00 00 00 00	 call	 ?gObjLifeCheck@@YAXPAUOBJECTSTRUCT@@0HHHHGH@Z ; gObjLifeCheck

; 3338 : 
; 3339 : 		if ( iTotalShieldDamage > 0 )

  049e9	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _iTotalShieldDamage$1$[ebp]
  049ef	83 c4 20	 add	 esp, 32			; 00000020H
  049f2	85 c9		 test	 ecx, ecx
  049f4	7e 70		 jle	 SHORT $LN680@Attack

; 3340 : 		{
; 3341 : 			LogAddTD("[PvP System] Victim:[%s][%s], Attacker:[%s][%s] - SD[%d] HP[%f] -> SD[%d] HP[%f]",

  049f6	f3 0f 10 87 d8
	00 00 00	 movss	 xmm0, DWORD PTR [edi+216]
  049fe	83 ec 08	 sub	 esp, 8
  04a01	8b 87 2c 01 00
	00		 mov	 eax, DWORD PTR [edi+300]
  04a07	0f 5a c0	 cvtps2pd xmm0, xmm0
  04a0a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  04a0f	66 0f 6e 45 1c	 movd	 xmm0, DWORD PTR _AttackDamage$[ebp]
  04a14	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04a17	50		 push	 eax
  04a18	83 ec 08	 sub	 esp, 8
  04a1b	03 c1		 add	 eax, ecx
  04a1d	f3 0f 58 87 d8
	00 00 00	 addss	 xmm0, DWORD PTR [edi+216]
  04a25	0f 5a c0	 cvtps2pd xmm0, xmm0
  04a28	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  04a2d	50		 push	 eax
  04a2e	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  04a31	50		 push	 eax
  04a32	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  04a35	50		 push	 eax
  04a36	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  04a39	50		 push	 eax
  04a3a	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  04a3d	50		 push	 eax
  04a3e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HEJCKECH@?$FLPvP?5System?$FN?5Victim?3?$FL?$CFs?$FN?$FL?$CFs?$FN?0?5At@
  04a43	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  04a49	83 c4 2c	 add	 esp, 44			; 0000002cH

; 3342 : 				lpTargetObj->AccountID, lpTargetObj->Name, lpObj->AccountID, lpObj->Name,
; 3343 : 				lpTargetObj->iShield + iTotalShieldDamage, lpTargetObj->Life + AttackDamage, 
; 3344 : 				lpTargetObj->iShield, lpTargetObj->Life);
; 3345 : 		}
; 3346 : 	}
; 3347 : 	else

  04a4c	eb 18		 jmp	 SHORT $LN680@Attack
$LN679@Attack:

; 3348 : 	{
; 3349 : 		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, MsgDamage, 0);

  04a4e	6a 00		 push	 0
  04a50	ff b5 c8 fe ff
	ff		 push	 DWORD PTR _MsgDamage$[ebp]
  04a56	6a 00		 push	 0
  04a58	6a 00		 push	 0
  04a5a	ff 37		 push	 DWORD PTR [edi]
  04a5c	ff 33		 push	 DWORD PTR [ebx]
  04a5e	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  04a63	83 c4 18	 add	 esp, 24			; 00000018H
$LN680@Attack:

; 3350 : 	}
; 3351 : 
; 3352 : 	if ( lpObj->Life <= 0.0f && lpObj->Type == OBJ_USER )

  04a66	0f 57 c0	 xorps	 xmm0, xmm0
  04a69	0f 2f 83 d8 00
	00 00		 comiss	 xmm0, DWORD PTR [ebx+216]
  04a70	72 2c		 jb	 SHORT $LN729@Attack
  04a72	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  04a76	75 26		 jne	 SHORT $LN729@Attack

; 3353 : 	{
; 3354 : 		if ( lpObj->m_CheckLifeTime <= 0 )

  04a78	83 bb 64 14 00
	00 00		 cmp	 DWORD PTR [ebx+5220], 0
  04a7f	7f 1d		 jg	 SHORT $LN729@Attack

; 3355 : 		{
; 3356 : 			lpObj->lpAttackObj = lpTargetObj;

  04a81	89 bb b4 05 00
	00		 mov	 DWORD PTR [ebx+1460], edi

; 3357 : 
; 3358 : 			if ( lpTargetObj->Type == OBJ_USER )

  04a87	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1

; 3359 : 			{
; 3360 : 				lpObj->m_bAttackerKilled = true;
; 3361 : 			}
; 3362 : 			else
; 3363 : 			{
; 3364 : 				lpObj->m_bAttackerKilled = false;
; 3365 : 			}
; 3366 : 
; 3367 : 			lpObj->m_CheckLifeTime = 3;

  04a8b	c7 83 64 14 00
	00 03 00 00 00	 mov	 DWORD PTR [ebx+5220], 3
  04a95	0f 94 c0	 sete	 al
  04a98	88 83 c0 05 00
	00		 mov	 BYTE PTR [ebx+1472], al
$LN729@Attack:

; 3368 : 		}
; 3369 : 	}
; 3370 : 
; 3371 : 	CItem* Right = &lpObj->pInventory[0];

  04a9e	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]

; 3372 : 	CItem* Left = &lpObj->pInventory[1];

  04aa4	8d b1 d4 00 00
	00		 lea	 esi, DWORD PTR [ecx+212]

; 3373 : 
; 3374 : 	if( Right->GetDetailItemType() == 2 ||

  04aaa	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  04aaf	83 f8 02	 cmp	 eax, 2
  04ab2	74 0c		 je	 SHORT $LN733@Attack
  04ab4	8b ce		 mov	 ecx, esi
  04ab6	e8 00 00 00 00	 call	 ?GetDetailItemType@CItem@@QAEHXZ ; CItem::GetDetailItemType
  04abb	83 f8 02	 cmp	 eax, 2
  04abe	75 5e		 jne	 SHORT $LN735@Attack
$LN733@Attack:

; 3375 : 		Left->GetDetailItemType() == 2 )
; 3376 : 	{
; 3377 : 		if( lpObj->m_MPSkillOpt.MpsMaceMastery > 0.0f )

  04ac0	f3 0f 10 83 18
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1816]
  04ac8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  04acf	76 4d		 jbe	 SHORT $LN735@Attack

; 3378 : 		{
; 3379 : 			float fPercent = rand()%100;

  04ad1	e8 00 00 00 00	 call	 _rand
  04ad6	99		 cdq
  04ad7	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04adc	f7 f9		 idiv	 ecx

; 3380 : 
; 3381 : 			if( fPercent < lpObj->m_MPSkillOpt.MpsMaceMastery )

  04ade	f3 0f 10 83 18
	07 00 00	 movss	 xmm0, DWORD PTR [ebx+1816]
  04ae6	66 0f 6e ca	 movd	 xmm1, edx
  04aea	0f 5b c9	 cvtdq2ps xmm1, xmm1
  04aed	0f 2f c1	 comiss	 xmm0, xmm1
  04af0	76 2c		 jbe	 SHORT $LN735@Attack

; 3382 : 			{
; 3383 : 				gObjAddBuffEffect(lpTargetObj,BUFF_STUN,0,0,0,0,2);

  04af2	6a 02		 push	 2
  04af4	6a 00		 push	 0
  04af6	6a 00		 push	 0
  04af8	6a 00		 push	 0
  04afa	6a 00		 push	 0
  04afc	6a 3d		 push	 61			; 0000003dH
  04afe	57		 push	 edi
  04aff	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 3384 : 				gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  04b04	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  04b0b	50		 push	 eax
  04b0c	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  04b13	50		 push	 eax
  04b14	ff 37		 push	 DWORD PTR [edi]
  04b16	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  04b1b	83 c4 28	 add	 esp, 40			; 00000028H
$LN735@Attack:

; 3385 : 			}
; 3386 : 		}
; 3387 : 	}
; 3388 : 
; 3389 : 	if ( lpMagic && lpMagic->m_Skill == AT_MSKILL_DK_TWISTINGSLASH2 )

  04b1e	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _lpMagic$GSCopy$1$[ebp]
  04b24	85 f6		 test	 esi, esi
  04b26	74 7c		 je	 SHORT $LN739@Attack
  04b28	81 7e 08 4c 01
	00 00		 cmp	 DWORD PTR [esi+8], 332	; 0000014cH
  04b2f	75 63		 jne	 SHORT $LN738@Attack

; 3390 : 	{
; 3391 : 		float fSpringValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(lpMagic->m_Skill),lpMagic->m_Level);

  04b31	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  04b35	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  04b3a	50		 push	 eax
  04b3b	68 4c 01 00 00	 push	 332			; 0000014cH
  04b40	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  04b45	50		 push	 eax
  04b46	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  04b4b	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  04b50	d9 9d 9c fe ff
	ff		 fstp	 DWORD PTR _fSpringValue$2[ebp]

; 3392 : 
; 3393 : 		if( fSpringValue > 0.0f )

  04b56	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _fSpringValue$2[ebp]
  04b5e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  04b65	76 2d		 jbe	 SHORT $LN738@Attack

; 3394 : 		{
; 3395 : 			float fPercent = rand()%100;

  04b67	e8 00 00 00 00	 call	 _rand
  04b6c	99		 cdq
  04b6d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  04b72	f7 f9		 idiv	 ecx

; 3396 : 
; 3397 : 			if( fPercent < fSpringValue )

  04b74	f3 0f 10 8d 9c
	fe ff ff	 movss	 xmm1, DWORD PTR _fSpringValue$2[ebp]
  04b7c	66 0f 6e c2	 movd	 xmm0, edx
  04b80	0f 5b c0	 cvtdq2ps xmm0, xmm0
  04b83	0f 2f c8	 comiss	 xmm1, xmm0
  04b86	76 0c		 jbe	 SHORT $LN738@Attack

; 3398 : 			{
; 3399 : 				gObjBackSpring2(lpTargetObj,lpObj,2);

  04b88	6a 02		 push	 2
  04b8a	53		 push	 ebx
  04b8b	57		 push	 edi
  04b8c	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  04b91	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN738@Attack:

; 3400 : 			}
; 3401 : 		}
; 3402 : 	}
; 3403 : 
; 3404 : 	if ( lpMagic )
; 3405 : 	{
; 3406 : 		gObjUseSkill.SpecificSkillAdditionTreat(lpObj, lpTargetObj, lpMagic, AttackDamage);

  04b94	ff 75 1c	 push	 DWORD PTR _AttackDamage$[ebp]
  04b97	b9 00 00 00 00	 mov	 ecx, OFFSET ?gObjUseSkill@@3VCObjUseSkill@@A ; gObjUseSkill
  04b9c	56		 push	 esi
  04b9d	57		 push	 edi
  04b9e	53		 push	 ebx
  04b9f	e8 00 00 00 00	 call	 ?SpecificSkillAdditionTreat@CObjUseSkill@@QAEXPAUOBJECTSTRUCT@@0PAVCMagicInf@@H@Z ; CObjUseSkill::SpecificSkillAdditionTreat
$LN739@Attack:

; 3407 : 	}
; 3408 : 	return TRUE;
; 3409 : }

  04ba4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  04ba7	b8 01 00 00 00	 mov	 eax, 1
  04bac	5e		 pop	 esi
  04bad	5f		 pop	 edi
  04bae	33 cd		 xor	 ecx, ebp
  04bb0	5b		 pop	 ebx
  04bb1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  04bb6	8b e5		 mov	 esp, ebp
  04bb8	5d		 pop	 ebp
  04bb9	c2 24 00	 ret	 36			; 00000024H
$LN983@Attack:
  04bbc	00 00 00 00	 DD	 $LN137@Attack
  04bc0	00 00 00 00	 DD	 $LN112@Attack
  04bc4	00 00 00 00	 DD	 $LN129@Attack
$LN820@Attack:
  04bc8	00		 DB	 0
  04bc9	00		 DB	 0
  04bca	00		 DB	 0
  04bcb	00		 DB	 0
  04bcc	00		 DB	 0
  04bcd	02		 DB	 2
  04bce	02		 DB	 2
  04bcf	02		 DB	 2
  04bd0	02		 DB	 2
  04bd1	02		 DB	 2
  04bd2	02		 DB	 2
  04bd3	02		 DB	 2
  04bd4	02		 DB	 2
  04bd5	02		 DB	 2
  04bd6	02		 DB	 2
  04bd7	02		 DB	 2
  04bd8	02		 DB	 2
  04bd9	02		 DB	 2
  04bda	02		 DB	 2
  04bdb	02		 DB	 2
  04bdc	02		 DB	 2
  04bdd	02		 DB	 2
  04bde	00		 DB	 0
  04bdf	00		 DB	 0
  04be0	00		 DB	 0
  04be1	00		 DB	 0
  04be2	02		 DB	 2
  04be3	02		 DB	 2
  04be4	00		 DB	 0
  04be5	02		 DB	 2
  04be6	00		 DB	 0
  04be7	02		 DB	 2
  04be8	02		 DB	 2
  04be9	02		 DB	 2
  04bea	02		 DB	 2
  04beb	02		 DB	 2
  04bec	00		 DB	 0
  04bed	00		 DB	 0
  04bee	00		 DB	 0
  04bef	02		 DB	 2
  04bf0	02		 DB	 2
  04bf1	02		 DB	 2
  04bf2	02		 DB	 2
  04bf3	02		 DB	 2
  04bf4	02		 DB	 2
  04bf5	02		 DB	 2
  04bf6	02		 DB	 2
  04bf7	02		 DB	 2
  04bf8	02		 DB	 2
  04bf9	02		 DB	 2
  04bfa	02		 DB	 2
  04bfb	02		 DB	 2
  04bfc	02		 DB	 2
  04bfd	02		 DB	 2
  04bfe	02		 DB	 2
  04bff	00		 DB	 0
  04c00	02		 DB	 2
  04c01	01		 DB	 1
  04c02	02		 DB	 2
  04c03	02		 DB	 2
  04c04	02		 DB	 2
  04c05	02		 DB	 2
  04c06	02		 DB	 2
  04c07	02		 DB	 2
  04c08	02		 DB	 2
  04c09	02		 DB	 2
  04c0a	02		 DB	 2
  04c0b	02		 DB	 2
  04c0c	02		 DB	 2
  04c0d	02		 DB	 2
  04c0e	02		 DB	 2
  04c0f	02		 DB	 2
  04c10	02		 DB	 2
  04c11	02		 DB	 2
  04c12	02		 DB	 2
  04c13	02		 DB	 2
  04c14	02		 DB	 2
  04c15	02		 DB	 2
  04c16	02		 DB	 2
  04c17	02		 DB	 2
  04c18	02		 DB	 2
  04c19	02		 DB	 2
  04c1a	02		 DB	 2
  04c1b	02		 DB	 2
  04c1c	02		 DB	 2
  04c1d	02		 DB	 2
  04c1e	02		 DB	 2
  04c1f	02		 DB	 2
  04c20	02		 DB	 2
  04c21	02		 DB	 2
  04c22	02		 DB	 2
  04c23	02		 DB	 2
  04c24	02		 DB	 2
  04c25	02		 DB	 2
  04c26	02		 DB	 2
  04c27	02		 DB	 2
  04c28	02		 DB	 2
  04c29	02		 DB	 2
  04c2a	02		 DB	 2
  04c2b	02		 DB	 2
  04c2c	02		 DB	 2
  04c2d	02		 DB	 2
  04c2e	02		 DB	 2
  04c2f	02		 DB	 2
  04c30	02		 DB	 2
  04c31	02		 DB	 2
  04c32	02		 DB	 2
  04c33	02		 DB	 2
  04c34	02		 DB	 2
  04c35	02		 DB	 2
  04c36	02		 DB	 2
  04c37	02		 DB	 2
  04c38	02		 DB	 2
  04c39	02		 DB	 2
  04c3a	02		 DB	 2
  04c3b	02		 DB	 2
  04c3c	02		 DB	 2
  04c3d	02		 DB	 2
  04c3e	02		 DB	 2
  04c3f	02		 DB	 2
  04c40	02		 DB	 2
  04c41	02		 DB	 2
  04c42	02		 DB	 2
  04c43	02		 DB	 2
  04c44	02		 DB	 2
  04c45	02		 DB	 2
  04c46	02		 DB	 2
  04c47	02		 DB	 2
  04c48	02		 DB	 2
  04c49	02		 DB	 2
  04c4a	02		 DB	 2
  04c4b	02		 DB	 2
  04c4c	02		 DB	 2
  04c4d	02		 DB	 2
  04c4e	02		 DB	 2
  04c4f	02		 DB	 2
  04c50	02		 DB	 2
  04c51	02		 DB	 2
  04c52	02		 DB	 2
  04c53	02		 DB	 2
  04c54	02		 DB	 2
  04c55	02		 DB	 2
  04c56	02		 DB	 2
  04c57	02		 DB	 2
  04c58	02		 DB	 2
  04c59	02		 DB	 2
  04c5a	02		 DB	 2
  04c5b	02		 DB	 2
  04c5c	02		 DB	 2
  04c5d	02		 DB	 2
  04c5e	02		 DB	 2
  04c5f	02		 DB	 2
  04c60	02		 DB	 2
  04c61	02		 DB	 2
  04c62	02		 DB	 2
  04c63	02		 DB	 2
  04c64	02		 DB	 2
  04c65	02		 DB	 2
  04c66	02		 DB	 2
  04c67	02		 DB	 2
  04c68	02		 DB	 2
  04c69	02		 DB	 2
  04c6a	02		 DB	 2
  04c6b	02		 DB	 2
  04c6c	02		 DB	 2
  04c6d	02		 DB	 2
  04c6e	02		 DB	 2
  04c6f	02		 DB	 2
  04c70	02		 DB	 2
  04c71	02		 DB	 2
  04c72	02		 DB	 2
  04c73	02		 DB	 2
  04c74	02		 DB	 2
  04c75	02		 DB	 2
  04c76	02		 DB	 2
  04c77	02		 DB	 2
  04c78	02		 DB	 2
  04c79	02		 DB	 2
  04c7a	02		 DB	 2
  04c7b	02		 DB	 2
  04c7c	02		 DB	 2
  04c7d	02		 DB	 2
  04c7e	02		 DB	 2
  04c7f	02		 DB	 2
  04c80	02		 DB	 2
  04c81	02		 DB	 2
  04c82	02		 DB	 2
  04c83	02		 DB	 2
  04c84	02		 DB	 2
  04c85	02		 DB	 2
  04c86	02		 DB	 2
  04c87	02		 DB	 2
  04c88	02		 DB	 2
  04c89	02		 DB	 2
  04c8a	02		 DB	 2
  04c8b	02		 DB	 2
  04c8c	02		 DB	 2
  04c8d	02		 DB	 2
  04c8e	02		 DB	 2
  04c8f	02		 DB	 2
  04c90	02		 DB	 2
  04c91	02		 DB	 2
  04c92	02		 DB	 2
  04c93	02		 DB	 2
  04c94	02		 DB	 2
  04c95	02		 DB	 2
  04c96	02		 DB	 2
  04c97	02		 DB	 2
  04c98	02		 DB	 2
  04c99	02		 DB	 2
  04c9a	02		 DB	 2
  04c9b	02		 DB	 2
  04c9c	02		 DB	 2
  04c9d	00		 DB	 0
  04c9e	02		 DB	 2
  04c9f	02		 DB	 2
  04ca0	00		 DB	 0
  04ca1	00		 DB	 0
  04ca2	02		 DB	 2
  04ca3	00		 DB	 0
$LN984@Attack:
  04ca4	00 00 00 00	 DD	 $LN137@Attack
  04ca8	00 00 00 00	 DD	 $LN129@Attack
$LN821@Attack:
  04cac	00		 DB	 0
  04cad	00		 DB	 0
  04cae	01		 DB	 1
  04caf	00		 DB	 0
  04cb0	00		 DB	 0
  04cb1	01		 DB	 1
  04cb2	00		 DB	 0
  04cb3	00		 DB	 0
  04cb4	00		 DB	 0
  04cb5	01		 DB	 1
  04cb6	00		 DB	 0
  04cb7	01		 DB	 1
  04cb8	01		 DB	 1
  04cb9	01		 DB	 1
  04cba	01		 DB	 1
  04cbb	01		 DB	 1
  04cbc	01		 DB	 1
  04cbd	01		 DB	 1
  04cbe	01		 DB	 1
  04cbf	01		 DB	 1
  04cc0	01		 DB	 1
  04cc1	01		 DB	 1
  04cc2	01		 DB	 1
  04cc3	01		 DB	 1
  04cc4	01		 DB	 1
  04cc5	01		 DB	 1
  04cc6	01		 DB	 1
  04cc7	01		 DB	 1
  04cc8	01		 DB	 1
  04cc9	01		 DB	 1
  04cca	01		 DB	 1
  04ccb	01		 DB	 1
  04ccc	01		 DB	 1
  04ccd	01		 DB	 1
  04cce	01		 DB	 1
  04ccf	01		 DB	 1
  04cd0	01		 DB	 1
  04cd1	01		 DB	 1
  04cd2	01		 DB	 1
  04cd3	01		 DB	 1
  04cd4	01		 DB	 1
  04cd5	01		 DB	 1
  04cd6	01		 DB	 1
  04cd7	01		 DB	 1
  04cd8	01		 DB	 1
  04cd9	01		 DB	 1
  04cda	01		 DB	 1
  04cdb	01		 DB	 1
  04cdc	01		 DB	 1
  04cdd	01		 DB	 1
  04cde	01		 DB	 1
  04cdf	01		 DB	 1
  04ce0	01		 DB	 1
  04ce1	01		 DB	 1
  04ce2	01		 DB	 1
  04ce3	01		 DB	 1
  04ce4	01		 DB	 1
  04ce5	01		 DB	 1
  04ce6	01		 DB	 1
  04ce7	01		 DB	 1
  04ce8	01		 DB	 1
  04ce9	01		 DB	 1
  04cea	01		 DB	 1
  04ceb	01		 DB	 1
  04cec	01		 DB	 1
  04ced	01		 DB	 1
  04cee	01		 DB	 1
  04cef	01		 DB	 1
  04cf0	01		 DB	 1
  04cf1	01		 DB	 1
  04cf2	01		 DB	 1
  04cf3	01		 DB	 1
  04cf4	01		 DB	 1
  04cf5	01		 DB	 1
  04cf6	01		 DB	 1
  04cf7	00		 DB	 0
  04cf8	01		 DB	 1
  04cf9	01		 DB	 1
  04cfa	01		 DB	 1
  04cfb	01		 DB	 1
  04cfc	01		 DB	 1
  04cfd	01		 DB	 1
  04cfe	01		 DB	 1
  04cff	01		 DB	 1
  04d00	01		 DB	 1
  04d01	01		 DB	 1
  04d02	01		 DB	 1
  04d03	01		 DB	 1
  04d04	01		 DB	 1
  04d05	01		 DB	 1
  04d06	01		 DB	 1
  04d07	01		 DB	 1
  04d08	01		 DB	 1
  04d09	01		 DB	 1
  04d0a	01		 DB	 1
  04d0b	00		 DB	 0
  04d0c	01		 DB	 1
  04d0d	01		 DB	 1
  04d0e	01		 DB	 1
  04d0f	01		 DB	 1
  04d10	01		 DB	 1
  04d11	01		 DB	 1
  04d12	01		 DB	 1
  04d13	01		 DB	 1
  04d14	01		 DB	 1
  04d15	01		 DB	 1
  04d16	01		 DB	 1
  04d17	01		 DB	 1
  04d18	01		 DB	 1
  04d19	01		 DB	 1
  04d1a	01		 DB	 1
  04d1b	01		 DB	 1
  04d1c	01		 DB	 1
  04d1d	01		 DB	 1
  04d1e	01		 DB	 1
  04d1f	01		 DB	 1
  04d20	01		 DB	 1
  04d21	01		 DB	 1
  04d22	01		 DB	 1
  04d23	01		 DB	 1
  04d24	01		 DB	 1
  04d25	01		 DB	 1
  04d26	01		 DB	 1
  04d27	01		 DB	 1
  04d28	01		 DB	 1
  04d29	01		 DB	 1
  04d2a	01		 DB	 1
  04d2b	01		 DB	 1
  04d2c	01		 DB	 1
  04d2d	01		 DB	 1
  04d2e	01		 DB	 1
  04d2f	01		 DB	 1
  04d30	01		 DB	 1
  04d31	01		 DB	 1
  04d32	01		 DB	 1
  04d33	01		 DB	 1
  04d34	01		 DB	 1
  04d35	01		 DB	 1
  04d36	01		 DB	 1
  04d37	01		 DB	 1
  04d38	01		 DB	 1
  04d39	01		 DB	 1
  04d3a	01		 DB	 1
  04d3b	00		 DB	 0
  04d3c	01		 DB	 1
  04d3d	00		 DB	 0
  04d3e	00		 DB	 0
  04d3f	01		 DB	 1
  04d40	01		 DB	 1
  04d41	01		 DB	 1
  04d42	01		 DB	 1
  04d43	01		 DB	 1
  04d44	01		 DB	 1
  04d45	01		 DB	 1
  04d46	00		 DB	 0
  04d47	01		 DB	 1
  04d48	00		 DB	 0
  04d49	00		 DB	 0
  04d4a	00		 DB	 0
  04d4b	90		 npad	 1
$LN985@Attack:
  04d4c	00 00 00 00	 DD	 $LN280@Attack
  04d50	00 00 00 00	 DD	 $LN283@Attack
  04d54	00 00 00 00	 DD	 $LN286@Attack
  04d58	00 00 00 00	 DD	 $LN294@Attack
  04d5c	00 00 00 00	 DD	 $LN295@Attack
  04d60	00 00 00 00	 DD	 $LN298@Attack
  04d64	00 00 00 00	 DD	 $LN304@Attack
  04d68	00 00 00 00	 DD	 $LN297@Attack
  04d6c	00 00 00 00	 DD	 $LN313@Attack
  04d70	00 00 00 00	 DD	 $LN326@Attack
  04d74	00 00 00 00	 DD	 $LN343@Attack
  04d78	00 00 00 00	 DD	 $LN309@Attack
  04d7c	00 00 00 00	 DD	 $LN312@Attack
  04d80	00 00 00 00	 DD	 $LN359@Attack
  04d84	00 00 00 00	 DD	 $LN361@Attack
  04d88	00 00 00 00	 DD	 $LN362@Attack
  04d8c	00 00 00 00	 DD	 $LN363@Attack
  04d90	00 00 00 00	 DD	 $LN364@Attack
  04d94	00 00 00 00	 DD	 $LN365@Attack
  04d98	00 00 00 00	 DD	 $LN373@Attack
  04d9c	00 00 00 00	 DD	 $LN370@Attack
  04da0	00 00 00 00	 DD	 $LN371@Attack
  04da4	00 00 00 00	 DD	 $LN372@Attack
  04da8	00 00 00 00	 DD	 $LN374@Attack
  04dac	00 00 00 00	 DD	 $LN376@Attack
  04db0	00 00 00 00	 DD	 $LN378@Attack
  04db4	00 00 00 00	 DD	 $LN380@Attack
  04db8	00 00 00 00	 DD	 $LN829@Attack
$LN822@Attack:
  04dbc	00		 DB	 0
  04dbd	00		 DB	 0
  04dbe	00		 DB	 0
  04dbf	00		 DB	 0
  04dc0	00		 DB	 0
  04dc1	1b		 DB	 27			; 0000001bH
  04dc2	1b		 DB	 27			; 0000001bH
  04dc3	1b		 DB	 27			; 0000001bH
  04dc4	1b		 DB	 27			; 0000001bH
  04dc5	1b		 DB	 27			; 0000001bH
  04dc6	1b		 DB	 27			; 0000001bH
  04dc7	1b		 DB	 27			; 0000001bH
  04dc8	1b		 DB	 27			; 0000001bH
  04dc9	1b		 DB	 27			; 0000001bH
  04dca	1b		 DB	 27			; 0000001bH
  04dcb	1b		 DB	 27			; 0000001bH
  04dcc	1b		 DB	 27			; 0000001bH
  04dcd	1b		 DB	 27			; 0000001bH
  04dce	1b		 DB	 27			; 0000001bH
  04dcf	1b		 DB	 27			; 0000001bH
  04dd0	1b		 DB	 27			; 0000001bH
  04dd1	1b		 DB	 27			; 0000001bH
  04dd2	00		 DB	 0
  04dd3	00		 DB	 0
  04dd4	00		 DB	 0
  04dd5	00		 DB	 0
  04dd6	1b		 DB	 27			; 0000001bH
  04dd7	01		 DB	 1
  04dd8	02		 DB	 2
  04dd9	1b		 DB	 27			; 0000001bH
  04dda	00		 DB	 0
  04ddb	1b		 DB	 27			; 0000001bH
  04ddc	01		 DB	 1
  04ddd	01		 DB	 1
  04dde	1b		 DB	 27			; 0000001bH
  04ddf	1b		 DB	 27			; 0000001bH
  04de0	00		 DB	 0
  04de1	01		 DB	 1
  04de2	00		 DB	 0
  04de3	1b		 DB	 27			; 0000001bH
  04de4	1b		 DB	 27			; 0000001bH
  04de5	03		 DB	 3
  04de6	03		 DB	 3
  04de7	03		 DB	 3
  04de8	1b		 DB	 27			; 0000001bH
  04de9	1b		 DB	 27			; 0000001bH
  04dea	03		 DB	 3
  04deb	1b		 DB	 27			; 0000001bH
  04dec	1b		 DB	 27			; 0000001bH
  04ded	1b		 DB	 27			; 0000001bH
  04dee	1b		 DB	 27			; 0000001bH
  04def	1b		 DB	 27			; 0000001bH
  04df0	1b		 DB	 27			; 0000001bH
  04df1	1b		 DB	 27			; 0000001bH
  04df2	1b		 DB	 27			; 0000001bH
  04df3	03		 DB	 3
  04df4	1b		 DB	 27			; 0000001bH
  04df5	04		 DB	 4
  04df6	1b		 DB	 27			; 0000001bH
  04df7	03		 DB	 3
  04df8	1b		 DB	 27			; 0000001bH
  04df9	1b		 DB	 27			; 0000001bH
  04dfa	1b		 DB	 27			; 0000001bH
  04dfb	1b		 DB	 27			; 0000001bH
  04dfc	1b		 DB	 27			; 0000001bH
  04dfd	1b		 DB	 27			; 0000001bH
  04dfe	1b		 DB	 27			; 0000001bH
  04dff	1b		 DB	 27			; 0000001bH
  04e00	1b		 DB	 27			; 0000001bH
  04e01	1b		 DB	 27			; 0000001bH
  04e02	1b		 DB	 27			; 0000001bH
  04e03	1b		 DB	 27			; 0000001bH
  04e04	1b		 DB	 27			; 0000001bH
  04e05	1b		 DB	 27			; 0000001bH
  04e06	1b		 DB	 27			; 0000001bH
  04e07	1b		 DB	 27			; 0000001bH
  04e08	1b		 DB	 27			; 0000001bH
  04e09	1b		 DB	 27			; 0000001bH
  04e0a	1b		 DB	 27			; 0000001bH
  04e0b	1b		 DB	 27			; 0000001bH
  04e0c	1b		 DB	 27			; 0000001bH
  04e0d	1b		 DB	 27			; 0000001bH
  04e0e	1b		 DB	 27			; 0000001bH
  04e0f	1b		 DB	 27			; 0000001bH
  04e10	1b		 DB	 27			; 0000001bH
  04e11	1b		 DB	 27			; 0000001bH
  04e12	1b		 DB	 27			; 0000001bH
  04e13	1b		 DB	 27			; 0000001bH
  04e14	1b		 DB	 27			; 0000001bH
  04e15	1b		 DB	 27			; 0000001bH
  04e16	1b		 DB	 27			; 0000001bH
  04e17	1b		 DB	 27			; 0000001bH
  04e18	1b		 DB	 27			; 0000001bH
  04e19	1b		 DB	 27			; 0000001bH
  04e1a	1b		 DB	 27			; 0000001bH
  04e1b	1b		 DB	 27			; 0000001bH
  04e1c	1b		 DB	 27			; 0000001bH
  04e1d	1b		 DB	 27			; 0000001bH
  04e1e	1b		 DB	 27			; 0000001bH
  04e1f	1b		 DB	 27			; 0000001bH
  04e20	1b		 DB	 27			; 0000001bH
  04e21	1b		 DB	 27			; 0000001bH
  04e22	1b		 DB	 27			; 0000001bH
  04e23	1b		 DB	 27			; 0000001bH
  04e24	1b		 DB	 27			; 0000001bH
  04e25	1b		 DB	 27			; 0000001bH
  04e26	1b		 DB	 27			; 0000001bH
  04e27	1b		 DB	 27			; 0000001bH
  04e28	1b		 DB	 27			; 0000001bH
  04e29	1b		 DB	 27			; 0000001bH
  04e2a	1b		 DB	 27			; 0000001bH
  04e2b	1b		 DB	 27			; 0000001bH
  04e2c	1b		 DB	 27			; 0000001bH
  04e2d	1b		 DB	 27			; 0000001bH
  04e2e	1b		 DB	 27			; 0000001bH
  04e2f	1b		 DB	 27			; 0000001bH
  04e30	1b		 DB	 27			; 0000001bH
  04e31	1b		 DB	 27			; 0000001bH
  04e32	1b		 DB	 27			; 0000001bH
  04e33	1b		 DB	 27			; 0000001bH
  04e34	1b		 DB	 27			; 0000001bH
  04e35	1b		 DB	 27			; 0000001bH
  04e36	1b		 DB	 27			; 0000001bH
  04e37	1b		 DB	 27			; 0000001bH
  04e38	1b		 DB	 27			; 0000001bH
  04e39	1b		 DB	 27			; 0000001bH
  04e3a	1b		 DB	 27			; 0000001bH
  04e3b	1b		 DB	 27			; 0000001bH
  04e3c	1b		 DB	 27			; 0000001bH
  04e3d	1b		 DB	 27			; 0000001bH
  04e3e	1b		 DB	 27			; 0000001bH
  04e3f	1b		 DB	 27			; 0000001bH
  04e40	1b		 DB	 27			; 0000001bH
  04e41	1b		 DB	 27			; 0000001bH
  04e42	1b		 DB	 27			; 0000001bH
  04e43	1b		 DB	 27			; 0000001bH
  04e44	1b		 DB	 27			; 0000001bH
  04e45	1b		 DB	 27			; 0000001bH
  04e46	1b		 DB	 27			; 0000001bH
  04e47	1b		 DB	 27			; 0000001bH
  04e48	1b		 DB	 27			; 0000001bH
  04e49	1b		 DB	 27			; 0000001bH
  04e4a	1b		 DB	 27			; 0000001bH
  04e4b	1b		 DB	 27			; 0000001bH
  04e4c	1b		 DB	 27			; 0000001bH
  04e4d	1b		 DB	 27			; 0000001bH
  04e4e	1b		 DB	 27			; 0000001bH
  04e4f	1b		 DB	 27			; 0000001bH
  04e50	1b		 DB	 27			; 0000001bH
  04e51	1b		 DB	 27			; 0000001bH
  04e52	1b		 DB	 27			; 0000001bH
  04e53	1b		 DB	 27			; 0000001bH
  04e54	1b		 DB	 27			; 0000001bH
  04e55	1b		 DB	 27			; 0000001bH
  04e56	1b		 DB	 27			; 0000001bH
  04e57	1b		 DB	 27			; 0000001bH
  04e58	1b		 DB	 27			; 0000001bH
  04e59	1b		 DB	 27			; 0000001bH
  04e5a	1b		 DB	 27			; 0000001bH
  04e5b	1b		 DB	 27			; 0000001bH
  04e5c	1b		 DB	 27			; 0000001bH
  04e5d	1b		 DB	 27			; 0000001bH
  04e5e	1b		 DB	 27			; 0000001bH
  04e5f	1b		 DB	 27			; 0000001bH
  04e60	1b		 DB	 27			; 0000001bH
  04e61	1b		 DB	 27			; 0000001bH
  04e62	1b		 DB	 27			; 0000001bH
  04e63	1b		 DB	 27			; 0000001bH
  04e64	1b		 DB	 27			; 0000001bH
  04e65	1b		 DB	 27			; 0000001bH
  04e66	1b		 DB	 27			; 0000001bH
  04e67	1b		 DB	 27			; 0000001bH
  04e68	1b		 DB	 27			; 0000001bH
  04e69	1b		 DB	 27			; 0000001bH
  04e6a	1b		 DB	 27			; 0000001bH
  04e6b	1b		 DB	 27			; 0000001bH
  04e6c	1b		 DB	 27			; 0000001bH
  04e6d	1b		 DB	 27			; 0000001bH
  04e6e	1b		 DB	 27			; 0000001bH
  04e6f	1b		 DB	 27			; 0000001bH
  04e70	1b		 DB	 27			; 0000001bH
  04e71	1b		 DB	 27			; 0000001bH
  04e72	1b		 DB	 27			; 0000001bH
  04e73	1b		 DB	 27			; 0000001bH
  04e74	1b		 DB	 27			; 0000001bH
  04e75	1b		 DB	 27			; 0000001bH
  04e76	1b		 DB	 27			; 0000001bH
  04e77	1b		 DB	 27			; 0000001bH
  04e78	1b		 DB	 27			; 0000001bH
  04e79	1b		 DB	 27			; 0000001bH
  04e7a	1b		 DB	 27			; 0000001bH
  04e7b	1b		 DB	 27			; 0000001bH
  04e7c	1b		 DB	 27			; 0000001bH
  04e7d	1b		 DB	 27			; 0000001bH
  04e7e	1b		 DB	 27			; 0000001bH
  04e7f	05		 DB	 5
  04e80	06		 DB	 6
  04e81	07		 DB	 7
  04e82	1b		 DB	 27			; 0000001bH
  04e83	1b		 DB	 27			; 0000001bH
  04e84	08		 DB	 8
  04e85	1b		 DB	 27			; 0000001bH
  04e86	09		 DB	 9
  04e87	0a		 DB	 10			; 0000000aH
  04e88	0b		 DB	 11			; 0000000bH
  04e89	0c		 DB	 12			; 0000000cH
  04e8a	0d		 DB	 13			; 0000000dH
  04e8b	1b		 DB	 27			; 0000001bH
  04e8c	1b		 DB	 27			; 0000001bH
  04e8d	1b		 DB	 27			; 0000001bH
  04e8e	1b		 DB	 27			; 0000001bH
  04e8f	0e		 DB	 14			; 0000000eH
  04e90	1b		 DB	 27			; 0000001bH
  04e91	0f		 DB	 15			; 0000000fH
  04e92	1b		 DB	 27			; 0000001bH
  04e93	1b		 DB	 27			; 0000001bH
  04e94	1b		 DB	 27			; 0000001bH
  04e95	10		 DB	 16			; 00000010H
  04e96	11		 DB	 17			; 00000011H
  04e97	12		 DB	 18			; 00000012H
  04e98	13		 DB	 19			; 00000013H
  04e99	1b		 DB	 27			; 0000001bH
  04e9a	1b		 DB	 27			; 0000001bH
  04e9b	1b		 DB	 27			; 0000001bH
  04e9c	1b		 DB	 27			; 0000001bH
  04e9d	1b		 DB	 27			; 0000001bH
  04e9e	1b		 DB	 27			; 0000001bH
  04e9f	1b		 DB	 27			; 0000001bH
  04ea0	1b		 DB	 27			; 0000001bH
  04ea1	1b		 DB	 27			; 0000001bH
  04ea2	1b		 DB	 27			; 0000001bH
  04ea3	01		 DB	 1
  04ea4	14		 DB	 20			; 00000014H
  04ea5	15		 DB	 21			; 00000015H
  04ea6	16		 DB	 22			; 00000016H
  04ea7	1b		 DB	 27			; 0000001bH
  04ea8	1b		 DB	 27			; 0000001bH
  04ea9	1b		 DB	 27			; 0000001bH
  04eaa	1b		 DB	 27			; 0000001bH
  04eab	1b		 DB	 27			; 0000001bH
  04eac	1b		 DB	 27			; 0000001bH
  04ead	17		 DB	 23			; 00000017H
  04eae	17		 DB	 23			; 00000017H
  04eaf	17		 DB	 23			; 00000017H
  04eb0	18		 DB	 24			; 00000018H
  04eb1	19		 DB	 25			; 00000019H
  04eb2	1a		 DB	 26			; 0000001aH
  04eb3	1b		 DB	 27			; 0000001bH
  04eb4	1b		 DB	 27			; 0000001bH
  04eb5	1b		 DB	 27			; 0000001bH
  04eb6	17		 DB	 23			; 00000017H
  04eb7	17		 DB	 23			; 00000017H
$LN986@Attack:
  04eb8	00 00 00 00	 DD	 $LN389@Attack
  04ebc	00 00 00 00	 DD	 $LN387@Attack
  04ec0	00 00 00 00	 DD	 $LN394@Attack
  04ec4	00 00 00 00	 DD	 $LN415@Attack
  04ec8	00 00 00 00	 DD	 $LN395@Attack
  04ecc	00 00 00 00	 DD	 $LN418@Attack
  04ed0	00 00 00 00	 DD	 $LN398@Attack
  04ed4	00 00 00 00	 DD	 $LN470@Attack
  04ed8	00 00 00 00	 DD	 $LN475@Attack
  04edc	00 00 00 00	 DD	 $LN472@Attack
  04ee0	00 00 00 00	 DD	 $LN388@Attack
  04ee4	00 00 00 00	 DD	 $LN427@Attack
  04ee8	00 00 00 00	 DD	 $LN440@Attack
  04eec	00 00 00 00	 DD	 $LN445@Attack
  04ef0	00 00 00 00	 DD	 $LN446@Attack
  04ef4	00 00 00 00	 DD	 $LN497@Attack
  04ef8	00 00 00 00	 DD	 $LN481@Attack
  04efc	00 00 00 00	 DD	 $LN452@Attack
  04f00	00 00 00 00	 DD	 $LN479@Attack
  04f04	00 00 00 00	 DD	 $LN385@Attack
  04f08	00 00 00 00	 DD	 $LN411@Attack
  04f0c	00 00 00 00	 DD	 $LN405@Attack
  04f10	00 00 00 00	 DD	 $LN513@Attack
  04f14	00 00 00 00	 DD	 $LN460@Attack
  04f18	00 00 00 00	 DD	 $LN462@Attack
  04f1c	00 00 00 00	 DD	 $LN464@Attack
  04f20	00 00 00 00	 DD	 $LN466@Attack
  04f24	00 00 00 00	 DD	 $LN10@Attack
$LN823@Attack:
  04f28	00		 DB	 0
  04f29	00		 DB	 0
  04f2a	00		 DB	 0
  04f2b	00		 DB	 0
  04f2c	01		 DB	 1
  04f2d	01		 DB	 1
  04f2e	01		 DB	 1
  04f2f	01		 DB	 1
  04f30	1b		 DB	 27			; 0000001bH
  04f31	1b		 DB	 27			; 0000001bH
  04f32	01		 DB	 1
  04f33	02		 DB	 2
  04f34	1b		 DB	 27			; 0000001bH
  04f35	03		 DB	 3
  04f36	04		 DB	 4
  04f37	1b		 DB	 27			; 0000001bH
  04f38	05		 DB	 5
  04f39	06		 DB	 6
  04f3a	07		 DB	 7
  04f3b	1b		 DB	 27			; 0000001bH
  04f3c	07		 DB	 7
  04f3d	1b		 DB	 27			; 0000001bH
  04f3e	1b		 DB	 27			; 0000001bH
  04f3f	1b		 DB	 27			; 0000001bH
  04f40	1b		 DB	 27			; 0000001bH
  04f41	1b		 DB	 27			; 0000001bH
  04f42	1b		 DB	 27			; 0000001bH
  04f43	1b		 DB	 27			; 0000001bH
  04f44	1b		 DB	 27			; 0000001bH
  04f45	1b		 DB	 27			; 0000001bH
  04f46	1b		 DB	 27			; 0000001bH
  04f47	1b		 DB	 27			; 0000001bH
  04f48	1b		 DB	 27			; 0000001bH
  04f49	1b		 DB	 27			; 0000001bH
  04f4a	1b		 DB	 27			; 0000001bH
  04f4b	1b		 DB	 27			; 0000001bH
  04f4c	1b		 DB	 27			; 0000001bH
  04f4d	1b		 DB	 27			; 0000001bH
  04f4e	1b		 DB	 27			; 0000001bH
  04f4f	1b		 DB	 27			; 0000001bH
  04f50	1b		 DB	 27			; 0000001bH
  04f51	1b		 DB	 27			; 0000001bH
  04f52	1b		 DB	 27			; 0000001bH
  04f53	1b		 DB	 27			; 0000001bH
  04f54	1b		 DB	 27			; 0000001bH
  04f55	1b		 DB	 27			; 0000001bH
  04f56	1b		 DB	 27			; 0000001bH
  04f57	1b		 DB	 27			; 0000001bH
  04f58	1b		 DB	 27			; 0000001bH
  04f59	1b		 DB	 27			; 0000001bH
  04f5a	1b		 DB	 27			; 0000001bH
  04f5b	1b		 DB	 27			; 0000001bH
  04f5c	1b		 DB	 27			; 0000001bH
  04f5d	1b		 DB	 27			; 0000001bH
  04f5e	1b		 DB	 27			; 0000001bH
  04f5f	1b		 DB	 27			; 0000001bH
  04f60	1b		 DB	 27			; 0000001bH
  04f61	1b		 DB	 27			; 0000001bH
  04f62	1b		 DB	 27			; 0000001bH
  04f63	1b		 DB	 27			; 0000001bH
  04f64	1b		 DB	 27			; 0000001bH
  04f65	1b		 DB	 27			; 0000001bH
  04f66	1b		 DB	 27			; 0000001bH
  04f67	1b		 DB	 27			; 0000001bH
  04f68	1b		 DB	 27			; 0000001bH
  04f69	1b		 DB	 27			; 0000001bH
  04f6a	1b		 DB	 27			; 0000001bH
  04f6b	08		 DB	 8
  04f6c	09		 DB	 9
  04f6d	1b		 DB	 27			; 0000001bH
  04f6e	1b		 DB	 27			; 0000001bH
  04f6f	1b		 DB	 27			; 0000001bH
  04f70	1b		 DB	 27			; 0000001bH
  04f71	1b		 DB	 27			; 0000001bH
  04f72	1b		 DB	 27			; 0000001bH
  04f73	1b		 DB	 27			; 0000001bH
  04f74	1b		 DB	 27			; 0000001bH
  04f75	1b		 DB	 27			; 0000001bH
  04f76	1b		 DB	 27			; 0000001bH
  04f77	1b		 DB	 27			; 0000001bH
  04f78	1b		 DB	 27			; 0000001bH
  04f79	1b		 DB	 27			; 0000001bH
  04f7a	1b		 DB	 27			; 0000001bH
  04f7b	1b		 DB	 27			; 0000001bH
  04f7c	1b		 DB	 27			; 0000001bH
  04f7d	1b		 DB	 27			; 0000001bH
  04f7e	1b		 DB	 27			; 0000001bH
  04f7f	1b		 DB	 27			; 0000001bH
  04f80	1b		 DB	 27			; 0000001bH
  04f81	1b		 DB	 27			; 0000001bH
  04f82	0a		 DB	 10			; 0000000aH
  04f83	1b		 DB	 27			; 0000001bH
  04f84	1b		 DB	 27			; 0000001bH
  04f85	1b		 DB	 27			; 0000001bH
  04f86	1b		 DB	 27			; 0000001bH
  04f87	1b		 DB	 27			; 0000001bH
  04f88	1b		 DB	 27			; 0000001bH
  04f89	1b		 DB	 27			; 0000001bH
  04f8a	0a		 DB	 10			; 0000000aH
  04f8b	1b		 DB	 27			; 0000001bH
  04f8c	1b		 DB	 27			; 0000001bH
  04f8d	0a		 DB	 10			; 0000000aH
  04f8e	1b		 DB	 27			; 0000001bH
  04f8f	1b		 DB	 27			; 0000001bH
  04f90	1b		 DB	 27			; 0000001bH
  04f91	1b		 DB	 27			; 0000001bH
  04f92	1b		 DB	 27			; 0000001bH
  04f93	1b		 DB	 27			; 0000001bH
  04f94	0a		 DB	 10			; 0000000aH
  04f95	1b		 DB	 27			; 0000001bH
  04f96	1b		 DB	 27			; 0000001bH
  04f97	1b		 DB	 27			; 0000001bH
  04f98	1b		 DB	 27			; 0000001bH
  04f99	1b		 DB	 27			; 0000001bH
  04f9a	1b		 DB	 27			; 0000001bH
  04f9b	1b		 DB	 27			; 0000001bH
  04f9c	1b		 DB	 27			; 0000001bH
  04f9d	1b		 DB	 27			; 0000001bH
  04f9e	1b		 DB	 27			; 0000001bH
  04f9f	1b		 DB	 27			; 0000001bH
  04fa0	1b		 DB	 27			; 0000001bH
  04fa1	1b		 DB	 27			; 0000001bH
  04fa2	1b		 DB	 27			; 0000001bH
  04fa3	1b		 DB	 27			; 0000001bH
  04fa4	1b		 DB	 27			; 0000001bH
  04fa5	1b		 DB	 27			; 0000001bH
  04fa6	1b		 DB	 27			; 0000001bH
  04fa7	1b		 DB	 27			; 0000001bH
  04fa8	0b		 DB	 11			; 0000000bH
  04fa9	0c		 DB	 12			; 0000000cH
  04faa	0d		 DB	 13			; 0000000dH
  04fab	1b		 DB	 27			; 0000001bH
  04fac	0e		 DB	 14			; 0000000eH
  04fad	0f		 DB	 15			; 0000000fH
  04fae	10		 DB	 16			; 00000010H
  04faf	1b		 DB	 27			; 0000001bH
  04fb0	11		 DB	 17			; 00000011H
  04fb1	1b		 DB	 27			; 0000001bH
  04fb2	1b		 DB	 27			; 0000001bH
  04fb3	1b		 DB	 27			; 0000001bH
  04fb4	1b		 DB	 27			; 0000001bH
  04fb5	1b		 DB	 27			; 0000001bH
  04fb6	1b		 DB	 27			; 0000001bH
  04fb7	1b		 DB	 27			; 0000001bH
  04fb8	1b		 DB	 27			; 0000001bH
  04fb9	1b		 DB	 27			; 0000001bH
  04fba	1b		 DB	 27			; 0000001bH
  04fbb	1b		 DB	 27			; 0000001bH
  04fbc	1b		 DB	 27			; 0000001bH
  04fbd	1b		 DB	 27			; 0000001bH
  04fbe	1b		 DB	 27			; 0000001bH
  04fbf	1b		 DB	 27			; 0000001bH
  04fc0	1b		 DB	 27			; 0000001bH
  04fc1	0a		 DB	 10			; 0000000aH
  04fc2	1b		 DB	 27			; 0000001bH
  04fc3	0a		 DB	 10			; 0000000aH
  04fc4	0a		 DB	 10			; 0000000aH
  04fc5	1b		 DB	 27			; 0000001bH
  04fc6	1b		 DB	 27			; 0000001bH
  04fc7	1b		 DB	 27			; 0000001bH
  04fc8	1b		 DB	 27			; 0000001bH
  04fc9	1b		 DB	 27			; 0000001bH
  04fca	1b		 DB	 27			; 0000001bH
  04fcb	1b		 DB	 27			; 0000001bH
  04fcc	0a		 DB	 10			; 0000000aH
  04fcd	12		 DB	 18			; 00000012H
  04fce	0a		 DB	 10			; 0000000aH
  04fcf	0a		 DB	 10			; 0000000aH
  04fd0	0a		 DB	 10			; 0000000aH
  04fd1	13		 DB	 19			; 00000013H
  04fd2	1b		 DB	 27			; 0000001bH
  04fd3	13		 DB	 19			; 00000013H
  04fd4	1b		 DB	 27			; 0000001bH
  04fd5	1b		 DB	 27			; 0000001bH
  04fd6	1b		 DB	 27			; 0000001bH
  04fd7	1b		 DB	 27			; 0000001bH
  04fd8	1b		 DB	 27			; 0000001bH
  04fd9	1b		 DB	 27			; 0000001bH
  04fda	1b		 DB	 27			; 0000001bH
  04fdb	1b		 DB	 27			; 0000001bH
  04fdc	1b		 DB	 27			; 0000001bH
  04fdd	1b		 DB	 27			; 0000001bH
  04fde	14		 DB	 20			; 00000014H
  04fdf	14		 DB	 20			; 00000014H
  04fe0	1b		 DB	 27			; 0000001bH
  04fe1	1b		 DB	 27			; 0000001bH
  04fe2	14		 DB	 20			; 00000014H
  04fe3	1b		 DB	 27			; 0000001bH
  04fe4	15		 DB	 21			; 00000015H
  04fe5	1b		 DB	 27			; 0000001bH
  04fe6	15		 DB	 21			; 00000015H
  04fe7	1b		 DB	 27			; 0000001bH
  04fe8	14		 DB	 20			; 00000014H
  04fe9	1b		 DB	 27			; 0000001bH
  04fea	14		 DB	 20			; 00000014H
  04feb	1b		 DB	 27			; 0000001bH
  04fec	1b		 DB	 27			; 0000001bH
  04fed	16		 DB	 22			; 00000016H
  04fee	1b		 DB	 27			; 0000001bH
  04fef	1b		 DB	 27			; 0000001bH
  04ff0	1b		 DB	 27			; 0000001bH
  04ff1	1b		 DB	 27			; 0000001bH
  04ff2	1b		 DB	 27			; 0000001bH
  04ff3	1b		 DB	 27			; 0000001bH
  04ff4	1b		 DB	 27			; 0000001bH
  04ff5	1b		 DB	 27			; 0000001bH
  04ff6	1b		 DB	 27			; 0000001bH
  04ff7	1b		 DB	 27			; 0000001bH
  04ff8	1b		 DB	 27			; 0000001bH
  04ff9	1b		 DB	 27			; 0000001bH
  04ffa	1b		 DB	 27			; 0000001bH
  04ffb	1b		 DB	 27			; 0000001bH
  04ffc	1b		 DB	 27			; 0000001bH
  04ffd	1b		 DB	 27			; 0000001bH
  04ffe	1b		 DB	 27			; 0000001bH
  04fff	1b		 DB	 27			; 0000001bH
  05000	1b		 DB	 27			; 0000001bH
  05001	1b		 DB	 27			; 0000001bH
  05002	1b		 DB	 27			; 0000001bH
  05003	1b		 DB	 27			; 0000001bH
  05004	1b		 DB	 27			; 0000001bH
  05005	1b		 DB	 27			; 0000001bH
  05006	1b		 DB	 27			; 0000001bH
  05007	1b		 DB	 27			; 0000001bH
  05008	1b		 DB	 27			; 0000001bH
  05009	17		 DB	 23			; 00000017H
  0500a	17		 DB	 23			; 00000017H
  0500b	1b		 DB	 27			; 0000001bH
  0500c	17		 DB	 23			; 00000017H
  0500d	17		 DB	 23			; 00000017H
  0500e	1b		 DB	 27			; 0000001bH
  0500f	1b		 DB	 27			; 0000001bH
  05010	17		 DB	 23			; 00000017H
  05011	18		 DB	 24			; 00000018H
  05012	19		 DB	 25			; 00000019H
  05013	19		 DB	 25			; 00000019H
  05014	17		 DB	 23			; 00000017H
  05015	18		 DB	 24			; 00000018H
  05016	1a		 DB	 26			; 0000001aH
  05017	1a		 DB	 26			; 0000001aH
?Attack@CObjAttack@@QAEHPAUOBJECTSTRUCT@@0PAVCMagicInf@@HEHHEE@Z ENDP ; CObjAttack::Attack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ??1CObjAttack@@UAE@XZ
_TEXT	SEGMENT
??1CObjAttack@@UAE@XZ PROC				; CObjAttack::~CObjAttack, COMDAT
; _this$ = ecx

; 57   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CObjAttack@@6B@

; 58   : 	return;
; 59   : }

  00006	e9 00 00 00 00	 jmp	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
??1CObjAttack@@UAE@XZ ENDP				; CObjAttack::~CObjAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ??0CObjAttack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObjAttack@@QAE@XZ PROC				; CObjAttack::CObjAttack, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CObjBaseAttack@@QAE@XZ ; CObjBaseAttack::CObjBaseAttack
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CObjAttack@@6B@

; 50   : 	return;
; 51   : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??0CObjAttack@@QAE@XZ ENDP				; CObjAttack::CObjAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\guildclass.h
;	COMDAT ?GetFriendlyFire@CGensSystem@@QAEHXZ
_TEXT	SEGMENT
?GetFriendlyFire@CGensSystem@@QAEHXZ PROC		; CGensSystem::GetFriendlyFire, COMDAT
; _this$ = ecx

; 276  : 	int GetFriendlyFire(){ return this->m_FriendlyFire; };

  00000	0f b6 41 38	 movzx	 eax, BYTE PTR [ecx+56]
  00004	c3		 ret	 0
?GetFriendlyFire@CGensSystem@@QAEHXZ ENDP		; CGensSystem::GetFriendlyFire
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objattack.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
