; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\IllusionTempleEvent.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_iIT_TIME_MIN_OPEN@@3HA			; m_iIT_TIME_MIN_OPEN
PUBLIC	?m_iIT_TIME_MIN_PREPARE@@3HA			; m_iIT_TIME_MIN_PREPARE
PUBLIC	?m_iIT_TIME_MIN_PLAY@@3HA			; m_iIT_TIME_MIN_PLAY
PUBLIC	?m_iIT_TIME_MIN_CLOSE@@3HA			; m_iIT_TIME_MIN_CLOSE
_BSS	SEGMENT
?m_iIT_TIME_MIN_OPEN@@3HA DD 01H DUP (?)		; m_iIT_TIME_MIN_OPEN
?m_iIT_TIME_MIN_PREPARE@@3HA DD 01H DUP (?)		; m_iIT_TIME_MIN_PREPARE
?m_iIT_TIME_MIN_PLAY@@3HA DD 01H DUP (?)		; m_iIT_TIME_MIN_PLAY
?m_iIT_TIME_MIN_CLOSE@@3HA DD 01H DUP (?)		; m_iIT_TIME_MIN_CLOSE
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0IT_PLAYER_STRUCT@@QAE@XZ			; IT_PLAYER_STRUCT::IT_PLAYER_STRUCT
PUBLIC	?GetCheckSync@CIllusionTempleProcess@@QAEHXZ	; CIllusionTempleProcess::GetCheckSync
PUBLIC	?SetCheckSyncTrue@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetCheckSyncTrue
PUBLIC	?GetUserCount@CIllusionTempleProcess@@QAEHXZ	; CIllusionTempleProcess::GetUserCount
PUBLIC	?OpenState@CIllusionTempleProcess@@QAEHXZ	; CIllusionTempleProcess::OpenState
PUBLIC	?GetRelicPlayer@CIllusionTempleProcess@@QAEHXZ	; CIllusionTempleProcess::GetRelicPlayer
PUBLIC	??0CIllusionTempleProcess@@QAE@XZ		; CIllusionTempleProcess::CIllusionTempleProcess
PUBLIC	??1CIllusionTempleProcess@@UAE@XZ		; CIllusionTempleProcess::~CIllusionTempleProcess
PUBLIC	??_GCIllusionTempleProcess@@UAEPAXI@Z		; CIllusionTempleProcess::`scalar deleting destructor'
PUBLIC	?Init@CIllusionTempleEvent@@QAEHXZ		; CIllusionTempleEvent::Init
PUBLIC	?LoadData@CIllusionTempleEvent@@QAEXXZ		; CIllusionTempleEvent::LoadData
PUBLIC	?LoadFile@CIllusionTempleEvent@@QAEHPAD@Z	; CIllusionTempleEvent::LoadFile
PUBLIC	?Run@CIllusionTempleEvent@@QAEXXZ		; CIllusionTempleEvent::Run
PUBLIC	?PickupRelic@CIllusionTempleEvent@@QAEXEHE@Z	; CIllusionTempleEvent::PickupRelic
PUBLIC	?PickupRelicSend@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::PickupRelicSend
PUBLIC	?Enter@CIllusionTempleEvent@@QAEHHEE@Z		; CIllusionTempleEvent::Enter
PUBLIC	?RankingCheck@CIllusionTempleEvent@@QAEHHEEH@Z	; CIllusionTempleEvent::RankingCheck
PUBLIC	?LeaveUser@CIllusionTempleEvent@@QAEHHE@Z	; CIllusionTempleEvent::LeaveUser
PUBLIC	?GetEnterLevel@CIllusionTempleEvent@@QAEHH@Z	; CIllusionTempleEvent::GetEnterLevel
PUBLIC	?ClickToStatus@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleEvent::ClickToStatus
PUBLIC	?ClickAlliedNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleEvent::ClickAlliedNpc
PUBLIC	?ClickIllusionNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleEvent::ClickIllusionNpc
PUBLIC	?ClickEnterNpc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleEvent::ClickEnterNpc
PUBLIC	?DeleteRelic@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::DeleteRelic
PUBLIC	?DropRelic@CIllusionTempleEvent@@QAEXEH@Z	; CIllusionTempleEvent::DropRelic
PUBLIC	?GetState@CIllusionTempleEvent@@QAEEE@Z		; CIllusionTempleEvent::GetState
PUBLIC	?AddNpc@CIllusionTempleEvent@@QAEXEHH@Z		; CIllusionTempleEvent::AddNpc
PUBLIC	?AddMonster@CIllusionTempleEvent@@QAEXEHH@Z	; CIllusionTempleEvent::AddMonster
PUBLIC	?ResetObject@CIllusionTempleEvent@@QAEXXZ	; CIllusionTempleEvent::ResetObject
PUBLIC	?GetTeam@CIllusionTempleEvent@@QAEEEH@Z		; CIllusionTempleEvent::GetTeam
PUBLIC	?ChaosMix@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::ChaosMix
PUBLIC	?ChaosMixItemGet@CIllusionTempleEvent@@QAEHH@Z	; CIllusionTempleEvent::ChaosMixItemGet
PUBLIC	?CharmOfLuckCount@CIllusionTempleEvent@@QAEHH@Z	; CIllusionTempleEvent::CharmOfLuckCount
PUBLIC	?TicketMix@CIllusionTempleEvent@@QAEEHHH@Z	; CIllusionTempleEvent::TicketMix
PUBLIC	?PointAdd@CIllusionTempleEvent@@QAEEHEE@Z	; CIllusionTempleEvent::PointAdd
PUBLIC	?UseSkill@CIllusionTempleEvent@@QAEXHGHE@Z	; CIllusionTempleEvent::UseSkill
PUBLIC	?SkillProc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::SkillProc
PUBLIC	?UserDie@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::UserDie
PUBLIC	?RegenUser@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::RegenUser
PUBLIC	?SetMummyNpc@CIllusionTempleEvent@@QAEXH@Z	; CIllusionTempleEvent::SetMummyNpc
PUBLIC	?SendInfo@CIllusionTempleEvent@@QAEXXZ		; CIllusionTempleEvent::SendInfo
PUBLIC	?TeleportLock@CIllusionTempleEvent@@QAEHH@Z	; CIllusionTempleEvent::TeleportLock
PUBLIC	?ItemDrop@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleEvent::ItemDrop
PUBLIC	?DropReward@CIllusionTempleEvent@@QAEXH@Z	; CIllusionTempleEvent::DropReward
PUBLIC	?GetLeftTime@CIllusionTempleEvent@@QAEEXZ	; CIllusionTempleEvent::GetLeftTime
PUBLIC	?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::Is1stSkillActive
PUBLIC	?Is2ndSkillActive@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::Is2ndSkillActive
PUBLIC	?CheckCanEnter@CIllusionTempleEvent@@QAEHHH@Z	; CIllusionTempleEvent::CheckCanEnter
PUBLIC	?SetStatueTime@CIllusionTempleEvent@@QAEXE@Z	; CIllusionTempleEvent::SetStatueTime
PUBLIC	?ChangeTempleUserInformation@CIllusionTempleEvent@@QAEHHHHE@Z ; CIllusionTempleEvent::ChangeTempleUserInformation
PUBLIC	?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z	; CIllusionTempleEvent::GetSkillPoint
PUBLIC	??0CIllusionTempleEvent@@QAE@XZ			; CIllusionTempleEvent::CIllusionTempleEvent
PUBLIC	??1CIllusionTempleEvent@@UAE@XZ			; CIllusionTempleEvent::~CIllusionTempleEvent
PUBLIC	??_GCIllusionTempleEvent@@UAEPAXI@Z		; CIllusionTempleEvent::`scalar deleting destructor'
PUBLIC	?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0
PUBLIC	??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>
PUBLIC	??$destroy@UILLUSION_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<ILLUSION_TIME>
PUBLIC	??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Buynode<ILLUSION_TIME const &>
PUBLIC	??$?0V?$allocator@UILLUSION_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > ><std::allocator<ILLUSION_TIME> >
PUBLIC	??_7CIllusionTempleProcess@@6B@			; CIllusionTempleProcess::`vftable'
PUBLIC	??_7CIllusionTempleEvent@@6B@			; CIllusionTempleEvent::`vftable'
PUBLIC	?g_IllusionTemple@@3VCIllusionTempleEvent@@A	; g_IllusionTemple
PUBLIC	?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
PUBLIC	??_C@_0BJ@BJNAGBHA@Event?2IllusionTemple?4dat?$AA@ ; `string'
PUBLIC	??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@	; `string'
PUBLIC	??_C@_0BE@IJNGJKML@IllusionTempleEvent?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0BC@DAFEECGD@OldScrollDropRate?$AA@	; `string'
PUBLIC	??_C@_0BL@LHECNIBM@CovenantOfIllusionDropRate?$AA@ ; `string'
PUBLIC	??_C@_0BK@OMFNOLEF@UseMaxLevelIllusionTemple?$AA@ ; `string'
PUBLIC	??_C@_0BP@LBMGIHHN@SaveIllusionTempleRankingPoint?$AA@ ; `string'
PUBLIC	??_C@_0BM@HACPEIAK@IllusionTempleRewardPercent?$AA@ ; `string'
PUBLIC	??_C@_0BN@GNGJMFMO@IllusionTempleMinUseSkillCnt?$AA@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CL@GCHBFEEM@?$FLIllusion?5Temple?$FN?5Info?5file?5Load@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_0EB@KLFODGDC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5EnterUser@ ; `string'
PUBLIC	??_C@_0EG@OKENBBEG@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ ; `string'
PUBLIC	??_C@_0BG@KDHHANMC@IllusionTemple?5Mix?0?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0FO@JDNAJBBK@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ ; `string'
PUBLIC	??_C@_0FG@JCLJPIJO@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ ; `string'
PUBLIC	??_C@_0FK@PMODGPLA@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ ; `string'
PUBLIC	??_C@_0EK@LPIFGPJB@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@ ; `string'
PUBLIC	??_C@_0EH@MMGHGAAJ@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@ ; `string'
PUBLIC	??_C@_0BI@DOGCNFBC@IllusionTempleEvent?4cpp?$AA@ ; `string'
PUBLIC	??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CIllusionTempleProcess@@6B@		; CIllusionTempleProcess::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIllusionTempleProcess@@@8		; CIllusionTempleProcess `RTTI Type Descriptor'
PUBLIC	??_R3CIllusionTempleProcess@@8			; CIllusionTempleProcess::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIllusionTempleProcess@@8			; CIllusionTempleProcess::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIllusionTempleProcess@@8		; CIllusionTempleProcess::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CIllusionTempleEvent@@6B@			; CIllusionTempleEvent::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCIllusionTempleEvent@@@8		; CIllusionTempleEvent `RTTI Type Descriptor'
PUBLIC	??_R3CIllusionTempleEvent@@8			; CIllusionTempleEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CIllusionTempleEvent@@8			; CIllusionTempleEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CIllusionTempleEvent@@8		; CIllusionTempleEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z:PROC	; MsgSendV2
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?CGPShopReqClose@@YAXH@Z:PROC			; CGPShopReqClose
EXTRN	?CGPartyDelUser@@YAXPAUPMSG_PARTYDELUSER@@H@Z:PROC ; CGPartyDelUser
EXTRN	?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; GCUserChaosBoxSend
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjInventoryCommit@@YAHH@Z:PROC		; gObjInventoryCommit
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?IsTransformEquipment@@YA_NH@Z:PROC		; IsTransformEquipment
EXTRN	?Reset@CIllusionTempleProcess@@QAEXH@Z:PROC	; CIllusionTempleProcess::Reset
EXTRN	?CheckSync@CIllusionTempleProcess@@QAEXXZ:PROC	; CIllusionTempleProcess::CheckSync
EXTRN	?Run@CIllusionTempleProcess@@QAEXH@Z:PROC	; CIllusionTempleProcess::Run
EXTRN	?GetRemainTime@CIllusionTempleProcess@@QAEEXZ:PROC ; CIllusionTempleProcess::GetRemainTime
EXTRN	?GetRemainTime2@CIllusionTempleProcess@@QAEEXZ:PROC ; CIllusionTempleProcess::GetRemainTime2
EXTRN	?PickUpRelic@CIllusionTempleProcess@@QAEXHE@Z:PROC ; CIllusionTempleProcess::PickUpRelic
EXTRN	?PickUpRelicSend@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CIllusionTempleProcess::PickUpRelicSend
EXTRN	?GetState@CIllusionTempleProcess@@QAEEXZ:PROC	; CIllusionTempleProcess::GetState
EXTRN	?CheckUsers@CIllusionTempleProcess@@QAEXXZ:PROC	; CIllusionTempleProcess::CheckUsers
EXTRN	?EnterUser@CIllusionTempleProcess@@QAEHHEE@Z:PROC ; CIllusionTempleProcess::EnterUser
EXTRN	?SendState@CIllusionTempleProcess@@QAEXEH@Z:PROC ; CIllusionTempleProcess::SendState
EXTRN	?ClickToStatus@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z:PROC ; CIllusionTempleProcess::ClickToStatus
EXTRN	?ClickAlliedNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z:PROC ; CIllusionTempleProcess::ClickAlliedNpc
EXTRN	?ClickIllusionNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z:PROC ; CIllusionTempleProcess::ClickIllusionNpc
EXTRN	?GetEnterItem@CIllusionTempleProcess@@QAEHH@Z:PROC ; CIllusionTempleProcess::GetEnterItem
EXTRN	?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CIllusionTempleProcess::DeleteRelic
EXTRN	?DropRelic@CIllusionTempleProcess@@QAEXH@Z:PROC	; CIllusionTempleProcess::DropRelic
EXTRN	?AddNpc@CIllusionTempleProcess@@QAEXHH@Z:PROC	; CIllusionTempleProcess::AddNpc
EXTRN	?AddMonster@CIllusionTempleProcess@@QAEXHH@Z:PROC ; CIllusionTempleProcess::AddMonster
EXTRN	?ResetObject@CIllusionTempleProcess@@QAEXXZ:PROC ; CIllusionTempleProcess::ResetObject
EXTRN	?AddPlayerKillCount@CIllusionTempleProcess@@QAEXH@Z:PROC ; CIllusionTempleProcess::AddPlayerKillCount
EXTRN	?AddMonsterKillCount@CIllusionTempleProcess@@QAEXH@Z:PROC ; CIllusionTempleProcess::AddMonsterKillCount
EXTRN	?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z:PROC ; CIllusionTempleProcess::AddKillPts
EXTRN	?UseSkill@CIllusionTempleProcess@@QAEXHGHE@Z:PROC ; CIllusionTempleProcess::UseSkill
EXTRN	?SkillProc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CIllusionTempleProcess::SkillProc
EXTRN	?UserDie@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CIllusionTempleProcess::UserDie
EXTRN	?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CIllusionTempleProcess::SetProtect
EXTRN	?ItemDrop@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CIllusionTempleProcess::ItemDrop
EXTRN	?DropReward@CIllusionTempleProcess@@QAEXH@Z:PROC ; CIllusionTempleProcess::DropReward
EXTRN	?GetLeftTime@CIllusionTempleProcess@@QAEEXZ:PROC ; CIllusionTempleProcess::GetLeftTime
EXTRN	?Is1stSkillActive@CIllusionTempleProcess@@QAEHH@Z:PROC ; CIllusionTempleProcess::Is1stSkillActive
EXTRN	?Is2ndSkillActive@CIllusionTempleProcess@@QAEHH@Z:PROC ; CIllusionTempleProcess::Is2ndSkillActive
EXTRN	?GetTeam@CIllusionTempleProcess@@QAEEH@Z:PROC	; CIllusionTempleProcess::GetTeam
EXTRN	?LeaveUser@CIllusionTempleProcess@@QAEHH@Z:PROC	; CIllusionTempleProcess::LeaveUser
EXTRN	?SetStatueTime@CIllusionTempleProcess@@QAEXXZ:PROC ; CIllusionTempleProcess::SetStatueTime
EXTRN	?ChangeTempleUserInformation@CIllusionTempleProcess@@QAEHHHH@Z:PROC ; CIllusionTempleProcess::ChangeTempleUserInformation
EXTRN	?GetSkillPoint@CIllusionTempleProcess@@QAEEH@Z:PROC ; CIllusionTempleProcess::GetSkillPoint
EXTRN	??_ECIllusionTempleProcess@@UAEPAXI@Z:PROC	; CIllusionTempleProcess::`vector deleting destructor'
EXTRN	??_ECIllusionTempleEvent@@UAEPAXI@Z:PROC	; CIllusionTempleEvent::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?GetIndex@PartyClass@@QAEHHHH@Z:PROC		; PartyClass::GetIndex
EXTRN	?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CChaosBox::ChaosBoxInit
EXTRN	?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z:PROC ; CChaosBox::LogChaosItem
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?GetPlusChaosRate@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetPlusChaosRate
EXTRN	?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z:PROC	; CCastleSiegeSync::GetTaxRateChaos
EXTRN	?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z:PROC	; CCastleSiegeSync::AddTributeMoney
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?PHeadSubSetB@@YAXPAEEEH@Z:PROC			; PHeadSubSetB
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_iCrywolfApplyMvpBenefit@@3HA:DWORD		; g_iCrywolfApplyMvpBenefit
EXTRN	?g_bIllusionTemple@@3HA:DWORD			; g_bIllusionTemple
EXTRN	?g_OldScrollDropRate@@3HA:DWORD			; g_OldScrollDropRate
EXTRN	?g_CovenantDropRate@@3HA:DWORD			; g_CovenantDropRate
EXTRN	?g_bMaxLevelIllusion@@3HA:DWORD			; g_bMaxLevelIllusion
EXTRN	?g_bSaveIllusionRank@@3HA:DWORD			; g_bSaveIllusionRank
EXTRN	?g_IllusionRewardPerc@@3HA:DWORD		; g_IllusionRewardPerc
EXTRN	?g_IllusionUseSkillCnt@@3HA:DWORD		; g_IllusionUseSkillCnt
EXTRN	?g_ChaosBox@@3VCChaosBox@@A:BYTE		; g_ChaosBox
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?g_CastleSiegeSync@@3VCCastleSiegeSync@@A:BYTE	; g_CastleSiegeSync
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_IllusionTemple@@3VCIllusionTempleEvent@@A DB 01794H DUP (?) ; g_IllusionTemple
	ALIGN	8

?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A DQ 01H DUP (?) ; m_IllusionStartTime
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_IllusionTemple$initializer$@@3P6AXXZA DD FLAT:??__Eg_IllusionTemple@@YAXXZ ; g_IllusionTemple$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CIllusionTempleEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIllusionTempleEvent@@8 DD FLAT:??_R0?AVCIllusionTempleEvent@@@8 ; CIllusionTempleEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIllusionTempleEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2CIllusionTempleEvent@@8
rdata$r	SEGMENT
??_R2CIllusionTempleEvent@@8 DD FLAT:??_R1A@?0A@EA@CIllusionTempleEvent@@8 ; CIllusionTempleEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIllusionTempleEvent@@8
rdata$r	SEGMENT
??_R3CIllusionTempleEvent@@8 DD 00H			; CIllusionTempleEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIllusionTempleEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIllusionTempleEvent@@@8
data$r	SEGMENT
??_R0?AVCIllusionTempleEvent@@@8 DD FLAT:??_7type_info@@6B@ ; CIllusionTempleEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIllusionTempleEvent@@', 00H
data$r	ENDS
;	COMDAT ??_R4CIllusionTempleEvent@@6B@
rdata$r	SEGMENT
??_R4CIllusionTempleEvent@@6B@ DD 00H			; CIllusionTempleEvent::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIllusionTempleEvent@@@8
	DD	FLAT:??_R3CIllusionTempleEvent@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CIllusionTempleProcess@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CIllusionTempleProcess@@8 DD FLAT:??_R0?AVCIllusionTempleProcess@@@8 ; CIllusionTempleProcess::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CIllusionTempleProcess@@8
rdata$r	ENDS
;	COMDAT ??_R2CIllusionTempleProcess@@8
rdata$r	SEGMENT
??_R2CIllusionTempleProcess@@8 DD FLAT:??_R1A@?0A@EA@CIllusionTempleProcess@@8 ; CIllusionTempleProcess::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CIllusionTempleProcess@@8
rdata$r	SEGMENT
??_R3CIllusionTempleProcess@@8 DD 00H			; CIllusionTempleProcess::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CIllusionTempleProcess@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCIllusionTempleProcess@@@8
data$r	SEGMENT
??_R0?AVCIllusionTempleProcess@@@8 DD FLAT:??_7type_info@@6B@ ; CIllusionTempleProcess `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCIllusionTempleProcess@@', 00H
data$r	ENDS
;	COMDAT ??_R4CIllusionTempleProcess@@6B@
rdata$r	SEGMENT
??_R4CIllusionTempleProcess@@6B@ DD 00H			; CIllusionTempleProcess::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCIllusionTempleProcess@@@8
	DD	FLAT:??_R3CIllusionTempleProcess@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@ DB 'return %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DOGCNFBC@IllusionTempleEvent?4cpp?$AA@
CONST	SEGMENT
??_C@_0BI@DOGCNFBC@IllusionTempleEvent?4cpp?$AA@ DB 'IllusionTempleEvent.'
	DB	'cpp', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@MMGHGAAJ@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@
CONST	SEGMENT
??_C@_0EH@MMGHGAAJ@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@ DB '['
	DB	'Illusion Temple] [%s][%s] CBMix Fail %d Money : %d-%d, CharmR'
	DB	'ate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LPIFGPJB@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@
CONST	SEGMENT
??_C@_0EK@LPIFGPJB@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@ DB '['
	DB	'Illusion Temple] [%s][%s] CBMix Success %d Money : %d-%d, Cha'
	DB	'rmRate : %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@PMODGPLA@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@
CONST	SEGMENT
??_C@_0FK@PMODGPLA@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ DB '[Illu'
	DB	'sion Temple] Mix Chaos Mix Failed - Not Enough Money (Account'
	DB	':%s, Name:%s, Level:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@JCLJPIJO@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@
CONST	SEGMENT
??_C@_0FG@JCLJPIJO@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ DB '[Illu'
	DB	'sion Temple] Mix Chaos Mix Failed - MixMoney< 0 (Account:%s, '
	DB	'Name:%s, Level:%d).', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@JDNAJBBK@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@
CONST	SEGMENT
??_C@_0FO@JDNAJBBK@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ DB '[Illu'
	DB	'sion Temple] Mix Chaos Mix Failed - MixRate Out of Bound (Acc'
	DB	'ount:%s, Name:%s, Level:%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KDHHANMC@IllusionTemple?5Mix?0?$CFd?$AA@
CONST	SEGMENT
??_C@_0BG@KDHHANMC@IllusionTemple?5Mix?0?$CFd?$AA@ DB 'IllusionTemple Mix'
	DB	',%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@OKENBBEG@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@
CONST	SEGMENT
??_C@_0EG@OKENBBEG@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@ DB '[Illu'
	DB	'sion Temple] Mix Chaos Mix Start (Account:%s, Name:%s, Level:'
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KLFODGDC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5EnterUser@
CONST	SEGMENT
??_C@_0EB@KLFODGDC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5EnterUser@ DB '['
	DB	'Illusion Temple] (%d) EnterUser: (%s)(%s) class:%d (Serial:%u'
	DB	').', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GCHBFEEM@?$FLIllusion?5Temple?$FN?5Info?5file?5Load@
CONST	SEGMENT
??_C@_0CL@GCHBFEEM@?$FLIllusion?5Temple?$FN?5Info?5file?5Load@ DB '[Illus'
	DB	'ion Temple] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GNGJMFMO@IllusionTempleMinUseSkillCnt?$AA@
CONST	SEGMENT
??_C@_0BN@GNGJMFMO@IllusionTempleMinUseSkillCnt?$AA@ DB 'IllusionTempleMi'
	DB	'nUseSkillCnt', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HACPEIAK@IllusionTempleRewardPercent?$AA@
CONST	SEGMENT
??_C@_0BM@HACPEIAK@IllusionTempleRewardPercent?$AA@ DB 'IllusionTempleRew'
	DB	'ardPercent', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LBMGIHHN@SaveIllusionTempleRankingPoint?$AA@
CONST	SEGMENT
??_C@_0BP@LBMGIHHN@SaveIllusionTempleRankingPoint?$AA@ DB 'SaveIllusionTe'
	DB	'mpleRankingPoint', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OMFNOLEF@UseMaxLevelIllusionTemple?$AA@
CONST	SEGMENT
??_C@_0BK@OMFNOLEF@UseMaxLevelIllusionTemple?$AA@ DB 'UseMaxLevelIllusion'
	DB	'Temple', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LHECNIBM@CovenantOfIllusionDropRate?$AA@
CONST	SEGMENT
??_C@_0BL@LHECNIBM@CovenantOfIllusionDropRate?$AA@ DB 'CovenantOfIllusion'
	DB	'DropRate', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DAFEECGD@OldScrollDropRate?$AA@
CONST	SEGMENT
??_C@_0BC@DAFEECGD@OldScrollDropRate?$AA@ DB 'OldScrollDropRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJNGJKML@IllusionTempleEvent?$AA@
CONST	SEGMENT
??_C@_0BE@IJNGJKML@IllusionTempleEvent?$AA@ DB 'IllusionTempleEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@ DB 'CommonServer.cfg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BJNAGBHA@Event?2IllusionTemple?4dat?$AA@
CONST	SEGMENT
??_C@_0BJ@BJNAGBHA@Event?2IllusionTemple?4dat?$AA@ DB 'Event\IllusionTemp'
	DB	'le.dat', 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?IT_TicketRate@@3PAHA DD 046H				; IT_TicketRate
	DD	046H
	DD	046H
	DD	046H
	DD	046H
	DD	046H
?IT_TicketZen@@3PAHA DD 02dc6c0H			; IT_TicketZen
	DD	04c4b40H
	DD	06acfc0H
	DD	0895440H
	DD	0a7d8c0H
	DD	0c65d40H
_DATA	ENDS
;	COMDAT ??_7CIllusionTempleEvent@@6B@
CONST	SEGMENT
??_7CIllusionTempleEvent@@6B@ DD FLAT:??_R4CIllusionTempleEvent@@6B@ ; CIllusionTempleEvent::`vftable'
	DD	FLAT:??_ECIllusionTempleEvent@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CIllusionTempleProcess@@6B@
CONST	SEGMENT
??_7CIllusionTempleProcess@@6B@ DD FLAT:??_R4CIllusionTempleProcess@@6B@ ; CIllusionTempleProcess::`vftable'
	DD	FLAT:??_ECIllusionTempleProcess@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CIllusionTempleEvent@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
CRT$XCU	SEGMENT
?m_IllusionStartTime$initializer$@@3P6AXXZA DD FLAT:??__Em_IllusionStartTime@@YAXXZ ; m_IllusionStartTime$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UILLUSION_TIME@@ABU1@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAUILLUSION_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UILLUSION_TIME@@ABU1@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAUILLUSION_TIME@@ABU2@@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::construct<ILLUSION_TIME,ILLUSION_TIME const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UILLUSION_TIME@@ABU1@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAUILLUSION_TIME@@ABU2@@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::construct<ILLUSION_TIME,ILLUSION_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UILLUSION_TIME@@ABU1@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAUILLUSION_TIME@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UILLUSION_TIME@@ABU1@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAUILLUSION_TIME@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<ILLUSION_TIME,ILLUSION_TIME const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UILLUSION_TIME@@ABU1@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAUILLUSION_TIME@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<ILLUSION_TIME,ILLUSION_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::construct<std::_List_node<ILLUSION_TIME,void *> *,std::_List_node<ILLUSION_TIME,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::construct<std::_List_node<ILLUSION_TIME,void *> *,std::_List_node<ILLUSION_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UILLUSION_TIME@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAUILLUSION_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UILLUSION_TIME@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAUILLUSION_TIME@@@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::destroy<ILLUSION_TIME>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UILLUSION_TIME@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAUILLUSION_TIME@@@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::destroy<ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::destroy<std::_List_node<ILLUSION_TIME,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::destroy<std::_List_node<ILLUSION_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UILLUSION_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UILLUSION_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<ILLUSION_TIME,ILLUSION_TIME const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UILLUSION_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<ILLUSION_TIME,ILLUSION_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<std::_List_node<ILLUSION_TIME,void *> *,std::_List_node<ILLUSION_TIME,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<std::_List_node<ILLUSION_TIME,void *> *,std::_List_node<ILLUSION_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAAAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAAAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<ILLUSION_TIME,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAAAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<ILLUSION_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UILLUSION_TIME@@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAUILLUSION_TIME@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UILLUSION_TIME@@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAUILLUSION_TIME@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<ILLUSION_TIME>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UILLUSION_TIME@@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAUILLUSION_TIME@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UILLUSION_TIME@@@std@@YAPAUILLUSION_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UILLUSION_TIME@@@std@@YAPAUILLUSION_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<ILLUSION_TIME>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UILLUSION_TIME@@@std@@YAPAUILLUSION_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0UILLUSION_TIME@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UILLUSION_TIME@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::allocator<std::_List_node<ILLUSION_TIME,void *> ><ILLUSION_TIME>, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0UILLUSION_TIME@@@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::allocator<std::_List_node<ILLUSION_TIME,void *> ><ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@UILLUSION_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@UILLUSION_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > ><std::allocator<ILLUSION_TIME> >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@UILLUSION_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > ><std::allocator<ILLUSION_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UILLUSION_TIME@@@std@@@std@@YAABV?$allocator@UILLUSION_TIME@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UILLUSION_TIME@@@std@@@std@@YAABV?$allocator@UILLUSION_TIME@@@0@ABV10@@Z PROC ; std::forward<std::allocator<ILLUSION_TIME> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UILLUSION_TIME@@@std@@@std@@YAABV?$allocator@UILLUSION_TIME@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<ILLUSION_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@1@PAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_List_node<ILLUSION_TIME,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_List_node<ILLUSION_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z PROC ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Buynode<ILLUSION_TIME const &>, COMDAT
; _this$ = ecx

; 828  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  00004	ff 75 0c	 push	 DWORD PTR __Prev$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __Next$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0

; 541  : 		return ((reference)_Pnode->_Myval);

  0000f	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0d		 je	 SHORT $LN39@Buynode
  00016	8b 55 10	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00019	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001b	89 0e		 mov	 DWORD PTR [esi], ecx
  0001d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00020	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN39@Buynode:
  00023	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 841  : 		}

  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z ENDP ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Buynode<ILLUSION_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUILLUSION_TIME@@@std@@YAABUILLUSION_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUILLUSION_TIME@@@std@@YAABUILLUSION_TIME@@ABU1@@Z PROC ; std::forward<ILLUSION_TIME const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUILLUSION_TIME@@@std@@YAABUILLUSION_TIME@@ABU1@@Z ENDP ; std::forward<ILLUSION_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<std::_List_node<ILLUSION_TIME,void *> *,std::_List_node<ILLUSION_TIME,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::construct<std::_List_node<ILLUSION_TIME,void *> *,std::_List_node<ILLUSION_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UILLUSION_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UILLUSION_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<ILLUSION_TIME>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UILLUSION_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UILLUSION_TIME@@@std@@YAPAUILLUSION_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UILLUSION_TIME@@@std@@YAPAUILLUSION_TIME@@AAU1@@Z PROC ; std::addressof<ILLUSION_TIME>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UILLUSION_TIME@@@std@@YAPAUILLUSION_TIME@@AAU1@@Z ENDP ; std::addressof<ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UILLUSION_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UILLUSION_TIME@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UILLUSION_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UILLUSION_TIME@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1><std::allocator<ILLUSION_TIME> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 525  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 526  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@UILLUSION_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UILLUSION_TIME@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1><std::allocator<ILLUSION_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<ILLUSION_TIME,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UILLUSION_TIME@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<ILLUSION_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert@ABUILLUSION_TIME@@@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@1@ABUILLUSION_TIME@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@ABUILLUSION_TIME@@@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@1@ABUILLUSION_TIME@@@Z PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Insert<ILLUSION_TIME const &>, COMDAT
; _this$ = ecx

; 1058 : 		{	// insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi

; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00008	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Buynode<ILLUSION_TIME const &>
  00016	8b d0		 mov	 edx, eax

; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00018	b9 fe ff ff 0f	 mov	 ecx, 268435454		; 0ffffffeH
  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	2b c8		 sub	 ecx, eax
  00022	83 f9 01	 cmp	 ecx, 1
  00025	72 12		 jb	 SHORT $LN65@Insert

; 1910 : 		this->_Mysize() += _Count;

  00027	40		 inc	 eax
  00028	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00033	89 10		 mov	 DWORD PTR [eax], edx

; 1066 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN65@Insert:

; 1909 : 			_Xlength_error("list<T> too long");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@Insert:
$LN64@Insert:
  00043	cc		 int	 3
??$_Insert@ABUILLUSION_TIME@@@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@1@ABUILLUSION_TIME@@@Z ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Insert<ILLUSION_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 125  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 96   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 97   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UILLUSION_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??__Fm_IllusionStartTime@@YAXXZ
text$yd	SEGMENT
??__Fm_IllusionStartTime@@YAXXZ PROC			; `dynamic atexit destructor for 'm_IllusionStartTime'', COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
  00005	53		 push	 ebx
  00006	56		 push	 esi
  00007	8b 30		 mov	 esi, DWORD PTR [eax]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00009	89 00		 mov	 DWORD PTR [eax], eax

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
  00010	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00013	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
  00019	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A+4, 0
  00023	3b f3		 cmp	 esi, ebx
  00025	74 40		 je	 SHORT $LN10@dynamic
  00027	57		 push	 edi
$LL11@dynamic:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00028	8b 3e		 mov	 edi, DWORD PTR [esi]

; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(

  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00035	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(

  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>

; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);

  00043	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(

  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$destroy@UILLUSION_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAUILLUSION_TIME@@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<ILLUSION_TIME>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00057	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  0005d	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00060	8b f7		 mov	 esi, edi
  00062	3b fb		 cmp	 edi, ebx
  00064	75 c2		 jne	 SHORT $LL11@dynamic
  00066	5f		 pop	 edi
$LN10@dynamic:

; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(

  00067	53		 push	 ebx
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
  0006d	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00072	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]

; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(

  00075	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@UILLUSION_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UILLUSION_TIME@@PAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::destroy<std::_List_node<ILLUSION_TIME,void *> *>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00080	53		 push	 ebx
  00081	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00086	83 c4 04	 add	 esp, 4
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	c3		 ret	 0
??__Fm_IllusionStartTime@@YAXXZ ENDP			; `dynamic atexit destructor for 'm_IllusionStartTime''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ??__Em_IllusionStartTime@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Em_IllusionStartTime@@YAXXZ PROC			; `dynamic initializer for 'm_IllusionStartTime'', COMDAT

; 18   : std::list<ILLUSION_TIME> m_IllusionStartTime;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 286  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00004	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$?0V?$allocator@UILLUSION_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > ><std::allocator<ILLUSION_TIME> >
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime

; 525  : 		this->_Myhead = 0;

  0001b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A, 0

; 526  : 		this->_Mysize = 0;

  00025	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A+4, 0

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  0002f	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp

; 18   : std::list<ILLUSION_TIME> m_IllusionStartTime;

  00034	68 00 00 00 00	 push	 OFFSET ??__Fm_IllusionStartTime@@YAXXZ ; `dynamic atexit destructor for 'm_IllusionStartTime''
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 598  : 		_Myhead() = _Buyheadnode();

  00039	a3 00 00 00 00	 mov	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A, eax
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp

; 18   : std::list<ILLUSION_TIME> m_IllusionStartTime;

  0003e	e8 00 00 00 00	 call	 _atexit
  00043	83 c4 04	 add	 esp, 4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??__Em_IllusionStartTime@@YAXXZ ENDP			; `dynamic initializer for 'm_IllusionStartTime''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Incsize@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXI@Z PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Incsize, COMDAT
; _this$ = ecx

; 1907 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	b8 fe ff ff 0f	 mov	 eax, 268435454		; 0ffffffeH
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  0000f	2b c2		 sub	 eax, edx
  00011	3b c6		 cmp	 eax, esi
  00013	72 0b		 jb	 SHORT $LN41@Incsize

; 1910 : 		this->_Mysize() += _Count;

  00015	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00018	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0001b	5e		 pop	 esi

; 1911 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN41@Incsize:

; 1909 : 			_Xlength_error("list<T> too long");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@Incsize:
$LN40@Incsize:
  0002a	cc		 int	 3
?_Incsize@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXI@Z ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Tidy@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXXZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1884 : 		{	// free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;
; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 17		 mov	 edx, DWORD PTR [edi]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1504 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN5@Tidy
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Tidy:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL6@Tidy
  00031	5e		 pop	 esi
$LN5@Tidy:
  00032	5f		 pop	 edi

; 1885 : 		clear();
; 1886 : 		}

  00033	c3		 ret	 0
?_Tidy@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXXZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?clear@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXXZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::clear, COMDAT
; _this$ = ecx

; 1496 : 		{	// erase all

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 17		 mov	 edx, DWORD PTR [edi]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1504 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN3@clear
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@clear:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL4@clear
  00031	5e		 pop	 esi
$LN3@clear:
  00032	5f		 pop	 edi

; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}

  00033	c3		 ret	 0
?clear@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXXZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?push_back@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXABUILLUSION_TIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXABUILLUSION_TIME@@@Z PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::push_back, COMDAT
; _this$ = ecx

; 1288 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00007	ff 75 08	 push	 DWORD PTR __Val$[ebp]

; 96   : 		return (_Ptr);

  0000a	8b 3e		 mov	 edi, DWORD PTR [esi]

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  0000c	ff 77 04	 push	 DWORD PTR [edi+4]
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Buynode<ILLUSION_TIME const &>
  00015	8b d0		 mov	 edx, eax

; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00017	b9 fe ff ff 0f	 mov	 ecx, 268435454		; 0ffffffeH
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b c8		 sub	 ecx, eax
  00021	83 f9 01	 cmp	 ecx, 1
  00024	72 12		 jb	 SHORT $LN91@push_back

; 1910 : 		this->_Mysize() += _Count;

  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002a	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00032	89 10		 mov	 DWORD PTR [eax], edx

; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN91@push_back:

; 1909 : 			_Xlength_error("list<T> too long");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN93@push_back:
$LN90@push_back:
  00042	cc		 int	 3
?push_back@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXABUILLUSION_TIME@@@Z ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?max_size@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QBEIXZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::max_size, COMDAT
; _this$ = ecx

; 1244 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 1245 : 		}

  00005	c3		 ret	 0
?max_size@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QBEIXZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1149 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::~list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >, COMDAT
; _this$ = ecx

; 1094 : 		{	// destroy the object

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 07		 mov	 eax, DWORD PTR [edi]

; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00005	8b 10		 mov	 edx, DWORD PTR [eax]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 07		 mov	 eax, DWORD PTR [edi]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1504 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 17		 cmp	 edx, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN7@list
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@list:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 32		 mov	 esi, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0002b	8b d6		 mov	 edx, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL8@list
  00031	5e		 pop	 esi
$LN7@list:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4
  0003c	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1096 : 		}

  0003d	c3		 ret	 0
??1?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::~list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ PROC ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >, COMDAT
; _this$ = ecx

; 890  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0

; 890  : 		{	// construct empty list

  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 525  : 		this->_Myhead = 0;

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0

; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();

  00020	89 06		 mov	 DWORD PTR [esi], eax

; 891  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ ENDP ; std::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::list<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::~_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >, COMDAT
; _this$ = ecx

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::~_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z PROC ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Freenode, COMDAT
; _this$ = ecx

; 845  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z ENDP ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z PROC ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >, COMDAT
; _this$ = ecx

; 817  : 		{	// construct from allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0

; 817  : 		{	// construct from allocator

  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 525  : 		this->_Myhead = 0;

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0

; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();

  00020	89 06		 mov	 DWORD PTR [esi], eax

; 818  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z ENDP ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >,std::_List_val<std::_List_simple_types<ILLUSION_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Myval, COMDAT

; 540  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 542  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Prevnode, COMDAT

; 535  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 537  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Nextnode, COMDAT

; 530  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 532  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_List_val<std::_List_simple_types<ILLUSION_TIME> >, COMDAT
; _this$ = ecx

; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 526  : 		this->_Mysize = 0;
; 527  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<ILLUSION_TIME> >::_List_val<std::_List_simple_types<ILLUSION_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAIXZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Mysize, COMDAT
; _this$ = ecx

; 792  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 793  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Myhead, COMDAT
; _this$ = ecx

; 782  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 783  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 772  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 773  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UILLUSION_TIME@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 767  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 768  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 762  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 763  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0, COMDAT
; _this$ = ecx

; 729  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00003	6a 10		 push	 16			; 00000010H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000d	85 c0		 test	 eax, eax
  0000f	74 1f		 je	 SHORT $LN123@Buynode0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 732  : 		if (_Next == _Nodeptr())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  00014	85 c9		 test	 ecx, ecx
  00016	75 06		 jne	 SHORT $LN121@Buynode0

; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;

  00018	8b c8		 mov	 ecx, eax

; 735  : 			_Prev = _Pnode;

  0001a	8b d0		 mov	 edx, eax
  0001c	eb 03		 jmp	 SHORT $LN2@Buynode0
$LN121@Buynode0:
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Prev$[ebp]
$LN2@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00021	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00026	85 c9		 test	 ecx, ecx
  00028	74 02		 je	 SHORT $LN4@Buynode0
  0002a	89 11		 mov	 DWORD PTR [ecx], edx
$LN4@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 748  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN123@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@Buynode0:
$LN122@Buynode0:
  00035	cc		 int	 3
?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 719  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 725  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0

; 716  : 		}

  00009	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::~_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 610  : 		}

  00008	c3		 ret	 0
??1?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::~_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >, COMDAT
; _this$ = ecx

; 597  : 		{	// construct head node, allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0

; 525  : 		this->_Myhead = 0;

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Buynode0

; 598  : 		_Myhead() = _Buyheadnode();

  00019	89 06		 mov	 DWORD PTR [esi], eax

; 599  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??0?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UILLUSION_TIME@@@1@@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Myval, COMDAT

; 590  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAUILLUSION_TIME@@PAU?$_List_node@UILLUSION_TIME@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Prevnode, COMDAT

; 585  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Nextnode, COMDAT

; 580  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 582  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_alloc@U?$_List_base_types@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UILLUSION_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<ILLUSION_TIME,std::allocator<ILLUSION_TIME> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<ILLUSION_TIME,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 04	 shl	 eax, 4

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  0000f	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00011	c1 e1 04	 shl	 ecx, 4

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 19		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001c	a8 1f		 test	 al, 31			; 0000001fH
  0001e	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00020	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00023	3b c8		 cmp	 ecx, eax
  00025	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00027	2b c1		 sub	 eax, ecx
  00029	83 f8 04	 cmp	 eax, 4
  0002c	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00031	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c1		 mov	 eax, ecx
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005b	cc		 int	 3
?deallocate@?$allocator@U?$_List_node@UILLUSION_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UILLUSION_TIME@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<ILLUSION_TIME,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UILLUSION_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UILLUSION_TIME@@@std@@QAE@XZ PROC	; std::allocator<ILLUSION_TIME>::allocator<ILLUSION_TIME>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UILLUSION_TIME@@@std@@QAE@XZ ENDP	; std::allocator<ILLUSION_TIME>::allocator<ILLUSION_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_IllusionTemple@@YAXXZ
text$yd	SEGMENT
??__Fg_IllusionTemple@@YAXXZ PROC			; `dynamic atexit destructor for 'g_IllusionTemple'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00005	e9 00 00 00 00	 jmp	 ??1CIllusionTempleEvent@@UAE@XZ ; CIllusionTempleEvent::~CIllusionTempleEvent
??__Fg_IllusionTemple@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_IllusionTemple''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ??__Eg_IllusionTemple@@YAXXZ
text$di	SEGMENT
??__Eg_IllusionTemple@@YAXXZ PROC			; `dynamic initializer for 'g_IllusionTemple'', COMDAT

; 16   : CIllusionTempleEvent g_IllusionTemple;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00005	e8 00 00 00 00	 call	 ??0CIllusionTempleEvent@@QAE@XZ ; CIllusionTempleEvent::CIllusionTempleEvent
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_IllusionTemple@@YAXXZ ; `dynamic atexit destructor for 'g_IllusionTemple''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_IllusionTemple@@YAXXZ ENDP			; `dynamic initializer for 'g_IllusionTemple''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCIllusionTempleEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIllusionTempleEvent@@UAEPAXI@Z PROC		; CIllusionTempleEvent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CIllusionTempleEvent@@UAE@XZ ; CIllusionTempleEvent::~CIllusionTempleEvent
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 94 17 00 00	 push	 6036			; 00001794H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCIllusionTempleEvent@@UAEPAXI@Z ENDP		; CIllusionTempleEvent::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ??1CIllusionTempleEvent@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CIllusionTempleEvent@@UAE@XZ PROC			; CIllusionTempleEvent::~CIllusionTempleEvent, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CIllusionTempleEvent@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 35   : 
; 36   : }

  00022	68 00 00 00 00	 push	 OFFSET ??1CIllusionTempleProcess@@UAE@XZ ; CIllusionTempleProcess::~CIllusionTempleProcess
  00027	6a 06		 push	 6
  00029	68 ec 03 00 00	 push	 1004			; 000003ecH
  0002e	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00031	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIllusionTempleEvent@@6B@
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0003d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00040	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00047	59		 pop	 ecx
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CIllusionTempleEvent@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CIllusionTempleEvent@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CIllusionTempleEvent@@UAE@XZ ENDP			; CIllusionTempleEvent::~CIllusionTempleEvent
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ??0CIllusionTempleEvent@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CIllusionTempleEvent@@QAE@XZ PROC			; CIllusionTempleEvent::CIllusionTempleEvent, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	68 00 00 00 00	 push	 OFFSET ??1CIllusionTempleProcess@@UAE@XZ ; CIllusionTempleProcess::~CIllusionTempleProcess
  0000a	8b f1		 mov	 esi, ecx
  0000c	68 00 00 00 00	 push	 OFFSET ??0CIllusionTempleProcess@@QAE@XZ ; CIllusionTempleProcess::CIllusionTempleProcess
  00011	6a 06		 push	 6
  00013	68 ec 03 00 00	 push	 1004			; 000003ecH
  00018	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  0001b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0001e	50		 push	 eax
  0001f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIllusionTempleEvent@@6B@
  00025	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 30   : 
; 31   : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CIllusionTempleEvent@@QAE@XZ ENDP			; CIllusionTempleEvent::CIllusionTempleEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_bMapNumber$ = 12					; size = 1
?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z PROC	; CIllusionTempleEvent::GetSkillPoint, COMDAT
; _this$ = ecx

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1227 : 	return m_TempleData[bMapNumber-MAP_INDEX_ILLUSIONTEMPLE1].GetSkillPoint(nIndex);

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _bMapNumber$[ebp]
  00007	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0000d	ff 75 08	 push	 DWORD PTR _nIndex$[ebp]
  00010	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00016	03 c8		 add	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?GetSkillPoint@CIllusionTempleProcess@@QAEEH@Z ; CIllusionTempleProcess::GetSkillPoint

; 1228 : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetSkillPoint@CIllusionTempleEvent@@QAEEHE@Z ENDP	; CIllusionTempleEvent::GetSkillPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ChangeTempleUserInformation@CIllusionTempleEvent@@QAEHHHHE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_iCurUserIndex$ = 12					; size = 4
_iIllusionTempleIndex$ = 16				; size = 4
_bMapNumber$ = 20					; size = 1
?ChangeTempleUserInformation@CIllusionTempleEvent@@QAEHHHHE@Z PROC ; CIllusionTempleEvent::ChangeTempleUserInformation, COMDAT
; _this$ = ecx

; 1221 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1222 : 	return m_TempleData[bMapNumber-MAP_INDEX_ILLUSIONTEMPLE1].ChangeTempleUserInformation(iIndex,iIllusionTempleIndex,iCurUserIndex);

  00003	ff 75 0c	 push	 DWORD PTR _iCurUserIndex$[ebp]
  00006	0f b6 45 14	 movzx	 eax, BYTE PTR _bMapNumber$[ebp]
  0000a	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  00010	ff 75 10	 push	 DWORD PTR _iIllusionTempleIndex$[ebp]
  00013	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00019	ff 75 08	 push	 DWORD PTR _iIndex$[ebp]
  0001c	03 c8		 add	 ecx, eax
  0001e	e8 00 00 00 00	 call	 ?ChangeTempleUserInformation@CIllusionTempleProcess@@QAEHHHH@Z ; CIllusionTempleProcess::ChangeTempleUserInformation

; 1223 : }

  00023	5d		 pop	 ebp
  00024	c2 10 00	 ret	 16			; 00000010H
?ChangeTempleUserInformation@CIllusionTempleEvent@@QAEHHHHE@Z ENDP ; CIllusionTempleEvent::ChangeTempleUserInformation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?SetStatueTime@CIllusionTempleEvent@@QAEXE@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
?SetStatueTime@CIllusionTempleEvent@@QAEXE@Z PROC	; CIllusionTempleEvent::SetStatueTime, COMDAT
; _this$ = ecx

; 1211 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1212 : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 1f		 js	 SHORT $LN1@SetStatueT
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 13		 je	 SHORT $LN1@SetStatueT

; 1213 : 	{
; 1214 : 		return;
; 1215 : 	}
; 1216 : 
; 1217 : 	m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].SetStatueTime();

  0001b	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00021	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  00027	03 c8		 add	 ecx, eax
  00029	e8 00 00 00 00	 call	 ?SetStatueTime@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetStatueTime
$LN1@SetStatueT:
  0002e	5e		 pop	 esi

; 1218 : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?SetStatueTime@CIllusionTempleEvent@@QAEXE@Z ENDP	; CIllusionTempleEvent::SetStatueTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?CheckCanEnter@CIllusionTempleEvent@@QAEHHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Level$ = 12						; size = 4
?CheckCanEnter@CIllusionTempleEvent@@QAEHHH@Z PROC	; CIllusionTempleEvent::CheckCanEnter, COMDAT
; _this$ = ecx

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 391  : 	int Temple = -1;
; 392  : 
; 393  : 	if( gObj[aIndex].Level < 220 )

  00003	69 4d 08 40 27
	00 00		 imul	 ecx, DWORD PTR _aIndex$[ebp], 10048
  0000a	ba dc 00 00 00	 mov	 edx, 220		; 000000dcH
  0000f	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	0f b7 81 96 00
	00 00		 movzx	 eax, WORD PTR [ecx+150]
  0001c	66 3b c2	 cmp	 ax, dx
  0001f	0f 8c b8 00 00
	00		 jl	 $LN16@CheckCanEn

; 394  : 	{
; 395  : 		Temple = -1;
; 396  : 	}
; 397  : 	else if( gObj[aIndex].Level < 271 )

  00025	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  0002a	66 3b c2	 cmp	 ax, dx
  0002d	7d 0f		 jge	 SHORT $LN4@CheckCanEn

; 398  : 	{
; 399  : 		Temple = 0;

  0002f	33 c9		 xor	 ecx, ecx

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  00031	33 c0		 xor	 eax, eax
  00033	41		 inc	 ecx
  00034	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  00037	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN4@CheckCanEn:

; 400  : 	}
; 401  : 	else if( gObj[aIndex].Level < 321 )

  0003e	ba 41 01 00 00	 mov	 edx, 321		; 00000141H
  00043	66 3b c2	 cmp	 ax, dx
  00046	7d 12		 jge	 SHORT $LN6@CheckCanEn

; 402  : 	{
; 403  : 		Temple = 1;

  00048	b9 01 00 00 00	 mov	 ecx, 1

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  0004d	33 c0		 xor	 eax, eax
  0004f	41		 inc	 ecx
  00050	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  00053	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN6@CheckCanEn:

; 404  : 	}
; 405  : 	else if( gObj[aIndex].Level < 351 )

  0005a	ba 5f 01 00 00	 mov	 edx, 351		; 0000015fH
  0005f	66 3b c2	 cmp	 ax, dx
  00062	7d 12		 jge	 SHORT $LN8@CheckCanEn

; 406  : 	{
; 407  : 		Temple = 2;

  00064	b9 02 00 00 00	 mov	 ecx, 2

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  00069	33 c0		 xor	 eax, eax
  0006b	41		 inc	 ecx
  0006c	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  0006f	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
$LN8@CheckCanEn:

; 408  : 	}
; 409  : 	else if( gObj[aIndex].Level < 381 )

  00076	ba 7d 01 00 00	 mov	 edx, 381		; 0000017dH
  0007b	66 3b c2	 cmp	 ax, dx
  0007e	7d 12		 jge	 SHORT $LN10@CheckCanEn

; 410  : 	{
; 411  : 		Temple = 3;

  00080	b9 03 00 00 00	 mov	 ecx, 3

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  00085	33 c0		 xor	 eax, eax
  00087	41		 inc	 ecx
  00088	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  0008b	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
$LN10@CheckCanEn:

; 412  : 	}
; 413  : 	else if( gObj[aIndex].Level < 400 )

  00092	ba 90 01 00 00	 mov	 edx, 400		; 00000190H
  00097	66 3b c2	 cmp	 ax, dx
  0009a	7c 0b		 jl	 SHORT $LN25@CheckCanEn

; 414  : 	{
; 415  : 		Temple = 4;
; 416  : 	}
; 417  : 	else if( gObj[aIndex].Level == 400 && gObj[aIndex].ChangeUP2 == FALSE)

  0009c	75 1b		 jne	 SHORT $LN14@CheckCanEn
  0009e	80 b9 94 00 00
	00 00		 cmp	 BYTE PTR [ecx+148], 0
  000a5	75 1b		 jne	 SHORT $LN24@CheckCanEn
$LN25@CheckCanEn:

; 418  : 	{
; 419  : 		Temple = 4;

  000a7	b9 04 00 00 00	 mov	 ecx, 4

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  000ac	33 c0		 xor	 eax, eax
  000ae	41		 inc	 ecx
  000af	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  000b2	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  000b5	5d		 pop	 ebp
  000b6	c2 08 00	 ret	 8
$LN14@CheckCanEn:

; 420  : 	}
; 421  : #if( ENABLE_FIX_EVENTMASTERLEVEL == 1 )
; 422  : 	else if( gObj[aIndex].ChangeUP2 != FALSE )
; 423  : #else
; 424  : 	else if( gObj[aIndex].Level >= 400 && gObj[aIndex].ChangeUP2 != FALSE )

  000b9	80 b9 94 00 00
	00 00		 cmp	 BYTE PTR [ecx+148], 0
  000c0	74 1b		 je	 SHORT $LN16@CheckCanEn
$LN24@CheckCanEn:

; 425  : #endif
; 426  : 	{
; 427  : 		if( g_bMaxLevelIllusion != 0 )

  000c2	33 c9		 xor	 ecx, ecx
  000c4	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?g_bMaxLevelIllusion@@3HA, ecx ; g_bMaxLevelIllusion
  000ca	0f 95 c1	 setne	 cl

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  000cd	33 c0		 xor	 eax, eax
  000cf	83 c1 04	 add	 ecx, 4
  000d2	41		 inc	 ecx
  000d3	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  000d6	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
$LN16@CheckCanEn:

; 428  : 		{
; 429  : 			Temple = 5;
; 430  : 		}
; 431  : 		else
; 432  : 		{
; 433  : 			Temple = 4;
; 434  : 		}
; 435  : 	}
; 436  : 	else
; 437  : 	{
; 438  : 		Temple = -1;

  000dd	83 c9 ff	 or	 ecx, -1

; 439  : 	}
; 440  : 
; 441  : 	if( Temple+1 == Level )

  000e0	33 c0		 xor	 eax, eax
  000e2	41		 inc	 ecx
  000e3	3b 4d 0c	 cmp	 ecx, DWORD PTR _Level$[ebp]
  000e6	0f 94 c0	 sete	 al

; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : return FALSE;
; 446  : }

  000e9	5d		 pop	 ebp
  000ea	c2 08 00	 ret	 8
?CheckCanEnter@CIllusionTempleEvent@@QAEHHH@Z ENDP	; CIllusionTempleEvent::CheckCanEnter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?Is2ndSkillActive@CIllusionTempleEvent@@QAEHHE@Z
_TEXT	SEGMENT
_iEventIndex$ = 8					; size = 4
_MapNumber$ = 12					; size = 1
?Is2ndSkillActive@CIllusionTempleEvent@@QAEHHE@Z PROC	; CIllusionTempleEvent::Is2ndSkillActive, COMDAT
; _this$ = ecx

; 1009 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1010 : 	if( IT_MAP_RANGE( MapNumber ) == FALSE )

  00003	8a 55 0c	 mov	 dl, BYTE PTR _MapNumber$[ebp]
  00006	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  00009	72 2b		 jb	 SHORT $LN6@Is2ndSkill
  0000b	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00010	3a c2		 cmp	 al, dl
  00012	1b c0		 sbb	 eax, eax
  00014	83 c0 01	 add	 eax, 1
  00017	74 1d		 je	 SHORT $LN6@Is2ndSkill

; 1013 : 	}
; 1014 : 
; 1015 : return m_TempleData[ MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].Is2ndSkillActive(iEventIndex);

  00019	ff 75 08	 push	 DWORD PTR _iEventIndex$[ebp]
  0001c	0f b6 c2	 movzx	 eax, dl
  0001f	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  00025	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  0002b	03 c8		 add	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?Is2ndSkillActive@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::Is2ndSkillActive

; 1016 : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN6@Is2ndSkill:

; 1011 : 	{
; 1012 : 		return FALSE;

  00036	33 c0		 xor	 eax, eax

; 1016 : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?Is2ndSkillActive@CIllusionTempleEvent@@QAEHHE@Z ENDP	; CIllusionTempleEvent::Is2ndSkillActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z
_TEXT	SEGMENT
_iEventIndex$ = 8					; size = 4
_MapNumber$ = 12					; size = 1
?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z PROC	; CIllusionTempleEvent::Is1stSkillActive, COMDAT
; _this$ = ecx

; 999  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1000 : 	if( IT_MAP_RANGE( MapNumber ) == FALSE )

  00003	8a 55 0c	 mov	 dl, BYTE PTR _MapNumber$[ebp]
  00006	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  00009	72 2b		 jb	 SHORT $LN6@Is1stSkill
  0000b	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00010	3a c2		 cmp	 al, dl
  00012	1b c0		 sbb	 eax, eax
  00014	83 c0 01	 add	 eax, 1
  00017	74 1d		 je	 SHORT $LN6@Is1stSkill

; 1003 : 	}
; 1004 : 
; 1005 : return m_TempleData[ MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].Is1stSkillActive(iEventIndex);

  00019	ff 75 08	 push	 DWORD PTR _iEventIndex$[ebp]
  0001c	0f b6 c2	 movzx	 eax, dl
  0001f	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  00025	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  0002b	03 c8		 add	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ?Is1stSkillActive@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::Is1stSkillActive

; 1006 : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN6@Is1stSkill:

; 1001 : 	{
; 1002 : 		return FALSE;

  00036	33 c0		 xor	 eax, eax

; 1006 : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z ENDP	; CIllusionTempleEvent::Is1stSkillActive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetLeftTime@CIllusionTempleEvent@@QAEEXZ
_TEXT	SEGMENT
?GetLeftTime@CIllusionTempleEvent@@QAEEXZ PROC		; CIllusionTempleEvent::GetLeftTime, COMDAT
; _this$ = ecx

; 986  : 	BYTE LeftTime = 0;
; 987  : 	if( g_bIllusionTemple )

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bIllusionTemple@@3HA, 0 ; g_bIllusionTemple
  00007	74 08		 je	 SHORT $LN2@GetLeftTim

; 988  : 	{
; 989  : 		LeftTime = m_TempleData[0].GetLeftTime();

  00009	83 c1 08	 add	 ecx, 8
  0000c	e9 00 00 00 00	 jmp	 ?GetLeftTime@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetLeftTime
$LN2@GetLeftTim:

; 990  : 	}
; 991  : 	else
; 992  : 	{
; 993  : 		LeftTime = 0;

  00011	32 c0		 xor	 al, al

; 994  : 	}
; 995  : return LeftTime;
; 996  : }

  00013	c3		 ret	 0
?GetLeftTime@CIllusionTempleEvent@@QAEEXZ ENDP		; CIllusionTempleEvent::GetLeftTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?DropReward@CIllusionTempleEvent@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?DropReward@CIllusionTempleEvent@@QAEXH@Z PROC		; CIllusionTempleEvent::DropReward, COMDAT
; _this$ = ecx

; 975  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 976  : 	if( IT_MAP_RANGE( gObj[iIndex].MapNumber ) == FALSE )

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00008	56		 push	 esi
  00009	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  0000c	69 d6 40 27 00
	00		 imul	 edx, esi, 10048
  00012	8a 94 02 23 01
	00 00		 mov	 dl, BYTE PTR [edx+eax+291]
  00019	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  0001c	72 22		 jb	 SHORT $LN1@DropReward
  0001e	b0 32		 mov	 al, 50			; 00000032H
  00020	3a c2		 cmp	 al, dl
  00022	1b c0		 sbb	 eax, eax
  00024	83 c0 01	 add	 eax, 1
  00027	74 17		 je	 SHORT $LN1@DropReward

; 977  : 	{
; 978  : 		return;
; 979  : 	}
; 980  : 
; 981  : 	m_TempleData[ gObj[iIndex].MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].DropReward(iIndex);

  00029	0f b6 c2	 movzx	 eax, dl
  0002c	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  00032	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00038	56		 push	 esi
  00039	03 c8		 add	 ecx, eax
  0003b	e8 00 00 00 00	 call	 ?DropReward@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::DropReward
$LN1@DropReward:
  00040	5e		 pop	 esi

; 982  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?DropReward@CIllusionTempleEvent@@QAEXH@Z ENDP		; CIllusionTempleEvent::DropReward
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ItemDrop@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?ItemDrop@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::ItemDrop, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 966  : 	if( IT_MAP_RANGE( lpObj->MapNumber ) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	8a 96 23 01 00
	00		 mov	 dl, BYTE PTR [esi+291]
  0000d	80 fa 2d	 cmp	 dl, 45			; 0000002dH
  00010	72 25		 jb	 SHORT $LN1@ItemDrop
  00012	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00017	3a c2		 cmp	 al, dl
  00019	1b c0		 sbb	 eax, eax
  0001b	83 c0 01	 add	 eax, 1
  0001e	74 17		 je	 SHORT $LN1@ItemDrop

; 967  : 	{
; 968  : 		return;
; 969  : 	}
; 970  : 
; 971  : 	m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].ItemDrop(lpObj);

  00020	0f b6 c2	 movzx	 eax, dl
  00023	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  00029	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  0002f	56		 push	 esi
  00030	03 c8		 add	 ecx, eax
  00032	e8 00 00 00 00	 call	 ?ItemDrop@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::ItemDrop
$LN1@ItemDrop:
  00037	5e		 pop	 esi

; 972  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?ItemDrop@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::ItemDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?TeleportLock@CIllusionTempleEvent@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?TeleportLock@CIllusionTempleEvent@@QAEHH@Z PROC	; CIllusionTempleEvent::TeleportLock, COMDAT
; _this$ = ecx

; 936  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 937  : 	if( gObjIsConnected(iIndex) == FALSE )

  00005	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00010	83 c4 04	 add	 esp, 4
  00013	85 c0		 test	 eax, eax
  00015	75 08		 jne	 SHORT $LN2@TeleportLo
$LN12@TeleportLo:
  00017	5e		 pop	 esi

; 938  : 	{
; 939  : 		return FALSE;

  00018	33 c0		 xor	 eax, eax
  0001a	5b		 pop	 ebx

; 953  : 	{
; 954  : 		return TRUE;
; 955  : 	}
; 956  : return FALSE;
; 957  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@TeleportLo:

; 940  : 	}
; 941  : 
; 942  : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  0001f	85 f6		 test	 esi, esi
  00021	78 f4		 js	 SHORT $LN12@TeleportLo
  00023	33 c0		 xor	 eax, eax
  00025	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	74 e5		 je	 SHORT $LN12@TeleportLo

; 943  : 	{
; 944  : 		return FALSE;
; 945  : 	}
; 946  : 
; 947  : 	if( IT_MAP_RANGE( gObj[iIndex].MapNumber ) == FALSE || m_TempleData[ gObj[iIndex].MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].GetState() != 2)

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00037	57		 push	 edi
  00038	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0003e	8a 8c 07 23 01
	00 00		 mov	 cl, BYTE PTR [edi+eax+291]
  00045	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  00048	72 55		 jb	 SHORT $LN5@TeleportLo
  0004a	b0 32		 mov	 al, 50			; 00000032H
  0004c	3a c1		 cmp	 al, cl
  0004e	1b c0		 sbb	 eax, eax
  00050	83 c0 01	 add	 eax, 1
  00053	74 4a		 je	 SHORT $LN5@TeleportLo
  00055	0f b6 c1	 movzx	 eax, cl
  00058	8d 8b 8c 4f ff
	ff		 lea	 ecx, DWORD PTR [ebx-45172]
  0005e	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00064	03 c8		 add	 ecx, eax
  00066	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  0006b	3c 02		 cmp	 al, 2
  0006d	75 30		 jne	 SHORT $LN5@TeleportLo

; 950  : 	}
; 951  : 
; 952  : 	if( iIndex == m_TempleData[ gObj[iIndex].MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].GetRelicPlayer() )

  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00074	8d 8b 8c 4f ff
	ff		 lea	 ecx, DWORD PTR [ebx-45172]
  0007a	0f b6 84 07 23
	01 00 00	 movzx	 eax, BYTE PTR [edi+eax+291]
  00082	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00088	03 c8		 add	 ecx, eax
  0008a	e8 00 00 00 00	 call	 ?GetRelicPlayer@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetRelicPlayer
  0008f	33 c9		 xor	 ecx, ecx
  00091	3b f0		 cmp	 esi, eax
  00093	5f		 pop	 edi
  00094	0f 94 c1	 sete	 cl
  00097	5e		 pop	 esi
  00098	8b c1		 mov	 eax, ecx
  0009a	5b		 pop	 ebx

; 953  : 	{
; 954  : 		return TRUE;
; 955  : 	}
; 956  : return FALSE;
; 957  : }

  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
$LN5@TeleportLo:
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi

; 948  : 	{
; 949  : 		return FALSE;

  000a1	33 c0		 xor	 eax, eax
  000a3	5b		 pop	 ebx

; 953  : 	{
; 954  : 		return TRUE;
; 955  : 	}
; 956  : return FALSE;
; 957  : }

  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?TeleportLock@CIllusionTempleEvent@@QAEHH@Z ENDP	; CIllusionTempleEvent::TeleportLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?SendInfo@CIllusionTempleEvent@@QAEXXZ
_TEXT	SEGMENT
_pMsg$1 = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
?SendInfo@CIllusionTempleEvent@@QAEXXZ PROC		; CIllusionTempleEvent::SendInfo, COMDAT
; _this$ = ecx

; 908  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	57		 push	 edi

; 909  : 	if( m_TempleData[1].GetState() == IT_STATE_CLOSED &&

  00014	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  0001a	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  0001f	84 c0		 test	 al, al
  00021	0f 85 ab 00 00
	00		 jne	 $LN2@SendInfo
  00027	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  0002d	e8 00 00 00 00	 call	 ?OpenState@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::OpenState
  00032	83 f8 01	 cmp	 eax, 1
  00035	0f 85 97 00 00
	00		 jne	 $LN2@SendInfo

; 910  : 		m_TempleData[1].OpenState() == TRUE )
; 911  : 	{
; 912  : 		PMSG_ITSEND_ENTER_INFO pMsg;
; 913  : 
; 914  : 		PHeadSubSetB((LPBYTE)&pMsg,0xBF,3,sizeof(pMsg));

  0003b	6a 0a		 push	 10			; 0000000aH
  0003d	6a 03		 push	 3
  0003f	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00042	68 bf 00 00 00	 push	 191			; 000000bfH
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  0004d	83 c4 10	 add	 esp, 16			; 00000010H

; 915  : 
; 916  : 		pMsg.UserCnt[0] = m_TempleData[0].GetUserCount();

  00050	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00053	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount

; 917  : 		pMsg.UserCnt[1] = m_TempleData[1].GetUserCount();

  00058	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  0005e	88 45 f4	 mov	 BYTE PTR _pMsg$1[ebp+4], al
  00061	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount

; 918  : 		pMsg.UserCnt[2] = m_TempleData[2].GetUserCount();

  00066	8d 8e e0 07 00
	00		 lea	 ecx, DWORD PTR [esi+2016]
  0006c	88 45 f5	 mov	 BYTE PTR _pMsg$1[ebp+5], al
  0006f	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount

; 919  : 		pMsg.UserCnt[3] = m_TempleData[3].GetUserCount();

  00074	8d 8e cc 0b 00
	00		 lea	 ecx, DWORD PTR [esi+3020]
  0007a	88 45 f6	 mov	 BYTE PTR _pMsg$1[ebp+6], al
  0007d	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount

; 920  : 		pMsg.UserCnt[4] = m_TempleData[4].GetUserCount();

  00082	8d 8e b8 0f 00
	00		 lea	 ecx, DWORD PTR [esi+4024]
  00088	88 45 f7	 mov	 BYTE PTR _pMsg$1[ebp+7], al
  0008b	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount

; 921  : 
; 922  : 		if( g_bMaxLevelIllusion != 0 )

  00090	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bMaxLevelIllusion@@3HA, 0 ; g_bMaxLevelIllusion
  00097	88 45 f8	 mov	 BYTE PTR _pMsg$1[ebp+8], al
  0009a	74 10		 je	 SHORT $LN3@SendInfo

; 923  : 		{
; 924  : 			pMsg.UserCnt[5] = m_TempleData[5].GetUserCount();

  0009c	8d 8e a4 13 00
	00		 lea	 ecx, DWORD PTR [esi+5028]
  000a2	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount
  000a7	88 45 f9	 mov	 BYTE PTR _pMsg$1[ebp+9], al

; 925  : 		}
; 926  : 		else

  000aa	eb 04		 jmp	 SHORT $LN4@SendInfo
$LN3@SendInfo:

; 927  : 		{
; 928  : 			pMsg.UserCnt[5] = 0;

  000ac	c6 45 f9 00	 mov	 BYTE PTR _pMsg$1[ebp+9], 0
$LN4@SendInfo:

; 929  : 		}
; 930  : 
; 931  : 		MsgSendV2(&gObj[this->iEnterNpc],(LPBYTE)&pMsg,pMsg.h.size);

  000b0	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  000b4	50		 push	 eax
  000b5	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000b8	50		 push	 eax
  000b9	69 86 90 17 00
	00 40 27 00 00	 imul	 eax, DWORD PTR [esi+6032], 10048
  000c3	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ?MsgSendV2@@YAXPAUOBJECTSTRUCT@@PAEH@Z ; MsgSendV2
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendInfo:

; 932  : 	}
; 933  : }

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d5	5f		 pop	 edi
  000d6	33 cd		 xor	 ecx, ebp
  000d8	5e		 pop	 esi
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
?SendInfo@CIllusionTempleEvent@@QAEXXZ ENDP		; CIllusionTempleEvent::SendInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?SetMummyNpc@CIllusionTempleEvent@@QAEXH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?SetMummyNpc@CIllusionTempleEvent@@QAEXH@Z PROC		; CIllusionTempleEvent::SetMummyNpc, COMDAT
; _this$ = ecx

; 897  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 898  : 	iEnterNpc = iIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _iIndex$[ebp]
  00006	89 81 90 17 00
	00		 mov	 DWORD PTR [ecx+6032], eax

; 899  : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetMummyNpc@CIllusionTempleEvent@@QAEXH@Z ENDP		; CIllusionTempleEvent::SetMummyNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?RegenUser@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?RegenUser@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::RegenUser, COMDAT
; _this$ = ecx

; 875  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 876  : 	if( OBJMAX_RANGE( lpObj->m_Index ) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 16		 mov	 edx, DWORD PTR [esi]
  0000c	85 d2		 test	 edx, edx
  0000e	78 5d		 js	 SHORT $LN5@RegenUser
  00010	33 c0		 xor	 eax, eax
  00012	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
  0001b	85 c0		 test	 eax, eax
  0001d	74 4e		 je	 SHORT $LN5@RegenUser

; 877  : 	{
; 878  : 		return;
; 879  : 	}
; 880  : 
; 881  : 	if( IT_MAP_RANGE( lpObj->MapNumber ) == FALSE )

  0001f	8a 8e 23 01 00
	00		 mov	 cl, BYTE PTR [esi+291]
  00025	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  00028	72 43		 jb	 SHORT $LN5@RegenUser
  0002a	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  0002f	3a c1		 cmp	 al, cl
  00031	1b c0		 sbb	 eax, eax
  00033	83 c0 01	 add	 eax, 1
  00036	74 35		 je	 SHORT $LN5@RegenUser

; 882  : 	{
; 883  : 		return;
; 884  : 	}
; 885  : 
; 886  : 	if( m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].GetState() != 2 )

  00038	0f b6 c1	 movzx	 eax, cl
  0003b	8d 8f 8c 4f ff
	ff		 lea	 ecx, DWORD PTR [edi-45172]
  00041	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00047	03 c8		 add	 ecx, eax
  00049	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  0004e	3c 02		 cmp	 al, 2
  00050	75 1b		 jne	 SHORT $LN5@RegenUser

; 887  : 	{
; 888  : 
; 889  : 	}
; 890  : 	else
; 891  : 	{
; 892  : 		m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].SetProtect(lpObj);

  00052	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  00059	8d 8f 8c 4f ff
	ff		 lea	 ecx, DWORD PTR [edi-45172]
  0005f	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00065	56		 push	 esi
  00066	03 c8		 add	 ecx, eax
  00068	e8 00 00 00 00	 call	 ?SetProtect@CIllusionTempleProcess@@QAEHPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SetProtect
$LN5@RegenUser:
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 893  : 	}
; 894  : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?RegenUser@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::RegenUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?UserDie@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?UserDie@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::UserDie, COMDAT
; _this$ = ecx

; 870  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 871  : 	m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].UserDie(lpObj);

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _lpObj$[ebp], eax
  00009	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00010	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00016	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0001c	03 c8		 add	 ecx, eax

; 872  : }

  0001e	5d		 pop	 ebp

; 871  : 	m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].UserDie(lpObj);

  0001f	e9 00 00 00 00	 jmp	 ?UserDie@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::UserDie
?UserDie@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::UserDie
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?SkillProc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?SkillProc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::SkillProc, COMDAT
; _this$ = ecx

; 865  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 866  : 	m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].SkillProc(lpObj);

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	89 45 08	 mov	 DWORD PTR _lpObj$[ebp], eax
  00009	0f b6 80 23 01
	00 00		 movzx	 eax, BYTE PTR [eax+291]
  00010	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00016	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0001c	03 c8		 add	 ecx, eax

; 867  : }

  0001e	5d		 pop	 ebp

; 866  : 	m_TempleData[ lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].SkillProc(lpObj);

  0001f	e9 00 00 00 00	 jmp	 ?SkillProc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::SkillProc
?SkillProc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::SkillProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?UseSkill@CIllusionTempleEvent@@QAEXHGHE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_Skill$ = 12						; size = 2
_iTargetIndex$ = 16					; size = 4
_State$ = 20						; size = 1
?UseSkill@CIllusionTempleEvent@@QAEXHGHE@Z PROC		; CIllusionTempleEvent::UseSkill, COMDAT
; _this$ = ecx

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 851  : 	if( OBJMAX_RANGE( iIndex ) == FALSE )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iIndex$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 d2		 test	 edx, edx
  0000b	78 51		 js	 SHORT $LN1@UseSkill
  0000d	33 c0		 xor	 eax, eax
  0000f	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00015	0f 9e c0	 setle	 al
  00018	85 c0		 test	 eax, eax
  0001a	74 42		 je	 SHORT $LN1@UseSkill

; 852  : 	{
; 853  : 		return;
; 854  : 	}
; 855  : 
; 856  : 	if( IT_MAP_RANGE( gObj[iIndex].MapNumber ) == FALSE )

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00021	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  00027	8a 8c 01 23 01
	00 00		 mov	 cl, BYTE PTR [ecx+eax+291]
  0002e	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  00031	72 2b		 jb	 SHORT $LN1@UseSkill
  00033	b0 32		 mov	 al, 50			; 00000032H
  00035	3a c1		 cmp	 al, cl
  00037	1b c0		 sbb	 eax, eax
  00039	83 c0 01	 add	 eax, 1
  0003c	74 20		 je	 SHORT $LN1@UseSkill

; 857  : 	{
; 858  : 		return;
; 859  : 	}
; 860  : 
; 861  : 	m_TempleData[ gObj[iIndex].MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ].UseSkill(iIndex,Skill,iTargetIndex,State);

  0003e	ff 75 14	 push	 DWORD PTR _State$[ebp]
  00041	0f b6 c1	 movzx	 eax, cl
  00044	8d 8e 8c 4f ff
	ff		 lea	 ecx, DWORD PTR [esi-45172]
  0004a	ff 75 10	 push	 DWORD PTR _iTargetIndex$[ebp]
  0004d	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00053	ff 75 0c	 push	 DWORD PTR _Skill$[ebp]
  00056	52		 push	 edx
  00057	03 c8		 add	 ecx, eax
  00059	e8 00 00 00 00	 call	 ?UseSkill@CIllusionTempleProcess@@QAEXHGHE@Z ; CIllusionTempleProcess::UseSkill
$LN1@UseSkill:
  0005e	5e		 pop	 esi

; 862  : }

  0005f	5d		 pop	 ebp
  00060	c2 10 00	 ret	 16			; 00000010H
?UseSkill@CIllusionTempleEvent@@QAEXHGHE@Z ENDP		; CIllusionTempleEvent::UseSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?PointAdd@CIllusionTempleEvent@@QAEEHEE@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
_AddPt$ = 12						; size = 1
_MapNumber$ = 12					; size = 1
_Type$ = 16						; size = 1
?PointAdd@CIllusionTempleEvent@@QAEEHEE@Z PROC		; CIllusionTempleEvent::PointAdd, COMDAT
; _this$ = ecx

; 821  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 822  : 
; 823  : 	if( OBJMAX_RANGE( iIndex ) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	78 71		 js	 SHORT $LN11@PointAdd
  0000e	33 c0		 xor	 eax, eax
  00010	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00016	0f 9e c0	 setle	 al
  00019	85 c0		 test	 eax, eax
  0001b	74 62		 je	 SHORT $LN11@PointAdd

; 826  : 	}
; 827  : 
; 828  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  0001d	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _MapNumber$[ebp]
  00021	8d 51 d3	 lea	 edx, DWORD PTR [ecx-45]
  00024	85 d2		 test	 edx, edx
  00026	78 57		 js	 SHORT $LN11@PointAdd
  00028	33 c0		 xor	 eax, eax
  0002a	83 fa 05	 cmp	 edx, 5
  0002d	0f 9e c0	 setle	 al
  00030	85 c0		 test	 eax, eax
  00032	74 4b		 je	 SHORT $LN11@PointAdd

; 829  : 	{
; 830  : 		return FALSE;
; 831  : 	}
; 832  : 
; 833  : 	BYTE AddPt = 0;
; 834  : 
; 835  : 	if( Type == 1 )
; 836  : 	{
; 837  : 		m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].AddPlayerKillCount(iIndex);

  00034	69 c1 ec 03 00
	00		 imul	 eax, ecx, 1004
  0003a	81 c7 8c 4f ff
	ff		 add	 edi, -45172		; ffff4f8cH
  00040	56		 push	 esi
  00041	03 f8		 add	 edi, eax
  00043	80 7d 10 01	 cmp	 BYTE PTR _Type$[ebp], 1
  00047	8b cf		 mov	 ecx, edi
  00049	75 1a		 jne	 SHORT $LN4@PointAdd
  0004b	e8 00 00 00 00	 call	 ?AddPlayerKillCount@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddPlayerKillCount

; 838  : 		AddPt = 5;

  00050	c6 45 0c 05	 mov	 BYTE PTR _AddPt$[ebp], 5

; 844  : 	}
; 845  : 
; 846  : return m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].AddKillPts(iIndex,AddPt);

  00054	8b cf		 mov	 ecx, edi
  00056	ff 75 0c	 push	 DWORD PTR _AddPt$[ebp]
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z ; CIllusionTempleProcess::AddKillPts
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 847  : }

  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
$LN4@PointAdd:

; 839  : 	}
; 840  : 	else
; 841  : 	{
; 842  : 		m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].AddMonsterKillCount(iIndex);

  00065	e8 00 00 00 00	 call	 ?AddMonsterKillCount@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::AddMonsterKillCount

; 843  : 		AddPt = 2;

  0006a	c6 45 0c 02	 mov	 BYTE PTR _AddPt$[ebp], 2

; 844  : 	}
; 845  : 
; 846  : return m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].AddKillPts(iIndex,AddPt);

  0006e	8b cf		 mov	 ecx, edi
  00070	ff 75 0c	 push	 DWORD PTR _AddPt$[ebp]
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ?AddKillPts@CIllusionTempleProcess@@QAEEHE@Z ; CIllusionTempleProcess::AddKillPts
  00079	5f		 pop	 edi
  0007a	5e		 pop	 esi

; 847  : }

  0007b	5d		 pop	 ebp
  0007c	c2 0c 00	 ret	 12			; 0000000cH
$LN11@PointAdd:
  0007f	5f		 pop	 edi

; 824  : 	{
; 825  : 		return FALSE;

  00080	32 c0		 xor	 al, al
  00082	5e		 pop	 esi

; 847  : }

  00083	5d		 pop	 ebp
  00084	c2 0c 00	 ret	 12			; 0000000cH
?PointAdd@CIllusionTempleEvent@@QAEEHEE@Z ENDP		; CIllusionTempleEvent::PointAdd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?TicketMix@CIllusionTempleEvent@@QAEEHHH@Z
_TEXT	SEGMENT
_iChaosTaxMoney$2$ = -56				; size = 4
_iNeedChaosMoney$1$ = -52				; size = 4
_MixRate$1$ = -48					; size = 4
_pMsg$ = -44						; size = 16
_szTmp$ = -28						; size = 23
__$ArrayPad$ = -4					; size = 4
_iIndex$ = 8						; size = 4
_iLevel$ = 12						; size = 4
_iCharmCount$ = 16					; size = 4
?TicketMix@CIllusionTempleEvent@@QAEEHHH@Z PROC		; CIllusionTempleEvent::TicketMix, COMDAT
; _this$ = ecx

; 717  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _iIndex$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 0c	 mov	 edi, DWORD PTR _iLevel$[ebp]

; 718  : 	if( OBJMAX_RANGE( iIndex ) == FALSE )

  00018	85 f6		 test	 esi, esi
  0001a	0f 88 dc 02 00
	00		 js	 $LN18@TicketMix
  00020	33 c0		 xor	 eax, eax
  00022	81 fe eb 2c 00
	00		 cmp	 esi, 11499		; 00002cebH
  00028	0f 9e c0	 setle	 al
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 c9 02 00
	00		 je	 $LN18@TicketMix

; 719  : 	{
; 720  : 		return FALSE;
; 721  : 	}
; 722  : 
; 723  : 	if( IT_MAP_RANGE( iLevel + (MAP_INDEX_ILLUSIONTEMPLE1 - 1)) == FALSE )

  00033	8d 4f 2c	 lea	 ecx, DWORD PTR [edi+44]
  00036	83 f9 2d	 cmp	 ecx, 45			; 0000002dH
  00039	0f 8c bd 02 00
	00		 jl	 $LN18@TicketMix
  0003f	33 c0		 xor	 eax, eax
  00041	83 f9 32	 cmp	 ecx, 50			; 00000032H
  00044	0f 9e c0	 setle	 al
  00047	85 c0		 test	 eax, eax
  00049	0f 84 ad 02 00
	00		 je	 $LN18@TicketMix

; 724  : 	{
; 725  : 		return FALSE;
; 726  : 	}
; 727  : 
; 728  : 	int Empty = 0;
; 729  : 	PMSG_CHAOSMIXRESULT pMsg;
; 730  : 	PHeadSetB((LPBYTE)&pMsg,0x86,sizeof(pMsg));

  0004f	53		 push	 ebx
  00050	6a 10		 push	 16			; 00000010H
  00052	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00055	68 86 00 00 00	 push	 134			; 00000086H
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 731  : 
; 732  : 	pMsg.Result = 0;
; 733  : 	gObj[iIndex].ChaosLock = TRUE;

  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00065	69 de 40 27 00
	00		 imul	 ebx, esi, 10048
  0006b	c6 45 d7 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0

; 734  : 
; 735  : 	LogAddTD("[Illusion Temple] Mix Chaos Mix Start (Account:%s, Name:%s, Level:%d)",

  0006f	57		 push	 edi
  00070	c7 84 03 20 12
	00 00 01 00 00
	00		 mov	 DWORD PTR [ebx+eax+4640], 1
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00081	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00084	03 c3		 add	 eax, ebx
  00086	50		 push	 eax
  00087	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0008a	03 c3		 add	 eax, ebx
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@OKENBBEG@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 736  : 		gObj[iIndex].AccountID,gObj[iIndex].Name,iLevel);
; 737  : 
; 738  : 	char szTmp[23];
; 739  : 
; 740  : 	wsprintf(szTmp,"IllusionTemple Mix,%d",iLevel);

  00098	57		 push	 edi
  00099	8d 45 e4	 lea	 eax, DWORD PTR _szTmp$[ebp]
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KDHHANMC@IllusionTemple?5Mix?0?$CFd?$AA@
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA
  000a8	83 c4 28	 add	 esp, 40			; 00000028H

; 741  : 	g_ChaosBox.LogChaosItem(&gObj[iIndex],szTmp);

  000ab	8d 45 e4	 lea	 eax, DWORD PTR _szTmp$[ebp]
  000ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  000b3	50		 push	 eax
  000b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b9	03 c3		 add	 eax, ebx
  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ?LogChaosItem@CChaosBox@@QAEXPAUOBJECTSTRUCT@@PAD@Z ; CChaosBox::LogChaosItem

; 742  : 
; 743  : 	int MixRate = IT_TicketRate[-1 + iLevel];

  000c1	8b 04 bd fc ff
	ff ff		 mov	 eax, DWORD PTR ?IT_TicketRate@@3PAHA[edi*4-4]
  000c8	89 45 d0	 mov	 DWORD PTR _MixRate$1$[ebp], eax

; 744  : 
; 745  : 	if( MixRate < 0 || MixRate > 100 )

  000cb	83 f8 64	 cmp	 eax, 100		; 00000064H
  000ce	0f 87 fc 01 00
	00		 ja	 $LN5@TicketMix

; 751  : 	}
; 752  : 
; 753  : 	if ( g_CrywolfSync.GetOccupationState() == 0 && g_iCrywolfApplyMvpBenefit )

  000d4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  000d9	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  000de	85 c0		 test	 eax, eax
  000e0	75 15		 jne	 SHORT $LN6@TicketMix
  000e2	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpBenefit@@3HA, eax ; g_iCrywolfApplyMvpBenefit
  000e8	74 0d		 je	 SHORT $LN6@TicketMix

; 754  : 	{	
; 755  : 		MixRate += g_CrywolfSync.GetPlusChaosRate();

  000ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  000ef	e8 00 00 00 00	 call	 ?GetPlusChaosRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetPlusChaosRate
  000f4	01 45 d0	 add	 DWORD PTR _MixRate$1$[ebp], eax
$LN6@TicketMix:

; 756  : 	}
; 757  : 
; 758  : 	int iNeedChaosMoney = IT_TicketZen[-1 + iLevel];

  000f7	8b 04 bd fc ff
	ff ff		 mov	 eax, DWORD PTR ?IT_TicketZen@@3PAHA[edi*4-4]

; 759  : 
; 760  : 	int iChaosTaxMoney = (int)((__int64)iNeedChaosMoney * (__int64)g_CastleSiegeSync.GetTaxRateChaos(iIndex) / (__int64)100);

  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  00103	56		 push	 esi
  00104	89 45 cc	 mov	 DWORD PTR _iNeedChaosMoney$1$[ebp], eax
  00107	e8 00 00 00 00	 call	 ?GetTaxRateChaos@CCastleSiegeSync@@QAEHH@Z ; CCastleSiegeSync::GetTaxRateChaos
  0010c	8b c8		 mov	 ecx, eax
  0010e	8b 45 cc	 mov	 eax, DWORD PTR _iNeedChaosMoney$1$[ebp]
  00111	f7 e9		 imul	 ecx
  00113	6a 00		 push	 0
  00115	6a 64		 push	 100			; 00000064H
  00117	52		 push	 edx
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 __alldiv

; 761  : 
; 762  : 	if ( iChaosTaxMoney < 0 )

  0011e	33 c9		 xor	 ecx, ecx
  00120	85 c0		 test	 eax, eax
  00122	0f 48 c1	 cmovs	 eax, ecx

; 763  : 	{
; 764  : 		iChaosTaxMoney = 0;
; 765  : 	}
; 766  : 
; 767  : 	iNeedChaosMoney += iChaosTaxMoney;

  00125	8b 4d cc	 mov	 ecx, DWORD PTR _iNeedChaosMoney$1$[ebp]
  00128	03 c8		 add	 ecx, eax
  0012a	89 45 c8	 mov	 DWORD PTR _iChaosTaxMoney$2$[ebp], eax
  0012d	89 4d cc	 mov	 DWORD PTR _iNeedChaosMoney$1$[ebp], ecx

; 768  : 
; 769  : 	if ( iNeedChaosMoney < 0 )

  00130	79 45		 jns	 SHORT $LN8@TicketMix

; 770  : 	{
; 771  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);

  00132	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00136	50		 push	 eax
  00137	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  0013a	50		 push	 eax
  0013b	56		 push	 esi
  0013c	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 772  : 		LogAddTD("[Illusion Temple] Mix Chaos Mix Failed - MixMoney< 0 (Account:%s, Name:%s, Level:%d).",

  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00147	57		 push	 edi
  00148	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  0014b	03 c3		 add	 eax, ebx
  0014d	50		 push	 eax
  0014e	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  00151	03 c3		 add	 eax, ebx
  00153	50		 push	 eax
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@JCLJPIJO@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@
$LN21@TicketMix:
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0015f	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN20@TicketMix:

; 812  : 			gObj[iIndex].AccountID,gObj[iIndex].Name,MixRate,gObj[iIndex].Money,iNeedChaosMoney,iCharmCount);
; 813  : 		return FALSE;

  00162	5b		 pop	 ebx
  00163	5f		 pop	 edi
  00164	32 c0		 xor	 al, al
  00166	5e		 pop	 esi

; 818  : }

  00167	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016a	33 cd		 xor	 ecx, ebp
  0016c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 0c 00	 ret	 12			; 0000000cH
$LN8@TicketMix:

; 773  : 			gObj[iIndex].AccountID,gObj[iIndex].Name,iLevel);
; 774  : 		return false;
; 775  : 	}
; 776  : 
; 777  : 	if ( ( gObj[iIndex].Money - iNeedChaosMoney ) < 0 )

  00177	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0017d	8b 84 1a cc 00
	00 00		 mov	 eax, DWORD PTR [edx+ebx+204]
  00184	2b c1		 sub	 eax, ecx
  00186	79 2d		 jns	 SHORT $LN9@TicketMix

; 778  : 	{
; 779  : 		pMsg.Result = 11;
; 780  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);

  00188	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0018c	50		 push	 eax
  0018d	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00190	c6 45 d7 0b	 mov	 BYTE PTR _pMsg$[ebp+3], 11 ; 0000000bH
  00194	50		 push	 eax
  00195	56		 push	 esi
  00196	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 781  : 		LogAddTD("[Illusion Temple] Mix Chaos Mix Failed - Not Enough Money (Account:%s, Name:%s, Level:%d)",

  0019b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001a1	57		 push	 edi
  001a2	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001a5	03 c3		 add	 eax, ebx
  001a7	50		 push	 eax
  001a8	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001ab	03 c3		 add	 eax, ebx
  001ad	50		 push	 eax
  001ae	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@PMODGPLA@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@

; 782  : 			gObj[iIndex].AccountID,gObj[iIndex].Name,iLevel);
; 783  : 		return false;

  001b3	eb a4		 jmp	 SHORT $LN21@TicketMix
$LN9@TicketMix:

; 784  : 	}
; 785  : 
; 786  : 	gObj[iIndex].Money -= iNeedChaosMoney;
; 787  : 	g_CastleSiegeSync.AddTributeMoney(iChaosTaxMoney);

  001b5	ff 75 c8	 push	 DWORD PTR _iChaosTaxMoney$2$[ebp]
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CastleSiegeSync@@3VCCastleSiegeSync@@A ; g_CastleSiegeSync
  001bd	89 84 1a cc 00
	00 00		 mov	 DWORD PTR [edx+ebx+204], eax
  001c4	e8 00 00 00 00	 call	 ?AddTributeMoney@CCastleSiegeSync@@QAEXH@Z ; CCastleSiegeSync::AddTributeMoney

; 788  : 	GCMoneySend(iIndex, gObj[iIndex].Money);

  001c9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ce	ff b4 03 cc 00
	00 00		 push	 DWORD PTR [ebx+eax+204]
  001d5	56		 push	 esi
  001d6	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 789  : 
; 790  : 	MixRate += iCharmCount;

  001db	8b 45 10	 mov	 eax, DWORD PTR _iCharmCount$[ebp]
  001de	83 c4 08	 add	 esp, 8
  001e1	01 45 d0	 add	 DWORD PTR _MixRate$1$[ebp], eax

; 791  : 
; 792  : 	if( rand() % 100 < MixRate )

  001e4	e8 00 00 00 00	 call	 _rand
  001e9	99		 cdq
  001ea	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001ef	f7 f9		 idiv	 ecx
  001f1	3b 55 d0	 cmp	 edx, DWORD PTR _MixRate$1$[ebp]
  001f4	7d 75		 jge	 SHORT $LN10@TicketMix

; 793  : 	{
; 794  : #if( __4GAMERS__ == 1 )
; 795  : 			g_Achievements.GD_UpdateMixData(&gObj[iIndex], true);
; 796  : #endif
; 797  : 		int Item = ITEMGET(13,51);
; 798  : 		ItemSerialCreateSend(iIndex,0xFF,0,0,Item,iLevel,0,0,0,0,-1,0,0);

  001f6	6a 00		 push	 0
  001f8	6a 00		 push	 0
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	6a ff		 push	 -1
  00200	6a 00		 push	 0
  00202	6a 00		 push	 0
  00204	6a 00		 push	 0
  00206	6a 00		 push	 0
  00208	57		 push	 edi
  00209	68 33 1a 00 00	 push	 6707			; 00001a33H
  0020e	6a 00		 push	 0
  00210	6a 00		 push	 0
  00212	68 ff 00 00 00	 push	 255			; 000000ffH
  00217	56		 push	 esi
  00218	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 799  : 		LogAddTD("[Illusion Temple] [%s][%s] CBMix Success %d Money : %d-%d, CharmRate : %d",

  0021d	ff 75 10	 push	 DWORD PTR _iCharmCount$[ebp]
  00220	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00226	ff 75 cc	 push	 DWORD PTR _iNeedChaosMoney$1$[ebp]
  00229	ff b4 19 cc 00
	00 00		 push	 DWORD PTR [ecx+ebx+204]
  00230	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  00233	ff 75 d0	 push	 DWORD PTR _MixRate$1$[ebp]
  00236	03 c3		 add	 eax, ebx
  00238	50		 push	 eax
  00239	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  0023c	03 c3		 add	 eax, ebx
  0023e	50		 push	 eax
  0023f	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@LPIFGPJB@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@
  00244	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0024a	83 c4 58	 add	 esp, 88			; 00000058H

; 814  : 	}
; 815  : 
; 816  : 	gObjInventoryCommit(iIndex);

  0024d	56		 push	 esi
  0024e	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00253	83 c4 04	 add	 esp, 4

; 817  : 	return TRUE;

  00256	b0 01		 mov	 al, 1
  00258	5b		 pop	 ebx
  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi

; 818  : }

  0025b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025e	33 cd		 xor	 ecx, ebp
  00260	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00265	8b e5		 mov	 esp, ebp
  00267	5d		 pop	 ebp
  00268	c2 0c 00	 ret	 12			; 0000000cH
$LN10@TicketMix:

; 800  : 			gObj[iIndex].AccountID,gObj[iIndex].Name,MixRate,gObj[iIndex].Money,iNeedChaosMoney,iCharmCount);
; 801  : 	}
; 802  : 	else
; 803  : 	{
; 804  : #if( __4GAMERS__ == 1 )
; 805  : 			g_Achievements.GD_UpdateMixData(&gObj[iIndex], false);
; 806  : #endif
; 807  : 		g_ChaosBox.ChaosBoxInit(&gObj[iIndex]);

  0026b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00270	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00275	03 c3		 add	 eax, ebx
  00277	50		 push	 eax
  00278	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 808  : 		GCUserChaosBoxSend(&gObj[iIndex], 0);

  0027d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00282	03 c3		 add	 eax, ebx
  00284	6a 00		 push	 0
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 809  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);

  0028c	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  00290	50		 push	 eax
  00291	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00294	50		 push	 eax
  00295	56		 push	 esi
  00296	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 810  : 
; 811  : 		LogAddTD("[Illusion Temple] [%s][%s] CBMix Fail %d Money : %d-%d, CharmRate : %d",

  0029b	ff 75 10	 push	 DWORD PTR _iCharmCount$[ebp]
  0029e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a4	ff 75 cc	 push	 DWORD PTR _iNeedChaosMoney$1$[ebp]
  002a7	ff b4 19 cc 00
	00 00		 push	 DWORD PTR [ecx+ebx+204]
  002ae	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  002b1	ff 75 d0	 push	 DWORD PTR _MixRate$1$[ebp]
  002b4	03 c3		 add	 eax, ebx
  002b6	50		 push	 eax
  002b7	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  002ba	03 c3		 add	 eax, ebx
  002bc	50		 push	 eax
  002bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@MMGHGAAJ@?$FLIllusion?5Temple?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5CBMix@
  002c2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002c8	83 c4 30	 add	 esp, 48			; 00000030H

; 812  : 			gObj[iIndex].AccountID,gObj[iIndex].Name,MixRate,gObj[iIndex].Money,iNeedChaosMoney,iCharmCount);
; 813  : 		return FALSE;

  002cb	e9 92 fe ff ff	 jmp	 $LN20@TicketMix
$LN5@TicketMix:

; 746  : 	{
; 747  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);

  002d0	0f b6 45 d5	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002d4	50		 push	 eax
  002d5	8d 45 d4	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002d8	50		 push	 eax
  002d9	56		 push	 esi
  002da	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 748  : 		LogAddTD("[Illusion Temple] Mix Chaos Mix Failed - MixRate Out of Bound (Account:%s, Name:%s, Level:%d)",

  002df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002e5	57		 push	 edi
  002e6	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  002e9	03 c3		 add	 eax, ebx
  002eb	50		 push	 eax
  002ec	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  002ef	03 c3		 add	 eax, ebx
  002f1	50		 push	 eax
  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0FO@JDNAJBBK@?$FLIllusion?5Temple?$FN?5Mix?5Chaos?5Mix?5@

; 749  : 			gObj[iIndex].AccountID,gObj[iIndex].Name,iLevel);
; 750  : 		return FALSE;

  002f7	e9 5d fe ff ff	 jmp	 $LN21@TicketMix
$LN18@TicketMix:

; 818  : }

  002fc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ff	32 c0		 xor	 al, al
  00301	5f		 pop	 edi
  00302	33 cd		 xor	 ecx, ebp
  00304	5e		 pop	 esi
  00305	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c2 0c 00	 ret	 12			; 0000000cH
?TicketMix@CIllusionTempleEvent@@QAEEHHH@Z ENDP		; CIllusionTempleEvent::TicketMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?CharmOfLuckCount@CIllusionTempleEvent@@QAEHH@Z
_TEXT	SEGMENT
_iIndex$ = 8						; size = 4
?CharmOfLuckCount@CIllusionTempleEvent@@QAEHH@Z PROC	; CIllusionTempleEvent::CharmOfLuckCount, COMDAT
; _this$ = ecx

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1189 : 	if( OBJMAX_RANGE(iIndex ) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	78 69		 js	 SHORT $LN14@CharmOfLuc
  0000a	33 c0		 xor	 eax, eax
  0000c	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00012	0f 9e c0	 setle	 al
  00015	85 c0		 test	 eax, eax
  00017	74 5a		 je	 SHORT $LN14@CharmOfLuc

; 1193 : 	}
; 1194 : 
; 1195 : 	LPOBJ lpObj = &gObj[iIndex];

  00019	53		 push	 ebx
  0001a	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048
  00020	56		 push	 esi
  00021	57		 push	 edi

; 1196 : 	int iCharmCount = 0;

  00022	33 ff		 xor	 edi, edi
  00024	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	33 f6		 xor	 esi, esi
  0002c	0f 1f 40 00	 npad	 4
$LL4@CharmOfLuc:

; 1199 : 	{
; 1200 : 		if( lpObj->pChaosBox[n].IsItem() == TRUE &&

  00030	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00036	03 ce		 add	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003d	83 f8 01	 cmp	 eax, 1
  00040	75 1a		 jne	 SHORT $LN2@CharmOfLuc
  00042	8b 8b 10 12 00
	00		 mov	 ecx, DWORD PTR [ebx+4624]
  00048	b8 35 1c 00 00	 mov	 eax, 7221		; 00001c35H
  0004d	66 39 44 31 06	 cmp	 WORD PTR [ecx+esi+6], ax
  00052	75 08		 jne	 SHORT $LN2@CharmOfLuc

; 1201 : 			lpObj->pChaosBox[n].m_Type == ITEMGET(14,53) )
; 1202 : 		{
; 1203 : 			iCharmCount += (int)lpObj->pChaosBox[n].m_Durability;

  00054	f3 0f 2c 4c 31
	24		 cvttss2si ecx, DWORD PTR [ecx+esi+36]
  0005a	03 f9		 add	 edi, ecx
$LN2@CharmOfLuc:

; 1197 : 
; 1198 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  0005c	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  00062	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  00068	7c c6		 jl	 SHORT $LL4@CharmOfLuc

; 1204 : 		}
; 1205 : 	}
; 1206 : return iCharmCount;

  0006a	8b c7		 mov	 eax, edi
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx

; 1207 : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN14@CharmOfLuc:

; 1190 : 	{
; 1191 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  00073	68 a7 04 00 00	 push	 1191			; 000004a7H
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DOGCNFBC@IllusionTempleEvent?4cpp?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1192 : 		return -1;

  0008b	83 c8 ff	 or	 eax, -1

; 1207 : }

  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?CharmOfLuckCount@CIllusionTempleEvent@@QAEHH@Z ENDP	; CIllusionTempleEvent::CharmOfLuckCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ChaosMixItemGet@CIllusionTempleEvent@@QAEHH@Z
_TEXT	SEGMENT
tv314 = -36						; size = 4
tv311 = -32						; size = 4
tv308 = -28						; size = 4
tv306 = -24						; size = 4
_bChaos$1$ = -20					; size = 4
_iPotionLevel$1$ = -16					; size = 4
_bScroll$1$ = -12					; size = 4
tv330 = -8						; size = 4
_bPotion$1$ = -4					; size = 4
_bOtherItem$1$ = 8					; size = 4
_iIndex$ = 8						; size = 4
?ChaosMixItemGet@CIllusionTempleEvent@@QAEHH@Z PROC	; CIllusionTempleEvent::ChaosMixItemGet, COMDAT
; _this$ = ecx

; 1085 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1086 : 	if( OBJMAX_RANGE(iIndex) == FALSE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _iIndex$[ebp]
  00006	83 ec 24	 sub	 esp, 36			; 00000024H
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 88 b2 01 00
	00		 js	 $LN38@ChaosMixIt
  00011	33 c0		 xor	 eax, eax
  00013	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00019	0f 9e c0	 setle	 al
  0001c	85 c0		 test	 eax, eax
  0001e	0f 84 9f 01 00
	00		 je	 $LN38@ChaosMixIt

; 1089 : 	}
; 1090 : 
; 1091 : 	int Empty = FALSE;
; 1092 : 	int bChaos = FALSE;

  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0002a	33 c0		 xor	 eax, eax
  0002c	53		 push	 ebx
  0002d	56		 push	 esi

; 1093 : 	int bScroll = FALSE;

  0002e	33 f6		 xor	 esi, esi
  00030	89 45 ec	 mov	 DWORD PTR _bChaos$1$[ebp], eax
  00033	57		 push	 edi

; 1094 : 	int bPotion = FALSE;

  00034	89 45 fc	 mov	 DWORD PTR _bPotion$1$[ebp], eax

; 1095 : 	int bOtherItem = FALSE;
; 1096 : 	int iItemCount = 0;

  00037	33 ff		 xor	 edi, edi
  00039	89 45 08	 mov	 DWORD PTR _bOtherItem$1$[ebp], eax

; 1097 : 	int iScrollLevel = 0;

  0003c	33 db		 xor	 ebx, ebx
  0003e	69 c1 40 27 00
	00		 imul	 eax, ecx, 10048
  00044	89 75 f4	 mov	 DWORD PTR _bScroll$1$[ebp], esi

; 1098 : 	int iPotionLevel = 0;

  00047	89 75 f0	 mov	 DWORD PTR _iPotionLevel$1$[ebp], esi
  0004a	c7 45 e8 0f 18
	00 00		 mov	 DWORD PTR tv306[ebp], 6159 ; 0000180fH
  00051	c7 45 e4 31 1a
	00 00		 mov	 DWORD PTR tv308[ebp], 6705 ; 00001a31H
  00058	89 45 f8	 mov	 DWORD PTR tv330[ebp], eax
  0005b	c7 45 e0 32 1a
	00 00		 mov	 DWORD PTR tv311[ebp], 6706 ; 00001a32H
  00062	c7 45 dc 35 1c
	00 00		 mov	 DWORD PTR tv314[ebp], 7221 ; 00001c35H
  00069	eb 08		 jmp	 SHORT $LN4@ChaosMixIt
  0006b	0f 1f 44 00 00	 npad	 5
$LL42@ChaosMixIt:
  00070	8b 45 f8	 mov	 eax, DWORD PTR tv330[ebp]
$LN4@ChaosMixIt:

; 1102 : 	{
; 1103 : 		if( gObj[iIndex].pChaosBox[n].IsItem() == TRUE )

  00073	8b 8c 10 10 12
	00 00		 mov	 ecx, DWORD PTR [eax+edx+4624]
  0007a	03 ce		 add	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00081	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00087	83 f8 01	 cmp	 eax, 1
  0008a	75 1c		 jne	 SHORT $LN41@ChaosMixIt

; 1104 : 		{
; 1105 : 			if( gObj[iIndex].pChaosBox[n].m_Type == ITEMGET(12,15) )

  0008c	8b 4d f8	 mov	 ecx, DWORD PTR tv330[ebp]
  0008f	8b 8c 11 10 12
	00 00		 mov	 ecx, DWORD PTR [ecx+edx+4624]
  00096	0f b7 44 31 06	 movzx	 eax, WORD PTR [ecx+esi+6]
  0009b	66 3b 45 e8	 cmp	 ax, WORD PTR tv306[ebp]
  0009f	75 2d		 jne	 SHORT $LN7@ChaosMixIt

; 1106 : 			{
; 1107 : 				bChaos = TRUE;

  000a1	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bChaos$1$[ebp], 1
$LN41@ChaosMixIt:
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _bPotion$1$[ebp]
$LN46@ChaosMixIt:
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _bOtherItem$1$[ebp]
$LN2@ChaosMixIt:

; 1099 : 	int iCharmOfLuckCount = 0;
; 1100 : 
; 1101 : 	for(int n = 0; n < CHAOS_BOX_SIZE; n++)

  000ae	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  000b4	81 fe 80 1a 00
	00		 cmp	 esi, 6784		; 00001a80H
  000ba	7c b4		 jl	 SHORT $LL42@ChaosMixIt

; 1124 : 			{
; 1125 : 				iCharmOfLuckCount += (int)gObj[iIndex].pChaosBox[n].m_Durability;
; 1126 : 			}
; 1127 : 			else
; 1128 : 			{
; 1129 : 				bOtherItem = TRUE;
; 1130 : 			}
; 1131 : 		}
; 1132 : 	}
; 1133 : 
; 1134 : 	if( bOtherItem != FALSE )

  000bc	85 c9		 test	 ecx, ecx
  000be	74 53		 je	 SHORT $LN15@ChaosMixIt

; 1135 : 	{
; 1136 : 		return 8;

  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	b8 08 00 00 00	 mov	 eax, 8
  000c7	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
$LN7@ChaosMixIt:

; 1108 : 			}
; 1109 : 			else if( gObj[iIndex].pChaosBox[n].m_Type == ITEMGET(13,49) )

  000ce	66 3b 45 e4	 cmp	 ax, WORD PTR tv308[ebp]
  000d2	75 0f		 jne	 SHORT $LN9@ChaosMixIt

; 1110 : 			{
; 1111 : 				int iLevel = gObj[iIndex].pChaosBox[n].m_Level;

  000d4	0f bf 5c 31 08	 movsx	 ebx, WORD PTR [ecx+esi+8]

; 1112 : 				iItemCount++;

  000d9	47		 inc	 edi

; 1113 : 				bScroll = TRUE;

  000da	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bScroll$1$[ebp], 1

; 1114 : 				iScrollLevel = iLevel;

  000e1	eb c5		 jmp	 SHORT $LN41@ChaosMixIt
$LN9@ChaosMixIt:

; 1115 : 			}
; 1116 : 			else if( gObj[iIndex].pChaosBox[n].m_Type == ITEMGET(13,50) )

  000e3	66 3b 45 e0	 cmp	 ax, WORD PTR tv311[ebp]
  000e7	75 13		 jne	 SHORT $LN11@ChaosMixIt

; 1117 : 			{
; 1118 : 				int iLevel = gObj[iIndex].pChaosBox[n].m_Level;

  000e9	0f bf 4c 31 08	 movsx	 ecx, WORD PTR [ecx+esi+8]

; 1119 : 				iItemCount++;
; 1120 : 				bPotion = TRUE;

  000ee	b8 01 00 00 00	 mov	 eax, 1
  000f3	47		 inc	 edi
  000f4	89 45 fc	 mov	 DWORD PTR _bPotion$1$[ebp], eax
  000f7	89 4d f0	 mov	 DWORD PTR _iPotionLevel$1$[ebp], ecx

; 1121 : 				iPotionLevel = iLevel;

  000fa	eb af		 jmp	 SHORT $LN46@ChaosMixIt
$LN11@ChaosMixIt:

; 1122 : 			}
; 1123 : 			else if( gObj[iIndex].pChaosBox[n].m_Type == ITEMGET(14,53) )

  000fc	66 3b 45 dc	 cmp	 ax, WORD PTR tv314[ebp]
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	8b 4d 08	 mov	 ecx, DWORD PTR _bOtherItem$1$[ebp]
  00108	0f 45 c8	 cmovne	 ecx, eax
  0010b	8b 45 fc	 mov	 eax, DWORD PTR _bPotion$1$[ebp]
  0010e	89 4d 08	 mov	 DWORD PTR _bOtherItem$1$[ebp], ecx
  00111	eb 9b		 jmp	 SHORT $LN2@ChaosMixIt
$LN15@ChaosMixIt:

; 1137 : 	}
; 1138 : 
; 1139 : 	if( bScroll == FALSE && bPotion == FALSE )

  00113	8b 75 f4	 mov	 esi, DWORD PTR _bScroll$1$[ebp]
  00116	85 f6		 test	 esi, esi
  00118	75 11		 jne	 SHORT $LN37@ChaosMixIt
  0011a	85 c0		 test	 eax, eax
  0011c	0f 85 93 00 00
	00		 jne	 $LN18@ChaosMixIt
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c2 04 00	 ret	 4
$LN37@ChaosMixIt:

; 1140 : 	{
; 1141 : 		return 0;
; 1142 : 	}
; 1143 : 
; 1144 : 	if( bScroll == FALSE || bPotion == FALSE )

  0012b	85 c0		 test	 eax, eax
  0012d	0f 84 82 00 00
	00		 je	 $LN18@ChaosMixIt

; 1147 : 	}
; 1148 : 
; 1149 : 	if( iItemCount > 2 )

  00133	83 ff 02	 cmp	 edi, 2
  00136	7e 0e		 jle	 SHORT $LN19@ChaosMixIt

; 1150 : 	{
; 1151 : 		return 12;

  00138	5f		 pop	 edi
  00139	5e		 pop	 esi
  0013a	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH
  0013f	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 04 00	 ret	 4
$LN19@ChaosMixIt:

; 1152 : 	}
; 1153 : 
; 1154 : 	if( iScrollLevel != iPotionLevel )

  00146	8b 75 f0	 mov	 esi, DWORD PTR _iPotionLevel$1$[ebp]
  00149	3b de		 cmp	 ebx, esi
  0014b	75 5a		 jne	 SHORT $LN39@ChaosMixIt

; 1155 : 	{
; 1156 : 		return 9;
; 1157 : 	}
; 1158 : 
; 1159 : 	if( IT_TEMPLE_RANGE( iScrollLevel - 1 ) == FALSE )

  0014d	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00150	85 c9		 test	 ecx, ecx
  00152	78 53		 js	 SHORT $LN39@ChaosMixIt
  00154	33 c0		 xor	 eax, eax
  00156	83 f9 05	 cmp	 ecx, 5
  00159	0f 9e c0	 setle	 al
  0015c	85 c0		 test	 eax, eax
  0015e	74 47		 je	 SHORT $LN39@ChaosMixIt

; 1162 : 	}
; 1163 : 
; 1164 : 	if( IT_TEMPLE_RANGE( iPotionLevel - 1 ) == FALSE )

  00160	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  00163	85 c9		 test	 ecx, ecx
  00165	78 40		 js	 SHORT $LN39@ChaosMixIt
  00167	33 c0		 xor	 eax, eax
  00169	83 f9 05	 cmp	 ecx, 5
  0016c	0f 9e c0	 setle	 al
  0016f	85 c0		 test	 eax, eax
  00171	74 34		 je	 SHORT $LN39@ChaosMixIt

; 1165 : 	{
; 1166 : 		return 9;
; 1167 : 	}
; 1168 : 
; 1169 : 	if( bChaos == FALSE )

  00173	8b 45 ec	 mov	 eax, DWORD PTR _bChaos$1$[ebp]
  00176	85 c0		 test	 eax, eax
  00178	75 0e		 jne	 SHORT $LN23@ChaosMixIt

; 1170 : 	{
; 1171 : 		return 10;

  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  00181	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  00182	8b e5		 mov	 esp, ebp
  00184	5d		 pop	 ebp
  00185	c2 04 00	 ret	 4
$LN23@ChaosMixIt:

; 1172 : 	}
; 1173 : 
; 1174 : 	if( gObj[iIndex].Level < 10 )

  00188	8b 45 f8	 mov	 eax, DWORD PTR tv330[ebp]
  0018b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	66 83 bc 10 96
	00 00 00 0a	 cmp	 WORD PTR [eax+edx+150], 10 ; 0000000aH
  0019b	0f 4c d9	 cmovl	 ebx, ecx
  0019e	8b c3		 mov	 eax, ebx
  001a0	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 04 00	 ret	 4
$LN39@ChaosMixIt:
  001a7	5f		 pop	 edi
  001a8	5e		 pop	 esi

; 1160 : 	{
; 1161 : 		return 9;

  001a9	b8 09 00 00 00	 mov	 eax, 9
  001ae	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  001af	8b e5		 mov	 esp, ebp
  001b1	5d		 pop	 ebp
  001b2	c2 04 00	 ret	 4
$LN18@ChaosMixIt:
  001b5	5f		 pop	 edi
  001b6	5e		 pop	 esi

; 1145 : 	{
; 1146 : 		return 11;

  001b7	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  001bc	5b		 pop	 ebx

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 04 00	 ret	 4
$LN38@ChaosMixIt:

; 1087 : 	{
; 1088 : 		return FALSE;

  001c3	33 c0		 xor	 eax, eax

; 1175 : 	{
; 1176 : 		return 14;
; 1177 : 	}
; 1178 : 
; 1179 : 	if( bChaos != FALSE && bScroll != FALSE && bPotion != FALSE )
; 1180 : 	{
; 1181 : 		return iScrollLevel;
; 1182 : 	}
; 1183 : 
; 1184 : return FALSE;
; 1185 : }

  001c5	8b e5		 mov	 esp, ebp
  001c7	5d		 pop	 ebp
  001c8	c2 04 00	 ret	 4
?ChaosMixItemGet@CIllusionTempleEvent@@QAEHH@Z ENDP	; CIllusionTempleEvent::ChaosMixItemGet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ChaosMix@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -24					; size = 4
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ChaosMix@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::ChaosMix, COMDAT
; _this$ = ecx

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]

; 647  : 	lpObj->ChaosLock = TRUE;
; 648  : 
; 649  : 	PMSG_CHAOSMIXRESULT pMsg;
; 650  : 	PHeadSetB((LPBYTE)&pMsg,0x86,sizeof(pMsg));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	8b d9		 mov	 ebx, ecx
  0001d	68 86 00 00 00	 push	 134			; 00000086H
  00022	50		 push	 eax
  00023	89 5d e8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00026	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  00030	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 651  : 
; 652  : 	pMsg.Result = 0;
; 653  : 	int iIndex = lpObj->m_Index;

  00035	8b 3e		 mov	 edi, DWORD PTR [esi]
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 654  : 	int iLuckCharmCount = 0;
; 655  : 
; 656  : 	int iItemResult = ChaosMixItemGet(iIndex);

  0003a	8b cb		 mov	 ecx, ebx
  0003c	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  00040	57		 push	 edi
  00041	e8 00 00 00 00	 call	 ?ChaosMixItemGet@CIllusionTempleEvent@@QAEHH@Z ; CIllusionTempleEvent::ChaosMixItemGet

; 657  : 	iLuckCharmCount = CharmOfLuckCount(iIndex);

  00046	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00049	8b d8		 mov	 ebx, eax
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ?CharmOfLuckCount@CIllusionTempleEvent@@QAEHH@Z ; CIllusionTempleEvent::CharmOfLuckCount
  00051	8b c8		 mov	 ecx, eax

; 658  : 
; 659  : 	if( iLuckCharmCount > 10 )

  00053	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  00058	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0005b	0f 4f d8	 cmovg	 ebx, eax

; 660  : 	{
; 661  : 		iItemResult = 15;
; 662  : 	}
; 663  : 
; 664  : 	if( IT_MAP_RANGE( iItemResult + (MAP_INDEX_ILLUSIONTEMPLE1 - 1) ) != FALSE )

  0005e	8d 53 2c	 lea	 edx, DWORD PTR [ebx+44]
  00061	83 fa 2d	 cmp	 edx, 45			; 0000002dH
  00064	7c 1b		 jl	 SHORT $LN6@ChaosMix
  00066	33 c0		 xor	 eax, eax
  00068	83 fa 32	 cmp	 edx, 50			; 00000032H
  0006b	0f 9e c0	 setle	 al
  0006e	85 c0		 test	 eax, eax
  00070	74 0f		 je	 SHORT $LN6@ChaosMix

; 665  : 	{
; 666  : 		if( TicketMix(iIndex,iItemResult,iLuckCharmCount) == FALSE )

  00072	51		 push	 ecx
  00073	8b 4d e8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00076	53		 push	 ebx
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 ?TicketMix@CIllusionTempleEvent@@QAEEHHH@Z ; CIllusionTempleEvent::TicketMix
  0007d	84 c0		 test	 al, al
  0007f	74 3d		 je	 SHORT $LN14@ChaosMix
$LN6@ChaosMix:

; 667  : 		{
; 668  : 			lpObj->ChaosLock = FALSE;
; 669  : 			return;
; 670  : 		}
; 671  : 	}
; 672  : 
; 673  : 	switch( iItemResult )

  00081	8d 43 f7	 lea	 eax, DWORD PTR [ebx-9]
  00084	83 f8 06	 cmp	 eax, 6
  00087	77 35		 ja	 SHORT $LN14@ChaosMix
  00089	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN20@ChaosMix[eax*4]
$LN7@ChaosMix:

; 674  : 	{
; 675  : 	case 9:
; 676  : 		pMsg.Result = 10;

  00090	c6 45 ef 0a	 mov	 BYTE PTR _pMsg$[ebp+3], 10 ; 0000000aH

; 677  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 678  : 		lpObj->ChaosLock = FALSE;
; 679  : 		break;

  00094	eb 16		 jmp	 SHORT $LN18@ChaosMix
$LN10@ChaosMix:

; 680  : 	case 10:
; 681  : 		pMsg.Result = 10;
; 682  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 683  : 		lpObj->ChaosLock = FALSE;
; 684  : 		break;
; 685  : 	case 11:
; 686  : 		pMsg.Result = 10;
; 687  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 688  : 		lpObj->ChaosLock = FALSE;
; 689  : 		break;
; 690  : 	case 12:
; 691  : 		pMsg.Result = 8;

  00096	c6 45 ef 08	 mov	 BYTE PTR _pMsg$[ebp+3], 8

; 692  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 693  : 		lpObj->ChaosLock = FALSE;
; 694  : 		break;

  0009a	eb 10		 jmp	 SHORT $LN18@ChaosMix
$LN11@ChaosMix:

; 695  : 	case 13:
; 696  : 		pMsg.Result = 11;

  0009c	c6 45 ef 0b	 mov	 BYTE PTR _pMsg$[ebp+3], 11 ; 0000000bH

; 697  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 698  : 		lpObj->ChaosLock = FALSE;
; 699  : 		break;

  000a0	eb 0a		 jmp	 SHORT $LN18@ChaosMix
$LN12@ChaosMix:

; 700  : 	case 14:
; 701  : 		pMsg.Result = 9;

  000a2	c6 45 ef 09	 mov	 BYTE PTR _pMsg$[ebp+3], 9

; 702  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 703  : 		lpObj->ChaosLock = FALSE;
; 704  : 		break;

  000a6	eb 04		 jmp	 SHORT $LN18@ChaosMix
$LN13@ChaosMix:

; 705  : 	case 15:
; 706  : 		pMsg.Result = 0xF0;

  000a8	c6 45 ef f0	 mov	 BYTE PTR _pMsg$[ebp+3], 240 ; 000000f0H
$LN18@ChaosMix:

; 707  : 		DataSend(iIndex,(LPBYTE)&pMsg,pMsg.h.size);

  000ac	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000b0	50		 push	 eax
  000b1	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000b4	50		 push	 eax
  000b5	57		 push	 edi
  000b6	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@ChaosMix:

; 708  : 		lpObj->ChaosLock = FALSE;
; 709  : 		break;
; 710  : 	default:
; 711  : 		lpObj->ChaosLock = FALSE;
; 712  : 		break;
; 713  : 	}
; 714  : }

  000be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c1	5f		 pop	 edi
  000c2	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  000cc	33 cd		 xor	 ecx, ebp
  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 04 00	 ret	 4
  000db	90		 npad	 1
$LN20@ChaosMix:
  000dc	00 00 00 00	 DD	 $LN7@ChaosMix
  000e0	00 00 00 00	 DD	 $LN7@ChaosMix
  000e4	00 00 00 00	 DD	 $LN7@ChaosMix
  000e8	00 00 00 00	 DD	 $LN10@ChaosMix
  000ec	00 00 00 00	 DD	 $LN11@ChaosMix
  000f0	00 00 00 00	 DD	 $LN12@ChaosMix
  000f4	00 00 00 00	 DD	 $LN13@ChaosMix
?ChaosMix@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::ChaosMix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetTeam@CIllusionTempleEvent@@QAEEEH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_aIndex$ = 12						; size = 4
?GetTeam@CIllusionTempleEvent@@QAEEEH@Z PROC		; CIllusionTempleEvent::GetTeam, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 637  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 27		 js	 SHORT $LN6@GetTeam
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 1b		 je	 SHORT $LN6@GetTeam

; 640  : 	}
; 641  : 
; 642  : 	return m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].GetTeam(aIndex);

  0001b	ff 75 0c	 push	 DWORD PTR _aIndex$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	03 c8		 add	 ecx, eax
  0002c	e8 00 00 00 00	 call	 ?GetTeam@CIllusionTempleProcess@@QAEEH@Z ; CIllusionTempleProcess::GetTeam
  00031	5e		 pop	 esi

; 643  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN6@GetTeam:

; 638  : 	{
; 639  : 		return -1;

  00036	0c ff		 or	 al, 255			; 000000ffH
  00038	5e		 pop	 esi

; 643  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?GetTeam@CIllusionTempleEvent@@QAEEEH@Z ENDP		; CIllusionTempleEvent::GetTeam
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ResetObject@CIllusionTempleEvent@@QAEXXZ
_TEXT	SEGMENT
?ResetObject@CIllusionTempleEvent@@QAEXXZ PROC		; CIllusionTempleEvent::ResetObject, COMDAT
; _this$ = ecx

; 628  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 629  : 	for(int i = 0; i < IT_MAXTEMPLE; i++)

  00002	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  00005	bf 06 00 00 00	 mov	 edi, 6
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ResetObjec:

; 630  : 	{
; 631  : 		m_TempleData[i].ResetObject();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?ResetObject@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::ResetObject
  00017	81 c6 ec 03 00
	00		 add	 esi, 1004		; 000003ecH
  0001d	83 ef 01	 sub	 edi, 1
  00020	75 ee		 jne	 SHORT $LL4@ResetObjec

; 632  : 	}
; 633  : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
?ResetObject@CIllusionTempleEvent@@QAEXXZ ENDP		; CIllusionTempleEvent::ResetObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?AddMonster@CIllusionTempleEvent@@QAEXEHH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_Class$ = 12						; size = 4
_Number$ = 16						; size = 4
?AddMonster@CIllusionTempleEvent@@QAEXEHH@Z PROC	; CIllusionTempleEvent::AddMonster, COMDAT
; _this$ = ecx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 619  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 25		 js	 SHORT $LN1@AddMonster
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $LN1@AddMonster

; 620  : 	{
; 621  : 		return;
; 622  : 	}
; 623  : 
; 624  : 	m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].AddMonster(Class,Number);

  0001b	ff 75 10	 push	 DWORD PTR _Number$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	ff 75 0c	 push	 DWORD PTR _Class$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?AddMonster@CIllusionTempleProcess@@QAEXHH@Z ; CIllusionTempleProcess::AddMonster
$LN1@AddMonster:
  00034	5e		 pop	 esi

; 625  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?AddMonster@CIllusionTempleEvent@@QAEXEHH@Z ENDP	; CIllusionTempleEvent::AddMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?AddNpc@CIllusionTempleEvent@@QAEXEHH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_Class$ = 12						; size = 4
_Number$ = 16						; size = 4
?AddNpc@CIllusionTempleEvent@@QAEXEHH@Z PROC		; CIllusionTempleEvent::AddNpc, COMDAT
; _this$ = ecx

; 608  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 609  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 25		 js	 SHORT $LN1@AddNpc
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $LN1@AddNpc

; 610  : 	{
; 611  : 		return;
; 612  : 	}
; 613  : 
; 614  : 	m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].AddNpc(Class,Number);

  0001b	ff 75 10	 push	 DWORD PTR _Number$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	ff 75 0c	 push	 DWORD PTR _Class$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?AddNpc@CIllusionTempleProcess@@QAEXHH@Z ; CIllusionTempleProcess::AddNpc
$LN1@AddNpc:
  00034	5e		 pop	 esi

; 615  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?AddNpc@CIllusionTempleEvent@@QAEXEHH@Z ENDP		; CIllusionTempleEvent::AddNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetState@CIllusionTempleEvent@@QAEEE@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
?GetState@CIllusionTempleEvent@@QAEEE@Z PROC		; CIllusionTempleEvent::GetState, COMDAT
; _this$ = ecx

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 604  : 	return m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].GetState();

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _MapNumber$[ebp]
  00007	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0000d	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  00013	03 c8		 add	 ecx, eax
  00015	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState

; 605  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetState@CIllusionTempleEvent@@QAEEE@Z ENDP		; CIllusionTempleEvent::GetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?DropRelic@CIllusionTempleEvent@@QAEXEH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_aIndex$ = 12						; size = 4
?DropRelic@CIllusionTempleEvent@@QAEXEH@Z PROC		; CIllusionTempleEvent::DropRelic, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 594  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 22		 js	 SHORT $LN1@DropRelic
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 16		 je	 SHORT $LN1@DropRelic

; 595  : 	{
; 596  : 		return;
; 597  : 	}
; 598  : 
; 599  : 	m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].DropRelic(aIndex);

  0001b	ff 75 0c	 push	 DWORD PTR _aIndex$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	03 c8		 add	 ecx, eax
  0002c	e8 00 00 00 00	 call	 ?DropRelic@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::DropRelic
$LN1@DropRelic:
  00031	5e		 pop	 esi

; 600  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?DropRelic@CIllusionTempleEvent@@QAEXEH@Z ENDP		; CIllusionTempleEvent::DropRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?DeleteRelic@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_lpObj$ = 12						; size = 4
?DeleteRelic@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::DeleteRelic, COMDAT
; _this$ = ecx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 584  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 22		 js	 SHORT $LN1@DeleteReli
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 16		 je	 SHORT $LN1@DeleteReli

; 585  : 	{
; 586  : 		return;
; 587  : 	}
; 588  : 
; 589  : 	m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].DeleteRelic(lpObj);

  0001b	ff 75 0c	 push	 DWORD PTR _lpObj$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	03 c8		 add	 ecx, eax
  0002c	e8 00 00 00 00	 call	 ?DeleteRelic@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::DeleteRelic
$LN1@DeleteReli:
  00031	5e		 pop	 esi

; 590  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?DeleteRelic@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::DeleteRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ClickEnterNpc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_pMsg$ = -16						; size = 11
__$ArrayPad$ = -4					; size = 4
_lpNpc$ = 8						; size = 4
_lpObj$ = 12						; size = 4
?ClickEnterNpc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleEvent::ClickEnterNpc, COMDAT
; _this$ = ecx

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 0c	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00014	8b d1		 mov	 edx, ecx

; 480  : 	if( lpObj->m_IfState.use != 0 && lpObj->m_IfState.type != 12 )

  00016	8b 86 b8 11 00
	00		 mov	 eax, DWORD PTR [esi+4536]
  0001c	a8 03		 test	 al, 3
  0001e	74 10		 je	 SHORT $LN2@ClickEnter
  00020	25 c0 ff 00 00	 and	 eax, 65472		; 0000ffc0H
  00025	3d 00 03 00 00	 cmp	 eax, 768		; 00000300H
  0002a	0f 85 51 01 00
	00		 jne	 $LN1@ClickEnter
$LN2@ClickEnter:

; 481  : 	{
; 482  : 		return;
; 483  : 	}
; 484  : 
; 485  : #if (ENABLE_FIX_NPCTALKPK == 1)
; 486  : 	if( lpObj->m_PK_Level >= 4 )

  00030	80 be 19 01 00
	00 04		 cmp	 BYTE PTR [esi+281], 4
  00037	7c 2d		 jl	 SHORT $LN3@ClickEnter

; 487  : 	{
; 488  : 		GCServerMsgStringSend(lMsg.Get(MSGGET(13,72)),lpObj->m_Index,1);

  00039	6a 01		 push	 1
  0003b	ff 36		 push	 DWORD PTR [esi]
  0003d	68 48 0d 00 00	 push	 3400			; 00000d48H
$LN35@ClickEnter:
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00047	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	5e		 pop	 esi

; 575  : }

  00056	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00059	33 cd		 xor	 ecx, ebp
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN3@ClickEnter:

; 489  : 		return;
; 490  : 	}
; 491  : #endif
; 492  : 
; 493  : 	int iTemple = -1;
; 494  : 
; 495  : 	if( lpObj->Level < 220 )

  00066	0f b7 86 96 00
	00 00		 movzx	 eax, WORD PTR [esi+150]
  0006d	b9 dc 00 00 00	 mov	 ecx, 220		; 000000dcH
  00072	66 3b c1	 cmp	 ax, cx
  00075	0f 8c 44 01 00
	00		 jl	 $LN30@ClickEnter

; 496  : 	{
; 497  : 		iTemple = -1;
; 498  : 	}
; 499  : 	else if(lpObj->Level < 271)

  0007b	b9 0f 01 00 00	 mov	 ecx, 271		; 0000010fH
  00080	66 3b c1	 cmp	 ax, cx
  00083	7d 04		 jge	 SHORT $LN6@ClickEnter

; 500  : 	{
; 501  : 		iTemple = 0;

  00085	33 c9		 xor	 ecx, ecx
  00087	eb 7a		 jmp	 SHORT $LN20@ClickEnter
$LN6@ClickEnter:

; 502  : 	}
; 503  : 	else if(lpObj->Level < 321)

  00089	b9 41 01 00 00	 mov	 ecx, 321		; 00000141H
  0008e	66 3b c1	 cmp	 ax, cx
  00091	7d 07		 jge	 SHORT $LN8@ClickEnter

; 504  : 	{
; 505  : 		iTemple = 1;

  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	eb 69		 jmp	 SHORT $LN20@ClickEnter
$LN8@ClickEnter:

; 506  : 	}
; 507  : 	else if(lpObj->Level < 351)

  0009a	b9 5f 01 00 00	 mov	 ecx, 351		; 0000015fH
  0009f	66 3b c1	 cmp	 ax, cx
  000a2	7d 07		 jge	 SHORT $LN10@ClickEnter

; 508  : 	{
; 509  : 		iTemple = 2;

  000a4	b9 02 00 00 00	 mov	 ecx, 2
  000a9	eb 58		 jmp	 SHORT $LN20@ClickEnter
$LN10@ClickEnter:

; 510  : 	}
; 511  : 	else if(lpObj->Level < 381)

  000ab	b9 7d 01 00 00	 mov	 ecx, 381		; 0000017dH
  000b0	66 3b c1	 cmp	 ax, cx
  000b3	7d 07		 jge	 SHORT $LN12@ClickEnter

; 512  : 	{
; 513  : 		iTemple = 3;

  000b5	b9 03 00 00 00	 mov	 ecx, 3
  000ba	eb 47		 jmp	 SHORT $LN20@ClickEnter
$LN12@ClickEnter:

; 514  : 	}
; 515  : 	else if(lpObj->Level < 400)

  000bc	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  000c1	66 3b c1	 cmp	 ax, cx
  000c4	7d 07		 jge	 SHORT $LN32@ClickEnter

; 516  : 	{
; 517  : 		iTemple = 4;

  000c6	b9 04 00 00 00	 mov	 ecx, 4
  000cb	eb 36		 jmp	 SHORT $LN20@ClickEnter
$LN32@ClickEnter:

; 518  : 	}
; 519  : 	else if( lpObj->Level == 400 && lpObj->ChangeUP2 == FALSE)

  000cd	75 10		 jne	 SHORT $LN16@ClickEnter
  000cf	80 be 94 00 00
	00 00		 cmp	 BYTE PTR [esi+148], 0
  000d6	75 07		 jne	 SHORT $LN16@ClickEnter

; 520  : 	{
; 521  : 		iTemple = 4;

  000d8	b9 04 00 00 00	 mov	 ecx, 4
  000dd	eb 24		 jmp	 SHORT $LN20@ClickEnter
$LN16@ClickEnter:

; 522  : 	}
; 523  : 	else if( lpObj->Level == 400 && lpObj->ChangeUP2 != FALSE )

  000df	66 3b c1	 cmp	 ax, cx
  000e2	0f 85 d7 00 00
	00		 jne	 $LN30@ClickEnter
  000e8	80 be 94 00 00
	00 00		 cmp	 BYTE PTR [esi+148], 0
  000ef	0f 84 ca 00 00
	00		 je	 $LN30@ClickEnter

; 524  : 	{
; 525  : 		if( g_bMaxLevelIllusion != 0 )

  000f5	33 c9		 xor	 ecx, ecx
  000f7	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?g_bMaxLevelIllusion@@3HA, ecx ; g_bMaxLevelIllusion
  000fd	0f 95 c1	 setne	 cl
  00100	83 c1 04	 add	 ecx, 4
$LN20@ClickEnter:

; 526  : 		{
; 527  : 			iTemple = 5;
; 528  : 		}
; 529  : 		else
; 530  : 		{
; 531  : 			iTemple = 4;
; 532  : 		}
; 533  : 	}
; 534  : 	else
; 535  : 	{
; 536  : 		iTemple = -1;
; 537  : 	}
; 538  : 
; 539  : 	if( IT_TEMPLE_RANGE( iTemple ) == FALSE )

  00103	33 c0		 xor	 eax, eax
  00105	83 f9 05	 cmp	 ecx, 5
  00108	0f 9e c0	 setle	 al
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 ac 00 00
	00		 je	 $LN30@ClickEnter

; 542  : 		return;
; 543  : 	}
; 544  : 
; 545  : 	int EnterItem = m_TempleData[iTemple].GetEnterItem(lpObj->m_Index);

  00113	69 c1 ec 03 00
	00		 imul	 eax, ecx, 1004
  00119	57		 push	 edi
  0011a	ff 36		 push	 DWORD PTR [esi]
  0011c	8d 7a 08	 lea	 edi, DWORD PTR [edx+8]
  0011f	03 f8		 add	 edi, eax
  00121	8b cf		 mov	 ecx, edi
  00123	e8 00 00 00 00	 call	 ?GetEnterItem@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::GetEnterItem

; 546  : 
; 547  : 	if( EnterItem == -1 )

  00128	83 f8 ff	 cmp	 eax, -1
  0012b	75 0b		 jne	 SHORT $LN23@ClickEnter

; 548  : 	{
; 549  : 		GCServerMsgStringSend(lMsg.Get(MSGGET(13,74)),lpObj->m_Index,1);

  0012d	6a 01		 push	 1
  0012f	ff 36		 push	 DWORD PTR [esi]
  00131	68 4a 0d 00 00	 push	 3402			; 00000d4aH

; 550  : 		return;

  00136	eb 35		 jmp	 SHORT $LN33@ClickEnter
$LN23@ClickEnter:

; 551  : 	}
; 552  : 
; 553  : 	if( m_TempleData[iTemple].GetState() != IT_STATE_CLOSED )

  00138	8b cf		 mov	 ecx, edi
  0013a	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  0013f	84 c0		 test	 al, al
  00141	74 0b		 je	 SHORT $LN24@ClickEnter

; 554  : 	{
; 555  : 		GCServerMsgStringSend(lMsg.Get(MSGGET(13,75)),lpObj->m_Index,1);

  00143	6a 01		 push	 1
  00145	ff 36		 push	 DWORD PTR [esi]
  00147	68 4b 0d 00 00	 push	 3403			; 00000d4bH

; 556  : 		return;

  0014c	eb 1f		 jmp	 SHORT $LN33@ClickEnter
$LN24@ClickEnter:

; 557  : 	}
; 558  : 
; 559  : 	if( m_TempleData[iTemple].GetState() == IT_STATE_CLOSED && m_TempleData[iTemple].OpenState() == FALSE )

  0014e	8b cf		 mov	 ecx, edi
  00150	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  00155	84 c0		 test	 al, al
  00157	75 39		 jne	 SHORT $LN25@ClickEnter
  00159	8b cf		 mov	 ecx, edi
  0015b	e8 00 00 00 00	 call	 ?OpenState@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::OpenState
  00160	85 c0		 test	 eax, eax
  00162	75 2e		 jne	 SHORT $LN25@ClickEnter

; 560  : 	{
; 561  : 		GCServerMsgStringSend(lMsg.Get(MSGGET(13,76)),lpObj->m_Index,1);

  00164	6a 01		 push	 1
  00166	ff 36		 push	 DWORD PTR [esi]
  00168	68 4c 0d 00 00	 push	 3404			; 00000d4cH
$LN33@ClickEnter:
  0016d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00172	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
$LN34@ClickEnter:
  0017d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00180	5f		 pop	 edi
$LN1@ClickEnter:

; 575  : }

  00181	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00184	33 cd		 xor	 ecx, ebp
  00186	5e		 pop	 esi
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 08 00	 ret	 8
$LN25@ClickEnter:

; 562  : 		return;
; 563  : 	}
; 564  : 
; 565  : 	PMSG_TALKRESULT pMsg;
; 566  : 
; 567  : 	pMsg.h.c = 0xC3;
; 568  : 	pMsg.h.headcode = 0x30;
; 569  : 	pMsg.h.size = sizeof(pMsg);
; 570  : 	pMsg.result = 0x14;
; 571  : 	pMsg.level1 = m_TempleData[iTemple].GetRemainTime();

  00192	8b cf		 mov	 ecx, edi
  00194	c7 45 f0 c3 0b
	30 14		 mov	 DWORD PTR _pMsg$[ebp], 338693059 ; 14300bc3H
  0019b	e8 00 00 00 00	 call	 ?GetRemainTime@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetRemainTime

; 572  : 	pMsg.level2 = m_TempleData[iTemple].GetUserCount();

  001a0	8b cf		 mov	 ecx, edi
  001a2	88 45 f4	 mov	 BYTE PTR _pMsg$[ebp+4], al
  001a5	e8 00 00 00 00	 call	 ?GetUserCount@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetUserCount
  001aa	88 45 f5	 mov	 BYTE PTR _pMsg$[ebp+5], al

; 573  : 
; 574  : 	DataSend(lpObj->m_Index,(LPBYTE)&pMsg,pMsg.h.size);

  001ad	0f b6 45 f1	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001b1	50		 push	 eax
  001b2	8d 45 f0	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001b5	50		 push	 eax
  001b6	ff 36		 push	 DWORD PTR [esi]
  001b8	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001bd	eb be		 jmp	 SHORT $LN34@ClickEnter
$LN30@ClickEnter:

; 540  : 	{
; 541  : 		GCServerMsgStringSend(lMsg.Get(MSGGET(13,73)),lpObj->m_Index,1);

  001bf	6a 01		 push	 1
  001c1	ff 36		 push	 DWORD PTR [esi]
  001c3	68 49 0d 00 00	 push	 3401			; 00000d49H
  001c8	e9 75 fe ff ff	 jmp	 $LN35@ClickEnter
?ClickEnterNpc@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleEvent::ClickEnterNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ClickIllusionNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_lpNpc$ = 12						; size = 4
_lpObj$ = 16						; size = 4
?ClickIllusionNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleEvent::ClickIllusionNpc, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 470  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 25		 js	 SHORT $LN1@ClickIllus
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $LN1@ClickIllus

; 471  : 	{
; 472  : 		return;
; 473  : 	}
; 474  : 
; 475  : 	m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].ClickIllusionNpc(lpNpc,lpObj);

  0001b	ff 75 10	 push	 DWORD PTR _lpObj$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	ff 75 0c	 push	 DWORD PTR _lpNpc$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?ClickIllusionNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::ClickIllusionNpc
$LN1@ClickIllus:
  00034	5e		 pop	 esi

; 476  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?ClickIllusionNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleEvent::ClickIllusionNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ClickAlliedNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_lpNpc$ = 12						; size = 4
_lpObj$ = 16						; size = 4
?ClickAlliedNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleEvent::ClickAlliedNpc, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 460  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 25		 js	 SHORT $LN1@ClickAllie
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $LN1@ClickAllie

; 461  : 	{
; 462  : 		return;
; 463  : 	}
; 464  : 
; 465  : 	m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].ClickAlliedNpc(lpNpc,lpObj);

  0001b	ff 75 10	 push	 DWORD PTR _lpObj$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	ff 75 0c	 push	 DWORD PTR _lpNpc$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?ClickAlliedNpc@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::ClickAlliedNpc
$LN1@ClickAllie:
  00034	5e		 pop	 esi

; 466  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?ClickAlliedNpc@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleEvent::ClickAlliedNpc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?ClickToStatus@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_lpNpc$ = 12						; size = 4
_lpObj$ = 16						; size = 4
?ClickToStatus@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z PROC ; CIllusionTempleEvent::ClickToStatus, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 450  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 25		 js	 SHORT $LN1@ClickToSta
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $LN1@ClickToSta

; 451  : 	{
; 452  : 		return;
; 453  : 	}
; 454  : 
; 455  : 	m_TempleData[MapNumber-MAP_INDEX_ILLUSIONTEMPLE1].ClickToStatus(lpNpc,lpObj);

  0001b	ff 75 10	 push	 DWORD PTR _lpObj$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	ff 75 0c	 push	 DWORD PTR _lpNpc$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?ClickToStatus@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@0@Z ; CIllusionTempleProcess::ClickToStatus
$LN1@ClickToSta:
  00034	5e		 pop	 esi

; 456  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?ClickToStatus@CIllusionTempleEvent@@QAEXEPAUOBJECTSTRUCT@@0@Z ENDP ; CIllusionTempleEvent::ClickToStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetEnterLevel@CIllusionTempleEvent@@QAEHH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
?GetEnterLevel@CIllusionTempleEvent@@QAEHH@Z PROC	; CIllusionTempleEvent::GetEnterLevel, COMDAT
; _this$ = ecx

; 1019 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1020 : 	int TempleLevel = 0;
; 1021 : 	LPOBJ lpObj = &gObj[aIndex];

  00003	8b 55 08	 mov	 edx, DWORD PTR _aIndex$[ebp]
  00006	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048
  0000c	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1022 : 
; 1023 : 	if( OBJMAX_RANGE( aIndex ) == FALSE )

  00012	85 d2		 test	 edx, edx
  00014	0f 88 b4 00 00
	00		 js	 $LN18@GetEnterLe
  0001a	33 c0		 xor	 eax, eax
  0001c	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  00022	0f 9e c0	 setle	 al
  00025	85 c0		 test	 eax, eax
  00027	0f 84 a1 00 00
	00		 je	 $LN18@GetEnterLe

; 1027 : 	}
; 1028 : 
; 1029 : 	if( lpObj->Level < 220 )

  0002d	0f b7 81 96 00
	00 00		 movzx	 eax, WORD PTR [ecx+150]
  00034	ba dc 00 00 00	 mov	 edx, 220		; 000000dcH
  00039	66 3b c2	 cmp	 ax, dx
  0003c	7d 06		 jge	 SHORT $LN3@GetEnterLe

; 1030 : 	{
; 1031 : 		return 0;

  0003e	33 c0		 xor	 eax, eax

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN3@GetEnterLe:

; 1032 : 	}
; 1033 : 
; 1034 : 	if( lpObj->Level < 271 )

  00044	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  00049	66 3b c2	 cmp	 ax, dx
  0004c	7d 09		 jge	 SHORT $LN4@GetEnterLe

; 1035 : 	{
; 1036 : 		return 1;

  0004e	b8 01 00 00 00	 mov	 eax, 1

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN4@GetEnterLe:

; 1037 : 	}
; 1038 : 
; 1039 : 	if( lpObj->Level < 321 )

  00057	ba 41 01 00 00	 mov	 edx, 321		; 00000141H
  0005c	66 3b c2	 cmp	 ax, dx
  0005f	7d 09		 jge	 SHORT $LN5@GetEnterLe

; 1040 : 	{
; 1041 : 		return 2;

  00061	b8 02 00 00 00	 mov	 eax, 2

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
$LN5@GetEnterLe:

; 1042 : 	}
; 1043 : 
; 1044 : 	if( lpObj->Level < 351 )

  0006a	ba 5f 01 00 00	 mov	 edx, 351		; 0000015fH
  0006f	66 3b c2	 cmp	 ax, dx
  00072	7d 09		 jge	 SHORT $LN6@GetEnterLe

; 1045 : 	{
; 1046 : 		return 3;

  00074	b8 03 00 00 00	 mov	 eax, 3

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
$LN6@GetEnterLe:

; 1047 : 	}
; 1048 : 
; 1049 : 	if( lpObj->Level < 381 )

  0007d	ba 7d 01 00 00	 mov	 edx, 381		; 0000017dH
  00082	66 3b c2	 cmp	 ax, dx
  00085	7d 09		 jge	 SHORT $LN7@GetEnterLe

; 1050 : 	{
; 1051 : 		return 4;

  00087	b8 04 00 00 00	 mov	 eax, 4

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN7@GetEnterLe:

; 1052 : 	}
; 1053 : 
; 1054 : 	if( lpObj->Level < 400 )

  00090	ba 90 01 00 00	 mov	 edx, 400		; 00000190H
  00095	66 3b c2	 cmp	 ax, dx
  00098	7d 09		 jge	 SHORT $LN19@GetEnterLe
$LN20@GetEnterLe:

; 1055 : 	{
; 1056 : 		return 5;

  0009a	b8 05 00 00 00	 mov	 eax, 5

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
$LN19@GetEnterLe:

; 1057 : 	}
; 1058 : 
; 1059 : 	if( lpObj->Level == 400 )

  000a3	75 09		 jne	 SHORT $LN10@GetEnterLe

; 1060 : 	{
; 1061 : 		if( lpObj->ChangeUP == FALSE )

  000a5	80 b9 93 00 00
	00 00		 cmp	 BYTE PTR [ecx+147], 0
  000ac	74 ec		 je	 SHORT $LN20@GetEnterLe
$LN10@GetEnterLe:

; 1062 : 		{
; 1063 : 			return 5;
; 1064 : 		}
; 1065 : 	}
; 1066 : 
; 1067 : 	if( lpObj->Level == 400 )

  000ae	66 3b c2	 cmp	 ax, dx
  000b1	75 33		 jne	 SHORT $LN14@GetEnterLe

; 1068 : 	{
; 1069 : 		if( lpObj->ChangeUP != FALSE )

  000b3	80 b9 93 00 00
	00 00		 cmp	 BYTE PTR [ecx+147], 0
  000ba	74 2a		 je	 SHORT $LN14@GetEnterLe

; 1070 : 		{
; 1071 : 			if( g_bMaxLevelIllusion != 0 )

  000bc	33 c0		 xor	 eax, eax
  000be	39 05 00 00 00
	00		 cmp	 DWORD PTR ?g_bMaxLevelIllusion@@3HA, eax ; g_bMaxLevelIllusion
  000c4	0f 95 c0	 setne	 al
  000c7	83 c0 05	 add	 eax, 5

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
$LN18@GetEnterLe:

; 1024 : 	{
; 1025 : 		LogAdd("return %s %d",__FILE__,__LINE__);

  000ce	68 01 04 00 00	 push	 1025			; 00000401H
  000d3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DOGCNFBC@IllusionTempleEvent?4cpp?$AA@
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGPGOPEN@return?5?$CFs?5?$CFd?$AA@
  000dd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@GetEnterLe:

; 1026 : 		return -1;

  000e6	83 c8 ff	 or	 eax, -1

; 1072 : 			{
; 1073 : 				return 6;
; 1074 : 			}
; 1075 : 			else
; 1076 : 			{
; 1077 : 				return 5;
; 1078 : 			}
; 1079 : 		}
; 1080 : 	}
; 1081 : return -1;
; 1082 : }

  000e9	5d		 pop	 ebp
  000ea	c2 04 00	 ret	 4
?GetEnterLevel@CIllusionTempleEvent@@QAEHH@Z ENDP	; CIllusionTempleEvent::GetEnterLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?LeaveUser@CIllusionTempleEvent@@QAEHHE@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_MapNumber$ = 12					; size = 1
?LeaveUser@CIllusionTempleEvent@@QAEHHE@Z PROC		; CIllusionTempleEvent::LeaveUser, COMDAT
; _this$ = ecx

; 378  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 379  : 	if( IT_TEMPLE_RANGE( MapNumber - MAP_INDEX_ILLUSIONTEMPLE1 ) == FALSE )

  00004	0f b6 75 0c	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000e	85 d2		 test	 edx, edx
  00010	78 34		 js	 SHORT $LN6@LeaveUser
  00012	33 c0		 xor	 eax, eax
  00014	83 fa 05	 cmp	 edx, 5
  00017	0f 9e c0	 setle	 al
  0001a	85 c0		 test	 eax, eax
  0001c	74 28		 je	 SHORT $LN6@LeaveUser

; 382  : 	}
; 383  : 
; 384  : 	m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].LeaveUser(aIndex);

  0001e	ff 75 08	 push	 DWORD PTR _aIndex$[ebp]
  00021	69 ce ec 03 00
	00		 imul	 ecx, esi, 1004
  00027	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002d	03 cf		 add	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?LeaveUser@CIllusionTempleProcess@@QAEHH@Z ; CIllusionTempleProcess::LeaveUser

; 385  : 	SendInfo();

  00034	8b cf		 mov	 ecx, edi
  00036	e8 00 00 00 00	 call	 ?SendInfo@CIllusionTempleEvent@@QAEXXZ ; CIllusionTempleEvent::SendInfo
  0003b	5f		 pop	 edi

; 386  : 	return TRUE;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	5e		 pop	 esi

; 387  : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN6@LeaveUser:
  00046	5f		 pop	 edi

; 380  : 	{
; 381  : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 387  : }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
?LeaveUser@CIllusionTempleEvent@@QAEHHE@Z ENDP		; CIllusionTempleEvent::LeaveUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?RankingCheck@CIllusionTempleEvent@@QAEHHEEH@Z
_TEXT	SEGMENT
_aIndex$ = 8						; size = 4
_Temple$ = 12						; size = 1
_Pos$ = 16						; size = 1
_Level$ = 20						; size = 4
?RankingCheck@CIllusionTempleEvent@@QAEHHEEH@Z PROC	; CIllusionTempleEvent::RankingCheck, COMDAT
; _this$ = ecx

; 374  : 	return FALSE;

  00000	33 c0		 xor	 eax, eax

; 375  : }

  00002	c2 10 00	 ret	 16			; 00000010H
?RankingCheck@CIllusionTempleEvent@@QAEHHEEH@Z ENDP	; CIllusionTempleEvent::RankingCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?Enter@CIllusionTempleEvent@@QAEHHEE@Z
_TEXT	SEGMENT
_pMsg$ = -36						; size = 5
tv555 = -28						; size = 4
tv511 = -24						; size = 4
tv551 = -20						; size = 4
tv412 = -16						; size = 4
tv504 = -12						; size = 4
tv554 = -8						; size = 4
_this$1$ = -4						; size = 4
_iLevel$1$ = 8						; size = 4
_aIndex$ = 8						; size = 4
_Temple$ = 12						; size = 1
_pMsg$1 = 12						; size = 4
_Pos$ = 16						; size = 1
?Enter@CIllusionTempleEvent@@QAEHHEE@Z PROC		; CIllusionTempleEvent::Enter, COMDAT
; _this$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 194  : 	if( g_bIllusionTemple == FALSE )

  00006	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bIllusionTemple@@3HA, 0 ; g_bIllusionTemple
  0000d	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00010	75 08		 jne	 SHORT $LN2@Enter
$LN41@Enter:

; 195  : 	{
; 196  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax

; 365  : }

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Enter:

; 197  : 	}
; 198  : 
; 199  : 	if( IT_TEMPLE_RANGE(Temple) == FALSE )

  0001a	b8 05 00 00 00	 mov	 eax, 5
  0001f	3a 45 0c	 cmp	 al, BYTE PTR _Temple$[ebp]
  00022	1b c0		 sbb	 eax, eax
  00024	83 c0 01	 add	 eax, 1
  00027	74 e9		 je	 SHORT $LN41@Enter

; 200  : 	{
; 201  : 		return FALSE;
; 202  : 	}
; 203  : 
; 204  : 	LPOBJ lpObj = &gObj[aIndex];

  00029	53		 push	 ebx
  0002a	8b 5d 08	 mov	 ebx, DWORD PTR _aIndex$[ebp]

; 205  : 
; 206  : 	PMSG_ILLUSIONTEMPLE_ENTER_RESULT pMsg;
; 207  : 
; 208  : 	PHeadSubSetB((LPBYTE)&pMsg,0xBF,0,sizeof( pMsg ));

  0002d	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00030	56		 push	 esi
  00031	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00037	57		 push	 edi
  00038	6a 05		 push	 5
  0003a	6a 00		 push	 0
  0003c	68 bf 00 00 00	 push	 191			; 000000bfH
  00041	50		 push	 eax
  00042	69 fb 40 27 00
	00		 imul	 edi, ebx, 10048
  00048	89 75 f0	 mov	 DWORD PTR tv412[ebp], esi
  0004b	e8 00 00 00 00	 call	 ?PHeadSubSetB@@YAXPAEEEH@Z ; PHeadSubSetB
  00050	83 c4 10	 add	 esp, 16			; 00000010H

; 209  : 	pMsg.result = 0;

  00053	c6 45 e0 00	 mov	 BYTE PTR _pMsg$[ebp+4], 0

; 210  : 
; 211  : 	if( lpObj->Type != OBJ_USER || lpObj->Connected <= PLAYER_LOGGED )

  00057	80 7c 37 50 01	 cmp	 BYTE PTR [edi+esi+80], 1
  0005c	0f 85 ab 02 00
	00		 jne	 $LN5@Enter
  00062	83 7c 37 04 02	 cmp	 DWORD PTR [edi+esi+4], 2
  00067	0f 8e a0 02 00
	00		 jle	 $LN5@Enter

; 214  : 	}
; 215  : 
; 216  : 	if ( lpObj->m_IfState.use != 0 && lpObj->m_IfState.type != 12 )

  0006d	8b 84 37 b8 11
	00 00		 mov	 eax, DWORD PTR [edi+esi+4536]
  00074	a8 03		 test	 al, 3
  00076	74 10		 je	 SHORT $LN6@Enter
  00078	25 c0 ff 00 00	 and	 eax, 65472		; 0000ffc0H
  0007d	3d 00 03 00 00	 cmp	 eax, 768		; 00000300H
  00082	0f 85 85 02 00
	00		 jne	 $LN5@Enter
$LN6@Enter:

; 217  : 	{
; 218  : 		return FALSE;
; 219  : 	}
; 220  : 
; 221  : 	if ( lpObj->m_bPShopOpen == TRUE )

  00088	80 bc 37 5c 12
	00 00 01	 cmp	 BYTE PTR [edi+esi+4700], 1
  00090	75 0b		 jne	 SHORT $LN7@Enter

; 222  : 	{
; 223  : 		CGPShopReqClose(lpObj->m_Index);

  00092	ff 34 37	 push	 DWORD PTR [edi+esi]
  00095	e8 00 00 00 00	 call	 ?CGPShopReqClose@@YAXH@Z ; CGPShopReqClose
  0009a	83 c4 04	 add	 esp, 4
$LN7@Enter:

; 224  : 	}
; 225  : 
; 226  : 	int bFail = FALSE;
; 227  : 	int iLevel;
; 228  : 	int iSerial;
; 229  : 
; 230  : #if (ENABLE_FIX_PARTYPK == 0)
; 231  : 
; 232  : 	if ( lpObj->PartyNumber >= 0 )
; 233  : 	{
; 234  : 		if( gParty.GetPartyPkLevel(lpObj->PartyNumber) >= 5 )
; 235  : 		{
; 236  : 			bFail = TRUE;
; 237  : 		}
; 238  : 	}
; 239  : 	else if( lpObj->m_PK_Level >= 4 )
; 240  : 	{
; 241  : 		bFail = TRUE;
; 242  : 	}
; 243  : 
; 244  : 	if( bFail == TRUE )
; 245  : 	{
; 246  : 		pMsg.result = 7;
; 247  : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 248  : 		return FALSE;
; 249  : 	}
; 250  : 
; 251  : #endif
; 252  : 
; 253  : 	if( IsTransformEquipment(aIndex) )

  0009d	53		 push	 ebx
  0009e	e8 00 00 00 00	 call	 ?IsTransformEquipment@@YA_NH@Z ; IsTransformEquipment
  000a3	83 c4 04	 add	 esp, 4
  000a6	84 c0		 test	 al, al
  000a8	74 09		 je	 SHORT $LN8@Enter

; 254  : 	{
; 255  : 		pMsg.result = 8;

  000aa	c6 45 e0 08	 mov	 BYTE PTR _pMsg$[ebp+4], 8

; 256  : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 257  : 		return FALSE;

  000ae	e9 48 02 00 00	 jmp	 $LN39@Enter
$LN8@Enter:

; 258  : 	}
; 259  : 
; 260  : 	if( m_TempleData[Temple].GetState() != IT_STATE_CLOSED ||

  000b3	8b 45 0c	 mov	 eax, DWORD PTR _Temple$[ebp]
  000b6	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	83 c6 08	 add	 esi, 8
  000bf	69 c0 ec 03 00
	00		 imul	 eax, eax, 1004
  000c5	03 f0		 add	 esi, eax
  000c7	8b ce		 mov	 ecx, esi
  000c9	89 75 e4	 mov	 DWORD PTR tv555[ebp], esi
  000cc	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetState
  000d1	84 c0		 test	 al, al
  000d3	0f 85 1e 02 00
	00		 jne	 $LN10@Enter
  000d9	8b ce		 mov	 ecx, esi
  000db	e8 00 00 00 00	 call	 ?OpenState@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::OpenState
  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 0f 02 00
	00		 je	 $LN10@Enter

; 265  : 		return FALSE;
; 266  : 	}
; 267  : 
; 268  : 	if( gObj[aIndex].pInventory[Pos].IsItem() == TRUE )

  000e8	8b 45 10	 mov	 eax, DWORD PTR _Pos$[ebp]
  000eb	0f b6 c0	 movzx	 eax, al
  000ee	69 f0 d4 00 00
	00		 imul	 esi, eax, 212
  000f4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f9	8b 8c 07 c0 11
	00 00		 mov	 ecx, DWORD PTR [edi+eax+4544]
  00100	03 ce		 add	 ecx, esi
  00102	89 75 f8	 mov	 DWORD PTR tv554[ebp], esi
  00105	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0010a	83 f8 01	 cmp	 eax, 1
  0010d	75 58		 jne	 SHORT $LN42@Enter

; 269  : 	{
; 270  : 		if( gObj[aIndex].pInventory[Pos].m_Type == ITEMGET(13,51) )

  0010f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00114	b9 3d 1a 00 00	 mov	 ecx, 6717		; 00001a3dH
  00119	c7 45 f4 33 1a
	00 00		 mov	 DWORD PTR tv504[ebp], 6707 ; 00001a33H
  00120	89 4d e8	 mov	 DWORD PTR tv511[ebp], ecx
  00123	8b 94 07 c0 11
	00 00		 mov	 edx, DWORD PTR [edi+eax+4544]
  0012a	0f b7 44 32 06	 movzx	 eax, WORD PTR [edx+esi+6]
  0012f	66 3b 45 f4	 cmp	 ax, WORD PTR tv504[ebp]
  00133	75 3b		 jne	 SHORT $LN13@Enter

; 271  : 		{
; 272  : 			iLevel = gObj[aIndex].pInventory[Pos].m_Level;

  00135	0f bf 4c 32 08	 movsx	 ecx, WORD PTR [edx+esi+8]
  0013a	89 4d 08	 mov	 DWORD PTR _iLevel$1$[ebp], ecx

; 273  : 			iSerial = gObj[aIndex].pInventory[Pos].m_Number;
; 274  : 
; 275  : 			if( IT_TEMPLE_RANGE(iLevel-1) == FALSE && gObj[aIndex].pInventory[Pos].m_Durability != 1.0f )

  0013d	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00140	89 45 ec	 mov	 DWORD PTR tv551[ebp], eax
  00143	85 c0		 test	 eax, eax
  00145	78 0d		 js	 SHORT $LN33@Enter
  00147	33 c0		 xor	 eax, eax
  00149	83 7d ec 05	 cmp	 DWORD PTR tv551[ebp], 5
  0014d	0f 9e c0	 setle	 al
  00150	85 c0		 test	 eax, eax
  00152	75 33		 jne	 SHORT $LN18@Enter
$LN33@Enter:
  00154	f3 0f 10 44 32
	24		 movss	 xmm0, DWORD PTR [edx+esi+36]
  0015a	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  00161	9f		 lahf
  00162	f6 c4 44	 test	 ah, 68			; 00000044H
  00165	7b 20		 jnp	 SHORT $LN18@Enter
$LN42@Enter:

; 276  : 			{
; 277  : 				pMsg.result = 1;

  00167	c6 45 e0 01	 mov	 BYTE PTR _pMsg$[ebp+4], 1

; 278  : 				DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 279  : 				return FALSE;

  0016b	e9 8b 01 00 00	 jmp	 $LN39@Enter
$LN13@Enter:

; 280  : 			}
; 281  : 		}
; 282  : 		else if( gObj[aIndex].pInventory[Pos].m_Type == ITEMGET(13,61) )

  00170	66 3b c1	 cmp	 ax, cx
  00173	75 f2		 jne	 SHORT $LN42@Enter

; 283  : 		{
; 284  : 			iSerial = gObj[aIndex].pInventory[Pos].m_Number;
; 285  : 			iLevel = GetEnterLevel(aIndex);

  00175	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00178	53		 push	 ebx
  00179	e8 00 00 00 00	 call	 ?GetEnterLevel@CIllusionTempleEvent@@QAEHH@Z ; CIllusionTempleEvent::GetEnterLevel
  0017e	8b c8		 mov	 ecx, eax
  00180	89 4d 08	 mov	 DWORD PTR _iLevel$1$[ebp], ecx

; 286  : 
; 287  : 			if( iLevel <= 0 )

  00183	85 c9		 test	 ecx, ecx
  00185	7e e0		 jle	 SHORT $LN42@Enter
$LN18@Enter:

; 288  : 			{
; 289  : 				pMsg.result = 1;
; 290  : 				DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 291  : 				return FALSE;
; 292  : 			}
; 293  : 		}
; 294  : 		else
; 295  : 		{
; 296  : 			pMsg.result = 1;
; 297  : 			DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 298  : 			return FALSE;
; 299  : 		}
; 300  : 	}
; 301  : 	else
; 302  : 	{
; 303  : 		pMsg.result = 1;
; 304  : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 305  : 		return FALSE;
; 306  : 	}
; 307  : 
; 308  : 	if( RankingCheck(aIndex,Temple,Pos,iLevel) != FALSE )

  00187	51		 push	 ecx
  00188	ff 75 10	 push	 DWORD PTR _Pos$[ebp]
  0018b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0018e	ff 75 0c	 push	 DWORD PTR _Temple$[ebp]
  00191	53		 push	 ebx
  00192	e8 00 00 00 00	 call	 ?RankingCheck@CIllusionTempleEvent@@QAEHHEEH@Z ; CIllusionTempleEvent::RankingCheck
  00197	85 c0		 test	 eax, eax
  00199	0f 85 4a 01 00
	00		 jne	 $LN40@Enter

; 309  : 	{
; 310  : 		return TRUE;
; 311  : 	}
; 312  : 
; 313  : 	if( CheckCanEnter(aIndex,iLevel) == FALSE )

  0019f	8b 75 08	 mov	 esi, DWORD PTR _iLevel$1$[ebp]
  001a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001a5	56		 push	 esi
  001a6	53		 push	 ebx
  001a7	e8 00 00 00 00	 call	 ?CheckCanEnter@CIllusionTempleEvent@@QAEHHH@Z ; CIllusionTempleEvent::CheckCanEnter
  001ac	85 c0		 test	 eax, eax
  001ae	75 09		 jne	 SHORT $LN20@Enter

; 314  : 	{
; 315  : 		pMsg.result = 3;

  001b0	c6 45 e0 03	 mov	 BYTE PTR _pMsg$[ebp+4], 3

; 316  : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);
; 317  : 		return FALSE;

  001b4	e9 42 01 00 00	 jmp	 $LN39@Enter
$LN20@Enter:

; 318  : 	}
; 319  : 
; 320  : 	m_TempleData[iLevel-1].CheckUsers();

  001b9	69 f6 ec 03 00
	00		 imul	 esi, esi, 1004
  001bf	03 75 fc	 add	 esi, DWORD PTR _this$1$[ebp]
  001c2	8d 8e 1c fc ff
	ff		 lea	 ecx, DWORD PTR [esi-996]
  001c8	e8 00 00 00 00	 call	 ?CheckUsers@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CheckUsers

; 321  : 
; 322  : 	int bResult = m_TempleData[iLevel-1].EnterUser(aIndex,Temple,Pos);

  001cd	ff 75 10	 push	 DWORD PTR _Pos$[ebp]
  001d0	8d 8e 1c fc ff
	ff		 lea	 ecx, DWORD PTR [esi-996]
  001d6	ff 75 0c	 push	 DWORD PTR _Temple$[ebp]
  001d9	53		 push	 ebx
  001da	e8 00 00 00 00	 call	 ?EnterUser@CIllusionTempleProcess@@QAEHHEE@Z ; CIllusionTempleProcess::EnterUser

; 323  : 
; 324  : 	if( bResult == TRUE )
; 325  : 	{
; 326  : 		if( lpObj->PartyNumber >= 0 )

  001df	8b 75 f0	 mov	 esi, DWORD PTR tv412[ebp]
  001e2	83 f8 01	 cmp	 eax, 1
  001e5	0f 85 e9 00 00
	00		 jne	 $LN21@Enter
  001eb	8b 84 37 0c 06
	00 00		 mov	 eax, DWORD PTR [edi+esi+1548]
  001f2	85 c0		 test	 eax, eax
  001f4	78 28		 js	 SHORT $LN23@Enter

; 327  : 		{
; 328  : 			PMSG_PARTYDELUSER pMsg;
; 329  : 			int PartyIndex;
; 330  : 			PartyIndex = gParty.GetIndex(lpObj->PartyNumber,lpObj->m_Index,lpObj->DBNumber);

  001f6	ff 74 37 30	 push	 DWORD PTR [edi+esi+48]
  001fa	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  001ff	ff 34 37	 push	 DWORD PTR [edi+esi]
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 ?GetIndex@PartyClass@@QAEHHHH@Z ; PartyClass::GetIndex

; 331  : 
; 332  : 			if( PartyIndex >= 0 )

  00208	85 c0		 test	 eax, eax
  0020a	78 12		 js	 SHORT $LN23@Enter

; 333  : 			{
; 334  : 				
; 335  : 				pMsg.Number = PartyIndex;
; 336  : 
; 337  : 				CGPartyDelUser(&pMsg,lpObj->m_Index);

  0020c	ff 34 37	 push	 DWORD PTR [edi+esi]
  0020f	88 45 0f	 mov	 BYTE PTR _pMsg$1[ebp+3], al
  00212	8d 45 0c	 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 ?CGPartyDelUser@@YAXPAUPMSG_PARTYDELUSER@@H@Z ; CGPartyDelUser
  0021b	83 c4 08	 add	 esp, 8
$LN23@Enter:

; 338  : 			}
; 339  : 		}
; 340  : 
; 341  : 		if( lpObj->pInventory[Pos].m_Type == ITEMGET(13,51) )

  0021e	8b 84 37 c0 11
	00 00		 mov	 eax, DWORD PTR [edi+esi+4544]
  00225	8b 4d f8	 mov	 ecx, DWORD PTR tv554[ebp]
  00228	0f b7 54 08 06	 movzx	 edx, WORD PTR [eax+ecx+6]
  0022d	66 3b 55 f4	 cmp	 dx, WORD PTR tv504[ebp]
  00231	75 0a		 jne	 SHORT $LN24@Enter

; 342  : 		{
; 343  : 			lpObj->pInventory[Pos].m_Durability = 0;

  00233	c7 44 08 24 00
	00 00 00	 mov	 DWORD PTR [eax+ecx+36], 0

; 344  : 			GCItemDurSend(lpObj->m_Index,Pos,(BYTE)lpObj->pInventory[Pos].m_Durability,0);

  0023b	eb 23		 jmp	 SHORT $LN38@Enter
$LN24@Enter:

; 345  : 		}
; 346  : 		else if( lpObj->pInventory[Pos].m_Type == ITEMGET(13,61) )

  0023d	66 3b 55 e8	 cmp	 dx, WORD PTR tv511[ebp]
  00241	75 41		 jne	 SHORT $LN27@Enter

; 347  : 		{
; 348  : 			if( lpObj->pInventory[Pos].m_Durability > 0.0f )

  00243	f3 0f 10 44 08
	24		 movss	 xmm0, DWORD PTR [eax+ecx+36]
  00249	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00250	76 32		 jbe	 SHORT $LN27@Enter

; 349  : 			{
; 350  : 				lpObj->pInventory[Pos].m_Durability -= 1.0f;

  00252	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0025a	f3 0f 11 44 08
	24		 movss	 DWORD PTR [eax+ecx+36], xmm0
$LN38@Enter:

; 351  : 				GCItemDurSend(lpObj->m_Index,Pos,(BYTE)lpObj->pInventory[Pos].m_Durability,0);

  00260	8b 84 37 c0 11
	00 00		 mov	 eax, DWORD PTR [edi+esi+4544]
  00267	6a 00		 push	 0
  00269	f3 0f 2c 44 08
	24		 cvttss2si eax, DWORD PTR [eax+ecx+36]
  0026f	0f b6 c0	 movzx	 eax, al
  00272	50		 push	 eax
  00273	ff 75 10	 push	 DWORD PTR _Pos$[ebp]
  00276	ff 34 37	 push	 DWORD PTR [edi+esi]
  00279	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend
  0027e	8b 4d f8	 mov	 ecx, DWORD PTR tv554[ebp]
  00281	83 c4 10	 add	 esp, 16			; 00000010H
$LN27@Enter:

; 352  : 			}
; 353  : 		}
; 354  : 
; 355  : 		LogAddTD("[Illusion Temple] (%d) EnterUser: (%s)(%s) class:%d (Serial:%u).",

  00284	8b 84 37 c0 11
	00 00		 mov	 eax, DWORD PTR [edi+esi+4544]
  0028b	ff 34 08	 push	 DWORD PTR [eax+ecx]
  0028e	0f b6 84 37 92
	00 00 00	 movzx	 eax, BYTE PTR [edi+esi+146]
  00296	50		 push	 eax
  00297	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0029a	03 c7		 add	 eax, edi
  0029c	50		 push	 eax
  0029d	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002a0	03 c7		 add	 eax, edi
  002a2	50		 push	 eax
  002a3	ff 75 08	 push	 DWORD PTR _iLevel$1$[ebp]
  002a6	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KLFODGDC@?$FLIllusion?5Temple?$FN?5?$CI?$CFd?$CJ?5EnterUser@
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 356  : 			iLevel,lpObj->AccountID,lpObj->Name,lpObj->DbClass,lpObj->pInventory[Pos].m_Number);
; 357  : 
; 358  : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);

  002b1	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002b5	50		 push	 eax
  002b6	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002b9	50		 push	 eax
  002ba	53		 push	 ebx
  002bb	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 359  : 		gObjMoveGate(lpObj->m_Index,141 + iLevel);

  002c0	8b 45 08	 mov	 eax, DWORD PTR _iLevel$1$[ebp]
  002c3	05 8d 00 00 00	 add	 eax, 141		; 0000008dH
  002c8	50		 push	 eax
  002c9	ff 34 37	 push	 DWORD PTR [edi+esi]
  002cc	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  002d1	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN21@Enter:

; 360  : 	}
; 361  : 
; 362  : 	m_TempleData[Temple].SendState(0,lpObj->m_Index);

  002d4	ff 34 37	 push	 DWORD PTR [edi+esi]
  002d7	8b 4d e4	 mov	 ecx, DWORD PTR tv555[ebp]
  002da	6a 00		 push	 0
  002dc	e8 00 00 00 00	 call	 ?SendState@CIllusionTempleProcess@@QAEXEH@Z ; CIllusionTempleProcess::SendState

; 363  : 	SendInfo();

  002e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002e4	e8 00 00 00 00	 call	 ?SendInfo@CIllusionTempleEvent@@QAEXXZ ; CIllusionTempleEvent::SendInfo
$LN40@Enter:

; 364  : return TRUE;

  002e9	5f		 pop	 edi
  002ea	5e		 pop	 esi
  002eb	b8 01 00 00 00	 mov	 eax, 1
  002f0	5b		 pop	 ebx

; 365  : }

  002f1	8b e5		 mov	 esp, ebp
  002f3	5d		 pop	 ebp
  002f4	c2 0c 00	 ret	 12			; 0000000cH
$LN10@Enter:

; 261  : 		m_TempleData[Temple].OpenState() == FALSE )
; 262  : 	{
; 263  : 		pMsg.result = 2;

  002f7	c6 45 e0 02	 mov	 BYTE PTR _pMsg$[ebp+4], 2
$LN39@Enter:

; 264  : 		DataSend(aIndex,(LPBYTE)&pMsg,pMsg.h.size);

  002fb	0f b6 45 dd	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002ff	50		 push	 eax
  00300	8d 45 dc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00303	50		 push	 eax
  00304	53		 push	 ebx
  00305	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  0030a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@Enter:

; 212  : 	{
; 213  : 		return FALSE;

  0030d	5f		 pop	 edi
  0030e	5e		 pop	 esi
  0030f	33 c0		 xor	 eax, eax
  00311	5b		 pop	 ebx

; 365  : }

  00312	8b e5		 mov	 esp, ebp
  00314	5d		 pop	 ebp
  00315	c2 0c 00	 ret	 12			; 0000000cH
?Enter@CIllusionTempleEvent@@QAEHHEE@Z ENDP		; CIllusionTempleEvent::Enter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?PickupRelicSend@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?PickupRelicSend@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CIllusionTempleEvent::PickupRelicSend, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 180  : 	if( IT_TEMPLE_RANGE(lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1) == FALSE )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	0f b6 be 23 01
	00 00		 movzx	 edi, BYTE PTR [esi+291]
  0000f	8d 57 d3	 lea	 edx, DWORD PTR [edi-45]
  00012	85 d2		 test	 edx, edx
  00014	78 20		 js	 SHORT $LN1@PickupReli
  00016	33 c0		 xor	 eax, eax
  00018	83 fa 05	 cmp	 edx, 5
  0001b	0f 9e c0	 setle	 al
  0001e	85 c0		 test	 eax, eax
  00020	74 14		 je	 SHORT $LN1@PickupReli

; 181  : 		return;
; 182  : 
; 183  : 	m_TempleData[lpObj->MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].PickUpRelicSend(lpObj);

  00022	69 c7 ec 03 00
	00		 imul	 eax, edi, 1004
  00028	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002e	56		 push	 esi
  0002f	03 c8		 add	 ecx, eax
  00031	e8 00 00 00 00	 call	 ?PickUpRelicSend@CIllusionTempleProcess@@QAEXPAUOBJECTSTRUCT@@@Z ; CIllusionTempleProcess::PickUpRelicSend
$LN1@PickupReli:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi

; 184  : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?PickupRelicSend@CIllusionTempleEvent@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CIllusionTempleEvent::PickupRelicSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?PickupRelic@CIllusionTempleEvent@@QAEXEHE@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 1
_aIndex$ = 12						; size = 4
_Pos$ = 16						; size = 1
?PickupRelic@CIllusionTempleEvent@@QAEXEHE@Z PROC	; CIllusionTempleEvent::PickupRelic, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 172  : 	if( IT_TEMPLE_RANGE(MapNumber - MAP_INDEX_ILLUSIONTEMPLE1) == FALSE )

  00004	0f b6 75 08	 movzx	 esi, BYTE PTR _MapNumber$[ebp]
  00008	8d 56 d3	 lea	 edx, DWORD PTR [esi-45]
  0000b	85 d2		 test	 edx, edx
  0000d	78 25		 js	 SHORT $LN1@PickupReli
  0000f	33 c0		 xor	 eax, eax
  00011	83 fa 05	 cmp	 edx, 5
  00014	0f 9e c0	 setle	 al
  00017	85 c0		 test	 eax, eax
  00019	74 19		 je	 SHORT $LN1@PickupReli

; 173  : 		return;
; 174  : 
; 175  : 	m_TempleData[MapNumber - MAP_INDEX_ILLUSIONTEMPLE1].PickUpRelic(aIndex,Pos);

  0001b	ff 75 10	 push	 DWORD PTR _Pos$[ebp]
  0001e	69 c6 ec 03 00
	00		 imul	 eax, esi, 1004
  00024	81 c1 8c 4f ff
	ff		 add	 ecx, -45172		; ffff4f8cH
  0002a	ff 75 0c	 push	 DWORD PTR _aIndex$[ebp]
  0002d	03 c8		 add	 ecx, eax
  0002f	e8 00 00 00 00	 call	 ?PickUpRelic@CIllusionTempleProcess@@QAEXHE@Z ; CIllusionTempleProcess::PickUpRelic
$LN1@PickupReli:
  00034	5e		 pop	 esi

; 176  : }

  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
?PickupRelic@CIllusionTempleEvent@@QAEXEHE@Z ENDP	; CIllusionTempleEvent::PickupRelic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?Run@CIllusionTempleEvent@@QAEXXZ
_TEXT	SEGMENT
_iTICK_COUNT$1$ = -4					; size = 4
?Run@CIllusionTempleEvent@@QAEXXZ PROC			; CIllusionTempleEvent::Run, COMDAT
; _this$ = ecx

; 136  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 137  : 	if( g_bIllusionTemple == FALSE )

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bIllusionTemple@@3HA, 0 ; g_bIllusionTemple
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	74 58		 je	 SHORT $LN3@Run

; 138  : 		return;
; 139  : 
; 140  : 	int iTICK_COUNT = GetTickCount();

  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 141  : 	int bCheckSync = FALSE;
; 142  : 
; 143  : 	if( m_TempleData[0].GetRemainTime2() == 10 && m_TempleData[0].GetCheckSync() == FALSE )

  00018	83 c6 08	 add	 esi, 8
  0001b	89 45 fc	 mov	 DWORD PTR _iTICK_COUNT$1$[ebp], eax
  0001e	8b ce		 mov	 ecx, esi
  00020	33 db		 xor	 ebx, ebx
  00022	e8 00 00 00 00	 call	 ?GetRemainTime2@CIllusionTempleProcess@@QAEEXZ ; CIllusionTempleProcess::GetRemainTime2
  00027	3c 0a		 cmp	 al, 10			; 0000000aH
  00029	75 15		 jne	 SHORT $LN6@Run
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?GetCheckSync@CIllusionTempleProcess@@QAEHXZ ; CIllusionTempleProcess::GetCheckSync
  00032	85 c0		 test	 eax, eax
  00034	75 0a		 jne	 SHORT $LN6@Run

; 144  : 	{
; 145  : 		bCheckSync = TRUE;
; 146  : 		m_TempleData[0].SetCheckSyncTrue();

  00036	8b ce		 mov	 ecx, esi
  00038	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
  0003b	e8 00 00 00 00	 call	 ?SetCheckSyncTrue@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::SetCheckSyncTrue
$LN6@Run:

; 147  : 	}
; 148  : 
; 149  : 	for(int i = 0; i < IT_MAXTEMPLE;i++)

  00040	bf 06 00 00 00	 mov	 edi, 6
$LL4@Run:

; 150  : 	{
; 151  : 		if( bCheckSync == TRUE )

  00045	83 fb 01	 cmp	 ebx, 1
  00048	75 07		 jne	 SHORT $LN7@Run

; 152  : 		{
; 153  : 			m_TempleData[i].CheckSync();

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?CheckSync@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::CheckSync
$LN7@Run:

; 154  : 		}
; 155  : 
; 156  : 		m_TempleData[i].Run(iTICK_COUNT);

  00051	ff 75 fc	 push	 DWORD PTR _iTICK_COUNT$1$[ebp]
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?Run@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::Run
  0005b	81 c6 ec 03 00
	00		 add	 esi, 1004		; 000003ecH
  00061	83 ef 01	 sub	 edi, 1
  00064	75 df		 jne	 SHORT $LL4@Run
  00066	5f		 pop	 edi
  00067	5b		 pop	 ebx
$LN3@Run:
  00068	5e		 pop	 esi

; 157  : 	}
; 158  : }

  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?Run@CIllusionTempleEvent@@QAEXXZ ENDP			; CIllusionTempleEvent::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?LoadFile@CIllusionTempleEvent@@QAEHPAD@Z
_TEXT	SEGMENT
_pTmp$ = -8						; size = 8
_szFileName$ = 8					; size = 4
?LoadFile@CIllusionTempleEvent@@QAEHPAD@Z PROC		; CIllusionTempleEvent::LoadFile, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 70   : 	SMDFile = fopen(szFileName,"r");

  00007	8b 75 08	 mov	 esi, DWORD PTR _szFileName$[ebp]
  0000a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 _fopen
  00015	83 c4 08	 add	 esp, 8
  00018	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 71   : 
; 72   : 	if(SMDFile == NULL)

  0001d	85 c0		 test	 eax, eax
  0001f	75 17		 jne	 SHORT $LN105@LoadFile

; 73   : 	{
; 74   : 		MsgBox("[Illusion Temple] Info file Load Fail [%s]",szFileName);

  00021	56		 push	 esi
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GCHBFEEM@?$FLIllusion?5Temple?$FN?5Info?5file?5Load@
  00027	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0002c	83 c4 08	 add	 esp, 8

; 75   : 		return FALSE;

  0002f	33 c0		 xor	 eax, eax
  00031	5e		 pop	 esi

; 133  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN105@LoadFile:

; 76   : 	}
; 77   : 
; 78   : 	int Token,Index;
; 79   : 
; 80   : 	ILLUSION_TIME pTmp;
; 81   : 
; 82   : 	while( TRUE )
; 83   : 	{
; 84   : 		Token = GetToken();

  00038	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 
; 86   : 		if( Token == END )

  0003d	83 f8 02	 cmp	 eax, 2
  00040	0f 84 51 01 00
	00		 je	 $LN111@LoadFile
  00046	53		 push	 ebx
  00047	57		 push	 edi
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@LoadFile:

; 87   : 			break;
; 88   : 
; 89   : 		Index = (int)TokenNumber;

  00050	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
$LL4@LoadFile:

; 90   : 
; 91   : 		while( TRUE )
; 92   : 		{
; 93   : 			if( Index == 0 )

  00058	85 db		 test	 ebx, ebx
  0005a	0f 85 85 00 00
	00		 jne	 $LN8@LoadFile

; 94   : 			{
; 95   : 				Token = GetToken();

  00060	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 96   : 
; 97   : 				if( strcmp("end",TokenString) == NULL )

  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0006a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0006f	90		 npad	 1
$LL116@LoadFile:
  00070	8a 10		 mov	 dl, BYTE PTR [eax]
  00072	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00074	75 1a		 jne	 SHORT $LN117@LoadFile
  00076	84 d2		 test	 dl, dl
  00078	74 12		 je	 SHORT $LN118@LoadFile
  0007a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0007d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00080	75 0e		 jne	 SHORT $LN117@LoadFile
  00082	83 c0 02	 add	 eax, 2
  00085	83 c1 02	 add	 ecx, 2
  00088	84 d2		 test	 dl, dl
  0008a	75 e4		 jne	 SHORT $LL116@LoadFile
$LN118@LoadFile:
  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN119@LoadFile
$LN117@LoadFile:
  00090	1b c0		 sbb	 eax, eax
  00092	83 c8 01	 or	 eax, 1
$LN119@LoadFile:
  00095	85 c0		 test	 eax, eax
  00097	0f 84 e7 00 00
	00		 je	 $LN108@LoadFile

; 98   : 					break;
; 99   : 
; 100  : 				m_iIT_TIME_MIN_OPEN = (int)TokenNumber;

  0009d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000a5	a3 00 00 00 00	 mov	 DWORD PTR ?m_iIT_TIME_MIN_OPEN@@3HA, eax ; m_iIT_TIME_MIN_OPEN

; 101  : 
; 102  : 				Token = GetToken();

  000aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 				m_iIT_TIME_MIN_PREPARE = (int)TokenNumber;

  000af	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000b7	a3 00 00 00 00	 mov	 DWORD PTR ?m_iIT_TIME_MIN_PREPARE@@3HA, eax ; m_iIT_TIME_MIN_PREPARE

; 104  : 
; 105  : 				Token = GetToken();

  000bc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 106  : 				m_iIT_TIME_MIN_PLAY = (int)TokenNumber;

  000c1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000c9	a3 00 00 00 00	 mov	 DWORD PTR ?m_iIT_TIME_MIN_PLAY@@3HA, eax ; m_iIT_TIME_MIN_PLAY

; 107  : 
; 108  : 				Token = GetToken();

  000ce	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 109  : 				m_iIT_TIME_MIN_CLOSE = (int)TokenNumber;

  000d3	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000db	a3 00 00 00 00	 mov	 DWORD PTR ?m_iIT_TIME_MIN_CLOSE@@3HA, eax ; m_iIT_TIME_MIN_CLOSE
  000e0	e9 73 ff ff ff	 jmp	 $LL4@LoadFile
$LN8@LoadFile:

; 110  : 			}
; 111  : 			else if(Index == 1)

  000e5	83 fb 01	 cmp	 ebx, 1
  000e8	0f 85 6a ff ff
	ff		 jne	 $LL4@LoadFile

; 112  : 			{
; 113  : 				Token = GetToken();

  000ee	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 
; 115  : 				if( strcmp("end",TokenString) == NULL )

  000f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000f8	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  000fd	0f 1f 00	 npad	 3
$LL120@LoadFile:
  00100	8a 10		 mov	 dl, BYTE PTR [eax]
  00102	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00104	75 1a		 jne	 SHORT $LN121@LoadFile
  00106	84 d2		 test	 dl, dl
  00108	74 12		 je	 SHORT $LN122@LoadFile
  0010a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0010d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00110	75 0e		 jne	 SHORT $LN121@LoadFile
  00112	83 c0 02	 add	 eax, 2
  00115	83 c1 02	 add	 ecx, 2
  00118	84 d2		 test	 dl, dl
  0011a	75 e4		 jne	 SHORT $LL120@LoadFile
$LN122@LoadFile:
  0011c	33 c0		 xor	 eax, eax
  0011e	eb 05		 jmp	 SHORT $LN123@LoadFile
$LN121@LoadFile:
  00120	1b c0		 sbb	 eax, eax
  00122	83 c8 01	 or	 eax, 1
$LN123@LoadFile:
  00125	85 c0		 test	 eax, eax
  00127	74 5b		 je	 SHORT $LN108@LoadFile

; 116  : 					break;
; 117  : 
; 118  : 				pTmp.iHour = (int)TokenNumber;

  00129	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00131	89 45 f8	 mov	 DWORD PTR _pTmp$[ebp], eax

; 119  : 
; 120  : 				Token = GetToken();

  00134	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 				pTmp.iMinute = (int)TokenNumber;

  00139	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 96   : 		return (_Ptr);

  00141	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A

; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00147	b9 00 00 00 00	 mov	 ecx, OFFSET ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A ; m_IllusionStartTime
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp

; 121  : 				pTmp.iMinute = (int)TokenNumber;

  0014c	89 45 fc	 mov	 DWORD PTR _pTmp$[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  0014f	8d 45 f8	 lea	 eax, DWORD PTR _pTmp$[ebp]
  00152	50		 push	 eax
  00153	ff 77 04	 push	 DWORD PTR [edi+4]
  00156	57		 push	 edi
  00157	e8 00 00 00 00	 call	 ??$_Buynode@ABUILLUSION_TIME@@@?$_List_buy@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@QAEPAU?$_List_node@UILLUSION_TIME@@PAX@1@PAU21@0ABUILLUSION_TIME@@@Z ; std::_List_buy<ILLUSION_TIME,std::allocator<ILLUSION_TIME> >::_Buynode<ILLUSION_TIME const &>

; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  0015c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A+4
  00162	b9 fe ff ff 0f	 mov	 ecx, 268435454		; 0ffffffeH
  00167	2b ca		 sub	 ecx, edx

; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00169	8b f0		 mov	 esi, eax

; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  0016b	83 f9 01	 cmp	 ecx, 1
  0016e	72 4d		 jb	 SHORT $LN126@LoadFile

; 1910 : 		this->_Mysize() += _Count;

  00170	42		 inc	 edx
  00171	89 15 04 00 00
	00		 mov	 DWORD PTR ?m_IllusionStartTime@@3V?$list@UILLUSION_TIME@@V?$allocator@UILLUSION_TIME@@@std@@@std@@A+4, edx

; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  00177	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0017a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  0017d	89 30		 mov	 DWORD PTR [eax], esi
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp

; 125  : 		}

  0017f	e9 d4 fe ff ff	 jmp	 $LL4@LoadFile
$LN108@LoadFile:

; 76   : 	}
; 77   : 
; 78   : 	int Token,Index;
; 79   : 
; 80   : 	ILLUSION_TIME pTmp;
; 81   : 
; 82   : 	while( TRUE )
; 83   : 	{
; 84   : 		Token = GetToken();

  00184	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 85   : 
; 86   : 		if( Token == END )

  00189	83 f8 02	 cmp	 eax, 2
  0018c	0f 85 be fe ff
	ff		 jne	 $LL2@LoadFile
  00192	8b 75 08	 mov	 esi, DWORD PTR _szFileName$[ebp]
  00195	5f		 pop	 edi
  00196	5b		 pop	 ebx
$LN111@LoadFile:

; 126  : 	}
; 127  : 
; 128  : 	fclose(SMDFile);

  00197	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0019d	e8 00 00 00 00	 call	 _fclose

; 129  : 
; 130  : 	LogAdd("%s file load!",szFileName);

  001a2	56		 push	 esi
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  001a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  001ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 131  : 
; 132  : return TRUE;

  001b1	b8 01 00 00 00	 mov	 eax, 1
  001b6	5e		 pop	 esi

; 133  : }

  001b7	8b e5		 mov	 esp, ebp
  001b9	5d		 pop	 ebp
  001ba	c2 04 00	 ret	 4
$LN126@LoadFile:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1909 : 			_Xlength_error("list<T> too long");

  001bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  001c2	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN127@LoadFile:
$LN125@LoadFile:
  001c7	cc		 int	 3
?LoadFile@CIllusionTempleEvent@@QAEHPAD@Z ENDP		; CIllusionTempleEvent::LoadFile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?LoadData@CIllusionTempleEvent@@QAEXXZ
_TEXT	SEGMENT
?LoadData@CIllusionTempleEvent@@QAEXXZ PROC		; CIllusionTempleEvent::LoadData, COMDAT
; _this$ = ecx

; 56   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 57   : 	LoadFile(gDirPath.GetNewPath(FILE_EVENT_ILLUSIONTEMPLE));

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BJNAGBHA@Event?2IllusionTemple?4dat?$AA@
  0000d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00012	50		 push	 eax
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?LoadFile@CIllusionTempleEvent@@QAEHPAD@Z ; CIllusionTempleEvent::LoadFile

; 58   : 
; 59   : 	g_bIllusionTemple = GetPrivateProfileInt("GameServerInfo","IllusionTempleEvent",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00024	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00029	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetPrivateProfileIntA@16
  0002f	50		 push	 eax
  00030	6a 00		 push	 0
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IJNGJKML@IllusionTempleEvent?$AA@
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0003c	ff d6		 call	 esi

; 60   : 	g_OldScrollDropRate = GetPrivateProfileInt("GameServerInfo","OldScrollDropRate",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00043	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00048	a3 00 00 00 00	 mov	 DWORD PTR ?g_bIllusionTemple@@3HA, eax ; g_bIllusionTemple
  0004d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00052	50		 push	 eax
  00053	6a 00		 push	 0
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DAFEECGD@OldScrollDropRate?$AA@
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0005f	ff d6		 call	 esi

; 61   : 	g_CovenantDropRate = GetPrivateProfileInt("GameServerInfo","CovenantOfIllusionDropRate",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00066	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?g_OldScrollDropRate@@3HA, eax ; g_OldScrollDropRate
  00070	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00075	50		 push	 eax
  00076	6a 00		 push	 0
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LHECNIBM@CovenantOfIllusionDropRate?$AA@
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00082	ff d6		 call	 esi

; 62   : 	g_bMaxLevelIllusion = GetPrivateProfileInt("GameServerInfo","UseMaxLevelIllusionTemple",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0008e	a3 00 00 00 00	 mov	 DWORD PTR ?g_CovenantDropRate@@3HA, eax ; g_CovenantDropRate
  00093	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00098	50		 push	 eax
  00099	6a 00		 push	 0
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@OMFNOLEF@UseMaxLevelIllusionTemple?$AA@
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000a5	ff d6		 call	 esi

; 63   : 	g_bSaveIllusionRank = GetPrivateProfileInt("GameServerInfo","SaveIllusionTempleRankingPoint",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  000ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000b1	a3 00 00 00 00	 mov	 DWORD PTR ?g_bMaxLevelIllusion@@3HA, eax ; g_bMaxLevelIllusion
  000b6	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000bb	50		 push	 eax
  000bc	6a 00		 push	 0
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@LBMGIHHN@SaveIllusionTempleRankingPoint?$AA@
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000c8	ff d6		 call	 esi

; 64   : 	g_IllusionRewardPerc = GetPrivateProfileInt("GameServerInfo","IllusionTempleRewardPercent",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  000ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  000cf	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000d4	a3 00 00 00 00	 mov	 DWORD PTR ?g_bSaveIllusionRank@@3HA, eax ; g_bSaveIllusionRank
  000d9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000de	50		 push	 eax
  000df	6a 00		 push	 0
  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HACPEIAK@IllusionTempleRewardPercent?$AA@
  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000eb	ff d6		 call	 esi

; 65   : 	g_IllusionUseSkillCnt = GetPrivateProfileInt("GameServerInfo","IllusionTempleMinUseSkillCnt",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  000f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000f7	a3 00 00 00 00	 mov	 DWORD PTR ?g_IllusionRewardPerc@@3HA, eax ; g_IllusionRewardPerc
  000fc	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00101	50		 push	 eax
  00102	6a 00		 push	 0
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GNGJMFMO@IllusionTempleMinUseSkillCnt?$AA@
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0010e	ff d6		 call	 esi
  00110	a3 00 00 00 00	 mov	 DWORD PTR ?g_IllusionUseSkillCnt@@3HA, eax ; g_IllusionUseSkillCnt
  00115	5e		 pop	 esi

; 66   : }

  00116	c3		 ret	 0
?LoadData@CIllusionTempleEvent@@QAEXXZ ENDP		; CIllusionTempleEvent::LoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?Init@CIllusionTempleEvent@@QAEHXZ
_TEXT	SEGMENT
?Init@CIllusionTempleEvent@@QAEHXZ PROC			; CIllusionTempleEvent::Init, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 42   : 	for(int i = 0; i < IT_MAXTEMPLE; i++)

  00002	33 f6		 xor	 esi, esi
  00004	8d 79 08	 lea	 edi, DWORD PTR [ecx+8]
$LL4@Init:

; 43   : 	{
; 44   : 		m_TempleData[i].Reset(i);

  00007	56		 push	 esi
  00008	8b cf		 mov	 ecx, edi
  0000a	e8 00 00 00 00	 call	 ?Reset@CIllusionTempleProcess@@QAEXH@Z ; CIllusionTempleProcess::Reset
  0000f	46		 inc	 esi
  00010	81 c7 ec 03 00
	00		 add	 edi, 1004		; 000003ecH
  00016	83 fe 06	 cmp	 esi, 6
  00019	7c ec		 jl	 SHORT $LL4@Init

; 45   : 	}
; 46   : return TRUE;

  0001b	5f		 pop	 edi
  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	5e		 pop	 esi

; 47   : }

  00022	c3		 ret	 0
?Init@CIllusionTempleEvent@@QAEHXZ ENDP			; CIllusionTempleEvent::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.h
;	COMDAT ??_GCIllusionTempleProcess@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCIllusionTempleProcess@@UAEPAXI@Z PROC		; CIllusionTempleProcess::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 165  : 		DeleteCriticalSection(&m_CritSec);

  00006	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIllusionTempleProcess@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00016	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001a	74 0e		 je	 SHORT $LN7@scalar
  0001c	68 ec 03 00 00	 push	 1004			; 000003ecH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_GCIllusionTempleProcess@@UAEPAXI@Z ENDP		; CIllusionTempleProcess::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.h
;	COMDAT ??1CIllusionTempleProcess@@UAE@XZ
_TEXT	SEGMENT
??1CIllusionTempleProcess@@UAE@XZ PROC			; CIllusionTempleProcess::~CIllusionTempleProcess, COMDAT
; _this$ = ecx

; 165  : 		DeleteCriticalSection(&m_CritSec);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CIllusionTempleProcess@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 166  : 	}

  00010	c3		 ret	 0
??1CIllusionTempleProcess@@UAE@XZ ENDP			; CIllusionTempleProcess::~CIllusionTempleProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.h
;	COMDAT ??0CIllusionTempleProcess@@QAE@XZ
_TEXT	SEGMENT
??0CIllusionTempleProcess@@QAE@XZ PROC			; CIllusionTempleProcess::CIllusionTempleProcess, COMDAT
; _this$ = ecx

; 150  : 	CIllusionTempleProcess()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 151  : 	{

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CIllusionTempleProcess@@6B@

; 152  : 		Temple = -1;
; 153  : 		State = IT_STATE_CLOSED;
; 154  : 		dwTICK_COUNT3 = 0;
; 155  : 		m_STATUE_NPC_COUNT = 0;
; 156  : 		m_NPC_COUNT = 0;
; 157  : 		InitializeCriticalSection(&m_CritSec);

  00009	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 31   : 	IT_PLAYER_STRUCT(){ m_Index = -1; };

  0000c	c7 46 20 ff ff
	ff ff		 mov	 DWORD PTR [esi+32], -1
  00013	c7 46 50 ff ff
	ff ff		 mov	 DWORD PTR [esi+80], -1
  0001a	c7 86 80 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+128], -1
  00024	c7 86 b0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+176], -1
  0002e	c7 86 e0 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+224], -1
  00038	c7 86 10 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+272], -1
  00042	c7 86 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+320], -1
  0004c	c7 86 70 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+368], -1
  00056	c7 86 a0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+416], -1
  00060	c7 86 d0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+464], -1

; 152  : 		Temple = -1;
; 153  : 		State = IT_STATE_CLOSED;
; 154  : 		dwTICK_COUNT3 = 0;
; 155  : 		m_STATUE_NPC_COUNT = 0;
; 156  : 		m_NPC_COUNT = 0;
; 157  : 		InitializeCriticalSection(&m_CritSec);

  0006a	50		 push	 eax
  0006b	66 c7 86 2c 02
	00 00 ff 00	 mov	 WORD PTR [esi+556], 255	; 000000ffH
  00074	c7 86 a4 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+932], 0
  0007e	c7 86 c0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+960], 0
  00088	c7 86 c4 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+964], 0
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 158  : 		dwTICK_COUNT = -1;
; 159  : 
; 160  : 		ResetObject();

  00098	8b ce		 mov	 ecx, esi
  0009a	c7 86 9c 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+924], -1
  000a4	e8 00 00 00 00	 call	 ?ResetObject@CIllusionTempleProcess@@QAEXXZ ; CIllusionTempleProcess::ResetObject

; 161  : 	}

  000a9	8b c6		 mov	 eax, esi
  000ab	5e		 pop	 esi
  000ac	c3		 ret	 0
??0CIllusionTempleProcess@@QAE@XZ ENDP			; CIllusionTempleProcess::CIllusionTempleProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetRelicPlayer@CIllusionTempleProcess@@QAEHXZ
_TEXT	SEGMENT
?GetRelicPlayer@CIllusionTempleProcess@@QAEHXZ PROC	; CIllusionTempleProcess::GetRelicPlayer, COMDAT
; _this$ = ecx

; 961  : 	return -1;

  00000	83 c8 ff	 or	 eax, -1

; 962  : }

  00003	c3		 ret	 0
?GetRelicPlayer@CIllusionTempleProcess@@QAEHXZ ENDP	; CIllusionTempleProcess::GetRelicPlayer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?OpenState@CIllusionTempleProcess@@QAEHXZ
_TEXT	SEGMENT
?OpenState@CIllusionTempleProcess@@QAEHXZ PROC		; CIllusionTempleProcess::OpenState, COMDAT
; _this$ = ecx

; 369  : 	return m_OpenState;

  00000	8b 81 90 03 00
	00		 mov	 eax, DWORD PTR [ecx+912]

; 370  : }

  00006	c3		 ret	 0
?OpenState@CIllusionTempleProcess@@QAEHXZ ENDP		; CIllusionTempleProcess::OpenState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetUserCount@CIllusionTempleProcess@@QAEHXZ
_TEXT	SEGMENT
?GetUserCount@CIllusionTempleProcess@@QAEHXZ PROC	; CIllusionTempleProcess::GetUserCount, COMDAT
; _this$ = ecx

; 579  : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 580  : }

  00002	c3		 ret	 0
?GetUserCount@CIllusionTempleProcess@@QAEHXZ ENDP	; CIllusionTempleProcess::GetUserCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?SetCheckSyncTrue@CIllusionTempleProcess@@QAEXXZ
_TEXT	SEGMENT
?SetCheckSyncTrue@CIllusionTempleProcess@@QAEXXZ PROC	; CIllusionTempleProcess::SetCheckSyncTrue, COMDAT
; _this$ = ecx

; 167  : 	this->m_bIT_CHECKSYNC = TRUE;

  00000	c7 81 e4 03 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+996], 1

; 168  : }

  0000a	c3		 ret	 0
?SetCheckSyncTrue@CIllusionTempleProcess@@QAEXXZ ENDP	; CIllusionTempleProcess::SetCheckSyncTrue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?GetCheckSync@CIllusionTempleProcess@@QAEHXZ
_TEXT	SEGMENT
?GetCheckSync@CIllusionTempleProcess@@QAEHXZ PROC	; CIllusionTempleProcess::GetCheckSync, COMDAT
; _this$ = ecx

; 162  : 	return m_bIT_CHECKSYNC;

  00000	8b 81 e4 03 00
	00		 mov	 eax, DWORD PTR [ecx+996]

; 163  : }

  00006	c3		 ret	 0
?GetCheckSync@CIllusionTempleProcess@@QAEHXZ ENDP	; CIllusionTempleProcess::GetCheckSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleprocess.h
;	COMDAT ??0IT_PLAYER_STRUCT@@QAE@XZ
_TEXT	SEGMENT
??0IT_PLAYER_STRUCT@@QAE@XZ PROC			; IT_PLAYER_STRUCT::IT_PLAYER_STRUCT, COMDAT
; _this$ = ecx

; 31   : 	IT_PLAYER_STRUCT(){ m_Index = -1; };

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0IT_PLAYER_STRUCT@@QAE@XZ ENDP			; IT_PLAYER_STRUCT::IT_PLAYER_STRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 1229 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\illusiontempleevent.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1229 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
