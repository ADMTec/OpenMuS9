; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ObjBaseAttack.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CObjBaseAttack@@QAE@XZ			; CObjBaseAttack::CObjBaseAttack
PUBLIC	??1CObjBaseAttack@@UAE@XZ			; CObjBaseAttack::~CObjBaseAttack
PUBLIC	?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::DecreaseArrow
PUBLIC	?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::CheckAttackArea
PUBLIC	?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ; CObjBaseAttack::PkCheck
PUBLIC	?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ; CObjBaseAttack::ResistanceCheck
PUBLIC	?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheckPvP
PUBLIC	?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAH@Z ; CObjBaseAttack::GetTargetDefense
PUBLIC	?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ; CObjBaseAttack::GetPartyMemberCount
PUBLIC	?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ; CObjBaseAttack::MissCheck
PUBLIC	??_GCObjBaseAttack@@UAEPAXI@Z			; CObjBaseAttack::`scalar deleting destructor'
PUBLIC	??_7CObjBaseAttack@@6B@				; CObjBaseAttack::`vftable'
PUBLIC	??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@ ; `string'
PUBLIC	??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@	; `string'
PUBLIC	??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@ ; `string'
PUBLIC	??_R4CObjBaseAttack@@6B@			; CObjBaseAttack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCObjBaseAttack@@@8			; CObjBaseAttack `RTTI Type Descriptor'
PUBLIC	??_R3CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObjBaseAttack@@8				; CObjBaseAttack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObjBaseAttack@@8			; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@42c80000
PUBLIC	__real@461c4000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_rand:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?Clear@CItem@@QAEXXZ:PROC			; CItem::Clear
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC	; CItem::IsWingOpGetOnePercentDamage
EXTRN	?Is3rdWingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC ; CItem::Is3rdWingOpGetOnePercentDamage
EXTRN	?Is25WingOpGetOnePercentDamage@CItem@@QAEHXZ:PROC ; CItem::Is25WingOpGetOnePercentDamage
EXTRN	?SkillGet@CMagicDamage@@QAEHH@Z:PROC		; CMagicDamage::SkillGet
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?IsMagic@CMagicInf@@QAEHXZ:PROC			; CMagicInf::IsMagic
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?GCDamageSend@@YAXHHHHHH@Z:PROC			; GCDamageSend
EXTRN	?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z:PROC ; GCMagicAttackNumberSend
EXTRN	?GCInventoryItemDeleteSend@@YAXHEE@Z:PROC	; GCInventoryItemDeleteSend
EXTRN	?GCItemDurSend@@YAXHEEE@Z:PROC			; GCItemDurSend
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z:PROC ; gObjAddMsgSendDelay
EXTRN	?gObjBackSpring@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjBackSpring
EXTRN	?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z:PROC	; gObjBackSpring2
EXTRN	?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z:PROC	; retResistance
EXTRN	?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjTargetGuildWarCheck
EXTRN	?gObjCheckAttackArea@@YAHHH@Z:PROC		; gObjCheckAttackArea
EXTRN	?gObjSetPosition@@YAXHHH@Z:PROC			; gObjSetPosition
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjDuelCheck
EXTRN	?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjDuelCheck
EXTRN	?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z:PROC ; gObjGetRelationShip
EXTRN	??_ECObjBaseAttack@@UAEPAXI@Z:PROC		; CObjBaseAttack::`vector deleting destructor'
EXTRN	?GetCurrentState@CChaosCastle@@QAEHH@Z:PROC	; CChaosCastle::GetCurrentState
EXTRN	?GetFloor@CChaosCastle@@QAEHH@Z:PROC		; CChaosCastle::GetFloor
EXTRN	?GetState@CIllusionTempleEvent@@QAEEE@Z:PROC	; CIllusionTempleEvent::GetState
EXTRN	?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z:PROC ; CIllusionTempleEvent::Is1stSkillActive
EXTRN	?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z:PROC ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
EXTRN	?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z:PROC ; gObjAddBuffEffect
EXTRN	?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z:PROC ; gObjCheckUsedBuffEffect
EXTRN	?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z:PROC ; gObjGetTotalValueOfEffect
EXTRN	?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z:PROC ; gObjGetValueOfBuffIndex
EXTRN	?GetAttackRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z:PROC ; ClassCalc::GetAttackRate
EXTRN	?GetDefenseRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z:PROC ; ClassCalc::GetDefenseRate
EXTRN	?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z:PROC ; BuffSkillEffect::GetEffect
EXTRN	?modifyAttackRate@PvPBalance@@QAEXFFAAM@Z:PROC	; PvPBalance::modifyAttackRate
EXTRN	?modifyDefenseRate@PvPBalance@@QAEXFFAAM@Z:PROC	; PvPBalance::modifyDefenseRate
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__except_handler4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?MagicDamageC@@3VCMagicDamage@@A:BYTE		; MagicDamageC
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gNonPK@@3HA:DWORD				; gNonPK
EXTRN	?gPkLimitFree@@3HA:DWORD			; gPkLimitFree
EXTRN	?bIsIgnorePacketSpeedHackDetect@@3HA:DWORD	; bIsIgnorePacketSpeedHackDetect
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?g_fSuccessAttackRateOption@@3MA:DWORD		; g_fSuccessAttackRateOption
EXTRN	?g_bShieldComboMissOptionOn@@3HA:DWORD		; g_bShieldComboMissOptionOn
EXTRN	?g_ChaosCastle@@3VCChaosCastle@@A:BYTE		; g_ChaosCastle
EXTRN	?g_IllusionTemple@@3VCIllusionTempleEvent@@A:BYTE ; g_IllusionTemple
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	?g_ClassCalc@@3VClassCalc@@A:BYTE		; g_ClassCalc
EXTRN	?g_BuffSkillEffect@@3VBuffSkillEffect@@A:BYTE	; g_BuffSkillEffect
EXTRN	?g_PvPBalance@@3VPvPBalance@@A:BYTE		; g_PvPBalance
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CObjBaseAttack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObjBaseAttack@@8 DD FLAT:??_R0?AVCObjBaseAttack@@@8 ; CObjBaseAttack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R2CObjBaseAttack@@8
rdata$r	SEGMENT
??_R2CObjBaseAttack@@8 DD FLAT:??_R1A@?0A@EA@CObjBaseAttack@@8 ; CObjBaseAttack::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObjBaseAttack@@8
rdata$r	SEGMENT
??_R3CObjBaseAttack@@8 DD 00H				; CObjBaseAttack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObjBaseAttack@@@8
data$r	SEGMENT
??_R0?AVCObjBaseAttack@@@8 DD FLAT:??_7type_info@@6B@	; CObjBaseAttack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObjBaseAttack@@', 00H
data$r	ENDS
;	COMDAT ??_R4CObjBaseAttack@@6B@
rdata$r	SEGMENT
??_R4CObjBaseAttack@@6B@ DD 00H				; CObjBaseAttack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCObjBaseAttack@@@8
	DD	FLAT:??_R3CObjBaseAttack@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@
CONST	SEGMENT
??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@ DB 'error : De'
	DB	'cPartyMemberHPandMP %s %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@
CONST	SEGMENT
??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@ DB 'ObjBaseAttack.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@ DB '['
	DB	'Shield] ComboSkill Cancel! [%s][%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@
CONST	SEGMENT
??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@ DB '['
	DB	'%s][%s] Try Attack In Not Attack Area (%s,%d,%d) errortype = '
	DB	'%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CObjBaseAttack@@6B@
CONST	SEGMENT
??_7CObjBaseAttack@@6B@ DD FLAT:??_R4CObjBaseAttack@@6B@ ; CObjBaseAttack::`vftable'
	DD	FLAT:??_ECObjBaseAttack@@UAEPAXI@Z
	DD	FLAT:?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z DD 0fffffffeH
	DD	00H
	DD	0ffffffc8H
	DD	00H
	DD	0fffffffeH
	DD	FLAT:$LN56@MissCheck
	DD	FLAT:$LN41@MissCheck
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCObjBaseAttack@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCObjBaseAttack@@UAEPAXI@Z PROC			; CObjBaseAttack::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CObjBaseAttack@@UAE@XZ ; CObjBaseAttack::~CObjBaseAttack
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCObjBaseAttack@@UAEPAXI@Z ENDP			; CObjBaseAttack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
_TEXT	SEGMENT
_iDefenseRate$1$ = -40					; size = 4
_Level$1$ = -36						; size = 4
_iMSBDamage$2 = -32					; size = 4
_iAttackRate$1$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_lpObj$ = 8						; size = 4
_iAttackRate$2$ = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
_skillSuccess$ = 20					; size = 4
_magicsend$ = 24					; size = 4
_bAllMiss$ = 28						; size = 4
_byBarrageCount$ = 32					; size = 1
?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z PROC ; CObjBaseAttack::MissCheck, COMDAT
; _this$ = ecx

; 537  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a fe		 push	 -2			; fffffffeH
  00005	68 00 00 00 00	 push	 OFFSET __sehtable$?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
  0000a	68 00 00 00 00	 push	 OFFSET __except_handler4
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 18	 sub	 esp, 24			; 00000018H
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	31 45 f8	 xor	 DWORD PTR __$SEHRec$[ebp+16], eax
  00024	33 c5		 xor	 eax, ebp
  00026	50		 push	 eax
  00027	8d 45 f0	 lea	 eax, DWORD PTR __$SEHRec$[ebp+8]
  0002a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00030	89 65 e8	 mov	 DWORD PTR __$SEHRec$[ebp], esp

; 538  : #if(__NOVUS__==1)
; 539  : 	if( lpObj->Type == OBJ_MONSTER && lpTargetObj->Type == OBJ_USER )
; 540  : 	{
; 541  : 		if( g_SoulSystem.IsMap(lpTargetObj->MapNumber) && !g_SoulSystem.WithSoul(lpTargetObj) )
; 542  : 		{
; 543  : 			LogAddC(2, "[DEBUG] [SoulSystem] [%s] Miss ignored", lpTargetObj->Name);
; 544  : 			return 1;
; 545  : 		}
; 546  : 	}
; 547  : #endif
; 548  : 	__try

  00033	9b		 fwait
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$SEHRec$[ebp+20], 0

; 549  : 	{
; 550  : 		int iAttackRate = 0;
; 551  : 		int iDefenseRate = lpTargetObj->m_SuccessfulBlocking;

  0003b	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  0003e	8b 86 7c 06 00
	00		 mov	 eax, DWORD PTR [esi+1660]
  00044	89 45 d8	 mov	 DWORD PTR _iDefenseRate$1$[ebp], eax

; 552  : 
; 553  : 		int iMSBDamage = 0;

  00047	33 ff		 xor	 edi, edi
  00049	89 7d e0	 mov	 DWORD PTR _iMSBDamage$2[ebp], edi

; 554  : 
; 555  : 		if ( IT_MAP_RANGE(lpTargetObj->MapNumber) &&

  0004c	8a 8e 23 01 00
	00		 mov	 cl, BYTE PTR [esi+291]
  00052	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  00055	72 7e		 jb	 SHORT $LN44@MissCheck
  00057	b0 32		 mov	 al, 50			; 00000032H
  00059	3a c1		 cmp	 al, cl
  0005b	1b c0		 sbb	 eax, eax
  0005d	83 c0 01	 add	 eax, 1
  00060	74 73		 je	 SHORT $LN44@MissCheck
  00062	51		 push	 ecx
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  00068	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  0006d	3c 02		 cmp	 al, 2
  0006f	75 64		 jne	 SHORT $LN44@MissCheck

; 556  : 			 g_IllusionTemple.GetState(lpTargetObj->MapNumber) == IT_STATE_PLAYING)
; 557  : 		{
; 558  : 			if( lpTargetObj->Type == OBJ_USER )

  00071	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00075	75 34		 jne	 SHORT $LN5@MissCheck

; 559  : 			{
; 560  : 				if( g_IllusionTemple.Is1stSkillActive(lpTargetObj->iTempleIndex,lpTargetObj->MapNumber) )

  00077	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  0007e	50		 push	 eax
  0007f	ff b6 78 24 00
	00		 push	 DWORD PTR [esi+9336]
  00085	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  0008a	e8 00 00 00 00	 call	 ?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::Is1stSkillActive
  0008f	85 c0		 test	 eax, eax
  00091	74 18		 je	 SHORT $LN5@MissCheck

; 561  : 				{
; 562  : 					GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  00093	57		 push	 edi
  00094	57		 push	 edi
  00095	57		 push	 edi
  00096	57		 push	 edi
  00097	ff 36		 push	 DWORD PTR [esi]
  00099	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0009c	ff 30		 push	 DWORD PTR [eax]
  0009e	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000a3	83 c4 18	 add	 esp, 24			; 00000018H

; 563  : 					return FALSE;

  000a6	e9 9e 03 00 00	 jmp	 $LN53@MissCheck
$LN5@MissCheck:

; 564  : 				}
; 565  : 			}
; 566  : 			
; 567  : 			if( lpObj->PartyNumber == lpTargetObj->PartyNumber )

  000ab	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000ae	8b 83 0c 06 00
	00		 mov	 eax, DWORD PTR [ebx+1548]
  000b4	3b 86 0c 06 00
	00		 cmp	 eax, DWORD PTR [esi+1548]
  000ba	75 1c		 jne	 SHORT $LN6@MissCheck

; 568  : 			{
; 569  : 				GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  000bc	6a 00		 push	 0
  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	6a 00		 push	 0
  000c4	ff 36		 push	 DWORD PTR [esi]
  000c6	ff 33		 push	 DWORD PTR [ebx]
  000c8	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000cd	83 c4 18	 add	 esp, 24			; 00000018H

; 570  : 				return FALSE;

  000d0	e9 74 03 00 00	 jmp	 $LN53@MissCheck
$LN44@MissCheck:
  000d5	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
$LN6@MissCheck:

; 571  : 			}
; 572  : 		}	
; 573  : 
; 574  : 		if ( lpObj->Type == OBJ_USER )	// Miss for Uses

  000d8	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  000dc	0f 85 7f 01 00
	00		 jne	 $LN7@MissCheck

; 575  : 		{
; 576  : 			int Level = lpObj->Level + lpObj->MasterLevel;

  000e2	0f bf 8b a8 00
	00 00		 movsx	 ecx, WORD PTR [ebx+168]
  000e9	0f bf 83 96 00
	00 00		 movsx	 eax, WORD PTR [ebx+150]
  000f0	03 c8		 add	 ecx, eax
  000f2	89 4d dc	 mov	 DWORD PTR _Level$1$[ebp], ecx

; 577  : 
; 578  : 			if ( lpObj->Class == CLASS_DARKLORD ) // DL

  000f5	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]

; 579  : 			{
; 580  : 				iAttackRate = Level * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 6) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4  + ((lpObj->Leadership + lpObj->AddLeadership)/10);

  000fc	0f b7 8b fe 00
	00 00		 movzx	 ecx, WORD PTR [ebx+254]

; 577  : 
; 578  : 			if ( lpObj->Class == CLASS_DARKLORD ) // DL

  00103	83 f8 04	 cmp	 eax, 4
  00106	0f 85 8c 00 00
	00		 jne	 $LN9@MissCheck

; 579  : 			{
; 580  : 				iAttackRate = Level * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 6) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4  + ((lpObj->Leadership + lpObj->AddLeadership)/10);

  0010c	0f b7 83 d2 00
	00 00		 movzx	 eax, WORD PTR [ebx+210]
  00113	03 c8		 add	 ecx, eax
  00115	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00118	03 c0		 add	 eax, eax
  0011a	99		 cdq
  0011b	2b c2		 sub	 eax, edx
  0011d	8b f0		 mov	 esi, eax
  0011f	d1 fe		 sar	 esi, 1
  00121	0f b7 93 f6 00
	00 00		 movzx	 edx, WORD PTR [ebx+246]
  00128	0f b7 8b f4 00
	00 00		 movzx	 ecx, WORD PTR [ebx+244]
  0012f	03 d1		 add	 edx, ecx
  00131	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00136	f7 ea		 imul	 edx
  00138	c1 fa 02	 sar	 edx, 2
  0013b	8b c2		 mov	 eax, edx
  0013d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00140	03 f2		 add	 esi, edx
  00142	03 c6		 add	 eax, esi
  00144	89 45 e4	 mov	 DWORD PTR _iAttackRate$1$[ebp], eax
  00147	0f b7 83 fc 00
	00 00		 movzx	 eax, WORD PTR [ebx+252]
  0014e	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  00155	03 c1		 add	 eax, ecx
  00157	99		 cdq
  00158	83 e2 03	 and	 edx, 3
  0015b	03 c2		 add	 eax, edx
  0015d	c1 f8 02	 sar	 eax, 2
  00160	8b 75 e4	 mov	 esi, DWORD PTR _iAttackRate$1$[ebp]
  00163	03 f0		 add	 esi, eax
  00165	8b 45 dc	 mov	 eax, DWORD PTR _Level$1$[ebp]
  00168	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0016b	03 f0		 add	 esi, eax

; 581  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  0016d	0f b6 8b cf 14
	00 00		 movzx	 ecx, BYTE PTR [ebx+5327]
  00174	0f af ce	 imul	 ecx, esi
  00177	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0017c	f7 e9		 imul	 ecx
  0017e	c1 fa 05	 sar	 edx, 5
  00181	8b c2		 mov	 eax, edx
  00183	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00186	03 c2		 add	 eax, edx
  00188	03 f0		 add	 esi, eax
  0018a	89 75 e4	 mov	 DWORD PTR _iAttackRate$1$[ebp], esi
  0018d	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00190	8b 4d e4	 mov	 ecx, DWORD PTR _iAttackRate$1$[ebp]
  00193	e9 cf 00 00 00	 jmp	 $LN8@MissCheck
$LN9@MissCheck:

; 582  : 			}
; 583  : 			else if( lpObj->Class == CLASS_FIGHTER )

  00198	83 f8 06	 cmp	 eax, 6

; 584  : 			{
; 585  : 				iAttackRate = Level * 3 + ((lpObj->Dexterity + lpObj->AddDexterity) * 5) / 4 + ( lpObj->Strength + lpObj->AddStrength) / 6 ;

  0019b	0f b7 83 d2 00
	00 00		 movzx	 eax, WORD PTR [ebx+210]

; 582  : 			}
; 583  : 			else if( lpObj->Class == CLASS_FIGHTER )

  001a2	75 65		 jne	 SHORT $LN11@MissCheck

; 584  : 			{
; 585  : 				iAttackRate = Level * 3 + ((lpObj->Dexterity + lpObj->AddDexterity) * 5) / 4 + ( lpObj->Strength + lpObj->AddStrength) / 6 ;

  001a4	03 c8		 add	 ecx, eax
  001a6	8d 04 89	 lea	 eax, DWORD PTR [ecx+ecx*4]
  001a9	99		 cdq
  001aa	83 e2 03	 and	 edx, 3
  001ad	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  001b0	c1 fe 02	 sar	 esi, 2
  001b3	0f b7 93 fc 00
	00 00		 movzx	 edx, WORD PTR [ebx+252]
  001ba	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  001c1	03 d1		 add	 edx, ecx
  001c3	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001c8	f7 ea		 imul	 edx
  001ca	8b ca		 mov	 ecx, edx
  001cc	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001cf	03 f2		 add	 esi, edx
  001d1	03 ce		 add	 ecx, esi
  001d3	8b 45 dc	 mov	 eax, DWORD PTR _Level$1$[ebp]
  001d6	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001d9	03 c8		 add	 ecx, eax
  001db	89 4d e4	 mov	 DWORD PTR _iAttackRate$1$[ebp], ecx

; 586  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  001de	0f b6 8b cf 14
	00 00		 movzx	 ecx, BYTE PTR [ebx+5327]
  001e5	8b 75 e4	 mov	 esi, DWORD PTR _iAttackRate$1$[ebp]
  001e8	0f af ce	 imul	 ecx, esi
  001eb	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  001f0	f7 e9		 imul	 ecx
  001f2	c1 fa 05	 sar	 edx, 5
  001f5	8b c2		 mov	 eax, edx
  001f7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001fa	03 c2		 add	 eax, edx
  001fc	03 f0		 add	 esi, eax
  001fe	89 75 e4	 mov	 DWORD PTR _iAttackRate$1$[ebp], esi

; 587  : 			}
; 588  : 			else

  00201	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00204	8b 4d e4	 mov	 ecx, DWORD PTR _iAttackRate$1$[ebp]
  00207	eb 5e		 jmp	 SHORT $LN8@MissCheck
$LN11@MissCheck:

; 589  : 			{
; 590  : 				iAttackRate = Level * 5 + ((lpObj->Dexterity + lpObj->AddDexterity) * 3) / 2 + ( lpObj->Strength + lpObj->AddStrength) / 4 ;

  00209	03 c8		 add	 ecx, eax
  0020b	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0020e	99		 cdq
  0020f	2b c2		 sub	 eax, edx
  00211	d1 f8		 sar	 eax, 1
  00213	89 45 e4	 mov	 DWORD PTR _iAttackRate$1$[ebp], eax
  00216	0f b7 83 fc 00
	00 00		 movzx	 eax, WORD PTR [ebx+252]
  0021d	0f b7 8b d0 00
	00 00		 movzx	 ecx, WORD PTR [ebx+208]
  00224	03 c1		 add	 eax, ecx
  00226	99		 cdq
  00227	83 e2 03	 and	 edx, 3
  0022a	03 c2		 add	 eax, edx
  0022c	c1 f8 02	 sar	 eax, 2
  0022f	8b 55 e4	 mov	 edx, DWORD PTR _iAttackRate$1$[ebp]
  00232	03 d0		 add	 edx, eax
  00234	8b 45 dc	 mov	 eax, DWORD PTR _Level$1$[ebp]
  00237	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0023a	03 d0		 add	 edx, eax
  0023c	89 55 e4	 mov	 DWORD PTR _iAttackRate$1$[ebp], edx

; 591  : 				iAttackRate += iAttackRate * lpObj->SetOpImproveSuccessAttackRate / 100;

  0023f	0f b6 8b cf 14
	00 00		 movzx	 ecx, BYTE PTR [ebx+5327]
  00246	0f af ca	 imul	 ecx, edx
  00249	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0024e	f7 e9		 imul	 ecx
  00250	c1 fa 05	 sar	 edx, 5
  00253	8b c2		 mov	 eax, edx
  00255	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00258	03 c2		 add	 eax, edx
  0025a	8b 4d e4	 mov	 ecx, DWORD PTR _iAttackRate$1$[ebp]
  0025d	03 c8		 add	 ecx, eax

; 592  : 			}
; 593  : 		}
; 594  : 		else	// Miss for Monsters

  0025f	eb 06		 jmp	 SHORT $LN8@MissCheck
$LN7@MissCheck:

; 595  : 		{
; 596  : 			iAttackRate = lpObj->m_AttackRating;

  00261	8b 8b 68 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1640]
$LN8@MissCheck:
  00267	66 0f 6e c1	 movd	 xmm0, ecx

; 597  : 		}
; 598  : 
; 599  : 		iAttackRate += lpObj->m_MPSkillOpt.MpsAttackSuccessRate;

  0026b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0026e	f3 0f 58 83 b8
	06 00 00	 addss	 xmm0, DWORD PTR [ebx+1720]
  00276	f3 0f 2c c0	 cvttss2si eax, xmm0
  0027a	89 45 0c	 mov	 DWORD PTR _iAttackRate$2$[ebp], eax

; 600  : 
; 601  : 		if ( iAttackRate < iDefenseRate )

  0027d	3b 45 d8	 cmp	 eax, DWORD PTR _iDefenseRate$1$[ebp]

; 602  : 		{
; 603  : 			bAllMiss = TRUE;

  00280	8b 45 1c	 mov	 eax, DWORD PTR _bAllMiss$[ebp]

; 600  : 
; 601  : 		if ( iAttackRate < iDefenseRate )

  00283	7d 06		 jge	 SHORT $LN13@MissCheck

; 602  : 		{
; 603  : 			bAllMiss = TRUE;

  00285	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1
$LN13@MissCheck:

; 604  : 		}
; 605  : 
; 606  : 		if ( bAllMiss != FALSE )	// When All Miss

  0028b	39 38		 cmp	 DWORD PTR [eax], edi
  0028d	0f 84 b5 00 00
	00		 je	 $LN14@MissCheck

; 607  : 		{
; 608  : 			if ( (rand()%100) >= 5 )

  00293	e8 00 00 00 00	 call	 _rand
  00298	99		 cdq
  00299	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0029e	f7 f9		 idiv	 ecx
  002a0	83 fa 05	 cmp	 edx, 5
  002a3	0f 8c 49 01 00
	00		 jl	 $LN26@MissCheck

; 609  : 			{
; 610  : 				if( lpObj->Class == CLASS_FIGHTER && byBarrageCount != 0 )

  002a9	66 83 bb 90 00
	00 00 06	 cmp	 WORD PTR [ebx+144], 6
  002b1	75 62		 jne	 SHORT $LN46@MissCheck
  002b3	8a 4d 20	 mov	 cl, BYTE PTR _byBarrageCount$[ebp]
  002b6	84 c9		 test	 cl, cl
  002b8	74 5b		 je	 SHORT $LN46@MissCheck

; 611  : 				{
; 612  : 					if( skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 613  : 						skill == AT_SKILL_RAGEFIGHTER_DARKSIDE ||
; 614  : 						skill == AT_MSKILL_RF_UPERCUT1 ||
; 615  : 						skill == AT_MSKILL_RF_UPERCUT2 ||
; 616  : 						skill == AT_MSKILL_RF_DARKSIDE1 ||

  002ba	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  002bd	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  002c2	74 34		 je	 SHORT $LN20@MissCheck
  002c4	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  002c9	74 2d		 je	 SHORT $LN20@MissCheck
  002cb	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  002d0	74 26		 je	 SHORT $LN20@MissCheck
  002d2	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  002d7	74 1f		 je	 SHORT $LN20@MissCheck
  002d9	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  002de	74 18		 je	 SHORT $LN20@MissCheck
  002e0	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  002e5	74 11		 je	 SHORT $LN20@MissCheck

; 620  : 						{
; 621  : 							iMSBDamage |= 32;
; 622  : 						}
; 623  : 						else
; 624  : 						{
; 625  : 							iMSBDamage |= 16;
; 626  : 						}
; 627  : 					}
; 628  : 					else
; 629  : 					{
; 630  : 						if( (byBarrageCount%4) == 0 )

  002e7	0f b6 f9	 movzx	 edi, cl
  002ea	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  002f0	79 16		 jns	 SHORT $LN49@MissCheck
  002f2	4f		 dec	 edi
  002f3	83 cf fc	 or	 edi, -4			; fffffffcH

; 631  : 						{
; 632  : 							iMSBDamage |= 32;
; 633  : 						}
; 634  : 						else
; 635  : 						{
; 636  : 							iMSBDamage |= 16;

  002f6	eb 0f		 jmp	 SHORT $LN54@MissCheck
$LN20@MissCheck:

; 617  : 						skill == AT_MSKILL_RF_DARKSIDE2 )
; 618  : 					{
; 619  : 						if( (byBarrageCount%2) == 0 )

  002f8	0f b6 f9	 movzx	 edi, cl
  002fb	81 e7 01 00 00
	80		 and	 edi, -2147483647	; 80000001H
  00301	79 05		 jns	 SHORT $LN49@MissCheck
  00303	4f		 dec	 edi
  00304	83 cf fe	 or	 edi, -2			; fffffffeH
$LN54@MissCheck:
  00307	47		 inc	 edi
$LN49@MissCheck:
  00308	f7 df		 neg	 edi
  0030a	1b ff		 sbb	 edi, edi
  0030c	83 e7 f0	 and	 edi, -16		; fffffff0H
  0030f	83 c7 20	 add	 edi, 32			; 00000020H
  00312	89 7d e0	 mov	 DWORD PTR _iMSBDamage$2[ebp], edi
$LN46@MissCheck:

; 637  : 						}
; 638  : 					}
; 639  : 				}
; 640  : 
; 641  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, iMSBDamage, 0);

  00315	6a 00		 push	 0
  00317	57		 push	 edi
  00318	6a 00		 push	 0
  0031a	6a 00		 push	 0
  0031c	ff 36		 push	 DWORD PTR [esi]
  0031e	ff 33		 push	 DWORD PTR [ebx]
  00320	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  00325	83 c4 18	 add	 esp, 24			; 00000018H

; 642  : 
; 643  : 				if (magicsend != 0 )

  00328	83 7d 18 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  0032c	0f 84 17 01 00
	00		 je	 $LN53@MissCheck

; 644  : 				{
; 645  : 					GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index, skillSuccess);

  00332	ff 75 14	 push	 DWORD PTR _skillSuccess$[ebp]
  00335	ff 36		 push	 DWORD PTR [esi]
  00337	ff 75 10	 push	 DWORD PTR _skill$[ebp]
  0033a	53		 push	 ebx
  0033b	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  00340	83 c4 10	 add	 esp, 16			; 00000010H

; 646  : 				}
; 647  : 
; 648  : 				return FALSE;

  00343	e9 01 01 00 00	 jmp	 $LN53@MissCheck
$LN14@MissCheck:

; 649  : 			}
; 650  : 		}
; 651  : 		else	// if the is a chance  ot hit the target
; 652  : 		{
; 653  : 			if ( (rand()%iAttackRate) < iDefenseRate)

  00348	e8 00 00 00 00	 call	 _rand
  0034d	99		 cdq
  0034e	f7 7d 0c	 idiv	 DWORD PTR _iAttackRate$2$[ebp]
  00351	3b 55 d8	 cmp	 edx, DWORD PTR _iDefenseRate$1$[ebp]
  00354	0f 8d 98 00 00
	00		 jge	 $LN26@MissCheck

; 654  : 			{
; 655  : 				if( lpObj->Class == CLASS_FIGHTER && byBarrageCount != 0 )

  0035a	66 83 bb 90 00
	00 00 06	 cmp	 WORD PTR [ebx+144], 6
  00362	75 62		 jne	 SHORT $LN47@MissCheck
  00364	8a 4d 20	 mov	 cl, BYTE PTR _byBarrageCount$[ebp]
  00367	84 c9		 test	 cl, cl
  00369	74 5b		 je	 SHORT $LN47@MissCheck

; 656  : 				{
; 657  : 					if( skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 658  : 						skill == AT_SKILL_RAGEFIGHTER_DARKSIDE ||
; 659  : 						skill == AT_MSKILL_RF_UPERCUT1 ||
; 660  : 						skill == AT_MSKILL_RF_UPERCUT2 ||
; 661  : 						skill == AT_MSKILL_RF_DARKSIDE1 ||

  0036b	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  0036e	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  00373	74 34		 je	 SHORT $LN30@MissCheck
  00375	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  0037a	74 2d		 je	 SHORT $LN30@MissCheck
  0037c	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  00381	74 26		 je	 SHORT $LN30@MissCheck
  00383	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  00388	74 1f		 je	 SHORT $LN30@MissCheck
  0038a	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  0038f	74 18		 je	 SHORT $LN30@MissCheck
  00391	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  00396	74 11		 je	 SHORT $LN30@MissCheck

; 665  : 						{
; 666  : 							iMSBDamage |= 32;
; 667  : 						}
; 668  : 						else
; 669  : 						{
; 670  : 							iMSBDamage |= 16;
; 671  : 						}
; 672  : 					}
; 673  : 					else
; 674  : 					{
; 675  : 						if( (byBarrageCount%4) == 0 )

  00398	0f b6 f9	 movzx	 edi, cl
  0039b	81 e7 03 00 00
	80		 and	 edi, -2147483645	; 80000003H
  003a1	79 16		 jns	 SHORT $LN51@MissCheck
  003a3	4f		 dec	 edi
  003a4	83 cf fc	 or	 edi, -4			; fffffffcH

; 676  : 						{
; 677  : 							iMSBDamage |= 32;
; 678  : 						}
; 679  : 						else
; 680  : 						{
; 681  : 							iMSBDamage |= 16;

  003a7	eb 0f		 jmp	 SHORT $LN55@MissCheck
$LN30@MissCheck:

; 662  : 						skill == AT_MSKILL_RF_DARKSIDE2 )
; 663  : 					{
; 664  : 						if( (byBarrageCount%2) == 0 )

  003a9	0f b6 f9	 movzx	 edi, cl
  003ac	81 e7 01 00 00
	80		 and	 edi, -2147483647	; 80000001H
  003b2	79 05		 jns	 SHORT $LN51@MissCheck
  003b4	4f		 dec	 edi
  003b5	83 cf fe	 or	 edi, -2			; fffffffeH
$LN55@MissCheck:
  003b8	47		 inc	 edi
$LN51@MissCheck:
  003b9	f7 df		 neg	 edi
  003bb	1b ff		 sbb	 edi, edi
  003bd	83 e7 f0	 and	 edi, -16		; fffffff0H
  003c0	83 c7 20	 add	 edi, 32			; 00000020H
  003c3	89 7d e0	 mov	 DWORD PTR _iMSBDamage$2[ebp], edi
$LN47@MissCheck:

; 682  : 						}
; 683  : 					}
; 684  : 				}
; 685  : 
; 686  : 				GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, iMSBDamage, 0);

  003c6	6a 00		 push	 0
  003c8	57		 push	 edi
  003c9	6a 00		 push	 0
  003cb	6a 00		 push	 0
  003cd	ff 36		 push	 DWORD PTR [esi]
  003cf	ff 33		 push	 DWORD PTR [ebx]
  003d1	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  003d6	83 c4 18	 add	 esp, 24			; 00000018H

; 687  : 
; 688  : 				if ( magicsend != 0 )

  003d9	83 7d 18 00	 cmp	 DWORD PTR _magicsend$[ebp], 0
  003dd	74 6a		 je	 SHORT $LN53@MissCheck

; 689  : 				{
; 690  : 					GCMagicAttackNumberSend(lpObj, skill, lpTargetObj->m_Index,  skillSuccess);

  003df	ff 75 14	 push	 DWORD PTR _skillSuccess$[ebp]
  003e2	ff 36		 push	 DWORD PTR [esi]
  003e4	ff 75 10	 push	 DWORD PTR _skill$[ebp]
  003e7	53		 push	 ebx
  003e8	e8 00 00 00 00	 call	 ?GCMagicAttackNumberSend@@YAXPAUOBJECTSTRUCT@@GHE@Z ; GCMagicAttackNumberSend
  003ed	83 c4 10	 add	 esp, 16			; 00000010H

; 691  : 				}
; 692  : 
; 693  : 				return FALSE;

  003f0	eb 57		 jmp	 SHORT $LN53@MissCheck
$LN26@MissCheck:

; 694  : 			}
; 695  : 		}
; 696  : 	}

  003f2	9b		 fwait
  003f3	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH

; 701  : 	}
; 702  : 
; 703  : 	return TRUE;

  003fa	b8 01 00 00 00	 mov	 eax, 1

; 704  : }

  003ff	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00402	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00409	59		 pop	 ecx
  0040a	5f		 pop	 edi
  0040b	5e		 pop	 esi
  0040c	5b		 pop	 ebx
  0040d	8b e5		 mov	 esp, ebp
  0040f	5d		 pop	 ebp
  00410	c2 1c 00	 ret	 28			; 0000001cH
$LN40@MissCheck:
$LN56@MissCheck:

; 697  : 	__except (lpObj->Level=1,-1)

  00413	b9 01 00 00 00	 mov	 ecx, 1
  00418	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0041b	66 89 88 96 00
	00 00		 mov	 WORD PTR [eax+150], cx
  00422	83 c8 ff	 or	 eax, -1
$LN52@MissCheck:
$LN42@MissCheck:
  00425	c3		 ret	 0
$LN41@MissCheck:
  00426	8b 65 e8	 mov	 esp, DWORD PTR __$SEHRec$[ebp]

; 698  : 	{
; 699  : 		LogAdd(lMsg.Get(MSGGET(2, 12)), lpObj->Name);

  00429	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  0042c	83 c0 5d	 add	 eax, 93			; 0000005dH
  0042f	50		 push	 eax
  00430	68 0c 02 00 00	 push	 524			; 0000020cH
  00435	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0043a	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0043f	50		 push	 eax
  00440	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00446	83 c4 08	 add	 esp, 8
$LN53@MissCheck:

; 700  : 		return FALSE;

  00449	9b		 fwait
  0044a	c7 45 fc fe ff
	ff ff		 mov	 DWORD PTR __$SEHRec$[ebp+20], -2 ; fffffffeH
  00451	33 c0		 xor	 eax, eax

; 704  : }

  00453	8b 4d f0	 mov	 ecx, DWORD PTR __$SEHRec$[ebp+8]
  00456	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0045d	59		 pop	 ecx
  0045e	5f		 pop	 edi
  0045f	5e		 pop	 esi
  00460	5b		 pop	 ebx
  00461	8b e5		 mov	 esp, ebp
  00463	5d		 pop	 ebp
  00464	c2 1c 00	 ret	 28			; 0000001cH
?MissCheck@CObjBaseAttack@@UAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ENDP ; CObjBaseAttack::MissCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CObjBaseAttack::GetPartyMemberCount, COMDAT
; _this$ = ecx

; 1021 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1022 : 	LPOBJ lpPartyObj;
; 1023 : 	int partynum = lpObj->PartyNumber;

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00006	8b 8a 0c 06 00
	00		 mov	 ecx, DWORD PTR [edx+1548]

; 1024 : 
; 1025 : 	if ( OBJMAX_RANGE(partynum) == FALSE )

  0000c	85 c9		 test	 ecx, ecx
  0000e	78 69		 js	 SHORT $LN16@GetPartyMe
  00010	33 c0		 xor	 eax, eax
  00012	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  00018	0f 9e c0	 setle	 al
  0001b	85 c0		 test	 eax, eax
  0001d	74 5a		 je	 SHORT $LN16@GetPartyMe

; 1029 : 	}
; 1030 : 
; 1031 : 	int partycount = gParty.m_PartyS[partynum].Count;
; 1032 : 	int retcount = 0;

  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	8b c1		 mov	 eax, ecx
  00023	57		 push	 edi
  00024	33 ff		 xor	 edi, edi
  00026	c1 e0 04	 shl	 eax, 4
  00029	2b c1		 sub	 eax, ecx
  0002b	8d 5f 05	 lea	 ebx, DWORD PTR [edi+5]
  0002e	8d 34 85 0c 00
	00 00		 lea	 esi, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
$LL4@GetPartyMe:

; 1035 : 	{
; 1036 : 		int memberindex = gParty.m_PartyS[partynum].Number[n];

  00035	8b 06		 mov	 eax, DWORD PTR [esi]

; 1037 : 
; 1038 : 		if ( memberindex >= 0 )

  00037	85 c0		 test	 eax, eax
  00039	78 2d		 js	 SHORT $LN2@GetPartyMe

; 1039 : 		{
; 1040 : 			lpPartyObj = &gObj[memberindex];

  0003b	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048

; 1041 : 
; 1042 : 			if ( lpObj->MapNumber == lpPartyObj->MapNumber )

  00041	8a 82 23 01 00
	00		 mov	 al, BYTE PTR [edx+291]
  00047	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0004d	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  00053	75 13		 jne	 SHORT $LN2@GetPartyMe

; 1043 : 			{
; 1044 : 				int dis = gObjCalDistance(lpObj, &gObj[memberindex]);

  00055	51		 push	 ecx
  00056	52		 push	 edx
  00057	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  0005c	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  0005f	83 c4 08	 add	 esp, 8

; 1045 : 				
; 1046 : 				if ( dis < MAX_PARTY_DISTANCE_EFFECT )

  00062	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00065	7d 01		 jge	 SHORT $LN2@GetPartyMe

; 1047 : 				{
; 1048 : 					retcount++;

  00067	47		 inc	 edi
$LN2@GetPartyMe:

; 1033 : 
; 1034 : 	for ( int n=0;n<MAX_USER_IN_PARTY;n++)

  00068	83 c6 04	 add	 esi, 4
  0006b	83 eb 01	 sub	 ebx, 1
  0006e	75 c5		 jne	 SHORT $LL4@GetPartyMe

; 1049 : 				}
; 1050 : 			}
; 1051 : 		}
; 1052 : 	}
; 1053 : 
; 1054 : 	return retcount;

  00070	8b c7		 mov	 eax, edi
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 1055 : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN16@GetPartyMe:

; 1026 : 	{
; 1027 : 		LogAdd("error : DecPartyMemberHPandMP %s %d", __FILE__, __LINE__);

  00079	68 03 04 00 00	 push	 1027			; 00000403H
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NHPGBLMH@ObjBaseAttack?4cpp?$AA@
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@CEJHKGA@error?5?3?5DecPartyMemberHPandMP?5?$CFs@
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1028 : 		return 0;

  00091	33 c0		 xor	 eax, eax

; 1055 : }

  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?GetPartyMemberCount@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CObjBaseAttack::GetPartyMemberCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAH@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_nEffectValue$1 = 12					; size = 4
_lpTargetObj$ = 12					; size = 4
_MsgDamage$ = 16					; size = 4
?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAH@Z PROC ; CObjBaseAttack::GetTargetDefense, COMDAT
; _this$ = ecx

; 915  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 916  : 	int targetdefense = lpTargetObj->m_Defense;

  00004	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	57		 push	 edi

; 917  : 
; 918  : 	if( lpTargetObj->m_MPSkillOpt.MpsWingDefenseIncrease > 0.0f )

  0000b	f3 0f 10 8e 48
	08 00 00	 movss	 xmm1, DWORD PTR [esi+2120]
  00013	0f 2f c8	 comiss	 xmm1, xmm0
  00016	8b be 74 06 00
	00		 mov	 edi, DWORD PTR [esi+1652]
  0001c	76 17		 jbe	 SHORT $LN2@GetTargetD

; 919  : 	{
; 920  : 		targetdefense += lpTargetObj->m_MPSkillOpt.MpsWingDefenseIncrease/2.0f;

  0001e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00026	66 0f 6e c7	 movd	 xmm0, edi
  0002a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0002d	f3 0f 58 c8	 addss	 xmm1, xmm0
  00031	f3 0f 2c f9	 cvttss2si edi, xmm1
$LN2@GetTargetD:

; 921  : 	}
; 922  : 
; 923  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER )

  00035	53		 push	 ebx
  00036	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00039	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  0003d	75 14		 jne	 SHORT $LN3@GetTargetD
  0003f	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00043	75 0e		 jne	 SHORT $LN3@GetTargetD

; 924  : 	{
; 925  : 		targetdefense += lpTargetObj->m_ItemOptionExFor380.OpAddDefense / 2;

  00045	0f bf 86 58 24
	00 00		 movsx	 eax, WORD PTR [esi+9304]
  0004c	99		 cdq
  0004d	2b c2		 sub	 eax, edx
  0004f	d1 f8		 sar	 eax, 1
  00051	03 f8		 add	 edi, eax
$LN3@GetTargetD:

; 926  : 	}
; 927  : 
; 928  : #if (ENABLETEST_MUUN == 1)
; 929  : 	int nMuunItemEffectValue = 0;
; 930  : 	if (g_CMuunSystem.GetMuunItemValueOfOptType(lpTargetObj, 2, &nMuunItemEffectValue, 0)) {
; 931  : 		targetdefense += 10 * nMuunItemEffectValue / 20;
; 932  : 	}
; 933  : #endif
; 934  : 
; 935  : 	int ReduceDefense = 0;
; 936  : 
; 937  : 	ReduceDefense = gObjGetTotalValueOfEffect(lpTargetObj,ADD_OPTION_DEFENSEDOWN);

  00053	6a 17		 push	 23			; 00000017H
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  0005b	8b c8		 mov	 ecx, eax
  0005d	83 c4 08	 add	 esp, 8

; 938  : 	targetdefense -= (targetdefense *  ReduceDefense)/100;

  00060	0f af cf	 imul	 ecx, edi
  00063	b8 e1 7a 14 ae	 mov	 eax, -1374389535	; ae147ae1H
  00068	f7 e9		 imul	 ecx
  0006a	c1 fa 05	 sar	 edx, 5
  0006d	8b c2		 mov	 eax, edx
  0006f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00072	03 c2		 add	 eax, edx
  00074	03 f8		 add	 edi, eax

; 939  : 	
; 940  : 	if ( lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementDefenseTime > 0 )

  00076	83 be 7c 20 00
	00 00		 cmp	 DWORD PTR [esi+8316], 0
  0007d	7e 0e		 jle	 SHORT $LN5@GetTargetD

; 941  : 	{
; 942  : 		targetdefense += lpTargetObj->m_MonsterSkillElementInfo.m_iSkillElementDefense;

  0007f	03 be 78 20 00
	00		 add	 edi, DWORD PTR [esi+8312]

; 943  : 
; 944  : 		if ( targetdefense <0 )

  00085	b8 00 00 00 00	 mov	 eax, 0
  0008a	0f 48 f8	 cmovs	 edi, eax
$LN5@GetTargetD:

; 945  : 			targetdefense = 0;
; 946  : 
; 947  : 	}
; 948  : 
; 949  : 	int percentdamage = 0;
; 950  : 
; 951  : 	if ( lpObj->pInventory[7].IsItem() != FALSE )

  0008d	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  00093	33 f6		 xor	 esi, esi
  00095	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  0009b	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  000a0	85 c0		 test	 eax, eax
  000a2	0f 84 8f 00 00
	00		 je	 $LN8@GetTargetD

; 952  : 	{
; 953  : 		percentdamage = lpObj->pInventory[7].IsWingOpGetOnePercentDamage();

  000a8	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  000ae	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  000b4	e8 00 00 00 00	 call	 ?IsWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::IsWingOpGetOnePercentDamage

; 954  : 		percentdamage += lpObj->pInventory[7].Is25WingOpGetOnePercentDamage();

  000b9	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  000bf	8b f0		 mov	 esi, eax
  000c1	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  000c7	e8 00 00 00 00	 call	 ?Is25WingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::Is25WingOpGetOnePercentDamage

; 955  : 		percentdamage += lpObj->pInventory[7].Is3rdWingOpGetOnePercentDamage();

  000cc	8b 8b c0 11 00
	00		 mov	 ecx, DWORD PTR [ebx+4544]
  000d2	03 f0		 add	 esi, eax
  000d4	81 c1 cc 05 00
	00		 add	 ecx, 1484		; 000005ccH
  000da	e8 00 00 00 00	 call	 ?Is3rdWingOpGetOnePercentDamage@CItem@@QAEHXZ ; CItem::Is3rdWingOpGetOnePercentDamage
  000df	03 f0		 add	 esi, eax

; 956  : 
; 957  : 		if( lpObj->pInventory[7].m_Type == ITEMGET(12,266) &&
; 958  : 			lpObj->pInventory[7].m_Durability > 0.0f &&

  000e1	ba 0a 19 00 00	 mov	 edx, 6410		; 0000190aH
  000e6	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  000ec	0f 57 c9	 xorps	 xmm1, xmm1
  000ef	0f b7 88 d2 05
	00 00		 movzx	 ecx, WORD PTR [eax+1490]
  000f6	66 3b ca	 cmp	 cx, dx
  000f9	75 19		 jne	 SHORT $LN7@GetTargetD
  000fb	f3 0f 10 80 f0
	05 00 00	 movss	 xmm0, DWORD PTR [eax+1520]
  00103	0f 2f c1	 comiss	 xmm0, xmm1
  00106	76 0c		 jbe	 SHORT $LN7@GetTargetD
  00108	f6 80 5f 06 00
	00 01		 test	 BYTE PTR [eax+1631], 1
  0010f	74 03		 je	 SHORT $LN7@GetTargetD

; 959  : 			(lpObj->pInventory[7].m_NewOption&1) == 1 )
; 960  : 		{
; 961  : 			percentdamage += 5;

  00111	83 c6 05	 add	 esi, 5
$LN7@GetTargetD:

; 962  : 		}
; 963  : 
; 964  : 		if( lpObj->pInventory[7].m_Type == ITEMGET(12,267) &&
; 965  : 			lpObj->pInventory[7].m_Durability > 0.0f &&

  00114	ba 0b 19 00 00	 mov	 edx, 6411		; 0000190bH
  00119	66 3b ca	 cmp	 cx, dx
  0011c	75 19		 jne	 SHORT $LN8@GetTargetD
  0011e	f3 0f 10 80 f0
	05 00 00	 movss	 xmm0, DWORD PTR [eax+1520]
  00126	0f 2f c1	 comiss	 xmm0, xmm1
  00129	76 0c		 jbe	 SHORT $LN8@GetTargetD
  0012b	f6 80 5f 06 00
	00 02		 test	 BYTE PTR [eax+1631], 2
  00132	74 03		 je	 SHORT $LN8@GetTargetD

; 966  : 			(lpObj->pInventory[7].m_NewOption&2) == 2 )
; 967  : 		{
; 968  : 			percentdamage += 4;

  00134	83 c6 04	 add	 esi, 4
$LN8@GetTargetD:

; 969  : 		}
; 970  : 
; 971  : #if (CUSTOM_WINGS == 1)
; 972  : 		if( lpObj->pInventory[7].m_Durability > 0 )
; 973  : 		{
; 974  : 			if( lpObj->pInventory[7].m_Type >= ITEMGET(12,440) &&
; 975  : 				lpObj->pInventory[7].m_Type <= ITEMGET(12,445) )
; 976  : 			{
; 977  : 				if( (lpObj->pInventory[7].m_NewOption & 1) == 1 )
; 978  : 				{
; 979  : 					percentdamage = 8;
; 980  : 				}
; 981  : 			}
; 982  : 		}
; 983  : #endif
; 984  : 	}
; 985  : 
; 986  : 	if ( gObjCheckUsedBuffEffect(lpObj,BUFF_IGNORE_DEFENSE) )

  00137	68 81 00 00 00	 push	 129			; 00000081H
  0013c	53		 push	 ebx
  0013d	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00142	83 c4 08	 add	 esp, 8
  00145	84 c0		 test	 al, al
  00147	74 1e		 je	 SHORT $LN9@GetTargetD

; 987  : 	{
; 988  : 		int nEffectValue = 0;
; 989  : 		gObjGetValueOfBuffIndex(lpObj,BUFF_IGNORE_DEFENSE,&nEffectValue,0);

  00149	6a 00		 push	 0
  0014b	8d 45 0c	 lea	 eax, DWORD PTR _nEffectValue$1[ebp]
  0014e	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR _nEffectValue$1[ebp], 0
  00155	50		 push	 eax
  00156	68 81 00 00 00	 push	 129			; 00000081H
  0015b	53		 push	 ebx
  0015c	e8 00 00 00 00	 call	 ?gObjGetValueOfBuffIndex@@YA_NPAUOBJECTSTRUCT@@HPAH1@Z ; gObjGetValueOfBuffIndex
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 990  : 		percentdamage += nEffectValue;

  00164	03 75 0c	 add	 esi, DWORD PTR _nEffectValue$1[ebp]
$LN9@GetTargetD:

; 991  : 	}
; 992  : 
; 993  : 	percentdamage += lpObj->SetOpIgnoreDefense;

  00167	0f b6 83 cc 14
	00 00		 movzx	 eax, BYTE PTR [ebx+5324]
  0016e	0f 57 c0	 xorps	 xmm0, xmm0

; 994  : 
; 995  : 	if ( lpObj->m_MPSkillOpt.MpsIgnoreDef > 0.0f )

  00171	f3 0f 10 8b 10
	07 00 00	 movss	 xmm1, DWORD PTR [ebx+1808]
  00179	03 f0		 add	 esi, eax
  0017b	0f 2f c8	 comiss	 xmm1, xmm0
  0017e	5b		 pop	 ebx
  0017f	76 0f		 jbe	 SHORT $LN10@GetTargetD

; 996  : 	{
; 997  : 		percentdamage += lpObj->m_MPSkillOpt.MpsIgnoreDef;

  00181	66 0f 6e c6	 movd	 xmm0, esi
  00185	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00188	f3 0f 58 c1	 addss	 xmm0, xmm1
  0018c	f3 0f 2c f0	 cvttss2si esi, xmm0
$LN10@GetTargetD:

; 998  : 	}
; 999  : 
; 1000 : 	if ( percentdamage != 0)

  00190	85 f6		 test	 esi, esi
  00192	74 22		 je	 SHORT $LN15@GetTargetD

; 1001 : 	{
; 1002 : 		if ( (rand()%100) <= percentdamage)

  00194	e8 00 00 00 00	 call	 _rand
  00199	99		 cdq
  0019a	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0019f	f7 f9		 idiv	 ecx
  001a1	3b d6		 cmp	 edx, esi
  001a3	7f 11		 jg	 SHORT $LN15@GetTargetD

; 1003 : 		{
; 1004 : 			targetdefense = 0;
; 1005 : 			MsgDamage = 1;

  001a5	8b 4d 10	 mov	 ecx, DWORD PTR _MsgDamage$[ebp]

; 1006 : 		}
; 1007 : 	}
; 1008 : 
; 1009 : 
; 1010 : 
; 1011 : 	return targetdefense;

  001a8	33 c0		 xor	 eax, eax
  001aa	5f		 pop	 edi
  001ab	5e		 pop	 esi
  001ac	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1

; 1012 : }

  001b2	5d		 pop	 ebp
  001b3	c2 0c 00	 ret	 12			; 0000000cH
$LN15@GetTargetD:

; 1006 : 		}
; 1007 : 	}
; 1008 : 
; 1009 : 
; 1010 : 
; 1011 : 	return targetdefense;

  001b6	8b c7		 mov	 eax, edi
  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi

; 1012 : }

  001ba	5d		 pop	 ebp
  001bb	c2 0c 00	 ret	 12			; 0000000cH
?GetTargetDefense@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0AAH@Z ENDP ; CObjBaseAttack::GetTargetDefense
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
; File c:\users\michel\desktop\source\gameserver\source\comboattack.h
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z
_TEXT	SEGMENT
_iAttackRate$ = -8					; size = 4
_iDefenseRate$ = -4					; size = 4
_TargetLevel$1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
_Level$1$ = 12						; size = 4
_lpTargetObj$ = 12					; size = 4
_skill$ = 16						; size = 4
_skillSuccess$ = 20					; size = 4
_magicsend$ = 24					; size = 4
_bAllMiss$ = 28						; size = 4
_byBarrageCount$ = 32					; size = 1
?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z PROC ; CObjBaseAttack::MissCheckPvP, COMDAT
; _this$ = ecx

; 708  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 709  : 	float iAttackRate = 0;
; 710  : 	float iDefenseRate = 0;
; 711  : 	int iAttackSuccessRate = 0;
; 712  : 
; 713  : 	if ( IT_MAP_RANGE(lpTargetObj->MapNumber) &&

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  0000e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iAttackRate$[ebp], 0
  00015	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _iDefenseRate$[ebp], 0
  0001c	8a 8f 23 01 00
	00		 mov	 cl, BYTE PTR [edi+291]
  00022	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  00025	0f 82 8b 00 00
	00		 jb	 $LN5@MissCheckP
  0002b	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00030	3a c1		 cmp	 al, cl
  00032	1b c0		 sbb	 eax, eax
  00034	83 c0 01	 add	 eax, 1
  00037	74 7d		 je	 SHORT $LN5@MissCheckP
  00039	51		 push	 ecx
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  0003f	e8 00 00 00 00	 call	 ?GetState@CIllusionTempleEvent@@QAEEE@Z ; CIllusionTempleEvent::GetState
  00044	3c 02		 cmp	 al, 2
  00046	75 6e		 jne	 SHORT $LN5@MissCheckP

; 714  : 			 g_IllusionTemple.GetState(lpTargetObj->MapNumber) == IT_STATE_PLAYING)
; 715  : 	{
; 716  : 		if( lpTargetObj->Type == OBJ_USER )

  00048	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  0004c	75 3c		 jne	 SHORT $LN4@MissCheckP

; 717  : 		{
; 718  : 			if( g_IllusionTemple.Is1stSkillActive(lpTargetObj->iTempleIndex,lpTargetObj->MapNumber) )

  0004e	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_IllusionTemple@@3VCIllusionTempleEvent@@A ; g_IllusionTemple
  0005a	50		 push	 eax
  0005b	ff b7 78 24 00
	00		 push	 DWORD PTR [edi+9336]
  00061	e8 00 00 00 00	 call	 ?Is1stSkillActive@CIllusionTempleEvent@@QAEHHE@Z ; CIllusionTempleEvent::Is1stSkillActive
  00066	85 c0		 test	 eax, eax
  00068	74 20		 je	 SHORT $LN4@MissCheckP

; 719  : 			{
; 720  : 				GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  0006a	6a 00		 push	 0
  0006c	6a 00		 push	 0
  0006e	6a 00		 push	 0
  00070	6a 00		 push	 0
  00072	ff 37		 push	 DWORD PTR [edi]
  00074	8b c6		 mov	 eax, esi
  00076	ff 30		 push	 DWORD PTR [eax]
  00078	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  0007d	83 c4 18	 add	 esp, 24			; 00000018H

; 721  : 				return FALSE;

  00080	33 c0		 xor	 eax, eax
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi

; 908  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 1c 00	 ret	 28			; 0000001cH
$LN4@MissCheckP:

; 722  : 			}
; 723  : 		}
; 724  : 		
; 725  : 		if( lpObj->PartyNumber == lpTargetObj->PartyNumber )

  0008a	8b 86 0c 06 00
	00		 mov	 eax, DWORD PTR [esi+1548]
  00090	3b 87 0c 06 00
	00		 cmp	 eax, DWORD PTR [edi+1548]
  00096	75 1e		 jne	 SHORT $LN5@MissCheckP

; 726  : 		{
; 727  : 			GCDamageSend(lpObj->m_Index,lpTargetObj->m_Index,0,0,0,0);

  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	6a 00		 push	 0
  0009e	6a 00		 push	 0
  000a0	ff 37		 push	 DWORD PTR [edi]
  000a2	ff 36		 push	 DWORD PTR [esi]
  000a4	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  000a9	83 c4 18	 add	 esp, 24			; 00000018H

; 728  : 			return FALSE;

  000ac	33 c0		 xor	 eax, eax
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi

; 908  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 1c 00	 ret	 28			; 0000001cH
$LN5@MissCheckP:

; 729  : 		}
; 730  : 	}	
; 731  : 	
; 732  : 	int Level = lpObj->Level + lpObj->MasterLevel;

  000b6	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]

; 733  : 
; 734  : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 735  : 	iAttackRate = g_ClassCalc.GetAttackRate(lpObj);

  000bd	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  000c2	53		 push	 ebx
  000c3	0f bf 9e a8 00
	00 00		 movsx	 ebx, WORD PTR [esi+168]
  000ca	03 d8		 add	 ebx, eax
  000cc	56		 push	 esi
  000cd	89 5d 0c	 mov	 DWORD PTR _Level$1$[ebp], ebx
  000d0	e8 00 00 00 00	 call	 ?GetAttackRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetAttackRate

; 736  : #else
; 737  : 	if( lpObj->Class == CLASS_KNIGHT )
; 738  : 	{
; 739  : 		iAttackRate = (float)(Level * 3 + ( lpObj->Dexterity * 45) / 10);
; 740  : 	}
; 741  : 	else if ( lpObj->Class == CLASS_DARKLORD )
; 742  : 	{
; 743  : 		iAttackRate = (float)(Level * 3 + ( lpObj->Dexterity * 4 ));
; 744  : 	}
; 745  : 	else if ( lpObj->Class == CLASS_ELF )
; 746  : 	{
; 747  : 		iAttackRate = (float)(Level * 3 + ( lpObj->Dexterity * 6 ) / 10);
; 748  : 	}
; 749  : 	else if ( lpObj->Class == CLASS_MAGUMSA )
; 750  : 	{
; 751  : 		iAttackRate = (float)(Level * 3 + ( lpObj->Dexterity * 35 ) / 10);
; 752  : 	}
; 753  : 	else if ( lpObj->Class == CLASS_WIZARD )
; 754  : 	{
; 755  : 		iAttackRate = (float)(Level * 3 + ( lpObj->Dexterity * 4 ));
; 756  : 	}
; 757  : 	else if( lpObj->Class == CLASS_SUMMONER )
; 758  : 	{
; 759  : 		iAttackRate = (float)(Level * 3 + ( lpObj->Dexterity * 35 ) / 10);
; 760  : 	}
; 761  : 	else if( lpObj->Class == CLASS_FIGHTER )
; 762  : 	{
; 763  : 		iAttackRate = (float)(Level * 2.6f + ( lpObj->Dexterity * 36 ) / 10);
; 764  : 	}
; 765  : #endif
; 766  : 
; 767  : 	int TargetLevel = lpTargetObj->Level + lpTargetObj->MasterLevel;

  000d5	0f bf 97 a8 00
	00 00		 movsx	 edx, WORD PTR [edi+168]

; 768  : 
; 769  : #if (ENABLE_CUSTOM_CLASSCALC == 1)
; 770  : 	iDefenseRate = g_ClassCalc.GetDefenseRate(lpTargetObj);

  000dc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ClassCalc@@3VClassCalc@@A ; g_ClassCalc
  000e1	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  000e8	03 d0		 add	 edx, eax
  000ea	d9 5d f8	 fstp	 DWORD PTR _iAttackRate$[ebp]
  000ed	57		 push	 edi
  000ee	89 55 08	 mov	 DWORD PTR _TargetLevel$1$[ebp], edx
  000f1	e8 00 00 00 00	 call	 ?GetDefenseRate@ClassCalc@@QAEMPAUOBJECTSTRUCT@@@Z ; ClassCalc::GetDefenseRate

; 771  : #else
; 772  : 	if ( lpTargetObj->Class == CLASS_KNIGHT )
; 773  : 	{
; 774  : 		iDefenseRate = (float)(TargetLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula
; 775  : 	}
; 776  : 	else if ( lpTargetObj->Class == CLASS_DARKLORD )
; 777  : 	{
; 778  : 		iDefenseRate = (float)(TargetLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula
; 779  : 	}
; 780  : 	else if ( lpTargetObj->Class == CLASS_ELF )
; 781  : 	{
; 782  : 		iDefenseRate = (float)(TargetLevel * 2 + lpTargetObj->Dexterity / 10);	// #formula
; 783  : 	}
; 784  : 	else if ( lpTargetObj->Class == CLASS_MAGUMSA )
; 785  : 	{
; 786  : 		iDefenseRate = (float)(TargetLevel * 2 + lpTargetObj->Dexterity / 4);	// #formula
; 787  : 	}
; 788  : 	else if ( lpTargetObj->Class == CLASS_WIZARD )
; 789  : 	{
; 790  : 		iDefenseRate = (float)(TargetLevel * 2 + lpTargetObj->Dexterity / 4);	// #formula
; 791  : 	}
; 792  : 	else if ( lpTargetObj->Class == CLASS_SUMMONER )
; 793  : 	{
; 794  : 		iDefenseRate = (float)(TargetLevel * 2 + lpTargetObj->Dexterity / 2);	// #formula
; 795  : 	}
; 796  : 	else if ( lpTargetObj->Class == CLASS_FIGHTER )
; 797  : 	{
; 798  : 		iDefenseRate = (float)(TargetLevel*1.5f + lpTargetObj->Dexterity / 5);
; 799  : 	}
; 800  : #endif
; 801  : 
; 802  : #if (ENABLE_CUSTOM_PVPBALANCE == 1)
; 803  : 	g_PvPBalance.modifyAttackRate(lpObj->m_Index, lpTargetObj->m_Index, iAttackRate);

  000f6	8d 45 f8	 lea	 eax, DWORD PTR _iAttackRate$[ebp]
  000f9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PvPBalance@@3VPvPBalance@@A ; g_PvPBalance
  000fe	50		 push	 eax
  000ff	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00102	50		 push	 eax
  00103	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00106	50		 push	 eax
  00107	d9 5d fc	 fstp	 DWORD PTR _iDefenseRate$[ebp]
  0010a	e8 00 00 00 00	 call	 ?modifyAttackRate@PvPBalance@@QAEXFFAAM@Z ; PvPBalance::modifyAttackRate

; 804  : 	g_PvPBalance.modifyDefenseRate(lpObj->m_Index, lpTargetObj->m_Index, iDefenseRate);

  0010f	8d 45 fc	 lea	 eax, DWORD PTR _iDefenseRate$[ebp]
  00112	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PvPBalance@@3VPvPBalance@@A ; g_PvPBalance
  00117	50		 push	 eax
  00118	0f b7 07	 movzx	 eax, WORD PTR [edi]
  0011b	50		 push	 eax
  0011c	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ?modifyDefenseRate@PvPBalance@@QAEXFFAAM@Z ; PvPBalance::modifyDefenseRate
  00125	0f 57 c0	 xorps	 xmm0, xmm0

; 805  : #endif
; 806  : 
; 807  : 	if ( iAttackRate <= 0.0f || iDefenseRate <= 0.0f || lpObj->Level <= 0 || lpTargetObj->Level <= 0 )

  00128	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _iAttackRate$[ebp]
  0012c	0f 83 47 02 00
	00		 jae	 $LN7@MissCheckP
  00132	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _iDefenseRate$[ebp]
  00136	0f 83 3d 02 00
	00		 jae	 $LN7@MissCheckP
  0013c	66 83 be 96 00
	00 00 00	 cmp	 WORD PTR [esi+150], 0
  00144	0f 8e 2f 02 00
	00		 jle	 $LN7@MissCheckP
  0014a	66 83 bf 96 00
	00 00 00	 cmp	 WORD PTR [edi+150], 0
  00152	0f 8e 21 02 00
	00		 jle	 $LN7@MissCheckP

; 809  : 
; 810  : 	int defdecrate = gObjGetTotalValueOfEffect(lpTargetObj,ADD_OPTION_DECDEFRATE);

  00158	6a 69		 push	 105			; 00000069H
  0015a	57		 push	 edi
  0015b	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect
  00160	83 c4 08	 add	 esp, 8

; 811  : 
; 812  : 	if( defdecrate )	{

  00163	85 c0		 test	 eax, eax
  00165	74 21		 je	 SHORT $LN8@MissCheckP

; 813  : 		iDefenseRate -= iDefenseRate*defdecrate/100;

  00167	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _iDefenseRate$[ebp]
  0016c	66 0f 6e c0	 movd	 xmm0, eax
  00170	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00173	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00177	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  0017f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00183	f3 0f 11 4d fc	 movss	 DWORD PTR _iDefenseRate$[ebp], xmm1
$LN8@MissCheckP:

; 814  : 	}
; 815  : 
; 816  : 	int attdecrate = gObjGetTotalValueOfEffect(lpTargetObj,ADD_OPTION_DECATTACKRATE);

  00188	6a 6a		 push	 106			; 0000006aH
  0018a	57		 push	 edi
  0018b	e8 00 00 00 00	 call	 ?gObjGetTotalValueOfEffect@@YAHPAUOBJECTSTRUCT@@H@Z ; gObjGetTotalValueOfEffect

; 820  : 			attdecrate = 100;
; 821  : 		iAttackRate -= iAttackRate*attdecrate/100;

  00190	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _iAttackRate$[ebp]
  00195	83 c4 08	 add	 esp, 8
  00198	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@42c80000
  001a0	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  001a5	85 c0		 test	 eax, eax
  001a7	74 18		 je	 SHORT $LN9@MissCheckP

; 817  : 
; 818  : 	if( attdecrate )	{
; 819  : 		if( attdecrate > 100 )

  001a9	3b c1		 cmp	 eax, ecx
  001ab	0f 4f c1	 cmovg	 eax, ecx
  001ae	66 0f 6e c0	 movd	 xmm0, eax

; 820  : 			attdecrate = 100;
; 821  : 		iAttackRate -= iAttackRate*attdecrate/100;

  001b2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001b5	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001b9	f3 0f 5e c5	 divss	 xmm0, xmm5
  001bd	f3 0f 5c c8	 subss	 xmm1, xmm0
$LN9@MissCheckP:

; 822  : 	}
; 823  : 
; 824  : 	iAttackRate += lpObj->m_ItemOptionExFor380.OpAddAttackSuccessRatePVP;
; 825  : 	iDefenseRate += lpTargetObj->m_ItemOptionExFor380.OpAddDefenseSuccessRatePvP;
; 826  : 
; 827  : 	iAttackRate += lpObj->m_JewelOfHarmonyEffect.HJOpAddAttackSuccessRatePVP;
; 828  : 	iDefenseRate += lpTargetObj->m_JewelOfHarmonyEffect.HJOpAddDefenseSuccessRatePvP;
; 829  : 
; 830  : 	iAttackRate += lpObj->m_MPSkillOpt.MpsPVPAttackDmgRate;

  001c1	0f bf 86 52 24
	00 00		 movsx	 eax, WORD PTR [esi+9298]

; 831  : 	iDefenseRate += lpTargetObj->m_MPSkillOpt.MpsPVPBlockingRate;
; 832  : 
; 833  : 	float iExpressionA = ( iAttackRate * 10000.0f ) / ( iAttackRate + iDefenseRate );	// #formula

  001c8	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@461c4000

; 834  : 	float iExpressionB = ( Level * 10000.0f ) / ( Level + TargetLevel );	// #formula

  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _TargetLevel$1$[ebp]
  001d3	66 0f 6e e0	 movd	 xmm4, eax
  001d7	0f bf 86 3a 24
	00 00		 movsx	 eax, WORD PTR [esi+9274]
  001de	0f 5b e4	 cvtdq2ps xmm4, xmm4
  001e1	66 0f 6e c0	 movd	 xmm0, eax
  001e5	0f bf 87 56 24
	00 00		 movsx	 eax, WORD PTR [edi+9302]
  001ec	f3 0f 58 e1	 addss	 xmm4, xmm1
  001f0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001f3	66 0f 6e c8	 movd	 xmm1, eax
  001f7	0f bf 87 4c 24
	00 00		 movsx	 eax, WORD PTR [edi+9292]
  001fe	f3 0f 58 e0	 addss	 xmm4, xmm0
  00202	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00205	66 0f 6e c0	 movd	 xmm0, eax
  00209	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  0020c	f3 0f 58 4d fc	 addss	 xmm1, DWORD PTR _iDefenseRate$[ebp]
  00211	f3 0f 58 a6 c0
	06 00 00	 addss	 xmm4, DWORD PTR [esi+1728]
  00219	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 835  : 
; 836  : 	iExpressionA /= 10000.0f;
; 837  : 	iExpressionB /= 10000.0f;
; 838  : 
; 839  : 	iAttackSuccessRate = int(100.0f * iExpressionA * g_fSuccessAttackRateOption * iExpressionB);
; 840  : 
; 841  : 	if ( (TargetLevel - Level) >= 100 )

  0021c	2b 4d 0c	 sub	 ecx, DWORD PTR _Level$1$[ebp]
  0021f	f3 0f 11 65 f8	 movss	 DWORD PTR _iAttackRate$[ebp], xmm4
  00224	0f 28 dc	 movaps	 xmm3, xmm4
  00227	f3 0f 59 da	 mulss	 xmm3, xmm2
  0022b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0022f	66 0f 6e c0	 movd	 xmm0, eax
  00233	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00236	f3 0f 58 8f c4
	06 00 00	 addss	 xmm1, DWORD PTR [edi+1732]
  0023e	f3 0f 11 4d fc	 movss	 DWORD PTR _iDefenseRate$[ebp], xmm1
  00243	f3 0f 58 cc	 addss	 xmm1, xmm4
  00247	f3 0f 5e d9	 divss	 xmm3, xmm1
  0024b	66 0f 6e cb	 movd	 xmm1, ebx
  0024f	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00252	f3 0f 5e da	 divss	 xmm3, xmm2
  00256	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0025a	f3 0f 59 dd	 mulss	 xmm3, xmm5
  0025e	f3 0f 5e c8	 divss	 xmm1, xmm0
  00262	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR ?g_fSuccessAttackRateOption@@3MA
  0026a	f3 0f 5e ca	 divss	 xmm1, xmm2
  0026e	f3 0f 59 d9	 mulss	 xmm3, xmm1
  00272	f3 0f 2c db	 cvttss2si ebx, xmm3
  00276	83 f9 64	 cmp	 ecx, 100		; 00000064H
  00279	7c 05		 jl	 SHORT $LN11@MissCheckP

; 842  : 	{
; 843  : 		iAttackSuccessRate -= 5;

  0027b	83 eb 05	 sub	 ebx, 5
  0027e	eb 18		 jmp	 SHORT $LN15@MissCheckP
$LN11@MissCheckP:

; 844  : 	}
; 845  : 	else if ( (TargetLevel - Level ) >= 200 )

  00280	81 f9 c8 00 00
	00		 cmp	 ecx, 200		; 000000c8H
  00286	7c 05		 jl	 SHORT $LN13@MissCheckP

; 846  : 	{
; 847  : 		iAttackSuccessRate -= 10;

  00288	83 eb 0a	 sub	 ebx, 10			; 0000000aH
  0028b	eb 0b		 jmp	 SHORT $LN15@MissCheckP
$LN13@MissCheckP:

; 848  : 	}
; 849  : 	else if ( (TargetLevel - Level) >= 300 )

  0028d	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  00293	7c 03		 jl	 SHORT $LN15@MissCheckP

; 850  : 	{
; 851  : 		iAttackSuccessRate -= 15;

  00295	83 eb 0f	 sub	 ebx, 15			; 0000000fH
$LN15@MissCheckP:

; 852  : 	}
; 853  : 
; 854  : 	DWORD dwRate = rand() % 100;

  00298	e8 00 00 00 00	 call	 _rand
  0029d	99		 cdq
  0029e	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  002a3	f7 f9		 idiv	 ecx

; 855  : 
; 856  : 	if ( dwRate > (DWORD)iAttackSuccessRate )

  002a5	3b d3		 cmp	 edx, ebx
  002a7	0f 86 d7 00 00
	00		 jbe	 $LN16@MissCheckP

; 857  : 	{
; 858  : 		int MsgDamage = 0;

  002ad	33 c0		 xor	 eax, eax

; 859  : 
; 860  : 		if( lpObj->Class == CLASS_FIGHTER && byBarrageCount != 0 )

  002af	66 83 be 90 00
	00 00 06	 cmp	 WORD PTR [esi+144], 6
  002b7	75 5d		 jne	 SHORT $LN21@MissCheckP
  002b9	8a 4d 20	 mov	 cl, BYTE PTR _byBarrageCount$[ebp]
  002bc	84 c9		 test	 cl, cl
  002be	74 56		 je	 SHORT $LN21@MissCheckP

; 861  : 		{
; 862  : 			if( skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 863  : 				skill == AT_SKILL_RAGEFIGHTER_DARKSIDE ||
; 864  : 				skill == AT_MSKILL_RF_UPERCUT1 ||
; 865  : 				skill == AT_MSKILL_RF_UPERCUT2 ||
; 866  : 				skill == AT_MSKILL_RF_DARKSIDE1 ||

  002c0	8b 45 10	 mov	 eax, DWORD PTR _skill$[ebp]
  002c3	3d 05 01 00 00	 cmp	 eax, 261		; 00000105H
  002c8	74 33		 je	 SHORT $LN20@MissCheckP
  002ca	3d 07 01 00 00	 cmp	 eax, 263		; 00000107H
  002cf	74 2c		 je	 SHORT $LN20@MissCheckP
  002d1	3d 28 02 00 00	 cmp	 eax, 552		; 00000228H
  002d6	74 25		 je	 SHORT $LN20@MissCheckP
  002d8	3d 2b 02 00 00	 cmp	 eax, 555		; 0000022bH
  002dd	74 1e		 je	 SHORT $LN20@MissCheckP
  002df	3d 2f 02 00 00	 cmp	 eax, 559		; 0000022fH
  002e4	74 17		 je	 SHORT $LN20@MissCheckP
  002e6	3d 33 02 00 00	 cmp	 eax, 563		; 00000233H
  002eb	74 10		 je	 SHORT $LN20@MissCheckP

; 870  : 				{
; 871  : 					MsgDamage |= 32;
; 872  : 				}
; 873  : 				else
; 874  : 				{
; 875  : 					MsgDamage |= 16;
; 876  : 				}
; 877  : 			}
; 878  : 			else
; 879  : 			{
; 880  : 				if( (byBarrageCount%4) == 0 )

  002ed	0f b6 c1	 movzx	 eax, cl
  002f0	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  002f5	79 15		 jns	 SHORT $LN35@MissCheckP
  002f7	48		 dec	 eax
  002f8	83 c8 fc	 or	 eax, -4			; fffffffcH

; 881  : 				{
; 882  : 					MsgDamage |= 32;
; 883  : 				}
; 884  : 				else
; 885  : 				{
; 886  : 					MsgDamage |= 16;

  002fb	eb 0e		 jmp	 SHORT $LN36@MissCheckP
$LN20@MissCheckP:

; 867  : 				skill == AT_MSKILL_RF_DARKSIDE2 )
; 868  : 			{
; 869  : 				if( (byBarrageCount%2) == 0 )

  002fd	0f b6 c1	 movzx	 eax, cl
  00300	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00305	79 05		 jns	 SHORT $LN35@MissCheckP
  00307	48		 dec	 eax
  00308	83 c8 fe	 or	 eax, -2			; fffffffeH
$LN36@MissCheckP:
  0030b	40		 inc	 eax
$LN35@MissCheckP:
  0030c	f7 d8		 neg	 eax
  0030e	1b c0		 sbb	 eax, eax
  00310	83 e0 f0	 and	 eax, -16		; fffffff0H
  00313	83 c0 20	 add	 eax, 32			; 00000020H
$LN21@MissCheckP:

; 887  : 				}
; 888  : 			}
; 889  : 		}
; 890  : 
; 891  : 		GCDamageSend(lpObj->m_Index, lpTargetObj->m_Index, 0, 0, MsgDamage, 0);

  00316	6a 00		 push	 0
  00318	50		 push	 eax
  00319	6a 00		 push	 0
  0031b	6a 00		 push	 0
  0031d	ff 37		 push	 DWORD PTR [edi]
  0031f	ff 36		 push	 DWORD PTR [esi]
  00321	e8 00 00 00 00	 call	 ?GCDamageSend@@YAXHHHHHH@Z ; GCDamageSend
  00326	83 c4 18	 add	 esp, 24			; 00000018H

; 892  : 
; 893  : 		if ( g_bShieldComboMissOptionOn == TRUE )

  00329	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bShieldComboMissOptionOn@@3HA, 1 ; g_bShieldComboMissOptionOn
  00330	75 47		 jne	 SHORT $LN7@MissCheckP

; 894  : 		{
; 895  : 			if ( lpObj->comboSkill.ProgressIndex >= 0 )

  00332	83 be 8c 00 00
	00 00		 cmp	 DWORD PTR [esi+140], 0
  00339	7c 3e		 jl	 SHORT $LN7@MissCheckP

; 896  : 			{
; 897  : 				LogAddTD("[Shield] ComboSkill Cancel! [%s][%s]",

  0033b	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0033e	50		 push	 eax
  0033f	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00342	50		 push	 eax
  00343	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@JAMJMJON@?$FLShield?$FN?5ComboSkill?5Cancel?$CB?5?$FL?$CFs?$FN@
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0034e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\michel\desktop\source\gameserver\source\comboattack.h

; 19   : 		this->dwTime = 0;

  00351	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0

; 20   : 		this->Skill[0] = -1;

  0035b	83 c8 ff	 or	 eax, -1
  0035e	66 89 86 84 00
	00 00		 mov	 WORD PTR [esi+132], ax

; 21   : 		this->Skill[1] = -1;

  00365	66 89 86 86 00
	00 00		 mov	 WORD PTR [esi+134], ax

; 22   : 		this->Skill[2] = -1;

  0036c	66 89 86 88 00
	00 00		 mov	 WORD PTR [esi+136], ax

; 23   : 		this->ProgressIndex = -1;

  00373	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
$LN7@MissCheckP:
  00379	5b		 pop	 ebx
  0037a	5f		 pop	 edi
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp

; 808  : 		return FALSE;

  0037b	33 c0		 xor	 eax, eax
  0037d	5e		 pop	 esi

; 908  : }

  0037e	8b e5		 mov	 esp, ebp
  00380	5d		 pop	 ebp
  00381	c2 1c 00	 ret	 28			; 0000001cH
$LN16@MissCheckP:
  00384	5b		 pop	 ebx
  00385	5f		 pop	 edi

; 898  : 					lpObj->AccountID, lpObj->Name);
; 899  : 
; 900  : 				lpObj->comboSkill.Init();
; 901  : 			}
; 902  : 		}
; 903  : 
; 904  : 		return FALSE;
; 905  : 	}
; 906  : 
; 907  : 	return TRUE;

  00386	b8 01 00 00 00	 mov	 eax, 1
  0038b	5e		 pop	 esi

; 908  : }

  0038c	8b e5		 mov	 esp, ebp
  0038e	5d		 pop	 ebp
  0038f	c2 1c 00	 ret	 28			; 0000001cH
?MissCheckPvP@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0HHHAAHE@Z ENDP ; CObjBaseAttack::MissCheckPvP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_i$1$ = 12						; size = 4
_fValue$ = 12						; size = 4
_lpTargetObj$ = 12					; size = 4
_fValue$1$ = 16						; size = 4
_skill$ = 16						; size = 4
?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z PROC ; CObjBaseAttack::ResistanceCheck, COMDAT
; _this$ = ecx

; 350  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 351  : #if (GS_CASTLE == 1)
; 352  : 	if( lpTargetObj->Type != OBJ_USER )

  00004	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00007	8a 4f 50	 mov	 cl, BYTE PTR [edi+80]
  0000a	80 f9 01	 cmp	 cl, 1
  0000d	0f 84 97 00 00
	00		 je	 $LN9@Resistance

; 353  : 	{
; 354  : 		if(lpTargetObj->Class == 277
; 355  : 			|| lpTargetObj->Class == 283
; 356  : 			|| lpTargetObj->Class == 288
; 357  : 			|| lpTargetObj->Class == 278
; 358  : 			|| lpTargetObj->Class == 215
; 359  : 			|| lpTargetObj->Class == 216
; 360  : 			|| lpTargetObj->Class == 217
; 361  : 			|| lpTargetObj->Class == 218
; 362  : 			|| lpTargetObj->Class == 219)

  00013	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  0001a	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  0001f	66 3b c2	 cmp	 ax, dx
  00022	74 50		 je	 SHORT $LN7@Resistance
  00024	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  00029	66 3b c2	 cmp	 ax, dx
  0002c	74 46		 je	 SHORT $LN7@Resistance
  0002e	ba 20 01 00 00	 mov	 edx, 288		; 00000120H
  00033	66 3b c2	 cmp	 ax, dx
  00036	74 3c		 je	 SHORT $LN7@Resistance
  00038	ba 16 01 00 00	 mov	 edx, 278		; 00000116H
  0003d	66 3b c2	 cmp	 ax, dx
  00040	74 32		 je	 SHORT $LN7@Resistance
  00042	ba d7 00 00 00	 mov	 edx, 215		; 000000d7H
  00047	66 3b c2	 cmp	 ax, dx
  0004a	74 28		 je	 SHORT $LN7@Resistance
  0004c	ba d8 00 00 00	 mov	 edx, 216		; 000000d8H
  00051	66 3b c2	 cmp	 ax, dx
  00054	74 1e		 je	 SHORT $LN7@Resistance
  00056	ba d9 00 00 00	 mov	 edx, 217		; 000000d9H
  0005b	66 3b c2	 cmp	 ax, dx
  0005e	74 14		 je	 SHORT $LN7@Resistance
  00060	ba da 00 00 00	 mov	 edx, 218		; 000000daH
  00065	66 3b c2	 cmp	 ax, dx
  00068	74 0a		 je	 SHORT $LN7@Resistance
  0006a	ba db 00 00 00	 mov	 edx, 219		; 000000dbH
  0006f	66 3b c2	 cmp	 ax, dx
  00072	75 07		 jne	 SHORT $LN6@Resistance
$LN7@Resistance:

; 363  : 		{
; 364  : 			return FALSE;

  00074	33 c0		 xor	 eax, eax
  00076	5f		 pop	 edi

; 530  : }

  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
$LN6@Resistance:

; 365  : 		}
; 366  : 	}
; 367  : 
; 368  : 	if( lpTargetObj->Type != OBJ_USER )

  0007b	80 f9 01	 cmp	 cl, 1
  0007e	74 2a		 je	 SHORT $LN9@Resistance

; 369  : 	{
; 370  : 		if(CRYWOLF_ALTAR_CLASS_RANGE(lpTargetObj->Class) || ((lpTargetObj->Class == 204) ? TRUE : FALSE))

  00080	0f b7 8f 90 00
	00 00		 movzx	 ecx, WORD PTR [edi+144]
  00087	b8 cd 00 00 00	 mov	 eax, 205		; 000000cdH
  0008c	66 3b c8	 cmp	 cx, ax
  0008f	72 0f		 jb	 SHORT $LN64@Resistance
  00091	b8 d1 00 00 00	 mov	 eax, 209		; 000000d1H
  00096	66 3b c1	 cmp	 ax, cx
  00099	1b c0		 sbb	 eax, eax
  0009b	83 c0 01	 add	 eax, 1
  0009e	75 d4		 jne	 SHORT $LN7@Resistance
$LN64@Resistance:
  000a0	b8 cc 00 00 00	 mov	 eax, 204		; 000000ccH
  000a5	66 3b c8	 cmp	 cx, ax
  000a8	74 ca		 je	 SHORT $LN7@Resistance
$LN9@Resistance:
  000aa	53		 push	 ebx

; 371  : 		{
; 372  : 			return FALSE;
; 373  : 		}
; 374  : 	}
; 375  : 
; 376  : #endif
; 377  : 
; 378  : 	if ( skill == AT_SKILL_DARKHORSE_ATTACK
; 379  : 		|| skill == AT_MSKILL_DL_EARTHSHAKE1
; 380  : 		|| skill == AT_MSKILL_DL_EARTHSHAKE2 )

  000ab	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  000ae	56		 push	 esi
  000af	8b 75 10	 mov	 esi, DWORD PTR _skill$[ebp]
  000b2	83 fe 3e	 cmp	 esi, 62			; 0000003eH
  000b5	74 10		 je	 SHORT $LN12@Resistance
  000b7	81 fe 00 02 00
	00		 cmp	 esi, 512		; 00000200H
  000bd	74 08		 je	 SHORT $LN12@Resistance
  000bf	81 fe 04 02 00
	00		 cmp	 esi, 516		; 00000204H
  000c5	75 0c		 jne	 SHORT $LN11@Resistance
$LN12@Resistance:

; 381  : 	{
; 382  : 		gObjBackSpring2(lpTargetObj, lpObj, 3);

  000c7	6a 03		 push	 3
  000c9	53		 push	 ebx
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 ?gObjBackSpring2@@YAHPAUOBJECTSTRUCT@@0H@Z ; gObjBackSpring2
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@Resistance:

; 383  : 	}
; 384  : 
; 385  : 	float fValue = 0;

  000d3	0f 57 c0	 xorps	 xmm0, xmm0
  000d6	f3 0f 11 45 10	 movss	 DWORD PTR _fValue$1$[ebp], xmm0

; 386  : 
; 387  : 	if( skill == AT_MSKILL_DL_EARTHSHAKE1 )

  000db	81 fe 00 02 00
	00		 cmp	 esi, 512		; 00000200H
  000e1	0f 85 ab 00 00
	00		 jne	 $LN16@Resistance

; 388  : 	{
; 389  : 		for(int i = 0; i < MAX_MAGIC; i++)

  000e7	33 c0		 xor	 eax, eax
  000e9	33 f6		 xor	 esi, esi
  000eb	89 45 0c	 mov	 DWORD PTR _i$1$[ebp], eax
  000ee	66 90		 npad	 2
$LL4@Resistance:

; 390  : 		{
; 391  : 			if( lpObj->Magic[i].IsMagic() )

  000f0	8b 8b a8 06 00
	00		 mov	 ecx, DWORD PTR [ebx+1704]
  000f6	03 ce		 add	 ecx, esi
  000f8	e8 00 00 00 00	 call	 ?IsMagic@CMagicInf@@QAEHXZ ; CMagicInf::IsMagic
  000fd	85 c0		 test	 eax, eax
  000ff	74 10		 je	 SHORT $LN2@Resistance

; 392  : 			{
; 393  : 				if( lpObj->Magic[i].m_Skill == skill )

  00101	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  00107	81 7c 06 08 00
	02 00 00	 cmp	 DWORD PTR [esi+eax+8], 512 ; 00000200H
  0010f	74 10		 je	 SHORT $LN60@Resistance
$LN2@Resistance:

; 388  : 	{
; 389  : 		for(int i = 0; i < MAX_MAGIC; i++)

  00111	ff 45 0c	 inc	 DWORD PTR _i$1$[ebp]
  00114	83 c6 18	 add	 esi, 24			; 00000018H
  00117	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  0011d	7c d1		 jl	 SHORT $LL4@Resistance
  0011f	eb 39		 jmp	 SHORT $LN96@Resistance
$LN60@Resistance:

; 394  : 				{
; 395  : 					fValue = g_MasterSkillSystem.GetMasterSkillValue(MagicDamageC.SkillGet(skill),lpObj->Magic[i].m_Level);

  00121	8b 45 0c	 mov	 eax, DWORD PTR _i$1$[ebp]
  00124	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00127	8b 83 a8 06 00
	00		 mov	 eax, DWORD PTR [ebx+1704]
  0012d	0f b6 44 c8 04	 movzx	 eax, BYTE PTR [eax+ecx*8+4]
  00132	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00137	50		 push	 eax
  00138	68 00 02 00 00	 push	 512			; 00000200H
  0013d	e8 00 00 00 00	 call	 ?SkillGet@CMagicDamage@@QAEHH@Z ; CMagicDamage::SkillGet
  00142	50		 push	 eax
  00143	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00148	e8 00 00 00 00	 call	 ?GetMasterSkillValue@CMasterLevelSkillTreeSystem@@QAEMHH@Z ; CMasterLevelSkillTreeSystem::GetMasterSkillValue
  0014d	d9 5d 0c	 fstp	 DWORD PTR _fValue$[ebp]
  00150	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fValue$[ebp]
  00155	f3 0f 11 45 10	 movss	 DWORD PTR _fValue$1$[ebp], xmm0
$LN96@Resistance:

; 396  : 					break;
; 397  : 				}
; 398  : 			}
; 399  : 		}
; 400  : 
; 401  : 		float fRand = rand()%100;

  0015a	e8 00 00 00 00	 call	 _rand
  0015f	99		 cdq
  00160	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00165	f7 f9		 idiv	 ecx

; 402  : 
; 403  : 		if( fRand < fValue )

  00167	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fValue$1$[ebp]
  0016c	66 0f 6e c2	 movd	 xmm0, edx
  00170	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00173	0f 2f c8	 comiss	 xmm1, xmm0
  00176	0f 86 1d 03 00
	00		 jbe	 $LN55@Resistance

; 404  : 		{
; 405  : 			gObjBackSpring(lpTargetObj,lpObj);

  0017c	53		 push	 ebx
  0017d	57		 push	 edi
  0017e	e8 00 00 00 00	 call	 ?gObjBackSpring@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjBackSpring
  00183	83 c4 08	 add	 esp, 8

; 526  : 			return TRUE;
; 527  : 		}
; 528  : 	}
; 529  : 	return TRUE;

  00186	b8 01 00 00 00	 mov	 eax, 1
  0018b	5e		 pop	 esi
  0018c	5b		 pop	 ebx
  0018d	5f		 pop	 edi

; 530  : }

  0018e	5d		 pop	 ebp
  0018f	c2 0c 00	 ret	 12			; 0000000cH
$LN16@Resistance:

; 406  : 		}
; 407  : 	}
; 408  : 
; 409  : 	if ( skill == 19 || skill == 20 || skill == 21 || skill == 22 || skill == 23 ||
; 410  : 		 skill == AT_MSKILL_DK_CYCLONE1 || skill == AT_MSKILL_DK_SLASH1 || skill == AT_MSKILL_DK_FALLINGSLASH1 ||
; 411  : 		 skill == AT_MSKILL_DK_LUNGE1 || skill == AT_MSKILL_MG_CYCLONE1 ||
; 412  : 		 skill == AT_SKILL_RAGEFIGHTER_WEAPON1 || skill == AT_SKILL_RAGEFIGHTER_WEAPON2 ||
; 413  : 		 skill == AT_SKILL_RAGEFIGHTER_CHAINDRIVE || skill == AT_SKILL_PHOENIXSHOT )

  00192	83 fe 13	 cmp	 esi, 19			; 00000013H
  00195	0f 84 ea 02 00
	00		 je	 $LN19@Resistance
  0019b	83 fe 14	 cmp	 esi, 20			; 00000014H
  0019e	0f 84 e1 02 00
	00		 je	 $LN19@Resistance
  001a4	83 fe 15	 cmp	 esi, 21			; 00000015H
  001a7	0f 84 d8 02 00
	00		 je	 $LN19@Resistance
  001ad	83 fe 16	 cmp	 esi, 22			; 00000016H
  001b0	0f 84 cf 02 00
	00		 je	 $LN19@Resistance
  001b6	83 fe 17	 cmp	 esi, 23			; 00000017H
  001b9	0f 84 c6 02 00
	00		 je	 $LN19@Resistance
  001bf	81 fe 46 01 00
	00		 cmp	 esi, 326		; 00000146H
  001c5	0f 84 ba 02 00
	00		 je	 $LN19@Resistance
  001cb	81 fe 47 01 00
	00		 cmp	 esi, 327		; 00000147H
  001d1	0f 84 ae 02 00
	00		 je	 $LN19@Resistance
  001d7	81 fe 48 01 00
	00		 cmp	 esi, 328		; 00000148H
  001dd	0f 84 a2 02 00
	00		 je	 $LN19@Resistance
  001e3	81 fe 49 01 00
	00		 cmp	 esi, 329		; 00000149H
  001e9	0f 84 96 02 00
	00		 je	 $LN19@Resistance
  001ef	81 fe df 01 00
	00		 cmp	 esi, 479		; 000001dfH
  001f5	0f 84 8a 02 00
	00		 je	 $LN19@Resistance
  001fb	81 fe 04 01 00
	00		 cmp	 esi, 260		; 00000104H
  00201	0f 84 7e 02 00
	00		 je	 $LN19@Resistance
  00207	81 fe 05 01 00
	00		 cmp	 esi, 261		; 00000105H
  0020d	0f 84 72 02 00
	00		 je	 $LN19@Resistance
  00213	81 fe 06 01 00
	00		 cmp	 esi, 262		; 00000106H
  00219	0f 84 66 02 00
	00		 je	 $LN19@Resistance
  0021f	81 fe 0e 01 00
	00		 cmp	 esi, 270		; 0000010eH
  00225	0f 84 5a 02 00
	00		 je	 $LN19@Resistance

; 416  : 	}
; 417  : 	else if ( skill == AT_SKILL_THUNDER || skill == AT_MSKILL_DW_LIGHTNING1 || skill == AT_MSKILL_MG_LIGHTNING1 )	// Lightning

  0022b	83 fe 03	 cmp	 esi, 3
  0022e	0f 84 39 02 00
	00		 je	 $LN22@Resistance
  00234	81 fe 7b 01 00
	00		 cmp	 esi, 379		; 0000017bH
  0023a	0f 84 2d 02 00
	00		 je	 $LN22@Resistance
  00240	81 fe e0 01 00
	00		 cmp	 esi, 480		; 000001e0H
  00246	0f 84 21 02 00
	00		 je	 $LN22@Resistance

; 426  : 	}
; 427  : 	else if ( skill == AT_SKILL_POISON || skill == AT_MSKILL_DW_POISON1 )

  0024c	83 fe 01	 cmp	 esi, 1
  0024f	0f 84 f6 01 00
	00		 je	 $LN26@Resistance
  00255	81 fe 80 01 00
	00		 cmp	 esi, 384		; 00000180H
  0025b	0f 84 ea 01 00
	00		 je	 $LN26@Resistance

; 436  : 			}
; 437  : 			else
; 438  : 			{
; 439  : 				return FALSE;
; 440  : 			}
; 441  : 		}
; 442  : 		else
; 443  : 		{
; 444  : 			return FALSE;
; 445  : 		}
; 446  : 	}
; 447  : 	else if ( skill == AT_SKILL_EXPPOISON || skill == AT_MSKILL_DW_DECAY1 ) // Death Poison

  00261	83 fe 26	 cmp	 esi, 38			; 00000026H
  00264	0f 84 9c 01 00
	00		 je	 $LN33@Resistance
  0026a	81 fe 83 01 00
	00		 cmp	 esi, 387		; 00000183H
  00270	0f 84 90 01 00
	00		 je	 $LN33@Resistance

; 455  : 				return TRUE;
; 456  : 			}
; 457  : 			else
; 458  : 			{
; 459  : 				return FALSE;
; 460  : 			}
; 461  : 		}
; 462  : 		else
; 463  : 		{
; 464  : 			return FALSE;
; 465  : 		}
; 466  : 	}
; 467  : 	else if ( skill == AT_SKILL_SLOW || skill == AT_MSKILL_DW_ICE1 ||
; 468  : 			  skill == AT_SKILL_EXPICE || skill == AT_MSKILL_MG_ICE1 ||
; 469  : 			  skill == AT_MSKILL_MG_ICE2 ||
; 470  : 			  skill == AT_MSKILL_DW_ICESTORM1 || skill == AT_MSKILL_DW_ICESTORM2 )

  00276	83 fe 07	 cmp	 esi, 7
  00279	0f 84 2c 01 00
	00		 je	 $LN40@Resistance
  0027f	81 fe 85 01 00
	00		 cmp	 esi, 389		; 00000185H
  00285	0f 84 20 01 00
	00		 je	 $LN40@Resistance
  0028b	83 fe 27	 cmp	 esi, 39			; 00000027H
  0028e	0f 84 17 01 00
	00		 je	 $LN40@Resistance
  00294	81 fe e9 01 00
	00		 cmp	 esi, 489		; 000001e9H
  0029a	0f 84 0b 01 00
	00		 je	 $LN40@Resistance
  002a0	81 fe eb 01 00
	00		 cmp	 esi, 491		; 000001ebH
  002a6	0f 84 ff 00 00
	00		 je	 $LN40@Resistance
  002ac	81 fe 87 01 00
	00		 cmp	 esi, 391		; 00000187H
  002b2	0f 84 f3 00 00
	00		 je	 $LN40@Resistance
  002b8	81 fe 89 01 00
	00		 cmp	 esi, 393		; 00000189H
  002be	0f 84 e7 00 00
	00		 je	 $LN40@Resistance

; 480  : 			}
; 481  : 			else
; 482  : 			{
; 483  : 				return FALSE;
; 484  : 			}
; 485  : 		}
; 486  : 		else
; 487  : 		{
; 488  : 			return FALSE;
; 489  : 		}
; 490  : 	}
; 491  : 	else if ( skill == AT_SKILL_ELFHARDEN || skill == AT_MSKILL_FE_ICEARROW1 )

  002c4	83 fe 33	 cmp	 esi, 51			; 00000033H
  002c7	74 5c		 je	 SHORT $LN47@Resistance
  002c9	81 fe a8 01 00
	00		 cmp	 esi, 424		; 000001a8H
  002cf	74 54		 je	 SHORT $LN47@Resistance

; 509  : 			}
; 510  : 			else
; 511  : 			{
; 512  : 				return FALSE;
; 513  : 			}
; 514  : 		}
; 515  : 		else
; 516  : 		{
; 517  : 			return FALSE;
; 518  : 		}
; 519  : 	}
; 520  : 	else if( skill == AT_MSKILL_FE_POISONARROW || skill == AT_MSKILL_FE_POISONARROW1 )

  002d1	81 fe ab 01 00
	00		 cmp	 esi, 427		; 000001abH
  002d7	74 0c		 je	 SHORT $LN54@Resistance
  002d9	81 fe b2 01 00
	00		 cmp	 esi, 434		; 000001b2H
  002df	0f 85 b4 01 00
	00		 jne	 $LN55@Resistance
$LN54@Resistance:

; 521  : 	{
; 522  : 		if( gObjCheckUsedBuffEffect(lpTargetObj,BUFF__POISON) == FALSE )

  002e5	68 9f 00 00 00	 push	 159			; 0000009fH
  002ea	57		 push	 edi
  002eb	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  002f0	83 c4 08	 add	 esp, 8
  002f3	84 c0		 test	 al, al
  002f5	0f 85 9e 01 00
	00		 jne	 $LN55@Resistance

; 523  : 		{
; 524  : 			lpTargetObj->lpAttackObj = lpObj;
; 525  : 			gObjAddBuffEffect(lpTargetObj,BUFF__POISON,ADD_OPTION_REDUCE_HPPERC,3,0,0,10);

  002fb	6a 0a		 push	 10			; 0000000aH
  002fd	6a 00		 push	 0
  002ff	6a 00		 push	 0
  00301	6a 03		 push	 3
  00303	6a 13		 push	 19			; 00000013H
  00305	68 9f 00 00 00	 push	 159			; 0000009fH
  0030a	57		 push	 edi
  0030b	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  00311	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  00316	83 c4 1c	 add	 esp, 28			; 0000001cH

; 526  : 			return TRUE;
; 527  : 		}
; 528  : 	}
; 529  : 	return TRUE;

  00319	b8 01 00 00 00	 mov	 eax, 1
  0031e	5e		 pop	 esi
  0031f	5b		 pop	 ebx
  00320	5f		 pop	 edi

; 530  : }

  00321	5d		 pop	 ebp
  00322	c2 0c 00	 ret	 12			; 0000000cH
$LN47@Resistance:

; 492  : 	{
; 493  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_ICEARROW) == FALSE)

  00325	6a 39		 push	 57			; 00000039H
  00327	57		 push	 edi
  00328	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0032d	83 c4 08	 add	 esp, 8
  00330	84 c0		 test	 al, al
  00332	0f 85 44 01 00
	00		 jne	 $LN27@Resistance

; 494  : 		{
; 495  : 			if( retResistance(lpTargetObj,R_ICE) == FALSE )

  00338	6a 00		 push	 0
  0033a	57		 push	 edi
  0033b	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00340	83 c4 08	 add	 esp, 8
  00343	85 c0		 test	 eax, eax
  00345	0f 85 31 01 00
	00		 jne	 $LN27@Resistance

; 496  : 			{
; 497  : 				BuffSkillEffectInfo* lpInfo = g_BuffSkillEffect.GetEffect(skill);

  0034b	56		 push	 esi
  0034c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_BuffSkillEffect@@3VBuffSkillEffect@@A ; g_BuffSkillEffect
  00351	e8 00 00 00 00	 call	 ?GetEffect@BuffSkillEffect@@QAEPAUBuffSkillEffectInfo@@H@Z ; BuffSkillEffect::GetEffect

; 498  : 
; 499  : 				if( !lpInfo )

  00356	85 c0		 test	 eax, eax
  00358	0f 84 1e 01 00
	00		 je	 $LN27@Resistance

; 500  : 				{
; 501  : 					return 0;
; 502  : 				}
; 503  : 
; 504  : 				gObjAddBuffEffect(lpTargetObj,BUFF_ICEARROW,0,0,0,0,lpInfo->m_Arg1);

  0035e	f3 0f 2c 40 04	 cvttss2si eax, DWORD PTR [eax+4]
  00363	50		 push	 eax
  00364	6a 00		 push	 0
  00366	6a 00		 push	 0
  00368	6a 00		 push	 0
  0036a	6a 00		 push	 0
  0036c	6a 39		 push	 57			; 00000039H
  0036e	57		 push	 edi
  0036f	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect

; 505  : 				lpTargetObj->PathCount = 0;
; 506  : 				lpTargetObj->PathStartEnd = 0;
; 507  : 
; 508  : 				gObjSetPosition(lpTargetObj->m_Index,lpTargetObj->X,lpTargetObj->Y);

  00374	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0037b	50		 push	 eax
  0037c	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  00383	50		 push	 eax
  00384	ff 37		 push	 DWORD PTR [edi]
  00386	c7 87 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+344], 0
  00390	c6 87 60 01 00
	00 00		 mov	 BYTE PTR [edi+352], 0
  00397	e8 00 00 00 00	 call	 ?gObjSetPosition@@YAXHHH@Z ; gObjSetPosition
  0039c	83 c4 28	 add	 esp, 40			; 00000028H

; 526  : 			return TRUE;
; 527  : 		}
; 528  : 	}
; 529  : 	return TRUE;

  0039f	b8 01 00 00 00	 mov	 eax, 1
  003a4	5e		 pop	 esi
  003a5	5b		 pop	 ebx
  003a6	5f		 pop	 edi

; 530  : }

  003a7	5d		 pop	 ebp
  003a8	c2 0c 00	 ret	 12			; 0000000cH
$LN40@Resistance:

; 471  : 	{
; 472  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_ICE) == FALSE)

  003ab	6a 38		 push	 56			; 00000038H
  003ad	57		 push	 edi
  003ae	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  003b3	83 c4 08	 add	 esp, 8
  003b6	84 c0		 test	 al, al
  003b8	0f 85 be 00 00
	00		 jne	 $LN27@Resistance

; 473  : 		{
; 474  : 			if( retResistance(lpTargetObj,R_ICE) == FALSE )

  003be	6a 00		 push	 0
  003c0	57		 push	 edi
  003c1	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  003c6	83 c4 08	 add	 esp, 8
  003c9	85 c0		 test	 eax, eax
  003cb	0f 85 ab 00 00
	00		 jne	 $LN27@Resistance

; 475  : 			{
; 476  : 				lpTargetObj->lpAttackObj = lpObj;
; 477  : 				lpTargetObj->DelayActionTime = 800;
; 478  : 				lpTargetObj->DelayLevel = 1;
; 479  : 				gObjAddBuffEffect(lpTargetObj,BUFF_ICE,ADD_OPTION_REDUCEMOVEMENT,0,0,0,10);

  003d1	6a 0a		 push	 10			; 0000000aH
  003d3	50		 push	 eax
  003d4	50		 push	 eax
  003d5	50		 push	 eax
  003d6	6a 14		 push	 20			; 00000014H
  003d8	6a 38		 push	 56			; 00000038H
  003da	57		 push	 edi
  003db	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  003e1	c7 87 a4 05 00
	00 20 03 00 00	 mov	 DWORD PTR [edi+1444], 800 ; 00000320H
  003eb	c6 87 a8 05 00
	00 01		 mov	 BYTE PTR [edi+1448], 1
  003f2	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  003f7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 526  : 			return TRUE;
; 527  : 		}
; 528  : 	}
; 529  : 	return TRUE;

  003fa	b8 01 00 00 00	 mov	 eax, 1
  003ff	5e		 pop	 esi
  00400	5b		 pop	 ebx
  00401	5f		 pop	 edi

; 530  : }

  00402	5d		 pop	 ebp
  00403	c2 0c 00	 ret	 12			; 0000000cH
$LN33@Resistance:

; 448  : 	{
; 449  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj,BUFF_POISON) == FALSE)

  00406	6a 37		 push	 55			; 00000037H
  00408	57		 push	 edi
  00409	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  0040e	83 c4 08	 add	 esp, 8
  00411	84 c0		 test	 al, al
  00413	75 67		 jne	 SHORT $LN27@Resistance

; 450  : 		{
; 451  : 			if( retResistance(lpTargetObj,R_POISON) == FALSE )

  00415	6a 01		 push	 1
  00417	57		 push	 edi
  00418	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  0041d	83 c4 08	 add	 esp, 8
  00420	85 c0		 test	 eax, eax
  00422	75 58		 jne	 SHORT $LN27@Resistance

; 452  : 			{
; 453  : 				lpTargetObj->lpAttackObj = lpObj;
; 454  : 				gObjAddBuffEffect(lpTargetObj,BUFF_POISON,ADD_OPTION_REDUCE_HPPERC,3,0,0,10);

  00424	6a 0a		 push	 10			; 0000000aH
$LN101@Resistance:
  00426	6a 00		 push	 0
  00428	6a 00		 push	 0
  0042a	6a 03		 push	 3
  0042c	6a 13		 push	 19			; 00000013H
  0042e	6a 37		 push	 55			; 00000037H
  00430	57		 push	 edi
  00431	89 9f b4 05 00
	00		 mov	 DWORD PTR [edi+1460], ebx
  00437	e8 00 00 00 00	 call	 ?gObjAddBuffEffect@@YA_NPAUOBJECTSTRUCT@@HEHEHH@Z ; gObjAddBuffEffect
  0043c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 526  : 			return TRUE;
; 527  : 		}
; 528  : 	}
; 529  : 	return TRUE;

  0043f	b8 01 00 00 00	 mov	 eax, 1
  00444	5e		 pop	 esi
  00445	5b		 pop	 ebx
  00446	5f		 pop	 edi

; 530  : }

  00447	5d		 pop	 ebp
  00448	c2 0c 00	 ret	 12			; 0000000cH
$LN26@Resistance:

; 428  : 	{
; 429  : 		if ( gObjCheckUsedBuffEffect(lpTargetObj, BUFF_POISON) == FALSE)

  0044b	6a 37		 push	 55			; 00000037H
  0044d	57		 push	 edi
  0044e	e8 00 00 00 00	 call	 ?gObjCheckUsedBuffEffect@@YA_NPAUOBJECTSTRUCT@@H@Z ; gObjCheckUsedBuffEffect
  00453	83 c4 08	 add	 esp, 8
  00456	84 c0		 test	 al, al
  00458	75 22		 jne	 SHORT $LN27@Resistance

; 430  : 		{
; 431  : 			if( retResistance(lpTargetObj,R_POISON) == FALSE )

  0045a	6a 01		 push	 1
  0045c	57		 push	 edi
  0045d	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00462	83 c4 08	 add	 esp, 8
  00465	85 c0		 test	 eax, eax
  00467	75 13		 jne	 SHORT $LN27@Resistance

; 432  : 			{
; 433  : 				lpTargetObj->lpAttackObj = lpObj;
; 434  : 				gObjAddBuffEffect(lpTargetObj,BUFF_POISON,ADD_OPTION_REDUCE_HPPERC,3,0,0,20);

  00469	6a 14		 push	 20			; 00000014H

; 435  : 				return TRUE;

  0046b	eb b9		 jmp	 SHORT $LN101@Resistance
$LN22@Resistance:

; 418  : 	{
; 419  : 		if ( retResistance(lpTargetObj, R_LIGHTNING) == 0 )

  0046d	6a 02		 push	 2
  0046f	57		 push	 edi
  00470	e8 00 00 00 00	 call	 ?retResistance@@YAHPAUOBJECTSTRUCT@@H@Z ; retResistance
  00475	83 c4 08	 add	 esp, 8
  00478	85 c0		 test	 eax, eax
  0047a	74 09		 je	 SHORT $LN19@Resistance
$LN27@Resistance:
  0047c	5e		 pop	 esi
  0047d	5b		 pop	 ebx

; 420  : 		{
; 421  : 			gObjAddMsgSendDelay(lpTargetObj, 2, lpObj->m_Index, 150, 0);
; 422  : 			return TRUE;
; 423  : 		}
; 424  : 
; 425  : 		return FALSE;

  0047e	33 c0		 xor	 eax, eax
  00480	5f		 pop	 edi

; 530  : }

  00481	5d		 pop	 ebp
  00482	c2 0c 00	 ret	 12			; 0000000cH
$LN19@Resistance:

; 414  : 	{
; 415  : 		gObjAddMsgSendDelay(lpTargetObj, 2, lpObj->m_Index, 150, 0);

  00485	6a 00		 push	 0
  00487	68 96 00 00 00	 push	 150			; 00000096H
  0048c	ff 33		 push	 DWORD PTR [ebx]
  0048e	6a 02		 push	 2
  00490	57		 push	 edi
  00491	e8 00 00 00 00	 call	 ?gObjAddMsgSendDelay@@YAXPAUOBJECTSTRUCT@@HHHH@Z ; gObjAddMsgSendDelay
  00496	83 c4 14	 add	 esp, 20			; 00000014H
$LN55@Resistance:

; 526  : 			return TRUE;
; 527  : 		}
; 528  : 	}
; 529  : 	return TRUE;

  00499	5e		 pop	 esi
  0049a	5b		 pop	 ebx
  0049b	b8 01 00 00 00	 mov	 eax, 1
  004a0	5f		 pop	 edi

; 530  : }

  004a1	5d		 pop	 ebp
  004a2	c2 0c 00	 ret	 12			; 0000000cH
?ResistanceCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0H@Z ENDP ; CObjBaseAttack::ResistanceCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z PROC	; CObjBaseAttack::PkCheck, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : 	if ( gNonPK != 0 )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000e	74 28		 je	 SHORT $LN7@PkCheck

; 147  : 	{
; 148  : 		if( lpObj->Type == OBJ_USER )

  00010	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00014	75 22		 jne	 SHORT $LN7@PkCheck

; 149  : 		{
; 150  : 			int bTmp = 0;
; 151  : 
; 152  : #if (ENABLE_FIX_PARTYPK == 1)
; 153  : 
; 154  : 			if( lpObj->m_PK_Level >= 6 )

  00016	80 be 19 01 00
	00 06		 cmp	 BYTE PTR [esi+281], 6
  0001d	7c 19		 jl	 SHORT $LN7@PkCheck

; 155  : 			{
; 156  : 				bTmp = TRUE;
; 157  : 			}
; 158  : 
; 159  : #else
; 160  : 			if( lpObj->PartyNumber >= 0 )
; 161  : 			{
; 162  : 				if( gParty.GetPartyPkLevel(lpObj->PartyNumber) >= 6 )
; 163  : 				{
; 164  : 					bTmp = TRUE;
; 165  : 				}
; 166  : 			}
; 167  : 			else if( lpObj->m_PK_Level >= 6 )
; 168  : 			{
; 169  : 				bTmp = TRUE;
; 170  : 			}
; 171  : #endif
; 172  : 			if( bTmp == TRUE )
; 173  : 			{
; 174  : 				if( lpObj->m_PK_Count >= 3 )

  0001f	80 be 18 01 00
	00 03		 cmp	 BYTE PTR [esi+280], 3
  00026	7c 10		 jl	 SHORT $LN7@PkCheck

; 175  : 				{
; 176  : 					if( gPkLimitFree == FALSE )

  00028	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  0002f	75 07		 jne	 SHORT $LN7@PkCheck

; 177  : 					{
; 178  : 						return FALSE;

  00031	33 c0		 xor	 eax, eax
  00033	5e		 pop	 esi

; 343  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN7@PkCheck:

; 179  : 					}
; 180  : 				}
; 181  : 			}
; 182  : 		}
; 183  : 	}
; 184  : 
; 185  : 	if ( lpObj->Type == OBJ_USER && lpTargetObj->Type == OBJ_USER)

  00038	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0003c	57		 push	 edi
  0003d	0f 85 b7 01 00
	00		 jne	 $LN37@PkCheck
  00043	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00046	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  0004a	0f 85 aa 01 00
	00		 jne	 $LN37@PkCheck

; 186  : 	{
; 187  : 		if ( lpTargetObj->Level <= 5 || lpObj->Level <= 5 )

  00050	66 83 bf 96 00
	00 00 05	 cmp	 WORD PTR [edi+150], 5
  00058	0f 8e e6 00 00
	00		 jle	 $LN10@PkCheck
  0005e	66 83 be 96 00
	00 00 05	 cmp	 WORD PTR [esi+150], 5
  00066	0f 8e d8 00 00
	00		 jle	 $LN10@PkCheck

; 188  : 		{
; 189  : 			return FALSE;
; 190  : 		}
; 191  : 
; 192  : 		if ( gObjGetRelationShip(lpObj, lpTargetObj) == 2 ) // Rivals

  0006c	57		 push	 edi
  0006d	56		 push	 esi
  0006e	e8 00 00 00 00	 call	 ?gObjGetRelationShip@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjGetRelationShip
  00073	83 c4 08	 add	 esp, 8
  00076	83 f8 02	 cmp	 eax, 2
  00079	75 0d		 jne	 SHORT $LN12@PkCheck

; 193  : 		{
; 194  : 			if ( gNonPK == FALSE )

  0007b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gNonPK@@3HA, 0 ; gNonPK
  00082	0f 84 72 01 00
	00		 je	 $LN37@PkCheck
$LN12@PkCheck:

; 195  : 			{
; 196  : 				return TRUE;
; 197  : 			}
; 198  : 		}
; 199  : 
; 200  : 		if ( lpObj->lpGuild != NULL && lpTargetObj->lpGuild != NULL )

  00088	8b 86 18 06 00
	00		 mov	 eax, DWORD PTR [esi+1560]
  0008e	85 c0		 test	 eax, eax
  00090	74 26		 je	 SHORT $LN15@PkCheck
  00092	8b 8f 18 06 00
	00		 mov	 ecx, DWORD PTR [edi+1560]
  00098	85 c9		 test	 ecx, ecx
  0009a	74 1c		 je	 SHORT $LN15@PkCheck

; 201  : 		{
; 202  : 			if ( lpObj->lpGuild->WarState == 1 && lpTargetObj->lpGuild->WarState == 1 )

  0009c	80 b8 91 05 00
	00 01		 cmp	 BYTE PTR [eax+1425], 1
  000a3	75 13		 jne	 SHORT $LN15@PkCheck
  000a5	80 b9 91 05 00
	00 01		 cmp	 BYTE PTR [ecx+1425], 1
  000ac	75 0a		 jne	 SHORT $LN15@PkCheck

; 203  : 			{
; 204  : 				if ( lpObj->lpGuild->Number == lpTargetObj->lpGuild->Number )

  000ae	8b 00		 mov	 eax, DWORD PTR [eax]
  000b0	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000b2	0f 84 8c 00 00
	00		 je	 $LN10@PkCheck
$LN15@PkCheck:

; 205  : 				{
; 206  : 					return FALSE;
; 207  : 				}
; 208  : 			}
; 209  : 		}
; 210  : 
; 211  : 		if ( gObjTargetGuildWarCheck(lpObj, lpTargetObj) == FALSE && lpTargetObj->lpGuild != NULL && lpTargetObj->lpGuild->WarState != 0)

  000b8	57		 push	 edi
  000b9	56		 push	 esi
  000ba	e8 00 00 00 00	 call	 ?gObjTargetGuildWarCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjTargetGuildWarCheck
  000bf	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gNonPK@@3HA ; gNonPK
  000c5	83 c4 08	 add	 esp, 8
  000c8	85 c0		 test	 eax, eax
  000ca	75 46		 jne	 SHORT $LN20@PkCheck
  000cc	8b 87 18 06 00
	00		 mov	 eax, DWORD PTR [edi+1560]
  000d2	85 c0		 test	 eax, eax
  000d4	74 3c		 je	 SHORT $LN20@PkCheck
  000d6	80 b8 91 05 00
	00 00		 cmp	 BYTE PTR [eax+1425], 0
  000dd	74 33		 je	 SHORT $LN20@PkCheck

; 212  : 		{
; 213  : 			if ( lpTargetObj->lpGuild->WarType == 1 )

  000df	80 b8 92 05 00
	00 01		 cmp	 BYTE PTR [eax+1426], 1
  000e6	75 11		 jne	 SHORT $LN19@PkCheck

; 214  : 			{
; 215  : 				if ( lpTargetObj->MapNumber != 6 )

  000e8	80 bf 23 01 00
	00 06		 cmp	 BYTE PTR [edi+291], 6
  000ef	74 08		 je	 SHORT $LN19@PkCheck

; 216  : 				{
; 217  : 					if ( !gNonPK )

  000f1	85 d2		 test	 edx, edx
  000f3	0f 84 01 01 00
	00		 je	 $LN37@PkCheck
$LN19@PkCheck:

; 218  : 					{
; 219  : 						return TRUE;
; 220  : 					}
; 221  : 				}
; 222  : 			}
; 223  : 
; 224  : 			if ( CC_MAP_RANGE(lpTargetObj->MapNumber) == FALSE )

  000f9	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  000ff	3c 35		 cmp	 al, 53			; 00000035H
  00101	74 0f		 je	 SHORT $LN20@PkCheck
  00103	3c 12		 cmp	 al, 18			; 00000012H
  00105	72 3d		 jb	 SHORT $LN10@PkCheck
  00107	b1 17		 mov	 cl, 23			; 00000017H
  00109	3a c8		 cmp	 cl, al
  0010b	1b c0		 sbb	 eax, eax
  0010d	83 c0 01	 add	 eax, 1
  00110	74 32		 je	 SHORT $LN10@PkCheck
$LN20@PkCheck:

; 225  : 			{
; 226  : 				return FALSE;
; 227  : 			}
; 228  : 		}
; 229  : 
; 230  : 		if ( IT_MAP_RANGE(lpObj->MapNumber) )

  00112	8a 8e 23 01 00
	00		 mov	 cl, BYTE PTR [esi+291]
  00118	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  0011b	72 0e		 jb	 SHORT $LN61@PkCheck
  0011d	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00122	3a c1		 cmp	 al, cl
  00124	1b c0		 sbb	 eax, eax
  00126	83 c0 01	 add	 eax, 1
  00129	75 3f		 jne	 SHORT $LN26@PkCheck
$LN61@PkCheck:

; 231  : 		{
; 232  : 
; 233  : 		}
; 234  : 		else if ( CC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  0012b	80 f9 35	 cmp	 cl, 53			; 00000035H
  0012e	74 1c		 je	 SHORT $LN62@PkCheck
  00130	80 f9 12	 cmp	 cl, 18			; 00000012H
  00133	72 0b		 jb	 SHORT $LN23@PkCheck
  00135	b0 17		 mov	 al, 23			; 00000017H
  00137	3a c1		 cmp	 al, cl
  00139	1b c0		 sbb	 eax, eax
  0013b	83 c0 01	 add	 eax, 1
  0013e	75 0c		 jne	 SHORT $LN62@PkCheck
$LN23@PkCheck:

; 237  : 			{
; 238  : 				return FALSE;
; 239  : 			}
; 240  : 		}
; 241  : 		else if ( gNonPK != FALSE )

  00140	85 d2		 test	 edx, edx
  00142	74 26		 je	 SHORT $LN26@PkCheck
$LN10@PkCheck:
  00144	5f		 pop	 edi

; 242  : 		{
; 243  : 			return FALSE;

  00145	33 c0		 xor	 eax, eax
  00147	5e		 pop	 esi

; 343  : }

  00148	5d		 pop	 ebp
  00149	c2 08 00	 ret	 8
$LN62@PkCheck:

; 235  : 		{
; 236  : 			if ( g_ChaosCastle.GetCurrentState(g_ChaosCastle.GetFloor(lpObj->MapNumber)) != 2 )

  0014c	0f b6 c1	 movzx	 eax, cl
  0014f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ?GetFloor@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetFloor
  0015a	50		 push	 eax
  0015b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosCastle@@3VCChaosCastle@@A ; g_ChaosCastle
  00160	e8 00 00 00 00	 call	 ?GetCurrentState@CChaosCastle@@QAEHH@Z ; CChaosCastle::GetCurrentState
  00165	83 f8 02	 cmp	 eax, 2
  00168	75 da		 jne	 SHORT $LN10@PkCheck
$LN26@PkCheck:

; 244  : 		}
; 245  : 
; 246  : 		if ( DS_MAP_RANGE(lpObj->MapNumber) ) // DEvil

  0016a	8a 8e 23 01 00
	00		 mov	 cl, BYTE PTR [esi+291]
  00170	80 f9 09	 cmp	 cl, 9
  00173	74 cf		 je	 SHORT $LN10@PkCheck
  00175	33 c0		 xor	 eax, eax
  00177	80 f9 20	 cmp	 cl, 32			; 00000020H
  0017a	0f 94 c0	 sete	 al
  0017d	85 c0		 test	 eax, eax
  0017f	75 c3		 jne	 SHORT $LN10@PkCheck

; 247  : 		{
; 248  : 			return FALSE;
; 249  : 		}
; 250  : 
; 251  : 		if ( BC_MAP_RANGE(lpObj->MapNumber) )

  00181	80 f9 34	 cmp	 cl, 52			; 00000034H
  00184	74 be		 je	 SHORT $LN10@PkCheck
  00186	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00189	72 0e		 jb	 SHORT $LN28@PkCheck
  0018b	b8 11 00 00 00	 mov	 eax, 17			; 00000011H
  00190	3a c1		 cmp	 al, cl
  00192	1b c0		 sbb	 eax, eax
  00194	83 c0 01	 add	 eax, 1
  00197	75 ab		 jne	 SHORT $LN10@PkCheck
$LN28@PkCheck:

; 252  : 		{
; 253  : 			return FALSE;
; 254  : 		}
; 255  : 
; 256  : 		if ( DG_MAP_RANGE(lpObj->MapNumber) )

  00199	80 f9 41	 cmp	 cl, 65			; 00000041H
  0019c	72 0b		 jb	 SHORT $LN29@PkCheck
  0019e	b0 44		 mov	 al, 68			; 00000044H
  001a0	3a c1		 cmp	 al, cl
  001a2	1b c0		 sbb	 eax, eax
  001a4	83 c0 01	 add	 eax, 1
  001a7	75 9b		 jne	 SHORT $LN10@PkCheck
$LN29@PkCheck:

; 257  : 		{
; 258  : 			return FALSE;
; 259  : 		}
; 260  : 
; 261  : 		if ( IF_MAP_RANGE(lpObj->MapNumber) )

  001a9	80 f9 45	 cmp	 cl, 69			; 00000045H
  001ac	72 0e		 jb	 SHORT $LN30@PkCheck
  001ae	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  001b3	3a c1		 cmp	 al, cl
  001b5	1b c0		 sbb	 eax, eax
  001b7	83 c0 01	 add	 eax, 1
  001ba	75 88		 jne	 SHORT $LN10@PkCheck
$LN30@PkCheck:

; 262  : 		{
; 263  : 			return FALSE;
; 264  : 		}
; 265  : 
; 266  : 		if ( gObjDuelCheck(lpObj, lpTargetObj) == FALSE )

  001bc	57		 push	 edi
  001bd	56		 push	 esi
  001be	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjDuelCheck
  001c3	83 c4 08	 add	 esp, 8
  001c6	85 c0		 test	 eax, eax
  001c8	75 11		 jne	 SHORT $LN32@PkCheck

; 267  : 		{
; 268  : 			if ( gObjDuelCheck(lpTargetObj) )

  001ca	57		 push	 edi
  001cb	e8 00 00 00 00	 call	 ?gObjDuelCheck@@YAHPAUOBJECTSTRUCT@@@Z ; gObjDuelCheck
  001d0	83 c4 04	 add	 esp, 4
  001d3	85 c0		 test	 eax, eax
  001d5	0f 85 69 ff ff
	ff		 jne	 $LN10@PkCheck
$LN32@PkCheck:

; 269  : 			{
; 270  : 				return FALSE;
; 271  : 			}
; 272  : 		}
; 273  : 
; 274  : 		int bTmp = 0;
; 275  : 
; 276  : #if (ENABLE_FIX_PARTYPK == 1)
; 277  : 		if (lpObj->m_PK_Level >= 6 )

  001db	80 be 19 01 00
	00 06		 cmp	 BYTE PTR [esi+281], 6
  001e2	7c 16		 jl	 SHORT $LN37@PkCheck

; 278  : 		{
; 279  : 			bTmp = TRUE;
; 280  : 		}
; 281  : #else
; 282  : 		if ( lpObj->PartyNumber >= 0 )
; 283  : 		{
; 284  : 			if( gParty.GetPartyPkLevel(lpObj->PartyNumber) >= 6 )
; 285  : 			{
; 286  : 				bTmp = TRUE;
; 287  : 			}
; 288  : 		}
; 289  : 		else if (lpObj->m_PK_Level >= 6 )
; 290  : 		{
; 291  : 			bTmp = TRUE;
; 292  : 		}
; 293  : #endif
; 294  : 
; 295  : 		if( bTmp == TRUE )
; 296  : 		{
; 297  : 			if( lpObj->m_PK_Count >= 3 && gPkLimitFree == FALSE )

  001e4	80 be 18 01 00
	00 03		 cmp	 BYTE PTR [esi+280], 3
  001eb	7c 0d		 jl	 SHORT $LN37@PkCheck
  001ed	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gPkLimitFree@@3HA, 0 ; gPkLimitFree
  001f4	0f 84 4a ff ff
	ff		 je	 $LN10@PkCheck
$LN37@PkCheck:
  001fa	5f		 pop	 edi

; 298  : 			{
; 299  : 				return FALSE;
; 300  : 			}
; 301  : 		}
; 302  : 
; 303  : 		bTmp = 0;
; 304  : 
; 305  : #if (ENABLE_FIX_PARTYPK == 1)
; 306  : 		if (lpTargetObj->m_PK_Level >= 6 )
; 307  : 		{
; 308  : 			bTmp = TRUE;
; 309  : 		}
; 310  : #else
; 311  : 		if ( lpTargetObj->PartyNumber >= 0 )
; 312  : 		{
; 313  : 			if( gParty.GetPartyPkLevel(lpTargetObj->PartyNumber) >= 6 )
; 314  : 			{
; 315  : 				bTmp = TRUE;
; 316  : 			}
; 317  : 		}
; 318  : 		else if (lpTargetObj->m_PK_Level >= 6 )
; 319  : 		{
; 320  : 			bTmp = TRUE;
; 321  : 		}
; 322  : #endif
; 323  : 
; 324  : 		if( bTmp == TRUE )
; 325  : 		{
; 326  : #if (__CUSTOM__ == 1)
; 327  : #else
; 328  : 			if( lpTargetObj->PartyNumber >= 0 )
; 329  : 			{
; 330  : 				if( gPkLimitFree == FALSE && g_CastleSiegeSync.GetCastleState() != 7)
; 331  : 				{
; 332  : 					return FALSE;
; 333  : 				}
; 334  : 			}
; 335  : 			else if( lpTargetObj->m_PK_Count >= 3 && gPkLimitFree == FALSE && g_CastleSiegeSync.GetCastleState() != 7)
; 336  : 			{
; 337  : 				return FALSE;
; 338  : 			}
; 339  : #endif
; 340  : 		}
; 341  : 	}
; 342  : 	return TRUE;

  001fb	b8 01 00 00 00	 mov	 eax, 1
  00200	5e		 pop	 esi

; 343  : }

  00201	5d		 pop	 ebp
  00202	c2 08 00	 ret	 8
?PkCheck@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP	; CObjBaseAttack::PkCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z PROC ; CObjBaseAttack::CheckAttackArea, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 110  : 	if ( lpTargetObj->Type == OBJ_USER || lpTargetObj->m_RecallMon >= 0 )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00007	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0000b	74 09		 je	 SHORT $LN3@CheckAttac
  0000d	83 be 30 06 00
	00 00		 cmp	 DWORD PTR [esi+1584], 0
  00014	7c 33		 jl	 SHORT $LN4@CheckAttac
$LN3@CheckAttac:

; 111  : 	{
; 112  : 		BYTE attr = MapC[lpTargetObj->MapNumber].GetAttr(lpTargetObj->X, lpTargetObj->Y);

  00016	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  0001d	50		 push	 eax
  0001e	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00025	50		 push	 eax
  00026	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  0002d	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00033	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00039	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 113  : 
; 114  : 		if ( (attr&1) == 1 )

  0003e	a8 01		 test	 al, 1
  00040	74 07		 je	 SHORT $LN4@CheckAttac

; 115  : 		{
; 116  : 			return FALSE;

  00042	33 c0		 xor	 eax, eax
  00044	5e		 pop	 esi

; 138  : }

  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN4@CheckAttac:
  00049	57		 push	 edi

; 117  : 		}
; 118  : 	}
; 119  : 
; 120  : 	if ( lpObj->Type == OBJ_USER )

  0004a	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0004d	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  00051	75 60		 jne	 SHORT $LN7@CheckAttac

; 121  : 	{
; 122  : 		int iRet = gObjCheckAttackArea(lpObj->m_Index, lpTargetObj->m_Index);

  00053	ff 36		 push	 DWORD PTR [esi]
  00055	ff 37		 push	 DWORD PTR [edi]
  00057	e8 00 00 00 00	 call	 ?gObjCheckAttackArea@@YAHHH@Z ; gObjCheckAttackArea
  0005c	83 c4 08	 add	 esp, 8

; 123  : 
; 124  : 		if ( iRet != 0 )

  0005f	85 c0		 test	 eax, eax
  00061	74 50		 je	 SHORT $LN7@CheckAttac

; 125  : 		{
; 126  : 			LogAddTD("[%s][%s] Try Attack In Not Attack Area (%s,%d,%d) errortype = %d",

  00063	50		 push	 eax
  00064	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00070	50		 push	 eax
  00071	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  00078	50		 push	 eax
  00079	0f b6 87 23 01
	00 00		 movzx	 eax, BYTE PTR [edi+291]
  00080	05 d0 07 00 00	 add	 eax, 2000		; 000007d0H
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0008b	50		 push	 eax
  0008c	8d 47 5d	 lea	 eax, DWORD PTR [edi+93]
  0008f	50		 push	 eax
  00090	8d 47 52	 lea	 eax, DWORD PTR [edi+82]
  00093	50		 push	 eax
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@NNCLBAOH@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Try?5Attack?5In?5Not?5Attac@
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0009f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 127  : 				lpObj->AccountID, lpObj->Name, lMsg.Get(MSGGET(7, 208) + lpObj->MapNumber),
; 128  : 				lpObj->X, lpObj->Y, iRet);
; 129  : 
; 130  : 			if ( bIsIgnorePacketSpeedHackDetect != FALSE )

  000a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?bIsIgnorePacketSpeedHackDetect@@3HA, 0 ; bIsIgnorePacketSpeedHackDetect
  000a9	74 08		 je	 SHORT $LN7@CheckAttac

; 131  : 			{
; 132  : 				return FALSE;

  000ab	5f		 pop	 edi
  000ac	33 c0		 xor	 eax, eax
  000ae	5e		 pop	 esi

; 138  : }

  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
$LN7@CheckAttac:
  000b3	5f		 pop	 edi

; 133  : 			}
; 134  : 		}
; 135  : 	}
; 136  : 
; 137  : 	return TRUE;

  000b4	b8 01 00 00 00	 mov	 eax, 1
  000b9	5e		 pop	 esi

; 138  : }

  000ba	5d		 pop	 ebp
  000bb	c2 08 00	 ret	 8
?CheckAttackArea@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP ; CObjBaseAttack::CheckAttackArea
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CObjBaseAttack::DecreaseArrow, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 40   : 	if ( lpObj->Class == CLASS_ELF && lpObj->Type == OBJ_USER )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	66 83 be 90 00
	00 00 02	 cmp	 WORD PTR [esi+144], 2
  00010	0f 85 8c 01 00
	00		 jne	 $LN15@DecreaseAr
  00016	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  0001a	0f 85 82 01 00
	00		 jne	 $LN15@DecreaseAr

; 41   : 	{
; 42   : 		CItem * Right = &lpObj->pInventory[0];

  00020	8b be c0 11 00
	00		 mov	 edi, DWORD PTR [esi+4544]

; 43   : 		CItem * Left  = &lpObj->pInventory[1];
; 44   : 
; 45   : 		if ( (Right->m_Type >= ITEMGET(4,8) && Right->m_Type <= ITEMGET(4,14)) ||
; 46   : 			  Right->m_Type == ITEMGET(4,16) || Right->m_Type == ITEMGET(4,18) ||

  00026	b8 08 08 00 00	 mov	 eax, 2056		; 00000808H
  0002b	0f b7 4f 06	 movzx	 ecx, WORD PTR [edi+6]
  0002f	66 3b c8	 cmp	 cx, ax
  00032	7c 0e		 jl	 SHORT $LN6@DecreaseAr
  00034	b8 0e 08 00 00	 mov	 eax, 2062		; 0000080eH
  00039	66 3b c8	 cmp	 cx, ax
  0003c	0f 8e e3 00 00
	00		 jle	 $LN5@DecreaseAr
$LN6@DecreaseAr:
  00042	b8 10 08 00 00	 mov	 eax, 2064		; 00000810H
  00047	66 3b c8	 cmp	 cx, ax
  0004a	0f 84 d5 00 00
	00		 je	 $LN5@DecreaseAr
  00050	b8 12 08 00 00	 mov	 eax, 2066		; 00000812H
  00055	66 3b c8	 cmp	 cx, ax
  00058	0f 84 c7 00 00
	00		 je	 $LN5@DecreaseAr
  0005e	b8 13 08 00 00	 mov	 eax, 2067		; 00000813H
  00063	66 3b c8	 cmp	 cx, ax
  00066	0f 84 b9 00 00
	00		 je	 $LN5@DecreaseAr

; 63   : 				}
; 64   : 			}
; 65   : 			else
; 66   : 			{
; 67   : 				return FALSE;
; 68   : 			}
; 69   : 		}
; 70   : 		else if ( (Left->m_Type >= ITEMGET(4,0) && Left->m_Type <= ITEMGET(4,6) ) ||
; 71   : 				   Left->m_Type == ITEMGET(4,17) ||
; 72   : 				   Left->m_Type == ITEMGET(4,20) ||
; 73   : 				   Left->m_Type == ITEMGET(4,21) ||
; 74   : 				   Left->m_Type == ITEMGET(4,22) ||
; 75   : 				   Left->m_Type == ITEMGET(4,23) ||

  0006c	0f b7 87 da 00
	00 00		 movzx	 eax, WORD PTR [edi+218]
  00073	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00078	66 3b c2	 cmp	 ax, dx
  0007b	7c 0a		 jl	 SHORT $LN13@DecreaseAr
  0007d	ba 06 08 00 00	 mov	 edx, 2054		; 00000806H
  00082	66 3b c2	 cmp	 ax, dx
  00085	7e 40		 jle	 SHORT $LN12@DecreaseAr
$LN13@DecreaseAr:
  00087	ba 11 08 00 00	 mov	 edx, 2065		; 00000811H
  0008c	66 3b c2	 cmp	 ax, dx
  0008f	74 36		 je	 SHORT $LN12@DecreaseAr
  00091	ba 14 08 00 00	 mov	 edx, 2068		; 00000814H
  00096	66 3b c2	 cmp	 ax, dx
  00099	74 2c		 je	 SHORT $LN12@DecreaseAr
  0009b	ba 15 08 00 00	 mov	 edx, 2069		; 00000815H
  000a0	66 3b c2	 cmp	 ax, dx
  000a3	74 22		 je	 SHORT $LN12@DecreaseAr
  000a5	ba 16 08 00 00	 mov	 edx, 2070		; 00000816H
  000aa	66 3b c2	 cmp	 ax, dx
  000ad	74 18		 je	 SHORT $LN12@DecreaseAr
  000af	ba 17 08 00 00	 mov	 edx, 2071		; 00000817H
  000b4	66 3b c2	 cmp	 ax, dx
  000b7	74 0e		 je	 SHORT $LN12@DecreaseAr
  000b9	ba 18 08 00 00	 mov	 edx, 2072		; 00000818H
  000be	66 3b c2	 cmp	 ax, dx
  000c1	0f 85 db 00 00
	00		 jne	 $LN15@DecreaseAr
$LN12@DecreaseAr:

; 76   : 				   Left->m_Type == ITEMGET(4,24) )
; 77   : 		{
; 78   : 			if ( Right->m_Type == ITEMGET(4,15) )

  000c7	b8 0f 08 00 00	 mov	 eax, 2063		; 0000080fH
  000cc	66 3b c8	 cmp	 cx, ax
  000cf	75 77		 jne	 SHORT $LN7@DecreaseAr

; 79   : 			{
; 80   : 				if ( Right->m_Durability < 1.0f )

  000d1	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  000d6	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000de	0f 2f c8	 comiss	 xmm1, xmm0
  000e1	77 65		 ja	 SHORT $LN7@DecreaseAr

; 81   : 				{
; 82   : 					return FALSE;
; 83   : 				}
; 84   : 
; 85   : 				Right->m_Durability -= 1.0f;

  000e3	f3 0f 5c c1	 subss	 xmm0, xmm1

; 86   : 				GCItemDurSend(lpObj->m_Index, 0, (BYTE)Right->m_Durability, 0);

  000e7	6a 00		 push	 0
  000e9	f3 0f 2c c0	 cvttss2si eax, xmm0
  000ed	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  000f2	0f b6 c0	 movzx	 eax, al
  000f5	50		 push	 eax
  000f6	6a 00		 push	 0
  000f8	ff 36		 push	 DWORD PTR [esi]
  000fa	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend

; 87   : 
; 88   : 				if ( Right->m_Durability < 1.0f )

  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	0f 2f 47 24	 comiss	 xmm0, DWORD PTR [edi+36]
  0010e	0f 86 8e 00 00
	00		 jbe	 $LN15@DecreaseAr

; 89   : 				{
; 90   : 					lpObj->pInventory[0].Clear();

  00114	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  0011a	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 91   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 0, 0);

  0011f	6a 00		 push	 0
  00121	6a 00		 push	 0

; 92   : 				}
; 93   : 			}
; 94   : 			else

  00123	eb 73		 jmp	 SHORT $LN19@DecreaseAr
$LN5@DecreaseAr:

; 47   : 			  Right->m_Type == ITEMGET(4,19) )
; 48   : 		{
; 49   : 			if ( Left->m_Type == ITEMGET(4,7) )

  00125	b8 07 08 00 00	 mov	 eax, 2055		; 00000807H
  0012a	66 39 87 da 00
	00 00		 cmp	 WORD PTR [edi+218], ax
  00131	75 15		 jne	 SHORT $LN7@DecreaseAr

; 50   : 			{
; 51   : 				if ( Left->m_Durability < 1.0f )

  00133	f3 0f 10 87 f8
	00 00 00	 movss	 xmm0, DWORD PTR [edi+248]
  0013b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00143	0f 2f c8	 comiss	 xmm1, xmm0
  00146	76 08		 jbe	 SHORT $LN9@DecreaseAr
$LN7@DecreaseAr:
  00148	5f		 pop	 edi

; 52   : 				{
; 53   : 					return FALSE;

  00149	33 c0		 xor	 eax, eax
  0014b	5e		 pop	 esi

; 102  : }

  0014c	5d		 pop	 ebp
  0014d	c2 04 00	 ret	 4
$LN9@DecreaseAr:

; 54   : 				}
; 55   : 
; 56   : 				Left->m_Durability -= 1.0f;

  00150	f3 0f 5c c1	 subss	 xmm0, xmm1

; 57   : 				GCItemDurSend(lpObj->m_Index, 1, (BYTE)Left->m_Durability, 0);

  00154	6a 00		 push	 0
  00156	f3 0f 2c c0	 cvttss2si eax, xmm0
  0015a	f3 0f 11 87 f8
	00 00 00	 movss	 DWORD PTR [edi+248], xmm0
  00162	0f b6 c0	 movzx	 eax, al
  00165	50		 push	 eax
  00166	6a 01		 push	 1
  00168	ff 36		 push	 DWORD PTR [esi]
  0016a	e8 00 00 00 00	 call	 ?GCItemDurSend@@YAXHEEE@Z ; GCItemDurSend

; 58   : 
; 59   : 				if ( Left->m_Durability < 1.0f )

  0016f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00177	83 c4 10	 add	 esp, 16			; 00000010H
  0017a	0f 2f 87 f8 00
	00 00		 comiss	 xmm0, DWORD PTR [edi+248]
  00181	76 1f		 jbe	 SHORT $LN15@DecreaseAr

; 60   : 				{
; 61   : 					lpObj->pInventory[1].Clear();

  00183	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00189	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  0018f	e8 00 00 00 00	 call	 ?Clear@CItem@@QAEXXZ	; CItem::Clear

; 62   : 					GCInventoryItemDeleteSend(lpObj->m_Index, 1, 0);

  00194	6a 00		 push	 0
  00196	6a 01		 push	 1
$LN19@DecreaseAr:
  00198	ff 36		 push	 DWORD PTR [esi]
  0019a	e8 00 00 00 00	 call	 ?GCInventoryItemDeleteSend@@YAXHEE@Z ; GCInventoryItemDeleteSend
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@DecreaseAr:

; 95   : 			{
; 96   : 				return FALSE;
; 97   : 			}
; 98   : 		}
; 99   : 	}
; 100  : 
; 101  : 	return TRUE;

  001a2	5f		 pop	 edi
  001a3	b8 01 00 00 00	 mov	 eax, 1
  001a8	5e		 pop	 esi

; 102  : }

  001a9	5d		 pop	 ebp
  001aa	c2 04 00	 ret	 4
?DecreaseArrow@CObjBaseAttack@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CObjBaseAttack::DecreaseArrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ??1CObjBaseAttack@@UAE@XZ
_TEXT	SEGMENT
??1CObjBaseAttack@@UAE@XZ PROC				; CObjBaseAttack::~CObjBaseAttack, COMDAT
; _this$ = ecx

; 34   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CObjBaseAttack@@6B@

; 35   : 	return;
; 36   : }

  00006	c3		 ret	 0
??1CObjBaseAttack@@UAE@XZ ENDP				; CObjBaseAttack::~CObjBaseAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ??0CObjBaseAttack@@QAE@XZ
_TEXT	SEGMENT
??0CObjBaseAttack@@QAE@XZ PROC				; CObjBaseAttack::CObjBaseAttack, COMDAT
; _this$ = ecx

; 29   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CObjBaseAttack@@6B@

; 30   : 	return;
; 31   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CObjBaseAttack@@QAE@XZ ENDP				; CObjBaseAttack::CObjBaseAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\comboattack.h
;	COMDAT ?Init@ComboSkillData@@QAEXXZ
_TEXT	SEGMENT
?Init@ComboSkillData@@QAEXXZ PROC			; ComboSkillData::Init, COMDAT
; _this$ = ecx

; 19   : 		this->dwTime = 0;
; 20   : 		this->Skill[0] = -1;

  00000	83 c8 ff	 or	 eax, -1
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00009	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 21   : 		this->Skill[1] = -1;

  0000d	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 22   : 		this->Skill[2] = -1;

  00011	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 23   : 		this->ProgressIndex = -1;

  00015	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 24   : 	};	// line : 23

  00018	c3		 ret	 0
?Init@ComboSkillData@@QAEXXZ ENDP			; ComboSkillData::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\objbaseattack.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
