; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\ImperialGuardianRewardExp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??0CImperialGuardianRewardExp@@QAE@XZ		; CImperialGuardianRewardExp::CImperialGuardianRewardExp
PUBLIC	??1CImperialGuardianRewardExp@@UAE@XZ		; CImperialGuardianRewardExp::~CImperialGuardianRewardExp
PUBLIC	?Init@CImperialGuardianRewardExp@@QAEXXZ	; CImperialGuardianRewardExp::Init
PUBLIC	?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z ; CImperialGuardianRewardExp::LoadScript
PUBLIC	?GetRewardExp@CImperialGuardianRewardExp@@QAEHH@Z ; CImperialGuardianRewardExp::GetRewardExp
PUBLIC	?DropReward@CImperialGuardianRewardExp@@QAEXHH@Z ; CImperialGuardianRewardExp::DropReward
PUBLIC	?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::deallocate
PUBLIC	?allocate@?$allocator@U_stRewardExpInfo@@@std@@QAEPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::allocate
PUBLIC	?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reallocate
PUBLIC	??_GCImperialGuardianRewardExp@@UAEPAXI@Z	; CImperialGuardianRewardExp::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CImperialGuardianRewardExp@@6B@		; CImperialGuardianRewardExp::`vftable'
PUBLIC	??_C@_0DD@FHIJEBLO@?$FLIMPERIALGUARDIAN?$FN?$FLREWARDEXP?$FN?5lp@ ; `string'
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BP@MHGGMIDM@EventItemBag?2ImperialGuardian?2?$AA@ ; `string'
PUBLIC	??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BO@FEODONIB@ImperialGuardianRewardExp?4cpp?$AA@ ; `string'
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CImperialGuardianRewardExp@@6B@		; CImperialGuardianRewardExp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCImperialGuardianRewardExp@@@8		; CImperialGuardianRewardExp `RTTI Type Descriptor'
PUBLIC	??_R3CImperialGuardianRewardExp@@8		; CImperialGuardianRewardExp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CImperialGuardianRewardExp@@8		; CImperialGuardianRewardExp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CImperialGuardianRewardExp@@8	; CImperialGuardianRewardExp::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??0EventItemBag@@QAE@XZ:PROC			; EventItemBag::EventItemBag
EXTRN	?Read@EventItemBag@@QAEXPAD@Z:PROC		; EventItemBag::Read
EXTRN	?Open@EventItemBag@@QAE_NHHEE@Z:PROC		; EventItemBag::Open
EXTRN	??_ECImperialGuardianRewardExp@@UAEPAXI@Z:PROC	; CImperialGuardianRewardExp::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CImperialGuardianRewardExp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CImperialGuardianRewardExp@@8 DD FLAT:??_R0?AVCImperialGuardianRewardExp@@@8 ; CImperialGuardianRewardExp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CImperialGuardianRewardExp@@8
rdata$r	ENDS
;	COMDAT ??_R2CImperialGuardianRewardExp@@8
rdata$r	SEGMENT
??_R2CImperialGuardianRewardExp@@8 DD FLAT:??_R1A@?0A@EA@CImperialGuardianRewardExp@@8 ; CImperialGuardianRewardExp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CImperialGuardianRewardExp@@8
rdata$r	SEGMENT
??_R3CImperialGuardianRewardExp@@8 DD 00H		; CImperialGuardianRewardExp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CImperialGuardianRewardExp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCImperialGuardianRewardExp@@@8
data$r	SEGMENT
??_R0?AVCImperialGuardianRewardExp@@@8 DD FLAT:??_7type_info@@6B@ ; CImperialGuardianRewardExp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCImperialGuardianRewardExp@@', 00H
data$r	ENDS
;	COMDAT ??_R4CImperialGuardianRewardExp@@6B@
rdata$r	SEGMENT
??_R4CImperialGuardianRewardExp@@6B@ DD 00H		; CImperialGuardianRewardExp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCImperialGuardianRewardExp@@@8
	DD	FLAT:??_R3CImperialGuardianRewardExp@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FEODONIB@ImperialGuardianRewardExp?4cpp?$AA@
CONST	SEGMENT
??_C@_0BO@FEODONIB@ImperialGuardianRewardExp?4cpp?$AA@ DB 'ImperialGuardi'
	DB	'anRewardExp.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@ DB '%s%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MHGGMIDM@EventItemBag?2ImperialGuardian?2?$AA@
CONST	SEGMENT
??_C@_0BP@MHGGMIDM@EventItemBag?2ImperialGuardian?2?$AA@ DB 'EventItemBag'
	DB	'\ImperialGuardian\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FHIJEBLO@?$FLIMPERIALGUARDIAN?$FN?$FLREWARDEXP?$FN?5lp@
CONST	SEGMENT
??_C@_0DD@FHIJEBLO@?$FLIMPERIALGUARDIAN?$FN?$FLREWARDEXP?$FN?5lp@ DB '[IM'
	DB	'PERIALGUARDIAN][REWARDEXP] lpFileName is null!!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CImperialGuardianRewardExp@@6B@
CONST	SEGMENT
??_7CImperialGuardianRewardExp@@6B@ DD FLAT:??_R4CImperialGuardianRewardExp@@6B@ ; CImperialGuardianRewardExp::`vftable'
	DD	FLAT:??_ECImperialGuardianRewardExp@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z$2
__ehfuncinfo$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@U1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stRewardExpInfo@@U1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@$$QAU2@@Z PROC ; std::allocator<_stRewardExpInfo>::construct<_stRewardExpInfo,_stRewardExpInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_stRewardExpInfo@@U1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@$$QAU2@@Z ENDP ; std::allocator<_stRewardExpInfo>::construct<_stRewardExpInfo,_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@U1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stRewardExpInfo@@U1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@U_stRewardExpInfo@@U1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U_stRewardExpInfo@@@std@@YA$$QAU_stRewardExpInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_stRewardExpInfo@@@std@@YA$$QAU_stRewardExpInfo@@AAU1@@Z PROC ; std::forward<_stRewardExpInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_stRewardExpInfo@@@std@@YA$$QAU_stRewardExpInfo@@AAU1@@Z ENDP ; std::forward<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stRewardExpInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_stRewardExpInfo@@U1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stRewardExpInfo@@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stRewardExpInfo@@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@@Z PROC ; std::allocator<_stRewardExpInfo>::destroy<_stRewardExpInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stRewardExpInfo@@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@@Z ENDP ; std::allocator<_stRewardExpInfo>::destroy<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 1c		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00010	85 c0		 test	 eax, eax
  00012	74 0e		 je	 SHORT $LN2@Uninit_mov
  00014	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00017	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
  0001e	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00022	83 c1 20	 add	 ecx, 32			; 00000020H
  00025	83 c0 20	 add	 eax, 32			; 00000020H
  00028	3b ca		 cmp	 ecx, edx
  0002a	75 e4		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAU_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAU_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@PAU1@@Z PROC ; std::_Val_type<_stRewardExpInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAU_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@PAU1@@Z ENDP ; std::_Val_type<_stRewardExpInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stRewardExpInfo@@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_stRewardExpInfo@@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@@Z PROC ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::destroy<_stRewardExpInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@U_stRewardExpInfo@@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@@Z ENDP ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::destroy<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAU_stRewardExpInfo@@PAU1@@std@@YAAAPAU_stRewardExpInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAU_stRewardExpInfo@@PAU1@@std@@YAAAPAU_stRewardExpInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<_stRewardExpInfo *,_stRewardExpInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAU_stRewardExpInfo@@PAU1@@std@@YAAAPAU_stRewardExpInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<_stRewardExpInfo *,_stRewardExpInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAU_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAU_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@PAU1@@Z PROC ; std::_Unchecked<_stRewardExpInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAU_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@PAU1@@Z ENDP ; std::_Unchecked<_stRewardExpInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_stRewardExpInfo@@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_stRewardExpInfo@@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::destroy<_stRewardExpInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@U_stRewardExpInfo@@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::destroy<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@ABU1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stRewardExpInfo@@ABU1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@ABU2@@Z PROC ; std::allocator<_stRewardExpInfo>::construct<_stRewardExpInfo,_stRewardExpInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_stRewardExpInfo@@ABU1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@ABU2@@Z ENDP ; std::allocator<_stRewardExpInfo>::construct<_stRewardExpInfo,_stRewardExpInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@AAU1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stRewardExpInfo@@AAU1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@AAU2@@Z PROC ; std::allocator<_stRewardExpInfo>::construct<_stRewardExpInfo,_stRewardExpInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_stRewardExpInfo@@AAU1@@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@AAU2@@Z ENDP ; std::allocator<_stRewardExpInfo>::construct<_stRewardExpInfo,_stRewardExpInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU_stRewardExpInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU_stRewardExpInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<_stRewardExpInfo *,_stRewardExpInfo *,std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAU_stRewardExpInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<_stRewardExpInfo *,_stRewardExpInfo *,std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAXPAU_stRewardExpInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAXPAU_stRewardExpInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAXPAU_stRewardExpInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@U_stRewardExpInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stRewardExpInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@U_stRewardExpInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stRewardExpInfo@@0@Z PROC ; std::_Ptr_cat<_stRewardExpInfo,_stRewardExpInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@U_stRewardExpInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU_stRewardExpInfo@@0@Z ENDP ; std::_Ptr_cat<_stRewardExpInfo,_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@U_stRewardExpInfo@@@std@@@std@@YAABV?$allocator@U_stRewardExpInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@U_stRewardExpInfo@@@std@@@std@@YAABV?$allocator@U_stRewardExpInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<_stRewardExpInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@U_stRewardExpInfo@@@std@@@std@@YAABV?$allocator@U_stRewardExpInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<_stRewardExpInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@U_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@U_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stRewardExpInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@U_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stRewardExpInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@U_stRewardExpInfo@@ABU1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABU_stRewardExpInfo@@@std@@YAABU_stRewardExpInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU_stRewardExpInfo@@@std@@YAABU_stRewardExpInfo@@ABU1@@Z PROC ; std::forward<_stRewardExpInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABU_stRewardExpInfo@@@std@@YAABU_stRewardExpInfo@@ABU1@@Z ENDP ; std::forward<_stRewardExpInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_stRewardExpInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$construct@U_stRewardExpInfo@@AAU1@@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAXAAV?$allocator@U_stRewardExpInfo@@@1@PAU_stRewardExpInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAU_stRewardExpInfo@@@std@@YAAAU_stRewardExpInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU_stRewardExpInfo@@@std@@YAAAU_stRewardExpInfo@@AAU1@@Z PROC ; std::forward<_stRewardExpInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAU_stRewardExpInfo@@@std@@YAAAU_stRewardExpInfo@@AAU1@@Z ENDP ; std::forward<_stRewardExpInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBU_stRewardExpInfo@@@std@@YAPBU_stRewardExpInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBU_stRewardExpInfo@@@std@@YAPBU_stRewardExpInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<_stRewardExpInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBU_stRewardExpInfo@@@std@@YAPBU_stRewardExpInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<_stRewardExpInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAU_stRewardExpInfo@@@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEPAU_stRewardExpInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAU_stRewardExpInfo@@@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEPAU_stRewardExpInfo@@PAU2@00@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Umove<_stRewardExpInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAU_stRewardExpInfo@@@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEPAU_stRewardExpInfo@@PAU2@00@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Umove<_stRewardExpInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAXPAU_stRewardExpInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAXPAU_stRewardExpInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@YAXPAU_stRewardExpInfo@@0AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@U_stRewardExpInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stRewardExpInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@U_stRewardExpInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stRewardExpInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1><std::allocator<_stRewardExpInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@U_stRewardExpInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@U_stRewardExpInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1><std::allocator<_stRewardExpInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@U_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@AAU1@@Z PROC ; std::addressof<_stRewardExpInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@U_stRewardExpInfo@@@std@@YAPAU_stRewardExpInfo@@AAU1@@Z ENDP ; std::addressof<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stRewardExpInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_stRewardExpInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@U_stRewardExpInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_stRewardExpInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 11		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00017	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
??$construct@U_stRewardExpInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::construct<_stRewardExpInfo,_stRewardExpInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBU_stRewardExpInfo@@@std@@YAPBU_stRewardExpInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBU_stRewardExpInfo@@@std@@YAPBU_stRewardExpInfo@@ABU1@@Z PROC ; std::addressof<_stRewardExpInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBU_stRewardExpInfo@@@std@@YAPBU_stRewardExpInfo@@ABU1@@Z ENDP ; std::addressof<_stRewardExpInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU_stRewardExpInfo@@@std@@SAPAU_stRewardExpInfo@@AAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU_stRewardExpInfo@@@std@@SAPAU_stRewardExpInfo@@AAU3@@Z PROC ; std::pointer_traits<_stRewardExpInfo *>::pointer_to, COMDAT

; 316  : 		{	// convert raw reference to pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 		return (_STD addressof(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 318  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU_stRewardExpInfo@@@std@@SAPAU_stRewardExpInfo@@AAU3@@Z ENDP ; std::pointer_traits<_stRewardExpInfo *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator++, COMDAT
; _this$ = ecx

; 340  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 341  : 		_Myiter _Tmp = *this;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 112  : 		++this->_Ptr;

  0000a	83 c2 20	 add	 edx, 32			; 00000020H
  0000d	89 11		 mov	 DWORD PTR [ecx], edx

; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator++, COMDAT
; _this$ = ecx

; 112  : 		++this->_Ptr;

  00000	83 01 20	 add	 DWORD PTR [ecx], 32	; 00000020H

; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 337  : 		}

  00005	c3		 ret	 0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEPAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEPAU_stRewardExpInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator->, COMDAT
; _this$ = ecx

; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 331  : 		}

  00002	c3		 ret	 0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEPAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEAAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEAAU_stRewardExpInfo@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator*, COMDAT
; _this$ = ecx

; 325  : 		return ((reference)**(_Mybase *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 326  : 		}

  00002	c3		 ret	 0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEAAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@PAU_stRewardExpInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@PAU_stRewardExpInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >, COMDAT
; _this$ = ecx

; 307  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 308  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@PAU_stRewardExpInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::_Compat, COMDAT
; _this$ = ecx

; 256  : 		}

  00000	c2 04 00	 ret	 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 206  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 211  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 212  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 207  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator++, COMDAT
; _this$ = ecx

; 96   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 97   : 		if (this->_Getcont() == 0
; 98   : 			|| this->_Ptr == 0
; 99   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 100  : 			{	// report error
; 101  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 102  : 			_SCL_SECURE_OUT_OF_RANGE;
; 103  : 			}
; 104  : 
; 105  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 106  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 107  : 		_SCL_SECURE_VALIDATE_RANGE(
; 108  : 			this->_Ptr != _Tptr()
; 109  : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 110  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 111  : 
; 112  : 		++this->_Ptr;

  00000	83 01 20	 add	 DWORD PTR [ecx], 32	; 00000020H

; 113  : 		return (*this);

  00003	8b c1		 mov	 eax, ecx

; 114  : 		}

  00005	c3		 ret	 0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABU_stRewardExpInfo@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator*, COMDAT
; _this$ = ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 87   : 		}

  00002	c3		 ret	 0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABU_stRewardExpInfo@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@PAU_stRewardExpInfo@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@PAU_stRewardExpInfo@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Parg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 48   : 		this->_Adopt(_Pvector);
; 49   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@PAU_stRewardExpInfo@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCImperialGuardianRewardExp@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCImperialGuardianRewardExp@@UAEPAXI@Z PROC		; CImperialGuardianRewardExp::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CImperialGuardianRewardExp@@UAE@XZ ; CImperialGuardianRewardExp::~CImperialGuardianRewardExp
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCImperialGuardianRewardExp@@UAEPAXI@Z ENDP		; CImperialGuardianRewardExp::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXPAU_stRewardExpInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXPAU_stRewardExpInfo@@0@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXPAU_stRewardExpInfo@@0@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xran@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xran@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Xran, COMDAT
; _this$ = ecx

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN4@Xran:
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 05	 sar	 eax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 05	 sar	 eax, 5

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 07	 mov	 ebx, 134217727		; 07ffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 05	 sar	 edx, 5

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 05	 sar	 edi, 5

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00033	53		 push	 ebx
  00034	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_stRewardExpInfo@@@std@@QAEPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00039	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003c	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0003f	6a 00		 push	 0
  00041	56		 push	 esi
  00042	50		 push	 eax
  00043	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1623 : 		_TRY_BEGIN

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004d	ff 36		 push	 DWORD PTR [esi]
  0004f	e8 00 00 00 00	 call	 ??$_Uninit_move@PAU_stRewardExpInfo@@PAU1@V?$allocator@U_stRewardExpInfo@@@std@@U1@@std@@YAPAU_stRewardExpInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<_stRewardExpInfo *,_stRewardExpInfo *,std::allocator<_stRewardExpInfo>,_stRewardExpInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00054	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00056	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00059	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  0005c	2b f9		 sub	 edi, ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  0005e	85 c9		 test	 ecx, ecx
  00060	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00062	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00065	2b c1		 sub	 eax, ecx
  00067	c1 f8 05	 sar	 eax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0006a	50		 push	 eax
  0006b	51		 push	 ecx
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00073	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00076	83 e7 e0	 and	 edi, -32		; ffffffe0H
  00079	c1 e3 05	 shl	 ebx, 5
  0007c	03 d8		 add	 ebx, eax
  0007e	03 f8		 add	 edi, eax
  00080	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00083	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 06		 mov	 DWORD PTR [esi], eax

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBE_NPBU_stRewardExpInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBE_NPBU_stRewardExpInfo@@@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBE_NPBU_stRewardExpInfo@@@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 07	 mov	 ecx, 134217727		; 07ffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 05	 sar	 esi, 5

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXPAU_stRewardExpInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXPAU_stRewardExpInfo@@0@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXPAU_stRewardExpInfo@@0@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXABU_stRewardExpInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXABU_stRewardExpInfo@@@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 24		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 1e		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())

  00017	2b f9		 sub	 edi, ecx
  00019	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001c	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0001e	6a 01		 push	 1
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00027	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002a	85 c0		 test	 eax, eax
  0002c	74 2a		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0002e	83 e7 e0	 and	 edi, -32		; ffffffe0H
  00031	03 3e		 add	 edi, DWORD PTR [esi]

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else

  00033	eb 15		 jmp	 SHORT $LN222@push_back
$LN2@push_back:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00035	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00038	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0003a	6a 01		 push	 1
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?_Reserve@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00043	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00046	85 c0		 test	 eax, eax
  00048	74 0e		 je	 SHORT $LN205@push_back
$LN222@push_back:
  0004a	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00050	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00054	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00058	83 46 04 20	 add	 DWORD PTR [esi+4], 32	; 00000020H
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?push_back@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXABU_stRewardExpInfo@@@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?at@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEAAU_stRewardExpInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEAAU_stRewardExpInfo@@I@Z PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::at, COMDAT
; _this$ = ecx

; 1205 : 		{	// subscript mutable sequence with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	2b c2		 sub	 eax, edx

; 1206 : 		if (size() <= _Pos)

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Pos$[ebp]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000d	c1 f8 05	 sar	 eax, 5

; 1206 : 		if (size() <= _Pos)

  00010	3b c1		 cmp	 eax, ecx
  00012	76 0a		 jbe	 SHORT $LN38@at

; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));

  00014	c1 e1 05	 shl	 ecx, 5
  00017	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1209 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN38@at:

; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");
; 1785 : 		}
; 1786 : 
; 1787 : 	[[noreturn]] void _Xran() const
; 1788 : 		{	// report an out_of_range error
; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00023	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN40@at:
$LN37@at:
  00028	cc		 int	 3
?at@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEAAU_stRewardExpInfo@@I@Z ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?empty@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBE_NXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::empty, COMDAT
; _this$ = ecx

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	33 c0		 xor	 eax, eax
  00004	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00007	0f 94 c0	 sete	 al

; 1190 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBE_NXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 05	 sar	 eax, 5

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@2@XZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::end, COMDAT
; _this$ = ecx

; 1066 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?end@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@2@XZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::begin, COMDAT
; _this$ = ecx

; 1056 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 46   : 		: _Ptr(_Parg)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?begin@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@@2@XZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 05	 sar	 eax, 5

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 05	 sar	 eax, 5

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::~vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 05	 sar	 eax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::~vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >,std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >::_Vector_val<std::_Simple_types<_stRewardExpInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<_stRewardExpInfo> >::_Vector_val<std::_Simple_types<_stRewardExpInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABQAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAPAU_stRewardExpInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stRewardExpInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stRewardExpInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@U_stRewardExpInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >::_Vector_alloc<std::_Vec_base_types<_stRewardExpInfo,std::allocator<_stRewardExpInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEPAU_stRewardExpInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEPAU_stRewardExpInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U_stRewardExpInfo@@@std@@QAEPAU_stRewardExpInfo@@I@Z ; std::allocator<_stRewardExpInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAEPAU_stRewardExpInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@ABV?$allocator@U_stRewardExpInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@ABV?$allocator@U_stRewardExpInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::_Wrap_alloc<std::allocator<_stRewardExpInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@U_stRewardExpInfo@@@std@@@std@@QAE@ABV?$allocator@U_stRewardExpInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<_stRewardExpInfo> >::_Wrap_alloc<std::allocator<_stRewardExpInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAIABV?$allocator@U_stRewardExpInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAIABV?$allocator@U_stRewardExpInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U_stRewardExpInfo@@@std@@@std@@SAIABV?$allocator@U_stRewardExpInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<_stRewardExpInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U_stRewardExpInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U_stRewardExpInfo@@@std@@QBEIXZ PROC ; std::allocator<_stRewardExpInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U_stRewardExpInfo@@@std@@QBEIXZ ENDP ; std::allocator<_stRewardExpInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_stRewardExpInfo@@@std@@QAEPAU_stRewardExpInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_stRewardExpInfo@@@std@@QAEPAU_stRewardExpInfo@@I@Z PROC ; std::allocator<_stRewardExpInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 05	 shl	 eax, 5

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U_stRewardExpInfo@@@std@@QAEPAU_stRewardExpInfo@@I@Z ENDP ; std::allocator<_stRewardExpInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z PROC ; std::allocator<_stRewardExpInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	81 f9 ff ff ff
	07		 cmp	 ecx, 134217727		; 07ffffffH
  0000f	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00011	c1 e1 05	 shl	 ecx, 5

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 19		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001c	a8 1f		 test	 al, 31			; 0000001fH
  0001e	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00020	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00023	3b c8		 cmp	 ecx, eax
  00025	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00027	2b c1		 sub	 eax, ecx
  00029	83 f8 04	 cmp	 eax, 4
  0002c	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00031	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c1		 mov	 eax, ecx
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005b	cc		 int	 3
?deallocate@?$allocator@U_stRewardExpInfo@@@std@@QAEXPAU_stRewardExpInfo@@I@Z ENDP ; std::allocator<_stRewardExpInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stRewardExpInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U_stRewardExpInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<_stRewardExpInfo>::allocator<_stRewardExpInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@U_stRewardExpInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<_stRewardExpInfo>::allocator<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_stRewardExpInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U_stRewardExpInfo@@@std@@QAE@XZ PROC	; std::allocator<_stRewardExpInfo>::allocator<_stRewardExpInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U_stRewardExpInfo@@@std@@QAE@XZ ENDP	; std::allocator<_stRewardExpInfo>::allocator<_stRewardExpInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ?DropReward@CImperialGuardianRewardExp@@QAEXHH@Z
_TEXT	SEGMENT
_rewardExpInfo$ = -40					; size = 32
tv366 = -8						; size = 4
tv365 = -4						; size = 4
_nSize$1$ = 8						; size = 4
_nUserIndex$ = 8					; size = 4
_iRewardType$ = 12					; size = 4
?DropReward@CImperialGuardianRewardExp@@QAEXHH@Z PROC	; CImperialGuardianRewardExp::DropReward, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	int nResult = 0;
; 198  : 
; 199  : 	if( !OBJMAX_RANGE(nUserIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nUserIndex$[ebp]
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	85 d2		 test	 edx, edx
  0000e	0f 88 3b 01 00
	00		 js	 $LN82@DropReward
  00014	33 c0		 xor	 eax, eax
  00016	81 fa eb 2c 00
	00		 cmp	 edx, 11499		; 00002cebH
  0001c	0f 9e c0	 setle	 al
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 28 01 00
	00		 je	 $LN82@DropReward

; 202  : 		return;
; 203  : 	}
; 204  : 
; 205  : 	LPOBJ lpObj = &gObj[nUserIndex];

  00027	69 ca 40 27 00
	00		 imul	 ecx, edx, 10048

; 211  : 	for(int i = 0; i < nSize; i++)

  0002d	33 d2		 xor	 edx, edx
  0002f	57		 push	 edi
  00030	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	0f bf 81 96 00
	00 00		 movsx	 eax, WORD PTR [ecx+150]
  0003d	0f bf b9 a8 00
	00 00		 movsx	 edi, WORD PTR [ecx+168]
  00044	03 f8		 add	 edi, eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00046	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00049	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  0004c	c1 f8 05	 sar	 eax, 5
  0004f	89 45 08	 mov	 DWORD PTR _nSize$1$[ebp], eax
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 211  : 	for(int i = 0; i < nSize; i++)

  00052	85 c0		 test	 eax, eax
  00054	0f 8e 8d 00 00
	00		 jle	 $LN84@DropReward

; 214  : 
; 215  : 		if(		lpObj->iResetCount >= rewardExpInfo.m_MinReset
; 216  : 			&&	lpObj->iResetCount <= rewardExpInfo.m_MaxReset )

  0005a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0005d	53		 push	 ebx
  0005e	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00061	2b c3		 sub	 eax, ebx
  00063	c1 f8 05	 sar	 eax, 5
  00066	33 f6		 xor	 esi, esi
  00068	89 5d f8	 mov	 DWORD PTR tv366[ebp], ebx
  0006b	89 45 fc	 mov	 DWORD PTR tv365[ebp], eax
  0006e	66 90		 npad	 2
$LL4@DropReward:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1206 : 		if (size() <= _Pos)

  00070	3b c2		 cmp	 eax, edx
  00072	0f 86 f6 00 00
	00		 jbe	 $LN88@DropReward
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 213  : 		rewardExpInfo = this->m_vtRewardExpInfo.at(i);

  00078	0f 10 0c 1e	 movups	 xmm1, XMMWORD PTR [esi+ebx]
  0007c	0f 10 44 1e 10	 movups	 xmm0, XMMWORD PTR [esi+ebx+16]

; 214  : 
; 215  : 		if(		lpObj->iResetCount >= rewardExpInfo.m_MinReset
; 216  : 			&&	lpObj->iResetCount <= rewardExpInfo.m_MaxReset )

  00081	8b 99 20 27 00
	00		 mov	 ebx, DWORD PTR [ecx+10016]
  00087	66 0f 7e c8	 movd	 eax, xmm1
  0008b	0f 11 4d d8	 movups	 XMMWORD PTR _rewardExpInfo$[ebp], xmm1
  0008f	0f 11 45 e8	 movups	 XMMWORD PTR _rewardExpInfo$[ebp+16], xmm0
  00093	3b d8		 cmp	 ebx, eax
  00095	7c 0f		 jl	 SHORT $LN2@DropReward
  00097	3b 5d dc	 cmp	 ebx, DWORD PTR _rewardExpInfo$[ebp+4]
  0009a	7f 0a		 jg	 SHORT $LN2@DropReward

; 217  : 		{
; 218  : 			if( nUserLevel >= rewardExpInfo.m_MinLevel &&

  0009c	3b 7d e0	 cmp	 edi, DWORD PTR _rewardExpInfo$[ebp+8]
  0009f	7c 05		 jl	 SHORT $LN2@DropReward
  000a1	3b 7d e4	 cmp	 edi, DWORD PTR _rewardExpInfo$[ebp+12]
  000a4	7e 11		 jle	 SHORT $LN78@DropReward
$LN2@DropReward:

; 211  : 	for(int i = 0; i < nSize; i++)

  000a6	42		 inc	 edx
  000a7	83 c6 20	 add	 esi, 32			; 00000020H
  000aa	3b 55 08	 cmp	 edx, DWORD PTR _nSize$1$[ebp]
  000ad	7d 37		 jge	 SHORT $LN85@DropReward
  000af	8b 45 fc	 mov	 eax, DWORD PTR tv365[ebp]
  000b2	8b 5d f8	 mov	 ebx, DWORD PTR tv366[ebp]
  000b5	eb b9		 jmp	 SHORT $LL4@DropReward
$LN78@DropReward:

; 219  : 				nUserLevel <= rewardExpInfo.m_MaxLevel )
; 220  : 			{
; 221  : 				if( iRewardType == 0 && rewardExpInfo.pEventDugeonItemBag )

  000b7	8b 45 0c	 mov	 eax, DWORD PTR _iRewardType$[ebp]
  000ba	85 c0		 test	 eax, eax
  000bc	75 31		 jne	 SHORT $LN8@DropReward
  000be	8b 55 f4	 mov	 edx, DWORD PTR _rewardExpInfo$[ebp+28]
  000c1	85 d2		 test	 edx, edx
  000c3	74 21		 je	 SHORT $LN85@DropReward

; 222  : 				{
; 223  : 					rewardExpInfo.pEventDugeonItemBag->Open(lpObj->m_Index,lpObj->MapNumber,lpObj->X,lpObj->Y);

  000c5	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000cc	50		 push	 eax
  000cd	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  000d4	50		 push	 eax
  000d5	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  000dc	50		 push	 eax
  000dd	ff 31		 push	 DWORD PTR [ecx]
  000df	8b ca		 mov	 ecx, edx

; 226  : 				{
; 227  : 					rewardExpInfo.pEventDugeonItemBagStone->Open(lpObj->m_Index,lpObj->MapNumber,lpObj->X,lpObj->Y);

  000e1	e8 00 00 00 00	 call	 ?Open@EventItemBag@@QAE_NHHEE@Z ; EventItemBag::Open
$LN85@DropReward:
  000e6	5b		 pop	 ebx
$LN84@DropReward:
  000e7	5f		 pop	 edi
  000e8	5e		 pop	 esi

; 237  : }

  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
$LN8@DropReward:

; 224  : 				}
; 225  : 				else if( iRewardType == 1 )

  000ef	83 f8 01	 cmp	 eax, 1
  000f2	75 2b		 jne	 SHORT $LN10@DropReward

; 226  : 				{
; 227  : 					rewardExpInfo.pEventDugeonItemBagStone->Open(lpObj->m_Index,lpObj->MapNumber,lpObj->X,lpObj->Y);

  000f4	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  000fb	50		 push	 eax
  000fc	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00103	50		 push	 eax
  00104	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0010b	50		 push	 eax
  0010c	ff 31		 push	 DWORD PTR [ecx]
  0010e	8b 4d f0	 mov	 ecx, DWORD PTR _rewardExpInfo$[ebp+24]
  00111	e8 00 00 00 00	 call	 ?Open@EventItemBag@@QAE_NHHEE@Z ; EventItemBag::Open
  00116	5b		 pop	 ebx
  00117	5f		 pop	 edi
  00118	5e		 pop	 esi

; 237  : }

  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 08 00	 ret	 8
$LN10@DropReward:

; 228  : 				}
; 229  : 				else if( iRewardType == 2 )

  0011f	83 f8 02	 cmp	 eax, 2
  00122	75 c2		 jne	 SHORT $LN85@DropReward

; 230  : 				{
; 231  : 					rewardExpInfo.pEventDugeonItemBagGaion->Open(lpObj->m_Index,lpObj->MapNumber,lpObj->X,lpObj->Y);

  00124	0f b6 81 21 01
	00 00		 movzx	 eax, BYTE PTR [ecx+289]
  0012b	50		 push	 eax
  0012c	0f b6 81 20 01
	00 00		 movzx	 eax, BYTE PTR [ecx+288]
  00133	50		 push	 eax
  00134	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  0013b	50		 push	 eax
  0013c	ff 31		 push	 DWORD PTR [ecx]
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _rewardExpInfo$[ebp+20]
  00141	e8 00 00 00 00	 call	 ?Open@EventItemBag@@QAE_NHHEE@Z ; EventItemBag::Open
  00146	5b		 pop	 ebx
  00147	5f		 pop	 edi
  00148	5e		 pop	 esi

; 237  : }

  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 08 00	 ret	 8
$LN82@DropReward:

; 200  : 	{
; 201  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  0014f	68 c9 00 00 00	 push	 201			; 000000c9H
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FEODONIB@ImperialGuardianRewardExp?4cpp?$AA@
  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
  00167	5e		 pop	 esi

; 237  : }

  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 08 00	 ret	 8
$LN88@DropReward:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  0016e	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  00173	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN89@DropReward:
$LN86@DropReward:
  00178	cc		 int	 3
?DropReward@CImperialGuardianRewardExp@@QAEXHH@Z ENDP	; CImperialGuardianRewardExp::DropReward
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ?GetRewardExp@CImperialGuardianRewardExp@@QAEHH@Z
_TEXT	SEGMENT
_rewardExpInfo$ = -44					; size = 32
tv346 = -12						; size = 4
tv347 = -8						; size = 4
_nSize$1$ = -4						; size = 4
_lpObj$1$ = 8						; size = 4
_nUserIndex$ = 8					; size = 4
?GetRewardExp@CImperialGuardianRewardExp@@QAEHH@Z PROC	; CImperialGuardianRewardExp::GetRewardExp, COMDAT
; _this$ = ecx

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 165  : 	int nSize = this->m_vtRewardExpInfo.size();
; 166  : 	int nResult = 0;

  00009	33 d2		 xor	 edx, edx

; 168  : 	if( !OBJMAX_RANGE(nUserIndex) )

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _nUserIndex$[ebp]
  0000e	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000f	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00012	2b 7e 08	 sub	 edi, DWORD PTR [esi+8]
  00015	c1 ff 05	 sar	 edi, 5
  00018	89 7d fc	 mov	 DWORD PTR _nSize$1$[ebp], edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 168  : 	if( !OBJMAX_RANGE(nUserIndex) )

  0001b	85 c9		 test	 ecx, ecx
  0001d	0f 88 af 00 00
	00		 js	 $LN76@GetRewardE
  00023	33 c0		 xor	 eax, eax
  00025	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  0002b	0f 9e c0	 setle	 al
  0002e	85 c0		 test	 eax, eax
  00030	0f 84 9c 00 00
	00		 je	 $LN76@GetRewardE

; 172  : 	}
; 173  : 
; 174  : 	LPOBJ lpObj = &gObj[nUserIndex];

  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003b	69 c9 40 27 00
	00		 imul	 ecx, ecx, 10048
  00041	03 c1		 add	 eax, ecx

; 175  : 	int nUserLevel = lpObj->Level + lpObj->MasterLevel;
; 176  : 	_stRewardExpInfo rewardExpInfo;
; 177  : 
; 178  : 	for(int i = 0; i < nSize; i++)

  00043	33 c9		 xor	 ecx, ecx
  00045	53		 push	 ebx
  00046	89 45 08	 mov	 DWORD PTR _lpObj$1$[ebp], eax
  00049	0f bf 98 a8 00
	00 00		 movsx	 ebx, WORD PTR [eax+168]
  00050	0f bf 80 96 00
	00 00		 movsx	 eax, WORD PTR [eax+150]
  00057	03 d8		 add	 ebx, eax
  00059	85 ff		 test	 edi, edi
  0005b	7e 6a		 jle	 SHORT $LN3@GetRewardE

; 183  : 			&&	rewardExpInfo.m_MaxReset > gObj[nUserIndex].iResetCount )

  0005d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00060	89 45 f8	 mov	 DWORD PTR tv347[ebp], eax
  00063	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00066	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  00069	c1 f8 05	 sar	 eax, 5
  0006c	33 f6		 xor	 esi, esi
  0006e	89 45 f4	 mov	 DWORD PTR tv346[ebp], eax
$LL4@GetRewardE:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1206 : 		if (size() <= _Pos)

  00071	3b c1		 cmp	 eax, ecx
  00073	0f 86 7b 00 00
	00		 jbe	 $LN78@GetRewardE
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 183  : 			&&	rewardExpInfo.m_MaxReset > gObj[nUserIndex].iResetCount )

  00079	8b 45 f8	 mov	 eax, DWORD PTR tv347[ebp]
  0007c	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  0007f	0f 10 0c 06	 movups	 xmm1, XMMWORD PTR [esi+eax]
  00083	0f 10 44 06 10	 movups	 xmm0, XMMWORD PTR [esi+eax+16]
  00088	66 0f 7e c8	 movd	 eax, xmm1
  0008c	0f 11 4d d4	 movups	 XMMWORD PTR _rewardExpInfo$[ebp], xmm1
  00090	3b 87 20 27 00
	00		 cmp	 eax, DWORD PTR [edi+10016]
  00096	8b 7d fc	 mov	 edi, DWORD PTR _nSize$1$[ebp]
  00099	0f 11 45 e4	 movups	 XMMWORD PTR _rewardExpInfo$[ebp+16], xmm0
  0009d	7d 1d		 jge	 SHORT $LN2@GetRewardE
  0009f	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$1$[ebp]
  000a2	8b 87 20 27 00
	00		 mov	 eax, DWORD PTR [edi+10016]
  000a8	8b 7d fc	 mov	 edi, DWORD PTR _nSize$1$[ebp]
  000ab	39 45 d8	 cmp	 DWORD PTR _rewardExpInfo$[ebp+4], eax
  000ae	7e 0c		 jle	 SHORT $LN2@GetRewardE

; 184  : 		{
; 185  : 			if(		rewardExpInfo.m_MinLevel < nUserLevel 
; 186  : 				&&	rewardExpInfo.m_MaxLevel > nUserLevel )

  000b0	39 5d dc	 cmp	 DWORD PTR _rewardExpInfo$[ebp+8], ebx
  000b3	7d 07		 jge	 SHORT $LN2@GetRewardE
  000b5	39 5d e0	 cmp	 DWORD PTR _rewardExpInfo$[ebp+12], ebx
  000b8	0f 4f 55 e4	 cmovg	 edx, DWORD PTR _rewardExpInfo$[ebp+16]
$LN2@GetRewardE:

; 175  : 	int nUserLevel = lpObj->Level + lpObj->MasterLevel;
; 176  : 	_stRewardExpInfo rewardExpInfo;
; 177  : 
; 178  : 	for(int i = 0; i < nSize; i++)

  000bc	8b 45 f4	 mov	 eax, DWORD PTR tv346[ebp]
  000bf	41		 inc	 ecx
  000c0	83 c6 20	 add	 esi, 32			; 00000020H
  000c3	3b cf		 cmp	 ecx, edi
  000c5	7c aa		 jl	 SHORT $LL4@GetRewardE
$LN3@GetRewardE:
  000c7	5b		 pop	 ebx
  000c8	5f		 pop	 edi

; 187  : 			{
; 188  : 				nResult = rewardExpInfo.m_iRewardExp;
; 189  : 			}
; 190  : 		}
; 191  : 	}
; 192  : 	return nResult;

  000c9	8b c2		 mov	 eax, edx
  000cb	5e		 pop	 esi

; 193  : }

  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
$LN76@GetRewardE:

; 169  : 	{
; 170  : 		LogAdd("error : %s %d",__FILE__,__LINE__);

  000d2	68 aa 00 00 00	 push	 170			; 000000aaH
  000d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FEODONIB@ImperialGuardianRewardExp?4cpp?$AA@
  000dc	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 171  : 		return 0;

  000ea	33 c0		 xor	 eax, eax
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi

; 193  : }

  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 04 00	 ret	 4
$LN78@GetRewardE:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1789 : 		_Xout_of_range("invalid vector<T> subscript");

  000f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  000f9	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN79@GetRewardE:
$LN77@GetRewardE:
  000fe	cc		 int	 3
?GetRewardExp@CImperialGuardianRewardExp@@QAEHH@Z ENDP	; CImperialGuardianRewardExp::GetRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z
_TEXT	SEGMENT
$T2 = -596						; size = 4
$T3 = -592						; size = 4
$T4 = -588						; size = 4
_rewardExpInfo$5 = -584					; size = 32
_lpFileName$GSCopy$1$ = -552				; size = 4
tv1591 = -548						; size = 4
__Capacity$1$ = -544					; size = 4
_this$GSCopy$1$ = -540					; size = 4
_Path$6 = -536						; size = 260
_Path$7 = -276						; size = 260
_Path$8 = -276						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpFileName$ = 8					; size = 4
?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z PROC	; CImperialGuardianRewardExp::LoadScript, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 02 00
	00		 sub	 esp, 584		; 00000248H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b f1		 mov	 esi, ecx
  00030	89 b5 e4 fd ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00036	8b 5d 08	 mov	 ebx, DWORD PTR _lpFileName$[ebp]
  00039	89 9d d8 fd ff
	ff		 mov	 DWORD PTR _lpFileName$GSCopy$1$[ebp], ebx

; 34   : 	int Token;
; 35   : 	this->m_bLoaded = false;

  0003f	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0

; 36   : 
; 37   : 	if( lpFileName == NULL )

  00043	85 db		 test	 ebx, ebx
  00045	75 13		 jne	 SHORT $LN9@LoadScript

; 38   : 	{
; 39   : 		LogAdd("[IMPERIALGUARDIAN][REWARDEXP] lpFileName is null!!");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@FHIJEBLO@?$FLIMPERIALGUARDIAN?$FN?$FLREWARDEXP?$FN?5lp@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00052	83 c4 04	 add	 esp, 4

; 40   : 		return;

  00055	e9 58 04 00 00	 jmp	 $LN1@LoadScript
$LN9@LoadScript:

; 41   : 	}
; 42   : 
; 43   : 	SMDFile = fopen(lpFileName,"r");

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0005f	53		 push	 ebx
  00060	e8 00 00 00 00	 call	 _fopen
  00065	83 c4 08	 add	 esp, 8
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 44   : 
; 45   : 	if( SMDFile == NULL )

  0006d	85 c0		 test	 eax, eax
  0006f	75 1c		 jne	 SHORT $LN10@LoadScript

; 46   : 	{
; 47   : 		LogAdd(lMsg.Get(MSGGET(1,197)),lpFileName);

  00071	53		 push	 ebx
  00072	68 c5 01 00 00	 push	 453			; 000001c5H
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0007c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00081	50		 push	 eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 48   : 		return;

  00088	e9 22 04 00 00	 jmp	 $LN769@LoadScript
$LN10@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  0008d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 51   : 	if( !m_vtRewardExpInfo.empty() )

  00090	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00093	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  00096	0f 94 c0	 sete	 al
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 51   : 	if( !m_vtRewardExpInfo.empty() )

  00099	84 c0		 test	 al, al
  0009b	75 3c		 jne	 SHORT $LN3@LoadScript
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  0009d	8b 37		 mov	 esi, DWORD PTR [edi]

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0009f	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 55   : 		for( ; _It != m_vtRewardExpInfo.end(); _It++)

  000a2	74 2f		 je	 SHORT $LN766@LoadScript
$LL4@LoadScript:

; 56   : 		{
; 57   : 			if( _It->pEventDugeonItemBag != NULL )

  000a4	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 06		 je	 SHORT $LN27@LoadScript

; 58   : 				delete _It->pEventDugeonItemBag;

  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	6a 01		 push	 1
  000af	ff 10		 call	 DWORD PTR [eax]
$LN27@LoadScript:

; 59   : 
; 60   : 			if( _It->pEventDugeonItemBagStone != NULL )

  000b1	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  000b4	85 c9		 test	 ecx, ecx
  000b6	74 06		 je	 SHORT $LN29@LoadScript

; 61   : 				delete _It->pEventDugeonItemBagStone;

  000b8	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ba	6a 01		 push	 1
  000bc	ff 10		 call	 DWORD PTR [eax]
$LN29@LoadScript:

; 62   : 
; 63   : 			if( _It->pEventDugeonItemBagGaion != NULL )

  000be	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  000c1	85 c9		 test	 ecx, ecx
  000c3	74 06		 je	 SHORT $LN2@LoadScript

; 64   : 				delete _It->pEventDugeonItemBagGaion;

  000c5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c7	6a 01		 push	 1
  000c9	ff 10		 call	 DWORD PTR [eax]
$LN2@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  000cb	83 c6 20	 add	 esi, 32			; 00000020H

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  000ce	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 55   : 		for( ; _It != m_vtRewardExpInfo.end(); _It++)

  000d1	75 d1		 jne	 SHORT $LL4@LoadScript
$LN766@LoadScript:
  000d3	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  000d9	8b 07		 mov	 eax, DWORD PTR [edi]
  000db	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 72   : 		Token = GetToken();

  000de	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 73   : 
; 74   : 		if( Token == END )

  000e3	83 f8 02	 cmp	 eax, 2
  000e6	0f 84 9a 03 00
	00		 je	 $LN752@LoadScript
  000ec	0f 1f 40 00	 npad	 4
$LL5@LoadScript:

; 75   : 			break;
; 76   : 
; 77   : 		if( Token == NUMBER )

  000f0	83 f8 01	 cmp	 eax, 1
  000f3	0f 85 73 03 00
	00		 jne	 $LN749@LoadScript

; 78   : 		{
; 79   : 			int nType = TokenNumber;

  000f9	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 80   : 
; 81   : 			if( nType == 0 )

  00101	85 c0		 test	 eax, eax
  00103	0f 85 63 03 00
	00		 jne	 $LN749@LoadScript
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@LoadScript:

; 82   : 			{
; 83   : 				while( TRUE )
; 84   : 				{
; 85   : 					Token = GetToken();

  00110	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 86   : 
; 87   : 					if( Token == NAME )

  00115	85 c0		 test	 eax, eax
  00117	75 37		 jne	 SHORT $LN19@LoadScript

; 88   : 					{
; 89   : 						if( !strcmp("end",TokenString) )

  00119	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0011e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL761@LoadScript:
  00123	8a 10		 mov	 dl, BYTE PTR [eax]
  00125	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00127	75 1a		 jne	 SHORT $LN762@LoadScript
  00129	84 d2		 test	 dl, dl
  0012b	74 12		 je	 SHORT $LN763@LoadScript
  0012d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00130	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00133	75 0e		 jne	 SHORT $LN762@LoadScript
  00135	83 c0 02	 add	 eax, 2
  00138	83 c1 02	 add	 ecx, 2
  0013b	84 d2		 test	 dl, dl
  0013d	75 e4		 jne	 SHORT $LL761@LoadScript
$LN763@LoadScript:
  0013f	33 c0		 xor	 eax, eax
  00141	eb 05		 jmp	 SHORT $LN764@LoadScript
$LN762@LoadScript:
  00143	1b c0		 sbb	 eax, eax
  00145	83 c8 01	 or	 eax, 1
$LN764@LoadScript:
  00148	85 c0		 test	 eax, eax
  0014a	0f 84 1c 03 00
	00		 je	 $LN749@LoadScript
$LN19@LoadScript:

; 90   : 							break;
; 91   : 					}
; 92   : 
; 93   : 					_stRewardExpInfo rewardExpInfo;
; 94   : 
; 95   : 					rewardExpInfo.m_MinReset = TokenNumber;

  00150	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00158	89 85 b8 fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp], eax

; 96   : 
; 97   : 					Token = GetToken();

  0015e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 98   : 					rewardExpInfo.m_MaxReset = TokenNumber;

  00163	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0016b	89 85 bc fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+4], eax

; 99   : 
; 100  : 					Token = GetToken();

  00171	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 101  : 					rewardExpInfo.m_MinLevel = TokenNumber;

  00176	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0017e	89 85 c0 fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+8], eax

; 102  : 
; 103  : 					Token = GetToken();

  00184	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 104  : 					rewardExpInfo.m_MaxLevel = TokenNumber;

  00189	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00191	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+12], eax

; 105  : 
; 106  : 					Token = GetToken();

  00197	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 107  : 					rewardExpInfo.m_iRewardExp = TokenNumber;

  0019c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001a4	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+16], eax

; 108  : 
; 109  : 					Token = GetToken();

  001aa	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 110  : 
; 111  : 					if( rewardExpInfo.pEventDugeonItemBag != NULL )
; 112  : 						delete rewardExpInfo.pEventDugeonItemBag;
; 113  : 
; 114  : 					rewardExpInfo.pEventDugeonItemBag = new EventItemBag;

  001af	68 48 02 00 00	 push	 584			; 00000248H
  001b4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001b9	83 c4 04	 add	 esp, 4
  001bc	89 85 b4 fd ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  001c2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001c9	85 c0		 test	 eax, eax
  001cb	74 0b		 je	 SHORT $LN35@LoadScript
  001cd	8b c8		 mov	 ecx, eax
  001cf	e8 00 00 00 00	 call	 ??0EventItemBag@@QAE@XZ	; EventItemBag::EventItemBag
  001d4	8b f0		 mov	 esi, eax
  001d6	eb 02		 jmp	 SHORT $LN36@LoadScript
$LN35@LoadScript:
  001d8	33 f6		 xor	 esi, esi
$LN36@LoadScript:
  001da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e1	89 b5 d4 fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+28], esi

; 115  : 					if( rewardExpInfo.pEventDugeonItemBag )

  001e7	85 f6		 test	 esi, esi
  001e9	74 4a		 je	 SHORT $LN21@LoadScript

; 116  : 					{
; 117  : 						char Path[MAX_PATH] = { 0 };
; 118  : 						sprintf(Path, "%s%s", PATH_EVENTBAG_IMPERIALGUARDIAN, TokenString);

  001eb	68 04 01 00 00	 push	 260			; 00000104H
  001f0	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Path$8[ebp]
  001f6	6a 00		 push	 0
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 _memset
  001fe	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MHGGMIDM@EventItemBag?2ImperialGuardian?2?$AA@
  00208	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Path$8[ebp]
  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 _sprintf
  00219	83 c4 1c	 add	 esp, 28			; 0000001cH

; 119  : 						rewardExpInfo.pEventDugeonItemBag->Read(gDirPath.GetNewPath(Path));

  0021c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Path$8[ebp]
  00222	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0022d	50		 push	 eax
  0022e	8b ce		 mov	 ecx, esi
  00230	e8 00 00 00 00	 call	 ?Read@EventItemBag@@QAEXPAD@Z ; EventItemBag::Read
$LN21@LoadScript:

; 120  : 					}
; 121  : 
; 122  : 					Token = GetToken();

  00235	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 123  : 					if( rewardExpInfo.pEventDugeonItemBagStone != NULL )
; 124  : 						delete rewardExpInfo.pEventDugeonItemBagStone;
; 125  : 
; 126  : 					rewardExpInfo.pEventDugeonItemBagStone = new EventItemBag;

  0023a	68 48 02 00 00	 push	 584			; 00000248H
  0023f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00244	83 c4 04	 add	 esp, 4
  00247	89 85 b0 fd ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0024d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00254	85 c0		 test	 eax, eax
  00256	74 0b		 je	 SHORT $LN39@LoadScript
  00258	8b c8		 mov	 ecx, eax
  0025a	e8 00 00 00 00	 call	 ??0EventItemBag@@QAE@XZ	; EventItemBag::EventItemBag
  0025f	8b f0		 mov	 esi, eax
  00261	eb 02		 jmp	 SHORT $LN40@LoadScript
$LN39@LoadScript:
  00263	33 f6		 xor	 esi, esi
$LN40@LoadScript:
  00265	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0026c	89 b5 d0 fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+24], esi

; 127  : 					if( rewardExpInfo.pEventDugeonItemBagStone )

  00272	85 f6		 test	 esi, esi
  00274	74 4a		 je	 SHORT $LN23@LoadScript

; 128  : 					{
; 129  : 						char Path[MAX_PATH] = { 0 };
; 130  : 						sprintf(Path, "%s%s", PATH_EVENTBAG_IMPERIALGUARDIAN, TokenString);

  00276	68 04 01 00 00	 push	 260			; 00000104H
  0027b	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Path$7[ebp]
  00281	6a 00		 push	 0
  00283	50		 push	 eax
  00284	e8 00 00 00 00	 call	 _memset
  00289	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  0028e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MHGGMIDM@EventItemBag?2ImperialGuardian?2?$AA@
  00293	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Path$7[ebp]
  00299	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
  0029e	50		 push	 eax
  0029f	e8 00 00 00 00	 call	 _sprintf
  002a4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 131  : 						rewardExpInfo.pEventDugeonItemBagStone->Read(gDirPath.GetNewPath(Path));

  002a7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _Path$7[ebp]
  002ad	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  002b8	50		 push	 eax
  002b9	8b ce		 mov	 ecx, esi
  002bb	e8 00 00 00 00	 call	 ?Read@EventItemBag@@QAEXPAD@Z ; EventItemBag::Read
$LN23@LoadScript:

; 132  : 					}
; 133  : 
; 134  : 					Token = GetToken();

  002c0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 135  : 					if( rewardExpInfo.pEventDugeonItemBagGaion != NULL )
; 136  : 						delete rewardExpInfo.pEventDugeonItemBagGaion;
; 137  : 
; 138  : 					rewardExpInfo.pEventDugeonItemBagGaion = new EventItemBag;

  002c5	68 48 02 00 00	 push	 584			; 00000248H
  002ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002cf	83 c4 04	 add	 esp, 4
  002d2	89 85 ac fd ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  002d8	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  002df	85 c0		 test	 eax, eax
  002e1	74 0b		 je	 SHORT $LN43@LoadScript
  002e3	8b c8		 mov	 ecx, eax
  002e5	e8 00 00 00 00	 call	 ??0EventItemBag@@QAE@XZ	; EventItemBag::EventItemBag
  002ea	8b f0		 mov	 esi, eax
  002ec	eb 02		 jmp	 SHORT $LN44@LoadScript
$LN43@LoadScript:
  002ee	33 f6		 xor	 esi, esi
$LN44@LoadScript:
  002f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002f7	89 b5 cc fd ff
	ff		 mov	 DWORD PTR _rewardExpInfo$5[ebp+20], esi

; 139  : 					if( rewardExpInfo.pEventDugeonItemBagGaion )

  002fd	85 f6		 test	 esi, esi
  002ff	74 4a		 je	 SHORT $LN25@LoadScript

; 140  : 					{
; 141  : 						char Path[MAX_PATH] = { 0 };
; 142  : 						sprintf(Path, "%s%s", PATH_EVENTBAG_IMPERIALGUARDIAN, TokenString);

  00301	68 04 01 00 00	 push	 260			; 00000104H
  00306	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _Path$6[ebp]
  0030c	6a 00		 push	 0
  0030e	50		 push	 eax
  0030f	e8 00 00 00 00	 call	 _memset
  00314	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  00319	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MHGGMIDM@EventItemBag?2ImperialGuardian?2?$AA@
  0031e	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _Path$6[ebp]
  00324	68 00 00 00 00	 push	 OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
  00329	50		 push	 eax
  0032a	e8 00 00 00 00	 call	 _sprintf
  0032f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 143  : 						rewardExpInfo.pEventDugeonItemBagGaion->Read(gDirPath.GetNewPath(Path));

  00332	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _Path$6[ebp]
  00338	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0033d	50		 push	 eax
  0033e	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00343	50		 push	 eax
  00344	8b ce		 mov	 ecx, esi
  00346	e8 00 00 00 00	 call	 ?Read@EventItemBag@@QAEXPAD@Z ; EventItemBag::Read
$LN25@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  0034b	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0034e	8d 85 b8 fd ff
	ff		 lea	 eax, DWORD PTR _rewardExpInfo$5[ebp]
  00354	3b c6		 cmp	 eax, esi
  00356	0f 83 96 00 00
	00		 jae	 $LN260@LoadScript
  0035c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0035e	3b c8		 cmp	 ecx, eax
  00360	0f 87 8c 00 00
	00		 ja	 $LN260@LoadScript

; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00366	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00369	8b d8		 mov	 ebx, eax
  0036b	2b d9		 sub	 ebx, ecx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0036d	3b f2		 cmp	 esi, edx
  0036f	75 5e		 jne	 SHORT $LN327@LoadScript

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00371	8b c2		 mov	 eax, edx
  00373	2b c6		 sub	 eax, esi
  00375	c1 f8 05	 sar	 eax, 5

; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)

  00378	83 f8 01	 cmp	 eax, 1
  0037b	73 52		 jae	 SHORT $LN327@LoadScript

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0037d	2b f1		 sub	 esi, ecx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0037f	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00384	c1 fe 05	 sar	 esi, 5

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00387	2b c6		 sub	 eax, esi
  00389	83 f8 01	 cmp	 eax, 1
  0038c	0f 82 3e 01 00
	00		 jb	 $LN750@LoadScript

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00392	2b d1		 sub	 edx, ecx

; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00394	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1591[ebp], 0

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0039e	c1 fa 05	 sar	 edx, 5

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  003a1	46		 inc	 esi

; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  003a2	8b c2		 mov	 eax, edx

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  003a4	89 95 e0 fd ff
	ff		 mov	 DWORD PTR __Capacity$1$[ebp], edx

; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  003aa	d1 e8		 shr	 eax, 1
  003ac	b9 ff ff ff 07	 mov	 ecx, 134217727		; 07ffffffH
  003b1	2b c8		 sub	 ecx, eax
  003b3	03 d0		 add	 edx, eax
  003b5	3b 8d e0 fd ff
	ff		 cmp	 ecx, DWORD PTR __Capacity$1$[ebp]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  003bb	8b cf		 mov	 ecx, edi
  003bd	0f 42 95 dc fd
	ff ff		 cmovb	 edx, DWORD PTR tv1591[ebp]

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  003c4	3b d6		 cmp	 edx, esi
  003c6	0f 42 d6	 cmovb	 edx, esi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  003c9	52		 push	 edx
  003ca	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reallocate
$LN327@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  003cf	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  003d2	85 c0		 test	 eax, eax
  003d4	74 13		 je	 SHORT $LN515@LoadScript
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  003d6	83 e3 e0	 and	 ebx, -32		; ffffffe0H
  003d9	03 1f		 add	 ebx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  003db	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
  003de	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  003e1	0f 10 43 10	 movups	 xmm0, XMMWORD PTR [ebx+16]
  003e5	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
$LN515@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1283 : 			++this->_Mylast();

  003e9	83 47 04 20	 add	 DWORD PTR [edi+4], 32	; 00000020H

; 1284 : 			}
; 1285 : 		else

  003ed	e9 1e fd ff ff	 jmp	 $LL7@LoadScript
$LN260@LoadScript:

; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  003f2	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  003f5	3b f3		 cmp	 esi, ebx
  003f7	75 4e		 jne	 SHORT $LN550@LoadScript

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  003f9	8b c3		 mov	 eax, ebx
  003fb	2b c6		 sub	 eax, esi
  003fd	c1 f8 05	 sar	 eax, 5

; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)

  00400	83 f8 01	 cmp	 eax, 1
  00403	73 42		 jae	 SHORT $LN550@LoadScript

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00405	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00407	b8 ff ff ff 07	 mov	 eax, 134217727		; 07ffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0040c	2b f1		 sub	 esi, ecx
  0040e	c1 fe 05	 sar	 esi, 5

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00411	2b c6		 sub	 eax, esi
  00413	83 f8 01	 cmp	 eax, 1
  00416	0f 82 b4 00 00
	00		 jb	 $LN750@LoadScript

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0041c	2b d9		 sub	 ebx, ecx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0041e	46		 inc	 esi

; 207  : 		}
; 208  : 
; 209  : 	bool operator!=(const _Myiter& _Right) const
; 210  : 		{	// test for iterator inequality
; 211  : 		return (!(*this == _Right));
; 212  : 		}
; 213  : 
; 214  : 	bool operator<(const _Myiter& _Right) const
; 215  : 		{	// test if this < _Right
; 216  : 		_Compat(_Right);
; 217  : 		return (this->_Ptr < _Right._Ptr);
; 218  : 		}
; 219  : 
; 220  : 	bool operator>(const _Myiter& _Right) const
; 221  : 		{	// test if this > _Right
; 222  : 		return (_Right < *this);
; 223  : 		}
; 224  : 
; 225  : 	bool operator<=(const _Myiter& _Right) const
; 226  : 		{	// test if this <= _Right
; 227  : 		return (!(_Right < *this));
; 228  : 		}
; 229  : 
; 230  : 	bool operator>=(const _Myiter& _Right) const
; 231  : 		{	// test if this >= _Right
; 232  : 		return (!(*this < _Right));
; 233  : 		}
; 234  : 
; 235  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 236  : 	void _Compat(const _Myiter& _Right) const
; 237  : 		{	// test for compatible iterator pair
; 238  : 		if (this->_Getcont() == 0
; 239  : 			|| this->_Getcont() != _Right._Getcont())
; 240  : 			{	// report error
; 241  : 			_DEBUG_ERROR("vector iterators incompatible");
; 242  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 243  : 			}
; 244  : 		}
; 245  : 
; 246  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 247  : 	void _Compat(const _Myiter& _Right) const
; 248  : 		{	// test for compatible iterator pair
; 249  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 250  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Getcont() == _Right._Getcont());
; 251  : 		}
; 252  : 
; 253  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 254  : 	void _Compat(const _Myiter&) const
; 255  : 		{	// test for compatible iterator pair
; 256  : 		}
; 257  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 258  : 
; 259  : 	_Tptr _Ptr;	// pointer to element in vector
; 260  : 	};
; 261  : 
; 262  : template<class _Myvec> inline
; 263  : 	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
; 264  : 		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
; 265  : 	{	// convert to unchecked
; 266  : 	return (_Iter._Unchecked());
; 267  : 	}
; 268  : 
; 269  : template<class _Myvec> inline
; 270  : 	_Vector_const_iterator<_Myvec>&
; 271  : 		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
; 272  : 			typename _Vector_const_iterator<_Myvec>
; 273  : 				::_Unchecked_type _Right)
; 274  : 	{	// convert to checked
; 275  : 	return (_Iter._Rechecked(_Right));
; 276  : 	}
; 277  : 
; 278  : template<class _Myvec> inline
; 279  : 	_Vector_const_iterator<_Myvec> operator+(
; 280  : 		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
; 281  : 		_Vector_const_iterator<_Myvec> _Next)
; 282  : 	{	// add offset to iterator
; 283  : 	return (_Next += _Off);
; 284  : 	}
; 285  : 
; 286  : 		// TEMPLATE CLASS _Vector_iterator
; 287  : template<class _Myvec>
; 288  : 	class _Vector_iterator
; 289  : 		: public _Vector_const_iterator<_Myvec>
; 290  : 	{	// iterator for mutable vector
; 291  : public:
; 292  : 	typedef _Vector_iterator<_Myvec> _Myiter;
; 293  : 	typedef _Vector_const_iterator<_Myvec> _Mybase;
; 294  : 	typedef random_access_iterator_tag iterator_category;
; 295  : 
; 296  : 	typedef typename _Myvec::value_type value_type;
; 297  : 	typedef typename _Myvec::difference_type difference_type;
; 298  : 	typedef typename _Myvec::pointer pointer;
; 299  : 	typedef typename _Myvec::reference reference;
; 300  : 
; 301  : 	_Vector_iterator()
; 302  : 		{	// construct with null vector pointer
; 303  : 		}
; 304  : 
; 305  : 	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
; 306  : 		: _Mybase(_Parg, _Pvector)
; 307  : 		{	// construct with pointer _Parg
; 308  : 		}
; 309  : 
; 310  : 	typedef pointer _Unchecked_type;
; 311  : 
; 312  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 313  : 		{	// reset from unchecked iterator
; 314  : 		this->_Ptr = _Right;
; 315  : 		return (*this);
; 316  : 		}
; 317  : 
; 318  : 	_Unchecked_type _Unchecked() const
; 319  : 		{	// make an unchecked iterator
; 320  : 		return (_Unchecked_type(this->_Ptr));
; 321  : 		}
; 322  : 
; 323  : 	reference operator*() const
; 324  : 		{	// return designated object
; 325  : 		return ((reference)**(_Mybase *)this);
; 326  : 		}
; 327  : 
; 328  : 	pointer operator->() const
; 329  : 		{	// return pointer to class object
; 330  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 331  : 		}
; 332  : 
; 333  : 	_Myiter& operator++()
; 334  : 		{	// preincrement
; 335  : 		++*(_Mybase *)this;
; 336  : 		return (*this);
; 337  : 		}
; 338  : 
; 339  : 	_Myiter operator++(int)
; 340  : 		{	// postincrement
; 341  : 		_Myiter _Tmp = *this;
; 342  : 		++*this;
; 343  : 		return (_Tmp);
; 344  : 		}
; 345  : 
; 346  : 	_Myiter& operator--()
; 347  : 		{	// predecrement
; 348  : 		--*(_Mybase *)this;
; 349  : 		return (*this);
; 350  : 		}
; 351  : 
; 352  : 	_Myiter operator--(int)
; 353  : 		{	// postdecrement
; 354  : 		_Myiter _Tmp = *this;
; 355  : 		--*this;
; 356  : 		return (_Tmp);
; 357  : 		}
; 358  : 
; 359  : 	_Myiter& operator+=(difference_type _Off)
; 360  : 		{	// increment by integer
; 361  : 		*(_Mybase *)this += _Off;
; 362  : 		return (*this);
; 363  : 		}
; 364  : 
; 365  : 	_Myiter operator+(difference_type _Off) const
; 366  : 		{	// return this + integer
; 367  : 		_Myiter _Tmp = *this;
; 368  : 		return (_Tmp += _Off);
; 369  : 		}
; 370  : 
; 371  : 	_Myiter& operator-=(difference_type _Off)
; 372  : 		{	// decrement by integer
; 373  : 		return (*this += -_Off);
; 374  : 		}
; 375  : 
; 376  : 	_Myiter operator-(difference_type _Off) const
; 377  : 		{	// return this - integer
; 378  : 		_Myiter _Tmp = *this;
; 379  : 		return (_Tmp -= _Off);
; 380  : 		}
; 381  : 
; 382  : 	difference_type operator-(const _Mybase& _Right) const
; 383  : 		{	// return difference of iterators
; 384  : 		return (*(_Mybase *)this - _Right);
; 385  : 		}
; 386  : 
; 387  : 	reference operator[](difference_type _Off) const
; 388  : 		{	// subscript
; 389  : 		return (*(*this + _Off));
; 390  : 		}
; 391  : 	};
; 392  : 
; 393  : template<class _Myvec> inline
; 394  : 	typename _Vector_iterator<_Myvec>::_Unchecked_type
; 395  : 		_Unchecked(_Vector_iterator<_Myvec> _Iter)
; 396  : 	{	// convert to unchecked
; 397  : 	return (_Iter._Unchecked());
; 398  : 	}
; 399  : 
; 400  : template<class _Myvec> inline
; 401  : 	_Vector_iterator<_Myvec>&
; 402  : 		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
; 403  : 			typename _Vector_iterator<_Myvec>
; 404  : 				::_Unchecked_type _Right)
; 405  : 	{	// convert to checked
; 406  : 	return (_Iter._Rechecked(_Right));
; 407  : 	}
; 408  : 
; 409  : template<class _Myvec> inline
; 410  : 	_Vector_iterator<_Myvec> operator+(
; 411  : 		typename _Vector_iterator<_Myvec>::difference_type _Off,
; 412  : 		_Vector_iterator<_Myvec> _Next)
; 413  : 	{	// add offset to iterator
; 414  : 	return (_Next += _Off);
; 415  : 	}
; 416  : 
; 417  : 		// vector TYPE WRAPPERS
; 418  : template<class _Value_type,
; 419  : 	class _Size_type,
; 420  : 	class _Difference_type,
; 421  : 	class _Pointer,
; 422  : 	class _Const_pointer,
; 423  : 	class _Reference,
; 424  : 	class _Const_reference>
; 425  : 	struct _Vec_iter_types
; 426  : 	{	// wraps types needed by iterators
; 427  : 	typedef _Value_type value_type;
; 428  : 	typedef _Size_type size_type;
; 429  : 	typedef _Difference_type difference_type;
; 430  : 	typedef _Pointer pointer;
; 431  : 	typedef _Const_pointer const_pointer;
; 432  : 	typedef _Reference reference;
; 433  : 	typedef _Const_reference const_reference;
; 434  : 	};
; 435  : 
; 436  : template<class _Ty,
; 437  : 	class _Alloc0>
; 438  : 	struct _Vec_base_types
; 439  : 	{	// types needed for a container base
; 440  : 	typedef _Alloc0 _Alloc;
; 441  : 	typedef _Vec_base_types<_Ty, _Alloc> _Myt;
; 442  : 
; 443  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 444  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 445  : 
; 446  : 
; 447  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 448  : 		_Simple_types<typename _Alty::value_type>,
; 449  : 		_Vec_iter_types<typename _Alty::value_type,
; 450  : 			typename _Alty::size_type,
; 451  : 			typename _Alty::difference_type,
; 452  : 			typename _Alty::pointer,
; 453  : 			typename _Alty::const_pointer,
; 454  : 			typename _Alty::reference,
; 455  : 			typename _Alty::const_reference> >::type
; 456  : 		_Val_types;
; 457  : 	};
; 458  : 
; 459  : 		// TEMPLATE CLASS _Vector_val
; 460  : template<class _Val_types>
; 461  : 	class _Vector_val
; 462  : 		: public _Container_base
; 463  : 	{	// base class for vector to hold data
; 464  : public:
; 465  : 	typedef _Vector_val<_Val_types> _Myt;
; 466  : 
; 467  : 	typedef typename _Val_types::value_type value_type;
; 468  : 	typedef typename _Val_types::size_type size_type;
; 469  : 	typedef typename _Val_types::difference_type difference_type;
; 470  : 	typedef typename _Val_types::pointer pointer;
; 471  : 	typedef typename _Val_types::const_pointer const_pointer;
; 472  : 	typedef typename _Val_types::reference reference;
; 473  : 	typedef typename _Val_types::const_reference const_reference;
; 474  : 
; 475  : 	typedef _Vector_iterator<_Myt> iterator;
; 476  : 	typedef _Vector_const_iterator<_Myt> const_iterator;
; 477  : 
; 478  : 	_Vector_val()
; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();
; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}
; 484  : 
; 485  : 	pointer _Myfirst;	// pointer to beginning of array
; 486  : 	pointer _Mylast;	// pointer to current end of sequence
; 487  : 	pointer _Myend;	// pointer to end of array
; 488  : 	};
; 489  : 
; 490  : 		// TEMPLATE CLASS _Vector_alloc
; 491  : template<class _Alloc_types>
; 492  : 	class _Vector_alloc
; 493  : 	{	// base class for vector to hold allocator
; 494  : public:
; 495  : 	typedef _Vector_alloc<_Alloc_types> _Myt;
; 496  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 497  : 	typedef typename _Alloc_types::_Alty _Alty;
; 498  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 499  : 
; 500  : 	typedef typename _Val_types::value_type value_type;
; 501  : 	typedef typename _Val_types::size_type size_type;
; 502  : 	typedef typename _Val_types::difference_type difference_type;
; 503  : 	typedef typename _Val_types::pointer pointer;
; 504  : 	typedef typename _Val_types::const_pointer const_pointer;
; 505  : 	typedef typename _Val_types::reference reference;
; 506  : 	typedef typename _Val_types::const_reference const_reference;
; 507  : 
; 508  : 	typedef _Vector_iterator<_Vector_val<_Val_types> > iterator;
; 509  : 	typedef _Vector_const_iterator<_Vector_val<_Val_types> > const_iterator;
; 510  : 
; 511  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 512  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 513  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 514  : 		{	// construct allocator from _Al
; 515  : 		}
; 516  : 
; 517  : 	_Vector_alloc(_Alloc&& _Al)
; 518  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 519  : 		{	// construct allocator from _Al
; 520  : 		}
; 521  : 
; 522  : 	void _Copy_alloc(const _Alty& _Al)
; 523  : 		{	// replace old allocator
; 524  : 		_Pocca(_Getal(), _Al);
; 525  : 		}
; 526  : 
; 527  : 	void _Move_alloc(_Alty& _Al)
; 528  : 		{	// replace old allocator
; 529  : 		_Pocma(_Getal(), _Al);
; 530  : 		}
; 531  : 
; 532  : 	void _Swap_alloc(_Myt& _Right)
; 533  : 		{	// swap allocators
; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}
; 536  : 
; 537  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 538  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 539  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 540  : 		{	// construct allocator from _Al
; 541  : 		_Alloc_proxy();
; 542  : 		}
; 543  : 
; 544  : 	_Vector_alloc(_Alloc&& _Al)
; 545  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 546  : 		{	// construct allocator from _Al
; 547  : 		_Alloc_proxy();
; 548  : 		}
; 549  : 
; 550  : 	~_Vector_alloc() _NOEXCEPT
; 551  : 		{	// destroy proxy
; 552  : 		_Free_proxy();
; 553  : 		}
; 554  : 
; 555  : 	void _Copy_alloc(const _Alty& _Al)
; 556  : 		{	// replace old allocator
; 557  : 		_Free_proxy();
; 558  : 		_Pocca(_Getal(), _Al);
; 559  : 		_Alloc_proxy();
; 560  : 		}
; 561  : 
; 562  : 	void _Move_alloc(_Alty& _Al)
; 563  : 		{	// replace old allocator
; 564  : 		_Free_proxy();
; 565  : 		_Pocma(_Getal(), _Al);
; 566  : 		_Alloc_proxy();
; 567  : 		}
; 568  : 
; 569  : 	void _Swap_alloc(_Myt& _Right)
; 570  : 		{	// swap allocators
; 571  : 		_Pocs(_Getal(), _Right._Getal());
; 572  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 573  : 		}
; 574  : 
; 575  : 	void _Alloc_proxy()
; 576  : 		{	// construct proxy
; 577  : 		typename _Alty::template rebind<_Container_proxy>::other
; 578  : 			_Alproxy(_Getal());
; 579  : 		_Myproxy() = _Alproxy.allocate(1);
; 580  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 581  : 		_Myproxy()->_Mycont = &_Get_data();
; 582  : 		}
; 583  : 
; 584  : 	void _Free_proxy()
; 585  : 		{	// destroy proxy
; 586  : 		typename _Alty::template rebind<_Container_proxy>::other
; 587  : 			_Alproxy(_Getal());
; 588  : 		_Orphan_all();
; 589  : 		_Alproxy.destroy(_Myproxy());
; 590  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 591  : 		_Myproxy() = 0;
; 592  : 		}
; 593  : 
; 594  : 	_Iterator_base12 **_Getpfirst() const
; 595  : 		{	// get address of iterator chain
; 596  : 		return (_Get_data()._Getpfirst());
; 597  : 		}
; 598  : 
; 599  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 600  : 		{	// return reference to _Myproxy
; 601  : 		return (_Get_data()._Myproxy);
; 602  : 		}
; 603  : 
; 604  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 605  : 		{	// return const reference to _Myproxy
; 606  : 		return (_Get_data()._Myproxy);
; 607  : 		}
; 608  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 609  : 
; 610  : 	void _Orphan_all()
; 611  : 		{	// orphan all iterators
; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}
; 614  : 
; 615  : 	void _Swap_all(_Myt& _Right)
; 616  : 		{	// swap all iterators
; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}
; 619  : 
; 620  : 	_Alty& _Getal() _NOEXCEPT
; 621  : 		{	// return reference to allocator
; 622  : 		return (_Mypair._Get_first());
; 623  : 		}
; 624  : 
; 625  : 	const _Alty& _Getal() const _NOEXCEPT
; 626  : 		{	// return const reference to allocator
; 627  : 		return (_Mypair._Get_first());
; 628  : 		}
; 629  : 
; 630  : 	_Vector_val<_Val_types>& _Get_data() _NOEXCEPT
; 631  : 		{	// return reference to _Vector_val
; 632  : 		return (_Mypair._Get_second());
; 633  : 		}
; 634  : 
; 635  : 	const _Vector_val<_Val_types>& _Get_data() const _NOEXCEPT
; 636  : 		{	// return const reference to _Vector_val
; 637  : 		return (_Mypair._Get_second());
; 638  : 		}
; 639  : 
; 640  : 	pointer& _Myfirst() _NOEXCEPT
; 641  : 		{	// return reference to _Myfirst
; 642  : 		return (_Get_data()._Myfirst);
; 643  : 		}
; 644  : 
; 645  : 	const pointer& _Myfirst() const _NOEXCEPT
; 646  : 		{	// return const reference to _Myfirst
; 647  : 		return (_Get_data()._Myfirst);
; 648  : 		}
; 649  : 
; 650  : 	pointer& _Mylast() _NOEXCEPT
; 651  : 		{	// return reference to _Mylast
; 652  : 		return (_Get_data()._Mylast);
; 653  : 		}
; 654  : 
; 655  : 	const pointer& _Mylast() const _NOEXCEPT
; 656  : 		{	// return const reference to _Mylast
; 657  : 		return (_Get_data()._Mylast);
; 658  : 		}
; 659  : 
; 660  : 	pointer& _Myend() _NOEXCEPT
; 661  : 		{	// return reference to _Myend
; 662  : 		return (_Get_data()._Myend);
; 663  : 		}
; 664  : 
; 665  : 	const pointer& _Myend() const _NOEXCEPT
; 666  : 		{	// return const reference to _Myend
; 667  : 		return (_Get_data()._Myend);
; 668  : 		}
; 669  : 
; 670  : private:
; 671  : 	_Compressed_pair<_Alty, _Vector_val<_Val_types> > _Mypair;
; 672  : 	};
; 673  : 
; 674  : 		// TEMPLATE CLASS vector
; 675  : template<class _Ty,
; 676  : 	class _Alloc = allocator<_Ty> >
; 677  : 	class vector
; 678  : 		: public _Vector_alloc<_Vec_base_types<_Ty, _Alloc> >
; 679  : 	{	// varying size array of values
; 680  : public:
; 681  : 	typedef vector<_Ty, _Alloc> _Myt;
; 682  : 	typedef _Vector_alloc<_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 683  : 	typedef _Alloc allocator_type;
; 684  : 
; 685  : 	typedef typename _Mybase::_Alty _Alty;
; 686  : 
; 687  : 	typedef typename _Mybase::value_type value_type;
; 688  : 	typedef typename _Mybase::size_type size_type;
; 689  : 	typedef typename _Mybase::difference_type difference_type;
; 690  : 	typedef typename _Mybase::pointer pointer;
; 691  : 	typedef typename _Mybase::const_pointer const_pointer;
; 692  : 	typedef typename _Mybase::reference reference;
; 693  : 	typedef typename _Mybase::const_reference const_reference;
; 694  : 
; 695  :  #define _VICONT(it)	it._Getcont()
; 696  :  #define _VIPTR(it)	(it)._Ptr
; 697  : 
; 698  : 	typedef typename _Mybase::iterator iterator;
; 699  : 	typedef typename _Mybase::const_iterator const_iterator;
; 700  : 
; 701  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 702  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 703  : 
; 704  : 	vector() _NOEXCEPT
; 705  : 		: _Mybase()
; 706  : 		{	// construct empty vector
; 707  : 		}
; 708  : 
; 709  : 	explicit vector(const _Alloc& _Al) _NOEXCEPT
; 710  : 		: _Mybase(_Al)
; 711  : 		{	// construct empty vector, allocator
; 712  : 		}
; 713  : 
; 714  : 	explicit vector(size_type _Count)
; 715  : 		: _Mybase()
; 716  : 		{	// construct from _Count * value_type()
; 717  : 		if (_Buy(_Count))
; 718  : 			{	// nonzero, fill it
; 719  : 			_TRY_BEGIN
; 720  : 			_Uninitialized_default_fill_n(this->_Myfirst(), _Count,
; 721  : 				this->_Getal());
; 722  : 			this->_Mylast() += _Count;
; 723  : 			_CATCH_ALL
; 724  : 			_Tidy();
; 725  : 			_RERAISE;
; 726  : 			_CATCH_END
; 727  : 			}
; 728  : 		}
; 729  : 
; 730  : 	vector(size_type _Count, const value_type& _Val)
; 731  : 		: _Mybase()
; 732  : 		{	// construct from _Count * _Val
; 733  : 		_Construct_n(_Count, _STD addressof(_Val));
; 734  : 		}
; 735  : 
; 736  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 737  : 		: _Mybase(_Al)
; 738  : 		{	// construct from _Count * _Val, allocator
; 739  : 		_Construct_n(_Count, _STD addressof(_Val));
; 740  : 		}
; 741  : 
; 742  : 	vector(const _Myt& _Right)
; 743  : 
; 744  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 745  : 
; 746  : 
; 747  : 		{	// construct by copying _Right
; 748  : 		if (_Buy(_Right.size()))
; 749  : 			_TRY_BEGIN
; 750  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 751  : 				this->_Myfirst());
; 752  : 			_CATCH_ALL
; 753  : 			_Tidy();
; 754  : 			_RERAISE;
; 755  : 			_CATCH_END
; 756  : 		}
; 757  : 
; 758  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 759  : 		: _Mybase(_Al)
; 760  : 		{	// construct by copying _Right, allocator
; 761  : 		if (_Buy(_Right.size()))
; 762  : 			_TRY_BEGIN
; 763  : 			this->_Mylast() = _Ucopy(_Right.begin(), _Right.end(),
; 764  : 				this->_Myfirst());
; 765  : 			_CATCH_ALL
; 766  : 			_Tidy();
; 767  : 			_RERAISE;
; 768  : 			_CATCH_END
; 769  : 		}
; 770  : 
; 771  : 	template<class _Iter,
; 772  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 773  : 			void>::type>
; 774  : 		vector(_Iter _First, _Iter _Last)
; 775  : 		: _Mybase()
; 776  : 		{	// construct from [_First, _Last)
; 777  : 		_Construct(_First, _Last);
; 778  : 		}
; 779  : 
; 780  : 	template<class _Iter,
; 781  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 782  : 			void>::type>
; 783  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 784  : 		: _Mybase(_Al)
; 785  : 		{	// construct from [_First, _Last) with allocator
; 786  : 		_Construct(_First, _Last);
; 787  : 		}
; 788  : 
; 789  : 	template<class _Iter>
; 790  : 		void _Construct(_Iter _First, _Iter _Last)
; 791  : 		{	// initialize with [_First, _Last)
; 792  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 793  : 		}
; 794  : 
; 795  : 	template<class _Iter>
; 796  : 		void _Construct(_Iter _First, _Iter _Last,
; 797  : 			input_iterator_tag)
; 798  : 		{	// initialize with [_First, _Last), input iterators
; 799  : 		_TRY_BEGIN
; 800  : 
; 801  : 		for (; _First != _Last; ++_First)
; 802  : 			emplace_back(*_First);
; 803  : 
; 804  : 		_CATCH_ALL
; 805  : 		_Tidy();
; 806  : 		_RERAISE;
; 807  : 		_CATCH_END
; 808  : 		}
; 809  : 
; 810  : 	template<class _Iter>
; 811  : 		void _Construct(_Iter _First, _Iter _Last,
; 812  : 			forward_iterator_tag)
; 813  : 		{	// initialize with [_First, _Last), forward iterators
; 814  : 		if (_Buy(_STD distance(_First, _Last)))
; 815  : 			{	// nonzero, fill it
; 816  : 			_TRY_BEGIN
; 817  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 818  : 			_CATCH_ALL
; 819  : 			_Tidy();
; 820  : 			_RERAISE;
; 821  : 			_CATCH_END
; 822  : 			}
; 823  : 		}
; 824  : 
; 825  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 826  : 		{	// construct from _Count * *_Pval
; 827  : 		if (_Buy(_Count))
; 828  : 			{	// nonzero, fill it
; 829  : 			_TRY_BEGIN
; 830  : 			this->_Mylast() = _Ufill(this->_Myfirst(), _Count, _Pval);
; 831  : 			_CATCH_ALL
; 832  : 			_Tidy();
; 833  : 			_RERAISE;
; 834  : 			_CATCH_END
; 835  : 			}
; 836  : 		}
; 837  : 
; 838  : 	vector(_Myt&& _Right) _NOEXCEPT
; 839  : 		: _Mybase(_STD move(_Right._Getal()))
; 840  : 		{	// construct by moving _Right
; 841  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 842  : 		}
; 843  : 
; 844  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 845  : 		: _Mybase(_Al)
; 846  : 		{	// construct by moving _Right, allocator
; 847  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 848  : 		}
; 849  : 
; 850  : 	_Myt& operator=(_Myt&& _Right)
; 851  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 852  : 			|| _Alty::is_always_equal::value)
; 853  : 		{	// assign by moving _Right
; 854  : 		if (this != &_Right)
; 855  : 			{	// different, assign it
; 856  : 			_Tidy();
; 857  : 			if (_Alty::propagate_on_container_move_assignment::value
; 858  : 				&& this->_Getal() != _Right._Getal())
; 859  : 				this->_Move_alloc(_Right._Getal());
; 860  : 
; 861  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 862  : 			}
; 863  : 		return (*this);
; 864  : 		}
; 865  : 
; 866  : 	void _Assign_rv(_Myt&& _Right, true_type)
; 867  : 		{	// move from _Right, stealing its contents
; 868  : 		this->_Swap_all((_Myt&)_Right);
; 869  : 		this->_Myfirst() = _Right._Myfirst();
; 870  : 		this->_Mylast() = _Right._Mylast();
; 871  : 		this->_Myend() = _Right._Myend();
; 872  : 
; 873  : 		_Right._Myfirst() = pointer();
; 874  : 		_Right._Mylast() = pointer();
; 875  : 		_Right._Myend() = pointer();
; 876  : 		}
; 877  : 
; 878  : 	void _Assign_rv(_Myt&& _Right, false_type)
; 879  : 		{	// move from _Right, possibly moving its contents
; 880  : 		if (get_allocator() == _Right.get_allocator())
; 881  : 			_Assign_rv(_STD forward<_Myt>(_Right), true_type());
; 882  : 		else
; 883  : 			_Construct(_STD make_move_iterator(_Right.begin()),
; 884  : 				_STD make_move_iterator(_Right.end()));
; 885  : 		}
; 886  : 
; 887  : 	void _Assign_rv(_Myt&& _Right)
; 888  : 		{	// assign by moving _Right
; 889  : 		_Assign_rv(_STD forward<_Myt>(_Right),
; 890  : 			typename _Alty::propagate_on_container_move_assignment());
; 891  : 		}
; 892  : 
; 893  : 
; 894  : 	void push_back(value_type&& _Val)
; 895  : 		{	// insert by moving into element at end
; 896  : 		if (_Inside(_STD addressof(_Val)))
; 897  : 			{	// push back an element
; 898  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 899  : 			if (this->_Mylast() == this->_Myend())
; 900  : 				_Reserve(1);
; 901  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 902  : 			this->_Getal().construct(this->_Mylast(),
; 903  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 904  : 			++this->_Mylast();
; 905  : 			}
; 906  : 		else
; 907  : 			{	// push back a non-element
; 908  : 			if (this->_Mylast() == this->_Myend())
; 909  : 				_Reserve(1);
; 910  : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 911  : 			this->_Getal().construct(this->_Mylast(),
; 912  : 				_STD forward<value_type>(_Val));
; 913  : 			++this->_Mylast();
; 914  : 			}
; 915  : 		}
; 916  : 
; 917  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 918  : 		{	// insert by moving _Val at _Where
; 919  : 		return (emplace(_Where, _STD move(_Val)));
; 920  : 		}
; 921  : 
; 922  : 	template<class... _Valty>
; 923  : 		void emplace_back(_Valty&&... _Val)
; 924  : 		{	// insert by moving into element at end
; 925  : 		if (this->_Mylast() == this->_Myend())
; 926  : 			_Reserve(1);
; 927  : 		_Orphan_range(this->_Mylast(), this->_Mylast());
; 928  : 		this->_Getal().construct(this->_Mylast(),
; 929  : 			_STD forward<_Valty>(_Val)...);
; 930  : 		++this->_Mylast();
; 931  : 		}
; 932  : 
; 933  : 	template<class... _Valty>
; 934  : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 935  : 		{	// insert by moving _Val at _Where
; 936  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 937  : 
; 938  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 939  : 		if (size() < _Off)
; 940  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 941  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 942  : 
; 943  : 		emplace_back(_STD forward<_Valty>(_Val)...);
; 944  : 		_STD rotate(begin() + _Off, end() - 1, end());
; 945  : 		return (begin() + _Off);
; 946  : 		}
; 947  : 
; 948  : 
; 949  : 	vector(_XSTD initializer_list<value_type> _Ilist,
; 950  : 		const _Alloc& _Al = allocator_type())
; 951  : 		: _Mybase(_Al)
; 952  : 		{	// construct from initializer_list
; 953  : 		_Construct(_Ilist.begin(), _Ilist.end());
; 954  : 		}
; 955  : 
; 956  : 	_Myt& operator=(_XSTD initializer_list<value_type> _Ilist)
; 957  : 		{	// assign initializer_list
; 958  : 		assign(_Ilist.begin(), _Ilist.end());
; 959  : 		return (*this);
; 960  : 		}
; 961  : 
; 962  : 	void assign(_XSTD initializer_list<value_type> _Ilist)
; 963  : 		{	// assign initializer_list
; 964  : 		assign(_Ilist.begin(), _Ilist.end());
; 965  : 		}
; 966  : 
; 967  : 	iterator insert(const_iterator _Where,
; 968  : 		_XSTD initializer_list<value_type> _Ilist)
; 969  : 		{	// insert initializer_list
; 970  : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 971  : 		}
; 972  : 
; 973  : 	~vector() _NOEXCEPT
; 974  : 		{	// destroy the object
; 975  : 		_Tidy();
; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0041f	c1 fb 05	 sar	 ebx, 5

; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00422	b9 ff ff ff 07	 mov	 ecx, 134217727		; 07ffffffH
  00427	8b c3		 mov	 eax, ebx
  00429	d1 e8		 shr	 eax, 1
  0042b	2b c8		 sub	 ecx, eax
  0042d	3b cb		 cmp	 ecx, ebx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0042f	8b cf		 mov	 ecx, edi

; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00431	8d 14 18	 lea	 edx, DWORD PTR [eax+ebx]
  00434	b8 00 00 00 00	 mov	 eax, 0
  00439	0f 42 d0	 cmovb	 edx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0043c	3b d6		 cmp	 edx, esi
  0043e	0f 42 d6	 cmovb	 edx, esi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00441	52		 push	 edx
  00442	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@U_stRewardExpInfo@@V?$allocator@U_stRewardExpInfo@@@std@@@std@@IAEXI@Z ; std::vector<_stRewardExpInfo,std::allocator<_stRewardExpInfo> >::_Reallocate
$LN550@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00447	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0044a	85 c0		 test	 eax, eax
  0044c	74 15		 je	 SHORT $LN728@LoadScript
  0044e	0f 10 85 b8 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _rewardExpInfo$5[ebp]
  00455	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00458	0f 10 85 c8 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _rewardExpInfo$5[ebp+16]
  0045f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
$LN728@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00463	83 47 04 20	 add	 DWORD PTR [edi+4], 32	; 00000020H
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 147  : 				}

  00467	e9 a4 fc ff ff	 jmp	 $LL7@LoadScript
$LN749@LoadScript:

; 72   : 		Token = GetToken();

  0046c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 73   : 
; 74   : 		if( Token == END )

  00471	83 f8 02	 cmp	 eax, 2
  00474	0f 85 76 fc ff
	ff		 jne	 $LL5@LoadScript
  0047a	8b 9d d8 fd ff
	ff		 mov	 ebx, DWORD PTR _lpFileName$GSCopy$1$[ebp]
  00480	8b b5 e4 fd ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
$LN752@LoadScript:

; 148  : 			}
; 149  : 		}
; 150  : 	}
; 151  : 
; 152  : 	fclose(SMDFile);

  00486	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0048c	e8 00 00 00 00	 call	 _fclose
  00491	83 c4 04	 add	 esp, 4

; 153  : 	LogAdd(lMsg.Get(MSGGET(1,198)),lpFileName);

  00494	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00499	53		 push	 ebx
  0049a	68 c6 01 00 00	 push	 454			; 000001c6H
  0049f	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  004a4	50		 push	 eax
  004a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 154  : 	this->m_bLoaded = true;

  004ab	c6 46 04 01	 mov	 BYTE PTR [esi+4], 1
$LN769@LoadScript:

; 153  : 	LogAdd(lMsg.Get(MSGGET(1,198)),lpFileName);

  004af	83 c4 08	 add	 esp, 8
$LN1@LoadScript:

; 155  : }

  004b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004bc	59		 pop	 ecx
  004bd	5f		 pop	 edi
  004be	5e		 pop	 esi
  004bf	5b		 pop	 ebx
  004c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c3	33 cd		 xor	 ecx, ebp
  004c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ca	8b e5		 mov	 esp, ebp
  004cc	5d		 pop	 ebp
  004cd	c2 04 00	 ret	 4
$LN750@LoadScript:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1784 : 		_Xlength_error("vector<T> too long");

  004d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  004d5	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN770@LoadScript:
$LN768@LoadScript:
  004da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z$0:
  00000	68 48 02 00 00	 push	 584			; 00000248H
  00005	8b 85 b4 fd ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00011	83 c4 08	 add	 esp, 8
  00014	c3		 ret	 0
__unwindfunclet$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z$1:
  00015	68 48 02 00 00	 push	 584			; 00000248H
  0001a	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c3		 ret	 0
__unwindfunclet$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z$2:
  0002a	68 48 02 00 00	 push	 584			; 00000248H
  0002f	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
__ehhandler$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z:
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a a8 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-600]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00056	33 c8		 xor	 ecx, eax
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z
  00062	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScript@CImperialGuardianRewardExp@@QAEXPAD@Z ENDP	; CImperialGuardianRewardExp::LoadScript
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ?Init@CImperialGuardianRewardExp@@QAEXXZ
_TEXT	SEGMENT
?Init@CImperialGuardianRewardExp@@QAEXXZ PROC		; CImperialGuardianRewardExp::Init, COMDAT
; _this$ = ecx

; 159  : 	this->m_bLoaded = false;

  00000	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00004	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00007	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 161  : }

  0000a	c3		 ret	 0
?Init@CImperialGuardianRewardExp@@QAEXXZ ENDP		; CImperialGuardianRewardExp::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ??1CImperialGuardianRewardExp@@UAE@XZ
_TEXT	SEGMENT
??1CImperialGuardianRewardExp@@UAE@XZ PROC		; CImperialGuardianRewardExp::~CImperialGuardianRewardExp, COMDAT
; _this$ = ecx

; 13   : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
  00003	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CImperialGuardianRewardExp@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1189 : 		return (this->_Myfirst() == this->_Mylast());

  00009	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000c	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 14   : 	if( !m_vtRewardExpInfo.empty() )

  0000f	74 3f		 je	 SHORT $LN3@CImperialG
  00011	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 46   : 		: _Ptr(_Parg)

  00012	8b f0		 mov	 esi, eax

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  00014	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 18   : 		for( ; _It != m_vtRewardExpInfo.end(); _It++)

  00017	74 36		 je	 SHORT $LN300@CImperialG
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CImperialG:

; 19   : 		{
; 20   : 			if( _It->pEventDugeonItemBag != NULL )

  00020	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00023	85 c9		 test	 ecx, ecx
  00025	74 06		 je	 SHORT $LN10@CImperialG

; 21   : 				delete _It->pEventDugeonItemBag;

  00027	8b 01		 mov	 eax, DWORD PTR [ecx]
  00029	6a 01		 push	 1
  0002b	ff 10		 call	 DWORD PTR [eax]
$LN10@CImperialG:

; 22   : 
; 23   : 			if( _It->pEventDugeonItemBagStone != NULL )

  0002d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00030	85 c9		 test	 ecx, ecx
  00032	74 06		 je	 SHORT $LN12@CImperialG

; 24   : 				delete _It->pEventDugeonItemBagStone;

  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	6a 01		 push	 1
  00038	ff 10		 call	 DWORD PTR [eax]
$LN12@CImperialG:

; 25   : 
; 26   : 			if( _It->pEventDugeonItemBagGaion != NULL )

  0003a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0003d	85 c9		 test	 ecx, ecx
  0003f	74 06		 je	 SHORT $LN2@CImperialG

; 27   : 				delete _It->pEventDugeonItemBagGaion;

  00041	8b 01		 mov	 eax, DWORD PTR [ecx]
  00043	6a 01		 push	 1
  00045	ff 10		 call	 DWORD PTR [eax]
$LN2@CImperialG:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 112  : 		++this->_Ptr;

  00047	83 c6 20	 add	 esi, 32			; 00000020H

; 113  : 		return (*this);
; 114  : 		}
; 115  : 
; 116  : 	_Myiter operator++(int)
; 117  : 		{	// postincrement
; 118  : 		_Myiter _Tmp = *this;
; 119  : 		++*this;
; 120  : 		return (_Tmp);
; 121  : 		}
; 122  : 
; 123  : 	_Myiter& operator--()
; 124  : 		{	// predecrement
; 125  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 126  : 		if (this->_Getcont() == 0
; 127  : 			|| this->_Ptr == 0
; 128  : 			|| this->_Ptr <= ((_Myvec *)this->_Getcont())->_Myfirst)
; 129  : 			{	// report error
; 130  : 			_DEBUG_ERROR("vector iterator not decrementable");
; 131  : 			_SCL_SECURE_OUT_OF_RANGE;
; 132  : 			}
; 133  : 
; 134  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 135  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 136  : 		_SCL_SECURE_VALIDATE_RANGE(
; 137  : 			this->_Ptr != _Tptr()
; 138  : 			&& ((_Myvec *)this->_Getcont())->_Myfirst < this->_Ptr);
; 139  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 140  : 
; 141  : 		--this->_Ptr;
; 142  : 		return (*this);
; 143  : 		}
; 144  : 
; 145  : 	_Myiter operator--(int)
; 146  : 		{	// postdecrement
; 147  : 		_Myiter _Tmp = *this;
; 148  : 		--*this;
; 149  : 		return (_Tmp);
; 150  : 		}
; 151  : 
; 152  : 	_Myiter& operator+=(difference_type _Off)
; 153  : 		{	// increment by integer
; 154  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 155  : 		if (this->_Getcont() == 0
; 156  : 			|| this->_Ptr + _Off < ((_Myvec *)this->_Getcont())->_Myfirst
; 157  : 			|| ((_Myvec *)this->_Getcont())->_Mylast < this->_Ptr + _Off)
; 158  : 			{	// report error
; 159  : 			_DEBUG_ERROR("vector iterator + offset out of range");
; 160  : 			_SCL_SECURE_OUT_OF_RANGE;
; 161  : 			}
; 162  : 
; 163  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 164  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 165  : 		_SCL_SECURE_VALIDATE_RANGE(
; 166  : 			((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr + _Off
; 167  : 			&& this->_Ptr + _Off <= ((_Myvec *)this->_Getcont())->_Mylast);
; 168  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 169  : 
; 170  : 		_Ptr += _Off;
; 171  : 		return (*this);
; 172  : 		}
; 173  : 
; 174  : 	_Myiter operator+(difference_type _Off) const
; 175  : 		{	// return this + integer
; 176  : 		_Myiter _Tmp = *this;
; 177  : 		return (_Tmp += _Off);
; 178  : 		}
; 179  : 
; 180  : 	_Myiter& operator-=(difference_type _Off)
; 181  : 		{	// decrement by integer
; 182  : 		return (*this += -_Off);
; 183  : 		}
; 184  : 
; 185  : 	_Myiter operator-(difference_type _Off) const
; 186  : 		{	// return this - integer
; 187  : 		_Myiter _Tmp = *this;
; 188  : 		return (_Tmp -= _Off);
; 189  : 		}
; 190  : 
; 191  : 	difference_type operator-(const _Myiter& _Right) const
; 192  : 		{	// return difference of iterators
; 193  : 		_Compat(_Right);
; 194  : 		return (this->_Ptr - _Right._Ptr);
; 195  : 		}
; 196  : 
; 197  : 	reference operator[](difference_type _Off) const
; 198  : 		{	// subscript
; 199  : 		return (*(*this + _Off));
; 200  : 		}
; 201  : 
; 202  : 	bool operator==(const _Myiter& _Right) const
; 203  : 		{	// test for iterator equality
; 204  : 		if (this->_Getcont() != _Right._Getcont())
; 205  : 			_Compat(_Right);
; 206  : 		return (this->_Ptr == _Right._Ptr);

  0004a	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 18   : 		for( ; _It != m_vtRewardExpInfo.end(); _It++)

  0004d	75 d1		 jne	 SHORT $LL4@CImperialG
$LN300@CImperialG:
  0004f	5e		 pop	 esi
$LN3@CImperialG:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00050	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00053	85 c0		 test	 eax, eax
  00055	74 52		 je	 SHORT $LN190@CImperialG

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00057	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0005a	2b c8		 sub	 ecx, eax
  0005c	c1 f9 05	 sar	 ecx, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0005f	81 f9 ff ff ff
	07		 cmp	 ecx, 134217727		; 07ffffffH
  00065	77 44		 ja	 SHORT $LN302@CImperialG

; 101  : 	const size_t _User_size = _Count * _Sz;

  00067	c1 e1 05	 shl	 ecx, 5

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 19		 jb	 SHORT $LN258@CImperialG

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00072	a8 1f		 test	 al, 31			; 0000001fH
  00074	75 3a		 jne	 SHORT $LN304@CImperialG

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00076	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00079	3b c8		 cmp	 ecx, eax
  0007b	73 38		 jae	 SHORT $LN305@CImperialG

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0007d	2b c1		 sub	 eax, ecx
  0007f	83 f8 04	 cmp	 eax, 4
  00082	72 36		 jb	 SHORT $LN306@CImperialG

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00084	83 f8 23	 cmp	 eax, 35			; 00000023H
  00087	77 36		 ja	 SHORT $LN307@CImperialG

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00089	8b c1		 mov	 eax, ecx
$LN258@CImperialG:

; 138  : 	::operator delete(_Ptr);

  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00091	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00098	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1663 : 			this->_Mylast() = pointer();

  0009b	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 1664 : 			this->_Myend() = pointer();

  000a2	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
$LN190@CImperialG:
  000a9	5f		 pop	 edi
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 30   : }

  000aa	c3		 ret	 0
$LN302@CImperialG:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000ab	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN308@CImperialG:
$LN304@CImperialG:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000b0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN309@CImperialG:
$LN305@CImperialG:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN310@CImperialG:
$LN306@CImperialG:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000ba	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN311@CImperialG:
$LN307@CImperialG:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000bf	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN312@CImperialG:
$LN301@CImperialG:
  000c4	cc		 int	 3
??1CImperialGuardianRewardExp@@UAE@XZ ENDP		; CImperialGuardianRewardExp::~CImperialGuardianRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ??0CImperialGuardianRewardExp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CImperialGuardianRewardExp@@QAE@XZ PROC		; CImperialGuardianRewardExp::CImperialGuardianRewardExp, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CImperialGuardianRewardExp@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00010	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 481  : 		_Mylast = pointer();

  00017	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 482  : 		_Myend = pointer();

  0001e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp

; 9    : 	Init();

  00025	e8 00 00 00 00	 call	 ?Init@CImperialGuardianRewardExp@@QAEXXZ ; CImperialGuardianRewardExp::Init

; 10   : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CImperialGuardianRewardExp@@QAE@XZ ENDP		; CImperialGuardianRewardExp::CImperialGuardianRewardExp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.h
;	COMDAT ??0_stRewardExpInfo@@QAE@XZ
_TEXT	SEGMENT
??0_stRewardExpInfo@@QAE@XZ PROC			; _stRewardExpInfo::_stRewardExpInfo, COMDAT
; _this$ = ecx

; 8    : 	{
; 9    : 		m_MinLevel = 0;

  00000	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 10   : 		m_MaxLevel = 0;
; 11   : 		m_iRewardExp = 0;
; 12   : 
; 13   : 		pEventDugeonItemBagGaion = NULL;
; 14   : 		pEventDugeonItemBagStone = NULL;
; 15   : 		pEventDugeonItemBag = NULL;
; 16   : 	}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00010	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00017	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0001e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00025	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  0002c	c3		 ret	 0
??0_stRewardExpInfo@@QAE@XZ ENDP			; _stRewardExpInfo::_stRewardExpInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ PROC ; std::_Iterator_base0::_Getcont, COMDAT
; _this$ = ecx

; 59   : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 60   : 		}

  00002	c3		 ret	 0
?_Getcont@_Iterator_base0@std@@QBEPBU_Container_base0@2@XZ ENDP ; std::_Iterator_base0::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 238  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\imperialguardianrewardexp.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 238  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
