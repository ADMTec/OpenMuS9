; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\DevilSquare.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?g_sttDEVILSQUARE_LEVEL@@3PAUEVENT_LEVEL_LIMITATION_EX@@A DD 0fH ; g_sttDEVILSQUARE_LEVEL
	DD	082H
	DD	0aH
	DD	06eH
	DD	03aH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	03bH
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	03cH
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	03dH
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	06fH
	DD	014bH
	DD	0190H
	DD	0137H
	DD	0190H
	DD	070H
	DD	00H
	DD	0190H
	DD	00H
	DD	0190H
	DD	010eH
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CDevilSquare@@QAE@XZ				; CDevilSquare::CDevilSquare
PUBLIC	??1CDevilSquare@@UAE@XZ				; CDevilSquare::~CDevilSquare
PUBLIC	?Init@CDevilSquare@@QAEXXZ			; CDevilSquare::Init
PUBLIC	?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
PUBLIC	?Run@CDevilSquare@@QAEHXZ			; CDevilSquare::Run
PUBLIC	?GetRemainTime@CDevilSquare@@QAEHXZ		; CDevilSquare::GetRemainTime
PUBLIC	?SetMonster@CDevilSquare@@QAEXXZ		; CDevilSquare::SetMonster
PUBLIC	?ClearMonstr@CDevilSquare@@QAEXXZ		; CDevilSquare::ClearMonstr
PUBLIC	?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquare::gDevilSquareMonsterRegen
PUBLIC	?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquare::DieProcDevilSquare
PUBLIC	?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjMonsterExpSingle
PUBLIC	?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjExpParty
PUBLIC	?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ; CDevilSquare::gObjMonsterScoreDivision
PUBLIC	?Load@CDevilSquare@@QAEXPAD@Z			; CDevilSquare::Load
PUBLIC	?CalcScore@CDevilSquare@@QAEXXZ			; CDevilSquare::CalcScore
PUBLIC	?SetClose@CDevilSquare@@QAEXXZ			; CDevilSquare::SetClose
PUBLIC	?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z	; CDevilSquare::GetDevilSquareIndex
PUBLIC	?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z	; CDevilSquare::GetUserLevelToEnter
PUBLIC	?AddUser@CDevilSquare@@QAEHHH@Z			; CDevilSquare::AddUser
PUBLIC	?DelUser@CDevilSquare@@QAEHHH@Z			; CDevilSquare::DelUser
PUBLIC	?ChangeUserIndex@CDevilSquare@@QAEHHHH@Z	; CDevilSquare::ChangeUserIndex
PUBLIC	?LeaveDevilSquare@CDevilSquare@@QAEHHH@Z	; CDevilSquare::LeaveDevilSquare
PUBLIC	?GetPlayUserCountRightNow@CDevilSquare@@QAEHH@Z	; CDevilSquare::GetPlayUserCountRightNow
PUBLIC	?SetOpen@CDevilSquare@@AAEXXZ			; CDevilSquare::SetOpen
PUBLIC	?SetPlaying@CDevilSquare@@AAEXXZ		; CDevilSquare::SetPlaying
PUBLIC	?ProcClose@CDevilSquare@@AAEXXZ			; CDevilSquare::ProcClose
PUBLIC	?ProcOpen@CDevilSquare@@AAEXXZ			; CDevilSquare::ProcOpen
PUBLIC	?ProcPlaying@CDevilSquare@@AAEXXZ		; CDevilSquare::ProcPlaying
PUBLIC	?SendEventStartMsg@CDevilSquare@@AAEXXZ		; CDevilSquare::SendEventStartMsg
PUBLIC	?ItemClear@CDevilSquare@@AAEXXZ			; CDevilSquare::ItemClear
PUBLIC	?CheckSync@CDevilSquare@@AAEXXZ			; CDevilSquare::CheckSync
PUBLIC	?SendLiveCall@CDevilSquare@@AAEXXZ		; CDevilSquare::SendLiveCall
PUBLIC	?gObjScoreClear@CDevilSquare@@AAEXXZ		; CDevilSquare::gObjScoreClear
PUBLIC	?CheckInvalidUser@CDevilSquare@@AAEXXZ		; CDevilSquare::CheckInvalidUser
PUBLIC	?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0
PUBLIC	??1?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ ; std::list<DS_TIME,std::allocator<DS_TIME> >::~list<DS_TIME,std::allocator<DS_TIME> >
PUBLIC	??_GCDevilSquare@@UAEPAXI@Z			; CDevilSquare::`scalar deleting destructor'
PUBLIC	?DevilSquareThreadFunc@@YGIPAX@Z		; DevilSquareThreadFunc
PUBLIC	?DevilSquareProtocolCore@@YAXEPAEH@Z		; DevilSquareProtocolCore
PUBLIC	?DataSendRank@@YAXPADH@Z			; DataSendRank
PUBLIC	??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Buynode<DS_TIME const &>
PUBLIC	??_7CDevilSquare@@6B@				; CDevilSquare::`vftable'
PUBLIC	?g_DevilSquare@@3VCDevilSquare@@A		; g_DevilSquare
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@	; `string'
PUBLIC	??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@ ; `string'
PUBLIC	??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@ ; `string'
PUBLIC	??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@ ; `string'
PUBLIC	??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@ ; `string'
PUBLIC	??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@ ; `string'
PUBLIC	??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@ ; `string'
PUBLIC	??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@ ; `string'
PUBLIC	??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@	; `string'
PUBLIC	??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@ ; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CDevilSquare@@6B@				; CDevilSquare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDevilSquare@@@8			; CDevilSquare `RTTI Type Descriptor'
PUBLIC	??_R3CDevilSquare@@8				; CDevilSquare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDevilSquare@@8				; CDevilSquare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDevilSquare@@8			; CDevilSquare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@4069000000000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	__beginthreadex:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	?Clear@CMagicInf@@QAEXXZ:PROC			; CMagicInf::Clear
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCKillPlayerExpSend@@YAXHHHHH@Z:PROC		; GCKillPlayerExpSend
EXTRN	?AllSendSameMapMsg@@YAXPAEHE@Z:PROC		; AllSendSameMapMsg
EXTRN	?gObjSetPosMonster@@YAHHH@Z:PROC		; gObjSetPosMonster
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjUserKill@@YAXH@Z:PROC			; gObjUserKill
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjIsConnected@@YAHH@Z:PROC			; gObjIsConnected
EXTRN	?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z:PROC	; gObjCalDistance
EXTRN	?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@PA_JHH@Z:PROC ; gObjLevelUp
EXTRN	?CreateFrustrum@@YAXHHH@Z:PROC			; CreateFrustrum
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	??0CDevilSquareGround@@QAE@XZ:PROC		; CDevilSquareGround::CDevilSquareGround
EXTRN	??1CDevilSquareGround@@UAE@XZ:PROC		; CDevilSquareGround::~CDevilSquareGround
EXTRN	?Init@CDevilSquareGround@@QAEXH@Z:PROC		; CDevilSquareGround::Init
EXTRN	?Clear@CDevilSquareGround@@QAEXXZ:PROC		; CDevilSquareGround::Clear
EXTRN	?SetBonus@CDevilSquareGround@@QAEXHHH@Z:PROC	; CDevilSquareGround::SetBonus
EXTRN	?IncBonus@CDevilSquareGround@@QAEXM@Z:PROC	; CDevilSquareGround::IncBonus
EXTRN	?Set@CDevilSquareGround@@QAEXGHH@Z:PROC		; CDevilSquareGround::Set
EXTRN	?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z:PROC	; CDevilSquareGround::SetBoss
EXTRN	?RegenBossMonster@CDevilSquareGround@@QAEXH@Z:PROC ; CDevilSquareGround::RegenBossMonster
EXTRN	?GetMonsterType@CDevilSquareGround@@QAEGH@Z:PROC ; CDevilSquareGround::GetMonsterType
EXTRN	?ClearScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::ClearScore
EXTRN	?SortScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::SortScore
EXTRN	?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z:PROC ; CDevilSquareGround::InsertObj
EXTRN	?SendScore@CDevilSquareGround@@QAEXXZ:PROC	; CDevilSquareGround::SendScore
EXTRN	?GetPlayUserCountRightNow@CDevilSquareGround@@QAEHXZ:PROC ; CDevilSquareGround::GetPlayUserCountRightNow
EXTRN	?AddUser@CDevilSquareGround@@QAEHH@Z:PROC	; CDevilSquareGround::AddUser
EXTRN	?DelUser@CDevilSquareGround@@QAEHH@Z:PROC	; CDevilSquareGround::DelUser
EXTRN	?ChangeUserIndex@CDevilSquareGround@@QAEHHH@Z:PROC ; CDevilSquareGround::ChangeUserIndex
EXTRN	??_ECDevilSquare@@UAEPAXI@Z:PROC		; CDevilSquare::`vector deleting destructor'
EXTRN	?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z:PROC ; MyWinsockBase::CreateSocket
EXTRN	?Close@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::Close
EXTRN	?DataSend@wsJoinServerCli@@QAEHPADH@Z:PROC	; wsJoinServerCli::DataSend
EXTRN	?GetExpBonus@PartyClass@@QAEHPAUOBJECTSTRUCT@@0H@Z:PROC ; PartyClass::GetExpBonus
EXTRN	?GMRankingServerConnect@@YAHPADK@Z:PROC		; GMRankingServerConnect
EXTRN	?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z:PROC	; TNotice::MakeNoticeMsg
EXTRN	?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ:PROC	; TNotice::MakeNoticeMsgEx
EXTRN	?gObjMonsterRegen@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjMonsterRegen
EXTRN	?gObjMonsterHitDamageUserDel@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterHitDamageUserDel
EXTRN	?gObjMonsterLastHitDamageUser@@YAHPAUOBJECTSTRUCT@@AAH@Z:PROC ; gObjMonsterLastHitDamageUser
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?GetOccupationState@CCrywolfSync@@QAEHXZ:PROC	; CCrywolfSync::GetOccupationState
EXTRN	?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ:PROC ; CCrywolfSync::GetGettingExpPenaltyRate
EXTRN	?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CMasterExperience::IsEnabled
EXTRN	?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z:PROC ; CheckItemOptForGetExpEx
EXTRN	?EGAnsDevilSquareEnter@@YAXPAUPMSG_ANS_BLOODCASTLE_ENTER@@@Z:PROC ; EGAnsDevilSquareEnter
EXTRN	?EGAnsBloodCastleEnter@@YAXPAUPMSG_ANS_BLOODCASTLE_ENTER@@@Z:PROC ; EGAnsBloodCastleEnter
EXTRN	?EGAnsBloodCastleEnterCount@@YAXPAUPMSG_ANS_BLOODCASTLE_ENTERCOUNT@@@Z:PROC ; EGAnsBloodCastleEnterCount
EXTRN	?GetExp@MapRateInfo@@QAEMF@Z:PROC		; MapRateInfo::GetExp
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	__allrem:PROC
EXTRN	__ltod3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?m_ObjBill@@3PAVBILL_CLASS@@A:BYTE		; m_ObjBill
EXTRN	?ghWnd@@3PAUHWND__@@A:DWORD			; ghWnd
EXTRN	?IsDevilSquareEventConnected@@3HA:DWORD		; IsDevilSquareEventConnected
EXTRN	?gDevilSquareEvent@@3HA:DWORD			; gDevilSquareEvent
EXTRN	?RankingServerIP@@3PADA:BYTE			; RankingServerIP
EXTRN	?wsRServerCli@@3VwsJoinServerCli@@A:BYTE	; wsRServerCli
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gMSetBase@@3VCMonsterSetBase@@A:BYTE		; gMSetBase
EXTRN	?gParty@@3VPartyClass@@A:BYTE			; gParty
EXTRN	?gLevelExperience@@3PAKA:BYTE			; gLevelExperience
EXTRN	?g_iCrywolfApplyMvpPenalty@@3HA:DWORD		; g_iCrywolfApplyMvpPenalty
EXTRN	?gGameServerCode@@3FA:WORD			; gGameServerCode
EXTRN	?g_CrywolfSync@@3VCCrywolfSync@@A:BYTE		; g_CrywolfSync
EXTRN	?g_MasterExp@@3VCMasterExperience@@A:BYTE	; g_MasterExp
EXTRN	?g_MapRateInfo@@3VMapRateInfo@@A:BYTE		; g_MapRateInfo
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_DevilSquare@@3VCDevilSquare@@A DB 024dcH DUP (?)	; g_DevilSquare
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_DevilSquare$initializer$@@3P6AXXZA DD FLAT:??__Eg_DevilSquare@@YAXXZ ; g_DevilSquare$initializer$
CRT$XCU	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CDevilSquare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDevilSquare@@8 DD FLAT:??_R0?AVCDevilSquare@@@8 ; CDevilSquare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_R2CDevilSquare@@8
rdata$r	SEGMENT
??_R2CDevilSquare@@8 DD FLAT:??_R1A@?0A@EA@CDevilSquare@@8 ; CDevilSquare::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDevilSquare@@8
rdata$r	SEGMENT
??_R3CDevilSquare@@8 DD 00H				; CDevilSquare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDevilSquare@@@8
data$r	SEGMENT
??_R0?AVCDevilSquare@@@8 DD FLAT:??_7type_info@@6B@	; CDevilSquare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDevilSquare@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDevilSquare@@6B@
rdata$r	SEGMENT
??_R4CDevilSquare@@6B@ DD 00H				; CDevilSquare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDevilSquare@@@8
	DD	FLAT:??_R3CDevilSquare@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@
CONST	SEGMENT
??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@ DB '['
	DB	'DevilSquare] [%s][%s] Found user in DevilSquare [State:Close]'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@ DB 'error : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@ DB 'DevilSquare.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@
CONST	SEGMENT
??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@ DB '['
	DB	'DevilSquare] Dead [%s][%s][%d][%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@
CONST	SEGMENT
??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@ DB '[DevilSquar'
	DB	'e] Start Event', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@
CONST	SEGMENT
??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@ DB '['
	DB	'DevilSquare] Monter Regen [%d][%d][%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@
CONST	SEGMENT
??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@ DB '[DevilSq'
	DB	'uare] Invalid DevilSquareIndex [%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
CONST	SEGMENT
??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@ DB '['
	DB	'DevilSquare] [%d] Invalid MonterType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@
CONST	SEGMENT
??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@ DB '['
	DB	'DevilSquare] Sync Open Time. [%d]min remain', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@
CONST	SEGMENT
??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@ DB '[DevilSquare] Clos'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
CONST	SEGMENT
??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@ DB '%s file load!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@
CONST	SEGMENT
??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@ DB '[Devil'
	DB	'Square] Info file Load Fail [%s]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CDevilSquare@@6B@
CONST	SEGMENT
??_7CDevilSquare@@6B@ DD FLAT:??_R4CDevilSquare@@6B@	; CDevilSquare::`vftable'
	DD	FLAT:??_ECDevilSquare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CDevilSquare@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDevilSquare@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDevilSquare@@QAE@XZ$0
__ehfuncinfo$??0CDevilSquare@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDevilSquare@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDS_TIME@@ABU1@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAUDS_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UDS_TIME@@ABU1@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAUDS_TIME@@ABU2@@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::construct<DS_TIME,DS_TIME const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@construct:

; 656  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UDS_TIME@@ABU1@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAUDS_TIME@@ABU2@@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::construct<DS_TIME,DS_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDS_TIME@@ABU1@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAUDS_TIME@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UDS_TIME@@ABU1@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAUDS_TIME@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<DS_TIME,DS_TIME const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UDS_TIME@@ABU1@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAUDS_TIME@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<DS_TIME,DS_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::construct<std::_List_node<DS_TIME,void *> *,std::_List_node<DS_TIME,void *> * &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::construct<std::_List_node<DS_TIME,void *> *,std::_List_node<DS_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UDS_TIME@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAUDS_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UDS_TIME@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAUDS_TIME@@@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::destroy<DS_TIME>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UDS_TIME@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAUDS_TIME@@@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::destroy<DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::destroy<std::_List_node<DS_TIME,void *> *>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::destroy<std::_List_node<DS_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDS_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAUDS_TIME@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UDS_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAUDS_TIME@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<DS_TIME,DS_TIME const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 0d		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	89 02		 mov	 DWORD PTR [edx], eax
  00011	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00014	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
??$construct@UDS_TIME@@ABU1@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAUDS_TIME@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<DS_TIME,DS_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<std::_List_node<DS_TIME,void *> *,std::_List_node<DS_TIME,void *> * &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<std::_List_node<DS_TIME,void *> *,std::_List_node<DS_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAAAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAAAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<DS_TIME,void *> * &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAAAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<DS_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UDS_TIME@@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAUDS_TIME@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UDS_TIME@@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAUDS_TIME@@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<DS_TIME>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UDS_TIME@@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAUDS_TIME@@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UDS_TIME@@@std@@YAPAUDS_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UDS_TIME@@@std@@YAPAUDS_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<DS_TIME>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UDS_TIME@@@std@@YAPAUDS_TIME@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0UDS_TIME@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0UDS_TIME@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::allocator<std::_List_node<DS_TIME,void *> ><DS_TIME>, COMDAT
; _this$ = ecx

; 628  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0UDS_TIME@@@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::allocator<std::_List_node<DS_TIME,void *> ><DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@UDS_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@UDS_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > ><std::allocator<DS_TIME> >, COMDAT
; _this$ = ecx

; 869  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0V?$allocator@UDS_TIME@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > ><std::allocator<DS_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UDS_TIME@@@std@@@std@@YAABV?$allocator@UDS_TIME@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UDS_TIME@@@std@@@std@@YAABV?$allocator@UDS_TIME@@@0@ABV10@@Z PROC ; std::forward<std::allocator<DS_TIME> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UDS_TIME@@@std@@@std@@YAABV?$allocator@UDS_TIME@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<DS_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAPAU?$_List_node@UDS_TIME@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAPAU?$_List_node@UDS_TIME@@PAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<std::_List_node<DS_TIME,void *> *>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@1@PAPAU?$_List_node@UDS_TIME@@PAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<std::_List_node<DS_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@PAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@PAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<std::_List_node<DS_TIME,void *> *>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@PAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<std::_List_node<DS_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z PROC ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Buynode<DS_TIME const &>, COMDAT
; _this$ = ecx

; 828  : 		{	// allocate a node and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  00004	ff 75 0c	 push	 DWORD PTR __Prev$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __Next$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0

; 541  : 		return ((reference)_Pnode->_Myval);

  0000f	8d 70 08	 lea	 esi, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 0d		 je	 SHORT $LN39@Buynode
  00016	8b 55 10	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
  00019	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001b	89 0e		 mov	 DWORD PTR [esi], ecx
  0001d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00020	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN39@Buynode:
  00023	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 841  : 		}

  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z ENDP ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Buynode<DS_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUDS_TIME@@@std@@YAABUDS_TIME@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUDS_TIME@@@std@@YAABUDS_TIME@@ABU1@@Z PROC	; std::forward<DS_TIME const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUDS_TIME@@@std@@YAABUDS_TIME@@ABU1@@Z ENDP	; std::forward<DS_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<std::_List_node<DS_TIME,void *> *,std::_List_node<DS_TIME,void *> * &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@UDS_TIME@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::construct<std::_List_node<DS_TIME,void *> *,std::_List_node<DS_TIME,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UDS_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAUDS_TIME@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UDS_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAUDS_TIME@@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<DS_TIME>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UDS_TIME@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAUDS_TIME@@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UDS_TIME@@@std@@YAPAUDS_TIME@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UDS_TIME@@@std@@YAPAUDS_TIME@@AAU1@@Z PROC	; std::addressof<DS_TIME>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UDS_TIME@@@std@@YAPAUDS_TIME@@AAU1@@Z ENDP	; std::addressof<DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UDS_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UDS_TIME@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UDS_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UDS_TIME@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1><std::allocator<DS_TIME> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 525  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 526  : 		this->_Mysize = 0;

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  0000f	c2 08 00	 ret	 8
??$?0ABV?$allocator@UDS_TIME@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UDS_TIME@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1><std::allocator<DS_TIME> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<std::_List_node<DS_TIME,void *> *>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@UDS_TIME@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@UDS_TIME@@PAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::destroy<std::_List_node<DS_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<DS_TIME,void *> *>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_List_node@UDS_TIME@@PAX@std@@@std@@YAPAPAU?$_List_node@UDS_TIME@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<DS_TIME,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??$_Insert@ABUDS_TIME@@@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@1@ABUDS_TIME@@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Insert@ABUDS_TIME@@@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@1@ABUDS_TIME@@@Z PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Insert<DS_TIME const &>, COMDAT
; _this$ = ecx

; 1058 : 		{	// insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00007	57		 push	 edi

; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00008	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	ff 76 04	 push	 DWORD PTR [esi+4]
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Buynode<DS_TIME const &>
  00016	8b d0		 mov	 edx, eax

; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00018	b9 fe ff ff 0f	 mov	 ecx, 268435454		; 0ffffffeH
  0001d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00020	2b c8		 sub	 ecx, eax
  00022	83 f9 01	 cmp	 ecx, 1
  00025	72 12		 jb	 SHORT $LN65@Insert

; 1910 : 		this->_Mysize() += _Count;

  00027	40		 inc	 eax
  00028	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002b	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0002e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00033	89 10		 mov	 DWORD PTR [eax], edx

; 1066 : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN65@Insert:

; 1909 : 			_Xlength_error("list<T> too long");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003e	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@Insert:
$LN64@Insert:
  00043	cc		 int	 3
??$_Insert@ABUDS_TIME@@@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@1@ABUDS_TIME@@@Z ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Insert<DS_TIME const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 125  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 376  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 377  : 		_Myiter _Tmp = *this;

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00008	89 10		 mov	 DWORD PTR [eax], edx

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  0000a	8b 12		 mov	 edx, DWORD PTR [edx]
  0000c	89 11		 mov	 DWORD PTR [ecx], edx

; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 373  : 		}

  00008	c3		 ret	 0
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBEAAUDS_TIME@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBEAAUDS_TIME@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBEAAUDS_TIME@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >, COMDAT
; _this$ = ecx

; 343  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 344  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 338  : 		{	// construct with null node
; 339  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator!=, COMDAT
; _this$ = ecx

; 300  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]

; 301  : 		return (!(*this == _Right));

  00005	33 c0		 xor	 eax, eax

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]

; 301  : 		return (!(*this == _Right));

  0000c	0f 95 c0	 setne	 al

; 302  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator==, COMDAT
; _this$ = ecx

; 284  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	33 c0		 xor	 eax, eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000c	0f 94 c0	 sete	 al

; 297  : 		}

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator++, COMDAT
; _this$ = ecx

; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 241  : 		return (*this);

  00006	8b c1		 mov	 eax, ecx

; 242  : 		}

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBEABUDS_TIME@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBEABUDS_TIME@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator*, COMDAT
; _this$ = ecx

; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QBEABUDS_TIME@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 188  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 183  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@UDS_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@UDS_TIME@@PAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 96   : 		return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 97   : 		}

  00002	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@UDS_TIME@@PAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 45   : 		this->_Adopt(_Plist);
; 46   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@UDS_TIME@@PAX@1@PBV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   : 		: _Ptr(0)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 40   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<DS_TIME> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_DevilSquare@@YAXXZ
text$yd	SEGMENT
??__Fg_DevilSquare@@YAXXZ PROC				; `dynamic atexit destructor for 'g_DevilSquare'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  00005	e9 00 00 00 00	 jmp	 ??1CDevilSquare@@UAE@XZ	; CDevilSquare::~CDevilSquare
??__Fg_DevilSquare@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_DevilSquare''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ??__Eg_DevilSquare@@YAXXZ
text$di	SEGMENT
??__Eg_DevilSquare@@YAXXZ PROC				; `dynamic initializer for 'g_DevilSquare'', COMDAT

; 26   : CDevilSquare g_DevilSquare;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_DevilSquare@@3VCDevilSquare@@A ; g_DevilSquare
  00005	e8 00 00 00 00	 call	 ??0CDevilSquare@@QAE@XZ	; CDevilSquare::CDevilSquare
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_DevilSquare@@YAXXZ ; `dynamic atexit destructor for 'g_DevilSquare''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_DevilSquare@@YAXXZ ENDP				; `dynamic initializer for 'g_DevilSquare''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?DataSendRank@@YAXPADH@Z
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
_size$ = 12						; size = 4
?DataSendRank@@YAXPADH@Z PROC				; DataSendRank, COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   : 	if ( IsDevilSquareEventConnected == FALSE )

  00003	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, 0 ; IsDevilSquareEventConnected
  0000a	75 41		 jne	 SHORT $LN6@DataSendRa

; 60   : 	{
; 61   : 		wsRServerCli.Close();

  0000c	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A+4
  00011	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close

; 62   : 		wsRServerCli.CreateSocket(ghWnd);

  00016	ff 35 00 00 00
	00		 push	 DWORD PTR ?ghWnd@@3PAUHWND__@@A ; ghWnd
  0001c	b9 04 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A+4
  00021	e8 00 00 00 00	 call	 ?CreateSocket@MyWinsockBase@@QAEHPAUHWND__@@@Z ; MyWinsockBase::CreateSocket

; 63   : 
; 64   : 		if ( GMRankingServerConnect(RankingServerIP, WM_GM_RANKING_CLIENT_MSG_PROC) == FALSE )

  00026	68 0c 04 00 00	 push	 1036			; 0000040cH
  0002b	68 00 00 00 00	 push	 OFFSET ?RankingServerIP@@3PADA ; RankingServerIP
  00030	e8 00 00 00 00	 call	 ?GMRankingServerConnect@@YAHPADK@Z ; GMRankingServerConnect
  00035	83 c4 08	 add	 esp, 8
  00038	85 c0		 test	 eax, eax
  0003a	75 07		 jne	 SHORT $LN3@DataSendRa

; 65   : 		{
; 66   : 			IsDevilSquareEventConnected = FALSE;

  0003c	a3 00 00 00 00	 mov	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, eax ; IsDevilSquareEventConnected

; 78   : 	}
; 79   : }

  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN3@DataSendRa:

; 67   : //			LogAddTD("Can not connect Ranking Server");
; 68   : 
; 69   : 			return;
; 70   : 		}
; 71   : 
; 72   : 		IsDevilSquareEventConnected = TRUE;

  00043	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?IsDevilSquareEventConnected@@3HA, 1 ; IsDevilSquareEventConnected
$LN6@DataSendRa:

; 73   : 	}
; 74   : 
; 75   : 	if ( IsDevilSquareEventConnected != FALSE )
; 76   : 	{
; 77   : 		wsRServerCli.DataSend(pMsg, size);

  0004d	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ?wsRServerCli@@3VwsJoinServerCli@@A ; wsRServerCli
  00055	ff 75 08	 push	 DWORD PTR _pMsg$[ebp]
  00058	e8 00 00 00 00	 call	 ?DataSend@wsJoinServerCli@@QAEHPADH@Z ; wsJoinServerCli::DataSend

; 78   : 	}
; 79   : }

  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?DataSendRank@@YAXPADH@Z ENDP				; DataSendRank
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?DevilSquareProtocolCore@@YAXEPAEH@Z
_TEXT	SEGMENT
_protoNum$ = 8						; size = 1
_aRecv$ = 12						; size = 4
_aLen$ = 16						; size = 4
?DevilSquareProtocolCore@@YAXEPAEH@Z PROC		; DevilSquareProtocolCore, COMDAT

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   : 	switch ( protoNum )

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _protoNum$[ebp]
  00007	83 e8 06	 sub	 eax, 6
  0000a	74 24		 je	 SHORT $LN4@DevilSquar
  0000c	83 e8 02	 sub	 eax, 2
  0000f	74 12		 je	 SHORT $LN5@DevilSquar
  00011	83 e8 03	 sub	 eax, 3
  00014	75 25		 jne	 SHORT $LN7@DevilSquar

; 45   : 		break;
; 46   : 	case 0x0B:
; 47   : 		EGAnsBloodCastleEnterCount((PMSG_ANS_BLOODCASTLE_ENTERCOUNT*)aRecv);

  00016	ff 75 0c	 push	 DWORD PTR _aRecv$[ebp]
  00019	e8 00 00 00 00	 call	 ?EGAnsBloodCastleEnterCount@@YAXPAUPMSG_ANS_BLOODCASTLE_ENTERCOUNT@@@Z ; EGAnsBloodCastleEnterCount
  0001e	83 c4 04	 add	 esp, 4

; 48   : 		break;
; 49   : 	default:
; 50   : 		break;
; 51   : 	}
; 52   : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN5@DevilSquar:

; 42   : 		break;
; 43   : 	case 0x08:
; 44   : 		EGAnsBloodCastleEnter((PMSG_ANS_BLOODCASTLE_ENTER*)aRecv);

  00023	ff 75 0c	 push	 DWORD PTR _aRecv$[ebp]
  00026	e8 00 00 00 00	 call	 ?EGAnsBloodCastleEnter@@YAXPAUPMSG_ANS_BLOODCASTLE_ENTER@@@Z ; EGAnsBloodCastleEnter
  0002b	83 c4 04	 add	 esp, 4

; 48   : 		break;
; 49   : 	default:
; 50   : 		break;
; 51   : 	}
; 52   : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN4@DevilSquar:

; 39   : 	{
; 40   : 	case 0x06:
; 41   : 		EGAnsDevilSquareEnter((PMSG_ANS_BLOODCASTLE_ENTER*)aRecv);

  00030	ff 75 0c	 push	 DWORD PTR _aRecv$[ebp]
  00033	e8 00 00 00 00	 call	 ?EGAnsDevilSquareEnter@@YAXPAUPMSG_ANS_BLOODCASTLE_ENTER@@@Z ; EGAnsDevilSquareEnter
  00038	83 c4 04	 add	 esp, 4
$LN7@DevilSquar:

; 48   : 		break;
; 49   : 	default:
; 50   : 		break;
; 51   : 	}
; 52   : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?DevilSquareProtocolCore@@YAXEPAEH@Z ENDP		; DevilSquareProtocolCore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?DevilSquareThreadFunc@@YGIPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?DevilSquareThreadFunc@@YGIPAX@Z PROC			; DevilSquareThreadFunc, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 	CDevilSquare * pDevilSquare = (CDevilSquare *)p;
; 33   : 	return pDevilSquare->Run();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00006	e8 00 00 00 00	 call	 ?Run@CDevilSquare@@QAEHXZ ; CDevilSquare::Run

; 34   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?DevilSquareThreadFunc@@YGIPAX@Z ENDP			; DevilSquareThreadFunc
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCDevilSquare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCDevilSquare@@UAEPAXI@Z PROC			; CDevilSquare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CDevilSquare@@UAE@XZ	; CDevilSquare::~CDevilSquare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 dc 24 00 00	 push	 9436			; 000024dcH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCDevilSquare@@UAEPAXI@Z ENDP			; CDevilSquare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Incsize@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Incsize@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXI@Z PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Incsize, COMDAT
; _this$ = ecx

; 1907 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	b8 fe ff ff 0f	 mov	 eax, 268435454		; 0ffffffeH
  0000b	56		 push	 esi
  0000c	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  0000f	2b c2		 sub	 eax, edx
  00011	3b c6		 cmp	 eax, esi
  00013	72 0b		 jb	 SHORT $LN41@Incsize

; 1910 : 		this->_Mysize() += _Count;

  00015	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00018	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0001b	5e		 pop	 esi

; 1911 : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN41@Incsize:

; 1909 : 			_Xlength_error("list<T> too long");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00025	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN43@Incsize:
$LN40@Incsize:
  0002a	cc		 int	 3
?_Incsize@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXI@Z ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Tidy@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXXZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Tidy, COMDAT
; _this$ = ecx

; 1884 : 		{	// free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;
; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 17		 mov	 edx, DWORD PTR [edi]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1504 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN5@Tidy
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL6@Tidy:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL6@Tidy
  00031	5e		 pop	 esi
$LN5@Tidy:
  00032	5f		 pop	 edi

; 1885 : 		clear();
; 1886 : 		}

  00033	c3		 ret	 0
?_Tidy@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXXZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?clear@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXXZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::clear, COMDAT
; _this$ = ecx

; 1496 : 		{	// erase all

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00005	8b 02		 mov	 eax, DWORD PTR [edx]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 12		 mov	 DWORD PTR [edx], edx

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 17		 mov	 edx, DWORD PTR [edi]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	89 52 04	 mov	 DWORD PTR [edx+4], edx

; 1504 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 07		 cmp	 eax, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN3@clear
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL4@clear:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0002b	8b c6		 mov	 eax, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL4@clear
  00031	5e		 pop	 esi
$LN3@clear:
  00032	5f		 pop	 edi

; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}

  00033	c3		 ret	 0
?clear@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXXZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?push_back@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXABUDS_TIME@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXABUDS_TIME@@@Z PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::push_back, COMDAT
; _this$ = ecx

; 1288 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00007	ff 75 08	 push	 DWORD PTR __Val$[ebp]

; 96   : 		return (_Ptr);

  0000a	8b 3e		 mov	 edi, DWORD PTR [esi]

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  0000c	ff 77 04	 push	 DWORD PTR [edi+4]
  0000f	57		 push	 edi
  00010	e8 00 00 00 00	 call	 ??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Buynode<DS_TIME const &>
  00015	8b d0		 mov	 edx, eax

; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  00017	b9 fe ff ff 0f	 mov	 ecx, 268435454		; 0ffffffeH
  0001c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001f	2b c8		 sub	 ecx, eax
  00021	83 f9 01	 cmp	 ecx, 1
  00024	72 12		 jb	 SHORT $LN91@push_back

; 1910 : 		this->_Mysize() += _Count;

  00026	40		 inc	 eax
  00027	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  0002a	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  00032	89 10		 mov	 DWORD PTR [eax], edx

; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN91@push_back:

; 1909 : 			_Xlength_error("list<T> too long");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0003d	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN93@push_back:
$LN90@push_back:
  00042	cc		 int	 3
?push_back@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXABUDS_TIME@@@Z ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?max_size@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QBEIXZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::max_size, COMDAT
; _this$ = ecx

; 1244 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 1245 : 		}

  00005	c3		 ret	 0
?max_size@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QBEIXZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?size@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QBEIXZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::size, COMDAT
; _this$ = ecx

; 1239 : 		return (this->_Mysize());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1240 : 		}

  00003	c3		 ret	 0
?size@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QBEIXZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1149 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?end@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::end, COMDAT
; _this$ = ecx

; 1127 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 43   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?begin@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::begin, COMDAT
; _this$ = ecx

; 1115 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 44   : 		{	// construct with node pointer _Pnode
; 45   : 		this->_Adopt(_Plist);
; 46   : 		}
; 47   : 
; 48   : 	reference operator*() const
; 49   : 		{	// return designated value
; 50   : 		return (_Mylist::_Myval(_Ptr));
; 51   : 		}
; 52   : 
; 53   : 	pointer operator->() const
; 54   : 		{	// return pointer to class object
; 55   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 56   : 		}
; 57   : 
; 58   : 	_Myiter& operator++()
; 59   : 		{	// preincrement
; 60   : 		_Ptr = _Mylist::_Nextnode(_Ptr);
; 61   : 		return (*this);
; 62   : 		}
; 63   : 
; 64   : 	_Myiter operator++(int)
; 65   : 		{	// postincrement
; 66   : 		_Myiter _Tmp = *this;
; 67   : 		++*this;
; 68   : 		return (_Tmp);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter& operator--()
; 72   : 		{	// predecrement
; 73   : 		_Ptr = _Mylist::_Prevnode(_Ptr);
; 74   : 		return (*this);
; 75   : 		}
; 76   : 
; 77   : 	_Myiter operator--(int)
; 78   : 		{	// postdecrement
; 79   : 		_Myiter _Tmp = *this;
; 80   : 		--*this;
; 81   : 		return (_Tmp);
; 82   : 		}
; 83   : 
; 84   : 	bool operator==(const _Myiter& _Right) const
; 85   : 		{	// test for iterator equality
; 86   : 		return (_Ptr == _Right._Ptr);
; 87   : 		}
; 88   : 
; 89   : 	bool operator!=(const _Myiter& _Right) const
; 90   : 		{	// test for iterator inequality
; 91   : 		return (!(*this == _Right));
; 92   : 		}
; 93   : 
; 94   : 	_Nodeptr _Mynode() const
; 95   : 		{	// return node pointer
; 96   : 		return (_Ptr);
; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@@2@XZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::~list<DS_TIME,std::allocator<DS_TIME> >, COMDAT
; _this$ = ecx

; 1094 : 		{	// destroy the object

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 07		 mov	 eax, DWORD PTR [edi]

; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  00005	8b 10		 mov	 edx, DWORD PTR [eax]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  00007	89 00		 mov	 DWORD PTR [eax], eax

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00009	8b 07		 mov	 eax, DWORD PTR [edi]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  0000b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1504 : 		this->_Mysize() = 0;

  0000e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  00015	3b 17		 cmp	 edx, DWORD PTR [edi]
  00017	74 19		 je	 SHORT $LN7@list
  00019	56		 push	 esi
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@list:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00020	8b 32		 mov	 esi, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00028	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0002b	8b d6		 mov	 edx, esi
  0002d	3b 37		 cmp	 esi, DWORD PTR [edi]
  0002f	75 ef		 jne	 SHORT $LL8@list
  00031	5e		 pop	 esi
$LN7@list:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00039	83 c4 04	 add	 esp, 4
  0003c	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1096 : 		}

  0003d	c3		 ret	 0
??1?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::~list<DS_TIME,std::allocator<DS_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ PROC ; std::list<DS_TIME,std::allocator<DS_TIME> >::list<DS_TIME,std::allocator<DS_TIME> >, COMDAT
; _this$ = ecx

; 890  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0

; 890  : 		{	// construct empty list

  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 525  : 		this->_Myhead = 0;

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0

; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();

  00020	89 06		 mov	 DWORD PTR [esi], eax

; 891  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ ENDP ; std::list<DS_TIME,std::allocator<DS_TIME> >::list<DS_TIME,std::allocator<DS_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??1?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ PROC ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::~_List_buy<DS_TIME,std::allocator<DS_TIME> >, COMDAT
; _this$ = ecx

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
  00008	c3		 ret	 0
??1?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::~_List_buy<DS_TIME,std::allocator<DS_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@@Z PROC ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Freenode, COMDAT
; _this$ = ecx

; 845  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 853  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@@Z ENDP ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z PROC ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_List_buy<DS_TIME,std::allocator<DS_TIME> >, COMDAT
; _this$ = ecx

; 817  : 		{	// construct from allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0

; 817  : 		{	// construct from allocator

  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 525  : 		this->_Myhead = 0;

  0000e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  00014	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  0001b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0

; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();

  00020	89 06		 mov	 DWORD PTR [esi], eax

; 818  : 		}

  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??0?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z ENDP ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_List_buy<DS_TIME,std::allocator<DS_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QBEABV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAEAAV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@V?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >,std::_List_val<std::_List_simple_types<DS_TIME> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAUDS_TIME@@PAU?$_List_node@UDS_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAUDS_TIME@@PAU?$_List_node@UDS_TIME@@PAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<DS_TIME> >::_Myval, COMDAT

; 540  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 542  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAUDS_TIME@@PAU?$_List_node@UDS_TIME@@PAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<DS_TIME> >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<DS_TIME> >::_Prevnode, COMDAT

; 535  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 537  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<DS_TIME> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<DS_TIME> >::_Nextnode, COMDAT

; 530  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 532  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<DS_TIME> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<DS_TIME> >::_List_val<std::_List_simple_types<DS_TIME> >, COMDAT
; _this$ = ecx

; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 526  : 		this->_Mysize = 0;
; 527  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<DS_TIME> >::_List_val<std::_List_simple_types<DS_TIME> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABIXZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Mysize, COMDAT
; _this$ = ecx

; 797  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 798  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABIXZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Mysize@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAIXZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Mysize, COMDAT
; _this$ = ecx

; 792  : 		return (_Get_data()._Mysize);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 793  : 		}

  00003	c3		 ret	 0
?_Mysize@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myhead@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UDS_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Myhead@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UDS_TIME@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Myhead, COMDAT
; _this$ = ecx

; 782  : 		return (_Get_data()._Myhead);

  00000	8b c1		 mov	 eax, ecx

; 783  : 		}

  00002	c3		 ret	 0
?_Myhead@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAPAU?$_List_node@UDS_TIME@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Myhead
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 777  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 778  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Get_data@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Get_data, COMDAT
; _this$ = ecx

; 772  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 773  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAV?$_List_val@U?$_List_simple_types@UDS_TIME@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 767  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 768  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Getal, COMDAT
; _this$ = ecx

; 762  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 763  : 		}

  00002	c3		 ret	 0
?_Getal@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z
_TEXT	SEGMENT
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0, COMDAT
; _this$ = ecx

; 729  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 89   : 		_Ptr = ::operator new(_User_size);

  00003	6a 10		 push	 16			; 00000010H
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0000d	85 c0		 test	 eax, eax
  0000f	74 1f		 je	 SHORT $LN123@Buynode0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 732  : 		if (_Next == _Nodeptr())

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  00014	85 c9		 test	 ecx, ecx
  00016	75 06		 jne	 SHORT $LN121@Buynode0

; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;

  00018	8b c8		 mov	 ecx, eax

; 735  : 			_Prev = _Pnode;

  0001a	8b d0		 mov	 edx, eax
  0001c	eb 03		 jmp	 SHORT $LN2@Buynode0
$LN121@Buynode0:
  0001e	8b 55 0c	 mov	 edx, DWORD PTR __Prev$[ebp]
$LN2@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00021	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00023	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00026	85 c9		 test	 ecx, ecx
  00028	74 02		 je	 SHORT $LN4@Buynode0
  0002a	89 11		 mov	 DWORD PTR [ecx], edx
$LN4@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 748  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
$LN123@Buynode0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN125@Buynode0:
$LN122@Buynode0:
  00035	cc		 int	 3
?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 719  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00003	ff 75 08	 push	 DWORD PTR __Pnode$[ebp]
  00006	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 725  : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00000	6a 00		 push	 0
  00002	6a 00		 push	 0
  00004	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0

; 716  : 		}

  00009	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??1?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::~_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00000	ff 31		 push	 DWORD PTR [ecx]
  00002	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00007	59		 pop	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 610  : 		}

  00008	c3		 ret	 0
??1?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::~_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ??0?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >, COMDAT
; _this$ = ecx

; 597  : 		{	// construct head node, allocator from _Al

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00003	6a 00		 push	 0
  00005	6a 00		 push	 0

; 525  : 		this->_Myhead = 0;

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  0000d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00014	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0

; 598  : 		_Myhead() = _Buyheadnode();

  00019	89 06		 mov	 DWORD PTR [esi], eax

; 599  : 		}

  0001b	8b c6		 mov	 eax, esi
  0001d	5e		 pop	 esi
  0001e	c2 04 00	 ret	 4
??0?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAE@ABV?$allocator@UDS_TIME@@@1@@Z ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Myval@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAUDS_TIME@@PAU?$_List_node@UDS_TIME@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAUDS_TIME@@PAU?$_List_node@UDS_TIME@@PAX@2@@Z PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Myval, COMDAT

; 590  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAUDS_TIME@@PAU?$_List_node@UDS_TIME@@PAX@2@@Z ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Myval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Prevnode, COMDAT

; 585  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z PROC ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Nextnode, COMDAT

; 580  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 582  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@SAAAPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@@Z ENDP ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z ; std::allocator<std::_List_node<DS_TIME,void *> >::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z ; std::allocator<std::_List_node<DS_TIME,void *> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<DS_TIME,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<DS_TIME,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 04	 shl	 eax, 4

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<DS_TIME,void *> >::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	81 f9 ff ff ff
	0f		 cmp	 ecx, 268435455		; 0fffffffH
  0000f	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00011	c1 e1 04	 shl	 ecx, 4

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 19		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001c	a8 1f		 test	 al, 31			; 0000001fH
  0001e	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00020	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00023	3b c8		 cmp	 ecx, eax
  00025	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00027	2b c1		 sub	 eax, ecx
  00029	83 f8 04	 cmp	 eax, 4
  0002c	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00031	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c1		 mov	 eax, ecx
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00042	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00051	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00056	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005b	cc		 int	 3
?deallocate@?$allocator@U?$_List_node@UDS_TIME@@PAX@std@@@std@@QAEXPAU?$_List_node@UDS_TIME@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<DS_TIME,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UDS_TIME@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UDS_TIME@@@std@@QAE@XZ PROC		; std::allocator<DS_TIME>::allocator<DS_TIME>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UDS_TIME@@@std@@QAE@XZ ENDP		; std::allocator<DS_TIME>::allocator<DS_TIME>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?CheckInvalidUser@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?CheckInvalidUser@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::CheckInvalidUser, COMDAT
; _this$ = ecx

; 1662 : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1663 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00004	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CheckInval:

; 1664 : 	{
; 1665 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	03 d6		 add	 edx, esi
  00018	83 7a 04 03	 cmp	 DWORD PTR [edx+4], 3
  0001c	75 42		 jne	 SHORT $LN2@CheckInval

; 1666 : 		{
; 1667 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  0001e	8a 8a 23 01 00
	00		 mov	 cl, BYTE PTR [edx+291]
  00024	80 f9 09	 cmp	 cl, 9
  00027	74 0c		 je	 SHORT $LN15@CheckInval
  00029	33 c0		 xor	 eax, eax
  0002b	80 f9 20	 cmp	 cl, 32			; 00000020H
  0002e	0f 94 c0	 sete	 al
  00031	85 c0		 test	 eax, eax
  00033	74 2b		 je	 SHORT $LN2@CheckInval
$LN15@CheckInval:

; 1668 : 			{
; 1669 : 				if ( this->m_eState == DevilSquare_CLOSE )

  00035	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00039	75 25		 jne	 SHORT $LN2@CheckInval

; 1670 : 				{
; 1671 : 					LogAddC(2, "[DevilSquare] [%s][%s] Found user in DevilSquare [State:Close]",

  0003b	8d 42 5d	 lea	 eax, DWORD PTR [edx+93]
  0003e	50		 push	 eax
  0003f	8d 42 52	 lea	 eax, DWORD PTR [edx+82]
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@NODHEOAH@?$FLDevilSquare?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Found?5use@
  00048	6a 02		 push	 2
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 1672 : 						gObj[n].AccountID, gObj[n].Name);
; 1673 : 					gObjUserKill(gObj[n].m_Index);

  00050	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00055	ff 34 06	 push	 DWORD PTR [esi+eax]
  00058	e8 00 00 00 00	 call	 ?gObjUserKill@@YAXH@Z	; gObjUserKill
  0005d	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@CheckInval:

; 1663 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00060	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00066	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0006c	7c a2		 jl	 SHORT $LL4@CheckInval

; 1674 : 				}
; 1675 : 			}
; 1676 : 		}
; 1677 : 	}
; 1678 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	c3		 ret	 0
?CheckInvalidUser@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::CheckInvalidUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?gObjScoreClear@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?gObjScoreClear@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::gObjScoreClear, COMDAT
; _this$ = ecx

; 1642 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00000	b8 00 dd 49 06	 mov	 eax, 105504000		; 0649dd00H
  00005	53		 push	 ebx
  00006	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL12@gObjScoreC:

; 1643 : 	{
; 1644 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00016	83 7c 02 04 03	 cmp	 DWORD PTR [edx+eax+4], 3
  0001b	75 45		 jne	 SHORT $LN15@gObjScoreC

; 1645 : 		{
; 1646 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  0001d	8a 9c 02 23 01
	00 00		 mov	 bl, BYTE PTR [edx+eax+291]
  00024	80 fb 09	 cmp	 bl, 9
  00027	74 0c		 je	 SHORT $LN22@gObjScoreC
  00029	33 c9		 xor	 ecx, ecx
  0002b	80 fb 20	 cmp	 bl, 32			; 00000020H
  0002e	0f 94 c1	 sete	 cl
  00031	85 c9		 test	 ecx, ecx
  00033	74 2d		 je	 SHORT $LN15@gObjScoreC
$LN22@gObjScoreC:

; 1647 : 			{
; 1648 : 				gObj[n].m_nEventScore = 0;

  00035	c7 84 02 28 12
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+eax+4648], 0

; 1649 : 				gObj[n].m_nEventMoney = 0;

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00046	c7 84 08 30 12
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+ecx+4656], 0

; 1650 : 				gObj[n].m_nEventExp = 0;

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00057	c7 84 08 2c 12
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+ecx+4652], 0
$LN15@gObjScoreC:

; 1642 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00062	05 40 27 00 00	 add	 eax, 10048		; 00002740H
  00067	3d 00 2f e3 06	 cmp	 eax, 115552000		; 06e32f00H
  0006c	7c a2		 jl	 SHORT $LL12@gObjScoreC
  0006e	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}
; 1653 : 	}
; 1654 : }

  0006f	c3		 ret	 0
?gObjScoreClear@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::gObjScoreClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SendLiveCall@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$ = -4						; size = 3
?SendLiveCall@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SendLiveCall, COMDAT
; _this$ = ecx

; 1627 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1628 : 	PMSG_ANS_EVENTLIVE pMsg;
; 1629 : 	
; 1630 : 	pMsg.h.c = 0xC1;
; 1631 : 	pMsg.h.headcode = 0x03;
; 1632 : 	pMsg.h.size = sizeof(pMsg);
; 1633 : 
; 1634 : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00007	66 c7 45 fc c1
	03		 mov	 WORD PTR _pMsg$[ebp], 961 ; 000003c1H
  0000d	6a 03		 push	 3
  0000f	50		 push	 eax
  00010	c6 45 fe 03	 mov	 BYTE PTR _pMsg$[ebp+2], 3
  00014	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank
  00019	83 c4 08	 add	 esp, 8

; 1635 : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?SendLiveCall@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SendLiveCall
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?CheckSync@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pTime$ = -36						; size = 8
_ltime$ = -36						; size = 8
_today$1$ = -28						; size = 4
_this$1$ = -20						; size = 4
_pFirstTime$2$ = -16					; size = 4
_pFirstTime$1$ = -12					; size = 4
_FIRST_TIME$1$ = -8					; size = 4
_CHECK_COUNT$1$ = -4					; size = 4
_pTime$2$ = -4						; size = 4
?CheckSync@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::CheckSync, COMDAT
; _this$ = ecx

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi

; 572  : 	std::list<DS_TIME>::iterator Itor_;
; 573  : 
; 574  : 	DS_TIME pFirstTime;
; 575  : 	DS_TIME pTime;
; 576  : 
; 577  : 	DWORD FIRST_TIME = 0;
; 578  : 	DWORD CHECK_TIME = 0;
; 579  : 	DWORD NOW_TIME = 0;
; 580  : 
; 581  : 	if( m_EventTime.size() == 0)

  0000c	83 7e 28 00	 cmp	 DWORD PTR [esi+40], 0
  00010	0f 84 1a 01 00
	00		 je	 $LN1@CheckSync
  00016	53		 push	 ebx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00017	8d 45 dc	 lea	 eax, DWORD PTR _ltime$[ebp]
  0001a	57		 push	 edi
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  00021	8d 45 dc	 lea	 eax, DWORD PTR _ltime$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 __localtime64
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 590  : 	today = localtime(&ltime);

  0002a	89 45 e4	 mov	 DWORD PTR _today$1$[ebp], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  0002d	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 592  : 	NOW_TIME = today->tm_hour * 60 + today->tm_min;

  00030	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00033	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00036	c1 e2 04	 shl	 edx, 4
  00039	2b 50 08	 sub	 edx, DWORD PTR [eax+8]
  0003c	8d 1c 91	 lea	 ebx, DWORD PTR [ecx+edx*4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0003f	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]

; 43   : 		: _Ptr(_Pnode)

  00042	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 594  : 	pFirstTime = *m_EventTime.begin();

  00044	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00047	89 55 f4	 mov	 DWORD PTR _pFirstTime$1$[ebp], edx
  0004a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0004d	89 55 f0	 mov	 DWORD PTR _pFirstTime$2$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00050	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 596  : 	for( Itor_ = m_EventTime.begin() ; Itor_ != m_EventTime.end(); ++Itor_ )

  00052	0f 84 90 00 00
	00		 je	 $LN279@CheckSync
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@CheckSync:

; 597  : 	{
; 598  : 		pTime = *Itor_;

  00060	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]

; 599  : 
; 600  : 		FIRST_TIME = pFirstTime.iHour * 60 + pFirstTime.iMinute;

  00063	8b 75 f0	 mov	 esi, DWORD PTR _pFirstTime$2$[ebp]
  00066	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  00069	89 55 fc	 mov	 DWORD PTR _pTime$2$[ebp], edx
  0006c	8b 55 f4	 mov	 edx, DWORD PTR _pFirstTime$1$[ebp]
  0006f	c1 e2 04	 shl	 edx, 4
  00072	2b 55 f4	 sub	 edx, DWORD PTR _pFirstTime$1$[ebp]
  00075	8d 14 96	 lea	 edx, DWORD PTR [esi+edx*4]

; 601  : 		CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;

  00078	8b 75 fc	 mov	 esi, DWORD PTR _pTime$2$[ebp]
  0007b	89 55 f8	 mov	 DWORD PTR _FIRST_TIME$1$[ebp], edx
  0007e	8b d7		 mov	 edx, edi
  00080	c1 e2 04	 shl	 edx, 4
  00083	2b d7		 sub	 edx, edi
  00085	8d 14 96	 lea	 edx, DWORD PTR [esi+edx*4]

; 602  : 
; 603  : 		if( FIRST_TIME == CHECK_TIME )

  00088	39 55 f8	 cmp	 DWORD PTR _FIRST_TIME$1$[ebp], edx
  0008b	75 09		 jne	 SHORT $LN8@CheckSync

; 604  : 		{
; 605  : 			if( NOW_TIME < CHECK_TIME )

  0008d	3b da		 cmp	 ebx, edx
  0008f	73 19		 jae	 SHORT $LN2@CheckSync

; 606  : 			{
; 607  : 				pTime = *Itor_;

  00091	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00094	eb 1d		 jmp	 SHORT $LN278@CheckSync
$LN8@CheckSync:

; 608  : 				break;
; 609  : 			}
; 610  : 			continue;
; 611  : 		}
; 612  : 
; 613  : 		if( NOW_TIME >= FIRST_TIME &&

  00096	3b 5d f8	 cmp	 ebx, DWORD PTR _FIRST_TIME$1$[ebp]
  00099	72 04		 jb	 SHORT $LN10@CheckSync
  0009b	3b da		 cmp	 ebx, edx
  0009d	72 11		 jb	 SHORT $LN281@CheckSync
$LN10@CheckSync:

; 614  : 			NOW_TIME < CHECK_TIME )
; 615  : 		{
; 616  : 			break;
; 617  : 		}
; 618  : 
; 619  : 		pFirstTime = *Itor_;

  0009f	8b d7		 mov	 edx, edi
  000a1	89 55 f4	 mov	 DWORD PTR _pFirstTime$1$[ebp], edx
  000a4	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000a7	89 55 f0	 mov	 DWORD PTR _pFirstTime$2$[ebp], edx
$LN2@CheckSync:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  000aa	8b 00		 mov	 eax, DWORD PTR [eax]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000ac	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 596  : 	for( Itor_ = m_EventTime.begin() ; Itor_ != m_EventTime.end(); ++Itor_ )

  000ae	75 b0		 jne	 SHORT $LL4@CheckSync
$LN281@CheckSync:
  000b0	8b 55 fc	 mov	 edx, DWORD PTR _pTime$2$[ebp]
$LN278@CheckSync:

; 620  : 	}
; 621  : 
; 622  : 	int CHECK_COUNT = 2;

  000b3	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _CHECK_COUNT$1$[ebp], 2
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL5@CheckSync:

; 623  : 
; 624  : 	while( CHECK_COUNT-- )

  000c0	ff 4d fc	 dec	 DWORD PTR _CHECK_COUNT$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000c3	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 626  : 		if( Itor_ == m_EventTime.end() )

  000c5	75 08		 jne	 SHORT $LN11@CheckSync

; 627  : 		{
; 628  : 			Itor_ = m_EventTime.begin();

  000c7	8b 01		 mov	 eax, DWORD PTR [ecx]

; 629  : 			pTime = *Itor_;

  000c9	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  000cc	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
$LN11@CheckSync:

; 630  : 		}
; 631  : 
; 632  : 		CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;
; 633  : 
; 634  : 		if( today->tm_hour <= pTime.iHour )

  000cf	8b 75 e4	 mov	 esi, DWORD PTR _today$1$[ebp]
  000d2	8b cf		 mov	 ecx, edi
  000d4	c1 e1 04	 shl	 ecx, 4
  000d7	2b cf		 sub	 ecx, edi
  000d9	39 7e 08	 cmp	 DWORD PTR [esi+8], edi
  000dc	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  000df	8d 0c 8a	 lea	 ecx, DWORD PTR [edx+ecx*4]
  000e2	7f 0c		 jg	 SHORT $LN12@CheckSync

; 635  : 		{
; 636  : 			this->m_iRemainTime = CHECK_TIME - NOW_TIME;

  000e4	2b cb		 sub	 ecx, ebx

; 637  : 		}
; 638  : 		else

  000e6	eb 10		 jmp	 SHORT $LN282@CheckSync
$LN279@CheckSync:

; 606  : 			{
; 607  : 				pTime = *Itor_;

  000e8	8b 55 e0	 mov	 edx, DWORD PTR _pTime$[ebp+4]
  000eb	8b 7d dc	 mov	 edi, DWORD PTR _pTime$[ebp]
  000ee	eb c3		 jmp	 SHORT $LN278@CheckSync
$LN12@CheckSync:

; 639  : 		{
; 640  : 			this->m_iRemainTime = 1440 - NOW_TIME + CHECK_TIME;

  000f0	2b cb		 sub	 ecx, ebx
  000f2	81 c1 a0 05 00
	00		 add	 ecx, 1440		; 000005a0H
$LN282@CheckSync:
  000f8	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx

; 641  : 		}
; 642  : 
; 643  : 		if( this->m_iRemainTime <= m_iOpenTime )

  000fb	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000fe	39 4e 0c	 cmp	 DWORD PTR [esi+12], ecx
  00101	7f 17		 jg	 SHORT $LN14@CheckSync
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00103	8b 00		 mov	 eax, DWORD PTR [eax]

; 43   : 		: _Ptr(_Pnode)

  00105	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00108	3b c1		 cmp	 eax, ecx
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 646  : 			if( Itor_ != m_EventTime.end() )

  0010a	74 06		 je	 SHORT $LN16@CheckSync

; 647  : 			{
; 648  : 				pTime = *Itor_;

  0010c	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  0010f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
$LN16@CheckSync:

; 623  : 
; 624  : 	while( CHECK_COUNT-- )

  00112	83 7d fc 00	 cmp	 DWORD PTR _CHECK_COUNT$1$[ebp], 0
  00116	75 a8		 jne	 SHORT $LL5@CheckSync

; 608  : 				break;
; 609  : 			}
; 610  : 			continue;
; 611  : 		}
; 612  : 
; 613  : 		if( NOW_TIME >= FIRST_TIME &&

  00118	eb 03		 jmp	 SHORT $LN273@CheckSync
$LN14@CheckSync:

; 649  : 			}
; 650  : 		}
; 651  : 		else
; 652  : 		{
; 653  : 			m_iRemainTime -= m_iOpenTime;

  0011a	29 4e 0c	 sub	 DWORD PTR [esi+12], ecx
$LN273@CheckSync:

; 654  : 			break;
; 655  : 		}
; 656  : 	}
; 657  : 
; 658  : 
; 659  : 	LogAddTD("[DevilSquare] Sync Open Time. [%d]min remain", this->m_iRemainTime);

  0011d	ff 76 0c	 push	 DWORD PTR [esi+12]
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@MKAKKBKJ@?$FLDevilSquare?$FN?5Sync?5Open?5Time?4?5?$FL?$CF@
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0012b	83 c4 08	 add	 esp, 8
  0012e	5f		 pop	 edi
  0012f	5b		 pop	 ebx
$LN1@CheckSync:
  00130	5e		 pop	 esi

; 660  : }

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c3		 ret	 0
?CheckSync@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::CheckSync
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?ItemClear@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?ItemClear@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ItemClear, COMDAT
; _this$ = ecx

; 1576 : 	int CurTime = GetTickCount();

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00006	b8 64 fa 2e 00	 mov	 eax, OFFSET ?MapC@@3PAVMapClass@@A+3078756
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@ItemClear:

; 1577 : 
; 1578 : 	for ( int i=0;i<MAX_MAPITEM;i++)
; 1579 : 	{
; 1580 : 		MapC[MAP_INDEX_DEVILSQUARE].m_cItem[i].m_State = 8;

  00010	c7 00 08 00 00
	00		 mov	 DWORD PTR [eax], 8
  00016	05 74 04 00 00	 add	 eax, 1140		; 00000474H
  0001b	3d 54 32 34 00	 cmp	 eax, OFFSET ?MapC@@3PAVMapClass@@A+3420756
  00020	7c ee		 jl	 SHORT $LL4@ItemClear

; 1581 : 	}
; 1582 : }

  00022	c3		 ret	 0
?ItemClear@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ItemClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SendEventStartMsg@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pToEventer$ = -548					; size = 272
_pWithOutEvneter$ = -276				; size = 272
__$ArrayPad$ = -4					; size = 4
?SendEventStartMsg@CDevilSquare@@AAEXXZ PROC		; CDevilSquare::SendEventStartMsg, COMDAT
; _this$ = ecx

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 02 00
	00		 sub	 esp, 548		; 00000224H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 1180 : 	PMSG_NOTICE pToEventer;
; 1181 : 	PMSG_NOTICE pWithOutEvneter;
; 1182 : 
; 1183 : 	TNotice::MakeNoticeMsg(&pToEventer, 0, lMsg.Get(MSGGET(2, 195)));

  00015	68 c3 02 00 00	 push	 707			; 000002c3H
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0001f	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00024	50		 push	 eax
  00025	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _pToEventer$[ebp]
  0002b	6a 00		 push	 0
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1184 : 	TNotice::MakeNoticeMsg(&pWithOutEvneter, 0, lMsg.Get(MSGGET(2, 196)));

  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0003b	68 c4 02 00 00	 push	 708			; 000002c4H
  00040	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00045	50		 push	 eax
  00046	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pWithOutEvneter$[ebp]
  0004c	6a 00		 push	 0
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1185 : 
; 1186 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00057	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  0005c	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL4@SendEventS:

; 1187 : 	{
; 1188 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00066	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0006b	75 40		 jne	 SHORT $LN2@SendEventS

; 1189 : 		{
; 1190 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  0006d	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  00074	80 f9 09	 cmp	 cl, 9
  00077	74 1c		 je	 SHORT $LN15@SendEventS
  00079	33 c0		 xor	 eax, eax
  0007b	80 f9 20	 cmp	 cl, 32			; 00000020H
  0007e	0f 94 c0	 sete	 al
  00081	85 c0		 test	 eax, eax
  00083	75 10		 jne	 SHORT $LN15@SendEventS

; 1193 : 			}
; 1194 : 			else
; 1195 : 			{
; 1196 : 				DataSend(n, (BYTE *)&pWithOutEvneter, pWithOutEvneter.h.size);

  00085	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pWithOutEvneter$[ebp+1]
  0008c	50		 push	 eax
  0008d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pWithOutEvneter$[ebp]
  00093	eb 0e		 jmp	 SHORT $LN16@SendEventS
$LN15@SendEventS:

; 1191 : 			{
; 1192 : 				DataSend(n, (BYTE *)&pToEventer, pToEventer.h.size);

  00095	0f b6 85 dd fd
	ff ff		 movzx	 eax, BYTE PTR _pToEventer$[ebp+1]
  0009c	50		 push	 eax
  0009d	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR _pToEventer$[ebp]
$LN16@SendEventS:
  000a3	50		 push	 eax
  000a4	57		 push	 edi
  000a5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000aa	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@SendEventS:

; 1185 : 
; 1186 : 	for ( int n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  000ad	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000b3	47		 inc	 edi
  000b4	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  000ba	7c a5		 jl	 SHORT $LL4@SendEventS

; 1197 : 			}
; 1198 : 		}
; 1199 : 	}
; 1200 : 
; 1201 : 	LogAddTD("[DevilSquare] Start Event");

  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JCOFCPLC@?$FLDevilSquare?$FN?5Start?5Event?$AA@
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1202 : }

  000c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ca	83 c4 04	 add	 esp, 4
  000cd	33 cd		 xor	 ecx, ebp
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
?SendEventStartMsg@CDevilSquare@@AAEXXZ ENDP		; CDevilSquare::SendEventStartMsg
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?ProcPlaying@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$1 = -280						; size = 4
_pNotice$2 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcPlaying@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcPlaying, COMDAT
; _this$ = ecx

; 977  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	57		 push	 edi

; 978  : 	if ( this->m_iremainTimeSec != -1 )

  00018	83 7e 10 ff	 cmp	 DWORD PTR [esi+16], -1
  0001c	0f 84 d5 00 00
	00		 je	 $LN8@ProcPlayin

; 979  : 	{
; 980  : 
; 981  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  00022	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002b	8b c8		 mov	 ecx, eax
  0002d	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00032	2b cf		 sub	 ecx, edi
  00034	f7 e1		 mul	 ecx
  00036	c1 ea 06	 shr	 edx, 6

; 982  : 
; 983  : 		if ( lc2 != 0 )

  00039	85 d2		 test	 edx, edx
  0003b	0f 84 9a 01 00
	00		 je	 $LN18@ProcPlayin

; 984  : 		{
; 985  : 			this->m_iremainTimeSec -= lc2;

  00041	29 56 10	 sub	 DWORD PTR [esi+16], edx

; 986  : 			this->m_iTime += lc2 * 1000;

  00044	69 c2 e8 03 00
	00		 imul	 eax, edx, 1000
  0004a	03 c7		 add	 eax, edi

; 987  : 
; 988  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0004c	83 7e 10 1e	 cmp	 DWORD PTR [esi+16], 30	; 0000001eH
  00050	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00053	7f 7e		 jg	 SHORT $LN11@ProcPlayin
  00055	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00059	75 78		 jne	 SHORT $LN11@ProcPlayin

; 989  : 			{
; 990  : 				PMSG_SET_DEVILSQUARE pMsg;
; 991  : 
; 992  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  0005b	6a 04		 push	 4
  0005d	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  00063	68 92 00 00 00	 push	 146			; 00000092H
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 993  : 				pMsg.Type = DevilSquare_PLAYING;

  00071	c6 85 eb fe ff
	ff 02		 mov	 BYTE PTR _pMsg$1[ebp+3], 2

; 994  : 
; 995  : 				for(int i = 0; i < OBJMAX; i++)

  00078	33 db		 xor	 ebx, ebx
  0007a	33 ff		 xor	 edi, edi
  0007c	0f 1f 40 00	 npad	 4
$LL4@ProcPlayin:

; 996  : 				{
; 997  : 					if( gObj[i].Connected == PLAYER_PLAYING &&
; 998  : 						gObj[i].Type == OBJ_USER &&

  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00085	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  0008a	75 31		 jne	 SHORT $LN2@ProcPlayin
  0008c	80 7c 07 50 01	 cmp	 BYTE PTR [edi+eax+80], 1
  00091	75 2a		 jne	 SHORT $LN2@ProcPlayin
  00093	8a 8c 07 23 01
	00 00		 mov	 cl, BYTE PTR [edi+eax+291]
  0009a	80 f9 09	 cmp	 cl, 9
  0009d	74 0c		 je	 SHORT $LN30@ProcPlayin
  0009f	33 c0		 xor	 eax, eax
  000a1	80 f9 20	 cmp	 cl, 32			; 00000020H
  000a4	0f 94 c0	 sete	 al
  000a7	85 c0		 test	 eax, eax
  000a9	74 12		 je	 SHORT $LN2@ProcPlayin
$LN30@ProcPlayin:

; 999  : 						DS_MAP_RANGE(gObj[i].MapNumber) )
; 1000 : 					{
; 1001 : 						DataSend(i,(LPBYTE)&pMsg,sizeof(pMsg));

  000ab	6a 04		 push	 4
  000ad	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000b3	50		 push	 eax
  000b4	53		 push	 ebx
  000b5	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcPlayin:

; 994  : 
; 995  : 				for(int i = 0; i < OBJMAX; i++)

  000bd	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  000c3	43		 inc	 ebx
  000c4	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  000ca	7c b4		 jl	 SHORT $LL4@ProcPlayin

; 1002 : 					}
; 1003 : 				}
; 1004 : 
; 1005 : 				this->m_bSendTimeCount = TRUE;

  000cc	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
$LN11@ProcPlayin:

; 1006 : 			}
; 1007 : 
; 1008 : 
; 1009 : 
; 1010 : 			if ( this->m_iremainTimeSec < 1 )

  000d3	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  000d7	0f 8d fe 00 00
	00		 jge	 $LN18@ProcPlayin

; 1011 : 			{
; 1012 : 				this->SetState(DevilSquare_CLOSE);

  000dd	6a 00		 push	 0
  000df	8b ce		 mov	 ecx, esi
  000e1	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi
  000e8	5b		 pop	 ebx

; 1047 : 				}
; 1048 : 			}
; 1049 : 		}
; 1050 : 	}
; 1051 : }

  000e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ec	33 cd		 xor	 ecx, ebp
  000ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
$LN8@ProcPlayin:

; 1013 : 			}
; 1014 : 		}
; 1015 : 	}
; 1016 : 	else
; 1017 : 	{
; 1018 : 		if ( this->m_iTime < GetTickCount() )

  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000fd	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00100	0f 83 d5 00 00
	00		 jae	 $LN18@ProcPlayin

; 1019 : 		{
; 1020 : 			this->m_iRemainTime--;

  00106	ff 4e 0c	 dec	 DWORD PTR [esi+12]
  00109	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]

; 1021 : 
; 1022 : 			if ( this->m_iRemainTime > 0 )

  0010c	85 c9		 test	 ecx, ecx
  0010e	0f 8e c7 00 00
	00		 jle	 $LN18@ProcPlayin

; 1023 : 			{
; 1024 : 				if ( (this->m_iRemainTime%5) == 0 )

  00114	8b c1		 mov	 eax, ecx
  00116	bf 05 00 00 00	 mov	 edi, 5
  0011b	99		 cdq
  0011c	f7 ff		 idiv	 edi
  0011e	85 d2		 test	 edx, edx
  00120	75 5b		 jne	 SHORT $LN16@ProcPlayin

; 1025 : 				{
; 1026 : 					PMSG_NOTICE pNotice;
; 1027 : 
; 1028 : 					TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 194)), this->m_iRemainTime);

  00122	51		 push	 ecx
  00123	68 c2 02 00 00	 push	 706			; 000002c2H
  00128	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0012d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00132	50		 push	 eax
  00133	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  00139	6a 00		 push	 0
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx

; 1029 : 					LogAddTD((char*)pNotice.Notice);

  00141	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp+13]
  00147	50		 push	 eax
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1030 : 					AllSendSameMapMsg((UCHAR*)&pNotice, pNotice.h.size, MAP_INDEX_DEVILSQUARE);

  0014e	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$2[ebp+1]
  00155	6a 09		 push	 9
  00157	50		 push	 eax
  00158	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?AllSendSameMapMsg@@YAXPAEHE@Z ; AllSendSameMapMsg

; 1031 : 					AllSendSameMapMsg((UCHAR*)&pNotice, pNotice.h.size, MAP_INDEX_DEVILSQUARE2);

  00164	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$2[ebp+1]
  0016b	6a 20		 push	 32			; 00000020H
  0016d	50		 push	 eax
  0016e	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  00174	50		 push	 eax
  00175	e8 00 00 00 00	 call	 ?AllSendSameMapMsg@@YAXPAEHE@Z ; AllSendSameMapMsg
  0017a	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN16@ProcPlayin:

; 1032 : 				}
; 1033 : 
; 1034 : 				for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  0017d	8d 7e 38	 lea	 edi, DWORD PTR [esi+56]
  00180	bb 07 00 00 00	 mov	 ebx, 7
$LL7@ProcPlayin:

; 1035 : 				{
; 1036 : 					this->m_DevilSquareGround[i].RegenBossMonster(this->m_iPlaytime - this->m_iRemainTime);

  00185	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00188	8b cf		 mov	 ecx, edi
  0018a	2b 46 0c	 sub	 eax, DWORD PTR [esi+12]
  0018d	50		 push	 eax
  0018e	e8 00 00 00 00	 call	 ?RegenBossMonster@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::RegenBossMonster
  00193	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  00199	83 eb 01	 sub	 ebx, 1
  0019c	75 e7		 jne	 SHORT $LL7@ProcPlayin

; 1037 : 				}
; 1038 : 
; 1039 : 				if ( this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1 )

  0019e	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  001a2	75 28		 jne	 SHORT $LN17@ProcPlayin
  001a4	83 7e 10 ff	 cmp	 DWORD PTR [esi+16], -1
  001a8	75 22		 jne	 SHORT $LN17@ProcPlayin

; 1040 : 				{
; 1041 : 					this->m_iremainTimeSec = 60;
; 1042 : 					this->m_iTime = GetTickCount();

  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetTickCount@0
  001af	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH
  001b6	ff d0		 call	 eax
  001b8	5f		 pop	 edi

; 1043 : 				}
; 1044 : 				else
; 1045 : 				{
; 1046 : 					this->m_iTime = GetTickCount() + 60000;

  001b9	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001bc	5e		 pop	 esi
  001bd	5b		 pop	 ebx

; 1047 : 				}
; 1048 : 			}
; 1049 : 		}
; 1050 : 	}
; 1051 : }

  001be	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c1	33 cd		 xor	 ecx, ebp
  001c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c8	8b e5		 mov	 esp, ebp
  001ca	5d		 pop	 ebp
  001cb	c3		 ret	 0
$LN17@ProcPlayin:

; 1043 : 				}
; 1044 : 				else
; 1045 : 				{
; 1046 : 					this->m_iTime = GetTickCount() + 60000;

  001cc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetTickCount@0
  001d1	ff d0		 call	 eax
  001d3	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  001d8	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN18@ProcPlayin:

; 1047 : 				}
; 1048 : 			}
; 1049 : 		}
; 1050 : 	}
; 1051 : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	33 cd		 xor	 ecx, ebp
  001e2	5b		 pop	 ebx
  001e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c3		 ret	 0
?ProcPlaying@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcPlaying
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?ProcOpen@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$1 = -280						; size = 4
_pNotice$2 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcOpen@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcOpen, COMDAT
; _this$ = ecx

; 882  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	57		 push	 edi

; 883  : 	if ( this->m_iremainTimeSec != -1 )

  00018	83 7e 10 ff	 cmp	 DWORD PTR [esi+16], -1
  0001c	0f 84 0b 01 00
	00		 je	 $LN8@ProcOpen

; 884  : 	{
; 885  : 
; 886  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  00022	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002b	8b c8		 mov	 ecx, eax
  0002d	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00032	2b cf		 sub	 ecx, edi
  00034	f7 e1		 mul	 ecx
  00036	c1 ea 06	 shr	 edx, 6

; 887  : 
; 888  : 		if ( lc2 != 0 )

  00039	85 d2		 test	 edx, edx
  0003b	0f 84 f8 01 00
	00		 je	 $LN22@ProcOpen

; 889  : 		{
; 890  : 			this->m_iremainTimeSec -= lc2;

  00041	29 56 10	 sub	 DWORD PTR [esi+16], edx

; 891  : 			this->m_iTime += lc2 * 1000;

  00044	69 c2 e8 03 00
	00		 imul	 eax, edx, 1000
  0004a	03 c7		 add	 eax, edi

; 892  : 
; 893  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0004c	83 7e 10 1e	 cmp	 DWORD PTR [esi+16], 30	; 0000001eH
  00050	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00053	0f 8f a9 00 00
	00		 jg	 $LN11@ProcOpen
  00059	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005d	0f 85 9f 00 00
	00		 jne	 $LN11@ProcOpen

; 894  : 			{
; 895  : 				PMSG_SET_DEVILSQUARE pMsg;
; 896  : 
; 897  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00063	6a 04		 push	 4
  00065	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0006b	68 92 00 00 00	 push	 146			; 00000092H
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 898  : 				pMsg.Type = DevilSquare_OPEN;

  00079	c6 85 eb fe ff
	ff 01		 mov	 BYTE PTR _pMsg$1[ebp+3], 1

; 899  : 
; 900  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00080	bb 04 29 00 00	 mov	 ebx, 10500		; 00002904H
  00085	bf 00 dd 49 06	 mov	 edi, 105504000		; 0649dd00H
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ProcOpen:

; 901  : 				{
; 902  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00095	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  0009a	75 50		 jne	 SHORT $LN2@ProcOpen
  0009c	80 7c 07 50 01	 cmp	 BYTE PTR [edi+eax+80], 1
  000a1	75 49		 jne	 SHORT $LN2@ProcOpen

; 903  : 					{
; 904  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000a3	8a 8c 07 23 01
	00 00		 mov	 cl, BYTE PTR [edi+eax+291]
  000aa	80 f9 34	 cmp	 cl, 52			; 00000034H
  000ad	74 3d		 je	 SHORT $LN2@ProcOpen
  000af	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  000b2	72 0b		 jb	 SHORT $LN48@ProcOpen
  000b4	b0 11		 mov	 al, 17			; 00000011H
  000b6	3a c1		 cmp	 al, cl
  000b8	1b c0		 sbb	 eax, eax
  000ba	83 c0 01	 add	 eax, 1
  000bd	75 2d		 jne	 SHORT $LN2@ProcOpen
$LN48@ProcOpen:

; 905  : 						{
; 906  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000bf	80 f9 35	 cmp	 cl, 53			; 00000035H
  000c2	74 28		 je	 SHORT $LN2@ProcOpen
  000c4	80 f9 12	 cmp	 cl, 18			; 00000012H
  000c7	72 0b		 jb	 SHORT $LN49@ProcOpen
  000c9	b0 17		 mov	 al, 23			; 00000017H
  000cb	3a c1		 cmp	 al, cl
  000cd	1b c0		 sbb	 eax, eax
  000cf	83 c0 01	 add	 eax, 1
  000d2	75 18		 jne	 SHORT $LN2@ProcOpen
$LN49@ProcOpen:

; 907  : 							{
; 908  : 								DataSend(i, (BYTE *)&pMsg, pMsg.h.size);

  000d4	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  000db	50		 push	 eax
  000dc	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000e2	50		 push	 eax
  000e3	53		 push	 ebx
  000e4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcOpen:

; 899  : 
; 900  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000ec	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  000f2	43		 inc	 ebx
  000f3	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  000f9	7c 95		 jl	 SHORT $LL4@ProcOpen

; 909  : 							}
; 910  : 						}
; 911  : 					}
; 912  : 				}
; 913  : 
; 914  : 				this->m_bSendTimeCount = TRUE;

  000fb	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
$LN11@ProcOpen:

; 915  : 			}
; 916  : 
; 917  : 			if (this->m_iremainTimeSec < 1 )

  00102	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  00106	0f 8d 2d 01 00
	00		 jge	 $LN22@ProcOpen

; 918  : 			{
; 919  : 				this->SendEventStartMsg();

  0010c	8b ce		 mov	 ecx, esi
  0010e	e8 00 00 00 00	 call	 ?SendEventStartMsg@CDevilSquare@@AAEXXZ ; CDevilSquare::SendEventStartMsg

; 920  : 				this->SetState(DevilSquare_PLAYING);

  00113	6a 02		 push	 2
  00115	8b ce		 mov	 ecx, esi
  00117	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
  0011c	5f		 pop	 edi
  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx

; 965  : 			}
; 966  : 		}
; 967  : 	}
; 968  : }

  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
$LN8@ProcOpen:

; 921  : 			}
; 922  : 		
; 923  : 		}
; 924  : 	}
; 925  : 	else
; 926  : 	{
; 927  : 		if ( this->m_iTime < GetTickCount() )

  0012d	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  00133	ff d3		 call	 ebx
  00135	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  00138	0f 83 fb 00 00
	00		 jae	 $LN22@ProcOpen

; 928  : 		{
; 929  : 			this->ClearMonstr();

  0013e	8b ce		 mov	 ecx, esi
  00140	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 930  : 			this->m_iRemainTime--;

  00145	ff 4e 0c	 dec	 DWORD PTR [esi+12]
  00148	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 931  : 
; 932  : 			if ( this->m_iRemainTime > 0 )

  0014b	85 c0		 test	 eax, eax
  0014d	0f 8e b3 00 00
	00		 jle	 $LN17@ProcOpen

; 933  : 			{
; 934  : 				PMSG_NOTICE pNotice;
; 935  : 
; 936  : 				TNotice::MakeNoticeMsgEx(&pNotice, 0, lMsg.Get(MSGGET(2, 193)), this->m_iRemainTime);

  00153	50		 push	 eax
  00154	68 c1 02 00 00	 push	 705			; 000002c1H
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0015e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00163	50		 push	 eax
  00164	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  0016a	6a 00		 push	 0
  0016c	50		 push	 eax
  0016d	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  00172	83 c4 10	 add	 esp, 16			; 00000010H

; 937  : 
; 938  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00175	bb 04 29 00 00	 mov	 ebx, 10500		; 00002904H
  0017a	bf 00 dd 49 06	 mov	 edi, 105504000		; 0649dd00H
  0017f	90		 npad	 1
$LL7@ProcOpen:

; 939  : 				{
; 940  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00180	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00185	83 7c 07 04 03	 cmp	 DWORD PTR [edi+eax+4], 3
  0018a	75 50		 jne	 SHORT $LN5@ProcOpen
  0018c	80 7c 07 50 01	 cmp	 BYTE PTR [edi+eax+80], 1
  00191	75 49		 jne	 SHORT $LN5@ProcOpen

; 941  : 					{
; 942  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  00193	8a 8c 07 23 01
	00 00		 mov	 cl, BYTE PTR [edi+eax+291]
  0019a	80 f9 34	 cmp	 cl, 52			; 00000034H
  0019d	74 3d		 je	 SHORT $LN5@ProcOpen
  0019f	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  001a2	72 0b		 jb	 SHORT $LN50@ProcOpen
  001a4	b0 11		 mov	 al, 17			; 00000011H
  001a6	3a c1		 cmp	 al, cl
  001a8	1b c0		 sbb	 eax, eax
  001aa	83 c0 01	 add	 eax, 1
  001ad	75 2d		 jne	 SHORT $LN5@ProcOpen
$LN50@ProcOpen:

; 943  : 						{
; 944  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  001af	80 f9 35	 cmp	 cl, 53			; 00000035H
  001b2	74 28		 je	 SHORT $LN5@ProcOpen
  001b4	80 f9 12	 cmp	 cl, 18			; 00000012H
  001b7	72 0b		 jb	 SHORT $LN51@ProcOpen
  001b9	b0 17		 mov	 al, 23			; 00000017H
  001bb	3a c1		 cmp	 al, cl
  001bd	1b c0		 sbb	 eax, eax
  001bf	83 c0 01	 add	 eax, 1
  001c2	75 18		 jne	 SHORT $LN5@ProcOpen
$LN51@ProcOpen:

; 945  : 							{
; 946  : 								DataSend(i, (BYTE *)&pNotice, pNotice.h.size);

  001c4	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$2[ebp+1]
  001cb	50		 push	 eax
  001cc	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  001d2	50		 push	 eax
  001d3	53		 push	 ebx
  001d4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  001d9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@ProcOpen:

; 937  : 
; 938  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  001dc	81 c7 40 27 00
	00		 add	 edi, 10048		; 00002740H
  001e2	43		 inc	 ebx
  001e3	81 ff 00 2f e3
	06		 cmp	 edi, 115552000		; 06e32f00H
  001e9	7c 95		 jl	 SHORT $LL7@ProcOpen

; 947  : 							}
; 948  : 						}
; 949  : 					}
; 950  : 				}
; 951  : 
; 952  : 				LogAddTD((char*)pNotice.Notice);

  001eb	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp+13]
  001f1	50		 push	 eax
  001f2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 953  : 
; 954  : 				this->m_iTime = GetTickCount();

  001f8	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  001fe	83 c4 04	 add	 esp, 4
  00201	ff d3		 call	 ebx
  00203	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN17@ProcOpen:

; 955  : 			}
; 956  : 
; 957  : 			if (this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1)

  00206	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  0020a	75 23		 jne	 SHORT $LN21@ProcOpen
  0020c	83 7e 10 ff	 cmp	 DWORD PTR [esi+16], -1
  00210	75 1d		 jne	 SHORT $LN21@ProcOpen

; 958  : 			{
; 959  : 				this->m_iremainTimeSec = 60;

  00212	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 960  : 				this->m_iTime = GetTickCount();

  00219	ff d3		 call	 ebx
  0021b	5f		 pop	 edi

; 961  : 			}
; 962  : 			else
; 963  : 			{
; 964  : 				this->m_iTime = GetTickCount() + 60000;

  0021c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx

; 965  : 			}
; 966  : 		}
; 967  : 	}
; 968  : }

  00221	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00224	33 cd		 xor	 ecx, ebp
  00226	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022b	8b e5		 mov	 esp, ebp
  0022d	5d		 pop	 ebp
  0022e	c3		 ret	 0
$LN21@ProcOpen:

; 961  : 			}
; 962  : 			else
; 963  : 			{
; 964  : 				this->m_iTime = GetTickCount() + 60000;

  0022f	ff d3		 call	 ebx
  00231	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00236	89 46 08	 mov	 DWORD PTR [esi+8], eax
$LN22@ProcOpen:

; 965  : 			}
; 966  : 		}
; 967  : 	}
; 968  : }

  00239	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023c	5f		 pop	 edi
  0023d	5e		 pop	 esi
  0023e	33 cd		 xor	 ecx, ebp
  00240	5b		 pop	 ebx
  00241	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00246	8b e5		 mov	 esp, ebp
  00248	5d		 pop	 ebp
  00249	c3		 ret	 0
?ProcOpen@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcOpen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?ProcClose@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
_pMsg$1 = -280						; size = 4
_pNotice$2 = -276					; size = 272
_pNotice$3 = -276					; size = 272
__$ArrayPad$ = -4					; size = 4
?ProcClose@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::ProcClose, COMDAT
; _this$ = ecx

; 754  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 755  : 	if ( this->m_iremainTimeSec != -1 )

  00018	83 7b 10 ff	 cmp	 DWORD PTR [ebx+16], -1
  0001c	0f 84 b3 01 00
	00		 je	 $LN14@ProcClose

; 756  : 	{
; 757  : 		int lc2 = (GetTickCount() - this->m_iTime)/1000;

  00022	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002b	8b c8		 mov	 ecx, eax
  0002d	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00032	2b ce		 sub	 ecx, esi
  00034	f7 e1		 mul	 ecx
  00036	c1 ea 06	 shr	 edx, 6

; 758  : 
; 759  : 		if ( lc2 != 0 )

  00039	85 d2		 test	 edx, edx
  0003b	0f 84 17 03 00
	00		 je	 $LN36@ProcClose

; 760  : 		{
; 761  : 			this->m_iremainTimeSec -= lc2;

  00041	29 53 10	 sub	 DWORD PTR [ebx+16], edx

; 762  : 			this->m_iTime += lc2 * 1000;

  00044	69 c2 e8 03 00
	00		 imul	 eax, edx, 1000
  0004a	03 c6		 add	 eax, esi

; 763  : 
; 764  : 			if ( this->m_iremainTimeSec <= 30 && this->m_bSendTimeCount == FALSE )

  0004c	83 7b 10 1e	 cmp	 DWORD PTR [ebx+16], 30	; 0000001eH
  00050	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00053	0f 8f a9 00 00
	00		 jg	 $LN17@ProcClose
  00059	83 7b 14 00	 cmp	 DWORD PTR [ebx+20], 0
  0005d	0f 85 9f 00 00
	00		 jne	 $LN17@ProcClose

; 765  : 			{
; 766  : 				PMSG_SET_DEVILSQUARE pMsg;
; 767  : 
; 768  : 				PHeadSetB((LPBYTE)&pMsg, 0x92, sizeof(pMsg));

  00063	6a 04		 push	 4
  00065	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  0006b	68 92 00 00 00	 push	 146			; 00000092H
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 769  : 				pMsg.Type = DevilSquare_CLOSE;

  00079	c6 85 eb fe ff
	ff 00		 mov	 BYTE PTR _pMsg$1[ebp+3], 0

; 770  : 
; 771  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  00080	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00085	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL4@ProcClose:

; 772  : 				{
; 773  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00090	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00095	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0009a	75 50		 jne	 SHORT $LN2@ProcClose
  0009c	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  000a1	75 49		 jne	 SHORT $LN2@ProcClose

; 774  : 					{
; 775  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000a3	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  000aa	80 f9 34	 cmp	 cl, 52			; 00000034H
  000ad	74 3d		 je	 SHORT $LN2@ProcClose
  000af	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  000b2	72 0b		 jb	 SHORT $LN80@ProcClose
  000b4	b0 11		 mov	 al, 17			; 00000011H
  000b6	3a c1		 cmp	 al, cl
  000b8	1b c0		 sbb	 eax, eax
  000ba	83 c0 01	 add	 eax, 1
  000bd	75 2d		 jne	 SHORT $LN2@ProcClose
$LN80@ProcClose:

; 776  : 						{
; 777  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  000bf	80 f9 35	 cmp	 cl, 53			; 00000035H
  000c2	74 28		 je	 SHORT $LN2@ProcClose
  000c4	80 f9 12	 cmp	 cl, 18			; 00000012H
  000c7	72 0b		 jb	 SHORT $LN81@ProcClose
  000c9	b0 17		 mov	 al, 23			; 00000017H
  000cb	3a c1		 cmp	 al, cl
  000cd	1b c0		 sbb	 eax, eax
  000cf	83 c0 01	 add	 eax, 1
  000d2	75 18		 jne	 SHORT $LN2@ProcClose
$LN81@ProcClose:

; 778  : 							{
; 779  : 								DataSend(i, (BYTE *)&pMsg, pMsg.h.size);

  000d4	0f b6 85 e9 fe
	ff ff		 movzx	 eax, BYTE PTR _pMsg$1[ebp+1]
  000db	50		 push	 eax
  000dc	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$1[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ProcClose:

; 770  : 
; 771  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  000ec	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  000f2	47		 inc	 edi
  000f3	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  000f9	7c 95		 jl	 SHORT $LL4@ProcClose

; 780  : 							}
; 781  : 						}
; 782  : 					}
; 783  : 				}
; 784  : 
; 785  : 
; 786  : 				this->m_bSendTimeCount = TRUE;

  000fb	c7 43 14 01 00
	00 00		 mov	 DWORD PTR [ebx+20], 1
$LN17@ProcClose:

; 787  : 			}		
; 788  : 
; 789  : 			if (this->m_iremainTimeSec < 1 )

  00102	83 7b 10 01	 cmp	 DWORD PTR [ebx+16], 1
  00106	0f 8d 4c 02 00
	00		 jge	 $LN36@ProcClose

; 790  : 			{
; 791  : 				PMSG_NOTICE pNotice;
; 792  : 
; 793  : 				TNotice::MakeNoticeMsg((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 191)));

  0010c	68 bf 02 00 00	 push	 703			; 000002bfH
  00111	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00116	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0011b	50		 push	 eax
  0011c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp]
  00122	6a 00		 push	 0
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ?MakeNoticeMsg@TNotice@@SAXPAXEPAD@Z ; TNotice::MakeNoticeMsg
  0012a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 794  : 
; 795  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0012d	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00132	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00137	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@ProcClose:

; 796  : 				{
; 797  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  00140	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00145	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0014a	75 50		 jne	 SHORT $LN5@ProcClose
  0014c	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  00151	75 49		 jne	 SHORT $LN5@ProcClose

; 798  : 					{
; 799  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  00153	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  0015a	80 f9 34	 cmp	 cl, 52			; 00000034H
  0015d	74 3d		 je	 SHORT $LN5@ProcClose
  0015f	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00162	72 0b		 jb	 SHORT $LN82@ProcClose
  00164	b0 11		 mov	 al, 17			; 00000011H
  00166	3a c1		 cmp	 al, cl
  00168	1b c0		 sbb	 eax, eax
  0016a	83 c0 01	 add	 eax, 1
  0016d	75 2d		 jne	 SHORT $LN5@ProcClose
$LN82@ProcClose:

; 800  : 						{
; 801  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  0016f	80 f9 35	 cmp	 cl, 53			; 00000035H
  00172	74 28		 je	 SHORT $LN5@ProcClose
  00174	80 f9 12	 cmp	 cl, 18			; 00000012H
  00177	72 0b		 jb	 SHORT $LN83@ProcClose
  00179	b0 17		 mov	 al, 23			; 00000017H
  0017b	3a c1		 cmp	 al, cl
  0017d	1b c0		 sbb	 eax, eax
  0017f	83 c0 01	 add	 eax, 1
  00182	75 18		 jne	 SHORT $LN5@ProcClose
$LN83@ProcClose:

; 802  : 							{
; 803  : 								DataSend(i, (BYTE *)&pNotice, pNotice.h.size);

  00184	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$3[ebp+1]
  0018b	50		 push	 eax
  0018c	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp]
  00192	50		 push	 eax
  00193	57		 push	 edi
  00194	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@ProcClose:

; 794  : 
; 795  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0019c	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  001a2	47		 inc	 edi
  001a3	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  001a9	7c 95		 jl	 SHORT $LL7@ProcClose

; 804  : 							}
; 805  : 						}
; 806  : 					}
; 807  : 				}
; 808  : 
; 809  : 				LogAddTD(pNotice.Notice);

  001ab	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$3[ebp+13]
  001b1	50		 push	 eax
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001b8	83 c4 04	 add	 esp, 4

; 810  : 				this->SetState(DevilSquare_OPEN);

  001bb	8b cb		 mov	 ecx, ebx
  001bd	6a 01		 push	 1
  001bf	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState
  001c4	5f		 pop	 edi
  001c5	5e		 pop	 esi
  001c6	5b		 pop	 ebx

; 874  : 		}
; 875  : 	}
; 876  : }

  001c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ca	33 cd		 xor	 ecx, ebp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
$LN14@ProcClose:

; 811  : 			}
; 812  : 		
; 813  : 		}
; 814  : 	}
; 815  : 	else if ( this->m_iTime < GetTickCount() )

  001d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  001db	39 43 08	 cmp	 DWORD PTR [ebx+8], eax
  001de	0f 83 74 01 00
	00		 jae	 $LN36@ProcClose

; 816  : 	{
; 817  : 		this->ClearMonstr();

  001e4	8b cb		 mov	 ecx, ebx
  001e6	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 818  : 		this->m_iRemainTime--;

  001eb	ff 4b 0c	 dec	 DWORD PTR [ebx+12]

; 819  : 
; 820  : 		if ( this->m_bFlag == 0 )

  001ee	83 7b 1c 00	 cmp	 DWORD PTR [ebx+28], 0
  001f2	75 53		 jne	 SHORT $LN26@ProcClose

; 821  : 		{
; 822  : 			for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  001f4	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  001f9	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  001fe	66 90		 npad	 2
$LL10@ProcClose:

; 823  : 			{
; 824  : 				if ( gObj[i].Connected == PLAYER_PLAYING )

  00200	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00205	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  0020a	75 23		 jne	 SHORT $LN8@ProcClose

; 825  : 				{
; 826  : 					if ( DS_MAP_RANGE(gObj[i].MapNumber) != FALSE )

  0020c	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  00213	80 f9 09	 cmp	 cl, 9
  00216	74 0c		 je	 SHORT $LN84@ProcClose
  00218	33 c0		 xor	 eax, eax
  0021a	80 f9 20	 cmp	 cl, 32			; 00000020H
  0021d	0f 94 c0	 sete	 al
  00220	85 c0		 test	 eax, eax
  00222	74 0b		 je	 SHORT $LN8@ProcClose
$LN84@ProcClose:

; 827  : 					{
; 828  : 						gObjMoveGate(i, 27);

  00224	6a 1b		 push	 27			; 0000001bH
  00226	57		 push	 edi
  00227	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  0022c	83 c4 08	 add	 esp, 8
$LN8@ProcClose:

; 821  : 		{
; 822  : 			for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0022f	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00235	47		 inc	 edi
  00236	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  0023c	7c c2		 jl	 SHORT $LL10@ProcClose

; 829  : 					}
; 830  : 				}
; 831  : 			}
; 832  : 
; 833  : 			this->ItemClear();

  0023e	8b cb		 mov	 ecx, ebx
  00240	e8 00 00 00 00	 call	 ?ItemClear@CDevilSquare@@AAEXXZ ; CDevilSquare::ItemClear

; 834  : 		}
; 835  : 		else

  00245	eb 07		 jmp	 SHORT $LN27@ProcClose
$LN26@ProcClose:

; 836  : 		{
; 837  : 			this->CheckInvalidUser();

  00247	8b cb		 mov	 ecx, ebx
  00249	e8 00 00 00 00	 call	 ?CheckInvalidUser@CDevilSquare@@AAEXXZ ; CDevilSquare::CheckInvalidUser
$LN27@ProcClose:

; 838  : 		}
; 839  : 
; 840  : 		if ( this->m_iRemainTime <= 15 )

  0024e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00251	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00254	0f 8f c1 00 00
	00		 jg	 $LN31@ProcClose

; 841  : 		{
; 842  : 			if ( (this->m_iRemainTime%5)== 0 )

  0025a	8b c1		 mov	 eax, ecx
  0025c	be 05 00 00 00	 mov	 esi, 5
  00261	99		 cdq
  00262	f7 fe		 idiv	 esi
  00264	85 d2		 test	 edx, edx
  00266	0f 85 af 00 00
	00		 jne	 $LN31@ProcClose

; 843  : 			{
; 844  : 				PMSG_NOTICE pNotice;
; 845  : 
; 846  : 				TNotice::MakeNoticeMsgEx((TNotice *)&pNotice, 0, lMsg.Get(MSGGET(2, 192)), this->m_iRemainTime);

  0026c	51		 push	 ecx
  0026d	68 c0 02 00 00	 push	 704			; 000002c0H
  00272	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00277	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0027c	50		 push	 eax
  0027d	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  00283	6a 00		 push	 0
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ?MakeNoticeMsgEx@TNotice@@SAXPAXEPADZZ ; TNotice::MakeNoticeMsgEx
  0028b	83 c4 10	 add	 esp, 16			; 00000010H

; 847  : 
; 848  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  0028e	bf 04 29 00 00	 mov	 edi, 10500		; 00002904H
  00293	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
  00298	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@ProcClose:

; 849  : 				{
; 850  : 					if ( gObj[i].Connected == PLAYER_PLAYING && gObj[i].Type == OBJ_USER)

  002a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  002a5	83 7c 06 04 03	 cmp	 DWORD PTR [esi+eax+4], 3
  002aa	75 50		 jne	 SHORT $LN11@ProcClose
  002ac	80 7c 06 50 01	 cmp	 BYTE PTR [esi+eax+80], 1
  002b1	75 49		 jne	 SHORT $LN11@ProcClose

; 851  : 					{
; 852  : 						if ( BC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  002b3	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  002ba	80 f9 34	 cmp	 cl, 52			; 00000034H
  002bd	74 3d		 je	 SHORT $LN11@ProcClose
  002bf	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  002c2	72 0b		 jb	 SHORT $LN85@ProcClose
  002c4	b0 11		 mov	 al, 17			; 00000011H
  002c6	3a c1		 cmp	 al, cl
  002c8	1b c0		 sbb	 eax, eax
  002ca	83 c0 01	 add	 eax, 1
  002cd	75 2d		 jne	 SHORT $LN11@ProcClose
$LN85@ProcClose:

; 853  : 						{
; 854  : 							if ( CC_MAP_RANGE(gObj[i].MapNumber) == FALSE )

  002cf	80 f9 35	 cmp	 cl, 53			; 00000035H
  002d2	74 28		 je	 SHORT $LN11@ProcClose
  002d4	80 f9 12	 cmp	 cl, 18			; 00000012H
  002d7	72 0b		 jb	 SHORT $LN86@ProcClose
  002d9	b0 17		 mov	 al, 23			; 00000017H
  002db	3a c1		 cmp	 al, cl
  002dd	1b c0		 sbb	 eax, eax
  002df	83 c0 01	 add	 eax, 1
  002e2	75 18		 jne	 SHORT $LN11@ProcClose
$LN86@ProcClose:

; 855  : 							{
; 856  : 								DataSend(i, (BYTE *)&pNotice, pNotice.h.size);

  002e4	0f b6 85 ed fe
	ff ff		 movzx	 eax, BYTE PTR _pNotice$2[ebp+1]
  002eb	50		 push	 eax
  002ec	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp]
  002f2	50		 push	 eax
  002f3	57		 push	 edi
  002f4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  002f9	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN11@ProcClose:

; 847  : 
; 848  : 				for ( int i=OBJ_STARTUSERINDEX;i<OBJMAX;i++)

  002fc	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00302	47		 inc	 edi
  00303	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00309	7c 95		 jl	 SHORT $LL13@ProcClose

; 857  : 							}
; 858  : 						}
; 859  : 					}
; 860  : 				}
; 861  : 
; 862  : 				LogAddTD((char*)pNotice.Notice);

  0030b	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _pNotice$2[ebp+13]
  00311	50		 push	 eax
  00312	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00318	83 c4 04	 add	 esp, 4
$LN31@ProcClose:

; 863  : 			}
; 864  : 		}
; 865  : 
; 866  : 		if ( this->m_iRemainTime == 1 && this->m_iremainTimeSec == -1 )

  0031b	83 7b 0c 01	 cmp	 DWORD PTR [ebx+12], 1
  0031f	75 28		 jne	 SHORT $LN35@ProcClose
  00321	83 7b 10 ff	 cmp	 DWORD PTR [ebx+16], -1
  00325	75 22		 jne	 SHORT $LN35@ProcClose

; 867  : 		{
; 868  : 			this->m_iremainTimeSec = 60;
; 869  : 			this->m_iTime = GetTickCount();

  00327	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetTickCount@0
  0032c	c7 43 10 3c 00
	00 00		 mov	 DWORD PTR [ebx+16], 60	; 0000003cH
  00333	ff d0		 call	 eax
  00335	5f		 pop	 edi
  00336	5e		 pop	 esi

; 870  : 		}
; 871  : 		else
; 872  : 		{
; 873  : 			this->m_iTime = GetTickCount() + 60000;

  00337	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0033a	5b		 pop	 ebx

; 874  : 		}
; 875  : 	}
; 876  : }

  0033b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033e	33 cd		 xor	 ecx, ebp
  00340	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00345	8b e5		 mov	 esp, ebp
  00347	5d		 pop	 ebp
  00348	c3		 ret	 0
$LN35@ProcClose:

; 870  : 		}
; 871  : 		else
; 872  : 		{
; 873  : 			this->m_iTime = GetTickCount() + 60000;

  00349	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__GetTickCount@0
  0034e	ff d0		 call	 eax
  00350	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H
  00355	89 43 08	 mov	 DWORD PTR [ebx+8], eax
$LN36@ProcClose:

; 874  : 		}
; 875  : 	}
; 876  : }

  00358	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0035b	5f		 pop	 edi
  0035c	5e		 pop	 esi
  0035d	33 cd		 xor	 ecx, ebp
  0035f	5b		 pop	 ebx
  00360	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00365	8b e5		 mov	 esp, ebp
  00367	5d		 pop	 ebp
  00368	c3		 ret	 0
?ProcClose@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::ProcClose
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SetPlaying@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?SetPlaying@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SetPlaying, COMDAT
; _this$ = ecx

; 436  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 437  : 	this->gObjScoreClear();

  00003	e8 00 00 00 00	 call	 ?gObjScoreClear@CDevilSquare@@AAEXXZ ; CDevilSquare::gObjScoreClear

; 438  : 	this->SetMonster();

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 ?SetMonster@CDevilSquare@@QAEXXZ ; CDevilSquare::SetMonster

; 439  : 
; 440  : 	this->m_iRemainTime = this->m_iPlaytime;

  0000f	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00012	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 441  : 
; 442  : 	if ( this->m_iPlaytime <= 1 )

  00015	83 f8 01	 cmp	 eax, 1
  00018	7f 19		 jg	 SHORT $LN2@SetPlaying

; 443  : 	{
; 444  : 		this->m_iTime = GetTickCount();

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 445  : 		this->m_iremainTimeSec = 60;

  00020	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 451  : 	}
; 452  : 	
; 453  : 	this->m_bSendTimeCount = FALSE;

  00027	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0002e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00031	5e		 pop	 esi

; 454  : }

  00032	c3		 ret	 0
$LN2@SetPlaying:

; 446  : 	}
; 447  : 	else
; 448  : 	{
; 449  : 		this->m_iTime = GetTickCount() + 60000;

  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00039	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H

; 450  : 		this->m_iremainTimeSec = -1;

  0003e	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1

; 451  : 	}
; 452  : 	
; 453  : 	this->m_bSendTimeCount = FALSE;

  00045	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 454  : }

  00050	c3		 ret	 0
?SetPlaying@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SetPlaying
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SetOpen@CDevilSquare@@AAEXXZ
_TEXT	SEGMENT
?SetOpen@CDevilSquare@@AAEXXZ PROC			; CDevilSquare::SetOpen, COMDAT
; _this$ = ecx

; 414  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 415  : 	this->m_iRemainTime = this->m_iOpenTime;

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 416  : 
; 417  : 	if ( this->m_iOpenTime <= 1 )

  00009	83 f8 01	 cmp	 eax, 1
  0000c	7f 19		 jg	 SHORT $LN2@SetOpen

; 418  : 	{
; 419  : 		this->m_iTime = GetTickCount();

  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 420  : 		this->m_iremainTimeSec = 60;

  00014	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 426  : 	}
; 427  : 
; 428  : 	this->m_bSendTimeCount = FALSE;

  0001b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00022	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00025	5e		 pop	 esi

; 429  : }

  00026	c3		 ret	 0
$LN2@SetOpen:

; 421  : 	}
; 422  : 	else
; 423  : 	{
; 424  : 		this->m_iTime = GetTickCount() + 60000;

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002d	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H

; 425  : 		this->m_iremainTimeSec = -1;

  00032	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1

; 426  : 	}
; 427  : 
; 428  : 	this->m_bSendTimeCount = FALSE;

  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00040	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00043	5e		 pop	 esi

; 429  : }

  00044	c3		 ret	 0
?SetOpen@CDevilSquare@@AAEXXZ ENDP			; CDevilSquare::SetOpen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?GetPlayUserCountRightNow@CDevilSquare@@QAEHH@Z
_TEXT	SEGMENT
_nDevilSquareIndex$ = 8					; size = 4
?GetPlayUserCountRightNow@CDevilSquare@@QAEHH@Z PROC	; CDevilSquare::GetPlayUserCountRightNow, COMDAT
; _this$ = ecx

; 1714 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 	if( DS_LEVEL_RANGE(nDevilSquareIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nDevilSquareIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 20		 js	 SHORT $LN2@GetPlayUse
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 14		 je	 SHORT $LN2@GetPlayUse

; 1716 : 	{
; 1717 : 		return this->m_DevilSquareGround[nDevilSquareIndex].GetPlayUserCountRightNow();

  00016	69 c2 1c 05 00
	00		 imul	 eax, edx, 1308
  0001c	83 c1 38	 add	 ecx, 56			; 00000038H
  0001f	03 c8		 add	 ecx, eax
  00021	e8 00 00 00 00	 call	 ?GetPlayUserCountRightNow@CDevilSquareGround@@QAEHXZ ; CDevilSquareGround::GetPlayUserCountRightNow

; 1720 : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@GetPlayUse:

; 1718 : 	}
; 1719 : 	return -1;

  0002a	83 c8 ff	 or	 eax, -1

; 1720 : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?GetPlayUserCountRightNow@CDevilSquare@@QAEHH@Z ENDP	; CDevilSquare::GetPlayUserCountRightNow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?LeaveDevilSquare@CDevilSquare@@QAEHHH@Z
_TEXT	SEGMENT
_nDevilSquareIndex$ = 8					; size = 4
_UserIndex$ = 12					; size = 4
?LeaveDevilSquare@CDevilSquare@@QAEHHH@Z PROC		; CDevilSquare::LeaveDevilSquare, COMDAT
; _this$ = ecx

; 1709 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1711 : }

  00003	5d		 pop	 ebp

; 1710 : 	return this->DelUser(nDevilSquareIndex,UserIndex);

  00004	e9 00 00 00 00	 jmp	 ?DelUser@CDevilSquare@@QAEHHH@Z ; CDevilSquare::DelUser
?LeaveDevilSquare@CDevilSquare@@QAEHHH@Z ENDP		; CDevilSquare::LeaveDevilSquare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?ChangeUserIndex@CDevilSquare@@QAEHHHH@Z
_TEXT	SEGMENT
_nExUserIndex$ = 8					; size = 4
_nCurrentUserIndex$ = 12				; size = 4
_nDevilSquareIndex$ = 16				; size = 4
?ChangeUserIndex@CDevilSquare@@QAEHHHH@Z PROC		; CDevilSquare::ChangeUserIndex, COMDAT
; _this$ = ecx

; 1700 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1701 : 	if( DS_LEVEL_RANGE(nDevilSquareIndex) )

  00003	8b 55 10	 mov	 edx, DWORD PTR _nDevilSquareIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 26		 js	 SHORT $LN2@ChangeUser
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 1a		 je	 SHORT $LN2@ChangeUser

; 1702 : 	{
; 1703 : 		return this->m_DevilSquareGround[nDevilSquareIndex].ChangeUserIndex(nExUserIndex,nCurrentUserIndex);

  00016	ff 75 0c	 push	 DWORD PTR _nCurrentUserIndex$[ebp]
  00019	69 c2 1c 05 00
	00		 imul	 eax, edx, 1308
  0001f	83 c1 38	 add	 ecx, 56			; 00000038H
  00022	ff 75 08	 push	 DWORD PTR _nExUserIndex$[ebp]
  00025	03 c8		 add	 ecx, eax
  00027	e8 00 00 00 00	 call	 ?ChangeUserIndex@CDevilSquareGround@@QAEHHH@Z ; CDevilSquareGround::ChangeUserIndex

; 1706 : }

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
$LN2@ChangeUser:

; 1704 : 	}
; 1705 : 	return false;

  00030	33 c0		 xor	 eax, eax

; 1706 : }

  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?ChangeUserIndex@CDevilSquare@@QAEHHHH@Z ENDP		; CDevilSquare::ChangeUserIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?DelUser@CDevilSquare@@QAEHHH@Z
_TEXT	SEGMENT
_nDevilSquareIndex$ = 8					; size = 4
_UserIndex$ = 12					; size = 4
?DelUser@CDevilSquare@@QAEHHH@Z PROC			; CDevilSquare::DelUser, COMDAT
; _this$ = ecx

; 1691 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1692 : 	if( DS_LEVEL_RANGE(nDevilSquareIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nDevilSquareIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 23		 js	 SHORT $LN2@DelUser
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 17		 je	 SHORT $LN2@DelUser

; 1693 : 	{
; 1694 : 		return this->m_DevilSquareGround[nDevilSquareIndex].DelUser(UserIndex);

  00016	ff 75 0c	 push	 DWORD PTR _UserIndex$[ebp]
  00019	69 c2 1c 05 00
	00		 imul	 eax, edx, 1308
  0001f	83 c1 38	 add	 ecx, 56			; 00000038H
  00022	03 c8		 add	 ecx, eax
  00024	e8 00 00 00 00	 call	 ?DelUser@CDevilSquareGround@@QAEHH@Z ; CDevilSquareGround::DelUser

; 1697 : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
$LN2@DelUser:

; 1695 : 	}
; 1696 : 	return false;

  0002d	33 c0		 xor	 eax, eax

; 1697 : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?DelUser@CDevilSquare@@QAEHHH@Z ENDP			; CDevilSquare::DelUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?AddUser@CDevilSquare@@QAEHHH@Z
_TEXT	SEGMENT
_nDevilSquareIndex$ = 8					; size = 4
_UserIndex$ = 12					; size = 4
?AddUser@CDevilSquare@@QAEHHH@Z PROC			; CDevilSquare::AddUser, COMDAT
; _this$ = ecx

; 1682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1683 : 	if( DS_LEVEL_RANGE(nDevilSquareIndex) )

  00003	8b 55 08	 mov	 edx, DWORD PTR _nDevilSquareIndex$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	78 23		 js	 SHORT $LN2@AddUser
  0000a	33 c0		 xor	 eax, eax
  0000c	83 fa 06	 cmp	 edx, 6
  0000f	0f 9e c0	 setle	 al
  00012	85 c0		 test	 eax, eax
  00014	74 17		 je	 SHORT $LN2@AddUser

; 1684 : 	{
; 1685 : 		return this->m_DevilSquareGround[nDevilSquareIndex].AddUser(UserIndex);

  00016	ff 75 0c	 push	 DWORD PTR _UserIndex$[ebp]
  00019	69 c2 1c 05 00
	00		 imul	 eax, edx, 1308
  0001f	83 c1 38	 add	 ecx, 56			; 00000038H
  00022	03 c8		 add	 ecx, eax
  00024	e8 00 00 00 00	 call	 ?AddUser@CDevilSquareGround@@QAEHH@Z ; CDevilSquareGround::AddUser

; 1688 : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
$LN2@AddUser:

; 1686 : 	}
; 1687 : 	return false;

  0002d	33 c0		 xor	 eax, eax

; 1688 : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?AddUser@CDevilSquare@@QAEHHH@Z ENDP			; CDevilSquare::AddUser
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z
_TEXT	SEGMENT
_iUserIndex$ = 8					; size = 4
_iENTER_LEVEL$1$ = 12					; size = 4
_btMoveGate$ = 12					; size = 4
?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z PROC	; CDevilSquare::GetUserLevelToEnter, COMDAT
; _this$ = ecx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 490  : 	btMoveGate = -1;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _btMoveGate$[ebp]
  00007	56		 push	 esi

; 491  : 
; 492  : 	if ( gObjIsConnected(iUserIndex) == FALSE )

  00008	8b 75 08	 mov	 esi, DWORD PTR _iUserIndex$[ebp]
  0000b	56		 push	 esi
  0000c	c7 03 ff ff ff
	ff		 mov	 DWORD PTR [ebx], -1
  00012	e8 00 00 00 00	 call	 ?gObjIsConnected@@YAHH@Z ; gObjIsConnected
  00017	83 c4 04	 add	 esp, 4
  0001a	85 c0		 test	 eax, eax
  0001c	75 09		 jne	 SHORT $LN5@GetUserLev

; 493  : 	{
; 494  : 		return -1;

  0001e	5e		 pop	 esi
  0001f	83 c8 ff	 or	 eax, -1
  00022	5b		 pop	 ebx

; 528  : 				}
; 529  : 			}
; 530  : 		}
; 531  : 	}	
; 532  : 
; 533  : 	return iENTER_LEVEL;
; 534  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
$LN5@GetUserLev:
  00027	57		 push	 edi

; 495  : 	}
; 496  : 
; 497  : 	int iENTER_LEVEL = -1;
; 498  : 
; 499  : #if (__CUSTOM__ == 1)
; 500  : 	if ( gObj[iUserIndex].ChangeUP2 == 1 )

  00028	69 fe 40 27 00
	00		 imul	 edi, esi, 10048
  0002e	03 3d 00 00 00
	00		 add	 edi, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00034	80 bf 94 00 00
	00 01		 cmp	 BYTE PTR [edi+148], 1
  0003b	75 13		 jne	 SHORT $LN6@GetUserLev

; 501  : #else
; 502  : 	if ( g_MasterExp.IsEnabled(&gObj[iUserIndex]) )
; 503  : #endif
; 504  : 	{
; 505  : 		iENTER_LEVEL = 6;
; 506  : 		btMoveGate = g_sttDEVILSQUARE_LEVEL[iENTER_LEVEL].MoveGate;

  0003d	a1 88 00 00 00	 mov	 eax, DWORD PTR ?g_sttDEVILSQUARE_LEVEL@@3PAUEVENT_LEVEL_LIMITATION_EX@@A+136
  00042	5f		 pop	 edi
  00043	89 03		 mov	 DWORD PTR [ebx], eax

; 507  : 	}
; 508  : 	else

  00045	b8 06 00 00 00	 mov	 eax, 6
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 528  : 				}
; 529  : 			}
; 530  : 		}
; 531  : 	}	
; 532  : 
; 533  : 	return iENTER_LEVEL;
; 534  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN6@GetUserLev:

; 511  : 		{
; 512  : 			if ( gObj[iUserIndex].Class == CLASS_DARKLORD || gObj[iUserIndex].Class == CLASS_MAGUMSA || gObj[iUserIndex].Class == CLASS_FIGHTER )

  00050	0f b7 b7 90 00
	00 00		 movzx	 esi, WORD PTR [edi+144]
  00057	33 d2		 xor	 edx, edx
  00059	b8 04 00 00 00	 mov	 eax, OFFSET ?g_sttDEVILSQUARE_LEVEL@@3PAUEVENT_LEVEL_LIMITATION_EX@@A+4
  0005e	66 90		 npad	 2
$LL4@GetUserLev:
  00060	83 fe 04	 cmp	 esi, 4
  00063	74 32		 je	 SHORT $LN10@GetUserLev
  00065	83 fe 03	 cmp	 esi, 3
  00068	74 2d		 je	 SHORT $LN10@GetUserLev
  0006a	83 fe 06	 cmp	 esi, 6
  0006d	74 28		 je	 SHORT $LN10@GetUserLev

; 518  : 					break;
; 519  : 				}
; 520  : 			}
; 521  : 			else
; 522  : 			{
; 523  : 				if ( gObj[iUserIndex].Level >= g_sttDEVILSQUARE_LEVEL[i].NormalCharacterMinLevel  && gObj[iUserIndex].Level <= g_sttDEVILSQUARE_LEVEL[i].NormalCharacterMaxLevel )

  0006f	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  00076	3b 48 fc	 cmp	 ecx, DWORD PTR [eax-4]
  00079	7c 2d		 jl	 SHORT $LN2@GetUserLev
  0007b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0007d	7f 29		 jg	 SHORT $LN2@GetUserLev

; 524  : 				{
; 525  : 					iENTER_LEVEL = i;
; 526  : 					btMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;

  0007f	5f		 pop	 edi
  00080	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  00083	89 55 0c	 mov	 DWORD PTR _iENTER_LEVEL$1$[ebp], edx
  00086	8b 04 85 10 00
	00 00		 mov	 eax, DWORD PTR ?g_sttDEVILSQUARE_LEVEL@@3PAUEVENT_LEVEL_LIMITATION_EX@@A[eax*4+16]
  0008d	89 03		 mov	 DWORD PTR [ebx], eax

; 527  : 					break;

  0008f	8b c2		 mov	 eax, edx
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 528  : 				}
; 529  : 			}
; 530  : 		}
; 531  : 	}	
; 532  : 
; 533  : 	return iENTER_LEVEL;
; 534  : }

  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
$LN10@GetUserLev:

; 513  : 			{
; 514  : 				if ( gObj[iUserIndex].Level >= g_sttDEVILSQUARE_LEVEL[i].SpecialCharacterMinLevel  && gObj[iUserIndex].Level <= g_sttDEVILSQUARE_LEVEL[i].SpecialCharacterMaxLevel )

  00097	0f bf 8f 96 00
	00 00		 movsx	 ecx, WORD PTR [edi+150]
  0009e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000a1	7c 05		 jl	 SHORT $LN2@GetUserLev
  000a3	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  000a6	7e 15		 jle	 SHORT $LN16@GetUserLev
$LN2@GetUserLev:

; 509  : 	{
; 510  : 		for ( int i=0;i<MAX_DEVILSQUARE_GROUND-1;i++)

  000a8	83 c0 14	 add	 eax, 20			; 00000014H
  000ab	42		 inc	 edx
  000ac	3d 7c 00 00 00	 cmp	 eax, OFFSET ?g_sttDEVILSQUARE_LEVEL@@3PAUEVENT_LEVEL_LIMITATION_EX@@A+124
  000b1	7c ad		 jl	 SHORT $LL4@GetUserLev
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	83 c8 ff	 or	 eax, -1
  000b8	5b		 pop	 ebx

; 528  : 				}
; 529  : 			}
; 530  : 		}
; 531  : 	}	
; 532  : 
; 533  : 	return iENTER_LEVEL;
; 534  : }

  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
$LN16@GetUserLev:
  000bd	5f		 pop	 edi

; 515  : 				{
; 516  : 					iENTER_LEVEL = i;
; 517  : 					btMoveGate = g_sttDEVILSQUARE_LEVEL[i].MoveGate;

  000be	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  000c1	8b c2		 mov	 eax, edx
  000c3	8b 0c 8d 10 00
	00 00		 mov	 ecx, DWORD PTR ?g_sttDEVILSQUARE_LEVEL@@3PAUEVENT_LEVEL_LIMITATION_EX@@A[ecx*4+16]
  000ca	5e		 pop	 esi
  000cb	89 0b		 mov	 DWORD PTR [ebx], ecx
  000cd	5b		 pop	 ebx

; 528  : 				}
; 529  : 			}
; 530  : 		}
; 531  : 	}	
; 532  : 
; 533  : 	return iENTER_LEVEL;
; 534  : }

  000ce	5d		 pop	 ebp
  000cf	c2 08 00	 ret	 8
?GetUserLevelToEnter@CDevilSquare@@QAEHHAAH@Z ENDP	; CDevilSquare::GetUserLevelToEnter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z
_TEXT	SEGMENT
_iGateNumber$ = 8					; size = 4
?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z PROC		; CDevilSquare::GetDevilSquareIndex, COMDAT
; _this$ = ecx

; 461  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 462  : 	switch ( iGateNumber )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iGateNumber$[ebp]
  00006	8d 42 c6	 lea	 eax, DWORD PTR [edx-58]
  00009	3d d4 00 00 00	 cmp	 eax, 212		; 000000d4H
  0000e	77 1e		 ja	 SHORT $LN7@GetDevilSq
  00010	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN9@GetDevilSq[eax]
  00017	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN11@GetDevilSq[ecx*4]
$LN5@GetDevilSq:

; 463  : 	{
; 464  : 
; 465  : 		case 58:
; 466  : 		case 59:
; 467  : 		case 60:
; 468  : 		case 61:
; 469  : 			return iGateNumber - 58;	// Devil 1 - 4
; 470  : 			break;
; 471  : 
; 472  : 		case 111:
; 473  : 		case 112:
; 474  : 			return iGateNumber - 107;	// Devil 5 - 6

  0001e	8d 42 95	 lea	 eax, DWORD PTR [edx-107]

; 480  : 			break;
; 481  : 	}
; 482  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN6@GetDevilSq:

; 475  : 			break;
; 476  : 		case 270:
; 477  : 			return 6;

  00025	b8 06 00 00 00	 mov	 eax, 6

; 480  : 			break;
; 481  : 	}
; 482  : }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
$LN7@GetDevilSq:

; 478  : 		default:
; 479  : 			return -1;

  0002e	83 c8 ff	 or	 eax, -1
$LN2@GetDevilSq:

; 480  : 			break;
; 481  : 	}
; 482  : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
  00035	0f 1f 00	 npad	 3
$LN11@GetDevilSq:
  00038	00 00 00 00	 DD	 $LN2@GetDevilSq
  0003c	00 00 00 00	 DD	 $LN5@GetDevilSq
  00040	00 00 00 00	 DD	 $LN6@GetDevilSq
  00044	00 00 00 00	 DD	 $LN7@GetDevilSq
$LN9@GetDevilSq:
  00048	00		 DB	 0
  00049	00		 DB	 0
  0004a	00		 DB	 0
  0004b	00		 DB	 0
  0004c	03		 DB	 3
  0004d	03		 DB	 3
  0004e	03		 DB	 3
  0004f	03		 DB	 3
  00050	03		 DB	 3
  00051	03		 DB	 3
  00052	03		 DB	 3
  00053	03		 DB	 3
  00054	03		 DB	 3
  00055	03		 DB	 3
  00056	03		 DB	 3
  00057	03		 DB	 3
  00058	03		 DB	 3
  00059	03		 DB	 3
  0005a	03		 DB	 3
  0005b	03		 DB	 3
  0005c	03		 DB	 3
  0005d	03		 DB	 3
  0005e	03		 DB	 3
  0005f	03		 DB	 3
  00060	03		 DB	 3
  00061	03		 DB	 3
  00062	03		 DB	 3
  00063	03		 DB	 3
  00064	03		 DB	 3
  00065	03		 DB	 3
  00066	03		 DB	 3
  00067	03		 DB	 3
  00068	03		 DB	 3
  00069	03		 DB	 3
  0006a	03		 DB	 3
  0006b	03		 DB	 3
  0006c	03		 DB	 3
  0006d	03		 DB	 3
  0006e	03		 DB	 3
  0006f	03		 DB	 3
  00070	03		 DB	 3
  00071	03		 DB	 3
  00072	03		 DB	 3
  00073	03		 DB	 3
  00074	03		 DB	 3
  00075	03		 DB	 3
  00076	03		 DB	 3
  00077	03		 DB	 3
  00078	03		 DB	 3
  00079	03		 DB	 3
  0007a	03		 DB	 3
  0007b	03		 DB	 3
  0007c	03		 DB	 3
  0007d	01		 DB	 1
  0007e	01		 DB	 1
  0007f	03		 DB	 3
  00080	03		 DB	 3
  00081	03		 DB	 3
  00082	03		 DB	 3
  00083	03		 DB	 3
  00084	03		 DB	 3
  00085	03		 DB	 3
  00086	03		 DB	 3
  00087	03		 DB	 3
  00088	03		 DB	 3
  00089	03		 DB	 3
  0008a	03		 DB	 3
  0008b	03		 DB	 3
  0008c	03		 DB	 3
  0008d	03		 DB	 3
  0008e	03		 DB	 3
  0008f	03		 DB	 3
  00090	03		 DB	 3
  00091	03		 DB	 3
  00092	03		 DB	 3
  00093	03		 DB	 3
  00094	03		 DB	 3
  00095	03		 DB	 3
  00096	03		 DB	 3
  00097	03		 DB	 3
  00098	03		 DB	 3
  00099	03		 DB	 3
  0009a	03		 DB	 3
  0009b	03		 DB	 3
  0009c	03		 DB	 3
  0009d	03		 DB	 3
  0009e	03		 DB	 3
  0009f	03		 DB	 3
  000a0	03		 DB	 3
  000a1	03		 DB	 3
  000a2	03		 DB	 3
  000a3	03		 DB	 3
  000a4	03		 DB	 3
  000a5	03		 DB	 3
  000a6	03		 DB	 3
  000a7	03		 DB	 3
  000a8	03		 DB	 3
  000a9	03		 DB	 3
  000aa	03		 DB	 3
  000ab	03		 DB	 3
  000ac	03		 DB	 3
  000ad	03		 DB	 3
  000ae	03		 DB	 3
  000af	03		 DB	 3
  000b0	03		 DB	 3
  000b1	03		 DB	 3
  000b2	03		 DB	 3
  000b3	03		 DB	 3
  000b4	03		 DB	 3
  000b5	03		 DB	 3
  000b6	03		 DB	 3
  000b7	03		 DB	 3
  000b8	03		 DB	 3
  000b9	03		 DB	 3
  000ba	03		 DB	 3
  000bb	03		 DB	 3
  000bc	03		 DB	 3
  000bd	03		 DB	 3
  000be	03		 DB	 3
  000bf	03		 DB	 3
  000c0	03		 DB	 3
  000c1	03		 DB	 3
  000c2	03		 DB	 3
  000c3	03		 DB	 3
  000c4	03		 DB	 3
  000c5	03		 DB	 3
  000c6	03		 DB	 3
  000c7	03		 DB	 3
  000c8	03		 DB	 3
  000c9	03		 DB	 3
  000ca	03		 DB	 3
  000cb	03		 DB	 3
  000cc	03		 DB	 3
  000cd	03		 DB	 3
  000ce	03		 DB	 3
  000cf	03		 DB	 3
  000d0	03		 DB	 3
  000d1	03		 DB	 3
  000d2	03		 DB	 3
  000d3	03		 DB	 3
  000d4	03		 DB	 3
  000d5	03		 DB	 3
  000d6	03		 DB	 3
  000d7	03		 DB	 3
  000d8	03		 DB	 3
  000d9	03		 DB	 3
  000da	03		 DB	 3
  000db	03		 DB	 3
  000dc	03		 DB	 3
  000dd	03		 DB	 3
  000de	03		 DB	 3
  000df	03		 DB	 3
  000e0	03		 DB	 3
  000e1	03		 DB	 3
  000e2	03		 DB	 3
  000e3	03		 DB	 3
  000e4	03		 DB	 3
  000e5	03		 DB	 3
  000e6	03		 DB	 3
  000e7	03		 DB	 3
  000e8	03		 DB	 3
  000e9	03		 DB	 3
  000ea	03		 DB	 3
  000eb	03		 DB	 3
  000ec	03		 DB	 3
  000ed	03		 DB	 3
  000ee	03		 DB	 3
  000ef	03		 DB	 3
  000f0	03		 DB	 3
  000f1	03		 DB	 3
  000f2	03		 DB	 3
  000f3	03		 DB	 3
  000f4	03		 DB	 3
  000f5	03		 DB	 3
  000f6	03		 DB	 3
  000f7	03		 DB	 3
  000f8	03		 DB	 3
  000f9	03		 DB	 3
  000fa	03		 DB	 3
  000fb	03		 DB	 3
  000fc	03		 DB	 3
  000fd	03		 DB	 3
  000fe	03		 DB	 3
  000ff	03		 DB	 3
  00100	03		 DB	 3
  00101	03		 DB	 3
  00102	03		 DB	 3
  00103	03		 DB	 3
  00104	03		 DB	 3
  00105	03		 DB	 3
  00106	03		 DB	 3
  00107	03		 DB	 3
  00108	03		 DB	 3
  00109	03		 DB	 3
  0010a	03		 DB	 3
  0010b	03		 DB	 3
  0010c	03		 DB	 3
  0010d	03		 DB	 3
  0010e	03		 DB	 3
  0010f	03		 DB	 3
  00110	03		 DB	 3
  00111	03		 DB	 3
  00112	03		 DB	 3
  00113	03		 DB	 3
  00114	03		 DB	 3
  00115	03		 DB	 3
  00116	03		 DB	 3
  00117	03		 DB	 3
  00118	03		 DB	 3
  00119	03		 DB	 3
  0011a	03		 DB	 3
  0011b	03		 DB	 3
  0011c	02		 DB	 2
?GetDevilSquareIndex@CDevilSquare@@QAEHH@Z ENDP		; CDevilSquare::GetDevilSquareIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SetClose@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
?SetClose@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::SetClose, COMDAT
; _this$ = ecx

; 378  : 	if ( LogAdd != NULL )	// LoL

  00000	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?LogAdd@@3P6AXPADZZA, 0 ; LogAdd
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0e		 je	 SHORT $LN5@SetClose

; 379  : 	{
; 380  : 		LogAddTD("[DevilSquare] Close");

  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JMFNFMMP@?$FLDevilSquare?$FN?5Close?$AA@
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00017	83 c4 04	 add	 esp, 4
$LN5@SetClose:

; 381  : 	}
; 382  : 
; 383  : 	this->ClearMonstr();

  0001a	53		 push	 ebx
  0001b	57		 push	 edi
  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?ClearMonstr@CDevilSquare@@QAEXXZ ; CDevilSquare::ClearMonstr

; 384  : 	this->CalcScore();

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?CalcScore@CDevilSquare@@QAEXXZ ; CDevilSquare::CalcScore
  0002a	8d 7e 38	 lea	 edi, DWORD PTR [esi+56]
  0002d	bb 07 00 00 00	 mov	 ebx, 7
$LL4@SetClose:

; 385  : 
; 386  : 	for ( int i=0;i<MAX_DEVILSQUARE_GROUND;i++)
; 387  : 	{
; 388  : 		this->m_DevilSquareGround[i].Clear();

  00032	8b cf		 mov	 ecx, edi
  00034	e8 00 00 00 00	 call	 ?Clear@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::Clear
  00039	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  0003f	83 eb 01	 sub	 ebx, 1
  00042	75 ee		 jne	 SHORT $LL4@SetClose

; 389  : 	}
; 390  : 
; 391  : 	this->m_iRemainTime = this->m_iCloseTime;

  00044	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 392  : 	this->CheckSync();

  00047	8b ce		 mov	 ecx, esi
  00049	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0004c	e8 00 00 00 00	 call	 ?CheckSync@CDevilSquare@@AAEXXZ ; CDevilSquare::CheckSync

; 393  : 	this->m_bFlag = 0;
; 394  : 
; 395  : 	if ( this->m_iRemainTime <= 1 )

  00051	83 7e 0c 01	 cmp	 DWORD PTR [esi+12], 1
  00055	5f		 pop	 edi
  00056	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00059	5b		 pop	 ebx
  0005a	7f 19		 jg	 SHORT $LN6@SetClose

; 396  : 	{
; 397  : 		this->m_iTime = GetTickCount();

  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 398  : 		this->m_iremainTimeSec = 60;

  00062	c7 46 10 3c 00
	00 00		 mov	 DWORD PTR [esi+16], 60	; 0000003cH

; 404  : 	}
; 405  : 	
; 406  : 	this->m_bSendTimeCount = FALSE;

  00069	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00070	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00073	5e		 pop	 esi

; 407  : }

  00074	c3		 ret	 0
$LN6@SetClose:

; 399  : 	}
; 400  : 	else
; 401  : 	{
; 402  : 		this->m_iTime = GetTickCount() + 60000;

  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0007b	05 60 ea 00 00	 add	 eax, 60000		; 0000ea60H

; 403  : 		this->m_iremainTimeSec = -1;

  00080	c7 46 10 ff ff
	ff ff		 mov	 DWORD PTR [esi+16], -1

; 404  : 	}
; 405  : 	
; 406  : 	this->m_bSendTimeCount = FALSE;

  00087	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0008e	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00091	5e		 pop	 esi

; 407  : }

  00092	c3		 ret	 0
?SetClose@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::SetClose
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?CalcScore@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?CalcScore@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::CalcScore, COMDAT
; _this$ = ecx

; 1588 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b c1		 mov	 eax, ecx

; 1589 : 	int n;
; 1590 : 	for ( n=0;n<MAX_DEVILSQUARE_GROUND;n++)

  00007	bb 07 00 00 00	 mov	 ebx, 7
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00011	8d 78 38	 lea	 edi, DWORD PTR [eax+56]
  00014	8b f7		 mov	 esi, edi
$LL4@CalcScore:

; 1591 : 	{
; 1592 : 		this->m_DevilSquareGround[n].ClearScore();

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?ClearScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::ClearScore
  0001d	81 c6 1c 05 00
	00		 add	 esi, 1308		; 0000051cH
  00023	83 eb 01	 sub	 ebx, 1
  00026	75 ee		 jne	 SHORT $LL4@CalcScore

; 1593 : 	}
; 1594 : 
; 1595 : 	for ( n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  00028	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0002b	be 00 dd 49 06	 mov	 esi, 105504000		; 0649dd00H
$LL7@CalcScore:

; 1596 : 	{
; 1597 : 		if ( gObj[n].Connected == PLAYER_PLAYING )

  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00036	03 ce		 add	 ecx, esi
  00038	83 79 04 03	 cmp	 DWORD PTR [ecx+4], 3
  0003c	75 3f		 jne	 SHORT $LN5@CalcScore

; 1598 : 		{
; 1599 : 			if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  0003e	8a 91 23 01 00
	00		 mov	 dl, BYTE PTR [ecx+291]
  00044	80 fa 09	 cmp	 dl, 9
  00047	74 0c		 je	 SHORT $LN31@CalcScore
  00049	33 c0		 xor	 eax, eax
  0004b	80 fa 20	 cmp	 dl, 32			; 00000020H
  0004e	0f 94 c0	 sete	 al
  00051	85 c0		 test	 eax, eax
  00053	74 28		 je	 SHORT $LN5@CalcScore
$LN31@CalcScore:

; 1600 : 			{
; 1601 : 				if ( DS_LEVEL_RANGE(gObj[n].m_bDevilSquareIndex) != FALSE )

  00055	8a 91 34 12 00
	00		 mov	 dl, BYTE PTR [ecx+4660]
  0005b	b8 06 00 00 00	 mov	 eax, 6
  00060	3a c2		 cmp	 al, dl
  00062	1b c0		 sbb	 eax, eax
  00064	83 c0 01	 add	 eax, 1
  00067	74 14		 je	 SHORT $LN5@CalcScore

; 1602 : 				{
; 1603 : 					this->m_DevilSquareGround[gObj[n].m_bDevilSquareIndex].InsertObj(&gObj[n]);

  00069	0f b6 c2	 movzx	 eax, dl
  0006c	69 c0 1c 05 00
	00		 imul	 eax, eax, 1308
  00072	51		 push	 ecx
  00073	8d 4b 38	 lea	 ecx, DWORD PTR [ebx+56]
  00076	03 c8		 add	 ecx, eax
  00078	e8 00 00 00 00	 call	 ?InsertObj@CDevilSquareGround@@QAEXPAUOBJECTSTRUCT@@@Z ; CDevilSquareGround::InsertObj
$LN5@CalcScore:

; 1593 : 	}
; 1594 : 
; 1595 : 	for ( n=OBJ_STARTUSERINDEX;n<OBJMAX;n++)

  0007d	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  00083	81 fe 00 2f e3
	06		 cmp	 esi, 115552000		; 06e32f00H
  00089	7c a5		 jl	 SHORT $LL7@CalcScore

; 1604 : 				}
; 1605 : 			}
; 1606 : 		}
; 1607 : 	}
; 1608 : 
; 1609 : 	for (  n=0;n<MAX_DEVILSQUARE_GROUND;n++)

  0008b	be 07 00 00 00	 mov	 esi, 7
$LL10@CalcScore:

; 1610 : 	{
; 1611 : 		this->m_DevilSquareGround[n].SortScore();

  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ?SortScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::SortScore

; 1612 : 		this->m_DevilSquareGround[n].SendScore();

  00097	8b cf		 mov	 ecx, edi
  00099	e8 00 00 00 00	 call	 ?SendScore@CDevilSquareGround@@QAEXXZ ; CDevilSquareGround::SendScore
  0009e	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  000a4	83 ee 01	 sub	 esi, 1
  000a7	75 e7		 jne	 SHORT $LL10@CalcScore
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 1613 : 	}
; 1614 : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
?CalcScore@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::CalcScore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?Load@CDevilSquare@@QAEXPAD@Z
_TEXT	SEGMENT
_tmp$1 = -28						; size = 8
_number$2$ = -20					; size = 4
_monstertype$2$ = -16					; size = 4
_starttime$2$ = -12					; size = 4
_this$1$ = -8						; size = 4
_type$1$ = -4						; size = 4
_filename$ = 8						; size = 4
?Load@CDevilSquare@@QAEXPAD@Z PROC			; CDevilSquare::Load, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 5d f8	 mov	 DWORD PTR _this$1$[ebp], ebx

; 171  : 	int i;
; 172  : 	for ( i=0;i<MAX_DEVILSQUARE_GROUND;i++)

  0000e	33 f6		 xor	 esi, esi
  00010	8d 7b 38	 lea	 edi, DWORD PTR [ebx+56]
$LL4@Load:

; 173  : 	{
; 174  : 		this->m_DevilSquareGround[i].Init(i);

  00013	56		 push	 esi
  00014	8b cf		 mov	 ecx, edi
  00016	e8 00 00 00 00	 call	 ?Init@CDevilSquareGround@@QAEXH@Z ; CDevilSquareGround::Init
  0001b	46		 inc	 esi
  0001c	81 c7 1c 05 00
	00		 add	 edi, 1308		; 0000051cH
  00022	83 fe 07	 cmp	 esi, 7
  00025	7c ec		 jl	 SHORT $LL4@Load

; 175  : 	}
; 176  : 
; 177  : 	int Token;
; 178  : 	int number;
; 179  : 	int type;
; 180  : 	int monstertype;
; 181  : 	int starttime;
; 182  : 	int endtime;
; 183  : 	int x;
; 184  : 	int y;
; 185  : 	int tx;
; 186  : 	int ty;
; 187  : 
; 188  : 	SMDFile = fopen(filename, "r");

  00027	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _fopen
  00035	83 c4 08	 add	 esp, 8
  00038	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 189  : 
; 190  : 	if ( SMDFile == NULL )

  0003d	85 c0		 test	 eax, eax
  0003f	75 17		 jne	 SHORT $LN128@Load

; 191  : 	{
; 192  : 		MsgBox("[DevilSquare] Info file Load Fail [%s]", filename);

  00041	56		 push	 esi
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BBCAEKDP@?$FLDevilSquare?$FN?5Info?5file?5Load?5Fai@
  00047	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0004c	83 c4 08	 add	 esp, 8
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx

; 353  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN128@Load:

; 193  : 		return;
; 194  : 	}
; 195  : 
; 196  : 	while ( true )
; 197  : 	{
; 198  : 		Token = GetToken();

  00058	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 199  : 
; 200  : 		if ( Token == 2 )

  0005d	83 f8 02	 cmp	 eax, 2
  00060	0f 84 ed 03 00
	00		 je	 $LN139@Load
  00066	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL5@Load:

; 201  : 		{
; 202  : 			break;
; 203  : 		}
; 204  : 
; 205  : 		type = (int)TokenNumber;

  00070	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00078	89 45 fc	 mov	 DWORD PTR _type$1$[ebp], eax
  0007b	0f 1f 44 00 00	 npad	 5
$LL7@Load:

; 206  : 
; 207  : 		while ( true )
; 208  : 		{
; 209  : 			if ( type == 0 )	// Time Sync

  00080	85 c0		 test	 eax, eax
  00082	75 6c		 jne	 SHORT $LN14@Load

; 210  : 			{
; 211  : 				Token = GetToken();

  00084	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 212  : 
; 213  : 				if ( strcmp("end", TokenString) == 0 )

  00089	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0008e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL150@Load:
  00093	8a 10		 mov	 dl, BYTE PTR [eax]
  00095	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00097	75 1a		 jne	 SHORT $LN151@Load
  00099	84 d2		 test	 dl, dl
  0009b	74 12		 je	 SHORT $LN152@Load
  0009d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000a0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000a3	75 0e		 jne	 SHORT $LN151@Load
  000a5	83 c0 02	 add	 eax, 2
  000a8	83 c1 02	 add	 ecx, 2
  000ab	84 d2		 test	 dl, dl
  000ad	75 e4		 jne	 SHORT $LL150@Load
$LN152@Load:
  000af	33 c0		 xor	 eax, eax
  000b1	eb 05		 jmp	 SHORT $LN153@Load
$LN151@Load:
  000b3	1b c0		 sbb	 eax, eax
  000b5	83 c8 01	 or	 eax, 1
$LN153@Load:
  000b8	85 c0		 test	 eax, eax
  000ba	0f 84 82 03 00
	00		 je	 $LN10@Load

; 214  : 				{
; 215  : 					break;
; 216  : 				}
; 217  : 
; 218  : 				this->m_iCloseTime = (int)TokenNumber;

  000c0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000c8	89 43 2c	 mov	 DWORD PTR [ebx+44], eax

; 219  : 
; 220  : 				Token = GetToken();

  000cb	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 221  : 				this->m_iOpenTime = (int)TokenNumber;

  000d0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000d8	89 43 30	 mov	 DWORD PTR [ebx+48], eax

; 222  : 
; 223  : 				Token = GetToken();

  000db	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 224  : 				this->m_iPlaytime = (int)TokenNumber;

  000e0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000e8	89 43 34	 mov	 DWORD PTR [ebx+52], eax
  000eb	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  000ee	eb 90		 jmp	 SHORT $LL7@Load
$LN14@Load:

; 225  : 			}
; 226  : 			else if ( type == 1 )	// Normal Monster Settings

  000f0	83 f8 01	 cmp	 eax, 1
  000f3	0f 85 89 00 00
	00		 jne	 $LN17@Load

; 227  : 			{
; 228  : 				Token = GetToken();

  000f9	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 229  : 
; 230  : 				if ( strcmp("end", TokenString) == 0 )

  000fe	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00103	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL154@Load:
  00108	8a 10		 mov	 dl, BYTE PTR [eax]
  0010a	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0010c	75 1a		 jne	 SHORT $LN155@Load
  0010e	84 d2		 test	 dl, dl
  00110	74 12		 je	 SHORT $LN156@Load
  00112	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00115	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00118	75 0e		 jne	 SHORT $LN155@Load
  0011a	83 c0 02	 add	 eax, 2
  0011d	83 c1 02	 add	 ecx, 2
  00120	84 d2		 test	 dl, dl
  00122	75 e4		 jne	 SHORT $LL154@Load
$LN156@Load:
  00124	33 c0		 xor	 eax, eax
  00126	eb 05		 jmp	 SHORT $LN157@Load
$LN155@Load:
  00128	1b c0		 sbb	 eax, eax
  0012a	83 c8 01	 or	 eax, 1
$LN157@Load:
  0012d	85 c0		 test	 eax, eax
  0012f	0f 84 0d 03 00
	00		 je	 $LN10@Load

; 231  : 				{
; 232  : 					break;
; 233  : 				}
; 234  : 
; 235  : 				number = (int)TokenNumber;	// Devils Square Index;

  00135	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 236  : 
; 237  : 				Token = GetToken();

  0013d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 238  : 				monstertype = (int)TokenNumber;

  00142	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 239  : 
; 240  : 				Token = GetToken();

  0014a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 241  : 				starttime = (int)TokenNumber;

  0014f	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 242  : 
; 243  : 				Token = GetToken();

  00157	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 244  : 				endtime = (int)TokenNumber;

  0015c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 245  : 
; 246  : 				this->m_DevilSquareGround[number].Set(monstertype, starttime, endtime);

  00164	50		 push	 eax
  00165	69 c3 1c 05 00
	00		 imul	 eax, ebx, 1308
  0016b	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0016e	56		 push	 esi
  0016f	57		 push	 edi
  00170	8d 4b 38	 lea	 ecx, DWORD PTR [ebx+56]
  00173	03 c8		 add	 ecx, eax
  00175	e8 00 00 00 00	 call	 ?Set@CDevilSquareGround@@QAEXGHH@Z ; CDevilSquareGround::Set
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  0017d	e9 fe fe ff ff	 jmp	 $LL7@Load
$LN17@Load:

; 247  : 			}
; 248  : 			else if ( type == 2 )	// Boss Monster Set

  00182	83 f8 02	 cmp	 eax, 2
  00185	0f 85 c7 00 00
	00		 jne	 $LN20@Load

; 249  : 			{
; 250  : 				Token = GetToken();

  0018b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 251  : 
; 252  : 				if ( strcmp("end", TokenString) == 0 )

  00190	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00195	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0019a	66 0f 1f 44 00
	00		 npad	 6
$LL158@Load:
  001a0	8a 10		 mov	 dl, BYTE PTR [eax]
  001a2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001a4	75 1a		 jne	 SHORT $LN159@Load
  001a6	84 d2		 test	 dl, dl
  001a8	74 12		 je	 SHORT $LN160@Load
  001aa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001ad	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001b0	75 0e		 jne	 SHORT $LN159@Load
  001b2	83 c0 02	 add	 eax, 2
  001b5	83 c1 02	 add	 ecx, 2
  001b8	84 d2		 test	 dl, dl
  001ba	75 e4		 jne	 SHORT $LL158@Load
$LN160@Load:
  001bc	33 c0		 xor	 eax, eax
  001be	eb 05		 jmp	 SHORT $LN161@Load
$LN159@Load:
  001c0	1b c0		 sbb	 eax, eax
  001c2	83 c8 01	 or	 eax, 1
$LN161@Load:
  001c5	85 c0		 test	 eax, eax
  001c7	0f 84 75 02 00
	00		 je	 $LN10@Load

; 253  : 				{
; 254  : 					break;
; 255  : 				}
; 256  : 
; 257  : 				number = (int)TokenNumber;	// Devils Square Index;

  001cd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001d5	89 45 ec	 mov	 DWORD PTR _number$2$[ebp], eax

; 258  : 
; 259  : 				Token = GetToken();

  001d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 260  : 				monstertype = (int)TokenNumber;

  001dd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001e5	89 45 f0	 mov	 DWORD PTR _monstertype$2$[ebp], eax

; 261  : 
; 262  : 				Token = GetToken();

  001e8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 263  : 				starttime = (int)TokenNumber;

  001ed	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001f5	89 45 f4	 mov	 DWORD PTR _starttime$2$[ebp], eax

; 264  : 
; 265  : 				Token = GetToken();

  001f8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 266  : 				x = (int)TokenNumber;

  001fd	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 267  : 
; 268  : 				Token = GetToken();

  00205	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 269  : 				y = (int)TokenNumber;

  0020a	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 270  : 
; 271  : 				Token = GetToken();

  00212	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 272  : 				tx = (int)TokenNumber;

  00217	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 273  : 
; 274  : 				Token = GetToken();

  0021f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 275  : 				ty = (int)TokenNumber;

  00224	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 276  : 
; 277  : 				this->m_DevilSquareGround[number].SetBoss(monstertype, starttime, x, y, tx, ty);

  0022c	69 4d ec 1c 05
	00 00		 imul	 ecx, DWORD PTR _number$2$[ebp], 1308
  00233	50		 push	 eax
  00234	56		 push	 esi
  00235	57		 push	 edi
  00236	53		 push	 ebx
  00237	ff 75 f4	 push	 DWORD PTR _starttime$2$[ebp]
  0023a	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  0023d	83 c1 38	 add	 ecx, 56			; 00000038H
  00240	ff 75 f0	 push	 DWORD PTR _monstertype$2$[ebp]
  00243	03 cb		 add	 ecx, ebx
  00245	e8 00 00 00 00	 call	 ?SetBoss@CDevilSquareGround@@QAEXGHHHHH@Z ; CDevilSquareGround::SetBoss
  0024a	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  0024d	e9 2e fe ff ff	 jmp	 $LL7@Load
$LN20@Load:

; 278  : 			}
; 279  : 			else if ( type == 3 ) // Bonus Sttings

  00252	83 f8 03	 cmp	 eax, 3
  00255	0f 85 8f 00 00
	00		 jne	 $LN23@Load

; 280  : 			{
; 281  : 				Token = GetToken();

  0025b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 282  : 
; 283  : 				if ( strcmp("end", TokenString) == 0 )

  00260	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00265	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0026a	66 0f 1f 44 00
	00		 npad	 6
$LL162@Load:
  00270	8a 10		 mov	 dl, BYTE PTR [eax]
  00272	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00274	75 1a		 jne	 SHORT $LN163@Load
  00276	84 d2		 test	 dl, dl
  00278	74 12		 je	 SHORT $LN164@Load
  0027a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0027d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00280	75 0e		 jne	 SHORT $LN163@Load
  00282	83 c0 02	 add	 eax, 2
  00285	83 c1 02	 add	 ecx, 2
  00288	84 d2		 test	 dl, dl
  0028a	75 e4		 jne	 SHORT $LL162@Load
$LN164@Load:
  0028c	33 c0		 xor	 eax, eax
  0028e	eb 05		 jmp	 SHORT $LN165@Load
$LN163@Load:
  00290	1b c0		 sbb	 eax, eax
  00292	83 c8 01	 or	 eax, 1
$LN165@Load:
  00295	85 c0		 test	 eax, eax
  00297	0f 84 a5 01 00
	00		 je	 $LN10@Load

; 284  : 				{
; 285  : 					break;
; 286  : 				}
; 287  : 
; 288  : 				int index;
; 289  : 				int rank;
; 290  : 				int zen;
; 291  : 				int exp;
; 292  : 
; 293  : 				index = (int)TokenNumber;

  0029d	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 294  : 
; 295  : 				Token = GetToken();

  002a5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 296  : 				rank = (int)TokenNumber;

  002aa	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 297  : 
; 298  : 				Token = GetToken();

  002b2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 299  : 				exp = (int)TokenNumber;

  002b7	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 300  : 
; 301  : 				Token = GetToken();

  002bf	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 302  : 				zen = (int)TokenNumber;

  002c4	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 303  : 
; 304  : 				this->m_DevilSquareGround[index].SetBonus(rank, exp, zen);

  002cc	50		 push	 eax
  002cd	69 c3 1c 05 00
	00		 imul	 eax, ebx, 1308
  002d3	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  002d6	56		 push	 esi
  002d7	57		 push	 edi
  002d8	8d 4b 38	 lea	 ecx, DWORD PTR [ebx+56]
  002db	03 c8		 add	 ecx, eax
  002dd	e8 00 00 00 00	 call	 ?SetBonus@CDevilSquareGround@@QAEXHHH@Z ; CDevilSquareGround::SetBonus
  002e2	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  002e5	e9 96 fd ff ff	 jmp	 $LL7@Load
$LN23@Load:

; 305  : 			}
; 306  : 			else if ( type == 4 )

  002ea	83 f8 04	 cmp	 eax, 4
  002ed	0f 85 95 00 00
	00		 jne	 $LN26@Load

; 307  : 			{
; 308  : 				DS_TIME tmp;
; 309  : 
; 310  : 				Token = GetToken();

  002f3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 311  : 
; 312  : 				if ( strcmp("end", TokenString) == 0 )

  002f8	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  002fd	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL166@Load:
  00302	8a 10		 mov	 dl, BYTE PTR [eax]
  00304	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00306	75 1a		 jne	 SHORT $LN167@Load
  00308	84 d2		 test	 dl, dl
  0030a	74 12		 je	 SHORT $LN168@Load
  0030c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0030f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00312	75 0e		 jne	 SHORT $LN167@Load
  00314	83 c0 02	 add	 eax, 2
  00317	83 c1 02	 add	 ecx, 2
  0031a	84 d2		 test	 dl, dl
  0031c	75 e4		 jne	 SHORT $LL166@Load
$LN168@Load:
  0031e	33 c0		 xor	 eax, eax
  00320	eb 05		 jmp	 SHORT $LN169@Load
$LN167@Load:
  00322	1b c0		 sbb	 eax, eax
  00324	83 c8 01	 or	 eax, 1
$LN169@Load:
  00327	85 c0		 test	 eax, eax
  00329	0f 84 13 01 00
	00		 je	 $LN10@Load

; 313  : 				{
; 314  : 					break;
; 315  : 				}
; 316  : 
; 317  : 				tmp.iHour = (int)TokenNumber;

  0032f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00337	89 45 e4	 mov	 DWORD PTR _tmp$1[ebp], eax

; 318  : 				Token = GetToken();

  0033a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 319  : 				tmp.iMinute = (int)TokenNumber;

  0033f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 96   : 		return (_Ptr);

  00347	8b 7b 24	 mov	 edi, DWORD PTR [ebx+36]

; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  0034a	8d 4b 24	 lea	 ecx, DWORD PTR [ebx+36]
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 319  : 				tmp.iMinute = (int)TokenNumber;

  0034d	89 45 e8	 mov	 DWORD PTR _tmp$1[ebp+4], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),

  00350	8d 45 e4	 lea	 eax, DWORD PTR _tmp$1[ebp]
  00353	50		 push	 eax
  00354	ff 77 04	 push	 DWORD PTR [edi+4]
  00357	57		 push	 edi
  00358	e8 00 00 00 00	 call	 ??$_Buynode@ABUDS_TIME@@@?$_List_buy@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@1@PAU21@0ABUDS_TIME@@@Z ; std::_List_buy<DS_TIME,std::allocator<DS_TIME> >::_Buynode<DS_TIME const &>
  0035d	8b d0		 mov	 edx, eax

; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());
; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();
; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();
; 1504 : 		this->_Mysize() = 0;
; 1505 : 
; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)
; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);
; 1509 : 			this->_Freenode(_Pnode);
; 1510 : 			}
; 1511 : 		}
; 1512 : 
; 1513 : 	void swap(_Myt& _Right)
; 1514 : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 1515 : 		{	// exchange contents with _Right
; 1516 : 		if (this == &_Right)
; 1517 : 			;	// same object, do nothing
; 1518 : 		else if (this->_Getal() == _Right._Getal())
; 1519 : 			{	// same allocator, swap control information
; 1520 : 			this->_Swap_all(_Right);
; 1521 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1522 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1523 : 			}
; 1524 : 
; 1525 : 		else if (_Alty::propagate_on_container_swap::value)
; 1526 : 			{	// swap allocators and control information
; 1527 : 			this->_Swap_alloc(_Right);
; 1528 : 			_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1529 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1530 : 			}
; 1531 : 
; 1532 : 		else	// containers are incompatible
; 1533 : 
; 1534 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1535 : 			_DEBUG_ERROR("list containers incompatible for swap");
; 1536 : 
; 1537 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 			_XSTD terminate();
; 1539 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1540 : 		}
; 1541 : 
; 1542 : 	void splice(const_iterator _Where, _Myt& _Right)
; 1543 : 		{	// splice all of _Right at _Where
; 1544 : 		if (this != &_Right && !_Right.empty())
; 1545 : 			{	// worth splicing, do it
; 1546 : 			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
; 1547 : 				_Right._Mysize());
; 1548 : 			}
; 1549 : 		}
; 1550 : 
; 1551 : 	void splice(const_iterator _Where, _Myt&& _Right)
; 1552 : 		{	// splice all of _Right at _Where
; 1553 : 		splice(_Where, (_Myt&)_Right);
; 1554 : 		}
; 1555 : 
; 1556 : 	void splice(const_iterator _Where, _Myt& _Right,
; 1557 : 		const_iterator _First)
; 1558 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1559 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1560 : 		if (_First == _Right.end())
; 1561 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1562 : 		else
; 1563 : 
; 1564 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1565 : 		if (_First != _Right.end())
; 1566 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1567 : 
; 1568 : 			{	// element exists, try splice
; 1569 : 			const_iterator _Last = _First;
; 1570 : 			++_Last;
; 1571 : 			if (this != &_Right
; 1572 : 				|| (_Where != _First && _Where != _Last))
; 1573 : 				_Splice(_Where, _Right, _First, _Last, 1);
; 1574 : 			}
; 1575 : 		}
; 1576 : 
; 1577 : 	void splice(const_iterator _Where, _Myt&& _Right,
; 1578 : 		const_iterator _First)
; 1579 : 		{	// splice _Right [_First, _First + 1) at _Where
; 1580 : 		splice(_Where, (_Myt&)_Right, _First);
; 1581 : 		}
; 1582 : 
; 1583 : 	void splice(const_iterator _Where,
; 1584 : 		_Myt& _Right, const_iterator _First, const_iterator _Last)
; 1585 : 		{	// splice _Right [_First, _Last) at _Where
; 1586 : 		if (_First != _Last && (this != &_Right || _Where != _Last))
; 1587 : 			{	// worth splicing, do it
; 1588 : 			size_type _Count = 0;
; 1589 : 
; 1590 : 			if (this == &_Right)
; 1591 : 				;	// just rearrange this list
; 1592 : 			else if (_First == _Right.begin() && _Last == _Right.end())
; 1593 : 				_Count = _Right._Mysize();	// splice in whole list
; 1594 : 			else
; 1595 : 				{	// count nodes and check for knot
; 1596 : 				const_iterator _Next = _First;
; 1597 : 
; 1598 : 				for (; _Next != _Last; ++_Next, (void)++_Count)
; 1599 : 					if (_Next == _Right.end())
; 1600 : 						_Xlength_error("list<T> bad splice");
; 1601 : 				}
; 1602 : 			_Splice(_Where, _Right, _First, _Last, _Count);
; 1603 : 			}
; 1604 : 		}
; 1605 : 
; 1606 : 	void splice(const_iterator _Where,
; 1607 : 		_Myt&& _Right, const_iterator _First, const_iterator _Last)
; 1608 : 		{	// splice _Right [_First, _Last) at _Where
; 1609 : 		splice(_Where, (_Myt&)_Right, _First, _Last);
; 1610 : 		}
; 1611 : 
; 1612 : 	void remove(const _Ty& _Val)
; 1613 : 		{	// erase each element matching _Val
; 1614 : 		iterator _Val_it = end();
; 1615 : 
; 1616 : 		for (iterator _First = begin(); _First != end(); )
; 1617 : 			if (*_First == _Val)
; 1618 : 				if (_STD addressof(*_First) == _STD addressof(_Val))
; 1619 : 					_Val_it = _First++;
; 1620 : 				else
; 1621 : 					_First = erase(_First);
; 1622 : 			else
; 1623 : 				++_First;
; 1624 : 
; 1625 : 		if (_Val_it != end())
; 1626 : 			erase(_Val_it);
; 1627 : 		}
; 1628 : 
; 1629 : 	template<class _Pr1>
; 1630 : 		void remove_if(_Pr1 _Pred)
; 1631 : 		{	// erase each element satisfying _Pred
; 1632 : 		for (iterator _First = begin(); _First != end(); )
; 1633 : 			if (_Pred(*_First))
; 1634 : 				_First = erase(_First);
; 1635 : 			else
; 1636 : 				++_First;
; 1637 : 		}
; 1638 : 
; 1639 : 	void unique()
; 1640 : 		{	// erase each element matching previous
; 1641 : 		unique(equal_to<>());
; 1642 : 		}
; 1643 : 
; 1644 : 	template<class _Pr2>
; 1645 : 		void unique(_Pr2 _Pred)
; 1646 : 		{	// erase each element satisfying _Pred with previous
; 1647 : 		const _Nodeptr _Phead = this->_Myhead();
; 1648 : 		_Nodeptr _Pprev = this->_Nextnode(_Phead);
; 1649 : 		_Nodeptr _Pnode = this->_Nextnode(_Pprev);
; 1650 : 
; 1651 : 		while (_Pnode != _Phead)
; 1652 : 			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
; 1653 : 				{	// match, remove it
; 1654 : 				const _Nodeptr _Perase = _Pnode;
; 1655 : 				_Pnode = this->_Nextnode(_Pnode);
; 1656 : 
; 1657 : 				this->_Nextnode(_Pprev) = _Pnode;
; 1658 : 				this->_Prevnode(_Pnode) = _Pprev;
; 1659 : 				this->_Freenode(_Perase);
; 1660 : 
; 1661 : 				--this->_Mysize();
; 1662 : 				}
; 1663 : 			else
; 1664 : 				{	// no match, advance
; 1665 : 				_Pprev = _Pnode;
; 1666 : 				_Pnode = this->_Nextnode(_Pnode);
; 1667 : 				}
; 1668 : 		}
; 1669 : 
; 1670 : 	void merge(_Myt& _Right)
; 1671 : 		{	// merge in elements from _Right, both ordered by operator<
; 1672 : 		merge(_Right, less<>());
; 1673 : 		}
; 1674 : 
; 1675 : 	void merge(_Myt&& _Right)
; 1676 : 		{	// merge in elements from _Right, both ordered by operator<
; 1677 : 		merge((_Myt&)_Right);
; 1678 : 		}
; 1679 : 
; 1680 : 	template<class _Pr2>
; 1681 : 		void merge(_Myt& _Right, _Pr2 _Pred)
; 1682 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1683 : 		if (&_Right != this)
; 1684 : 			{	// safe to merge, do it
; 1685 : 			iterator _First1 = begin(), _Last1 = end();
; 1686 : 			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
; 1687 : 			_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);
; 1688 : 			_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);
; 1689 : 
; 1690 : 			while (_First1 != _Last1 && _First2 != _Last2)
; 1691 : 				if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))
; 1692 : 					{	// splice in an element from _Right
; 1693 : 					iterator _Mid2 = _First2;
; 1694 : 					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
; 1695 : 					_First2 = _Mid2;
; 1696 : 					}
; 1697 : 				else
; 1698 : 					++_First1;
; 1699 : 
; 1700 : 			if (_First2 != _Last2)
; 1701 : 				_Splice(_Last1, _Right, _First2, _Last2,
; 1702 : 					_Right._Mysize());	// splice remainder of _Right
; 1703 : 			}
; 1704 : 		}
; 1705 : 
; 1706 : 	template<class _Pr2>
; 1707 : 		void merge(_Myt&& _Right, _Pr2 _Pred)
; 1708 : 		{	// merge in elements from _Right, both ordered by _Pred
; 1709 : 		merge((_Myt&)_Right, _Pred);
; 1710 : 		}
; 1711 : 
; 1712 : 	void sort()
; 1713 : 		{	// order sequence, using operator<
; 1714 : 		sort(less<>());
; 1715 : 		}
; 1716 : 
; 1717 : 	template<class _Pr2>
; 1718 : 		void sort(_Pr2 _Pred)
; 1719 : 		{	// order sequence, using _Pred
; 1720 : 		_Sort(begin(), end(), _Pred, this->_Mysize());
; 1721 : 		}
; 1722 : 
; 1723 : 	template<class _Pr2>
; 1724 : 		iterator _Sort(iterator _First, iterator _Last, _Pr2 _Pred,
; 1725 : 			size_type _Size)
; 1726 : 		{	// order [_First, _Last), using _Pred, return new first
; 1727 : 			// _Size must be distance from _First to _Last
; 1728 : 		if (_Size < 2)
; 1729 : 			return (_First);	// nothing to do
; 1730 : 
; 1731 : 		iterator _Mid = _STD next(_First, _Size / 2);
; 1732 : 		_First = _Sort(_First, _Mid, _Pred, _Size / 2);
; 1733 : 		_Mid = _Sort(_Mid, _Last, _Pred, _Size - _Size / 2);
; 1734 : 		iterator _Newfirst = _First;
; 1735 : 
; 1736 : 		for (bool _Initial_loop = true; ; _Initial_loop = false)
; 1737 : 			{	// [_First, _Mid) and [_Mid, _Last) are sorted and non-empty
; 1738 : 			if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))
; 1739 : 				{	// consume _Mid
; 1740 : 				if (_Initial_loop)
; 1741 : 					_Newfirst = _Mid;	// update return value
; 1742 : 				splice(_First, *this, _Mid++);
; 1743 : 				if (_Mid == _Last)
; 1744 : 					return (_Newfirst);	// exhausted [_Mid, _Last); done
; 1745 : 				}
; 1746 : 			else
; 1747 : 				{	// consume _First
; 1748 : 				++_First;
; 1749 : 				if (_First == _Mid)
; 1750 : 					return (_Newfirst);	// exhausted [_First, _Mid); done
; 1751 : 				}
; 1752 : 			}
; 1753 : 		}
; 1754 : 
; 1755 : 	void reverse() _NOEXCEPT
; 1756 : 		{	// reverse sequence
; 1757 : 		const _Nodeptr _Phead = this->_Myhead();
; 1758 : 		_Nodeptr _Pnode = _Phead;
; 1759 : 
; 1760 : 		for (; ; )
; 1761 : 			{	// flip pointers in a node
; 1762 : 			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
; 1763 : 			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
; 1764 : 			this->_Prevnode(_Pnode) = _Pnext;
; 1765 : 
; 1766 : 			if (_Pnext == _Phead)
; 1767 : 				break;
; 1768 : 			_Pnode = _Pnext;
; 1769 : 			}
; 1770 : 		}
; 1771 : 
; 1772 : 	void _Splice(const_iterator _Where,
; 1773 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1774 : 		size_type _Count)
; 1775 : 		{	// splice _Right [_First, _Last) before _Where
; 1776 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1777 : 		if (_Where._Getcont() != &this->_Get_data())
; 1778 : 			_DEBUG_ERROR("list splice iterator outside range");
; 1779 : 		if (this->_Getal() != _Right._Getal())
; 1780 : 			_DEBUG_ERROR("list containers incompatible for splice");
; 1781 : 
; 1782 : 		if (this != &_Right)
; 1783 : 			{	// transfer ownership
; 1784 : 			_Lockit _Lock(_LOCK_DEBUG);
; 1785 : 
; 1786 : 			const bool _One = _Count == 1;
; 1787 : 			const bool _All = !_One && _Count == _Right.size();
; 1788 : 			const bool _Some = !_One && !_All;
; 1789 : 
; 1790 : 			_Nodeptr _Oldprev = this->_Prevnode(_First._Ptr);
; 1791 : 
; 1792 : 			if (_Some)
; 1793 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1794 : 					_Ptr = this->_Nextnode(_Ptr))
; 1795 : 					{	// mark _Prev pointers
; 1796 : 					this->_Prevnode(_Ptr) = 0;
; 1797 : 					}
; 1798 : 
; 1799 : 			const_iterator **_Pnext = (const_iterator **)_Right._Getpfirst();
; 1800 : 
; 1801 : 			if (_Pnext == 0)
; 1802 : 				_DEBUG_ERROR("list container corrupted");
; 1803 : 
; 1804 : 			while (*_Pnext != 0)
; 1805 : 				{	// check the iterator
; 1806 : 				const_iterator& _Iter = **_Pnext;
; 1807 : 
; 1808 : 				if ((_One && _Iter._Ptr == _First._Ptr)
; 1809 : 					|| (_All && _Iter._Ptr != _Right._Myhead())
; 1810 : 					|| (_Some && this->_Prevnode(_Iter._Ptr) == 0))
; 1811 : 					{	// adopt the iterator
; 1812 : 					*_Pnext = (const_iterator *)_Iter._Mynextiter;
; 1813 : 					_Iter._Myproxy = this->_Myproxy();
; 1814 : 					_Iter._Mynextiter = this->_Myproxy()->_Myfirstiter;
; 1815 : 					this->_Myproxy()->_Myfirstiter = &_Iter;
; 1816 : 					}
; 1817 : 				else
; 1818 : 					{	// skip the iterator
; 1819 : 					_Pnext = (const_iterator **)_Iter._Getpnext();
; 1820 : 					}
; 1821 : 				}
; 1822 : 
; 1823 : 			if (_Some)
; 1824 : 				for (_Nodeptr _Ptr = _First._Ptr; _Ptr != _Last._Ptr;
; 1825 : 					_Ptr = this->_Nextnode(_Ptr))
; 1826 : 					{	// restore _Prev pointers
; 1827 : 					this->_Prevnode(_Ptr) = _Oldprev;
; 1828 : 					_Oldprev = _Ptr;
; 1829 : 					}
; 1830 : 			}
; 1831 : 
; 1832 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1833 : 		if (this->_Getal() != _Right._Getal())
; 1834 : 			_XSTD terminate();
; 1835 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1836 : 
; 1837 : 		_Splice_same(_Where, _Right, _First, _Last, _Count);
; 1838 : 		}
; 1839 : 
; 1840 : 	void _Splice_same(const_iterator _Where,
; 1841 : 		_Myt& _Right, const_iterator _First, const_iterator _Last,
; 1842 : 		size_type _Count)
; 1843 : 		{	// splice _Right [_First, _Last) before _Where
; 1844 : 		if (this != &_Right)
; 1845 : 			{	// splicing from another list, adjust counts
; 1846 : 			_Incsize(_Count);
; 1847 : 			_Right._Mysize() -= _Count;
; 1848 : 			}
; 1849 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1850 : 			_Last._Mynode();
; 1851 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1852 : 			_Where._Mynode();
; 1853 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1854 : 			_First._Mynode();
; 1855 : 
; 1856 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1857 : 		this->_Prevnode(_Where._Mynode()) =
; 1858 : 			this->_Prevnode(_Last._Mynode());
; 1859 : 		this->_Prevnode(_Last._Mynode()) =
; 1860 : 			this->_Prevnode(_First._Mynode());
; 1861 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1862 : 		}
; 1863 : 
; 1864 : 	void _Unchecked_splice(_Unchecked_const_iterator _Where,
; 1865 : 		_Unchecked_const_iterator _First,
; 1866 : 		_Unchecked_const_iterator _Last)
; 1867 : 		{	// splice [_First, _Last) before _Where
; 1868 : 		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
; 1869 : 			_Last._Mynode();
; 1870 : 		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
; 1871 : 			_Where._Mynode();
; 1872 : 		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
; 1873 : 			_First._Mynode();
; 1874 : 
; 1875 : 		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
; 1876 : 		this->_Prevnode(_Where._Mynode()) =
; 1877 : 			this->_Prevnode(_Last._Mynode());
; 1878 : 		this->_Prevnode(_Last._Mynode()) =
; 1879 : 			this->_Prevnode(_First._Mynode());
; 1880 : 		this->_Prevnode(_First._Mynode()) = _Pnode;
; 1881 : 		}
; 1882 : 
; 1883 : 	void _Tidy()
; 1884 : 		{	// free all storage
; 1885 : 		clear();
; 1886 : 		}
; 1887 : 
; 1888 : 	void _Insert_n(_Unchecked_const_iterator _Where,
; 1889 : 		size_type _Count, const _Ty& _Val)
; 1890 : 		{	// insert _Count * _Val at _Where
; 1891 : 		size_type _Countsave = _Count;
; 1892 : 
; 1893 : 		_TRY_BEGIN
; 1894 : 		for (; 0 < _Count; --_Count)
; 1895 : 			_Insert(_Where, _Val);
; 1896 : 		_CATCH_ALL
; 1897 : 		for (; _Count < _Countsave; ++_Count)
; 1898 : 			{	// undo inserts
; 1899 : 			_Unchecked_const_iterator _Before = _Where;
; 1900 : 			_Unchecked_erase(--_Before);
; 1901 : 			}
; 1902 : 		_RERAISE;
; 1903 : 		_CATCH_END
; 1904 : 		}
; 1905 : 
; 1906 : 	void _Incsize(size_type _Count)
; 1907 : 		{	// alter element count, with checking
; 1908 : 		if (max_size() - this->_Mysize() - 1 < _Count)

  0035f	b9 fe ff ff 0f	 mov	 ecx, 268435454		; 0ffffffeH
  00364	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00367	2b c8		 sub	 ecx, eax
  00369	83 f9 01	 cmp	 ecx, 1
  0036c	0f 82 04 01 00
	00		 jb	 $LN176@Load

; 1910 : 		this->_Mysize() += _Count;

  00372	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00375	89 4b 28	 mov	 DWORD PTR [ebx+40], ecx

; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;

  00378	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 97   : 		}
; 98   : 
; 99   : 	_Nodeptr _Ptr;	// pointer to node
; 100  : 	};
; 101  : 
; 102  : 	// TEMPLATE CLASS _List_unchecked_iterator
; 103  : template<class _Mylist>
; 104  : 	class _List_unchecked_iterator
; 105  : 		: public _List_unchecked_const_iterator<_Mylist>
; 106  : 	{	// unchecked iterator for mutable list
; 107  : public:
; 108  : 	typedef _List_unchecked_iterator<_Mylist> _Myiter;
; 109  : 	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
; 110  : 	typedef bidirectional_iterator_tag iterator_category;
; 111  : 
; 112  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 113  : 	typedef typename _Mylist::value_type value_type;
; 114  : 	typedef typename _Mylist::difference_type difference_type;
; 115  : 	typedef typename _Mylist::pointer pointer;
; 116  : 	typedef typename _Mylist::reference reference;
; 117  : 
; 118  : 	_List_unchecked_iterator()
; 119  : 		{	// construct with null node
; 120  : 		}
; 121  : 
; 122  : 	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 123  : 		: _Mybase(_Pnode, _Plist)
; 124  : 		{	// construct with node pointer _Pnode
; 125  : 		}
; 126  : 
; 127  : 	reference operator*() const
; 128  : 		{	// return designated value
; 129  : 		return ((reference)**(_Mybase *)this);
; 130  : 		}
; 131  : 
; 132  : 	pointer operator->() const
; 133  : 		{	// return pointer to class object
; 134  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 135  : 		}
; 136  : 
; 137  : 	_Myiter& operator++()
; 138  : 		{	// preincrement
; 139  : 		++(*(_Mybase *)this);
; 140  : 		return (*this);
; 141  : 		}
; 142  : 
; 143  : 	_Myiter operator++(int)
; 144  : 		{	// postincrement
; 145  : 		_Myiter _Tmp = *this;
; 146  : 		++*this;
; 147  : 		return (_Tmp);
; 148  : 		}
; 149  : 
; 150  : 	_Myiter& operator--()
; 151  : 		{	// predecrement
; 152  : 		--(*(_Mybase *)this);
; 153  : 		return (*this);
; 154  : 		}
; 155  : 
; 156  : 	_Myiter operator--(int)
; 157  : 		{	// postdecrement
; 158  : 		_Myiter _Tmp = *this;
; 159  : 		--*this;
; 160  : 		return (_Tmp);
; 161  : 		}
; 162  : 	};
; 163  : 
; 164  : 	// TEMPLATE CLASS _List_const_iterator
; 165  : template<class _Mylist>
; 166  : 	class _List_const_iterator
; 167  : 		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
; 168  : 	{	// iterator for nonmutable list
; 169  : public:
; 170  : 	typedef _List_const_iterator<_Mylist> _Myiter;
; 171  : 	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
; 172  : 	typedef bidirectional_iterator_tag iterator_category;
; 173  : 
; 174  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 175  : 	typedef typename _Mylist::value_type value_type;
; 176  : 	typedef typename _Mylist::difference_type difference_type;
; 177  : 	typedef typename _Mylist::const_pointer pointer;
; 178  : 	typedef typename _Mylist::const_reference reference;
; 179  : 
; 180  : 	_List_const_iterator()
; 181  : 		: _Mybase()
; 182  : 		{	// construct with null node pointer
; 183  : 		}
; 184  : 
; 185  : 	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 186  : 		: _Mybase(_Pnode, _Plist)
; 187  : 		{	// construct with node pointer _Pnode
; 188  : 		}
; 189  : 
; 190  : 	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;
; 191  : 
; 192  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 193  : 		{	// reset from unchecked iterator
; 194  : 		this->_Ptr = _Right._Ptr;
; 195  : 		return (*this);
; 196  : 		}
; 197  : 
; 198  : 	_Unchecked_type _Unchecked() const
; 199  : 		{	// make an unchecked iterator
; 200  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 201  : 		}
; 202  : 
; 203  : 	reference operator*() const
; 204  : 		{	// return designated value
; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator++()
; 224  : 		{	// preincrement
; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
; 241  : 		return (*this);
; 242  : 		}
; 243  : 
; 244  : 	_Myiter operator++(int)
; 245  : 		{	// postincrement
; 246  : 		_Myiter _Tmp = *this;
; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}
; 250  : 
; 251  : 	_Myiter& operator--()
; 252  : 		{	// predecrement
; 253  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 254  : 		if (this->_Getcont() == 0
; 255  : 			|| this->_Ptr == 0
; 256  : 			|| (this->_Ptr = _Mylist::_Prevnode(this->_Ptr))
; 257  : 				== ((_Mylist *)this->_Getcont())->_Myhead)
; 258  : 			{	// report error
; 259  : 			_DEBUG_ERROR("list iterator not decrementable");
; 260  : 			_SCL_SECURE_OUT_OF_RANGE;
; 261  : 			}
; 262  : 
; 263  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 264  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 265  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 266  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 267  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 268  : 
; 269  :  #else /* _ITERATOR_DEBUG_LEVEL */
; 270  : 		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
; 271  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 272  : 
; 273  : 		return (*this);
; 274  : 		}
; 275  : 
; 276  : 	_Myiter operator--(int)
; 277  : 		{	// postdecrement
; 278  : 		_Myiter _Tmp = *this;
; 279  : 		--*this;
; 280  : 		return (_Tmp);
; 281  : 		}
; 282  : 
; 283  : 	bool operator==(const _Myiter& _Right) const
; 284  : 		{	// test for iterator equality
; 285  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 286  : 		if (this->_Getcont() != _Right._Getcont())
; 287  : 			{	// report error
; 288  : 			_DEBUG_ERROR("list iterators incompatible");
; 289  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 290  : 			}
; 291  : 
; 292  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 293  : 		_SCL_SECURE_VALIDATE(this->_Getcont() == _Right._Getcont());
; 294  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 295  : 
; 296  : 		return (this->_Ptr == _Right._Ptr);
; 297  : 		}
; 298  : 
; 299  : 	bool operator!=(const _Myiter& _Right) const
; 300  : 		{	// test for iterator inequality
; 301  : 		return (!(*this == _Right));
; 302  : 		}
; 303  : 	};
; 304  : 
; 305  : template<class _Mylist> inline
; 306  : 	typename _List_const_iterator<_Mylist>::_Unchecked_type
; 307  : 		_Unchecked(_List_const_iterator<_Mylist> _Iter)
; 308  : 	{	// convert to unchecked
; 309  : 	return (_Iter._Unchecked());
; 310  : 	}
; 311  : 
; 312  : template<class _Mylist> inline
; 313  : 	_List_const_iterator<_Mylist>&
; 314  : 		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
; 315  : 			typename _List_const_iterator<_Mylist>
; 316  : 				::_Unchecked_type _Right)
; 317  : 	{	// convert to checked
; 318  : 	return (_Iter._Rechecked(_Right));
; 319  : 	}
; 320  : 
; 321  : 	// TEMPLATE CLASS _List_iterator
; 322  : template<class _Mylist>
; 323  : 	class _List_iterator
; 324  : 		: public _List_const_iterator<_Mylist>
; 325  : 	{	// iterator for mutable list
; 326  : public:
; 327  : 	typedef _List_iterator<_Mylist> _Myiter;
; 328  : 	typedef _List_const_iterator<_Mylist> _Mybase;
; 329  : 	typedef bidirectional_iterator_tag iterator_category;
; 330  : 
; 331  : 	typedef typename _Mylist::_Nodeptr _Nodeptr;
; 332  : 	typedef typename _Mylist::value_type value_type;
; 333  : 	typedef typename _Mylist::difference_type difference_type;
; 334  : 	typedef typename _Mylist::pointer pointer;
; 335  : 	typedef typename _Mylist::reference reference;
; 336  : 
; 337  : 	_List_iterator()
; 338  : 		{	// construct with null node
; 339  : 		}
; 340  : 
; 341  : 	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
; 342  : 		: _Mybase(_Pnode, _Plist)
; 343  : 		{	// construct with node pointer _Pnode
; 344  : 		}
; 345  : 
; 346  : 	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;
; 347  : 
; 348  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 349  : 		{	// reset from unchecked iterator
; 350  : 		this->_Ptr = _Right._Ptr;
; 351  : 		return (*this);
; 352  : 		}
; 353  : 
; 354  : 	_Unchecked_type _Unchecked() const
; 355  : 		{	// make an unchecked iterator
; 356  : 		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
; 357  : 		}
; 358  : 
; 359  : 	reference operator*() const
; 360  : 		{	// return designated value
; 361  : 		return ((reference)**(_Mybase *)this);
; 362  : 		}
; 363  : 
; 364  : 	pointer operator->() const
; 365  : 		{	// return pointer to class object
; 366  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 367  : 		}
; 368  : 
; 369  : 	_Myiter& operator++()
; 370  : 		{	// preincrement
; 371  : 		++(*(_Mybase *)this);
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  : 		--(*(_Mybase *)this);
; 385  : 		return (*this);
; 386  : 		}
; 387  : 
; 388  : 	_Myiter operator--(int)
; 389  : 		{	// postdecrement
; 390  : 		_Myiter _Tmp = *this;
; 391  : 		--*this;
; 392  : 		return (_Tmp);
; 393  : 		}
; 394  : 	};
; 395  : 
; 396  : template<class _Mylist> inline
; 397  : 	typename _List_iterator<_Mylist>::_Unchecked_type
; 398  : 		_Unchecked(_List_iterator<_Mylist> _Iter)
; 399  : 	{	// convert to unchecked
; 400  : 	return (_Iter._Unchecked());
; 401  : 	}
; 402  : 
; 403  : template<class _Mylist> inline
; 404  : 	_List_iterator<_Mylist>&
; 405  : 		_Rechecked(_List_iterator<_Mylist>& _Iter,
; 406  : 			typename _List_iterator<_Mylist>
; 407  : 				::_Unchecked_type _Right)
; 408  : 	{	// convert to checked
; 409  : 	return (_Iter._Rechecked(_Right));
; 410  : 	}
; 411  : 
; 412  : 		// list TYPE WRAPPERS
; 413  : template<class _Value_type,
; 414  : 	class _Size_type,
; 415  : 	class _Difference_type,
; 416  : 	class _Pointer,
; 417  : 	class _Const_pointer,
; 418  : 	class _Reference,
; 419  : 	class _Const_reference,
; 420  : 	class _Nodeptr_type>
; 421  : 	struct _List_iter_types
; 422  : 	{	// wraps types needed by iterators
; 423  : 	typedef _Value_type value_type;
; 424  : 	typedef _Size_type size_type;
; 425  : 	typedef _Difference_type difference_type;
; 426  : 	typedef _Pointer pointer;
; 427  : 	typedef _Const_pointer const_pointer;
; 428  : 	typedef _Reference reference;
; 429  : 	typedef _Const_reference const_reference;
; 430  : 	typedef _Nodeptr_type _Nodeptr;
; 431  : 	};
; 432  : 
; 433  : template<class _Value_type,
; 434  : 	class _Voidptr>
; 435  : 	struct _List_node
; 436  : 		{	// list node
; 437  : 		_Voidptr _Next;	// successor node, or first element if head
; 438  : 		_Voidptr _Prev;	// predecessor node, or last element if head
; 439  : 		_Value_type _Myval;	// the stored value, unused if head
; 440  : 
; 441  : 	private:
; 442  : 		_List_node& operator=(const _List_node&);
; 443  : 		};
; 444  : 
; 445  : template<class _Value_type>
; 446  : 	struct _List_node<_Value_type, void *>
; 447  : 		{	// list node
; 448  : 		typedef _List_node<_Value_type, void *> *_Nodeptr;
; 449  : 		_Nodeptr _Next;	// successor node, or first element if head
; 450  : 		_Nodeptr _Prev;	// predecessor node, or last element if head
; 451  : 		_Value_type _Myval;	// the stored value, unused if head
; 452  : 
; 453  : 	private:
; 454  : 		_List_node& operator=(const _List_node&);
; 455  : 		};
; 456  : 
; 457  : template<class _Ty>
; 458  : 	struct _List_simple_types
; 459  : 		: public _Simple_types<_Ty>
; 460  : 	{	// wraps types needed by iterators
; 461  : 	typedef _List_node<_Ty, void *> _Node;
; 462  : 	typedef _Node *_Nodeptr;
; 463  : 	};
; 464  : 
; 465  : template<class _Ty,
; 466  : 	class _Alloc0>
; 467  : 	struct _List_base_types
; 468  : 	{	// types needed for a container base
; 469  : 	typedef _Alloc0 _Alloc;
; 470  : 	typedef _List_base_types<_Ty, _Alloc> _Myt;
; 471  : 
; 472  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 473  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 474  : 
; 475  : 
; 476  : 	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
; 477  : 		_Voidptr;
; 478  : 	typedef _List_node<typename _Alty::value_type,
; 479  : 		_Voidptr> _Node;
; 480  : 
; 481  : 	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
; 482  : 	typedef typename _Alnod_type::pointer _Nodeptr;
; 483  : 	typedef _Nodeptr& _Nodepref;
; 484  : 
; 485  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 486  : 		_List_simple_types<typename _Alty::value_type>,
; 487  : 		_List_iter_types<typename _Alty::value_type,
; 488  : 			typename _Alty::size_type,
; 489  : 			typename _Alty::difference_type,
; 490  : 			typename _Alty::pointer,
; 491  : 			typename _Alty::const_pointer,
; 492  : 			typename _Alty::reference,
; 493  : 			typename _Alty::const_reference,
; 494  : 			_Nodeptr> >::type
; 495  : 		_Val_types;
; 496  : 	};
; 497  : 
; 498  : 		// TEMPLATE CLASS _List_val
; 499  : template<class _Val_types>
; 500  : 	class _List_val
; 501  : 		: public _Container_base
; 502  : 	{	// base class for list to hold data
; 503  : public:
; 504  : 	typedef _List_val<_Val_types> _Myt;
; 505  : 
; 506  : 	typedef typename _Val_types::_Nodeptr _Nodeptr;
; 507  : 	typedef _Nodeptr& _Nodepref;
; 508  : 
; 509  : 	typedef typename _Val_types::value_type value_type;
; 510  : 	typedef typename _Val_types::size_type size_type;
; 511  : 	typedef typename _Val_types::difference_type difference_type;
; 512  : 	typedef typename _Val_types::pointer pointer;
; 513  : 	typedef typename _Val_types::const_pointer const_pointer;
; 514  : 	typedef typename _Val_types::reference reference;
; 515  : 	typedef typename _Val_types::const_reference const_reference;
; 516  : 
; 517  : 	typedef _List_const_iterator<_Myt> const_iterator;
; 518  : 	typedef _List_iterator<_Myt> iterator;
; 519  : 
; 520  : 	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
; 521  : 	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;
; 522  : 
; 523  : 	_List_val()
; 524  : 		{	// initialize data
; 525  : 		this->_Myhead = 0;
; 526  : 		this->_Mysize = 0;
; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0037b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;

  0037e	89 10		 mov	 DWORD PTR [eax], edx

; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}

  00380	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  00383	e9 f8 fc ff ff	 jmp	 $LL7@Load
$LN26@Load:
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 323  : 			else if ( type == 5 )

  00388	83 f8 05	 cmp	 eax, 5
  0038b	0f 85 ef fc ff
	ff		 jne	 $LL7@Load

; 324  : 			{
; 325  : 				Token = GetToken();

  00391	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 326  : 
; 327  : 				if ( strcmp("end", TokenString) == 0 )

  00396	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0039b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL170@Load:
  003a0	8a 10		 mov	 dl, BYTE PTR [eax]
  003a2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003a4	75 1a		 jne	 SHORT $LN171@Load
  003a6	84 d2		 test	 dl, dl
  003a8	74 12		 je	 SHORT $LN172@Load
  003aa	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  003ad	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  003b0	75 0e		 jne	 SHORT $LN171@Load
  003b2	83 c0 02	 add	 eax, 2
  003b5	83 c1 02	 add	 ecx, 2
  003b8	84 d2		 test	 dl, dl
  003ba	75 e4		 jne	 SHORT $LL170@Load
$LN172@Load:
  003bc	33 c0		 xor	 eax, eax
  003be	eb 05		 jmp	 SHORT $LN173@Load
$LN171@Load:
  003c0	1b c0		 sbb	 eax, eax
  003c2	83 c8 01	 or	 eax, 1
$LN173@Load:
  003c5	85 c0		 test	 eax, eax
  003c7	74 43		 je	 SHORT $LN138@Load

; 332  : 					}
; 333  : 					break;
; 334  : 				}
; 335  : 
; 336  : 				int index = (int)TokenNumber;

  003c9	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 337  : 
; 338  : 				if( DS_LEVEL_RANGE(index) )

  003d1	85 f6		 test	 esi, esi
  003d3	78 2a		 js	 SHORT $LN31@Load
  003d5	33 c0		 xor	 eax, eax
  003d7	83 fe 06	 cmp	 esi, 6
  003da	0f 9e c0	 setle	 al
  003dd	85 c0		 test	 eax, eax
  003df	74 1e		 je	 SHORT $LN31@Load

; 339  : 				{
; 340  : 					Token = GetToken();

  003e1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 341  : 					m_BonusIncValue[index] = TokenNumber;

  003e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?TokenNumber@@3MA

; 342  : 				}
; 343  : 				else

  003ee	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  003f1	f3 0f 11 84 b3
	c0 24 00 00	 movss	 DWORD PTR [ebx+esi*4+9408], xmm0
  003fa	e9 81 fc ff ff	 jmp	 $LL7@Load
$LN31@Load:

; 344  : 				{
; 345  : 					Token = GetToken();

  003ff	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 346  : 				}
; 347  : 			}
; 348  : 		}

  00404	8b 45 fc	 mov	 eax, DWORD PTR _type$1$[ebp]
  00407	e9 74 fc ff ff	 jmp	 $LL7@Load
$LN138@Load:

; 328  : 				{
; 329  : 					for( i = 0; i < MAX_DEVILSQUARE_GROUND; i++)

  0040c	8d 73 38	 lea	 esi, DWORD PTR [ebx+56]
  0040f	8d bb c0 24 00
	00		 lea	 edi, DWORD PTR [ebx+9408]
  00415	bb 07 00 00 00	 mov	 ebx, 7
  0041a	66 0f 1f 44 00
	00		 npad	 6
$LL11@Load:

; 330  : 					{
; 331  : 						this->m_DevilSquareGround[i].IncBonus(m_BonusIncValue[i]);

  00420	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00424	51		 push	 ecx
  00425	8b ce		 mov	 ecx, esi
  00427	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042c	e8 00 00 00 00	 call	 ?IncBonus@CDevilSquareGround@@QAEXM@Z ; CDevilSquareGround::IncBonus
  00431	81 c6 1c 05 00
	00		 add	 esi, 1308		; 0000051cH
  00437	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  0043a	83 eb 01	 sub	 ebx, 1
  0043d	75 e1		 jne	 SHORT $LL11@Load
  0043f	8b 5d f8	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN10@Load:

; 193  : 		return;
; 194  : 	}
; 195  : 
; 196  : 	while ( true )
; 197  : 	{
; 198  : 		Token = GetToken();

  00442	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 199  : 
; 200  : 		if ( Token == 2 )

  00447	83 f8 02	 cmp	 eax, 2
  0044a	0f 85 20 fc ff
	ff		 jne	 $LL5@Load
  00450	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]
$LN139@Load:

; 349  : 	}
; 350  : 
; 351  : 	fclose (SMDFile );

  00453	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00459	e8 00 00 00 00	 call	 _fclose

; 352  : 	LogAdd("%s file load!", filename);

  0045e	56		 push	 esi
  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CEHBAEMJ@?$CFs?5file?5load?$CB?$AA@
  00464	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0046a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0046d	5f		 pop	 edi
  0046e	5e		 pop	 esi
  0046f	5b		 pop	 ebx

; 353  : }

  00470	8b e5		 mov	 esp, ebp
  00472	5d		 pop	 ebp
  00473	c2 04 00	 ret	 4
$LN176@Load:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1909 : 			_Xlength_error("list<T> too long");

  00476	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  0047b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN177@Load:
$LN175@Load:
  00480	cc		 int	 3
?Load@CDevilSquare@@QAEXPAD@Z ENDP			; CDevilSquare::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z
_TEXT	SEGMENT
_HitIndex$ = 8						; size = 4
_lpMonObj$ = 8						; size = 4
_lpObj$ = 12						; size = 4
_AttackDamage$ = 16					; size = 4
_MSBFlag$ = 20						; size = 4
?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjMonsterScoreDivision, COMDAT
; _this$ = ecx

; 1554 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1555 : 	::gObjMonsterHitDamageUserDel(lpMonObj);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpMonObj$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?gObjMonsterHitDamageUserDel@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterHitDamageUserDel

; 1556 : 	lpMonObj->Money = 0;
; 1557 : 
; 1558 : 	LPOBJ lpTargetObj;
; 1559 : 	int HitIndex;
; 1560 : 	int LastHitObjNum = ::gObjMonsterLastHitDamageUser(lpMonObj, HitIndex);

  0000d	8d 45 08	 lea	 eax, DWORD PTR _HitIndex$[ebp]
  00010	c7 86 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+204], 0
  0001a	50		 push	 eax
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?gObjMonsterLastHitDamageUser@@YAHPAUOBJECTSTRUCT@@AAH@Z ; gObjMonsterLastHitDamageUser
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1561 : 
; 1562 : 	if ( LastHitObjNum != -1 )

  00024	83 f8 ff	 cmp	 eax, -1
  00027	74 4d		 je	 SHORT $LN2@gObjMonste

; 1563 : 	{
; 1564 : 		lpTargetObj = &gObj[LastHitObjNum];

  00029	69 d0 40 27 00
	00		 imul	 edx, eax, 10048

; 1565 : 		int lc5 = (int)(lpMonObj->sHD[HitIndex].HitDamage / lpMonObj->MaxLife * lpMonObj->Level);
; 1566 : 		lc5 *= lpTargetObj->m_bDevilSquareIndex + 1;
; 1567 : 		lpTargetObj->m_nEventScore += lc5;

  0002f	8b 45 08	 mov	 eax, DWORD PTR _HitIndex$[ebp]
  00032	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00035	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0003b	66 0f 6e 8c 86
	d8 0f 00 00	 movd	 xmm1, DWORD PTR [esi+eax*4+4056]
  00044	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  0004b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0004e	66 0f 6e c0	 movd	 xmm0, eax
  00052	f3 0f 5e 8e dc
	00 00 00	 divss	 xmm1, DWORD PTR [esi+220]
  0005a	0f b6 82 34 12
	00 00		 movzx	 eax, BYTE PTR [edx+4660]
  00061	40		 inc	 eax
  00062	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00065	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00069	f3 0f 2c c9	 cvttss2si ecx, xmm1
  0006d	0f af c8	 imul	 ecx, eax
  00070	01 8a 28 12 00
	00		 add	 DWORD PTR [edx+4648], ecx
$LN2@gObjMonste:
  00076	5e		 pop	 esi

; 1568 : 	}
; 1569 : }

  00077	5d		 pop	 ebp
  00078	c2 10 00	 ret	 16			; 00000010H
?gObjMonsterScoreDivision@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjMonsterScoreDivision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z
_TEXT	SEGMENT
_lpTargetObj$GSCopy$1$ = -76				; size = 4
tv461 = -72						; size = 4
_totalexp$2$ = -68					; size = 4
_level$1$ = -68						; size = 4
_myexp$1$ = -64						; size = 4
_partynum$1$ = -64					; size = 4
_totalexp$1$ = -60					; size = 4
_viewplayer$1$ = -60					; size = 4
_totallevel$1$ = -56					; size = 4
_viewpercent$1$ = -52					; size = 4
tv469 = -52						; size = 4
tv467 = -52						; size = 4
_lpObj$GSCopy$1$ = -48					; size = 4
_n$2$ = -48						; size = 4
_exp$ = -44						; size = 8
_dis$ = -36						; size = 24
_maxexp$2$ = -12					; size = 4
tv550 = -12						; size = 4
tv548 = -12						; size = 4
tv484 = -12						; size = 4
tv483 = -12						; size = 4
_bCheckSetParty$ = -12					; size = 6
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_AttackDamage$ = 16					; size = 4
_MSBFlag$ = 20						; size = 4
?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjExpParty, COMDAT
; _this$ = ecx

; 1348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _lpTargetObj$[ebp]
  00019	89 75 d0	 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], esi
  0001c	89 7d b4	 mov	 DWORD PTR _lpTargetObj$GSCopy$1$[ebp], edi

; 1349 : 	int n;
; 1350 : 	__int64 exp;
; 1351 : 	__int64 maxexp = 0;
; 1352 : 	__int64 totalexp;
; 1353 : 	int level = ((lpTargetObj->Level + 25) * lpTargetObj->Level) / 3;
; 1354 : 	int number;
; 1355 : 	int partynum = 0;
; 1356 : 	int totallevel = 0;

  0001f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _totallevel$1$[ebp], 0
  00026	0f bf 87 96 00
	00 00		 movsx	 eax, WORD PTR [edi+150]
  0002d	8d 48 19	 lea	 ecx, DWORD PTR [eax+25]
  00030	0f af c8	 imul	 ecx, eax
  00033	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00038	f7 e9		 imul	 ecx

; 1357 : 	int partylevel;
; 1358 : 	int partycount;
; 1359 : 	int dis[6];
; 1360 : 	int viewplayer = 0;

  0003a	33 c9		 xor	 ecx, ecx
  0003c	8b c2		 mov	 eax, edx
  0003e	89 4d c4	 mov	 DWORD PTR _viewplayer$1$[ebp], ecx
  00041	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00044	03 c2		 add	 eax, edx

; 1361 : 	int viewpercent = 100;
; 1362 : 	BOOL bApplaySetParty = FALSE;
; 1363 : 	bool bCheckSetParty[6];
; 1364 : 	partynum = lpObj->PartyNumber;

  00046	8b d6		 mov	 edx, esi
  00048	89 45 bc	 mov	 DWORD PTR _level$1$[ebp], eax

; 1365 : 	LPOBJ lpPartyObj;
; 1366 : 
; 1367 : 	
; 1368 : 	int toplevel = 0;

  0004b	33 f6		 xor	 esi, esi
  0004d	8b 8a 0c 06 00
	00		 mov	 ecx, DWORD PTR [edx+1548]
  00053	8b c1		 mov	 eax, ecx
  00055	c1 e0 04	 shl	 eax, 4
  00058	8d 7e 05	 lea	 edi, DWORD PTR [esi+5]
  0005b	2b c1		 sub	 eax, ecx
  0005d	89 4d c0	 mov	 DWORD PTR _partynum$1$[ebp], ecx
  00060	8d 04 85 0c 00
	00 00		 lea	 eax, DWORD PTR ?gParty@@3VPartyClass@@A[eax*4+12]
  00067	89 45 b8	 mov	 DWORD PTR tv461[ebp], eax
  0006a	89 45 cc	 mov	 DWORD PTR tv469[ebp], eax
  0006d	0f 1f 00	 npad	 3
$LL4@gObjExpPar:

; 1372 : 	{
; 1373 : 		number = gParty.m_PartyS[partynum].Number[n];

  00070	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1374 : 
; 1375 : 		if ( number >= 0 )

  00072	85 c9		 test	 ecx, ecx
  00074	78 2d		 js	 SHORT $LN2@gObjExpPar

; 1376 : 		{
; 1377 : 			lpPartyObj = &gObj[number];

  00076	69 d9 40 27 00
	00		 imul	 ebx, ecx, 10048
  0007c	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj

; 1378 : 
; 1379 : 			distance = gObjCalDistance(lpObj,lpPartyObj);

  00082	53		 push	 ebx
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00089	8b 55 d0	 mov	 edx, DWORD PTR _lpObj$GSCopy$1$[ebp]
  0008c	83 c4 08	 add	 esp, 8

; 1380 : 
; 1381 : 			if( distance < 10 )

  0008f	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00092	7d 0c		 jge	 SHORT $LN68@gObjExpPar

; 1382 : 			{
; 1383 : 				if(lpPartyObj->Level > toplevel)

  00094	0f bf 83 96 00
	00 00		 movsx	 eax, WORD PTR [ebx+150]
  0009b	3b c6		 cmp	 eax, esi
  0009d	0f 4f f0	 cmovg	 esi, eax
$LN68@gObjExpPar:
  000a0	8b 45 cc	 mov	 eax, DWORD PTR tv469[ebp]
$LN2@gObjExpPar:

; 1369 : 	int distance;
; 1370 : 
; 1371 : 	for (n=0;n<MAX_USER_IN_PARTY;n++)

  000a3	83 c0 04	 add	 eax, 4
  000a6	89 45 cc	 mov	 DWORD PTR tv469[ebp], eax
  000a9	83 ef 01	 sub	 edi, 1
  000ac	75 c2		 jne	 SHORT $LL4@gObjExpPar

; 1384 : 				{
; 1385 : 					toplevel = lpPartyObj->Level;
; 1386 : 				}
; 1387 : 			}
; 1388 : 		}
; 1389 : 	}
; 1390 : 
; 1391 : 	if ( OBJMAX_RANGE(partynum) == FALSE )

  000ae	8b 4d c0	 mov	 ecx, DWORD PTR _partynum$1$[ebp]
  000b1	8b 7d b4	 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$1$[ebp]
  000b4	85 c9		 test	 ecx, ecx
  000b6	0f 88 9f 03 00
	00		 js	 $LN60@gObjExpPar
  000bc	33 c0		 xor	 eax, eax
  000be	81 f9 eb 2c 00
	00		 cmp	 ecx, 11499		; 00002cebH
  000c4	0f 9e c0	 setle	 al
  000c7	85 c0		 test	 eax, eax
  000c9	0f 84 8c 03 00
	00		 je	 $LN60@gObjExpPar

; 1394 : 		return;
; 1395 : 	}
; 1396 : 
; 1397 : 	partycount = gParty.m_PartyS[partynum].Count;
; 1398 : 
; 1399 : 	for ( n =0;n<MAX_USER_IN_PARTY;n++)

  000cf	8b 55 b8	 mov	 edx, DWORD PTR tv461[ebp]
  000d2	33 db		 xor	 ebx, ebx
  000d4	89 55 cc	 mov	 DWORD PTR tv467[ebp], edx
$LL7@gObjExpPar:

; 1400 : 	{
; 1401 : 		number = gParty.m_PartyS[partynum].Number[n];

  000d7	8b 02		 mov	 eax, DWORD PTR [edx]

; 1402 : 
; 1403 : 		if ( number >= 0 )

  000d9	85 c0		 test	 eax, eax
  000db	78 74		 js	 SHORT $LN5@gObjExpPar

; 1404 : 		{
; 1405 : 			lpPartyObj = &gObj[number];

  000dd	69 c8 40 27 00
	00		 imul	 ecx, eax, 10048

; 1406 : 
; 1407 : 			if ( lpTargetObj->MapNumber ==lpPartyObj->MapNumber )

  000e3	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  000e9	89 4d f4	 mov	 DWORD PTR tv483[ebp], ecx
  000ec	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f2	3a 81 23 01 00
	00		 cmp	 al, BYTE PTR [ecx+291]
  000f8	75 57		 jne	 SHORT $LN5@gObjExpPar

; 1408 : 			{
; 1409 : 				dis[n] = gObjCalDistance(lpTargetObj, &gObj[number]);

  000fa	51		 push	 ecx
  000fb	57		 push	 edi
  000fc	e8 00 00 00 00	 call	 ?gObjCalDistance@@YAHPAUOBJECTSTRUCT@@0@Z ; gObjCalDistance
  00101	83 c4 08	 add	 esp, 8
  00104	89 44 9d dc	 mov	 DWORD PTR _dis$[ebp+ebx*4], eax

; 1410 : 
; 1411 : 				if ( dis[n] < 10 )

  00108	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0010b	7d 41		 jge	 SHORT $LN70@gObjExpPar

; 1412 : 				{
; 1413 : 					lpPartyObj = &gObj[number];
; 1414 : 
; 1415 : 					if ( toplevel >= (lpPartyObj->Level + 200 ) ) // #formula

  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00112	8b 55 f4	 mov	 edx, DWORD PTR tv483[ebp]
  00115	0f bf 8c 02 96
	00 00 00	 movsx	 ecx, WORD PTR [edx+eax+150]
  0011d	8d 81 c8 00 00
	00		 lea	 eax, DWORD PTR [ecx+200]
  00123	3b f0		 cmp	 esi, eax
  00125	7c 0f		 jl	 SHORT $LN18@gObjExpPar

; 1416 : 					{
; 1417 : 						totallevel = totallevel + lpPartyObj->Level + 200;

  00127	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$1$[ebp]
  0012a	05 c8 00 00 00	 add	 eax, 200		; 000000c8H
  0012f	03 c1		 add	 eax, ecx
  00131	89 45 c8	 mov	 DWORD PTR _totallevel$1$[ebp], eax

; 1418 : 					}
; 1419 : 					else

  00134	eb 03		 jmp	 SHORT $LN19@gObjExpPar
$LN18@gObjExpPar:

; 1420 : 					{
; 1421 : 						totallevel += lpPartyObj->Level;

  00136	01 4d c8	 add	 DWORD PTR _totallevel$1$[ebp], ecx
$LN19@gObjExpPar:

; 1422 : 					}
; 1423 : 
; 1424 : 					viewplayer++;
; 1425 : 					bCheckSetParty[lpPartyObj->Class] = true;

  00139	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0013e	ff 45 c4	 inc	 DWORD PTR _viewplayer$1$[ebp]
  00141	0f b7 84 02 90
	00 00 00	 movzx	 eax, WORD PTR [edx+eax+144]
  00149	c6 44 05 f4 01	 mov	 BYTE PTR _bCheckSetParty$[ebp+eax], 1
$LN70@gObjExpPar:
  0014e	8b 55 cc	 mov	 edx, DWORD PTR tv467[ebp]
$LN5@gObjExpPar:

; 1394 : 		return;
; 1395 : 	}
; 1396 : 
; 1397 : 	partycount = gParty.m_PartyS[partynum].Count;
; 1398 : 
; 1399 : 	for ( n =0;n<MAX_USER_IN_PARTY;n++)

  00151	43		 inc	 ebx
  00152	83 c2 04	 add	 edx, 4
  00155	89 55 cc	 mov	 DWORD PTR tv467[ebp], edx
  00158	83 fb 05	 cmp	 ebx, 5
  0015b	0f 8c 76 ff ff
	ff		 jl	 $LL7@gObjExpPar

; 1426 : 				}
; 1427 : 			}
; 1428 : 		}
; 1429 : 	}
; 1430 : 
; 1431 : 	viewpercent += gParty.GetExpBonus(lpObj, lpTargetObj, partynum);

  00161	ff 75 c0	 push	 DWORD PTR _partynum$1$[ebp]
  00164	8b 75 d0	 mov	 esi, DWORD PTR _lpObj$GSCopy$1$[ebp]
  00167	b9 00 00 00 00	 mov	 ecx, OFFSET ?gParty@@3VPartyClass@@A ; gParty
  0016c	57		 push	 edi
  0016d	56		 push	 esi
  0016e	e8 00 00 00 00	 call	 ?GetExpBonus@PartyClass@@QAEHPAUOBJECTSTRUCT@@0H@Z ; PartyClass::GetExpBonus

; 1432 : 
; 1433 : 	if ( viewplayer > 1 )

  00173	8b 4d c4	 mov	 ecx, DWORD PTR _viewplayer$1$[ebp]
  00176	83 c0 64	 add	 eax, 100		; 00000064H
  00179	89 45 cc	 mov	 DWORD PTR _viewpercent$1$[ebp], eax
  0017c	83 f9 01	 cmp	 ecx, 1
  0017f	7e 0a		 jle	 SHORT $LN20@gObjExpPar

; 1434 : 	{
; 1435 : 		partylevel = totallevel / viewplayer;

  00181	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$1$[ebp]
  00184	99		 cdq
  00185	f7 f9		 idiv	 ecx
  00187	8b d8		 mov	 ebx, eax

; 1436 : 	}
; 1437 : 	else

  00189	eb 03		 jmp	 SHORT $LN21@gObjExpPar
$LN20@gObjExpPar:

; 1438 : 	{
; 1439 : 		partylevel = totallevel;

  0018b	8b 5d c8	 mov	 ebx, DWORD PTR _totallevel$1$[ebp]
$LN21@gObjExpPar:

; 1440 : 	}
; 1441 : 	
; 1442 : 	if ( (lpTargetObj->Level +10) < partylevel )

  0018e	0f b7 87 96 00
	00 00		 movzx	 eax, WORD PTR [edi+150]
  00195	0f bf d0	 movsx	 edx, ax
  00198	89 55 f4	 mov	 DWORD PTR tv484[ebp], edx
  0019b	8d 42 0a	 lea	 eax, DWORD PTR [edx+10]
  0019e	3b c3		 cmp	 eax, ebx
  001a0	7d 0e		 jge	 SHORT $LN69@gObjExpPar

; 1443 : 	{
; 1444 : 		level = (level * (lpTargetObj->Level+10) ) / partylevel;

  001a2	0f af 45 bc	 imul	 eax, DWORD PTR _level$1$[ebp]
  001a6	99		 cdq
  001a7	f7 fb		 idiv	 ebx
  001a9	8b 55 f4	 mov	 edx, DWORD PTR tv484[ebp]
  001ac	8b d8		 mov	 ebx, eax
  001ae	eb 03		 jmp	 SHORT $LN22@gObjExpPar
$LN69@gObjExpPar:
  001b0	8b 5d bc	 mov	 ebx, DWORD PTR _level$1$[ebp]
$LN22@gObjExpPar:

; 1445 : 	}
; 1446 : 
; 1447 : 	if ( lpTargetObj->Level >= 65 )

  001b3	0f b7 87 96 00
	00 00		 movzx	 eax, WORD PTR [edi+150]
  001ba	66 83 f8 41	 cmp	 ax, 65			; 00000041H
  001be	7c 3f		 jl	 SHORT $LN25@gObjExpPar

; 1448 : 	{
; 1449 : 		if ( viewplayer == 1 )

  001c0	83 f9 01	 cmp	 ecx, 1
  001c3	75 15		 jne	 SHORT $LN24@gObjExpPar

; 1450 : 		{
; 1451 : 			level += (lpTargetObj->Level - 64) * (lpTargetObj->Level/ 4);

  001c5	8d 4a c0	 lea	 ecx, DWORD PTR [edx-64]
  001c8	8b c2		 mov	 eax, edx
  001ca	99		 cdq
  001cb	83 e2 03	 and	 edx, 3
  001ce	03 c2		 add	 eax, edx
  001d0	c1 f8 02	 sar	 eax, 2
  001d3	0f af c8	 imul	 ecx, eax
  001d6	03 d9		 add	 ebx, ecx

; 1452 : 		}
; 1453 : 		else

  001d8	eb 25		 jmp	 SHORT $LN25@gObjExpPar
$LN24@gObjExpPar:

; 1454 : 		{
; 1455 : 			level += (int)(200.0 - (lpObj->Level * 0.2));

  001da	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  001e1	66 0f 6e c0	 movd	 xmm0, eax
  001e5	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001e9	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3fc999999999999a
  001f1	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4069000000000000
  001f9	f2 0f 2c c0	 cvttsd2si eax, xmm0
  001fd	2b d8		 sub	 ebx, eax
$LN25@gObjExpPar:

; 1456 : 		}
; 1457 : 	}
; 1458 : 
; 1459 : 	if ( level > 0 )

  001ff	85 db		 test	 ebx, ebx
  00201	7e 3b		 jle	 SHORT $LN26@gObjExpPar

; 1460 : 	{
; 1461 : 		maxexp = level / 2;

  00203	8b c3		 mov	 eax, ebx
  00205	99		 cdq
  00206	2b c2		 sub	 eax, edx
  00208	d1 f8		 sar	 eax, 1
  0020a	99		 cdq
  0020b	8b f0		 mov	 esi, eax
  0020d	8b c2		 mov	 eax, edx
  0020f	89 45 f4	 mov	 DWORD PTR _maxexp$2$[ebp], eax

; 1466 : 	}
; 1467 : 
; 1468 : 	if ( maxexp < 1 )

  00212	85 c0		 test	 eax, eax
  00214	7c 2a		 jl	 SHORT $LN61@gObjExpPar
  00216	7f 05		 jg	 SHORT $LN62@gObjExpPar
  00218	83 fe 01	 cmp	 esi, 1
  0021b	72 23		 jb	 SHORT $LN61@gObjExpPar
$LN62@gObjExpPar:

; 1471 : 	}
; 1472 : 	else
; 1473 : 	{
; 1474 : 		totalexp = level + rand()%maxexp;

  0021d	e8 00 00 00 00	 call	 _rand
  00222	ff 75 f4	 push	 DWORD PTR _maxexp$2$[ebp]
  00225	99		 cdq
  00226	56		 push	 esi
  00227	52		 push	 edx
  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 __allrem
  0022e	8b f0		 mov	 esi, eax
  00230	8b ca		 mov	 ecx, edx
  00232	8b c3		 mov	 eax, ebx
  00234	99		 cdq
  00235	03 f0		 add	 esi, eax
  00237	13 ca		 adc	 ecx, edx
  00239	89 4d bc	 mov	 DWORD PTR _totalexp$2$[ebp], ecx
  0023c	eb 0a		 jmp	 SHORT $LN74@gObjExpPar
$LN26@gObjExpPar:

; 1462 : 	}
; 1463 : 	else
; 1464 : 	{
; 1465 : 		level = 0;

  0023e	33 db		 xor	 ebx, ebx
$LN61@gObjExpPar:

; 1469 : 	{
; 1470 : 		totalexp = level;

  00240	8b c3		 mov	 eax, ebx
  00242	99		 cdq
  00243	8b f0		 mov	 esi, eax
  00245	89 55 bc	 mov	 DWORD PTR _totalexp$2$[ebp], edx
$LN74@gObjExpPar:

; 1475 : 	}
; 1476 : 
; 1477 : 	if ( lpTargetObj->Type == OBJ_MONSTER )

  00248	80 7f 50 02	 cmp	 BYTE PTR [edi+80], 2
  0024c	89 75 c4	 mov	 DWORD PTR _totalexp$1$[ebp], esi
  0024f	75 06		 jne	 SHORT $LN30@gObjExpPar

; 1478 : 	{
; 1479 : 		lpTargetObj->Money = (int)totalexp;

  00251	89 b7 cc 00 00
	00		 mov	 DWORD PTR [edi+204], esi
$LN30@gObjExpPar:
  00257	8b 45 b8	 mov	 eax, DWORD PTR tv461[ebp]

; 1480 : 	}
; 1481 : 
; 1482 : 	for ( n=0;n<MAX_USER_IN_PARTY;n++)

  0025a	33 c9		 xor	 ecx, ecx
  0025c	89 4d d0	 mov	 DWORD PTR _n$2$[ebp], ecx
  0025f	90		 npad	 1
$LL10@gObjExpPar:

; 1483 : 	{
; 1484 : 		number = gParty.m_PartyS[partynum].Number[n];

  00260	8b 00		 mov	 eax, DWORD PTR [eax]

; 1485 : 
; 1486 : 		if ( number >= 0 )

  00262	85 c0		 test	 eax, eax
  00264	0f 88 c5 01 00
	00		 js	 $LN8@gObjExpPar

; 1487 : 		{
; 1488 : 			lpPartyObj = &gObj[number];

  0026a	69 d8 40 27 00
	00		 imul	 ebx, eax, 10048

; 1489 : 
; 1490 : 			if ( lpTargetObj->MapNumber == lpPartyObj->MapNumber )

  00270	8a 87 23 01 00
	00		 mov	 al, BYTE PTR [edi+291]
  00276	03 1d 00 00 00
	00		 add	 ebx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0027c	3a 83 23 01 00
	00		 cmp	 al, BYTE PTR [ebx+291]
  00282	0f 85 a7 01 00
	00		 jne	 $LN8@gObjExpPar

; 1491 : 			{
; 1492 : 				if ( dis[n] < 10 )

  00288	83 7c 8d dc 0a	 cmp	 DWORD PTR _dis$[ebp+ecx*4], 10 ; 0000000aH
  0028d	0f 8d 9c 01 00
	00		 jge	 $LN8@gObjExpPar

; 1493 : 				{
; 1494 : 					DWORD myexp = gLevelExperience[lpPartyObj->Level];

  00293	0f bf 83 96 00
	00 00		 movsx	 eax, WORD PTR [ebx+150]

; 1495 : 					exp = ((totalexp * viewpercent* lpPartyObj->Level ) / totallevel ) / 100;

  0029a	ff 75 bc	 push	 DWORD PTR _totalexp$2$[ebp]
  0029d	56		 push	 esi
  0029e	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[eax*4]
  002a5	f7 6d cc	 imul	 DWORD PTR _viewpercent$1$[ebp]
  002a8	89 4d c0	 mov	 DWORD PTR _myexp$1$[ebp], ecx
  002ab	52		 push	 edx
  002ac	50		 push	 eax
  002ad	e8 00 00 00 00	 call	 __allmul
  002b2	8b f0		 mov	 esi, eax
  002b4	8b ca		 mov	 ecx, edx
  002b6	8b 45 c8	 mov	 eax, DWORD PTR _totallevel$1$[ebp]
  002b9	99		 cdq
  002ba	52		 push	 edx
  002bb	50		 push	 eax
  002bc	51		 push	 ecx
  002bd	56		 push	 esi
  002be	e8 00 00 00 00	 call	 __alldiv
  002c3	6a 00		 push	 0
  002c5	6a 64		 push	 100			; 00000064H
  002c7	52		 push	 edx
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 __alldiv
  002ce	89 55 d8	 mov	 DWORD PTR _exp$[ebp+4], edx
  002d1	8b c8		 mov	 ecx, eax
  002d3	89 4d d4	 mov	 DWORD PTR _exp$[ebp], ecx

; 1496 : 
; 1497 : 					if ( exp > myexp  )

  002d6	85 d2		 test	 edx, edx
  002d8	7c 13		 jl	 SHORT $LN34@gObjExpPar
  002da	8b 45 c0	 mov	 eax, DWORD PTR _myexp$1$[ebp]
  002dd	7f 04		 jg	 SHORT $LN63@gObjExpPar
  002df	3b c8		 cmp	 ecx, eax
  002e1	76 0a		 jbe	 SHORT $LN34@gObjExpPar
$LN63@gObjExpPar:

; 1498 : 					{
; 1499 : 						exp = myexp;

  002e3	89 45 d4	 mov	 DWORD PTR _exp$[ebp], eax
  002e6	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp+4], 0
$LN34@gObjExpPar:

; 1500 : 					}
; 1501 : 
; 1502 : 					if( lpPartyObj->Type == OBJ_USER )

  002ed	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  002f1	75 0e		 jne	 SHORT $LN36@gObjExpPar

; 1503 : 					{
; 1504 : 						if ( lpTargetObj->Type == OBJ_USER )

  002f3	80 7f 50 01	 cmp	 BYTE PTR [edi+80], 1
  002f7	75 08		 jne	 SHORT $LN36@gObjExpPar

; 1505 : 						{
; 1506 : 							exp = 0;

  002f9	0f 57 c0	 xorps	 xmm0, xmm0
  002fc	66 0f 13 45 d4	 movlpd	 QWORD PTR _exp$[ebp], xmm0
$LN36@gObjExpPar:

; 1507 : 						}
; 1508 : 					}
; 1509 : 
; 1510 : 					if ( g_MasterExp.IsEnabled(lpPartyObj) == FALSE )

  00301	53		 push	 ebx
  00302	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  00307	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  0030c	85 c0		 test	 eax, eax
  0030e	75 6e		 jne	 SHORT $LN37@gObjExpPar

; 1511 : 					{
; 1512 : 						exp += (exp * m_ObjBill[lpPartyObj->m_Index].GetExp()) / 100;

  00310	8b 03		 mov	 eax, DWORD PTR [ebx]
  00312	8b 7d d8	 mov	 edi, DWORD PTR _exp$[ebp+4]
  00315	8b 75 d4	 mov	 esi, DWORD PTR _exp$[ebp]
  00318	57		 push	 edi
  00319	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0031c	c1 e0 04	 shl	 eax, 4
  0031f	56		 push	 esi
  00320	8b 80 18 00 00
	00		 mov	 eax, DWORD PTR ?m_ObjBill@@3PAVBILL_CLASS@@A[eax+24]
  00326	99		 cdq
  00327	52		 push	 edx
  00328	50		 push	 eax
  00329	e8 00 00 00 00	 call	 __allmul
  0032e	6a 00		 push	 0
  00330	6a 64		 push	 100			; 00000064H
  00332	52		 push	 edx
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 __alldiv
  00339	03 f0		 add	 esi, eax

; 1513 : 						exp = int(exp * g_MapRateInfo.GetExp(lpPartyObj->MapNumber));

  0033b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapRateInfo@@3VMapRateInfo@@A ; g_MapRateInfo
  00340	89 75 d4	 mov	 DWORD PTR _exp$[ebp], esi
  00343	13 fa		 adc	 edi, edx
  00345	89 7d d8	 mov	 DWORD PTR _exp$[ebp+4], edi
  00348	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 ?GetExp@MapRateInfo@@QAEMF@Z ; MapRateInfo::GetExp
  00355	8b 55 d8	 mov	 edx, DWORD PTR _exp$[ebp+4]
  00358	8b 4d d4	 mov	 ecx, DWORD PTR _exp$[ebp]
  0035b	e8 00 00 00 00	 call	 __ltod3
  00360	8b 7d b4	 mov	 edi, DWORD PTR _lpTargetObj$GSCopy$1$[ebp]
  00363	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00367	f3 0f 11 45 f4	 movss	 DWORD PTR tv550[ebp], xmm0
  0036c	d8 4d f4	 fmul	 DWORD PTR tv550[ebp]
  0036f	d9 5d f4	 fstp	 DWORD PTR tv548[ebp]
  00372	f3 0f 2c 45 f4	 cvttss2si eax, DWORD PTR tv548[ebp]
  00377	99		 cdq
  00378	89 45 d4	 mov	 DWORD PTR _exp$[ebp], eax
  0037b	89 55 d8	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN37@gObjExpPar:

; 1514 : 					}
; 1515 : 
; 1516 : 					if ( g_CrywolfSync.GetOccupationState() == 1 && g_iCrywolfApplyMvpPenalty != FALSE)

  0037e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00383	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  00388	83 f8 01	 cmp	 eax, 1
  0038b	75 34		 jne	 SHORT $LN66@gObjExpPar
  0038d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  00394	74 2b		 je	 SHORT $LN66@gObjExpPar

; 1517 : 					{
; 1518 : 						exp =  (exp * g_CrywolfSync.GetGettingExpPenaltyRate()) / 100;

  00396	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  0039b	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  003a0	ff 75 d8	 push	 DWORD PTR _exp$[ebp+4]
  003a3	99		 cdq
  003a4	ff 75 d4	 push	 DWORD PTR _exp$[ebp]
  003a7	52		 push	 edx
  003a8	50		 push	 eax
  003a9	e8 00 00 00 00	 call	 __allmul
  003ae	6a 00		 push	 0
  003b0	6a 64		 push	 100			; 00000064H
  003b2	52		 push	 edx
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 __alldiv
  003b9	89 45 d4	 mov	 DWORD PTR _exp$[ebp], eax
  003bc	89 55 d8	 mov	 DWORD PTR _exp$[ebp+4], edx
  003bf	eb 06		 jmp	 SHORT $LN38@gObjExpPar
$LN66@gObjExpPar:
  003c1	8b 55 d8	 mov	 edx, DWORD PTR _exp$[ebp+4]
  003c4	8b 45 d4	 mov	 eax, DWORD PTR _exp$[ebp]
$LN38@gObjExpPar:

; 1519 : 					}
; 1520 : 
; 1521 : 					if ( exp > 0 )

  003c7	85 d2		 test	 edx, edx
  003c9	7c 48		 jl	 SHORT $LN41@gObjExpPar
  003cb	7f 04		 jg	 SHORT $LN64@gObjExpPar
  003cd	85 c0		 test	 eax, eax
  003cf	74 42		 je	 SHORT $LN41@gObjExpPar
$LN64@gObjExpPar:

; 1522 : 					{
; 1523 : 						if ( lpPartyObj->Type == OBJ_USER )

  003d1	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  003d5	75 55		 jne	 SHORT $LN72@gObjExpPar

; 1524 : 						{
; 1525 : 
; 1526 : 							CheckItemOptForGetExpEx(lpPartyObj,exp,0);

  003d7	6a 00		 push	 0
  003d9	8d 45 d4	 lea	 eax, DWORD PTR _exp$[ebp]
  003dc	50		 push	 eax
  003dd	53		 push	 ebx
  003de	e8 00 00 00 00	 call	 ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx

; 1527 : 
; 1528 : 							lpPartyObj->Experience += (DWORD)exp;

  003e3	8b 45 d4	 mov	 eax, DWORD PTR _exp$[ebp]
  003e6	01 83 a0 00 00
	00		 add	 DWORD PTR [ebx+160], eax

; 1529 : 							lpPartyObj->m_nEventExp += (int)exp;

  003ec	8b 45 d4	 mov	 eax, DWORD PTR _exp$[ebp]
  003ef	01 83 2c 12 00
	00		 add	 DWORD PTR [ebx+4652], eax

; 1530 : 						
; 1531 : 							if ( gObjLevelUp(lpPartyObj, &exp, lpTargetObj->Class, EVENT_TYPE_PARTY) == false )

  003f5	0f b7 87 90 00
	00 00		 movzx	 eax, WORD PTR [edi+144]
  003fc	6a 01		 push	 1
  003fe	50		 push	 eax
  003ff	8d 45 d4	 lea	 eax, DWORD PTR _exp$[ebp]
  00402	50		 push	 eax
  00403	53		 push	 ebx
  00404	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@PA_JHH@Z ; gObjLevelUp
  00409	83 c4 1c	 add	 esp, 28			; 0000001cH
  0040c	84 c0		 test	 al, al
  0040e	74 1c		 je	 SHORT $LN72@gObjExpPar
  00410	8b 45 d4	 mov	 eax, DWORD PTR _exp$[ebp]
$LN41@gObjExpPar:

; 1532 : 							{
; 1533 : 								continue;
; 1534 : 							}
; 1535 : 						}
; 1536 : 					}
; 1537 : 
; 1538 : 					if ( lpPartyObj->Type == OBJ_USER )

  00413	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  00417	75 13		 jne	 SHORT $LN72@gObjExpPar

; 1539 : 					{
; 1540 : 						GCKillPlayerExpSend(lpPartyObj->m_Index, lpTargetObj->m_Index,(int)exp, AttackDamage, MSBFlag);

  00419	ff 75 14	 push	 DWORD PTR _MSBFlag$[ebp]
  0041c	ff 75 10	 push	 DWORD PTR _AttackDamage$[ebp]
  0041f	50		 push	 eax
  00420	ff 37		 push	 DWORD PTR [edi]
  00422	ff 33		 push	 DWORD PTR [ebx]
  00424	e8 00 00 00 00	 call	 ?GCKillPlayerExpSend@@YAXHHHHH@Z ; GCKillPlayerExpSend
  00429	83 c4 14	 add	 esp, 20			; 00000014H
$LN72@gObjExpPar:
  0042c	8b 4d d0	 mov	 ecx, DWORD PTR _n$2$[ebp]
$LN8@gObjExpPar:

; 1480 : 	}
; 1481 : 
; 1482 : 	for ( n=0;n<MAX_USER_IN_PARTY;n++)

  0042f	8b 45 b8	 mov	 eax, DWORD PTR tv461[ebp]
  00432	41		 inc	 ecx
  00433	8b 75 c4	 mov	 esi, DWORD PTR _totalexp$1$[ebp]
  00436	83 c0 04	 add	 eax, 4
  00439	89 4d d0	 mov	 DWORD PTR _n$2$[ebp], ecx
  0043c	89 45 b8	 mov	 DWORD PTR tv461[ebp], eax
  0043f	83 f9 05	 cmp	 ecx, 5
  00442	0f 8c 18 fe ff
	ff		 jl	 $LL10@gObjExpPar
  00448	5f		 pop	 edi
  00449	5e		 pop	 esi
  0044a	5b		 pop	 ebx

; 1541 : 					}
; 1542 : 				}
; 1543 : 			}
; 1544 : 		}
; 1545 : 	}
; 1546 : }

  0044b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0044e	33 cd		 xor	 ecx, ebp
  00450	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00455	8b e5		 mov	 esp, ebp
  00457	5d		 pop	 ebp
  00458	c2 10 00	 ret	 16			; 00000010H
$LN60@gObjExpPar:

; 1392 : 	{
; 1393 : 		LogAdd("error : %s %d", __FILE__, __LINE__);

  0045b	68 71 05 00 00	 push	 1393			; 00000571H
  00460	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HPOBAIIK@DevilSquare?4cpp?$AA@
  00465	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKAEPJAF@error?5?3?5?$CFs?5?$CFd?$AA@
  0046a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1541 : 					}
; 1542 : 				}
; 1543 : 			}
; 1544 : 		}
; 1545 : 	}
; 1546 : }

  00470	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00473	83 c4 0c	 add	 esp, 12			; 0000000cH
  00476	33 cd		 xor	 ecx, ebp
  00478	5f		 pop	 edi
  00479	5e		 pop	 esi
  0047a	5b		 pop	 ebx
  0047b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00480	8b e5		 mov	 esp, ebp
  00482	5d		 pop	 ebp
  00483	c2 10 00	 ret	 16			; 00000010H
?gObjExpParty@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjExpParty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z
_TEXT	SEGMENT
_exp$ = -8						; size = 8
tv417 = -4						; size = 4
tv159 = 8						; size = 4
tv70 = 8						; size = 4
_maxexp$2$ = 8						; size = 4
_lpObj$ = 8						; size = 4
_lpTargetObj$ = 12					; size = 4
_dmg$ = 16						; size = 4
_tot_dmg$ = 20						; size = 4
?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z PROC ; CDevilSquare::gObjMonsterExpSingle, COMDAT
; _this$ = ecx

; 1266 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1267 : 	__int64 exp;
; 1268 : 	__int64 maxexp = 0;
; 1269 : 	int level = ((lpTargetObj->Level + 25) * lpTargetObj->Level) / 3;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _lpTargetObj$[ebp]
  00009	53		 push	 ebx

; 1270 : 
; 1271 : 	if ( (lpTargetObj->Level + 10) < lpObj->Level  )

  0000a	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  0000d	56		 push	 esi
  0000e	0f b7 80 96 00
	00 00		 movzx	 eax, WORD PTR [eax+150]
  00015	57		 push	 edi
  00016	0f bf f8	 movsx	 edi, ax
  00019	89 45 fc	 mov	 DWORD PTR tv417[ebp], eax
  0001c	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  00021	8d 4f 19	 lea	 ecx, DWORD PTR [edi+25]
  00024	0f af cf	 imul	 ecx, edi
  00027	f7 e9		 imul	 ecx
  00029	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  00030	8d 47 0a	 lea	 eax, DWORD PTR [edi+10]
  00033	8b f2		 mov	 esi, edx
  00035	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00038	03 f2		 add	 esi, edx
  0003a	3b c1		 cmp	 eax, ecx
  0003c	7d 08		 jge	 SHORT $LN2@gObjMonste

; 1272 : 	{
; 1273 : 		level = (level*(lpTargetObj->Level + 10))/(lpObj->Level);

  0003e	0f af c6	 imul	 eax, esi
  00041	99		 cdq
  00042	f7 f9		 idiv	 ecx
  00044	8b f0		 mov	 esi, eax
$LN2@gObjMonste:

; 1274 : 	}
; 1275 : 
; 1276 : 	if ( lpTargetObj->Level >= 65 )

  00046	66 83 7d fc 41	 cmp	 WORD PTR tv417[ebp], 65	; 00000041H
  0004b	7c 13		 jl	 SHORT $LN3@gObjMonste

; 1277 : 	{
; 1278 : 		level += (lpTargetObj->Level-64)*(lpTargetObj->Level / 4);

  0004d	8b c7		 mov	 eax, edi
  0004f	8d 4f c0	 lea	 ecx, DWORD PTR [edi-64]
  00052	99		 cdq
  00053	83 e2 03	 and	 edx, 3
  00056	03 c2		 add	 eax, edx
  00058	c1 f8 02	 sar	 eax, 2
  0005b	0f af c8	 imul	 ecx, eax
  0005e	03 f1		 add	 esi, ecx
$LN3@gObjMonste:

; 1279 : 	}
; 1280 : 
; 1281 : 	if ( level > 0 )

  00060	85 f6		 test	 esi, esi
  00062	7e 38		 jle	 SHORT $LN4@gObjMonste

; 1282 : 	{
; 1283 : 		maxexp = level / 2;

  00064	8b c6		 mov	 eax, esi
  00066	99		 cdq
  00067	2b c2		 sub	 eax, edx
  00069	d1 f8		 sar	 eax, 1
  0006b	99		 cdq
  0006c	8b f8		 mov	 edi, eax
  0006e	8b c2		 mov	 eax, edx
  00070	89 45 08	 mov	 DWORD PTR _maxexp$2$[ebp], eax

; 1288 : 	}
; 1289 : 
; 1290 : 	if ( maxexp < 1 )

  00073	85 c0		 test	 eax, eax
  00075	7c 27		 jl	 SHORT $LN17@gObjMonste
  00077	7f 05		 jg	 SHORT $LN18@gObjMonste
  00079	83 ff 01	 cmp	 edi, 1
  0007c	72 20		 jb	 SHORT $LN17@gObjMonste
$LN18@gObjMonste:

; 1293 : 	}
; 1294 : 	else
; 1295 : 	{
; 1296 : 		exp = level + rand()%maxexp;

  0007e	e8 00 00 00 00	 call	 _rand
  00083	ff 75 08	 push	 DWORD PTR _maxexp$2$[ebp]
  00086	99		 cdq
  00087	57		 push	 edi
  00088	52		 push	 edx
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 __allrem
  0008f	8b c8		 mov	 ecx, eax
  00091	8b fa		 mov	 edi, edx
  00093	8b c6		 mov	 eax, esi
  00095	99		 cdq
  00096	03 c8		 add	 ecx, eax
  00098	13 fa		 adc	 edi, edx
  0009a	eb 09		 jmp	 SHORT $LN7@gObjMonste
$LN4@gObjMonste:

; 1284 : 	}
; 1285 : 	else
; 1286 : 	{
; 1287 : 		level = 0;

  0009c	33 f6		 xor	 esi, esi
$LN17@gObjMonste:

; 1291 : 	{
; 1292 : 		exp = level;

  0009e	8b c6		 mov	 eax, esi
  000a0	99		 cdq
  000a1	8b c8		 mov	 ecx, eax
  000a3	8b fa		 mov	 edi, edx
$LN7@gObjMonste:

; 1297 : 	}
; 1298 : 
; 1299 : 	exp = (dmg * exp)/tot_dmg;

  000a5	8b 45 10	 mov	 eax, DWORD PTR _dmg$[ebp]
  000a8	57		 push	 edi
  000a9	99		 cdq
  000aa	51		 push	 ecx
  000ab	52		 push	 edx
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 __allmul
  000b2	8b f0		 mov	 esi, eax
  000b4	8b ca		 mov	 ecx, edx
  000b6	8b 45 14	 mov	 eax, DWORD PTR _tot_dmg$[ebp]
  000b9	99		 cdq
  000ba	52		 push	 edx
  000bb	50		 push	 eax
  000bc	51		 push	 ecx
  000bd	56		 push	 esi
  000be	e8 00 00 00 00	 call	 __alldiv

; 1300 : 
; 1301 : 	DWORD mymaxexp = gLevelExperience[lpObj->Level];

  000c3	0f bf 8b 96 00
	00 00		 movsx	 ecx, WORD PTR [ebx+150]
  000ca	89 45 f8	 mov	 DWORD PTR _exp$[ebp], eax
  000cd	89 55 fc	 mov	 DWORD PTR _exp$[ebp+4], edx
  000d0	8b 0c 8d 00 00
	00 00		 mov	 ecx, DWORD PTR ?gLevelExperience@@3PAKA[ecx*4]

; 1302 : 
; 1303 : 	__int64 mymaxexp_ = mymaxexp;
; 1304 : 
; 1305 : 	if ( exp > mymaxexp_ )

  000d7	85 d2		 test	 edx, edx
  000d9	7c 12		 jl	 SHORT $LN8@gObjMonste
  000db	7f 04		 jg	 SHORT $LN19@gObjMonste
  000dd	3b c1		 cmp	 eax, ecx
  000df	76 0c		 jbe	 SHORT $LN8@gObjMonste
$LN19@gObjMonste:

; 1306 : 	{
; 1307 : 		exp = mymaxexp;

  000e1	8b c1		 mov	 eax, ecx
  000e3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _exp$[ebp+4], 0
  000ea	89 45 f8	 mov	 DWORD PTR _exp$[ebp], eax
$LN8@gObjMonste:

; 1308 : 	}
; 1309 : 
; 1310 : 	lpTargetObj->Money += (int)exp;

  000ed	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]

; 1311 : 
; 1312 : 	if ( g_MasterExp.IsEnabled(lpObj) == FALSE )

  000f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterExp@@3VCMasterExperience@@A ; g_MasterExp
  000f5	53		 push	 ebx
  000f6	01 86 cc 00 00
	00		 add	 DWORD PTR [esi+204], eax
  000fc	e8 00 00 00 00	 call	 ?IsEnabled@CMasterExperience@@QAEHPAUOBJECTSTRUCT@@@Z ; CMasterExperience::IsEnabled
  00101	85 c0		 test	 eax, eax
  00103	75 6e		 jne	 SHORT $LN9@gObjMonste

; 1313 : 	{
; 1314 : 		exp += (exp * m_ObjBill[lpObj->m_Index].GetExp()) / 100;

  00105	8b 03		 mov	 eax, DWORD PTR [ebx]
  00107	8b 7d fc	 mov	 edi, DWORD PTR _exp$[ebp+4]
  0010a	8b 75 f8	 mov	 esi, DWORD PTR _exp$[ebp]
  0010d	57		 push	 edi
  0010e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00111	c1 e0 04	 shl	 eax, 4
  00114	56		 push	 esi
  00115	8b 80 18 00 00
	00		 mov	 eax, DWORD PTR ?m_ObjBill@@3PAVBILL_CLASS@@A[eax+24]
  0011b	99		 cdq
  0011c	52		 push	 edx
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 __allmul
  00123	6a 00		 push	 0
  00125	6a 64		 push	 100			; 00000064H
  00127	52		 push	 edx
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 __alldiv
  0012e	03 f0		 add	 esi, eax

; 1315 : 		exp = int(exp * g_MapRateInfo.GetExp(lpObj->MapNumber));

  00130	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapRateInfo@@3VMapRateInfo@@A ; g_MapRateInfo
  00135	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  0013c	13 fa		 adc	 edi, edx
  0013e	89 75 f8	 mov	 DWORD PTR _exp$[ebp], esi
  00141	50		 push	 eax
  00142	89 7d fc	 mov	 DWORD PTR _exp$[ebp+4], edi
  00145	e8 00 00 00 00	 call	 ?GetExp@MapRateInfo@@QAEMF@Z ; MapRateInfo::GetExp
  0014a	8b 55 fc	 mov	 edx, DWORD PTR _exp$[ebp+4]
  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _exp$[ebp]
  00150	e8 00 00 00 00	 call	 __ltod3
  00155	8b 75 0c	 mov	 esi, DWORD PTR _lpTargetObj$[ebp]
  00158	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0015c	f3 0f 11 45 08	 movss	 DWORD PTR tv159[ebp], xmm0
  00161	d8 4d 08	 fmul	 DWORD PTR tv159[ebp]
  00164	d9 5d 08	 fstp	 DWORD PTR tv70[ebp]
  00167	f3 0f 2c 45 08	 cvttss2si eax, DWORD PTR tv70[ebp]
  0016c	99		 cdq
  0016d	89 45 f8	 mov	 DWORD PTR _exp$[ebp], eax
  00170	89 55 fc	 mov	 DWORD PTR _exp$[ebp+4], edx
$LN9@gObjMonste:

; 1316 : 	}
; 1317 : 
; 1318 : 	if ( g_CrywolfSync.GetOccupationState() == 1 && g_iCrywolfApplyMvpPenalty != FALSE)

  00173	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00178	e8 00 00 00 00	 call	 ?GetOccupationState@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetOccupationState
  0017d	83 f8 01	 cmp	 eax, 1
  00180	75 34		 jne	 SHORT $LN21@gObjMonste
  00182	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_iCrywolfApplyMvpPenalty@@3HA, 0 ; g_iCrywolfApplyMvpPenalty
  00189	74 2b		 je	 SHORT $LN21@gObjMonste

; 1319 : 	{
; 1320 : 		exp =  (exp * g_CrywolfSync.GetGettingExpPenaltyRate()) / 100;

  0018b	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CrywolfSync@@3VCCrywolfSync@@A ; g_CrywolfSync
  00190	e8 00 00 00 00	 call	 ?GetGettingExpPenaltyRate@CCrywolfSync@@QAEHXZ ; CCrywolfSync::GetGettingExpPenaltyRate
  00195	ff 75 fc	 push	 DWORD PTR _exp$[ebp+4]
  00198	99		 cdq
  00199	ff 75 f8	 push	 DWORD PTR _exp$[ebp]
  0019c	52		 push	 edx
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 __allmul
  001a3	6a 00		 push	 0
  001a5	6a 64		 push	 100			; 00000064H
  001a7	52		 push	 edx
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 __alldiv
  001ae	89 45 f8	 mov	 DWORD PTR _exp$[ebp], eax
  001b1	89 55 fc	 mov	 DWORD PTR _exp$[ebp+4], edx
  001b4	eb 06		 jmp	 SHORT $LN10@gObjMonste
$LN21@gObjMonste:
  001b6	8b 55 fc	 mov	 edx, DWORD PTR _exp$[ebp+4]
  001b9	8b 45 f8	 mov	 eax, DWORD PTR _exp$[ebp]
$LN10@gObjMonste:

; 1321 : 	}
; 1322 : 
; 1323 : 	if ( exp > 0 )

  001bc	85 d2		 test	 edx, edx
  001be	7c 50		 jl	 SHORT $LN1@gObjMonste
  001c0	7f 04		 jg	 SHORT $LN20@gObjMonste
  001c2	85 c0		 test	 eax, eax
  001c4	74 4a		 je	 SHORT $LN1@gObjMonste
$LN20@gObjMonste:

; 1324 : 	{
; 1325 : 		if ( lpObj->Type == OBJ_USER )

  001c6	80 7b 50 01	 cmp	 BYTE PTR [ebx+80], 1
  001ca	75 44		 jne	 SHORT $LN1@gObjMonste

; 1326 : 		{
; 1327 : 
; 1328 : 			CheckItemOptForGetExpEx(lpObj,exp,0);

  001cc	6a 00		 push	 0
  001ce	8d 45 f8	 lea	 eax, DWORD PTR _exp$[ebp]
  001d1	50		 push	 eax
  001d2	53		 push	 ebx
  001d3	e8 00 00 00 00	 call	 ?CheckItemOptForGetExpEx@@YAXPAUOBJECTSTRUCT@@AA_JH@Z ; CheckItemOptForGetExpEx

; 1329 : 
; 1330 : 			lpObj->Experience += (DWORD)exp;

  001d8	8b 45 f8	 mov	 eax, DWORD PTR _exp$[ebp]
  001db	01 83 a0 00 00
	00		 add	 DWORD PTR [ebx+160], eax

; 1331 : 			lpObj->m_nEventExp += (int)exp;

  001e1	01 83 2c 12 00
	00		 add	 DWORD PTR [ebx+4652], eax

; 1332 : 		
; 1333 : 			if ( gObjLevelUp(lpObj, &exp, lpTargetObj->Class, 0) == false )

  001e7	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  001ee	6a 00		 push	 0
  001f0	50		 push	 eax
  001f1	8d 45 f8	 lea	 eax, DWORD PTR _exp$[ebp]
  001f4	50		 push	 eax
  001f5	53		 push	 ebx
  001f6	e8 00 00 00 00	 call	 ?gObjLevelUp@@YA_NPAUOBJECTSTRUCT@@PA_JHH@Z ; gObjLevelUp
  001fb	83 c4 1c	 add	 esp, 28			; 0000001cH
  001fe	84 c0		 test	 al, al
  00200	75 0b		 jne	 SHORT $LN22@gObjMonste

; 1334 : 			{
; 1335 : 				return 0;

  00202	5f		 pop	 edi
  00203	5e		 pop	 esi
  00204	33 c0		 xor	 eax, eax
  00206	5b		 pop	 ebx

; 1336 : 			}
; 1337 : 		}
; 1338 : 	}
; 1339 : 
; 1340 : 	return (int)exp;
; 1341 : }

  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c2 10 00	 ret	 16			; 00000010H
$LN22@gObjMonste:

; 1334 : 			{
; 1335 : 				return 0;

  0020d	8b 45 f8	 mov	 eax, DWORD PTR _exp$[ebp]
$LN1@gObjMonste:
  00210	5f		 pop	 edi
  00211	5e		 pop	 esi
  00212	5b		 pop	 ebx

; 1336 : 			}
; 1337 : 		}
; 1338 : 	}
; 1339 : 
; 1340 : 	return (int)exp;
; 1341 : }

  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c2 10 00	 ret	 16			; 00000010H
?gObjMonsterExpSingle@CDevilSquare@@QAEHPAUOBJECTSTRUCT@@0HH@Z ENDP ; CDevilSquare::gObjMonsterExpSingle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -304						; size = 4
_pMsg$ = -300						; size = 40
_msg$ = -260						; size = 255
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquare::DieProcDevilSquare, COMDAT
; _this$ = ecx

; 1209 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00017	56		 push	 esi
  00018	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx

; 1210 : 	char msg[255];
; 1211 : 
; 1212 : 	wsprintf(msg, lMsg.Get(MSGGET(2, 197)), lpObj->m_nEventScore);

  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00023	ff b3 28 12 00
	00		 push	 DWORD PTR [ebx+4648]
  00029	68 c5 02 00 00	 push	 709			; 000002c5H
  0002e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00033	50		 push	 eax
  00034	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 1213 : 	GCServerMsgStringSend(msg, lpObj->m_Index, 1);

  00041	6a 01		 push	 1
  00043	ff 33		 push	 DWORD PTR [ebx]
  00045	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend

; 1214 : 
; 1215 : 	if ( lpObj->m_nEventScore <= 0 )

  00051	8b b3 28 12 00
	00		 mov	 esi, DWORD PTR [ebx+4648]
  00057	83 c4 18	 add	 esp, 24			; 00000018H
  0005a	85 f6		 test	 esi, esi
  0005c	0f 8e 0d 01 00
	00		 jle	 $LN1@DieProcDev

; 1216 : 		return;
; 1217 : 
; 1218 : 	PMSG_ANS_EVENTUSERSCORE pMsg;
; 1219 : 
; 1220 : 	pMsg.h.c = 0xC1;
; 1221 : 	pMsg.h.headcode = 0x01;
; 1222 : 	pMsg.h.size = sizeof(pMsg);
; 1223 : 	pMsg.SquareNum = lpObj->m_bDevilSquareIndex;
; 1224 : 	pMsg.Class = lpObj->Class;

  00062	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00069	8a 8b 34 12 00
	00		 mov	 cl, BYTE PTR [ebx+4660]
  0006f	0f b6 d1	 movzx	 edx, cl
  00072	66 c7 85 d4 fe
	ff ff c1 28	 mov	 WORD PTR _pMsg$[ebp], 10433 ; 000028c1H
  0007b	c6 85 d6 fe ff
	ff 01		 mov	 BYTE PTR _pMsg$[ebp+2], 1
  00082	89 95 f8 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+36], edx
  00088	57		 push	 edi
  00089	8b f8		 mov	 edi, eax
  0008b	89 bd f4 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+32], edi

; 1225 : 
; 1226 : 	if ( lpObj->Class == 1 )

  00091	83 f8 01	 cmp	 eax, 1
  00094	75 49		 jne	 SHORT $LN3@DieProcDev

; 1227 : 	{
; 1228 : 		if ( lpObj->Class >= 0 && lpObj->Class < MAX_TYPE_PLAYER )
; 1229 : 		{
; 1230 : 			if ( DS_LEVEL_RANGE(lpObj->m_bDevilSquareIndex) != FALSE )

  00096	b0 06		 mov	 al, 6
  00098	3a c1		 cmp	 al, cl
  0009a	1b c0		 sbb	 eax, eax
  0009c	03 c7		 add	 eax, edi
  0009e	74 31		 je	 SHORT $LN6@DieProcDev

; 1231 : 			{
; 1232 : 				lpObj->m_nEventScore+= this->m_BonusScoreTable[lpObj->Class][lpObj->m_bDevilSquareIndex]/100;

  000a0	8d 87 49 01 00
	00		 lea	 eax, DWORD PTR [edi+329]
  000a6	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  000ad	2b c8		 sub	 ecx, eax
  000af	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000b4	03 ca		 add	 ecx, edx
  000b6	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$1$[ebp]
  000bc	f7 2c 8a	 imul	 DWORD PTR [edx+ecx*4]
  000bf	c1 fa 05	 sar	 edx, 5
  000c2	8b c2		 mov	 eax, edx
  000c4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c7	03 c2		 add	 eax, edx
  000c9	03 c6		 add	 eax, esi
  000cb	89 83 28 12 00
	00		 mov	 DWORD PTR [ebx+4648], eax
$LN6@DieProcDev:

; 1233 : 				
; 1234 : 			}
; 1235 : 		}
; 1236 : 
; 1237 : 		pMsg.Score = lpObj->m_nEventScore;

  000d1	8b 83 28 12 00
	00		 mov	 eax, DWORD PTR [ebx+4648]
  000d7	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], eax

; 1238 : 	}
; 1239 : 	else

  000dd	eb 06		 jmp	 SHORT $LN4@DieProcDev
$LN3@DieProcDev:

; 1240 : 	{
; 1241 : 		pMsg.Score = lpObj->m_nEventScore;

  000df	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+28], esi
$LN4@DieProcDev:

; 1242 : 	}
; 1243 : 
; 1244 : 	pMsg.ServerCode = gGameServerCode;

  000e5	0f bf 05 00 00
	00 00		 movsx	 eax, WORD PTR ?gGameServerCode@@3FA ; gGameServerCode

; 1245 : 	memcpy(pMsg.AccountID, lpObj->AccountID, sizeof(pMsg.AccountID));

  000ec	8d 7b 52	 lea	 edi, DWORD PTR [ebx+82]
  000ef	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]

; 1246 : 	memcpy(pMsg.GameID, lpObj->Name, sizeof(pMsg.GameID));

  000f3	8d 73 5d	 lea	 esi, DWORD PTR [ebx+93]
  000f6	89 85 ec fe ff
	ff		 mov	 DWORD PTR _pMsg$[ebp+24], eax
  000fc	0f b7 47 08	 movzx	 eax, WORD PTR [edi+8]
  00100	66 89 85 df fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+11], ax
  00107	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  0010b	66 89 85 e9 fe
	ff ff		 mov	 WORD PTR _pMsg$[ebp+21], ax

; 1247 : 
; 1248 : 	DataSendRank((char *)&pMsg, pMsg.h.size);

  00112	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _pMsg$[ebp]
  00118	66 0f d6 85 d7
	fe ff ff	 movq	 QWORD PTR _pMsg$[ebp+3], xmm0
  00120	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00124	6a 28		 push	 40			; 00000028H
  00126	50		 push	 eax
  00127	66 0f d6 85 e1
	fe ff ff	 movq	 QWORD PTR _pMsg$[ebp+13], xmm0
  0012f	e8 00 00 00 00	 call	 ?DataSendRank@@YAXPADH@Z ; DataSendRank

; 1249 : 
; 1250 : 	LogAddTD("[DevilSquare] Dead [%s][%s][%d][%d]",

  00134	ff b3 28 12 00
	00		 push	 DWORD PTR [ebx+4648]
  0013a	ff b3 2c 12 00
	00		 push	 DWORD PTR [ebx+4652]
  00140	56		 push	 esi
  00141	57		 push	 edi
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KOGNJHLF@?$FLDevilSquare?$FN?5Dead?5?$FL?$CFs?$FN?$FL?$CFs?$FN?$FL?$CFd?$FN?$FL@
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0014d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1251 : 		lpObj->AccountID, lpObj->Name, 
; 1252 : 		lpObj->m_nEventExp, lpObj->m_nEventScore);
; 1253 : 
; 1254 : 	lpObj->m_nEventScore = 0;

  00150	c7 83 28 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4648], 0

; 1255 : 	lpObj->m_nEventMoney = 0;

  0015a	c7 83 30 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4656], 0

; 1256 : 	lpObj->m_nEventExp = 0;

  00164	c7 83 2c 12 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+4652], 0
  0016e	5f		 pop	 edi
$LN1@DieProcDev:

; 1257 : 
; 1258 : }

  0016f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00172	5e		 pop	 esi
  00173	33 cd		 xor	 ecx, ebp
  00175	5b		 pop	 ebx
  00176	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017b	8b e5		 mov	 esp, ebp
  0017d	5d		 pop	 ebp
  0017e	c2 04 00	 ret	 4
?DieProcDevilSquare@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquare::DieProcDevilSquare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
tv244 = -4						; size = 4
_monstertype$1$ = 8					; size = 4
_lpObj$ = 8						; size = 4
?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CDevilSquare::gDevilSquareMonsterRegen, COMDAT
; _this$ = ecx

; 1135 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 1136 : 	BYTE devilsquareindex = lpObj->m_bDevilSquareIndex;

  00006	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00009	8a 9f 34 12 00
	00		 mov	 bl, BYTE PTR [edi+4660]

; 1137 : 
; 1138 : 	if ( devilsquareindex < 0 || devilsquareindex >= MAX_DEVILSQUARE_GROUND )

  0000f	80 fb 07	 cmp	 bl, 7
  00012	0f 83 ed 00 00
	00		 jae	 $LN6@gDevilSqua

; 1141 : 		return;
; 1142 : 	}
; 1143 : 
; 1144 : 	if ( lpObj->m_PosNum == -1 )

  00018	66 83 bf 98 05
	00 00 ff	 cmp	 WORD PTR [edi+1432], -1
  00020	75 12		 jne	 SHORT $LN7@gDevilSqua

; 1145 : 	{
; 1146 : 		gObjDel(lpObj->m_Index);

  00022	ff 37		 push	 DWORD PTR [edi]
  00024	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00029	83 c4 04	 add	 esp, 4
  0002c	5f		 pop	 edi
  0002d	5b		 pop	 ebx

; 1171 : 		monstertype, devilsquareindex, lpObj->X, lpObj->Y);
; 1172 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN7@gDevilSqua:

; 1147 : 		return;
; 1148 : 	}
; 1149 : 
; 1150 : 	WORD monstertype = this->m_DevilSquareGround[devilsquareindex].GetMonsterType(this->m_iPlaytime - this->m_iRemainTime );

  00034	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00037	2b 41 0c	 sub	 eax, DWORD PTR [ecx+12]
  0003a	83 c1 38	 add	 ecx, 56			; 00000038H
  0003d	0f b6 d3	 movzx	 edx, bl
  00040	50		 push	 eax
  00041	69 c2 1c 05 00
	00		 imul	 eax, edx, 1308
  00047	89 55 fc	 mov	 DWORD PTR tv244[ebp], edx
  0004a	03 c8		 add	 ecx, eax
  0004c	e8 00 00 00 00	 call	 ?GetMonsterType@CDevilSquareGround@@QAEGH@Z ; CDevilSquareGround::GetMonsterType
  00051	0f b7 c0	 movzx	 eax, ax

; 1151 : 
; 1152 : 	if ( monstertype == (BYTE)-1 )

  00054	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00059	89 45 08	 mov	 DWORD PTR _monstertype$1$[ebp], eax
  0005c	66 3b c1	 cmp	 ax, cx
  0005f	75 17		 jne	 SHORT $LN8@gDevilSqua

; 1153 : 	{
; 1154 : 		LogAddTD("[DevilSquare] [%d] Invalid MonterType", monstertype);

  00061	51		 push	 ecx
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0006d	83 c4 08	 add	 esp, 8
  00070	5f		 pop	 edi
  00071	5b		 pop	 ebx

; 1171 : 		monstertype, devilsquareindex, lpObj->X, lpObj->Y);
; 1172 : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
$LN8@gDevilSqua:
  00078	56		 push	 esi

; 1155 : 		return;
; 1156 : 	}
; 1157 : 
; 1158 : 	for ( int n=0;n<MAX_MAGIC;n++)

  00079	33 f6		 xor	 esi, esi
  0007b	0f 1f 44 00 00	 npad	 5
$LL4@gDevilSqua:

; 1159 : 	{
; 1160 : 		lpObj->Magic[n].Clear();

  00080	8b 8f a8 06 00
	00		 mov	 ecx, DWORD PTR [edi+1704]
  00086	03 ce		 add	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?Clear@CMagicInf@@QAEXXZ ; CMagicInf::Clear
  0008d	83 c6 18	 add	 esi, 24			; 00000018H
  00090	81 fe 10 0e 00
	00		 cmp	 esi, 3600		; 00000e10H
  00096	7c e8		 jl	 SHORT $LL4@gDevilSqua

; 1161 : 	}
; 1162 : 
; 1163 : 	gObjSetMonster(lpObj->m_Index, monstertype);

  00098	8b 45 08	 mov	 eax, DWORD PTR _monstertype$1$[ebp]
  0009b	0f b7 f0	 movzx	 esi, ax
  0009e	56		 push	 esi
  0009f	ff 37		 push	 DWORD PTR [edi]
  000a1	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1164 : 	lpObj->DieRegen = FALSE;
; 1165 : 	gObjMonsterRegen(lpObj);

  000a6	57		 push	 edi
  000a7	c6 87 8a 05 00
	00 00		 mov	 BYTE PTR [edi+1418], 0
  000ae	e8 00 00 00 00	 call	 ?gObjMonsterRegen@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterRegen

; 1166 : 	CreateFrustrum(lpObj->X, lpObj->Y, lpObj->m_Index);

  000b3	ff 37		 push	 DWORD PTR [edi]
  000b5	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  000bc	50		 push	 eax
  000bd	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ?CreateFrustrum@@YAXHHH@Z ; CreateFrustrum

; 1167 : 	lpObj->m_bDevilSquareIndex = devilsquareindex;
; 1168 : 	lpObj->MaxRegenTime = 1000;
; 1169 : 
; 1170 : 	LogAddTD("[DevilSquare] Monter Regen [%d][%d][%d,%d]",

  000ca	0f b6 87 21 01
	00 00		 movzx	 eax, BYTE PTR [edi+289]
  000d1	50		 push	 eax
  000d2	0f b6 87 20 01
	00 00		 movzx	 eax, BYTE PTR [edi+288]
  000d9	50		 push	 eax
  000da	ff 75 fc	 push	 DWORD PTR tv244[ebp]
  000dd	88 9f 34 12 00
	00		 mov	 BYTE PTR [edi+4660], bl
  000e3	56		 push	 esi
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@GIDNIGIL@?$FLDevilSquare?$FN?5Monter?5Regen?5?$FL?$CFd?$FN?$FL@
  000e9	c7 87 94 05 00
	00 e8 03 00 00	 mov	 DWORD PTR [edi+1428], 1000 ; 000003e8H
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000f9	83 c4 2c	 add	 esp, 44			; 0000002cH
  000fc	5e		 pop	 esi
  000fd	5f		 pop	 edi
  000fe	5b		 pop	 ebx

; 1171 : 		monstertype, devilsquareindex, lpObj->X, lpObj->Y);
; 1172 : }

  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c2 04 00	 ret	 4
$LN6@gDevilSqua:

; 1139 : 	{
; 1140 : 		LogAddTD("[DevilSquare] Invalid DevilSquareIndex [%d]", devilsquareindex);

  00105	0f b6 c3	 movzx	 eax, bl
  00108	50		 push	 eax
  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@CCIHNOCP@?$FLDevilSquare?$FN?5Invalid?5DevilSquar@
  0010e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00114	83 c4 08	 add	 esp, 8
  00117	5f		 pop	 edi
  00118	5b		 pop	 ebx

; 1171 : 		monstertype, devilsquareindex, lpObj->X, lpObj->Y);
; 1172 : }

  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 04 00	 ret	 4
?gDevilSquareMonsterRegen@CDevilSquare@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CDevilSquare::gDevilSquareMonsterRegen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?ClearMonstr@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
?ClearMonstr@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::ClearMonstr, COMDAT
; _this$ = ecx

; 1120 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1121 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  00002	33 ff		 xor	 edi, edi
  00004	33 f6		 xor	 esi, esi
  00006	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ClearMonst:

; 1122 : 	{
; 1123 : 		if ( DS_MAP_RANGE(gObj[n].MapNumber) != FALSE )

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00015	8a 8c 06 23 01
	00 00		 mov	 cl, BYTE PTR [esi+eax+291]
  0001c	80 f9 09	 cmp	 cl, 9
  0001f	74 0c		 je	 SHORT $LN13@ClearMonst
  00021	33 c0		 xor	 eax, eax
  00023	80 f9 20	 cmp	 cl, 32			; 00000020H
  00026	0f 94 c0	 sete	 al
  00029	85 c0		 test	 eax, eax
  0002b	74 09		 je	 SHORT $LN2@ClearMonst
$LN13@ClearMonst:

; 1124 : 		{
; 1125 : 			gObjDel(n);

  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel
  00033	83 c4 04	 add	 esp, 4
$LN2@ClearMonst:

; 1121 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  00036	81 c6 40 27 00
	00		 add	 esi, 10048		; 00002740H
  0003c	47		 inc	 edi
  0003d	81 fe 00 dd 49
	06		 cmp	 esi, 105504000		; 0649dd00H
  00043	7c cb		 jl	 SHORT $LL4@ClearMonst

; 1126 : 		}
; 1127 : 	}
; 1128 : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	c3		 ret	 0
?ClearMonstr@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::ClearMonstr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SetMonster@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
_wMonIndex$1$ = -8					; size = 4
_n$1$ = -4						; size = 4
?SetMonster@CDevilSquare@@QAEXXZ PROC			; CDevilSquare::SetMonster, COMDAT
; _this$ = ecx

; 1058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1059 : 	int result;
; 1060 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$1$[ebp], 0
  00010	be 0a 00 00 00	 mov	 esi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+10
$LL4@SetMonster:

; 1061 : 	{
; 1062 : 		if ( DS_MAP_RANGE(gMSetBase.m_Mp[n].m_MapNumber) != FALSE )

  00015	8a 4e fe	 mov	 cl, BYTE PTR [esi-2]
  00018	80 f9 09	 cmp	 cl, 9
  0001b	74 10		 je	 SHORT $LN28@SetMonster
  0001d	33 c0		 xor	 eax, eax
  0001f	80 f9 20	 cmp	 cl, 32			; 00000020H
  00022	0f 94 c0	 sete	 al
  00025	85 c0		 test	 eax, eax
  00027	0f 84 a1 00 00
	00		 je	 $LN2@SetMonster
$LN28@SetMonster:

; 1063 : 		{
; 1064 : 			WORD wMonIndex = gMSetBase.m_Mp[n].m_Type;
; 1065 : 			BYTE btDSIndex = -1;
; 1066 : 
; 1067 : 			if ( gMSetBase.m_Mp[n].m_X == 119 )

  0002d	8a 06		 mov	 al, BYTE PTR [esi]
  0002f	0f b7 56 fc	 movzx	 edx, WORD PTR [esi-4]
  00033	89 55 f8	 mov	 DWORD PTR _wMonIndex$1$[ebp], edx
  00036	3c 77		 cmp	 al, 119			; 00000077H
  00038	75 04		 jne	 SHORT $LN6@SetMonster

; 1068 : 			{
; 1069 : 				btDSIndex = DEVIL_SQUARE_GROUND_1;

  0003a	32 db		 xor	 bl, bl
  0003c	eb 2e		 jmp	 SHORT $LN19@SetMonster
$LN6@SetMonster:

; 1070 : 			}
; 1071 : 			else if ( gMSetBase.m_Mp[n].m_X == 121 )

  0003e	3c 79		 cmp	 al, 121			; 00000079H
  00040	75 04		 jne	 SHORT $LN8@SetMonster

; 1072 : 			{
; 1073 : 				btDSIndex = DEVIL_SQUARE_GROUND_2;

  00042	b3 01		 mov	 bl, 1
  00044	eb 26		 jmp	 SHORT $LN19@SetMonster
$LN8@SetMonster:

; 1074 : 			}
; 1075 : 			else if ( gMSetBase.m_Mp[n].m_X == 49 )

  00046	3c 31		 cmp	 al, 49			; 00000031H
  00048	75 04		 jne	 SHORT $LN10@SetMonster

; 1076 : 			{
; 1077 : 				btDSIndex = DEVIL_SQUARE_GROUND_3;

  0004a	b3 02		 mov	 bl, 2
  0004c	eb 1e		 jmp	 SHORT $LN19@SetMonster
$LN10@SetMonster:

; 1078 : 			}
; 1079 : 			else if ( gMSetBase.m_Mp[n].m_X == 53 )

  0004e	3c 35		 cmp	 al, 53			; 00000035H
  00050	75 04		 jne	 SHORT $LN12@SetMonster

; 1080 : 			{
; 1081 : 				btDSIndex = DEVIL_SQUARE_GROUND_4;

  00052	b3 03		 mov	 bl, 3
  00054	eb 16		 jmp	 SHORT $LN19@SetMonster
$LN12@SetMonster:

; 1082 : 			}
; 1083 : 			else if ( gMSetBase.m_Mp[n].m_X == 120 )

  00056	3c 78		 cmp	 al, 120			; 00000078H
  00058	75 04		 jne	 SHORT $LN14@SetMonster

; 1084 : 			{
; 1085 : 				btDSIndex = DEVIL_SQUARE_GROUND_5;

  0005a	b3 04		 mov	 bl, 4
  0005c	eb 0e		 jmp	 SHORT $LN19@SetMonster
$LN14@SetMonster:

; 1086 : 			}
; 1087 : 			else if ( gMSetBase.m_Mp[n].m_X == 122 )

  0005e	3c 7a		 cmp	 al, 122			; 0000007aH
  00060	75 04		 jne	 SHORT $LN16@SetMonster

; 1088 : 			{
; 1089 : 				btDSIndex = DEVIL_SQUARE_GROUND_6;

  00062	b3 05		 mov	 bl, 5
  00064	eb 06		 jmp	 SHORT $LN19@SetMonster
$LN16@SetMonster:

; 1090 : 			}
; 1091 : 			else if ( gMSetBase.m_Mp[n].m_X == 50 )

  00066	3c 32		 cmp	 al, 50			; 00000032H
  00068	75 52		 jne	 SHORT $LN29@SetMonster

; 1092 : 			{
; 1093 : 				btDSIndex = DEVIL_SQUARE_GROUND_7;

  0006a	b3 06		 mov	 bl, 6
$LN19@SetMonster:

; 1099 : 				continue;
; 1100 : 			}
; 1101 : 
; 1102 : 			result = gObjAddMonster(gMSetBase.m_Mp[n].m_MapNumber);

  0006c	0f b6 c1	 movzx	 eax, cl
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  00075	0f bf f8	 movsx	 edi, ax
  00078	83 c4 04	 add	 esp, 4

; 1103 : 
; 1104 : 			if ( result >= 0 )

  0007b	85 ff		 test	 edi, edi
  0007d	78 4f		 js	 SHORT $LN2@SetMonster

; 1105 : 			{
; 1106 : 				gObjSetPosMonster(result, n);

  0007f	ff 75 fc	 push	 DWORD PTR _n$1$[ebp]
  00082	57		 push	 edi
  00083	e8 00 00 00 00	 call	 ?gObjSetPosMonster@@YAHHH@Z ; gObjSetPosMonster

; 1107 : 				gObjSetMonster(result, wMonIndex); 

  00088	8b 45 f8	 mov	 eax, DWORD PTR _wMonIndex$1$[ebp]
  0008b	0f b7 c0	 movzx	 eax, ax
  0008e	50		 push	 eax
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster

; 1108 : 				gObj[result].MaxRegenTime = 1000;	// Rgeneration in 1 second

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0009a	83 c4 10	 add	 esp, 16			; 00000010H
  0009d	69 cf 40 27 00
	00		 imul	 ecx, edi, 10048
  000a3	c7 84 01 94 05
	00 00 e8 03 00
	00		 mov	 DWORD PTR [ecx+eax+1428], 1000 ; 000003e8H

; 1109 : 				gObj[result].m_bDevilSquareIndex = btDSIndex;

  000ae	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000b3	88 9c 01 34 12
	00 00		 mov	 BYTE PTR [ecx+eax+4660], bl
  000ba	eb 12		 jmp	 SHORT $LN2@SetMonster
$LN29@SetMonster:

; 1094 : 			}
; 1095 : 
; 1096 : 			if ( btDSIndex == 0xFF )
; 1097 : 			{
; 1098 : 				LogAddTD("[DevilSquare] [%d] Invalid MonterType", wMonIndex);

  000bc	0f b7 c2	 movzx	 eax, dx
  000bf	50		 push	 eax
  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@BJLCICGN@?$FLDevilSquare?$FN?5?$FL?$CFd?$FN?5Invalid?5Monte@
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  000cb	83 c4 08	 add	 esp, 8
$LN2@SetMonster:

; 1059 : 	int result;
; 1060 : 	for ( int n=0;n<OBJ_MAXMONSTER;n++)

  000ce	ff 45 fc	 inc	 DWORD PTR _n$1$[ebp]
  000d1	83 c6 14	 add	 esi, 20			; 00000014H
  000d4	81 fe 5a 34 03
	00		 cmp	 esi, OFFSET ?gMSetBase@@3VCMonsterSetBase@@A+210010
  000da	0f 8c 35 ff ff
	ff		 jl	 $LL4@SetMonster
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx

; 1110 : 			}
; 1111 : 		}
; 1112 : 	}
; 1113 : }

  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
?SetMonster@CDevilSquare@@QAEXXZ ENDP			; CDevilSquare::SetMonster
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?GetRemainTime@CDevilSquare@@QAEHXZ
_TEXT	SEGMENT
_pTime$ = -36						; size = 8
_ltime$ = -36						; size = 8
tv777 = -28						; size = 4
_FIRST_TIME$1$ = -24					; size = 4
_this$1$ = -20						; size = 4
_pFirstTime$2$ = -16					; size = 4
_pFirstTime$1$ = -12					; size = 4
_NOW_TIME$1$ = -8					; size = 4
_pTime$2$ = -4						; size = 4
?GetRemainTime@CDevilSquare@@QAEHXZ PROC		; CDevilSquare::GetRemainTime, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 664  : 	std::list<DS_TIME>::iterator Itor_;
; 665  : 
; 666  : 	DS_TIME pFirstTime;
; 667  : 	DS_TIME pTime;
; 668  : 
; 669  : 	DWORD FIRST_TIME = 0;
; 670  : 	DWORD CHECK_TIME = 0;
; 671  : 	DWORD NOW_TIME = 0;
; 672  : 	tm * today;
; 673  : 	time_t ltime;
; 674  : 	int iRemainTime = 0;
; 675  : 
; 676  : 
; 677  : 	if( m_EventTime.size() == 0)

  0000c	83 7b 28 00	 cmp	 DWORD PTR [ebx+40], 0
  00010	75 07		 jne	 SHORT $LN7@GetRemainT

; 678  : 	{
; 679  : 		return false;

  00012	33 c0		 xor	 eax, eax
  00014	5b		 pop	 ebx

; 751  : }

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
$LN7@GetRemainT:
  00019	56		 push	 esi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  0001a	8d 45 dc	 lea	 eax, DWORD PTR _ltime$[ebp]
  0001d	57		 push	 edi
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 __time64

; 511  :             return _localtime64(_Time);

  00024	8d 45 dc	 lea	 eax, DWORD PTR _ltime$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 __localtime64
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  0002d	8b 7b 24	 mov	 edi, DWORD PTR [ebx+36]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 511  :             return _localtime64(_Time);

  00030	83 c4 08	 add	 esp, 8
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 685  : 	NOW_TIME = today->tm_hour * 60 + today->tm_min;

  00033	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00036	8b ca		 mov	 ecx, edx
  00038	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003b	c1 e1 04	 shl	 ecx, 4
  0003e	2b ca		 sub	 ecx, edx
  00040	89 55 e4	 mov	 DWORD PTR tv777[ebp], edx
  00043	8d 34 88	 lea	 esi, DWORD PTR [eax+ecx*4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 43   : 		: _Ptr(_Pnode)

  00046	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 685  : 	NOW_TIME = today->tm_hour * 60 + today->tm_min;

  00048	89 75 f8	 mov	 DWORD PTR _NOW_TIME$1$[ebp], esi

; 686  : 
; 687  : 	pFirstTime = *m_EventTime.begin();

  0004b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004e	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00051	89 4d f4	 mov	 DWORD PTR _pFirstTime$1$[ebp], ecx
  00054	89 55 f0	 mov	 DWORD PTR _pFirstTime$2$[ebp], edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  00057	3b c7		 cmp	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 689  : 	for( Itor_ = m_EventTime.begin() ; Itor_ != m_EventTime.end(); ++Itor_ )

  00059	74 5a		 je	 SHORT $LN279@GetRemainT
  0005b	0f 1f 44 00 00	 npad	 5
$LL4@GetRemainT:

; 690  : 	{
; 691  : 		pTime = *Itor_;
; 692  : 
; 693  : 		FIRST_TIME = pFirstTime.iHour * 60 + pFirstTime.iMinute;

  00060	8b 75 f0	 mov	 esi, DWORD PTR _pFirstTime$2$[ebp]
  00063	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00066	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00069	c1 e1 04	 shl	 ecx, 4
  0006c	2b 4d f4	 sub	 ecx, DWORD PTR _pFirstTime$1$[ebp]
  0006f	89 5d fc	 mov	 DWORD PTR _pTime$2$[ebp], ebx
  00072	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]

; 694  : 		CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;
; 695  : 
; 696  : 		if( FIRST_TIME == CHECK_TIME )

  00075	8b 75 f8	 mov	 esi, DWORD PTR _NOW_TIME$1$[ebp]
  00078	89 4d e8	 mov	 DWORD PTR _FIRST_TIME$1$[ebp], ecx
  0007b	8b ca		 mov	 ecx, edx
  0007d	c1 e1 04	 shl	 ecx, 4
  00080	2b ca		 sub	 ecx, edx
  00082	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  00085	8b 5d e8	 mov	 ebx, DWORD PTR _FIRST_TIME$1$[ebp]
  00088	3b d9		 cmp	 ebx, ecx
  0008a	75 09		 jne	 SHORT $LN8@GetRemainT

; 697  : 		{
; 698  : 			if( NOW_TIME < CHECK_TIME )

  0008c	3b f1		 cmp	 esi, ecx
  0008e	72 20		 jb	 SHORT $LN270@GetRemainT

; 701  : 				break;
; 702  : 			}
; 703  : 			continue;

  00090	8b 4d f4	 mov	 ecx, DWORD PTR _pFirstTime$1$[ebp]
  00093	eb 13		 jmp	 SHORT $LN2@GetRemainT
$LN8@GetRemainT:

; 704  : 		}
; 705  : 
; 706  : 		if( NOW_TIME >= FIRST_TIME &&

  00095	3b f3		 cmp	 esi, ebx
  00097	72 04		 jb	 SHORT $LN10@GetRemainT
  00099	3b f1		 cmp	 esi, ecx
  0009b	72 21		 jb	 SHORT $LN278@GetRemainT
$LN10@GetRemainT:

; 707  : 			NOW_TIME < CHECK_TIME )
; 708  : 		{
; 709  : 			break;
; 710  : 		}
; 711  : 
; 712  : 		pFirstTime = *Itor_;

  0009d	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  000a0	8b ca		 mov	 ecx, edx
  000a2	89 4d f4	 mov	 DWORD PTR _pFirstTime$1$[ebp], ecx
  000a5	89 5d f0	 mov	 DWORD PTR _pFirstTime$2$[ebp], ebx
$LN2@GetRemainT:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  000a8	8b 00		 mov	 eax, DWORD PTR [eax]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000aa	3b c7		 cmp	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 689  : 	for( Itor_ = m_EventTime.begin() ; Itor_ != m_EventTime.end(); ++Itor_ )

  000ac	75 b2		 jne	 SHORT $LL4@GetRemainT
  000ae	eb 0e		 jmp	 SHORT $LN278@GetRemainT
$LN270@GetRemainT:

; 699  : 			{
; 700  : 				pTime = *Itor_;

  000b0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000b3	eb 06		 jmp	 SHORT $LN280@GetRemainT
$LN279@GetRemainT:
  000b5	8b 4d e0	 mov	 ecx, DWORD PTR _pTime$[ebp+4]
  000b8	8b 55 dc	 mov	 edx, DWORD PTR _pTime$[ebp]
$LN280@GetRemainT:
  000bb	89 4d fc	 mov	 DWORD PTR _pTime$2$[ebp], ecx
$LN278@GetRemainT:

; 713  : 	}
; 714  : 
; 715  : 	int CHECK_COUNT = 2;

  000be	bb 02 00 00 00	 mov	 ebx, 2
$LL5@GetRemainT:

; 716  : 
; 717  : 	while( CHECK_COUNT-- )

  000c3	4b		 dec	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000c4	3b c7		 cmp	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 719  : 		if( Itor_ == m_EventTime.end() )

  000c6	75 0b		 jne	 SHORT $LN11@GetRemainT

; 720  : 		{
; 721  : 			Itor_ = m_EventTime.begin();

  000c8	8b 07		 mov	 eax, DWORD PTR [edi]

; 722  : 			pTime = *Itor_;

  000ca	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000cd	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000d0	89 4d fc	 mov	 DWORD PTR _pTime$2$[ebp], ecx
$LN11@GetRemainT:

; 723  : 		}
; 724  : 
; 725  : 		CHECK_TIME = pTime.iHour * 60 + pTime.iMinute;

  000d3	8b 75 fc	 mov	 esi, DWORD PTR _pTime$2$[ebp]
  000d6	8b ca		 mov	 ecx, edx
  000d8	c1 e1 04	 shl	 ecx, 4
  000db	2b ca		 sub	 ecx, edx
  000dd	8d 0c 8e	 lea	 ecx, DWORD PTR [esi+ecx*4]

; 726  : 
; 727  : 		if( today->tm_hour <= pTime.iHour )

  000e0	8b 75 f8	 mov	 esi, DWORD PTR _NOW_TIME$1$[ebp]
  000e3	39 55 e4	 cmp	 DWORD PTR tv777[ebp], edx
  000e6	7f 04		 jg	 SHORT $LN12@GetRemainT

; 728  : 		{
; 729  : 			iRemainTime = CHECK_TIME - NOW_TIME;

  000e8	2b ce		 sub	 ecx, esi

; 730  : 		}
; 731  : 		else

  000ea	eb 08		 jmp	 SHORT $LN13@GetRemainT
$LN12@GetRemainT:

; 732  : 		{
; 733  : 			iRemainTime = 1440 - NOW_TIME + CHECK_TIME;

  000ec	2b ce		 sub	 ecx, esi
  000ee	81 c1 a0 05 00
	00		 add	 ecx, 1440		; 000005a0H
$LN13@GetRemainT:

; 734  : 		}
; 735  : 
; 736  : 		if( iRemainTime <= m_iOpenTime )

  000f4	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  000f7	3b 4e 30	 cmp	 ecx, DWORD PTR [esi+48]
  000fa	7f 1c		 jg	 SHORT $LN14@GetRemainT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  000fc	8b 00		 mov	 eax, DWORD PTR [eax]

; 296  : 		return (this->_Ptr == _Right._Ptr);

  000fe	3b c7		 cmp	 eax, edi
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 739  : 			if( Itor_ != m_EventTime.end() )

  00100	74 09		 je	 SHORT $LN16@GetRemainT

; 740  : 			{
; 741  : 				pTime = *Itor_;

  00102	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00105	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00108	89 75 fc	 mov	 DWORD PTR _pTime$2$[ebp], esi
$LN16@GetRemainT:

; 716  : 
; 717  : 	while( CHECK_COUNT-- )

  0010b	85 db		 test	 ebx, ebx
  0010d	75 b4		 jne	 SHORT $LL5@GetRemainT

; 747  : 			break;
; 748  : 		}
; 749  : 	}
; 750  : return iRemainTime;

  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	8b c1		 mov	 eax, ecx
  00113	5b		 pop	 ebx

; 751  : }

  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
$LN14@GetRemainT:

; 742  : 			}
; 743  : 		}
; 744  : 		else
; 745  : 		{
; 746  : 			iRemainTime -= m_iOpenTime;

  00118	8b c6		 mov	 eax, esi
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	2b 48 30	 sub	 ecx, DWORD PTR [eax+48]

; 747  : 			break;
; 748  : 		}
; 749  : 	}
; 750  : return iRemainTime;

  00120	8b c1		 mov	 eax, ecx

; 751  : }

  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
?GetRemainTime@CDevilSquare@@QAEHXZ ENDP		; CDevilSquare::GetRemainTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?Run@CDevilSquare@@QAEHXZ
_TEXT	SEGMENT
?Run@CDevilSquare@@QAEHXZ PROC				; CDevilSquare::Run, COMDAT
; _this$ = ecx

; 541  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 542  : 	int count = 0;

  00004	33 ff		 xor	 edi, edi

; 543  : 
; 544  : 	while ( this->m_bQuit == FALSE )

  00006	39 7e 18	 cmp	 DWORD PTR [esi+24], edi
  00009	75 58		 jne	 SHORT $LN15@Run
  0000b	53		 push	 ebx
  0000c	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Sleep@4
$LL2@Run:

; 545  : 	{
; 546  : 		if ( gDevilSquareEvent != FALSE )

  00012	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?gDevilSquareEvent@@3HA, 0 ; gDevilSquareEvent
  00019	74 2b		 je	 SHORT $LN4@Run

; 547  : 		{
; 548  : 			switch ( this->m_eState )

  0001b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001e	83 e8 00	 sub	 eax, 0
  00021	74 1c		 je	 SHORT $LN7@Run
  00023	83 e8 01	 sub	 eax, 1
  00026	74 0e		 je	 SHORT $LN8@Run
  00028	83 e8 01	 sub	 eax, 1
  0002b	75 19		 jne	 SHORT $LN4@Run

; 552  : 				case DevilSquare_PLAYING:	this->ProcPlaying();	break;

  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?ProcPlaying@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcPlaying
  00034	eb 10		 jmp	 SHORT $LN4@Run
$LN8@Run:

; 551  : 				case DevilSquare_OPEN:		this->ProcOpen();		break;

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?ProcOpen@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcOpen
  0003d	eb 07		 jmp	 SHORT $LN4@Run
$LN7@Run:

; 549  : 			{
; 550  : 				case DevilSquare_CLOSE:	this->ProcClose();		break;

  0003f	8b ce		 mov	 ecx, esi
  00041	e8 00 00 00 00	 call	 ?ProcClose@CDevilSquare@@AAEXXZ ; CDevilSquare::ProcClose
$LN4@Run:

; 553  : 			}
; 554  : 		}
; 555  : 
; 556  : 		Sleep(100);

  00046	6a 64		 push	 100			; 00000064H
  00048	ff d3		 call	 ebx

; 557  : 		count++;

  0004a	47		 inc	 edi

; 558  : 
; 559  : 		if ( count > 600 )

  0004b	81 ff 58 02 00
	00		 cmp	 edi, 600		; 00000258H
  00051	7e 09		 jle	 SHORT $LN10@Run

; 560  : 		{
; 561  : 			this->SendLiveCall();

  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?SendLiveCall@CDevilSquare@@AAEXXZ ; CDevilSquare::SendLiveCall

; 562  : 			count = 0;

  0005a	33 ff		 xor	 edi, edi
$LN10@Run:

; 543  : 
; 544  : 	while ( this->m_bQuit == FALSE )

  0005c	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  00060	74 b0		 je	 SHORT $LL2@Run
  00062	5b		 pop	 ebx
$LN15@Run:
  00063	5f		 pop	 edi

; 563  : 		}
; 564  : 	}
; 565  : 
; 566  : 	return TRUE;

  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	5e		 pop	 esi

; 567  : }

  0006a	c3		 ret	 0
?Run@CDevilSquare@@QAEHXZ ENDP				; CDevilSquare::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z
_TEXT	SEGMENT
_eState$ = 8						; size = 4
?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z PROC ; CDevilSquare::SetState, COMDAT
; _this$ = ecx

; 362  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 363  : 	this->m_eState = eState;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eState$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 364  : 
; 365  : 	switch ( this->m_eState )

  00009	83 e8 00	 sub	 eax, 0
  0000c	74 1c		 je	 SHORT $LN4@SetState
  0000e	83 e8 01	 sub	 eax, 1
  00011	74 0e		 je	 SHORT $LN5@SetState
  00013	83 e8 01	 sub	 eax, 1
  00016	75 17		 jne	 SHORT $LN2@SetState

; 369  : 		case DevilSquare_PLAYING:	this->SetPlaying();	break;

  00018	e8 00 00 00 00	 call	 ?SetPlaying@CDevilSquare@@AAEXXZ ; CDevilSquare::SetPlaying

; 370  : 	}
; 371  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN5@SetState:

; 368  : 		case DevilSquare_OPEN:		this->SetOpen();	break;

  00021	e8 00 00 00 00	 call	 ?SetOpen@CDevilSquare@@AAEXXZ ; CDevilSquare::SetOpen

; 370  : 	}
; 371  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN4@SetState:

; 366  : 	{
; 367  : 		case DevilSquare_CLOSE:	this->SetClose();	break;

  0002a	e8 00 00 00 00	 call	 ?SetClose@CDevilSquare@@QAEXXZ ; CDevilSquare::SetClose
$LN2@SetState:

; 370  : 	}
; 371  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ENDP ; CDevilSquare::SetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?Init@CDevilSquare@@QAEXXZ
_TEXT	SEGMENT
_dwThreadId$ = -4					; size = 4
?Init@CDevilSquare@@QAEXXZ PROC				; CDevilSquare::Init, COMDAT
; _this$ = ecx

; 151  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 152  : 	this->m_bQuit = TRUE;
; 153  : 	Sleep(500);

  00007	68 f4 01 00 00	 push	 500			; 000001f4H
  0000c	c7 46 18 01 00
	00 00		 mov	 DWORD PTR [esi+24], 1
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 154  : 
; 155  : 	this->SetState(DevilSquare_CLOSE);

  00019	6a 00		 push	 0
  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?SetState@CDevilSquare@@QAEXW4eDevilSquareState@@@Z ; CDevilSquare::SetState

; 156  : 	this->m_bQuit = FALSE;
; 157  : 
; 158  : 	DWORD dwThreadId;
; 159  : 
; 160  : //#ifdef _DEBUG
; 161  : 	this->m_hThread = (UINT)_beginthreadex( 0, 0, DevilSquareThreadFunc, this, 0, (LPUINT)&dwThreadId);

  00022	8d 45 fc	 lea	 eax, DWORD PTR _dwThreadId$[ebp]
  00025	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0002c	50		 push	 eax
  0002d	6a 00		 push	 0
  0002f	56		 push	 esi
  00030	68 00 00 00 00	 push	 OFFSET ?DevilSquareThreadFunc@@YGIPAX@Z ; DevilSquareThreadFunc
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	e8 00 00 00 00	 call	 __beginthreadex
  0003e	83 c4 18	 add	 esp, 24			; 00000018H
  00041	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00044	5e		 pop	 esi

; 162  : //#else
; 163  : //	this->m_hThread = (UINT)CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)DevilSquareThreadFunc, this, 0, (LPDWORD)&dwThreadId);
; 164  : //#endif
; 165  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?Init@CDevilSquare@@QAEXXZ ENDP				; CDevilSquare::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ??1CDevilSquare@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CDevilSquare@@UAE@XZ PROC				; CDevilSquare::~CDevilSquare, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDevilSquare@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 145  : }

  00026	68 00 00 00 00	 push	 OFFSET ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  0002b	6a 07		 push	 7
  0002d	68 1c 05 00 00	 push	 1308			; 0000051cH
  00032	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CDevilSquare@@6B@
  0003b	50		 push	 eax
  0003c	c7 47 18 01 00
	00 00		 mov	 DWORD PTR [edi+24], 1
  00043	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 531  : 		return ((_Nodepref)_Pnode->_Next);

  00048	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]

; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();
; 599  : 		}
; 600  : 
; 601  : 	_List_alloc(_Alloc&& _Al)
; 602  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 603  : 		{	// construct head node, allocator from _Al
; 604  : 		_Myhead() = _Buyheadnode();
; 605  : 		}
; 606  : 
; 607  : 	~_List_alloc() _NOEXCEPT
; 608  : 		{	// destroy head node
; 609  : 		_Freeheadnode(_Myhead());
; 610  : 		}
; 611  : 
; 612  : 	void _Copy_alloc(const _Alty& _Al)
; 613  : 		{	// replace old allocator
; 614  : 		_Pocca(_Getal(), _Al);
; 615  : 		}
; 616  : 
; 617  : 	void _Move_alloc(_Alty& _Al)
; 618  : 		{	// replace old allocator
; 619  : 		_Pocma(_Getal(), _Al);
; 620  : 		}
; 621  : 
; 622  : 	void _Swap_alloc(_Myt& _Right)
; 623  : 		{	// swap allocators
; 624  : 		_Pocs(_Getal(), _Right._Getal());
; 625  : 		}
; 626  : 
; 627  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 628  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 629  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 630  : 		{	// construct head node, allocator from _Al
; 631  : 		_Myhead() = _Buyheadnode();
; 632  : 		_TRY_BEGIN
; 633  : 		_Alloc_proxy();
; 634  : 		_CATCH_ALL
; 635  : 		_Freeheadnode(_Myhead());
; 636  : 		_RERAISE;
; 637  : 		_CATCH_END
; 638  : 		}
; 639  : 
; 640  : 	_List_alloc(_Alloc&& _Al)
; 641  : 		: _Mypair(_One_then_variadic_args_t(), _STD move(_Al))
; 642  : 		{	// construct head node, allocator from _Al
; 643  : 		_Myhead() = _Buyheadnode();
; 644  : 		_TRY_BEGIN
; 645  : 		_Alloc_proxy();
; 646  : 		_CATCH_ALL
; 647  : 		_Freeheadnode(_Myhead());
; 648  : 		_RERAISE;
; 649  : 		_CATCH_END
; 650  : 		}
; 651  : 
; 652  : 	~_List_alloc() _NOEXCEPT
; 653  : 		{	// destroy proxy
; 654  : 		_Freeheadnode(_Myhead());
; 655  : 		_Free_proxy();
; 656  : 		}
; 657  : 
; 658  : 	void _Copy_alloc(const _Alty& _Al)
; 659  : 		{	// replace old allocator
; 660  : 		_Free_proxy();
; 661  : 		_Pocca(_Getal(), _Al);
; 662  : 		_Alloc_proxy();
; 663  : 		}
; 664  : 
; 665  : 	void _Move_alloc(_Alty& _Al)
; 666  : 		{	// replace old allocator
; 667  : 		_Free_proxy();
; 668  : 		_Pocma(_Getal(), _Al);
; 669  : 		_Alloc_proxy();
; 670  : 		}
; 671  : 
; 672  : 	void _Swap_alloc(_Myt& _Right)
; 673  : 		{	// swap allocators
; 674  : 		_Pocs(_Getal(), _Right._Getal());
; 675  : 		_Swap_adl(_Myproxy(), _Right._Myproxy());
; 676  : 		}
; 677  : 
; 678  : 	void _Alloc_proxy()
; 679  : 		{	// construct proxy
; 680  : 		typename _Alty::template rebind<_Container_proxy>::other
; 681  : 			_Alproxy(_Getal());
; 682  : 		_Myproxy() = _Alproxy.allocate(1);
; 683  : 		_Alproxy.construct(_Myproxy(), _Container_proxy());
; 684  : 		_Myproxy()->_Mycont = &_Get_data();
; 685  : 		}
; 686  : 
; 687  : 	void _Free_proxy()
; 688  : 		{	// destroy proxy
; 689  : 		typename _Alty::template rebind<_Container_proxy>::other
; 690  : 			_Alproxy(_Getal());
; 691  : 		_Orphan_all();
; 692  : 		_Alproxy.destroy(_Myproxy());
; 693  : 		_Alproxy.deallocate(_Myproxy(), 1);
; 694  : 		_Myproxy() = 0;
; 695  : 		}
; 696  : 
; 697  : 	_Iterator_base12 **_Getpfirst() const
; 698  : 		{	// get address of iterator chain
; 699  : 		return (_Get_data()._Getpfirst());
; 700  : 		}
; 701  : 
; 702  : 	_Container_proxy * & _Myproxy() _NOEXCEPT
; 703  : 		{	// return reference to _Myproxy
; 704  : 		return (_Get_data()._Myproxy);
; 705  : 		}
; 706  : 
; 707  : 	_Container_proxy * const & _Myproxy() const _NOEXCEPT
; 708  : 		{	// return const reference to _Myproxy
; 709  : 		return (_Get_data()._Myproxy);
; 710  : 		}
; 711  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 712  : 
; 713  : 	_Nodeptr _Buyheadnode()
; 714  : 		{	// get head node using current allocator
; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));
; 716  : 		}
; 717  : 
; 718  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 719  : 		{	// free head node using current allocator
; 720  : 		_Getal().destroy(
; 721  : 			_STD addressof(_Nextnode(_Pnode)));
; 722  : 		_Getal().destroy(
; 723  : 			_STD addressof(_Prevnode(_Pnode)));
; 724  : 		_Getal().deallocate(_Pnode, 1);
; 725  : 		}
; 726  : 
; 727  : 	_Nodeptr _Buynode0(_Nodeptr _Next,
; 728  : 		_Nodeptr _Prev)
; 729  : 		{	// allocate a node and set links
; 730  : 		_Nodeptr _Pnode = _Getal().allocate(1);
; 731  : 
; 732  : 		if (_Next == _Nodeptr())
; 733  : 			{	// point at self
; 734  : 			_Next = _Pnode;
; 735  : 			_Prev = _Pnode;
; 736  : 			}
; 737  : 		_TRY_BEGIN
; 738  : 		_Getal().construct(
; 739  : 			_STD addressof(_Nextnode(_Pnode)), _Next);
; 740  : 		_Getal().construct(
; 741  : 			_STD addressof(_Prevnode(_Pnode)), _Prev);
; 742  : 		_CATCH_ALL
; 743  : 		_Getal().deallocate(_Pnode, 1);
; 744  : 		_RERAISE;
; 745  : 		_CATCH_END
; 746  : 
; 747  : 		return (_Pnode);
; 748  : 		}
; 749  : 
; 750  : 	void _Orphan_all()
; 751  : 		{	// orphan all iterators
; 752  : 		_Get_data()._Orphan_all();
; 753  : 		}
; 754  : 
; 755  : 	void _Swap_all(_Myt& _Right)
; 756  : 		{	// swap all iterators
; 757  : 		_Get_data()._Swap_all(_Right._Get_data());
; 758  : 		}
; 759  : 
; 760  : 	_Alty& _Getal() _NOEXCEPT
; 761  : 		{	// return reference to allocator
; 762  : 		return (_Mypair._Get_first());
; 763  : 		}
; 764  : 
; 765  : 	const _Alty& _Getal() const _NOEXCEPT
; 766  : 		{	// return const reference to allocator
; 767  : 		return (_Mypair._Get_first());
; 768  : 		}
; 769  : 
; 770  : 	_List_val<_Val_types>& _Get_data() _NOEXCEPT
; 771  : 		{	// return reference to _List_val
; 772  : 		return (_Mypair._Get_second());
; 773  : 		}
; 774  : 
; 775  : 	const _List_val<_Val_types>& _Get_data() const _NOEXCEPT
; 776  : 		{	// return const reference to _List_val
; 777  : 		return (_Mypair._Get_second());
; 778  : 		}
; 779  : 
; 780  : 	_Nodeptr& _Myhead() _NOEXCEPT
; 781  : 		{	// return reference to _Myhead
; 782  : 		return (_Get_data()._Myhead);
; 783  : 		}
; 784  : 
; 785  : 	const _Nodeptr& _Myhead() const _NOEXCEPT
; 786  : 		{	// return const reference to _Myhead
; 787  : 		return (_Get_data()._Myhead);
; 788  : 		}
; 789  : 
; 790  : 	size_type& _Mysize() _NOEXCEPT
; 791  : 		{	// return reference to _Mysize
; 792  : 		return (_Get_data()._Mysize);
; 793  : 		}
; 794  : 
; 795  : 	const size_type& _Mysize() const _NOEXCEPT
; 796  : 		{	// return const reference to _Mysize
; 797  : 		return (_Get_data()._Mysize);
; 798  : 		}
; 799  : 
; 800  : private:
; 801  : 	_Compressed_pair<_Alty, _List_val<_Val_types> > _Mypair;
; 802  : 	};
; 803  : 
; 804  : 		// TEMPLATE CLASS _List_buy
; 805  : template<class _Ty,
; 806  : 	class _Alloc>
; 807  : 	class _List_buy
; 808  : 		: public _List_alloc<_List_base_types<_Ty, _Alloc> >
; 809  : 	{	// base class for list to hold buynode/freenode functions
; 810  : public:
; 811  : 	typedef _List_alloc<_List_base_types<_Ty, _Alloc> > _Mybase;
; 812  : 	typedef typename _Mybase::_Alty _Alty;
; 813  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 814  : 
; 815  : 	_List_buy(const _Alloc& _Al = _Alloc())
; 816  : 		: _Mybase(_Al)
; 817  : 		{	// construct from allocator
; 818  : 		}
; 819  : 
; 820  : 	_List_buy(_Alloc&& _Al)
; 821  : 		: _Mybase(_STD move(_Al))
; 822  : 		{	// construct from allocator
; 823  : 		}
; 824  : 
; 825  : 	template<class... _Valty>
; 826  : 		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
; 827  : 			_Valty&&... _Val)
; 828  : 		{	// allocate a node and set links and value
; 829  : 		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);
; 830  : 
; 831  : 		_TRY_BEGIN
; 832  : 		this->_Getal().construct(
; 833  : 			_STD addressof(this->_Myval(_Pnode)),
; 834  : 				_STD forward<_Valty>(_Val)...);
; 835  : 		_CATCH_ALL
; 836  : 		this->_Getal().deallocate(_Pnode, 1);
; 837  : 		_RERAISE;
; 838  : 		_CATCH_END
; 839  : 
; 840  : 		return (_Pnode);
; 841  : 		}
; 842  : 
; 843  : 
; 844  : 	void _Freenode(_Nodeptr _Pnode)
; 845  : 		{	// give node back
; 846  : 		this->_Getal().destroy(
; 847  : 			_STD addressof(this->_Nextnode(_Pnode)));
; 848  : 		this->_Getal().destroy(
; 849  : 			_STD addressof(this->_Prevnode(_Pnode)));
; 850  : 		this->_Getal().destroy(
; 851  : 			_STD addressof(this->_Myval(_Pnode)));
; 852  : 		this->_Getal().deallocate(_Pnode, 1);
; 853  : 		}
; 854  : 	};
; 855  : 
; 856  : 		// TEMPLATE CLASS list
; 857  : template<class _Ty,
; 858  : 	class _Alloc = allocator<_Ty> >
; 859  : 	class list
; 860  : 		: public _List_buy<_Ty, _Alloc>
; 861  : 	{	// bidirectional linked list
; 862  : public:
; 863  : 	typedef list<_Ty, _Alloc> _Myt;
; 864  : 	typedef _List_buy<_Ty, _Alloc> _Mybase;
; 865  : 	typedef typename _Mybase::_Node _Node;
; 866  : 	typedef typename _Mybase::_Nodeptr _Nodeptr;
; 867  : 	typedef typename _Mybase::_Alty _Alty;
; 868  : 
; 869  : 	typedef _Alloc allocator_type;
; 870  : 	typedef typename _Mybase::size_type size_type;
; 871  : 	typedef typename _Mybase::difference_type difference_type;
; 872  : 	typedef typename _Mybase::pointer pointer;
; 873  : 	typedef typename _Mybase::const_pointer const_pointer;
; 874  : 	typedef typename _Mybase::reference reference;
; 875  : 	typedef typename _Mybase::const_reference const_reference;
; 876  : 	typedef typename _Mybase::value_type value_type;
; 877  : 
; 878  : 	typedef typename _Mybase::const_iterator const_iterator;
; 879  : 	typedef typename _Mybase::iterator iterator;
; 880  : 	typedef typename _Mybase::_Unchecked_const_iterator
; 881  : 		_Unchecked_const_iterator;
; 882  : 	typedef typename _Mybase::_Unchecked_iterator
; 883  : 		_Unchecked_iterator;
; 884  : 
; 885  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 886  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 887  : 
; 888  : 	list()
; 889  : 		: _Mybase()
; 890  : 		{	// construct empty list
; 891  : 		}
; 892  : 
; 893  : 	explicit list(const _Alloc& _Al)
; 894  : 		: _Mybase(_Al)
; 895  : 		{	// construct empty list, allocator
; 896  : 		}
; 897  : 
; 898  : 	explicit list(size_type _Count)
; 899  : 		: _Mybase()
; 900  : 		{	// construct list from _Count * _Ty()
; 901  : 		resize(_Count);
; 902  : 		}
; 903  : 
; 904  : 	list(size_type _Count, const _Ty& _Val)
; 905  : 		: _Mybase()
; 906  : 		{	// construct list from _Count * _Val
; 907  : 		_Construct_n(_Count, _Val);
; 908  : 		}
; 909  : 
; 910  : 	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
; 911  : 		: _Mybase(_Al)
; 912  : 		{	// construct list from _Count * _Val, allocator
; 913  : 		_Construct_n(_Count, _Val);
; 914  : 		}
; 915  : 
; 916  : 	list(const _Myt& _Right)
; 917  : 
; 918  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 919  : 
; 920  : 
; 921  : 		{	// construct list by copying _Right
; 922  : 		_TRY_BEGIN
; 923  : 		insert(begin(), _Right.begin(), _Right.end());
; 924  : 		_CATCH_ALL
; 925  : 		_Tidy();
; 926  : 		_RERAISE;
; 927  : 		_CATCH_END
; 928  : 		}
; 929  : 
; 930  : 	list(const _Myt& _Right, const _Alloc& _Al)
; 931  : 		: _Mybase(_Al)
; 932  : 		{	// construct list by copying _Right, allocator
; 933  : 		_TRY_BEGIN
; 934  : 		insert(begin(), _Right.begin(), _Right.end());
; 935  : 		_CATCH_ALL
; 936  : 		_Tidy();
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 		}
; 940  : 
; 941  : 	template<class _Iter,
; 942  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 943  : 			void>::type>
; 944  : 		list(_Iter _First, _Iter _Last)
; 945  : 		: _Mybase()
; 946  : 		{	// construct list from [_First, _Last)
; 947  : 		_Construct(_First, _Last);
; 948  : 		}
; 949  : 
; 950  : 	template<class _Iter,
; 951  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 952  : 			void>::type>
; 953  : 		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
; 954  : 		: _Mybase(_Al)
; 955  : 		{	// construct list, allocator from [_First, _Last)
; 956  : 		_Construct(_First, _Last);
; 957  : 		}
; 958  : 
; 959  : 	template<class _Iter>
; 960  : 		void _Construct(_Iter _First, _Iter _Last)
; 961  : 		{	// construct list from [_First, _Last), input iterators
; 962  : 		_TRY_BEGIN
; 963  : 		insert(begin(), _First, _Last);
; 964  : 		_CATCH_ALL
; 965  : 		_Tidy();
; 966  : 		_RERAISE;
; 967  : 		_CATCH_END
; 968  : 		}
; 969  : 
; 970  : 	void _Construct_n(size_type _Count,
; 971  : 		const _Ty& _Val)
; 972  : 		{	// construct from _Count * _Val
; 973  : 		_TRY_BEGIN
; 974  : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 975  : 		_CATCH_ALL
; 976  : 		_Tidy();
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 		}
; 980  : 
; 981  : 	list(_Myt&& _Right)
; 982  : 		: _Mybase(_STD move(_Right._Getal()))
; 983  : 		{	// construct list by moving _Right
; 984  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 985  : 		}
; 986  : 
; 987  : 	list(_Myt&& _Right, const _Alloc& _Al)
; 988  : 		: _Mybase(_Al)
; 989  : 		{	// construct list by moving _Right, allocator
; 990  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& operator=(_Myt&& _Right)
; 994  : 		_NOEXCEPT_OP(_Alty::is_always_equal::value)
; 995  : 		{	// assign by moving _Right
; 996  : 		if (this != &_Right)
; 997  : 			{	// different, assign it
; 998  : 			clear();
; 999  : 
; 1000 : 			if (_Alty::propagate_on_container_move_assignment::value
; 1001 : 				&& this->_Getal() != _Right._Getal())
; 1002 : 				this->_Move_alloc(_Right._Getal());
; 1003 : 
; 1004 : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 1005 : 			}
; 1006 : 		return (*this);
; 1007 : 		}
; 1008 : 
; 1009 : 	void _Assign_rv(_Myt&& _Right)
; 1010 : 		{	// swap with empty *this, same allocator
; 1011 : 		this->_Swap_all(_Right);
; 1012 : 		_Swap_adl(this->_Myhead(), _Right._Myhead());
; 1013 : 		_STD swap(this->_Mysize(), _Right._Mysize());
; 1014 : 		}
; 1015 : 
; 1016 : 	void push_front(_Ty&& _Val)
; 1017 : 		{	// insert element at beginning
; 1018 : 		_Insert(_Unchecked_begin(), _STD forward<_Ty>(_Val));
; 1019 : 		}
; 1020 : 
; 1021 : 	void push_back(_Ty&& _Val)
; 1022 : 		{	// insert element at end
; 1023 : 		_Insert(_Unchecked_end(), _STD forward<_Ty>(_Val));
; 1024 : 		}
; 1025 : 
; 1026 : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 1027 : 		{	// insert _Val at _Where
; 1028 : 		return (emplace(_Where, _STD forward<_Ty>(_Val)));
; 1029 : 		}
; 1030 : 
; 1031 : 	template<class... _Valty>
; 1032 : 		void emplace_front(_Valty&&... _Val)
; 1033 : 		{	// insert element at beginning
; 1034 : 		_Insert(_Unchecked_begin(), _STD forward<_Valty>(_Val)...);
; 1035 : 		}
; 1036 : 
; 1037 : 	template<class... _Valty>
; 1038 : 		void emplace_back(_Valty&&... _Val)
; 1039 : 		{	// insert element at end
; 1040 : 		_Insert(_Unchecked_end(), _STD forward<_Valty>(_Val)...);
; 1041 : 		}
; 1042 : 
; 1043 : 	template<class... _Valty>
; 1044 : 		iterator emplace(const_iterator _Where, _Valty&&... _Val)
; 1045 : 		{	// insert element at _Where
; 1046 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1047 : 		if (_Where._Getcont() != &this->_Get_data())
; 1048 : 			_DEBUG_ERROR("list emplace iterator outside range");
; 1049 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1050 : 
; 1051 : 		_Insert(_Where._Unchecked(), _STD forward<_Valty>(_Val)...);
; 1052 : 		return (_Make_iter(--_Where));
; 1053 : 		}
; 1054 : 
; 1055 : 	template<class... _Valty>
; 1056 : 		void _Insert(_Unchecked_const_iterator _Where,
; 1057 : 		_Valty&&... _Val)
; 1058 : 		{	// insert element at _Where
; 1059 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1060 : 		_Nodeptr _Newnode =
; 1061 : 			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
; 1062 : 				_STD forward<_Valty>(_Val)...);
; 1063 : 		_Incsize(1);
; 1064 : 		this->_Prevnode(_Pnode) = _Newnode;
; 1065 : 		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
; 1066 : 		}
; 1067 : 
; 1068 : 
; 1069 : 	list(_XSTD initializer_list<_Ty> _Ilist,
; 1070 : 		const _Alloc& _Al = allocator_type())
; 1071 : 		: _Mybase(_Al)
; 1072 : 		{	// construct from initializer_list
; 1073 : 		insert(begin(), _Ilist.begin(), _Ilist.end());
; 1074 : 		}
; 1075 : 
; 1076 : 	_Myt& operator=(_XSTD initializer_list<_Ty> _Ilist)
; 1077 : 		{	// assign initializer_list
; 1078 : 		assign(_Ilist.begin(), _Ilist.end());
; 1079 : 		return (*this);
; 1080 : 		}
; 1081 : 
; 1082 : 	void assign(_XSTD initializer_list<_Ty> _Ilist)
; 1083 : 		{	// assign initializer_list
; 1084 : 		assign(_Ilist.begin(), _Ilist.end());
; 1085 : 		}
; 1086 : 
; 1087 : 	iterator insert(const_iterator _Where,
; 1088 : 		_XSTD initializer_list<_Ty> _Ilist)
; 1089 : 		{	// insert initializer_list
; 1090 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1091 : 		}
; 1092 : 
; 1093 : 	~list() _NOEXCEPT
; 1094 : 		{	// destroy the object
; 1095 : 		_Tidy();
; 1096 : 		}
; 1097 : 
; 1098 : 	_Myt& operator=(const _Myt& _Right)
; 1099 : 		{	// assign _Right
; 1100 : 		if (this != &_Right)
; 1101 : 			{	// different, assign it
; 1102 : 			if (this->_Getal() != _Right._Getal()
; 1103 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1104 : 				{	// change allocator before copying
; 1105 : 				clear();
; 1106 : 				this->_Copy_alloc(_Right._Getal());
; 1107 : 				}
; 1108 : 
; 1109 : 			assign(_Right.begin(), _Right.end());
; 1110 : 			}
; 1111 : 		return (*this);
; 1112 : 		}
; 1113 : 
; 1114 : 	iterator begin() _NOEXCEPT
; 1115 : 		{	// return iterator for beginning of mutable sequence
; 1116 : 		return (iterator(this->_Nextnode(this->_Myhead()),
; 1117 : 			&this->_Get_data()));
; 1118 : 		}
; 1119 : 
; 1120 : 	const_iterator begin() const _NOEXCEPT
; 1121 : 		{	// return iterator for beginning of nonmutable sequence
; 1122 : 		return (const_iterator(this->_Nextnode(this->_Myhead()),
; 1123 : 			&this->_Get_data()));
; 1124 : 		}
; 1125 : 
; 1126 : 	iterator end() _NOEXCEPT
; 1127 : 		{	// return iterator for end of mutable sequence
; 1128 : 		return (iterator(this->_Myhead(), &this->_Get_data()));
; 1129 : 		}
; 1130 : 
; 1131 : 	const_iterator end() const _NOEXCEPT
; 1132 : 		{	// return iterator for end of nonmutable sequence
; 1133 : 		return (const_iterator(this->_Myhead(), &this->_Get_data()));
; 1134 : 		}
; 1135 : 
; 1136 : 	_Unchecked_iterator _Unchecked_begin()
; 1137 : 		{	// return iterator for beginning of mutable sequence
; 1138 : 		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead()),
; 1139 : 			&this->_Get_data()));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Unchecked_const_iterator _Unchecked_begin() const
; 1143 : 		{	// return iterator for beginning of nonmutable sequence
; 1144 : 		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead()),
; 1145 : 			&this->_Get_data()));
; 1146 : 		}
; 1147 : 
; 1148 : 	_Unchecked_iterator _Unchecked_end()
; 1149 : 		{	// return unchecked iterator for end of mutable sequence
; 1150 : 		return (_Unchecked_iterator(this->_Myhead(), &this->_Get_data()));
; 1151 : 		}
; 1152 : 
; 1153 : 	_Unchecked_const_iterator _Unchecked_end() const
; 1154 : 		{	// return unchecked iterator for end of nonmutable sequence
; 1155 : 		return (_Unchecked_const_iterator(this->_Myhead(),
; 1156 : 			&this->_Get_data()));
; 1157 : 		}
; 1158 : 
; 1159 : 	iterator _Make_iter(const_iterator _Where) const _NOEXCEPT
; 1160 : 		{	// make iterator from const_iterator
; 1161 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1162 : 		}
; 1163 : 
; 1164 : 	iterator _Make_iter(_Unchecked_const_iterator _Where) const
; 1165 : 		{	// make iterator from _Unchecked_const_iterator
; 1166 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1167 : 		}
; 1168 : 
; 1169 : 	reverse_iterator rbegin() _NOEXCEPT
; 1170 : 		{	// return iterator for beginning of reversed mutable sequence
; 1171 : 		return (reverse_iterator(end()));
; 1172 : 		}
; 1173 : 
; 1174 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1175 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1176 : 		return (const_reverse_iterator(end()));
; 1177 : 		}
; 1178 : 
; 1179 : 	reverse_iterator rend() _NOEXCEPT
; 1180 : 		{	// return iterator for end of reversed mutable sequence
; 1181 : 		return (reverse_iterator(begin()));
; 1182 : 		}
; 1183 : 
; 1184 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1185 : 		{	// return iterator for end of reversed nonmutable sequence
; 1186 : 		return (const_reverse_iterator(begin()));
; 1187 : 		}
; 1188 : 
; 1189 : 	const_iterator cbegin() const _NOEXCEPT
; 1190 : 		{	// return iterator for beginning of nonmutable sequence
; 1191 : 		return (begin());
; 1192 : 		}
; 1193 : 
; 1194 : 	const_iterator cend() const _NOEXCEPT
; 1195 : 		{	// return iterator for end of nonmutable sequence
; 1196 : 		return (end());
; 1197 : 		}
; 1198 : 
; 1199 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1200 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1201 : 		return (rbegin());
; 1202 : 		}
; 1203 : 
; 1204 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1205 : 		{	// return iterator for end of reversed nonmutable sequence
; 1206 : 		return (rend());
; 1207 : 		}
; 1208 : 
; 1209 : 	void resize(size_type _Newsize)
; 1210 : 		{	// determine new length, padding with _Ty() elements as needed
; 1211 : 		if (this->_Mysize() < _Newsize)
; 1212 : 			{	// pad to make larger
; 1213 : 			size_type _Count = 0;
; 1214 : 			_TRY_BEGIN
; 1215 : 			for (; this->_Mysize() < _Newsize; ++_Count)
; 1216 : 				_Insert(_Unchecked_end());
; 1217 : 			_CATCH_ALL
; 1218 : 			for (; 0 < _Count; --_Count)
; 1219 : 				pop_back();	// undo inserts
; 1220 : 			_RERAISE;
; 1221 : 			_CATCH_END
; 1222 : 			}
; 1223 : 		else
; 1224 : 			while (_Newsize < this->_Mysize())
; 1225 : 				pop_back();
; 1226 : 		}
; 1227 : 
; 1228 : 	void resize(size_type _Newsize, const _Ty& _Val)
; 1229 : 		{	// determine new length, padding with _Val elements as needed
; 1230 : 		if (this->_Mysize() < _Newsize)
; 1231 : 			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize(), _Val);
; 1232 : 		else
; 1233 : 			while (_Newsize < this->_Mysize())
; 1234 : 				pop_back();
; 1235 : 		}
; 1236 : 
; 1237 : 	size_type size() const _NOEXCEPT
; 1238 : 		{	// return length of sequence
; 1239 : 		return (this->_Mysize());
; 1240 : 		}
; 1241 : 
; 1242 : 	size_type max_size() const _NOEXCEPT
; 1243 : 		{	// return maximum possible length of sequence
; 1244 : 		return (this->_Getal().max_size());
; 1245 : 		}
; 1246 : 
; 1247 : 	bool empty() const _NOEXCEPT
; 1248 : 		{	// test if sequence is empty
; 1249 : 		return (this->_Mysize() == 0);
; 1250 : 		}
; 1251 : 
; 1252 : 	allocator_type get_allocator() const _NOEXCEPT
; 1253 : 		{	// return allocator object for values
; 1254 : 		return (this->_Getal());
; 1255 : 		}
; 1256 : 
; 1257 : 	reference front()
; 1258 : 		{	// return first element of mutable sequence
; 1259 : 		return (*begin());
; 1260 : 		}
; 1261 : 
; 1262 : 	const_reference front() const
; 1263 : 		{	// return first element of nonmutable sequence
; 1264 : 		return (*begin());
; 1265 : 		}
; 1266 : 
; 1267 : 	reference back()
; 1268 : 		{	// return last element of mutable sequence
; 1269 : 		return (*(--end()));
; 1270 : 		}
; 1271 : 
; 1272 : 	const_reference back() const
; 1273 : 		{	// return last element of nonmutable sequence
; 1274 : 		return (*(--end()));
; 1275 : 		}
; 1276 : 
; 1277 : 	void push_front(const _Ty& _Val)
; 1278 : 		{	// insert element at beginning
; 1279 : 		_Insert(_Unchecked_begin(), _Val);
; 1280 : 		}
; 1281 : 
; 1282 : 	void pop_front()
; 1283 : 		{	// erase element at beginning
; 1284 : 		erase(begin());
; 1285 : 		}
; 1286 : 
; 1287 : 	void push_back(const _Ty& _Val)
; 1288 : 		{	// insert element at end
; 1289 : 		_Insert(_Unchecked_end(), _Val);
; 1290 : 		}
; 1291 : 
; 1292 : 	void pop_back()
; 1293 : 		{	// erase element at end
; 1294 : 		erase(--end());
; 1295 : 		}
; 1296 : 
; 1297 : 	template<class _Iter>
; 1298 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1299 : 			void>::type
; 1300 : 		assign(_Iter _First, _Iter _Last)
; 1301 : 		{	// assign [_First, _Last), input iterators
; 1302 : 		iterator _Old = begin();
; 1303 : 		_TRY_BEGIN
; 1304 : 		for (; _First != _Last && _Old != end(); ++_First, (void)++_Old)
; 1305 : 			_Reusenode(_Old, *_First);
; 1306 : 		for (; _First != _Last; ++_First)
; 1307 : 			_Insert(_Unchecked_end(), *_First);
; 1308 : 		_CATCH_ALL
; 1309 : 		clear();
; 1310 : 		_RERAISE;
; 1311 : 		_CATCH_END
; 1312 : 		erase(_Old, end());
; 1313 : 		}
; 1314 : 
; 1315 : 	template<class _TArg>
; 1316 : 		void _Reusenode(iterator _Where, _TArg&& _Arg)
; 1317 : 		{	// destroy the element at _Where and reconstruct from _Arg
; 1318 : 		_TRY_BEGIN
; 1319 : 		this->_Getal().destroy(
; 1320 : 			_STD addressof(this->_Myval(_Where._Ptr)));
; 1321 : 		this->_Getal().construct(
; 1322 : 			_STD addressof(this->_Myval(_Where._Ptr)),
; 1323 : 			_STD forward<_TArg>(_Arg));
; 1324 : 		_CATCH_ALL
; 1325 : 		_Unlinknode(_Where);
; 1326 : 		this->_Getal().destroy(
; 1327 : 			_STD addressof(this->_Nextnode(_Where._Ptr)));
; 1328 : 		this->_Getal().destroy(
; 1329 : 			_STD addressof(this->_Prevnode(_Where._Ptr)));
; 1330 : 		this->_Getal().deallocate(_Where._Ptr, 1);
; 1331 : 		_RERAISE;
; 1332 : 		_CATCH_END
; 1333 : 		}
; 1334 : 
; 1335 : 	void assign(size_type _Count, const _Ty& _Val)
; 1336 : 		{	// assign _Count * _Val
; 1337 : 		clear();
; 1338 : 		_Insert_n(_Unchecked_begin(), _Count, _Val);
; 1339 : 		}
; 1340 : 
; 1341 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1342 : 		{	// insert _Val at _Where
; 1343 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1344 : 		if (_Where._Getcont() != &this->_Get_data())
; 1345 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1346 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1347 : 
; 1348 : 		_Insert(_Where._Unchecked(), _Val);
; 1349 : 		return (_Make_iter(--_Where));
; 1350 : 		}
; 1351 : 
; 1352 : 	iterator insert(const_iterator _Where,
; 1353 : 		size_type _Count, const _Ty& _Val)
; 1354 : 		{	// insert _Count * _Val at _Where
; 1355 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1356 : 		if (_Where._Getcont() != &this->_Get_data())
; 1357 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1358 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1359 : 
; 1360 : 		iterator _Prev = _Make_iter(_Where);
; 1361 : 		if (_Prev == begin())
; 1362 : 			{	// insert sequence at beginning
; 1363 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1364 : 			return (begin());
; 1365 : 			}
; 1366 : 		else
; 1367 : 			{	// insert sequence not at beginning
; 1368 : 			--_Prev;
; 1369 : 			_Insert_n(_Where._Unchecked(), _Count, _Val);
; 1370 : 			return (++_Prev);
; 1371 : 			}
; 1372 : 		}
; 1373 : 
; 1374 : 	template<class _Iter>
; 1375 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1376 : 			iterator>::type
; 1377 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1378 : 		{	// insert [_First, _Last) at _Where
; 1379 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1380 : 		if (_Where._Getcont() != &this->_Get_data())
; 1381 : 			_DEBUG_ERROR("list insert iterator outside range");
; 1382 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1383 : 
; 1384 : 		iterator _Prev = _Make_iter(_Where);
; 1385 : 		if (_Prev == begin())
; 1386 : 			{	// insert sequence at beginning
; 1387 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1388 : 				_Iter_cat(_First));
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// insert sequence not at beginning
; 1393 : 			--_Prev;
; 1394 : 			_Insert_range(_Where._Unchecked(), _First, _Last,
; 1395 : 				_Iter_cat(_First));
; 1396 : 			return (++_Prev);
; 1397 : 			}
; 1398 : 		}
; 1399 : 
; 1400 : 	template<class _Iter>
; 1401 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1402 : 			_Iter _First, _Iter _Last, input_iterator_tag)
; 1403 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1404 : 		size_type _Num = 0;
; 1405 : 
; 1406 : 		_TRY_BEGIN
; 1407 : 		for (; _First != _Last; ++_First, (void)++_Num)
; 1408 : 			_Insert(_Where, *_First);
; 1409 : 		_CATCH_ALL
; 1410 : 		for (; 0 < _Num; --_Num)
; 1411 : 			{	// undo inserts
; 1412 : 			_Unchecked_const_iterator _Before = _Where;
; 1413 : 			_Unchecked_erase(--_Before);
; 1414 : 			}
; 1415 : 		_RERAISE;
; 1416 : 		_CATCH_END
; 1417 : 		}
; 1418 : 
; 1419 : 	template<class _Iter>
; 1420 : 		void _Insert_range(_Unchecked_const_iterator _Where,
; 1421 : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 1422 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1423 : 		_DEBUG_RANGE(_First, _Last);
; 1424 : 		_Iter _Next = _First;
; 1425 : 
; 1426 : 		_TRY_BEGIN
; 1427 : 		for (; _First != _Last; ++_First)
; 1428 : 			_Insert(_Where, *_First);
; 1429 : 		_CATCH_ALL
; 1430 : 		for (; _Next != _First; ++_Next)
; 1431 : 			{	// undo inserts
; 1432 : 			_Unchecked_const_iterator _Before = _Where;
; 1433 : 			_Unchecked_erase(--_Before);
; 1434 : 			}
; 1435 : 		_RERAISE;
; 1436 : 		_CATCH_END
; 1437 : 		}
; 1438 : 
; 1439 : 	_Nodeptr _Unlinknode(const_iterator _Where)
; 1440 : 		{	// unlink node at _Where from the list
; 1441 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1442 : 		if (_Where._Getcont() != &this->_Get_data()
; 1443 : 			|| _Where._Ptr == this->_Myhead())
; 1444 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1445 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1446 : 		_Orphan_ptr(_Pnode);
; 1447 : 
; 1448 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1449 : 		_Nodeptr _Pnode = (_Where)._Mynode();
; 1450 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1451 : 
; 1452 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1453 : 			this->_Nextnode(_Pnode);
; 1454 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1455 : 			this->_Prevnode(_Pnode);
; 1456 : 
; 1457 : 		--this->_Mysize();
; 1458 : 		return (_Pnode);
; 1459 : 		}
; 1460 : 
; 1461 : 	iterator erase(const_iterator _Where)
; 1462 : 		{	// erase element at _Where
; 1463 : 		_Nodeptr _Pnode = _Unlinknode(_Where++);
; 1464 : 		this->_Freenode(_Pnode);
; 1465 : 		return (_Make_iter(_Where));
; 1466 : 		}
; 1467 : 
; 1468 : 	void _Unchecked_erase(_Unchecked_const_iterator _Where)
; 1469 : 		{	// erase element at _Where
; 1470 : 		_Nodeptr _Pnode = _Where._Mynode();
; 1471 : 
; 1472 : 		this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1473 : 			this->_Nextnode(_Pnode);
; 1474 : 		this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1475 : 			this->_Prevnode(_Pnode);
; 1476 : 		this->_Freenode(_Pnode);
; 1477 : 		--this->_Mysize();
; 1478 : 		}
; 1479 : 
; 1480 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1481 : 		{	// erase [_First, _Last)
; 1482 : 		if (_First == begin() && _Last == end())
; 1483 : 			{	// erase all and return fresh iterator
; 1484 : 			clear();
; 1485 : 			return (end());
; 1486 : 			}
; 1487 : 		else
; 1488 : 			{	// erase subrange
; 1489 : 			while (_First != _Last)
; 1490 : 				_First = erase(_First);
; 1491 : 			return (_Make_iter(_Last));
; 1492 : 			}
; 1493 : 		}
; 1494 : 
; 1495 : 	void clear() _NOEXCEPT
; 1496 : 		{	// erase all
; 1497 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1498 : 
; 1499 : 		this->_Orphan_ptr(nullptr);
; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead());

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1502 : 		this->_Nextnode(this->_Myhead()) = this->_Myhead();

  0004d	89 09		 mov	 DWORD PTR [ecx], ecx

; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);

  0004f	8b 4f 24	 mov	 ecx, DWORD PTR [edi+36]

; 1503 : 		this->_Prevnode(this->_Myhead()) = this->_Myhead();

  00052	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 1504 : 		this->_Mysize() = 0;

  00055	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0005c	3b 47 24	 cmp	 eax, DWORD PTR [edi+36]
  0005f	74 12		 je	 SHORT $LN10@CDevilSqua
$LL11@CDevilSqua:

; 1507 : 			{	// delete an element
; 1508 : 			_Pnext = this->_Nextnode(_Pnode);

  00061	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00069	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 1506 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead(); _Pnode = _Pnext)

  0006c	8b c6		 mov	 eax, esi
  0006e	3b 77 24	 cmp	 esi, DWORD PTR [edi+36]
  00071	75 ee		 jne	 SHORT $LL11@CDevilSqua
$LN10@CDevilSqua:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 138  : 	::operator delete(_Ptr);

  00073	ff 77 24	 push	 DWORD PTR [edi+36]
  00076	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007b	83 c4 04	 add	 esp, 4
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 145  : }

  0007e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00088	59		 pop	 ecx
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CDevilSquare@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDevilSquare@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDevilSquare@@UAE@XZ ENDP				; CDevilSquare::~CDevilSquare
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ??0CDevilSquare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDevilSquare@@QAE@XZ PROC				; CDevilSquare::CDevilSquare, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CDevilSquare@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	8d 77 24	 lea	 esi, DWORD PTR [edi+36]
  0002f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CDevilSquare@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	8b ce		 mov	 ecx, esi
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 83   : {

  0003b	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\list

; 525  : 		this->_Myhead = 0;

  0003e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 526  : 		this->_Mysize = 0;

  00044	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 715  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  0004b	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@U?$_List_base_types@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@@std@@QAEPAU?$_List_node@UDS_TIME@@PAX@2@PAU32@0@Z ; std::_List_alloc<std::_List_base_types<DS_TIME,std::allocator<DS_TIME> > >::_Buynode0

; 527  : 		}
; 528  : 
; 529  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 530  : 		{	// return reference to successor pointer in node
; 531  : 		return ((_Nodepref)_Pnode->_Next);
; 532  : 		}
; 533  : 
; 534  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 535  : 		{	// return reference to predecessor pointer in node
; 536  : 		return ((_Nodepref)_Pnode->_Prev);
; 537  : 		}
; 538  : 
; 539  : 	static reference _Myval(_Nodeptr _Pnode)
; 540  : 		{	// return reference to value in node
; 541  : 		return ((reference)_Pnode->_Myval);
; 542  : 		}
; 543  : 
; 544  : 	_Nodeptr _Myhead;	// pointer to head node
; 545  : 	size_type _Mysize;	// number of elements
; 546  : 	};
; 547  : 
; 548  : 		// TEMPLATE CLASS _List_alloc
; 549  : template<class _Alloc_types>
; 550  : 	class _List_alloc
; 551  : 	{	// base class for list to hold allocator
; 552  : public:
; 553  : 	typedef _List_alloc<_Alloc_types> _Myt;
; 554  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 555  : 	typedef typename _Alloc_types::_Alnod_type _Alty;
; 556  : 	typedef typename _Alloc_types::_Node _Node;
; 557  : 	typedef typename _Alloc_types::_Nodeptr _Nodeptr;
; 558  : 
; 559  : 	typedef typename _Alloc_types::_Val_types _Val_types;
; 560  : 
; 561  : 	typedef _Nodeptr& _Nodepref;
; 562  : 
; 563  : 	typedef typename _Val_types::value_type value_type;
; 564  : 	typedef typename _Val_types::size_type size_type;
; 565  : 	typedef typename _Val_types::difference_type difference_type;
; 566  : 	typedef typename _Val_types::pointer pointer;
; 567  : 	typedef typename _Val_types::const_pointer const_pointer;
; 568  : 	typedef typename _Val_types::reference reference;
; 569  : 	typedef typename _Val_types::const_reference const_reference;
; 570  : 
; 571  : 	typedef _List_const_iterator<_List_val<_Val_types> > const_iterator;
; 572  : 	typedef _List_iterator<_List_val<_Val_types> > iterator;
; 573  : 
; 574  : 	typedef _List_unchecked_const_iterator<_List_val<_Val_types> >
; 575  : 		_Unchecked_const_iterator;
; 576  : 	typedef _List_unchecked_iterator<_List_val<_Val_types> >
; 577  : 		_Unchecked_iterator;
; 578  : 
; 579  : 	static _Nodepref _Nextnode(_Nodeptr _Pnode)
; 580  : 		{	// return reference to successor pointer in node
; 581  : 		return (_List_val<_Val_types>::_Nextnode(_Pnode));
; 582  : 		}
; 583  : 
; 584  : 	static _Nodepref _Prevnode(_Nodeptr _Pnode)
; 585  : 		{	// return reference to predecessor pointer in node
; 586  : 		return (_List_val<_Val_types>::_Prevnode(_Pnode));
; 587  : 		}
; 588  : 
; 589  : 	static reference _Myval(_Nodeptr _Pnode)
; 590  : 		{	// return reference to value in node
; 591  : 		return (_List_val<_Val_types>::_Myval(_Pnode));
; 592  : 		}
; 593  : 
; 594  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 595  : 	_List_alloc(const _Alloc& _Al = _Alloc())
; 596  : 		: _Mypair(_One_then_variadic_args_t(), _Al)
; 597  : 		{	// construct head node, allocator from _Al
; 598  : 		_Myhead() = _Buyheadnode();

  00050	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp

; 83   : {

  00052	68 00 00 00 00	 push	 OFFSET ??1CDevilSquareGround@@UAE@XZ ; CDevilSquareGround::~CDevilSquareGround
  00057	68 00 00 00 00	 push	 OFFSET ??0CDevilSquareGround@@QAE@XZ ; CDevilSquareGround::CDevilSquareGround
  0005c	6a 07		 push	 7
  0005e	68 1c 05 00 00	 push	 1308			; 0000051cH
  00063	8d 47 38	 lea	 eax, DWORD PTR [edi+56]
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 84   : 	this->m_bQuit = FALSE;

  00073	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0

; 85   : 	this->m_iCloseTime = 2;
; 86   : 	this->m_iOpenTime = 2;
; 87   : 	this->m_iPlaytime = 10;
; 88   : 	this->m_BonusScoreTable[0][0] = 0;
; 89   : 	this->m_BonusScoreTable[0][1] = 0;
; 90   : 	this->m_BonusScoreTable[0][2] = 0;
; 91   : 	this->m_BonusScoreTable[0][3] = 170;
; 92   : 	
; 93   : 	this->m_BonusScoreTable[1][0] = 20;
; 94   : 	this->m_BonusScoreTable[1][1] = 90;
; 95   : 	this->m_BonusScoreTable[1][2] = 120;
; 96   : 	this->m_BonusScoreTable[1][3] = 400;
; 97   : 
; 98   : 	this->m_BonusScoreTable[2][0] = 10;
; 99   : 	this->m_BonusScoreTable[2][1] = 10;
; 100  : 	this->m_BonusScoreTable[2][2] = 10;
; 101  : 	this->m_BonusScoreTable[2][3] = 200;
; 102  : 
; 103  : 	this->m_BonusScoreTable[3][0] = 0;
; 104  : 	this->m_BonusScoreTable[3][1] = 0;
; 105  : 	this->m_BonusScoreTable[3][2] = 0;
; 106  : 	this->m_BonusScoreTable[3][3] = 0;
; 107  : 
; 108  : 	this->m_BonusScoreTable[0][4] = 170;
; 109  : 	this->m_BonusScoreTable[0][5] = 170;
; 110  : 
; 111  : 	this->m_BonusScoreTable[1][4] = 400;
; 112  : 	this->m_BonusScoreTable[1][5] = 400;
; 113  : 
; 114  : 	this->m_BonusScoreTable[2][4] = 200;
; 115  : 	this->m_BonusScoreTable[2][5] = 200;
; 116  : 
; 117  : 	this->m_BonusScoreTable[3][4] = 0;
; 118  : 	this->m_BonusScoreTable[3][5] = 0;
; 119  : 
; 120  : 	this->m_BonusScoreTable[4][0] = 0;
; 121  : 	this->m_BonusScoreTable[4][1] = 0;
; 122  : 	this->m_BonusScoreTable[4][2] = 0;
; 123  : 	this->m_BonusScoreTable[4][3] = 0;
; 124  : 	this->m_BonusScoreTable[4][4] = 0;
; 125  : 	this->m_BonusScoreTable[4][5] = 0;
; 126  : 
; 127  : 	this->m_BonusScoreTable[0][6] = 170;
; 128  : 	this->m_BonusScoreTable[1][6] = 400;
; 129  : 	this->m_BonusScoreTable[2][6] = 200;
; 130  : 	this->m_BonusScoreTable[3][6] = 0;
; 131  : 	this->m_BonusScoreTable[4][6] = 0;
; 132  : 
; 133  : 	for(int i = 0; i < MAX_DEVILSQUARE_GROUND; i++)
; 134  : 	{
; 135  : 		this->m_BonusIncValue[i] = 1.0f;
; 136  : 	}
; 137  : }

  0007a	8b c7		 mov	 eax, edi
  0007c	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2
  00083	c7 47 30 02 00
	00 00		 mov	 DWORD PTR [edi+48], 2
  0008a	c7 47 34 0a 00
	00 00		 mov	 DWORD PTR [edi+52], 10	; 0000000aH
  00091	c7 87 fc 23 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9212], 0
  0009b	c7 87 00 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9216], 0
  000a5	c7 87 04 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9220], 0
  000af	c7 87 08 24 00
	00 aa 00 00 00	 mov	 DWORD PTR [edi+9224], 170 ; 000000aaH
  000b9	c7 87 18 24 00
	00 14 00 00 00	 mov	 DWORD PTR [edi+9240], 20 ; 00000014H
  000c3	c7 87 1c 24 00
	00 5a 00 00 00	 mov	 DWORD PTR [edi+9244], 90 ; 0000005aH
  000cd	c7 87 20 24 00
	00 78 00 00 00	 mov	 DWORD PTR [edi+9248], 120 ; 00000078H
  000d7	c7 87 24 24 00
	00 90 01 00 00	 mov	 DWORD PTR [edi+9252], 400 ; 00000190H
  000e1	c7 87 34 24 00
	00 0a 00 00 00	 mov	 DWORD PTR [edi+9268], 10 ; 0000000aH
  000eb	c7 87 38 24 00
	00 0a 00 00 00	 mov	 DWORD PTR [edi+9272], 10 ; 0000000aH
  000f5	c7 87 3c 24 00
	00 0a 00 00 00	 mov	 DWORD PTR [edi+9276], 10 ; 0000000aH
  000ff	c7 87 40 24 00
	00 c8 00 00 00	 mov	 DWORD PTR [edi+9280], 200 ; 000000c8H
  00109	c7 87 50 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9296], 0
  00113	c7 87 54 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9300], 0
  0011d	c7 87 58 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9304], 0
  00127	c7 87 5c 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9308], 0
  00131	c7 87 0c 24 00
	00 aa 00 00 00	 mov	 DWORD PTR [edi+9228], 170 ; 000000aaH
  0013b	c7 87 10 24 00
	00 aa 00 00 00	 mov	 DWORD PTR [edi+9232], 170 ; 000000aaH
  00145	c7 87 28 24 00
	00 90 01 00 00	 mov	 DWORD PTR [edi+9256], 400 ; 00000190H
  0014f	c7 87 2c 24 00
	00 90 01 00 00	 mov	 DWORD PTR [edi+9260], 400 ; 00000190H
  00159	c7 87 44 24 00
	00 c8 00 00 00	 mov	 DWORD PTR [edi+9284], 200 ; 000000c8H
  00163	c7 87 48 24 00
	00 c8 00 00 00	 mov	 DWORD PTR [edi+9288], 200 ; 000000c8H
  0016d	c7 87 60 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9312], 0
  00177	c7 87 64 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9316], 0
  00181	c7 87 6c 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9324], 0
  0018b	c7 87 70 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9328], 0
  00195	c7 87 74 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9332], 0
  0019f	c7 87 78 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9336], 0
  001a9	c7 87 7c 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9340], 0
  001b3	c7 87 80 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9344], 0
  001bd	c7 87 14 24 00
	00 aa 00 00 00	 mov	 DWORD PTR [edi+9236], 170 ; 000000aaH
  001c7	c7 87 30 24 00
	00 90 01 00 00	 mov	 DWORD PTR [edi+9264], 400 ; 00000190H
  001d1	c7 87 4c 24 00
	00 c8 00 00 00	 mov	 DWORD PTR [edi+9292], 200 ; 000000c8H
  001db	c7 87 68 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9320], 0
  001e5	c7 87 84 24 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+9348], 0
  001ef	c7 87 c0 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9408], 1065353216 ; 3f800000H
  001f9	c7 87 c4 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9412], 1065353216 ; 3f800000H
  00203	c7 87 c8 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9416], 1065353216 ; 3f800000H
  0020d	c7 87 cc 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9420], 1065353216 ; 3f800000H
  00217	c7 87 d0 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9424], 1065353216 ; 3f800000H
  00221	c7 87 d4 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9428], 1065353216 ; 3f800000H
  0022b	c7 87 d8 24 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+9432], 1065353216 ; 3f800000H
  00235	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00238	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023f	59		 pop	 ecx
  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	8b e5		 mov	 esp, ebp
  00244	5d		 pop	 ebp
  00245	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDevilSquare@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 24	 add	 ecx, 36			; 00000024H
  00006	e9 00 00 00 00	 jmp	 ??1?$list@UDS_TIME@@V?$allocator@UDS_TIME@@@std@@@std@@QAE@XZ ; std::list<DS_TIME,std::allocator<DS_TIME> >::~list<DS_TIME,std::allocator<DS_TIME> >
__ehhandler$??0CDevilSquare@@QAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CDevilSquare@@QAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CDevilSquare@@QAE@XZ ENDP				; CDevilSquare::CDevilSquare
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\user.h
;	COMDAT ?GetExp@BILL_CLASS@@QAEHXZ
_TEXT	SEGMENT
?GetExp@BILL_CLASS@@QAEHXZ PROC				; BILL_CLASS::GetExp, COMDAT
; _this$ = ecx

; 2028 : 	int GetExp() {return AddExp;};

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetExp@BILL_CLASS@@QAEHXZ ENDP				; BILL_CLASS::GetExp
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 55   : 		}

  00000	c2 04 00	 ret	 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	e9 00 00 00 00	 jmp	 __time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _localtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC						; COMDAT

; 508  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 512  :             #pragma warning(pop)
; 513  :         }

  00003	5d		 pop	 ebp

; 509  :             #pragma warning(push)
; 510  :             #pragma warning(disable: 4996)
; 511  :             return _localtime64(_Time);

  00004	e9 00 00 00 00	 jmp	 __localtime64
_localtime ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\devilsquare.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1721 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
