; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\SocketItemOption.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_SeedExtractMoney@@3HA			; g_SeedExtractMoney
PUBLIC	?g_SphereCompositeMoney@@3HA			; g_SphereCompositeMoney
PUBLIC	?g_SphereSetMoney@@3HA				; g_SphereSetMoney
PUBLIC	?g_SphereRemoveMoney@@3HA			; g_SphereRemoveMoney
PUBLIC	?g_SocketRecipe_DropLevel@@3HA			; g_SocketRecipe_DropLevel
PUBLIC	?g_SocketRecipe_DropRate@@3HA			; g_SocketRecipe_DropRate
PUBLIC	?g_SocketMaterial_Lv1@@3HA			; g_SocketMaterial_Lv1
PUBLIC	?g_SocketMaterial_Lv2@@3HA			; g_SocketMaterial_Lv2
_BSS	SEGMENT
?g_SeedExtractMoney@@3HA DD 01H DUP (?)			; g_SeedExtractMoney
?g_SphereCompositeMoney@@3HA DD 01H DUP (?)		; g_SphereCompositeMoney
?g_SphereSetMoney@@3HA DD 01H DUP (?)			; g_SphereSetMoney
?g_SphereRemoveMoney@@3HA DD 01H DUP (?)		; g_SphereRemoveMoney
?g_SocketRecipe_DropLevel@@3HA DD 01H DUP (?)		; g_SocketRecipe_DropLevel
?g_SocketRecipe_DropRate@@3HA DD 01H DUP (?)		; g_SocketRecipe_DropRate
?g_SocketMaterial_Lv1@@3HA DD 01H DUP (?)		; g_SocketMaterial_Lv1
?g_SocketMaterial_Lv2@@3HA DD 01H DUP (?)		; g_SocketMaterial_Lv2
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0_SOCKET_SEED_DATA@@QAE@XZ			; _SOCKET_SEED_DATA::_SOCKET_SEED_DATA
PUBLIC	??1_SOCKET_SEED_DATA@@QAE@XZ			; _SOCKET_SEED_DATA::~_SOCKET_SEED_DATA
PUBLIC	?Clear@_SOCKET_SEED_DATA@@QAEXXZ		; _SOCKET_SEED_DATA::Clear
PUBLIC	?CheckSeed@_SOCKET_SEED_DATA@@QAEEPAVCItem@@@Z	; _SOCKET_SEED_DATA::CheckSeed
PUBLIC	?SetOptionData@_SOCKET_SEED_DATA@@QAEXEEEEPAEH@Z ; _SOCKET_SEED_DATA::SetOptionData
PUBLIC	??0_SOCKET_SPHERE_LEVEL@@QAE@XZ			; _SOCKET_SPHERE_LEVEL::_SOCKET_SPHERE_LEVEL
PUBLIC	??1_SOCKET_SPHERE_LEVEL@@QAE@XZ			; _SOCKET_SPHERE_LEVEL::~_SOCKET_SPHERE_LEVEL
PUBLIC	?Clear@_SOCKET_SPHERE_LEVEL@@QAEXXZ		; _SOCKET_SPHERE_LEVEL::Clear
PUBLIC	?SetSphereLevel@_SOCKET_SPHERE_LEVEL@@QAEXEK@Z	; _SOCKET_SPHERE_LEVEL::SetSphereLevel
PUBLIC	??0_SOCKET_SPHERE_OPTION@@QAE@XZ		; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION
PUBLIC	??1_SOCKET_SPHERE_OPTION@@QAE@XZ		; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
PUBLIC	?GetSphereItem@_SOCKET_SPHERE_OPTION@@QAEHXZ	; _SOCKET_SPHERE_OPTION::GetSphereItem
PUBLIC	?Clear@_SOCKET_SPHERE_OPTION@@QAEXXZ		; _SOCKET_SPHERE_OPTION::Clear
PUBLIC	?SetSphereOption@_SOCKET_SPHERE_OPTION@@QAEEPAU_SOCKET_SEED_DATA@@E@Z ; _SOCKET_SPHERE_OPTION::SetSphereOption
PUBLIC	?IncValue@_SOCKET_SPHERE_OPTION@@QAEXE@Z	; _SOCKET_SPHERE_OPTION::IncValue
PUBLIC	??0CSocketItems@@QAE@XZ				; CSocketItems::CSocketItems
PUBLIC	??1CSocketItems@@UAE@XZ				; CSocketItems::~CSocketItems
PUBLIC	?Init@CSocketItems@@QAEXXZ			; CSocketItems::Init
PUBLIC	?LoadData@CSocketItems@@QAEEPAD@Z		; CSocketItems::LoadData
PUBLIC	?LoadOptions@CSocketItems@@QAEXXZ		; CSocketItems::LoadOptions
PUBLIC	?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z	; CSocketItems::IsSocketItem
PUBLIC	?IsSocketItem@CSocketItems@@QAE_NH@Z		; CSocketItems::IsSocketItem
PUBLIC	?GetEmptySocketCount@CSocketItems@@QAEEPAVCItem@@@Z ; CSocketItems::GetEmptySocketCount
PUBLIC	?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z ; CSocketItems::GetItemOptions
PUBLIC	?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::CheckSocketOption
PUBLIC	?IsSeedItem@CSocketItems@@QAEEH@Z		; CSocketItems::IsSeedItem
PUBLIC	?IsSphereItem@CSocketItems@@QAEEH@Z		; CSocketItems::IsSphereItem
PUBLIC	?IsSeedSphereItem@CSocketItems@@QAEEH@Z		; CSocketItems::IsSeedSphereItem
PUBLIC	?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z	; CSocketItems::IsItemType
PUBLIC	?IsDropMap@CSocketItems@@QAEEH@Z		; CSocketItems::IsDropMap
PUBLIC	?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z ; CSocketItems::IsOptionSet
PUBLIC	?GetSeedOption@CSocketItems@@QAEEHE@Z		; CSocketItems::GetSeedOption
PUBLIC	?GetSphereLevel@CSocketItems@@QAEEH@Z		; CSocketItems::GetSphereLevel
PUBLIC	?GetSphereOption@CSocketItems@@QAEEGE@Z		; CSocketItems::GetSphereOption
PUBLIC	?GetOptionGroup@CSocketItems@@QAEEE@Z		; CSocketItems::GetOptionGroup
PUBLIC	?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ; CSocketItems::GetSeedOption
PUBLIC	?GetSphereLevelOption@CSocketItems@@QAEPAU_SOCKET_SPHERE_LEVEL@@E@Z ; CSocketItems::GetSphereLevelOption
PUBLIC	?GetBonusOption@CSocketItems@@QAEPAU_SOCKET_BONUS_DATA@@E@Z ; CSocketItems::GetBonusOption
PUBLIC	?GetOptionRate@CSocketItems@@QAEEXZ		; CSocketItems::GetOptionRate
PUBLIC	?GetResultValue@CSocketItems@@QAEHHGE@Z		; CSocketItems::GetResultValue
PUBLIC	?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z ; CSocketItems::CheckMountItem
PUBLIC	?ApplySocketOptions@CSocketItems@@QAEHPAUOBJECTSTRUCT@@@Z ; CSocketItems::ApplySocketOptions
PUBLIC	?ApplyBonusOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::ApplyBonusOptions
PUBLIC	?ApplySetOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::ApplySetOptions
PUBLIC	?SetApplySocketItem@CSocketItems@@QAEEPAUOBJECTSTRUCT@@@Z ; CSocketItems::SetApplySocketItem
PUBLIC	?InitUserOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::InitUserOptions
PUBLIC	?InitUserSocketOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::InitUserSocketOptions
PUBLIC	?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketItems::SetSocketOption
PUBLIC	?SetSocketOption@CSocketItems@@QAEXPAVCItem@@@Z	; CSocketItems::SetSocketOption
PUBLIC	?ApplyFireOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyFireOption
PUBLIC	?ApplyWaterOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyWaterOption
PUBLIC	?ApplyIceOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyIceOption
PUBLIC	?ApplyWindOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyWindOption
PUBLIC	?ApplyLightningOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyLightningOption
PUBLIC	?ApplyEarthOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyEarthOption
PUBLIC	?ApplyUnk1Option@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyUnk1Option
PUBLIC	?ApplySetOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplySetOption
PUBLIC	?GetOptionValue@CSocketItems@@QAEKE@Z		; CSocketItems::GetOptionValue
PUBLIC	?GetSphereDrop@CSocketItems@@QAEHH@Z		; CSocketItems::GetSphereDrop
PUBLIC	?ShopSocketItem@CSocketItems@@QAEXPAVCItem@@E@Z	; CSocketItems::ShopSocketItem
PUBLIC	?GetSocketCount@CSocketItems@@QAEEH@Z		; CSocketItems::GetSocketCount
PUBLIC	?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z ; CSocketItems::ItemSetSeedSphere
PUBLIC	?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z ; CSocketItems::ItemRemoveSeedSphere
PUBLIC	?SetBonusOption@CSocketItems@@QAEEPAVCItem@@@Z	; CSocketItems::SetBonusOption
PUBLIC	?allocate@?$allocator@USocketItemInfo@@@std@@QAEPAUSocketItemInfo@@I@Z ; std::allocator<SocketItemInfo>::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate
PUBLIC	?push_back@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXABUSocketItemInfo@@@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reserve
PUBLIC	??_GCSocketItems@@UAEPAXI@Z			; CSocketItems::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>
PUBLIC	??_7CSocketItems@@6B@				; CSocketItems::`vftable'
PUBLIC	?g_SocketItem@@3VCSocketItems@@A		; g_SocketItem
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@ ; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@ ; `string'
PUBLIC	??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@	; `string'
PUBLIC	??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@	; `string'
PUBLIC	??_C@_0P@EMJDPFDH@GameServerInfo?$AA@		; `string'
PUBLIC	??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@	; `string'
PUBLIC	??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@	; `string'
PUBLIC	??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@	; `string'
PUBLIC	??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@	; `string'
PUBLIC	??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@ ; `string'
PUBLIC	??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@	; `string'
PUBLIC	??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@ ; `string'
PUBLIC	??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@	; `string'
PUBLIC	??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@	; `string'
PUBLIC	??_C@_0N@PNENKPIH@SphereDropOn?$AA@		; `string'
PUBLIC	??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@	; `string'
PUBLIC	??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@	; `string'
PUBLIC	??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@	; `string'
PUBLIC	??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@	; `string'
PUBLIC	??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@	; `string'
PUBLIC	??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@	; `string'
PUBLIC	??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@	; `string'
PUBLIC	??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@	; `string'
PUBLIC	??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@	; `string'
PUBLIC	??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@	; `string'
PUBLIC	??_C@_0BH@PCJJOCDE@SocketRecipe_DropLevel?$AA@	; `string'
PUBLIC	??_C@_0BG@OMNADNPK@SocketRecipe_DropRate?$AA@	; `string'
PUBLIC	??_C@_0BM@MKEOGCLH@SocketMaterial_DropRate_Lv1?$AA@ ; `string'
PUBLIC	??_C@_0BM@OBGDDBHE@SocketMaterial_DropRate_Lv2?$AA@ ; `string'
PUBLIC	??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@ ; `string'
PUBLIC	??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CSocketItems@@6B@				; CSocketItems::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSocketItems@@@8			; CSocketItems `RTTI Type Descriptor'
PUBLIC	??_R3CSocketItems@@8				; CSocketItems::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSocketItems@@8				; CSocketItems::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSocketItems@@8			; CSocketItems::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__GetPrivateProfileIntA@16:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	?InitSocketItem@CItem@@QAEXE@Z:PROC		; CItem::InitSocketItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	??0TRandomPoolMgr@@QAE@XZ:PROC			; TRandomPoolMgr::TRandomPoolMgr
EXTRN	??1TRandomPoolMgr@@UAE@XZ:PROC			; TRandomPoolMgr::~TRandomPoolMgr
EXTRN	?InitPool@TRandomPoolMgr@@QAEXXZ:PROC		; TRandomPoolMgr::InitPool
EXTRN	?AddValue@TRandomPoolMgr@@QAE_NHH@Z:PROC	; TRandomPoolMgr::AddValue
EXTRN	?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z:PROC ; TRandomPoolMgr::GetRandomValue
EXTRN	??_ECSocketItems@@UAEPAXI@Z:PROC		; CSocketItems::`vector deleting destructor'
EXTRN	?GCReFillSend@@YAXHGEEG@Z:PROC			; GCReFillSend
EXTRN	?GCManaSend@@YAXHFEEG@Z:PROC			; GCManaSend
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_SocketItem@@3VCSocketItems@@A DB 0550H DUP (?)	; g_SocketItem
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?g_SocketItem$initializer$@@3P6AXXZA DD FLAT:??__Eg_SocketItem@@YAXXZ ; g_SocketItem$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CSocketItems@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSocketItems@@8 DD FLAT:??_R0?AVCSocketItems@@@8 ; CSocketItems::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSocketItems@@8
rdata$r	ENDS
;	COMDAT ??_R2CSocketItems@@8
rdata$r	SEGMENT
??_R2CSocketItems@@8 DD FLAT:??_R1A@?0A@EA@CSocketItems@@8 ; CSocketItems::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSocketItems@@8
rdata$r	SEGMENT
??_R3CSocketItems@@8 DD 00H				; CSocketItems::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSocketItems@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSocketItems@@@8
data$r	SEGMENT
??_R0?AVCSocketItems@@@8 DD FLAT:??_7type_info@@6B@	; CSocketItems `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSocketItems@@', 00H
data$r	ENDS
;	COMDAT ??_R4CSocketItems@@6B@
rdata$r	SEGMENT
??_R4CSocketItems@@6B@ DD 00H				; CSocketItems::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSocketItems@@@8
	DD	FLAT:??_R3CSocketItems@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@
CONST	SEGMENT
??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@ DB '[Socke'
	DB	'tItem] Set Bonus Socket Option Success - OptionIndex : %d, It'
	DB	'emCode : %d, SocketOption[%d,%d,%d,%d,%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@
CONST	SEGMENT
??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@ DB '['
	DB	'SocketItem] [%s][%s] Set Bonus Socket Option - OptionIndex : '
	DB	'%d, EffectType : %d, OptionType : %d, OptionValue : %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OBGDDBHE@SocketMaterial_DropRate_Lv2?$AA@
CONST	SEGMENT
??_C@_0BM@OBGDDBHE@SocketMaterial_DropRate_Lv2?$AA@ DB 'SocketMaterial_Dr'
	DB	'opRate_Lv2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MKEOGCLH@SocketMaterial_DropRate_Lv1?$AA@
CONST	SEGMENT
??_C@_0BM@MKEOGCLH@SocketMaterial_DropRate_Lv1?$AA@ DB 'SocketMaterial_Dr'
	DB	'opRate_Lv1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OMNADNPK@SocketRecipe_DropRate?$AA@
CONST	SEGMENT
??_C@_0BG@OMNADNPK@SocketRecipe_DropRate?$AA@ DB 'SocketRecipe_DropRate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PCJJOCDE@SocketRecipe_DropLevel?$AA@
CONST	SEGMENT
??_C@_0BH@PCJJOCDE@SocketRecipe_DropLevel?$AA@ DB 'SocketRecipe_DropLevel'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@
CONST	SEGMENT
??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@ DB 'SphereDropLevel_Lv5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@
CONST	SEGMENT
??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@ DB 'SphereDropLevel_Lv4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@
CONST	SEGMENT
??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@ DB 'SphereDropLevel_Lv3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@
CONST	SEGMENT
??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@ DB 'SphereDropLevel_Lv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@
CONST	SEGMENT
??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@ DB 'SphereDropLevel_Lv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@
CONST	SEGMENT
??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@ DB 'SphereDropRate_Lv5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@
CONST	SEGMENT
??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@ DB 'SphereDropRate_Lv4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@
CONST	SEGMENT
??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@ DB 'SphereDropRate_Lv3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@
CONST	SEGMENT
??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@ DB 'SphereDropRate_Lv2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@
CONST	SEGMENT
??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@ DB 'SphereDropRate_Lv1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNENKPIH@SphereDropOn?$AA@
CONST	SEGMENT
??_C@_0N@PNENKPIH@SphereDropOn?$AA@ DB 'SphereDropOn', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@
CONST	SEGMENT
??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@ DB 'SeedSphereRemoveMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@
CONST	SEGMENT
??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@ DB 'SeedSphereSetMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@
CONST	SEGMENT
??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@ DB 'SeedSphereCompositeM'
	DB	'oney', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@
CONST	SEGMENT
??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@ DB 'SeedExtractMoney', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSocke'
	DB	'tSlotCountRate3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@
CONST	SEGMENT
??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@ DB 'TwoHandWeaponSoc'
	DB	'ketSlotCountRate1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@
CONST	SEGMENT
??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@ DB 'SocketSlotCountRate5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@
CONST	SEGMENT
??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@ DB 'SocketSlotCountRate4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@
CONST	SEGMENT
??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@ DB 'SocketSlotCountRate3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@
CONST	SEGMENT
??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@ DB 'SocketSlotCountRate2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
CONST	SEGMENT
??_C@_0P@EMJDPFDH@GameServerInfo?$AA@ DB 'GameServerInfo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@
CONST	SEGMENT
??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@ DB 'SocketSlotCountRate1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
CONST	SEGMENT
??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@ DB 'CommonServer.cfg', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@
CONST	SEGMENT
??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@ DB '[ERROR'
	DB	'] MAX SeedSphere Option Data Overflow! [%d]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@
CONST	SEGMENT
??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@ DB '[SocketO'
	DB	'ption] SocketOption Script file Load failed. (%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CSocketItems@@6B@
CONST	SEGMENT
??_7CSocketItems@@6B@ DD FLAT:??_R4CSocketItems@@6B@	; CSocketItems::`vftable'
	DD	FLAT:??_ECSocketItems@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSocketItems@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSocketItems@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSocketItems@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSocketItems@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CSocketItems@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSocketItems@@QAE@XZ$3
__ehfuncinfo$??0CSocketItems@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CSocketItems@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@U1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USocketItemInfo@@U1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@$$QAU2@@Z PROC ; std::allocator<SocketItemInfo>::construct<SocketItemInfo,SocketItemInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@USocketItemInfo@@U1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@$$QAU2@@Z ENDP ; std::allocator<SocketItemInfo>::construct<SocketItemInfo,SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@U1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USocketItemInfo@@U1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@USocketItemInfo@@U1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@USocketItemInfo@@@std@@YA$$QAUSocketItemInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USocketItemInfo@@@std@@YA$$QAUSocketItemInfo@@AAU1@@Z PROC ; std::forward<SocketItemInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@USocketItemInfo@@@std@@YA$$QAUSocketItemInfo@@AAU1@@Z ENDP ; std::forward<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@U1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USocketItemInfo@@U1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@USocketItemInfo@@U1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USocketItemInfo@@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USocketItemInfo@@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@@Z PROC ; std::allocator<SocketItemInfo>::destroy<SocketItemInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USocketItemInfo@@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@@Z ENDP ; std::allocator<SocketItemInfo>::destroy<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	33 c9		 xor	 ecx, ecx
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	57		 push	 edi
  0000f	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00012	2b f7		 sub	 esi, edi
  00014	83 c6 03	 add	 esi, 3
  00017	c1 ee 02	 shr	 esi, 2
  0001a	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  0001d	0f 47 f1	 cmova	 esi, ecx
  00020	85 f6		 test	 esi, esi
  00022	74 13		 je	 SHORT $LN3@Uninit_mov
  00024	2b f8		 sub	 edi, eax
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00026	85 c0		 test	 eax, eax
  00028	74 05		 je	 SHORT $LN2@Uninit_mov
  0002a	8b 0c 07	 mov	 ecx, DWORD PTR [edi+eax]
  0002d	89 08		 mov	 DWORD PTR [eax], ecx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0002f	42		 inc	 edx
  00030	83 c0 04	 add	 eax, 4
  00033	3b d6		 cmp	 edx, esi
  00035	75 ef		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUSocketItemInfo@@@std@@YAPAUSocketItemInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUSocketItemInfo@@@std@@YAPAUSocketItemInfo@@PAU1@@Z PROC ; std::_Val_type<SocketItemInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUSocketItemInfo@@@std@@YAPAUSocketItemInfo@@PAU1@@Z ENDP ; std::_Val_type<SocketItemInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USocketItemInfo@@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USocketItemInfo@@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@@Z PROC ; std::allocator_traits<std::allocator<SocketItemInfo> >::destroy<SocketItemInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@USocketItemInfo@@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@@Z ENDP ; std::allocator_traits<std::allocator<SocketItemInfo> >::destroy<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@USocketItemInfo@@@std@@YAPAUSocketItemInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@USocketItemInfo@@@std@@YAPAUSocketItemInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<SocketItemInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@USocketItemInfo@@@std@@YAPAUSocketItemInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUSocketItemInfo@@PAU1@@std@@YAAAPAUSocketItemInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUSocketItemInfo@@PAU1@@std@@YAAAPAUSocketItemInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<SocketItemInfo *,SocketItemInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUSocketItemInfo@@PAU1@@std@@YAAAPAUSocketItemInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<SocketItemInfo *,SocketItemInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUSocketItemInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUSocketItemInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::_Wrap_alloc<std::allocator<SocketItemInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUSocketItemInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::_Wrap_alloc<std::allocator<SocketItemInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUSocketItemInfo@@@std@@YAPAUSocketItemInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUSocketItemInfo@@@std@@YAPAUSocketItemInfo@@PAU1@@Z PROC ; std::_Unchecked<SocketItemInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUSocketItemInfo@@@std@@YAPAUSocketItemInfo@@PAU1@@Z ENDP ; std::_Unchecked<SocketItemInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@USocketItemInfo@@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@USocketItemInfo@@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::destroy<SocketItemInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@USocketItemInfo@@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::destroy<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@USocketItemInfo@@@std@@YAPAUSocketItemInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@USocketItemInfo@@@std@@YAPAUSocketItemInfo@@AAU1@@Z PROC ; std::addressof<SocketItemInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@USocketItemInfo@@@std@@YAPAUSocketItemInfo@@AAU1@@Z ENDP ; std::addressof<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@ABU1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USocketItemInfo@@ABU1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@ABU2@@Z PROC ; std::allocator<SocketItemInfo>::construct<SocketItemInfo,SocketItemInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@USocketItemInfo@@ABU1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@ABU2@@Z ENDP ; std::allocator<SocketItemInfo>::construct<SocketItemInfo,SocketItemInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@AAU1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USocketItemInfo@@AAU1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@AAU2@@Z PROC ; std::allocator<SocketItemInfo>::construct<SocketItemInfo,SocketItemInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@construct:

; 656  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@USocketItemInfo@@AAU1@@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@AAU2@@Z ENDP ; std::allocator<SocketItemInfo>::construct<SocketItemInfo,SocketItemInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSocketItemInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSocketItemInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<SocketItemInfo *,SocketItemInfo *,std::_Wrap_alloc<std::allocator<SocketItemInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUSocketItemInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<SocketItemInfo *,SocketItemInfo *,std::_Wrap_alloc<std::allocator<SocketItemInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAXPAUSocketItemInfo@@0AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAXPAUSocketItemInfo@@0AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SocketItemInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAXPAUSocketItemInfo@@0AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SocketItemInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@USocketItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSocketItemInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@USocketItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSocketItemInfo@@0@Z PROC ; std::_Ptr_cat<SocketItemInfo,SocketItemInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@USocketItemInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSocketItemInfo@@0@Z ENDP ; std::_Ptr_cat<SocketItemInfo,SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@USocketItemInfo@@@std@@@std@@YAABV?$allocator@USocketItemInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@USocketItemInfo@@@std@@@std@@YAABV?$allocator@USocketItemInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<SocketItemInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@USocketItemInfo@@@std@@@std@@YAABV?$allocator@USocketItemInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<SocketItemInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@ABU1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USocketItemInfo@@ABU1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@USocketItemInfo@@ABU1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUSocketItemInfo@@@std@@YAABUSocketItemInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUSocketItemInfo@@@std@@YAABUSocketItemInfo@@ABU1@@Z PROC ; std::forward<SocketItemInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUSocketItemInfo@@@std@@YAABUSocketItemInfo@@ABU1@@Z ENDP ; std::forward<SocketItemInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@AAU1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USocketItemInfo@@AAU1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@USocketItemInfo@@AAU1@@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAXAAV?$allocator@USocketItemInfo@@@1@PAUSocketItemInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUSocketItemInfo@@@std@@YAAAUSocketItemInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUSocketItemInfo@@@std@@YAAAUSocketItemInfo@@AAU1@@Z PROC ; std::forward<SocketItemInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUSocketItemInfo@@@std@@YAAAUSocketItemInfo@@AAU1@@Z ENDP ; std::forward<SocketItemInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUSocketItemInfo@@@std@@YAPBUSocketItemInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUSocketItemInfo@@@std@@YAPBUSocketItemInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<SocketItemInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUSocketItemInfo@@@std@@YAPBUSocketItemInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<SocketItemInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUSocketItemInfo@@@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEPAUSocketItemInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUSocketItemInfo@@@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEPAUSocketItemInfo@@PAU2@00@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Umove<SocketItemInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUSocketItemInfo@@@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEPAUSocketItemInfo@@PAU2@00@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Umove<SocketItemInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAXPAUSocketItemInfo@@0AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAXPAUSocketItemInfo@@0AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SocketItemInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@YAXPAUSocketItemInfo@@0AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<SocketItemInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@USocketItemInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@USocketItemInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@USocketItemInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@USocketItemInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1><std::allocator<SocketItemInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@USocketItemInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@USocketItemInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1><std::allocator<SocketItemInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USocketItemInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@USocketItemInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@USocketItemInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@USocketItemInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 07		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
??$construct@USocketItemInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::construct<SocketItemInfo,SocketItemInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUSocketItemInfo@@@std@@YAPBUSocketItemInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUSocketItemInfo@@@std@@YAPBUSocketItemInfo@@ABU1@@Z PROC ; std::addressof<SocketItemInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUSocketItemInfo@@@std@@YAPBUSocketItemInfo@@ABU1@@Z ENDP ; std::addressof<SocketItemInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_SocketItem@@YAXXZ
text$yd	SEGMENT
??__Fg_SocketItem@@YAXXZ PROC				; `dynamic atexit destructor for 'g_SocketItem'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00005	e9 00 00 00 00	 jmp	 ??1CSocketItems@@UAE@XZ	; CSocketItems::~CSocketItems
??__Fg_SocketItem@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_SocketItem''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??__Eg_SocketItem@@YAXXZ
text$di	SEGMENT
??__Eg_SocketItem@@YAXXZ PROC				; `dynamic initializer for 'g_SocketItem'', COMDAT

; 11   : CSocketItems g_SocketItem;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00005	e8 00 00 00 00	 call	 ??0CSocketItems@@QAE@XZ	; CSocketItems::CSocketItems
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_SocketItem@@YAXXZ ; `dynamic atexit destructor for 'g_SocketItem''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_SocketItem@@YAXXZ ENDP				; `dynamic initializer for 'g_SocketItem''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSocketItems@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSocketItems@@UAEPAXI@Z PROC			; CSocketItems::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSocketItems@@UAE@XZ	; CSocketItems::~CSocketItems
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 50 05 00 00	 push	 1360			; 00000550H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSocketItems@@UAEPAXI@Z ENDP			; CSocketItems::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEXPAUSocketItemInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEXPAUSocketItemInfo@@0@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEXPAUSocketItemInfo@@0@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0002e	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0002f	c3		 ret	 0
?_Tidy@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Reserve@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1646 : 		if (_Unused_capacity() < _Count)

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	57		 push	 edi

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0000a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000d	8b c7		 mov	 eax, edi
  0000f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2

; 1646 : 		if (_Unused_capacity() < _Count)

  00017	3b c1		 cmp	 eax, ecx
  00019	73 3b		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	53		 push	 ebx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  0001e	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00023	c1 fa 02	 sar	 edx, 2

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00026	8b c3		 mov	 eax, ebx
  00028	2b c2		 sub	 eax, edx
  0002a	3b c1		 cmp	 eax, ecx
  0002c	72 2e		 jb	 SHORT $LN134@Reserve

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002e	2b 3e		 sub	 edi, DWORD PTR [esi]

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00030	03 d1		 add	 edx, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00032	c1 ff 02	 sar	 edi, 2

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00035	8b c7		 mov	 eax, edi
  00037	d1 e8		 shr	 eax, 1
  00039	2b d8		 sub	 ebx, eax
  0003b	3b df		 cmp	 ebx, edi
  0003d	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00040	b8 00 00 00 00	 mov	 eax, 0
  00045	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00048	3b ca		 cmp	 ecx, edx
  0004a	0f 42 ca	 cmovb	 ecx, edx

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reallocate
  00055	5b		 pop	 ebx
$LN2@Reserve:
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi

; 1651 : 			}
; 1652 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00061	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  00066	cc		 int	 3
?_Reserve@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@USocketItemInfo@@@std@@QAEPAUSocketItemInfo@@I@Z ; std::allocator<SocketItemInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUSocketItemInfo@@PAU1@V?$allocator@USocketItemInfo@@@std@@U1@@std@@YAPAUSocketItemInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<SocketItemInfo *,SocketItemInfo *,std::allocator<SocketItemInfo>,SocketItemInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00057	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005a	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0005d	2b d9		 sub	 ebx, ecx
  0005f	c1 fb 02	 sar	 ebx, 2

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00062	85 c9		 test	 ecx, ecx
  00064	74 11		 je	 SHORT $LN3@Reallocate

; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 02	 sar	 eax, 2
  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	8b ce		 mov	 ecx, esi
  00072	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate
$LN3@Reallocate:

; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0007a	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  00080	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  00083	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  00086	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  00088	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00092	59		 pop	 ecx
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z$0:

; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);

  0009c	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  0009f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate

; 1627 : 		_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN175@Reallocate:
$LN174@Reallocate:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBE_NPBUSocketItemInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBE_NPBUSocketItemInfo@@@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBE_NPBUSocketItemInfo@@@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00009	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0000e	c1 fe 02	 sar	 esi, 2

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00011	8b c6		 mov	 eax, esi
  00013	d1 e8		 shr	 eax, 1
  00015	57		 push	 edi
  00016	2b c8		 sub	 ecx, eax
  00018	33 ff		 xor	 edi, edi
  0001a	3b ce		 cmp	 ecx, esi
  0001c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0001f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00022	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00025	5f		 pop	 edi
  00026	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0002a	8b c2		 mov	 eax, edx
  0002c	5e		 pop	 esi

; 1612 : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?_Grow_to@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXPAUSocketItemInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXPAUSocketItemInfo@@0@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXPAUSocketItemInfo@@0@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXABUSocketItemInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXABUSocketItemInfo@@@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000d	3b f8		 cmp	 edi, eax
  0000f	73 31		 jae	 SHORT $LN2@push_back
  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00013	3b cf		 cmp	 ecx, edi
  00015	77 2b		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f9		 sub	 edi, ecx
  00019	c1 ff 02	 sar	 edi, 2

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0001c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0001f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00021	6a 01		 push	 1
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 2a		 je	 SHORT $LN205@push_back
  00031	8b 06		 mov	 eax, DWORD PTR [esi]
  00033	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00036	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00038	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN2@push_back:

; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00042	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00045	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00047	6a 01		 push	 1
  00049	8b ce		 mov	 ecx, esi
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@IAEXI@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00050	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00053	85 c9		 test	 ecx, ecx
  00055	74 04		 je	 SHORT $LN205@push_back
  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	89 01		 mov	 DWORD PTR [ecx], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0005b	83 46 04 04	 add	 DWORD PTR [esi+4], 4
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
?push_back@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXABUSocketItemInfo@@@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEAAUSocketItemInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEAAUSocketItemInfo@@I@Z PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00008	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1241 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEAAUSocketItemInfo@@I@Z ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1180 : 		}

  00008	c3		 ret	 0
?size@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2

; 1048 : 		}

  00009	c3		 ret	 0
?_Unused_capacity@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1043 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::~vector<SocketItemInfo,std::allocator<SocketItemInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 25		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c1		 sub	 eax, ecx
  0000e	c1 f8 02	 sar	 eax, 2
  00011	50		 push	 eax
  00012	51		 push	 ecx
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00020	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00027	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0002e	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0002f	c3		 ret	 0
??1?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::~vector<SocketItemInfo,std::allocator<SocketItemInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::vector<SocketItemInfo,std::allocator<SocketItemInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::vector<SocketItemInfo,std::allocator<SocketItemInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<SocketItemInfo> >,std::_Vector_val<std::_Simple_types<SocketItemInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SocketItemInfo> >::_Vector_val<std::_Simple_types<SocketItemInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SocketItemInfo> >::_Vector_val<std::_Simple_types<SocketItemInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABQAUSocketItemInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAPAUSocketItemInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@USocketItemInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@USocketItemInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@USocketItemInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >::_Vector_alloc<std::_Vec_base_types<SocketItemInfo,std::allocator<SocketItemInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 139  : 	}
; 140  : 
; 141  : 		// TEMPLATE FUNCTION _Construct
; 142  : template<class _Ty1,
; 143  : 	class _Ty2> inline
; 144  : 	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
; 145  : 	{	// construct object at _Ptr with value _Val
; 146  : 	void *_Vptr = _Ptr;
; 147  : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));
; 148  : 	}
; 149  : 
; 150  : template<class _Ty1> inline
; 151  : 	void _Construct(_Ty1 *_Ptr)
; 152  : 	{	// construct object at _Ptr with default value
; 153  : 	void *_Vptr = _Ptr;
; 154  : 
; 155  : 	::new (_Vptr) _Ty1();
; 156  : 	}
; 157  : 
; 158  : 		// TEMPLATE FUNCTION _Destroy
; 159  : template<class _Ty> inline
; 160  : 	void _Destroy(_Ty *_Ptr)
; 161  : 	{	// destroy object at _Ptr
; 162  : 	_Ptr->~_Ty();
; 163  : 	}
; 164  : 
; 165  : 		// TEMPLATE FUNCTION _Destroy_range
; 166  : template<class _Alloc> inline
; 167  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 168  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 169  : 		_Nonscalar_ptr_iterator_tag)
; 170  : 	{	// destroy [_First, _Last), arbitrary type
; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN16@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN7@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN18@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN19@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN20@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN21@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN7@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 909  : 		_Mybase::deallocate(_Ptr, _Count);
; 910  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN16@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN19@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@deallocate:
$LN20@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@deallocate:
$LN21@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN26@deallocate:
$LN15@deallocate:
  0005a	cc		 int	 3
?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEPAUSocketItemInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEPAUSocketItemInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@USocketItemInfo@@@std@@QAEPAUSocketItemInfo@@I@Z ; std::allocator<SocketItemInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEPAUSocketItemInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@ABV?$allocator@USocketItemInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@ABV?$allocator@USocketItemInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::_Wrap_alloc<std::allocator<SocketItemInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAE@ABV?$allocator@USocketItemInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::_Wrap_alloc<std::allocator<SocketItemInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAIABV?$allocator@USocketItemInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAIABV?$allocator@USocketItemInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<SocketItemInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@USocketItemInfo@@@std@@@std@@SAIABV?$allocator@USocketItemInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<SocketItemInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@USocketItemInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@USocketItemInfo@@@std@@QBEIXZ PROC ; std::allocator<SocketItemInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@USocketItemInfo@@@std@@QBEIXZ ENDP ; std::allocator<SocketItemInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@USocketItemInfo@@@std@@QAEPAUSocketItemInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USocketItemInfo@@@std@@QAEPAUSocketItemInfo@@I@Z PROC ; std::allocator<SocketItemInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00013	77 3c		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00018	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001d	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001f	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00022	3b c8		 cmp	 ecx, eax
  00024	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00026	51		 push	 ecx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	8b c8		 mov	 ecx, eax
  0002e	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00031	85 c9		 test	 ecx, ecx
  00033	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00035	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00038	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003b	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004b	85 c0		 test	 eax, eax
  0004d	75 bb		 jne	 SHORT $LN12@allocate
  0004f	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00051	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00056	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00065	cc		 int	 3
?allocate@?$allocator@USocketItemInfo@@@std@@QAEPAUSocketItemInfo@@I@Z ENDP ; std::allocator<SocketItemInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@I@Z PROC ; std::allocator<SocketItemInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000e	77 31		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00013	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00018	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001a	f6 c1 1f	 test	 cl, 31			; 0000001fH
  0001d	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0001f	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00022	3b c1		 cmp	 eax, ecx
  00024	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00026	2b c8		 sub	 ecx, eax
  00028	83 f9 04	 cmp	 ecx, 4
  0002b	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0002d	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00030	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00032	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003a	83 c4 04	 add	 esp, 4

; 639  : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00041	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00046	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00050	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00055	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005a	cc		 int	 3
?deallocate@?$allocator@USocketItemInfo@@@std@@QAEXPAUSocketItemInfo@@I@Z ENDP ; std::allocator<SocketItemInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@USocketItemInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@USocketItemInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<SocketItemInfo>::allocator<SocketItemInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@USocketItemInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<SocketItemInfo>::allocator<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@USocketItemInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USocketItemInfo@@@std@@QAE@XZ PROC	; std::allocator<SocketItemInfo>::allocator<SocketItemInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@USocketItemInfo@@@std@@QAE@XZ ENDP	; std::allocator<SocketItemInfo>::allocator<SocketItemInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetBonusOption@CSocketItems@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
tv547 = -20						; size = 4
_lpItem$GSCopy$1$ = -20					; size = 4
_this$GSCopy$1$ = -16					; size = 4
_OptCount$ = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_lpItem$ = 8						; size = 4
?SetBonusOption@CSocketItems@@QAEEPAVCItem@@@Z PROC	; CSocketItems::SetBonusOption, COMDAT
; _this$ = ecx

; 1794 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00015	8b d9		 mov	 ebx, ecx
  00017	89 5d f0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001a	89 75 ec	 mov	 DWORD PTR _lpItem$GSCopy$1$[ebp], esi

; 1795 : 	if( lpItem == NULL )

  0001d	85 f6		 test	 esi, esi
  0001f	75 14		 jne	 SHORT $LN11@SetBonusOp
$LN13@SetBonusOp:
  00021	5e		 pop	 esi

; 1796 : 		return false;

  00022	32 c0		 xor	 al, al
  00024	5b		 pop	 ebx

; 1857 : }

  00025	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00028	33 cd		 xor	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN11@SetBonusOp:

; 1797 : 
; 1798 : 	if( lpItem->IsItem() == NULL || IsSocketItem(lpItem) == NULL)

  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0003c	85 c0		 test	 eax, eax
  0003e	74 e1		 je	 SHORT $LN13@SetBonusOp
  00040	56		 push	 esi
  00041	8b cb		 mov	 ecx, ebx
  00043	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00048	84 c0		 test	 al, al
  0004a	74 d5		 je	 SHORT $LN13@SetBonusOp

; 1799 : 		return false;
; 1800 : 
; 1801 : 	BYTE OptCount[MAX_SOCKET_COUNT];
; 1802 : 
; 1803 : 	for(int i = 0; i < MAX_SOCKET_COUNT;i++)

  0004c	8d 86 c8 00 00
	00		 lea	 eax, DWORD PTR [esi+200]
  00052	bb 05 00 00 00	 mov	 ebx, 5
  00057	57		 push	 edi
  00058	8d 7d f4	 lea	 edi, DWORD PTR _OptCount$[ebp]
  0005b	8b f0		 mov	 esi, eax
  0005d	0f 1f 00	 npad	 3
$LL4@SetBonusOp:

; 1804 : 	{
; 1805 : 		if( lpItem->m_SocketOption[i] != 0xFF &&

  00060	8a 06		 mov	 al, BYTE PTR [esi]
  00062	3c ff		 cmp	 al, 255			; 000000ffH
  00064	74 0f		 je	 SHORT $LN2@SetBonusOp
  00066	3c fe		 cmp	 al, 254			; 000000feH
  00068	74 0b		 je	 SHORT $LN2@SetBonusOp

; 1806 : 			lpItem->m_SocketOption[i] != 0xFE )
; 1807 : 		{
; 1808 : 			OptCount[i] = GetOptionGroup(lpItem->m_SocketOption[i]);

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?GetOptionGroup@CSocketItems@@QAEEE@Z ; CSocketItems::GetOptionGroup
  00073	88 07		 mov	 BYTE PTR [edi], al
$LN2@SetBonusOp:

; 1799 : 		return false;
; 1800 : 
; 1801 : 	BYTE OptCount[MAX_SOCKET_COUNT];
; 1802 : 
; 1803 : 	for(int i = 0; i < MAX_SOCKET_COUNT;i++)

  00075	46		 inc	 esi
  00076	47		 inc	 edi
  00077	83 eb 01	 sub	 ebx, 1
  0007a	75 e4		 jne	 SHORT $LL4@SetBonusOp

; 1809 : 		}
; 1810 : 	}
; 1811 : 
; 1812 : 	BYTE btIndex = 0;
; 1813 : 	WORD btNumber = 0;
; 1814 : 	BYTE btCount = 0;
; 1815 : 
; 1816 : 	btNumber = lpItem->m_Type%512;

  0007c	8b 7d ec	 mov	 edi, DWORD PTR _lpItem$GSCopy$1$[ebp]
  0007f	32 db		 xor	 bl, bl
  00081	0f bf 47 06	 movsx	 eax, WORD PTR [edi+6]
  00085	8b c8		 mov	 ecx, eax
  00087	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  0008d	79 08		 jns	 SHORT $LN36@SetBonusOp
  0008f	49		 dec	 ecx
  00090	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00096	41		 inc	 ecx
$LN36@SetBonusOp:

; 1817 : 	btIndex = (lpItem->m_Type-btNumber)/512;

  00097	0f b7 c9	 movzx	 ecx, cx

; 1818 : 
; 1819 : 	for(int n = 0; n < MAX_BONUS_OPTION; n++)

  0009a	33 f6		 xor	 esi, esi
  0009c	2b c1		 sub	 eax, ecx
  0009e	99		 cdq
  0009f	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  000a5	03 c2		 add	 eax, edx
  000a7	8b 55 f0	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  000aa	c1 f8 09	 sar	 eax, 9
  000ad	81 c2 2b 04 00
	00		 add	 edx, 1067		; 0000042bH
  000b3	89 45 ec	 mov	 DWORD PTR tv547[ebp], eax
$LL7@SetBonusOp:

; 1820 : 	{
; 1821 : 		if( btIndex >= m_BonusOption[n].btIndexMin &&

  000b6	3a 42 ff	 cmp	 al, BYTE PTR [edx-1]
  000b9	72 28		 jb	 SHORT $LN5@SetBonusOp
  000bb	3a 02		 cmp	 al, BYTE PTR [edx]
  000bd	77 24		 ja	 SHORT $LN5@SetBonusOp

; 1830 : 				}
; 1831 : 
; 1832 : 				if( btCount >= m_BonusOption[n].btCount )

  000bf	8a 6a 0e	 mov	 ch, BYTE PTR [edx+14]
  000c2	33 c0		 xor	 eax, eax
$LL10@SetBonusOp:

; 1825 : 			{
; 1826 : 				if( m_BonusOption[n].btValue[i] == OptCount[i] &&

  000c4	8a 4c 05 f4	 mov	 cl, BYTE PTR _OptCount$[ebp+eax]
  000c8	38 4c 02 09	 cmp	 BYTE PTR [edx+eax+9], cl
  000cc	75 06		 jne	 SHORT $LN16@SetBonusOp
  000ce	84 c9		 test	 cl, cl
  000d0	74 02		 je	 SHORT $LN16@SetBonusOp

; 1827 : 					OptCount[i] != FALSE )
; 1828 : 				{
; 1829 : 					btCount++;

  000d2	fe c3		 inc	 bl
$LN16@SetBonusOp:

; 1830 : 				}
; 1831 : 
; 1832 : 				if( btCount >= m_BonusOption[n].btCount )

  000d4	3a dd		 cmp	 bl, ch
  000d6	73 30		 jae	 SHORT $LN24@SetBonusOp

; 1822 : 			btIndex <= m_BonusOption[n].btIndexMax )
; 1823 : 		{
; 1824 : 			for(int i = 0; i < MAX_SOCKET_COUNT; i++)

  000d8	40		 inc	 eax
  000d9	83 f8 05	 cmp	 eax, 5
  000dc	7c e6		 jl	 SHORT $LL10@SetBonusOp

; 1839 : 							lpItem->m_SocketBonus,lpItem->m_Type,lpItem->m_SocketOption[0],lpItem->m_SocketOption[1],lpItem->m_SocketOption[2],lpItem->m_SocketOption[3],lpItem->m_SocketOption[4]);
; 1840 : 
; 1841 : 						return true;
; 1842 : 					}
; 1843 : 					else
; 1844 : 					{
; 1845 : 						lpItem->m_SocketBonus = 0xFF;
; 1846 : 						return false;
; 1847 : 					}
; 1848 : 				}
; 1849 : 			}
; 1850 : 
; 1851 : 			btCount = 0;

  000de	8b 45 ec	 mov	 eax, DWORD PTR tv547[ebp]
  000e1	32 db		 xor	 bl, bl
$LN5@SetBonusOp:

; 1818 : 
; 1819 : 	for(int n = 0; n < MAX_BONUS_OPTION; n++)

  000e3	46		 inc	 esi
  000e4	83 c2 14	 add	 edx, 20			; 00000014H
  000e7	83 fe 06	 cmp	 esi, 6
  000ea	7c ca		 jl	 SHORT $LL7@SetBonusOp
$LN34@SetBonusOp:

; 1852 : 		}
; 1853 : 	}
; 1854 : 
; 1855 : 	lpItem->m_SocketBonus = 0xFF;

  000ec	c6 87 c7 00 00
	00 ff		 mov	 BYTE PTR [edi+199], 255	; 000000ffH

; 1856 : return false;

  000f3	32 c0		 xor	 al, al
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx

; 1857 : }

  000f8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fb	33 cd		 xor	 ecx, ebp
  000fd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c2 04 00	 ret	 4
$LN24@SetBonusOp:

; 1833 : 				{
; 1834 : 					if( rand()%100 < m_BonusOption[n].OptionRate )

  00108	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0010b	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0010e	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  00111	e8 00 00 00 00	 call	 _rand
  00116	99		 cdq
  00117	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0011c	f7 f9		 idiv	 ecx
  0011e	3b 96 30 04 00
	00		 cmp	 edx, DWORD PTR [esi+1072]
  00124	7d c6		 jge	 SHORT $LN34@SetBonusOp

; 1835 : 					{
; 1836 : 						lpItem->m_SocketBonus = m_BonusOption[n].btIndex;

  00126	8a 8e 28 04 00
	00		 mov	 cl, BYTE PTR [esi+1064]
  0012c	88 8f c7 00 00
	00		 mov	 BYTE PTR [edi+199], cl

; 1837 : 
; 1838 : 						LogAdd("[SocketItem] Set Bonus Socket Option Success - OptionIndex : %d, ItemCode : %d, SocketOption[%d,%d,%d,%d,%d]",

  00132	0f b6 87 cc 00
	00 00		 movzx	 eax, BYTE PTR [edi+204]
  00139	50		 push	 eax
  0013a	0f b6 87 cb 00
	00 00		 movzx	 eax, BYTE PTR [edi+203]
  00141	50		 push	 eax
  00142	0f b6 87 ca 00
	00 00		 movzx	 eax, BYTE PTR [edi+202]
  00149	50		 push	 eax
  0014a	0f b6 87 c9 00
	00 00		 movzx	 eax, BYTE PTR [edi+201]
  00151	50		 push	 eax
  00152	0f b6 87 c8 00
	00 00		 movzx	 eax, BYTE PTR [edi+200]
  00159	50		 push	 eax
  0015a	0f bf 47 06	 movsx	 eax, WORD PTR [edi+6]
  0015e	50		 push	 eax
  0015f	0f b6 c1	 movzx	 eax, cl
  00162	50		 push	 eax
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@NPBPBJHH@?$FLSocketItem?$FN?5Set?5Bonus?5Socket?5Op@
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 1857 : }

  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	83 c4 20	 add	 esp, 32			; 00000020H
  00174	33 cd		 xor	 ecx, ebp
  00176	b0 01		 mov	 al, 1
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	5b		 pop	 ebx
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c2 04 00	 ret	 4
?SetBonusOption@CSocketItems@@QAEEPAVCItem@@@Z ENDP	; CSocketItems::SetBonusOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_btPos$ = 12						; size = 1
?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z PROC ; CSocketItems::ItemRemoveSeedSphere, COMDAT
; _this$ = ecx

; 1860 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1861 : 	if( lpItem == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 3c		 je	 SHORT $LN6@ItemRemove

; 1862 : 		return false;
; 1863 : 
; 1864 : 	if( IsSocketItem(lpItem) == NULL )

  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00014	84 c0		 test	 al, al
  00016	74 32		 je	 SHORT $LN6@ItemRemove

; 1865 : 		return false;
; 1866 : 
; 1867 : 	if( btPos >= MAX_SOCKET_COUNT )

  00018	8a 45 0c	 mov	 al, BYTE PTR _btPos$[ebp]
  0001b	3c 05		 cmp	 al, 5
  0001d	73 2b		 jae	 SHORT $LN6@ItemRemove

; 1868 : 		return false;
; 1869 : 
; 1870 : 	if( lpItem->m_SocketOption[btPos] == 0xFF ||

  0001f	0f b6 c0	 movzx	 eax, al
  00022	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00025	8a 81 c8 00 00
	00		 mov	 al, BYTE PTR [ecx+200]
  0002b	3c ff		 cmp	 al, 255			; 000000ffH
  0002d	74 1b		 je	 SHORT $LN6@ItemRemove
  0002f	3c fe		 cmp	 al, 254			; 000000feH
  00031	74 17		 je	 SHORT $LN6@ItemRemove

; 1873 : 
; 1874 : 	lpItem->m_SocketOption[btPos] = 0xFE;

  00033	c6 81 c8 00 00
	00 fe		 mov	 BYTE PTR [ecx+200], 254	; 000000feH

; 1875 : 	SetBonusOption(lpItem);

  0003a	8b cf		 mov	 ecx, edi
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 ?SetBonusOption@CSocketItems@@QAEEPAVCItem@@@Z ; CSocketItems::SetBonusOption
  00042	5f		 pop	 edi

; 1876 : 
; 1877 : return true;

  00043	b0 01		 mov	 al, 1
  00045	5e		 pop	 esi

; 1878 : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN6@ItemRemove:
  0004a	5f		 pop	 edi

; 1871 : 		lpItem->m_SocketOption[btPos] == 0xFE )
; 1872 : 		return false;

  0004b	32 c0		 xor	 al, al
  0004d	5e		 pop	 esi

; 1878 : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
?ItemRemoveSeedSphere@CSocketItems@@QAEEPAVCItem@@E@Z ENDP ; CSocketItems::ItemRemoveSeedSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_btOption$ = 12						; size = 1
_btPos$ = 16						; size = 1
?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z PROC ; CSocketItems::ItemSetSeedSphere, COMDAT
; _this$ = ecx

; 1772 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1773 : 	if( lpItem == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	75 08		 jne	 SHORT $LN2@ItemSetSee
$LN8@ItemSetSee:
  0000e	5f		 pop	 edi

; 1774 : 		return false;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 1791 : }

  00012	5d		 pop	 ebp
  00013	c2 0c 00	 ret	 12			; 0000000cH
$LN2@ItemSetSee:

; 1775 : 
; 1776 : 	if( lpItem->IsItem() == NULL )

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001d	85 c0		 test	 eax, eax
  0001f	74 ed		 je	 SHORT $LN8@ItemSetSee

; 1777 : 		return false;
; 1778 : 
; 1779 : 	if( IsSocketItem(lpItem) == NULL )

  00021	56		 push	 esi
  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00029	84 c0		 test	 al, al
  0002b	74 e1		 je	 SHORT $LN8@ItemSetSee

; 1780 : 		return false;
; 1781 : 
; 1782 : 	if( btPos >= MAX_SOCKET_COUNT )

  0002d	8a 45 10	 mov	 al, BYTE PTR _btPos$[ebp]
  00030	3c 05		 cmp	 al, 5
  00032	73 da		 jae	 SHORT $LN8@ItemSetSee

; 1783 : 		return false;
; 1784 : 
; 1785 : 	if( lpItem->m_SocketOption[btPos] != 0xFE )

  00034	0f b6 c0	 movzx	 eax, al
  00037	80 bc 30 c8 00
	00 00 fe	 cmp	 BYTE PTR [eax+esi+200], 254 ; 000000feH
  0003f	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00042	75 ca		 jne	 SHORT $LN8@ItemSetSee

; 1786 : 		return false;
; 1787 : 
; 1788 : 	lpItem->m_SocketOption[btPos] = btOption;

  00044	8a 45 0c	 mov	 al, BYTE PTR _btOption$[ebp]
  00047	88 81 c8 00 00
	00		 mov	 BYTE PTR [ecx+200], al

; 1789 : 	SetBonusOption(lpItem);

  0004d	8b cf		 mov	 ecx, edi
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ?SetBonusOption@CSocketItems@@QAEEPAVCItem@@@Z ; CSocketItems::SetBonusOption
  00055	5f		 pop	 edi

; 1790 : return true;

  00056	b0 01		 mov	 al, 1
  00058	5e		 pop	 esi

; 1791 : }

  00059	5d		 pop	 ebp
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?ItemSetSeedSphere@CSocketItems@@QAEEPAVCItem@@EE@Z ENDP ; CSocketItems::ItemSetSeedSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSocketCount@CSocketItems@@QAEEH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?GetSocketCount@CSocketItems@@QAEEH@Z PROC		; CSocketItems::GetSocketCount, COMDAT
; _this$ = ecx

; 1730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1731 : 	int SocketCount = 0;
; 1732 : 	if( ItemAttribute[ItemType].HaveItemInfo == TRUE )

  00003	6b 45 08 70	 imul	 eax, DWORD PTR _ItemType$[ebp], 112
  00007	80 b8 20 00 00
	00 01		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+32], 1
  0000e	75 2f		 jne	 SHORT $LN6@GetSocketC

; 1733 : 	{
; 1734 : 		if( ItemAttribute[ItemType].TwoHand == FALSE )

  00010	80 b8 21 00 00
	00 00		 cmp	 BYTE PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+33], 0
  00017	75 13		 jne	 SHORT $LN3@GetSocketC

; 1735 : 		{
; 1736 : 			SocketCount = m_SocketType1Rnd.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00019	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _ItemType$[ebp], 1
  00020	81 c1 d0 04 00
	00		 add	 ecx, 1232		; 000004d0H

; 1744 : }

  00026	5d		 pop	 ebp

; 1735 : 		{
; 1736 : 			SocketCount = m_SocketType1Rnd.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00027	e9 00 00 00 00	 jmp	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
$LN3@GetSocketC:

; 1737 : 		}
; 1738 : 		else
; 1739 : 		{
; 1740 : 			SocketCount = m_SocketType2Rnd.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  0002c	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _ItemType$[ebp], 1
  00033	81 c1 e0 04 00
	00		 add	 ecx, 1248		; 000004e0H

; 1744 : }

  00039	5d		 pop	 ebp

; 1737 : 		}
; 1738 : 		else
; 1739 : 		{
; 1740 : 			SocketCount = m_SocketType2Rnd.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  0003a	e9 00 00 00 00	 jmp	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue
$LN6@GetSocketC:

; 1741 : 		}
; 1742 : 	}
; 1743 : return SocketCount;

  0003f	32 c0		 xor	 al, al

; 1744 : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?GetSocketCount@CSocketItems@@QAEEH@Z ENDP		; CSocketItems::GetSocketCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ShopSocketItem@CSocketItems@@QAEXPAVCItem@@E@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_SocketCount$ = 12					; size = 1
?ShopSocketItem@CSocketItems@@QAEXPAVCItem@@E@Z PROC	; CSocketItems::ShopSocketItem, COMDAT
; _this$ = ecx

; 1725 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : 	lpItem->InitSocketItem(SocketCount);

  00003	ff 75 0c	 push	 DWORD PTR _SocketCount$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  00009	e8 00 00 00 00	 call	 ?InitSocketItem@CItem@@QAEXE@Z ; CItem::InitSocketItem

; 1727 : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?ShopSocketItem@CSocketItems@@QAEXPAVCItem@@E@Z ENDP	; CSocketItems::ShopSocketItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSphereDrop@CSocketItems@@QAEHH@Z
_TEXT	SEGMENT
_SphereItem$1$ = -4					; size = 4
_Level$ = 8						; size = 4
?GetSphereDrop@CSocketItems@@QAEHH@Z PROC		; CSocketItems::GetSphereDrop, COMDAT
; _this$ = ecx

; 1061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1062 : 	int SphereItem = -1;
; 1063 : 	int SphereMaxLevel = 0;
; 1064 : 
; 1065 : 	if( m_bSphereDrop != TRUE )

  00004	83 b9 18 05 00
	00 01		 cmp	 DWORD PTR [ecx+1304], 1
  0000b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _SphereItem$1$[ebp], -1
  00012	74 09		 je	 SHORT $LN5@GetSphereD

; 1066 : 	{
; 1067 : 		return SphereItem;

  00014	83 c8 ff	 or	 eax, -1

; 1105 : 		}
; 1106 : 	}
; 1107 : 
; 1108 : return SphereItem;
; 1109 : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN5@GetSphereD:

; 1068 : 	}
; 1069 : 
; 1070 : 	if( this->m_SphereDropLevel[4] != 0 &&

  0001d	8b 91 40 05 00
	00		 mov	 edx, DWORD PTR [ecx+1344]
  00023	8b 45 08	 mov	 eax, DWORD PTR _Level$[ebp]
  00026	53		 push	 ebx
  00027	56		 push	 esi
  00028	85 d2		 test	 edx, edx
  0002a	74 0b		 je	 SHORT $LN6@GetSphereD
  0002c	3b d0		 cmp	 edx, eax
  0002e	7f 07		 jg	 SHORT $LN6@GetSphereD

; 1071 : 		this->m_SphereDropLevel[4] <= Level)
; 1072 : 	{
; 1073 : 		SphereMaxLevel = 5;

  00030	bb 05 00 00 00	 mov	 ebx, 5
  00035	eb 52		 jmp	 SHORT $LN26@GetSphereD
$LN6@GetSphereD:

; 1074 : 	}
; 1075 : 	else if( this->m_SphereDropLevel[3] != 0 &&

  00037	8b 91 3c 05 00
	00		 mov	 edx, DWORD PTR [ecx+1340]
  0003d	85 d2		 test	 edx, edx
  0003f	74 0b		 je	 SHORT $LN8@GetSphereD
  00041	3b d0		 cmp	 edx, eax
  00043	7f 07		 jg	 SHORT $LN8@GetSphereD

; 1076 : 			 this->m_SphereDropLevel[3] <= Level)
; 1077 : 	{
; 1078 : 		SphereMaxLevel = 4;

  00045	bb 04 00 00 00	 mov	 ebx, 4
  0004a	eb 3d		 jmp	 SHORT $LN26@GetSphereD
$LN8@GetSphereD:

; 1079 : 	}
; 1080 : 	else if( this->m_SphereDropLevel[2] != 0 &&

  0004c	8b 91 38 05 00
	00		 mov	 edx, DWORD PTR [ecx+1336]
  00052	85 d2		 test	 edx, edx
  00054	74 0b		 je	 SHORT $LN10@GetSphereD
  00056	3b d0		 cmp	 edx, eax
  00058	7f 07		 jg	 SHORT $LN10@GetSphereD

; 1081 : 			 this->m_SphereDropLevel[2] <= Level)
; 1082 : 	{
; 1083 : 		SphereMaxLevel = 3;

  0005a	bb 03 00 00 00	 mov	 ebx, 3
  0005f	eb 28		 jmp	 SHORT $LN26@GetSphereD
$LN10@GetSphereD:

; 1084 : 	}
; 1085 : 	else if( this->m_SphereDropLevel[1] != 0 &&

  00061	8b 91 34 05 00
	00		 mov	 edx, DWORD PTR [ecx+1332]
  00067	85 d2		 test	 edx, edx
  00069	74 0b		 je	 SHORT $LN12@GetSphereD
  0006b	3b d0		 cmp	 edx, eax
  0006d	7f 07		 jg	 SHORT $LN12@GetSphereD

; 1086 : 			 this->m_SphereDropLevel[1] <= Level)
; 1087 : 	{
; 1088 : 		SphereMaxLevel = 2;

  0006f	bb 02 00 00 00	 mov	 ebx, 2
  00074	eb 13		 jmp	 SHORT $LN26@GetSphereD
$LN12@GetSphereD:

; 1089 : 	}
; 1090 : 	else if( this->m_SphereDropLevel[0] != 0 &&

  00076	8b 91 30 05 00
	00		 mov	 edx, DWORD PTR [ecx+1328]
  0007c	85 d2		 test	 edx, edx
  0007e	74 43		 je	 SHORT $LN14@GetSphereD
  00080	3b d0		 cmp	 edx, eax
  00082	7f 3f		 jg	 SHORT $LN14@GetSphereD

; 1091 : 			 this->m_SphereDropLevel[0] <= Level)
; 1092 : 	{
; 1093 : 		SphereMaxLevel = 1;

  00084	bb 01 00 00 00	 mov	 ebx, 1
$LN26@GetSphereD:
  00089	57		 push	 edi

; 1098 : 	}
; 1099 : 
; 1100 : 	for(int i = 0; i < SphereMaxLevel; i++)

  0008a	33 f6		 xor	 esi, esi
  0008c	8d b9 1c 05 00
	00		 lea	 edi, DWORD PTR [ecx+1308]
$LL4@GetSphereD:

; 1101 : 	{
; 1102 : 		if( (DWORD)m_SphereDropRate[i] >= (DWORD)rand()%10000 )

  00092	e8 00 00 00 00	 call	 _rand
  00097	33 d2		 xor	 edx, edx
  00099	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0009e	f7 f1		 div	 ecx
  000a0	39 17		 cmp	 DWORD PTR [edi], edx
  000a2	72 0b		 jb	 SHORT $LN23@GetSphereD

; 1103 : 		{
; 1104 : 			SphereItem = ITEMGET(12,70)+i;

  000a4	8d 86 46 18 00
	00		 lea	 eax, DWORD PTR [esi+6214]
  000aa	89 45 fc	 mov	 DWORD PTR _SphereItem$1$[ebp], eax
  000ad	eb 03		 jmp	 SHORT $LN2@GetSphereD
$LN23@GetSphereD:
  000af	8b 45 fc	 mov	 eax, DWORD PTR _SphereItem$1$[ebp]
$LN2@GetSphereD:

; 1098 : 	}
; 1099 : 
; 1100 : 	for(int i = 0; i < SphereMaxLevel; i++)

  000b2	46		 inc	 esi
  000b3	83 c7 04	 add	 edi, 4
  000b6	3b f3		 cmp	 esi, ebx
  000b8	7c d8		 jl	 SHORT $LL4@GetSphereD
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx

; 1105 : 		}
; 1106 : 	}
; 1107 : 
; 1108 : return SphereItem;
; 1109 : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
$LN14@GetSphereD:
  000c3	5e		 pop	 esi

; 1094 : 	}
; 1095 : 	else
; 1096 : 	{
; 1097 : 		return SphereItem;

  000c4	83 c8 ff	 or	 eax, -1
  000c7	5b		 pop	 ebx

; 1105 : 		}
; 1106 : 	}
; 1107 : 
; 1108 : return SphereItem;
; 1109 : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
?GetSphereDrop@CSocketItems@@QAEHH@Z ENDP		; CSocketItems::GetSphereDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetOptionValue@CSocketItems@@QAEKE@Z
_TEXT	SEGMENT
_tmpOption$ = -16					; size = 16
_btOption$ = 8						; size = 1
_Option$ = 8						; size = 1
?GetOptionValue@CSocketItems@@QAEKE@Z PROC		; CSocketItems::GetOptionValue, COMDAT
; _this$ = ecx

; 981  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 982  : 	BYTE btOption = 0;
; 983  : 	BYTE btLevel = 0;
; 984  : 
; 985  : 	_SOCKET_SEED_DATA* lpSeedOption = NULL;
; 986  : 	int btUnk2 = 0;
; 987  : 
; 988  : 	_SOCKET_SPHERE_OPTION tmpOption;

  0000a	8d 4d f0	 lea	 ecx, DWORD PTR _tmpOption$[ebp]
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 ??0_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION

; 989  : 
; 990  : 	int Value = 0;
; 991  : 
; 992  : 	btOption = Option % 50;

  00013	0f b6 7d 08	 movzx	 edi, BYTE PTR _Option$[ebp]
  00017	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0001c	8b c7		 mov	 eax, edi
  0001e	99		 cdq
  0001f	f7 f9		 idiv	 ecx

; 994  : 
; 995  : 	lpSeedOption = GetSeedOption(btOption);

  00021	8b ce		 mov	 ecx, esi
  00023	8a da		 mov	 bl, dl
  00025	88 5d 08	 mov	 BYTE PTR _btOption$[ebp], bl
  00028	ff 75 08	 push	 DWORD PTR _btOption$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ; CSocketItems::GetSeedOption
  00030	8b c8		 mov	 ecx, eax

; 996  : 
; 997  : 	if( lpSeedOption == NULL )

  00032	85 c9		 test	 ecx, ecx
  00034	75 09		 jne	 SHORT $LN2@GetOptionV
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 1005 : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
$LN2@GetOptionV:

; 993  : 	btLevel = (Option - btOption)/50+1;

  0003f	0f b6 c3	 movzx	 eax, bl
  00042	2b f8		 sub	 edi, eax
  00044	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00049	f7 ef		 imul	 edi
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b c2		 mov	 eax, edx
  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00053	03 c2		 add	 eax, edx
  00055	fe c0		 inc	 al

; 998  : 	{
; 999  : 		return false;
; 1000 : 	}
; 1001 : 
; 1002 : 	tmpOption.SetSphereOption(lpSeedOption,btLevel);

  00057	0f b6 c0	 movzx	 eax, al
  0005a	50		 push	 eax
  0005b	51		 push	 ecx
  0005c	8d 4d f0	 lea	 ecx, DWORD PTR _tmpOption$[ebp]
  0005f	e8 00 00 00 00	 call	 ?SetSphereOption@_SOCKET_SPHERE_OPTION@@QAEEPAU_SOCKET_SEED_DATA@@E@Z ; _SOCKET_SPHERE_OPTION::SetSphereOption

; 1003 : 	Value = ItemAttribute[tmpOption.GetSphereItem()].BuyMoney;

  00064	8d 4d f0	 lea	 ecx, DWORD PTR _tmpOption$[ebp]
  00067	e8 00 00 00 00	 call	 ?GetSphereItem@_SOCKET_SPHERE_OPTION@@QAEHXZ ; _SOCKET_SPHERE_OPTION::GetSphereItem
  0006c	6b c0 70	 imul	 eax, eax, 112
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 1004 : 	return Value;

  00072	8b 80 50 00 00
	00		 mov	 eax, DWORD PTR ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A[eax+80]

; 1005 : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?GetOptionValue@CSocketItems@@QAEKE@Z ENDP		; CSocketItems::GetOptionValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplySetOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplySetOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplySetOption, COMDAT
; _this$ = ecx

; 1636 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1637 : 	switch(btOption)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btOption$[ebp]
  00007	83 e8 2c	 sub	 eax, 44			; 0000002cH
  0000a	74 15		 je	 SHORT $LN4@ApplySetOp
  0000c	83 e8 01	 sub	 eax, 1
  0000f	75 1c		 jne	 SHORT $LN2@ApplySetOp

; 1641 : 		break;
; 1642 : 	case 45:
; 1643 : 		lpObj->SetOpIgnoreDefense += IncValue;

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00014	8a 45 14	 mov	 al, BYTE PTR _IncValue$[ebp]
  00017	00 81 cc 14 00
	00		 add	 BYTE PTR [ecx+5324], al

; 1644 : 		break;
; 1645 : 	}
; 1646 : }

  0001d	5d		 pop	 ebp
  0001e	c2 10 00	 ret	 16			; 00000010H
$LN4@ApplySetOp:

; 1638 : 	{
; 1639 : 	case 44:
; 1640 : 		lpObj->SetOpDoubleDamage += IncValue;

  00021	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00024	8a 45 14	 mov	 al, BYTE PTR _IncValue$[ebp]
  00027	00 81 cd 14 00
	00		 add	 BYTE PTR [ecx+5325], al
$LN2@ApplySetOp:

; 1644 : 		break;
; 1645 : 	}
; 1646 : }

  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?ApplySetOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplySetOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyUnk1Option@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyUnk1Option@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyUnk1Option, COMDAT
; _this$ = ecx

; 1632 : 
; 1633 : }

  00000	c2 10 00	 ret	 16			; 00000010H
?ApplyUnk1Option@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyUnk1Option
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyEarthOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyEarthOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyEarthOption, COMDAT
; _this$ = ecx

; 1606 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1607 : 	int _IncValue = 0;
; 1608 : 
; 1609 : 	switch( btOption )

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btOption$[ebp]
  00007	8b d1		 mov	 edx, ecx
  00009	83 c0 de	 add	 eax, -34		; ffffffdeH
  0000c	83 f8 03	 cmp	 eax, 3
  0000f	0f 87 c5 00 00
	00		 ja	 $LN2@ApplyEarth
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@ApplyEarth[eax*4]
$LN4@ApplyEarth:

; 1610 : 	{
; 1611 : 	case 34:
; 1612 : 		_IncValue = GetResultValue(lpObj->Strength+lpObj->AddStrength,IncValue,IncType);

  0001e	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00021	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00024	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00027	0f b7 b7 fc 00
	00 00		 movzx	 esi, WORD PTR [edi+252]
  0002e	0f b7 8f d0 00
	00 00		 movzx	 ecx, WORD PTR [edi+208]
  00035	03 ce		 add	 ecx, esi
  00037	51		 push	 ecx
  00038	8b ca		 mov	 ecx, edx
  0003a	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1613 : 		lpObj->AddStrength += _IncValue;

  0003f	03 c6		 add	 eax, esi
  00041	66 89 87 fc 00
	00 00		 mov	 WORD PTR [edi+252], ax
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi

; 1626 : 		break;
; 1627 : 	}
; 1628 : }

  0004a	5d		 pop	 ebp
  0004b	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplyEarth:

; 1614 : 		break;
; 1615 : 	case 35:
; 1616 : 		_IncValue = GetResultValue(lpObj->Dexterity+lpObj->AddDexterity,IncValue,IncType);

  0004e	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00051	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00054	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00057	0f b7 b7 fe 00
	00 00		 movzx	 esi, WORD PTR [edi+254]
  0005e	0f b7 8f d2 00
	00 00		 movzx	 ecx, WORD PTR [edi+210]
  00065	03 ce		 add	 ecx, esi
  00067	51		 push	 ecx
  00068	8b ca		 mov	 ecx, edx
  0006a	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1617 : 		lpObj->AddDexterity += _IncValue;

  0006f	03 c6		 add	 eax, esi
  00071	66 89 87 fe 00
	00 00		 mov	 WORD PTR [edi+254], ax
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi

; 1626 : 		break;
; 1627 : 	}
; 1628 : }

  0007a	5d		 pop	 ebp
  0007b	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplyEarth:

; 1618 : 		break;
; 1619 : 	case 36:
; 1620 : 		_IncValue = GetResultValue(lpObj->Vitality+lpObj->AddVitality,IncValue,IncType);

  0007e	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00081	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00084	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00087	0f b7 b7 00 01
	00 00		 movzx	 esi, WORD PTR [edi+256]
  0008e	0f b7 8f d4 00
	00 00		 movzx	 ecx, WORD PTR [edi+212]
  00095	03 ce		 add	 ecx, esi
  00097	51		 push	 ecx
  00098	8b ca		 mov	 ecx, edx
  0009a	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1621 : 		lpObj->AddVitality += _IncValue;

  0009f	03 c6		 add	 eax, esi
  000a1	66 89 87 00 01
	00 00		 mov	 WORD PTR [edi+256], ax
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi

; 1626 : 		break;
; 1627 : 	}
; 1628 : }

  000aa	5d		 pop	 ebp
  000ab	c2 10 00	 ret	 16			; 00000010H
$LN7@ApplyEarth:

; 1622 : 		break;
; 1623 : 	case 37:
; 1624 : 		_IncValue = GetResultValue(lpObj->Energy+lpObj->AddEnergy,IncValue,IncType);

  000ae	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  000b1	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  000b4	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  000b7	0f b7 b7 02 01
	00 00		 movzx	 esi, WORD PTR [edi+258]
  000be	0f b7 8f d6 00
	00 00		 movzx	 ecx, WORD PTR [edi+214]
  000c5	03 ce		 add	 ecx, esi
  000c7	51		 push	 ecx
  000c8	8b ca		 mov	 ecx, edx
  000ca	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1625 : 		lpObj->AddEnergy += _IncValue;

  000cf	03 c6		 add	 eax, esi
  000d1	66 89 87 02 01
	00 00		 mov	 WORD PTR [edi+258], ax
$LN9@ApplyEarth:
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
$LN2@ApplyEarth:

; 1626 : 		break;
; 1627 : 	}
; 1628 : }

  000da	5d		 pop	 ebp
  000db	c2 10 00	 ret	 16			; 00000010H
  000de	66 90		 npad	 2
$LN12@ApplyEarth:
  000e0	00 00 00 00	 DD	 $LN4@ApplyEarth
  000e4	00 00 00 00	 DD	 $LN5@ApplyEarth
  000e8	00 00 00 00	 DD	 $LN6@ApplyEarth
  000ec	00 00 00 00	 DD	 $LN7@ApplyEarth
?ApplyEarthOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyEarthOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyLightningOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyLightningOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyLightningOption, COMDAT
; _this$ = ecx

; 1583 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1584 : 	int _IncValue = 0;
; 1585 : 
; 1586 : 	switch( btOption )

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btOption$[ebp]
  00007	83 c0 e3	 add	 eax, -29		; ffffffe3H
  0000a	83 f8 03	 cmp	 eax, 3
  0000d	77 7b		 ja	 SHORT $LN2@ApplyLight
  0000f	56		 push	 esi
  00010	57		 push	 edi
  00011	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@ApplyLight[eax*4]
$LN4@ApplyLight:

; 1587 : 	{
; 1588 : 	case 29:
; 1589 : 		_IncValue = GetResultValue(lpObj->SetOpAddExDamage,IncValue,IncType);

  00018	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001b	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  0001e	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00021	0f b7 b7 b4 14
	00 00		 movzx	 esi, WORD PTR [edi+5300]
  00028	0f bf c6	 movsx	 eax, si
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1590 : 		lpObj->SetOpAddExDamage += _IncValue;

  00031	03 c6		 add	 eax, esi
  00033	66 89 87 b4 14
	00 00		 mov	 WORD PTR [edi+5300], ax
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi

; 1601 : 		break;
; 1602 : 	}
; 1603 : }

  0003c	5d		 pop	 ebp
  0003d	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplyLight:

; 1591 : 		break;
; 1592 : 	case 30:
; 1593 : 		lpObj->m_ExcelentDamage += IncValue;

  00040	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00043	0f b7 45 14	 movzx	 eax, WORD PTR _IncValue$[ebp]
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	01 81 a0 06 00
	00		 add	 DWORD PTR [ecx+1696], eax

; 1601 : 		break;
; 1602 : 	}
; 1603 : }

  0004f	5d		 pop	 ebp
  00050	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplyLight:

; 1594 : 		break;
; 1595 : 	case 31:
; 1596 : 		_IncValue = GetResultValue(lpObj->SetOpAddCriticalDamage,IncValue,IncType);

  00053	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00056	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00059	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  0005c	0f b7 b7 b8 14
	00 00		 movzx	 esi, WORD PTR [edi+5304]
  00063	0f bf c6	 movsx	 eax, si
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1597 : 		lpObj->SetOpAddCriticalDamage += _IncValue;

  0006c	03 c6		 add	 eax, esi
  0006e	66 89 87 b8 14
	00 00		 mov	 WORD PTR [edi+5304], ax
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi

; 1601 : 		break;
; 1602 : 	}
; 1603 : }

  00077	5d		 pop	 ebp
  00078	c2 10 00	 ret	 16			; 00000010H
$LN7@ApplyLight:

; 1598 : 		break;
; 1599 : 	case 32:
; 1600 : 		lpObj->m_CriticalDamage += IncValue;

  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0007e	0f b7 45 14	 movzx	 eax, WORD PTR _IncValue$[ebp]
  00082	01 81 9c 06 00
	00		 add	 DWORD PTR [ecx+1692], eax
$LN9@ApplyLight:
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
$LN2@ApplyLight:

; 1601 : 		break;
; 1602 : 	}
; 1603 : }

  0008a	5d		 pop	 ebp
  0008b	c2 10 00	 ret	 16			; 00000010H
  0008e	66 90		 npad	 2
$LN12@ApplyLight:
  00090	00 00 00 00	 DD	 $LN4@ApplyLight
  00094	00 00 00 00	 DD	 $LN5@ApplyLight
  00098	00 00 00 00	 DD	 $LN6@ApplyLight
  0009c	00 00 00 00	 DD	 $LN7@ApplyLight
?ApplyLightningOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyLightningOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyWindOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyWindOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyWindOption, COMDAT
; _this$ = ecx

; 1538 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1539 : 	int _IncValue = 0;
; 1540 : 
; 1541 : 	switch( btOption )

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btOption$[ebp]
  00007	83 c0 eb	 add	 eax, -21		; ffffffebH
  0000a	83 f8 06	 cmp	 eax, 6
  0000d	0f 87 0a 02 00
	00		 ja	 $LN2@ApplyWindO
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@ApplyWindO[eax*4]
$LN4@ApplyWindO:

; 1542 : 	{
; 1543 : 	case 21:
; 1544 : 		_IncValue = GetResultValue(lpObj->MaxLife+lpObj->AddLife,IncValue,IncType);
; 1545 : 		lpObj->m_wSocketAddLife += _IncValue;

  0001c	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001f	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00022	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00025	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  0002d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00030	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  00038	f3 0f 2c c0	 cvttss2si eax, xmm0
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue
  00042	66 01 86 8e 25
	00 00		 add	 WORD PTR [esi+9614], ax
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 1578 : 		break;
; 1579 : 	}
; 1580 : }

  0004b	5d		 pop	 ebp
  0004c	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplyWindO:

; 1546 : 		break;
; 1547 : 	case 22:
; 1548 : 		_IncValue = GetResultValue(lpObj->MaxLife+lpObj->AddLife,IncValue,IncType);

  0004f	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00052	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00055	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00058	8b b7 24 01 00
	00		 mov	 esi, DWORD PTR [edi+292]
  0005e	66 0f 6e c6	 movd	 xmm0, esi
  00062	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00065	f3 0f 58 87 dc
	00 00 00	 addss	 xmm0, DWORD PTR [edi+220]
  0006d	f3 0f 2c c0	 cvttss2si eax, xmm0
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1549 : 		lpObj->AddLife += _IncValue;

  00077	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 1550 : 
; 1551 : 		GCReFillSend(lpObj->m_Index,lpObj->MaxLife+lpObj->AddLife,0xFE,0,lpObj->iMaxShield+lpObj->iAddShield);

  0007a	66 8b 87 34 01
	00 00		 mov	 ax, WORD PTR [edi+308]
  00081	66 03 87 30 01
	00 00		 add	 ax, WORD PTR [edi+304]
  00088	66 0f 6e c1	 movd	 xmm0, ecx
  0008c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008f	0f b7 c0	 movzx	 eax, ax
  00092	50		 push	 eax
  00093	6a 00		 push	 0
  00095	68 fe 00 00 00	 push	 254			; 000000feH
  0009a	89 8f 24 01 00
	00		 mov	 DWORD PTR [edi+292], ecx
  000a0	f3 0f 58 87 dc
	00 00 00	 addss	 xmm0, DWORD PTR [edi+220]
  000a8	f3 0f 2c c0	 cvttss2si eax, xmm0
  000ac	0f b7 c0	 movzx	 eax, ax
  000af	50		 push	 eax
  000b0	ff 37		 push	 DWORD PTR [edi]
  000b2	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 1552 : 		GCReFillSend(lpObj->m_Index,lpObj->Life,0xFF,0,lpObj->iShield);

  000b7	0f b7 87 2c 01
	00 00		 movzx	 eax, WORD PTR [edi+300]
  000be	50		 push	 eax
  000bf	f3 0f 2c 87 d8
	00 00 00	 cvttss2si eax, DWORD PTR [edi+216]
  000c7	6a 00		 push	 0
  000c9	68 ff 00 00 00	 push	 255			; 000000ffH
  000ce	0f b7 c0	 movzx	 eax, ax
  000d1	50		 push	 eax
  000d2	ff 37		 push	 DWORD PTR [edi]
  000d4	e8 00 00 00 00	 call	 ?GCReFillSend@@YAXHGEEG@Z ; GCReFillSend

; 1570 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);

  000d9	83 c4 28	 add	 esp, 40			; 00000028H
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi

; 1578 : 		break;
; 1579 : 	}
; 1580 : }

  000de	5d		 pop	 ebp
  000df	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplyWindO:

; 1553 : 		break;
; 1554 : 	case 23:
; 1555 : 		_IncValue = GetResultValue(lpObj->MaxMana+lpObj->AddMana,IncValue,IncType);

  000e2	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  000e5	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  000e8	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  000eb	8b b7 28 01 00
	00		 mov	 esi, DWORD PTR [edi+296]
  000f1	66 0f 6e c6	 movd	 xmm0, esi
  000f5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000f8	f3 0f 58 87 f0
	00 00 00	 addss	 xmm0, DWORD PTR [edi+240]
  00100	f3 0f 2c c0	 cvttss2si eax, xmm0
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1556 : 		lpObj->AddMana += _IncValue;

  0010a	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 1557 : 
; 1558 : 		GCManaSend(lpObj->m_Index,lpObj->MaxMana+lpObj->AddMana,0xFE,0,lpObj->MaxBP+lpObj->AddBP);

  0010d	66 8b 87 0c 01
	00 00		 mov	 ax, WORD PTR [edi+268]
  00114	66 03 87 08 01
	00 00		 add	 ax, WORD PTR [edi+264]
  0011b	89 8f 28 01 00
	00		 mov	 DWORD PTR [edi+296], ecx
  00121	66 0f 6e c1	 movd	 xmm0, ecx

; 1559 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);
; 1560 : 		break;

  00125	eb 6e		 jmp	 SHORT $LN16@ApplyWindO
$LN7@ApplyWindO:

; 1561 : 	case 24:
; 1562 : 		_IncValue = GetResultValue(lpObj->MaxMana+lpObj->AddMana,IncValue,IncType);
; 1563 : 		lpObj->m_wSocketAddMana += _IncValue;

  00127	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0012a	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  0012d	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00130	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]
  00138	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0013b	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  00143	f3 0f 2c c0	 cvttss2si eax, xmm0
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue
  0014d	66 01 86 90 25
	00 00		 add	 WORD PTR [esi+9616], ax
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi

; 1578 : 		break;
; 1579 : 	}
; 1580 : }

  00156	5d		 pop	 ebp
  00157	c2 10 00	 ret	 16			; 00000010H
$LN8@ApplyWindO:

; 1564 : 		break;
; 1565 : 	case 25:
; 1566 : 		_IncValue = GetResultValue(lpObj->MaxBP+lpObj->AddBP,IncValue,IncType);

  0015a	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0015d	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00160	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00163	8b 87 08 01 00
	00		 mov	 eax, DWORD PTR [edi+264]
  00169	8b b7 0c 01 00
	00		 mov	 esi, DWORD PTR [edi+268]
  0016f	03 c6		 add	 eax, esi
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue
  00177	66 0f 6e 87 28
	01 00 00	 movd	 xmm0, DWORD PTR [edi+296]

; 1567 : 		lpObj->AddBP += _IncValue;

  0017f	03 c6		 add	 eax, esi
  00181	89 87 0c 01 00
	00		 mov	 DWORD PTR [edi+268], eax

; 1568 : 
; 1569 : 		GCManaSend(lpObj->m_Index,lpObj->MaxMana+lpObj->AddMana,0xFE,0,lpObj->MaxBP+lpObj->AddBP);

  00187	66 8b 87 08 01
	00 00		 mov	 ax, WORD PTR [edi+264]
  0018e	66 03 87 0c 01
	00 00		 add	 ax, WORD PTR [edi+268]
$LN16@ApplyWindO:
  00195	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00198	0f b7 c0	 movzx	 eax, ax
  0019b	50		 push	 eax
  0019c	6a 00		 push	 0
  0019e	68 fe 00 00 00	 push	 254			; 000000feH
  001a3	f3 0f 58 87 f0
	00 00 00	 addss	 xmm0, DWORD PTR [edi+240]
  001ab	f3 0f 2c c0	 cvttss2si eax, xmm0
  001af	0f b7 c0	 movzx	 eax, ax
  001b2	50		 push	 eax
  001b3	ff 37		 push	 DWORD PTR [edi]
  001b5	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend

; 1570 : 		GCManaSend(lpObj->m_Index,lpObj->Mana,0xFF,0,lpObj->BP);

  001ba	0f b7 87 04 01
	00 00		 movzx	 eax, WORD PTR [edi+260]
  001c1	50		 push	 eax
  001c2	f3 0f 2c 87 ec
	00 00 00	 cvttss2si eax, DWORD PTR [edi+236]
  001ca	6a 00		 push	 0
  001cc	68 ff 00 00 00	 push	 255			; 000000ffH
  001d1	0f b7 c0	 movzx	 eax, ax
  001d4	50		 push	 eax
  001d5	ff 37		 push	 DWORD PTR [edi]
  001d7	e8 00 00 00 00	 call	 ?GCManaSend@@YAXHFEEG@Z	; GCManaSend
  001dc	83 c4 28	 add	 esp, 40			; 00000028H
  001df	5f		 pop	 edi
  001e0	5e		 pop	 esi

; 1578 : 		break;
; 1579 : 	}
; 1580 : }

  001e1	5d		 pop	 ebp
  001e2	c2 10 00	 ret	 16			; 00000010H
$LN9@ApplyWindO:

; 1571 : 		break;
; 1572 : 	case 26:
; 1573 : 		_IncValue = GetResultValue(lpObj->SetOpIncAGValue,IncValue,IncType);

  001e5	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  001e8	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  001eb	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  001ee	0f b7 b7 bc 14
	00 00		 movzx	 esi, WORD PTR [edi+5308]
  001f5	0f bf c6	 movsx	 eax, si
  001f8	50		 push	 eax
  001f9	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1574 : 		lpObj->SetOpIncAGValue += _IncValue;

  001fe	03 c6		 add	 eax, esi
  00200	66 89 87 bc 14
	00 00		 mov	 WORD PTR [edi+5308], ax
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi

; 1578 : 		break;
; 1579 : 	}
; 1580 : }

  00209	5d		 pop	 ebp
  0020a	c2 10 00	 ret	 16			; 00000010H
$LN10@ApplyWindO:

; 1575 : 		break;
; 1576 : 	case 27:
; 1577 : 		lpObj->MonsterDieGetMoney += IncValue;

  0020d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00210	66 8b 45 14	 mov	 ax, WORD PTR _IncValue$[ebp]
  00214	66 01 81 4a 01
	00 00		 add	 WORD PTR [ecx+330], ax
$LN12@ApplyWindO:
  0021b	5f		 pop	 edi
  0021c	5e		 pop	 esi
$LN2@ApplyWindO:

; 1578 : 		break;
; 1579 : 	}
; 1580 : }

  0021d	5d		 pop	 ebp
  0021e	c2 10 00	 ret	 16			; 00000010H
  00221	0f 1f 00	 npad	 3
$LN18@ApplyWindO:
  00224	00 00 00 00	 DD	 $LN4@ApplyWindO
  00228	00 00 00 00	 DD	 $LN5@ApplyWindO
  0022c	00 00 00 00	 DD	 $LN6@ApplyWindO
  00230	00 00 00 00	 DD	 $LN7@ApplyWindO
  00234	00 00 00 00	 DD	 $LN8@ApplyWindO
  00238	00 00 00 00	 DD	 $LN9@ApplyWindO
  0023c	00 00 00 00	 DD	 $LN10@ApplyWindO
?ApplyWindOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyWindOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyIceOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyIceOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyIceOption, COMDAT
; _this$ = ecx

; 1514 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1515 : 	int _IncValue = 0;
; 1516 : 
; 1517 : 	switch( btOption )

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _btOption$[ebp]
  00007	83 c0 f0	 add	 eax, -16		; fffffff0H
  0000a	83 f8 03	 cmp	 eax, 3
  0000d	0f 87 a3 00 00
	00		 ja	 $LN2@ApplyIceOp
  00013	56		 push	 esi
  00014	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@ApplyIceOp[eax*4]
$LN4@ApplyIceOp:

; 1518 : 	{
; 1519 : 	case 16:
; 1520 : 		_IncValue += GetResultValue((int)(lpObj->MaxLife+lpObj->AddLife),IncValue,IncType);
; 1521 : 		lpObj->m_wSocketMonsterDieLife += _IncValue;

  0001b	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001e	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00021	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00024	66 0f 6e 86 24
	01 00 00	 movd	 xmm0, DWORD PTR [esi+292]
  0002c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0002f	f3 0f 58 86 dc
	00 00 00	 addss	 xmm0, DWORD PTR [esi+220]
  00037	f3 0f 2c c0	 cvttss2si eax, xmm0
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue
  00041	66 01 86 92 25
	00 00		 add	 WORD PTR [esi+9618], ax
  00048	5e		 pop	 esi

; 1533 : 		break;
; 1534 : 	}
; 1535 : }

  00049	5d		 pop	 ebp
  0004a	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplyIceOp:

; 1522 : 		break;
; 1523 : 	case 17:
; 1524 : 		_IncValue += GetResultValue((int)(lpObj->MaxMana+lpObj->AddMana),IncValue,IncType);
; 1525 : 		lpObj->m_wSocketMonsterDieMana += _IncValue;

  0004d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00050	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00053	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00056	66 0f 6e 86 28
	01 00 00	 movd	 xmm0, DWORD PTR [esi+296]
  0005e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00061	f3 0f 58 86 f0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+240]
  00069	f3 0f 2c c0	 cvttss2si eax, xmm0
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue
  00073	66 01 86 94 25
	00 00		 add	 WORD PTR [esi+9620], ax
  0007a	5e		 pop	 esi

; 1533 : 		break;
; 1534 : 	}
; 1535 : }

  0007b	5d		 pop	 ebp
  0007c	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplyIceOp:
  0007f	57		 push	 edi

; 1526 : 		break;
; 1527 : 	case 18:
; 1528 : 		_IncValue = GetResultValue(lpObj->SetOpAddSkillAttack,IncValue,IncType);

  00080	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00083	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00086	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  00089	0f b7 b7 b2 14
	00 00		 movzx	 esi, WORD PTR [edi+5298]
  00090	0f bf c6	 movsx	 eax, si
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1529 : 		lpObj->SetOpAddSkillAttack += _IncValue;

  00099	03 c6		 add	 eax, esi
  0009b	66 89 87 b2 14
	00 00		 mov	 WORD PTR [edi+5298], ax
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi

; 1533 : 		break;
; 1534 : 	}
; 1535 : }

  000a4	5d		 pop	 ebp
  000a5	c2 10 00	 ret	 16			; 00000010H
$LN7@ApplyIceOp:

; 1530 : 		break;
; 1531 : 	case 19:
; 1532 : 		lpObj->m_AttackRating += IncValue;

  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000ab	0f b7 45 14	 movzx	 eax, WORD PTR _IncValue$[ebp]
  000af	01 81 68 06 00
	00		 add	 DWORD PTR [ecx+1640], eax
$LN9@ApplyIceOp:
  000b5	5e		 pop	 esi
$LN2@ApplyIceOp:

; 1533 : 		break;
; 1534 : 	}
; 1535 : }

  000b6	5d		 pop	 ebp
  000b7	c2 10 00	 ret	 16			; 00000010H
  000ba	66 90		 npad	 2
$LN11@ApplyIceOp:
  000bc	00 00 00 00	 DD	 $LN4@ApplyIceOp
  000c0	00 00 00 00	 DD	 $LN5@ApplyIceOp
  000c4	00 00 00 00	 DD	 $LN6@ApplyIceOp
  000c8	00 00 00 00	 DD	 $LN7@ApplyIceOp
?ApplyIceOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyIceOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyWaterOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyWaterOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyWaterOption, COMDAT
; _this$ = ecx

; 1485 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1486 : 	int _IncValue = 0;
; 1487 : 
; 1488 : 	switch( btOption )

  00004	0f b6 45 0c	 movzx	 eax, BYTE PTR _btOption$[ebp]
  00008	8b d1		 mov	 edx, ecx
  0000a	83 c0 f6	 add	 eax, -10		; fffffff6H
  0000d	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  00010	83 f8 04	 cmp	 eax, 4
  00013	0f 87 ad 00 00
	00		 ja	 $LN2@ApplyWater
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@ApplyWater[eax*4]
$LN4@ApplyWater:

; 1489 : 	{
; 1490 : 	case 10:
; 1491 : 		_IncValue = GetResultValue(lpObj->m_SuccessfulBlocking,IncValue,IncType);

  00022	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00025	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  00028	ff 75 14	 push	 DWORD PTR _IncValue$[ebp]
  0002b	8b b7 7c 06 00
	00		 mov	 esi, DWORD PTR [edi+1660]
  00031	56		 push	 esi
  00032	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1492 : 		lpObj->m_SuccessfulBlocking += _IncValue;

  00037	03 c6		 add	 eax, esi
  00039	89 87 7c 06 00
	00		 mov	 DWORD PTR [edi+1660], eax
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 1509 : 		break;
; 1510 : 	}
; 1511 : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplyWater:

; 1493 : 		break;
; 1494 : 	case 11:
; 1495 : 		_IncValue = GetResultValue(lpObj->m_Defense,IncValue,IncType);

  00047	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0004a	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  0004d	8b 7d 14	 mov	 edi, DWORD PTR _IncValue$[ebp]
  00050	57		 push	 edi
  00051	8b b1 74 06 00
	00		 mov	 esi, DWORD PTR [ecx+1652]
  00057	8b ca		 mov	 ecx, edx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1496 : 		lpObj->m_Defense += _IncValue;

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00062	03 c6		 add	 eax, esi

; 1497 : 
; 1498 : 		_IncValue = GetResultValue(lpObj->m_MagicDefense,IncValue,IncType);

  00064	ff 75 10	 push	 DWORD PTR _IncType$[ebp]
  00067	57		 push	 edi
  00068	8b b1 78 06 00
	00		 mov	 esi, DWORD PTR [ecx+1656]
  0006e	89 81 74 06 00
	00		 mov	 DWORD PTR [ecx+1652], eax
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00077	56		 push	 esi
  00078	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1499 : 		lpObj->m_MagicDefense += _IncValue;

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00080	03 c6		 add	 eax, esi
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	89 81 78 06 00
	00		 mov	 DWORD PTR [ecx+1656], eax

; 1509 : 		break;
; 1510 : 	}
; 1511 : }

  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplyWater:

; 1500 : 		break;
; 1501 : 	case 12:
; 1502 : 		lpObj->SetOpImproveSheldDefence += IncValue;

  00090	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00093	8a 45 14	 mov	 al, BYTE PTR _IncValue$[ebp]
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	00 81 d1 14 00
	00		 add	 BYTE PTR [ecx+5329], al

; 1509 : 		break;
; 1510 : 	}
; 1511 : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 10 00	 ret	 16			; 00000010H
$LN7@ApplyWater:

; 1503 : 		break;
; 1504 : 	case 13:
; 1505 : 		lpObj->DamageMinus += IncValue;

  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000a7	8a 45 14	 mov	 al, BYTE PTR _IncValue$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	00 81 48 01 00
	00		 add	 BYTE PTR [ecx+328], al

; 1509 : 		break;
; 1510 : 	}
; 1511 : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
$LN8@ApplyWater:

; 1506 : 		break;
; 1507 : 	case 14:
; 1508 : 		lpObj->DamageReflect += IncValue;

  000b8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000bb	8a 45 14	 mov	 al, BYTE PTR _IncValue$[ebp]
  000be	00 81 49 01 00
	00		 add	 BYTE PTR [ecx+329], al
$LN10@ApplyWater:
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
$LN2@ApplyWater:

; 1509 : 		break;
; 1510 : 	}
; 1511 : }

  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 10 00	 ret	 16			; 00000010H
$LN13@ApplyWater:
  000cc	00 00 00 00	 DD	 $LN4@ApplyWater
  000d0	00 00 00 00	 DD	 $LN5@ApplyWater
  000d4	00 00 00 00	 DD	 $LN6@ApplyWater
  000d8	00 00 00 00	 DD	 $LN7@ApplyWater
  000dc	00 00 00 00	 DD	 $LN8@ApplyWater
?ApplyWaterOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyWaterOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyFireOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_lpObj$ = 8						; size = 4
_btOption$ = 12						; size = 1
_IncType$ = 16						; size = 1
_IncValue$ = 20						; size = 2
?ApplyFireOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z PROC ; CSocketItems::ApplyFireOption, COMDAT
; _this$ = ecx

; 1403 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx

; 1404 : 	int _IncValue = 0;
; 1405 : 
; 1406 : 	switch( btOption )

  00006	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _btOption$[ebp]
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	83 f9 05	 cmp	 ecx, 5
  00010	0f 87 d5 01 00
	00		 ja	 $LN10@ApplyFireO
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@ApplyFireO[ecx*4]
$LN4@ApplyFireO:

; 1407 : 	{
; 1408 : 	case 0:
; 1409 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMaxLeft,IncValue,IncType);

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00023	8b 5d 10	 mov	 ebx, DWORD PTR _IncType$[ebp]
  00026	8b 7d 14	 mov	 edi, DWORD PTR _IncValue$[ebp]
  00029	53		 push	 ebx
  0002a	8b b1 58 06 00
	00		 mov	 esi, DWORD PTR [ecx+1624]
  00030	8b c8		 mov	 ecx, eax
  00032	57		 push	 edi
  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1410 : 		lpObj->m_AttackDamageMaxLeft += _IncValue;

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0003c	03 c6		 add	 eax, esi

; 1411 : 
; 1412 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMinLeft,IncValue,IncType);

  0003e	53		 push	 ebx
  0003f	57		 push	 edi
  00040	8b b1 5c 06 00
	00		 mov	 esi, DWORD PTR [ecx+1628]
  00046	89 81 58 06 00
	00		 mov	 DWORD PTR [ecx+1624], eax
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1413 : 		lpObj->m_AttackDamageMinLeft += _IncValue;

  00055	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00058	03 c6		 add	 eax, esi

; 1414 : 
; 1415 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMaxRight,IncValue,IncType);

  0005a	53		 push	 ebx
  0005b	57		 push	 edi
  0005c	8b b1 60 06 00
	00		 mov	 esi, DWORD PTR [ecx+1632]
  00062	89 81 5c 06 00
	00		 mov	 DWORD PTR [ecx+1628], eax
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1416 : 		lpObj->m_AttackDamageMaxRight += _IncValue;

  00071	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00074	03 c6		 add	 eax, esi

; 1417 : 
; 1418 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMinRight,IncValue,IncType);

  00076	53		 push	 ebx
  00077	57		 push	 edi
  00078	8b b1 64 06 00
	00		 mov	 esi, DWORD PTR [ecx+1636]
  0007e	89 81 60 06 00
	00		 mov	 DWORD PTR [ecx+1632], eax
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1419 : 		lpObj->m_AttackDamageMinRight += _IncValue;

  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00090	03 c6		 add	 eax, esi

; 1420 : 
; 1421 : 		_IncValue = GetResultValue(lpObj->m_MagicDamageMin,IncValue,IncType);

  00092	53		 push	 ebx
  00093	57		 push	 edi
  00094	8b b1 48 06 00
	00		 mov	 esi, DWORD PTR [ecx+1608]
  0009a	89 81 64 06 00
	00		 mov	 DWORD PTR [ecx+1636], eax
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a3	56		 push	 esi
  000a4	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1422 : 		lpObj->m_MagicDamageMin += _IncValue;

  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000ac	03 c6		 add	 eax, esi
  000ae	89 81 48 06 00
	00		 mov	 DWORD PTR [ecx+1608], eax
$LN15@ApplyFireO:

; 1423 : 
; 1424 : 		_IncValue = GetResultValue(lpObj->m_MagicDamageMax,IncValue,IncType);

  000b4	8b b1 4c 06 00
	00		 mov	 esi, DWORD PTR [ecx+1612]
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000bd	53		 push	 ebx
  000be	57		 push	 edi
  000bf	56		 push	 esi
  000c0	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1425 : 		lpObj->m_MagicDamageMax += _IncValue;

  000c5	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000c8	03 c6		 add	 eax, esi
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	89 81 4c 06 00
	00		 mov	 DWORD PTR [ecx+1612], eax

; 1479 : 
; 1480 : 		break;
; 1481 : 	}
; 1482 : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 10 00	 ret	 16			; 00000010H
$LN5@ApplyFireO:

; 1426 : 		break;
; 1427 : 	case 1:
; 1428 : 		_IncValue = GetResultValue(lpObj->m_AttackSpeed,IncValue,IncType);

  000d9	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000dc	8b 5d 10	 mov	 ebx, DWORD PTR _IncType$[ebp]
  000df	8b 7d 14	 mov	 edi, DWORD PTR _IncValue$[ebp]
  000e2	53		 push	 ebx
  000e3	8b b1 6c 06 00
	00		 mov	 esi, DWORD PTR [ecx+1644]
  000e9	8b c8		 mov	 ecx, eax
  000eb	57		 push	 edi
  000ec	56		 push	 esi
  000ed	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1429 : 		lpObj->m_AttackSpeed += _IncValue;

  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  000f5	03 c6		 add	 eax, esi

; 1430 : 
; 1431 : 		_IncValue = GetResultValue(lpObj->m_MagicSpeed,IncValue,IncType);

  000f7	53		 push	 ebx
  000f8	57		 push	 edi
  000f9	8b b1 70 06 00
	00		 mov	 esi, DWORD PTR [ecx+1648]
  000ff	89 81 6c 06 00
	00		 mov	 DWORD PTR [ecx+1644], eax
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00108	56		 push	 esi
  00109	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1432 : 		lpObj->m_MagicSpeed += _IncValue;

  0010e	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00111	03 c6		 add	 eax, esi
  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	5b		 pop	 ebx
  00116	89 81 70 06 00
	00		 mov	 DWORD PTR [ecx+1648], eax

; 1479 : 
; 1480 : 		break;
; 1481 : 	}
; 1482 : }

  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 10 00	 ret	 16			; 00000010H
$LN6@ApplyFireO:

; 1433 : 		break;
; 1434 : 	case 2:
; 1435 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMaxLeft,IncValue,IncType);

  00122	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00125	8b 5d 10	 mov	 ebx, DWORD PTR _IncType$[ebp]
  00128	8b 7d 14	 mov	 edi, DWORD PTR _IncValue$[ebp]
  0012b	53		 push	 ebx
  0012c	8b b1 58 06 00
	00		 mov	 esi, DWORD PTR [ecx+1624]
  00132	8b c8		 mov	 ecx, eax
  00134	57		 push	 edi
  00135	56		 push	 esi
  00136	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1436 : 		lpObj->m_AttackDamageMaxLeft += _IncValue;

  0013b	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0013e	03 c6		 add	 eax, esi

; 1437 : 
; 1438 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMaxRight,IncValue,IncType);

  00140	53		 push	 ebx
  00141	57		 push	 edi
  00142	8b b1 60 06 00
	00		 mov	 esi, DWORD PTR [ecx+1632]
  00148	89 81 58 06 00
	00		 mov	 DWORD PTR [ecx+1624], eax
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00151	56		 push	 esi
  00152	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1439 : 		lpObj->m_AttackDamageMaxRight += _IncValue;

  00157	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0015a	03 c6		 add	 eax, esi
  0015c	89 81 60 06 00
	00		 mov	 DWORD PTR [ecx+1632], eax

; 1440 : 
; 1441 : 		_IncValue = GetResultValue(lpObj->m_MagicDamageMax,IncValue,IncType);
; 1442 : 		lpObj->m_MagicDamageMax += _IncValue;
; 1443 : 		break;

  00162	e9 4d ff ff ff	 jmp	 $LN15@ApplyFireO
$LN7@ApplyFireO:

; 1444 : 	case 3:
; 1445 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMinLeft,IncValue,IncType);

  00167	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0016a	8b 5d 10	 mov	 ebx, DWORD PTR _IncType$[ebp]
  0016d	8b 7d 14	 mov	 edi, DWORD PTR _IncValue$[ebp]
  00170	53		 push	 ebx
  00171	8b b1 5c 06 00
	00		 mov	 esi, DWORD PTR [ecx+1628]
  00177	8b c8		 mov	 ecx, eax
  00179	57		 push	 edi
  0017a	56		 push	 esi
  0017b	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1446 : 		lpObj->m_AttackDamageMinLeft += _IncValue;

  00180	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00183	03 c6		 add	 eax, esi

; 1447 : 
; 1448 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMinRight,IncValue,IncType);

  00185	53		 push	 ebx
  00186	57		 push	 edi
  00187	8b b1 64 06 00
	00		 mov	 esi, DWORD PTR [ecx+1636]
  0018d	89 81 5c 06 00
	00		 mov	 DWORD PTR [ecx+1628], eax
  00193	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00196	56		 push	 esi
  00197	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1449 : 		lpObj->m_AttackDamageMinRight += _IncValue;

  0019c	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  0019f	03 c6		 add	 eax, esi

; 1450 : 
; 1451 : 		_IncValue = GetResultValue(lpObj->m_MagicDamageMin,IncValue,IncType);

  001a1	53		 push	 ebx
  001a2	57		 push	 edi
  001a3	8b b1 48 06 00
	00		 mov	 esi, DWORD PTR [ecx+1608]
  001a9	89 81 64 06 00
	00		 mov	 DWORD PTR [ecx+1636], eax
  001af	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001b2	56		 push	 esi
  001b3	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1452 : 		lpObj->m_MagicDamageMin += _IncValue;

  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  001bb	03 c6		 add	 eax, esi
  001bd	5f		 pop	 edi
  001be	5e		 pop	 esi
  001bf	5b		 pop	 ebx
  001c0	89 81 48 06 00
	00		 mov	 DWORD PTR [ecx+1608], eax

; 1479 : 
; 1480 : 		break;
; 1481 : 	}
; 1482 : }

  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c2 10 00	 ret	 16			; 00000010H
$LN9@ApplyFireO:

; 1453 : 		break;
; 1454 : 	case 4:
; 1455 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMaxLeft,IncValue,IncType);
; 1456 : 		lpObj->m_AttackDamageMaxLeft += _IncValue;
; 1457 : 
; 1458 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMinLeft,IncValue,IncType);
; 1459 : 		lpObj->m_AttackDamageMinLeft += _IncValue;
; 1460 : 
; 1461 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMaxRight,IncValue,IncType);
; 1462 : 		lpObj->m_AttackDamageMaxRight += _IncValue;
; 1463 : 
; 1464 : 		_IncValue = GetResultValue(lpObj->m_AttackDamageMinRight,IncValue,IncType);
; 1465 : 		lpObj->m_AttackDamageMinRight += _IncValue;
; 1466 : 
; 1467 : 		_IncValue = GetResultValue(lpObj->m_MagicDamageMin,IncValue,IncType);
; 1468 : 		lpObj->m_MagicDamageMin += _IncValue;
; 1469 : 
; 1470 : 		_IncValue = GetResultValue(lpObj->m_MagicDamageMax,IncValue,IncType);
; 1471 : 		lpObj->m_MagicDamageMax += _IncValue;
; 1472 : 		break;
; 1473 : 	case 5:
; 1474 : 
; 1475 : 		lpObj->m_btSocketBPUseDec += IncValue;

  001cc	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  001cf	8a 45 14	 mov	 al, BYTE PTR _IncValue$[ebp]
  001d2	00 81 96 25 00
	00		 add	 BYTE PTR [ecx+9622], al

; 1476 : 
; 1477 : 		if( lpObj->m_btSocketBPUseDec > 100 )

  001d8	80 b9 96 25 00
	00 64		 cmp	 BYTE PTR [ecx+9622], 100 ; 00000064H
  001df	76 07		 jbe	 SHORT $LN12@ApplyFireO

; 1478 : 			lpObj->m_btSocketBPUseDec = 100;

  001e1	c6 81 96 25 00
	00 64		 mov	 BYTE PTR [ecx+9622], 100 ; 00000064H
$LN12@ApplyFireO:
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
$LN10@ApplyFireO:

; 1479 : 
; 1480 : 		break;
; 1481 : 	}
; 1482 : }

  001eb	8b e5		 mov	 esp, ebp
  001ed	5d		 pop	 ebp
  001ee	c2 10 00	 ret	 16			; 00000010H
  001f1	0f 1f 00	 npad	 3
$LN17@ApplyFireO:
  001f4	00 00 00 00	 DD	 $LN4@ApplyFireO
  001f8	00 00 00 00	 DD	 $LN5@ApplyFireO
  001fc	00 00 00 00	 DD	 $LN6@ApplyFireO
  00200	00 00 00 00	 DD	 $LN7@ApplyFireO
  00204	00 00 00 00	 DD	 $LN4@ApplyFireO
  00208	00 00 00 00	 DD	 $LN9@ApplyFireO
?ApplyFireOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ENDP ; CSocketItems::ApplyFireOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetSocketOption@CSocketItems@@QAEXPAVCItem@@@Z
_TEXT	SEGMENT
_tmpSphere$ = -28					; size = 16
_btOption$ = -12					; size = 1
tv246 = -8						; size = 4
_this$1$ = -4						; size = 4
tv252 = 8						; size = 4
_lpItem$ = 8						; size = 4
?SetSocketOption@CSocketItems@@QAEXPAVCItem@@@Z PROC	; CSocketItems::SetSocketOption, COMDAT
; _this$ = ecx

; 1679 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi

; 1680 : 	if( lpItem == NULL )

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  00010	85 f6		 test	 esi, esi
  00012	0f 84 c4 00 00
	00		 je	 $LN3@SetSocketO

; 1681 : 		return;
; 1682 : 
; 1683 : 	if( lpItem->IsItem() == FALSE || IsSocketItem(lpItem) == FALSE )

  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001f	85 c0		 test	 eax, eax
  00021	0f 84 b5 00 00
	00		 je	 $LN3@SetSocketO
  00027	56		 push	 esi
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  0002f	84 c0		 test	 al, al
  00031	0f 84 a5 00 00
	00		 je	 $LN3@SetSocketO

; 1684 : 		return;
; 1685 : 
; 1686 : 	BYTE btOption = 0;
; 1687 : 	BYTE btLevel = 0;
; 1688 : 	BYTE btSocketOpt = 0;
; 1689 : 
; 1690 : 	_SOCKET_SPHERE_OPTION tmpSphere;

  00037	53		 push	 ebx
  00038	8d 4d e4	 lea	 ecx, DWORD PTR _tmpSphere$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION
  00040	b9 05 00 00 00	 mov	 ecx, 5
  00045	8d 86 c8 00 00
	00		 lea	 eax, DWORD PTR [esi+200]
  0004b	89 45 f8	 mov	 DWORD PTR tv246[ebp], eax
  0004e	89 4d 08	 mov	 DWORD PTR tv252[ebp], ecx
  00051	8d 59 2d	 lea	 ebx, DWORD PTR [ecx+45]
$LL4@SetSocketO:

; 1695 : 	{
; 1696 : 		if( lpItem->m_SocketOption[i] == 0xFF || lpItem->m_SocketOption[i] == 0xFE )

  00054	8a 00		 mov	 al, BYTE PTR [eax]
  00056	3c ff		 cmp	 al, 255			; 000000ffH
  00058	74 6e		 je	 SHORT $LN2@SetSocketO
  0005a	3c fe		 cmp	 al, 254			; 000000feH
  0005c	74 6a		 je	 SHORT $LN2@SetSocketO

; 1697 : 			continue;
; 1698 : 
; 1699 : 		btSocketOpt = lpItem->m_SocketOption[i];
; 1700 : 
; 1701 : 		btOption = btSocketOpt % 50;

  0005e	0f b6 c8	 movzx	 ecx, al
  00061	8b c1		 mov	 eax, ecx
  00063	99		 cdq
  00064	f7 fb		 idiv	 ebx
  00066	8a da		 mov	 bl, dl

; 1702 : 		btLevel = ((btSocketOpt - btOption)/50)+1;

  00068	0f b6 c3	 movzx	 eax, bl
  0006b	2b c8		 sub	 ecx, eax
  0006d	88 5d f4	 mov	 BYTE PTR _btOption$[ebp], bl
  00070	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00075	f7 e9		 imul	 ecx

; 1703 : 
; 1704 : 		if( IsOptionSet(&tmpSphere,btOption,btLevel) == FALSE )

  00077	8b cf		 mov	 ecx, edi
  00079	c1 fa 04	 sar	 edx, 4
  0007c	8b c2		 mov	 eax, edx
  0007e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00081	03 c2		 add	 eax, edx
  00083	fe c0		 inc	 al
  00085	0f b6 c0	 movzx	 eax, al
  00088	50		 push	 eax
  00089	ff 75 f4	 push	 DWORD PTR _btOption$[ebp]
  0008c	8d 45 e4	 lea	 eax, DWORD PTR _tmpSphere$[ebp]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z ; CSocketItems::IsOptionSet
  00095	84 c0		 test	 al, al
  00097	74 27		 je	 SHORT $LN22@SetSocketO

; 1705 : 			continue;
; 1706 : 
; 1707 : 		if( btOption == 38 )

  00099	80 fb 26	 cmp	 bl, 38			; 00000026H
  0009c	75 46		 jne	 SHORT $LN11@SetSocketO

; 1708 : 		{
; 1709 : 			_IncValue = GetResultValue(lpItem->m_HJOpStrength,tmpSphere.wSphereValue,tmpSphere.btIncType);

  0009e	ff 75 ed	 push	 DWORD PTR _tmpSphere$[ebp+9]
  000a1	0f b7 be c2 00
	00 00		 movzx	 edi, WORD PTR [esi+194]
  000a8	ff 75 ee	 push	 DWORD PTR _tmpSphere$[ebp+10]
  000ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000ae	57		 push	 edi
  000af	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1710 : 			lpItem->m_HJOpStrength += _IncValue;

  000b4	03 c7		 add	 eax, edi
  000b6	66 89 86 c2 00
	00 00		 mov	 WORD PTR [esi+194], ax
$LN23@SetSocketO:

; 1715 : 			lpItem->m_HJOpDexterity += _IncValue;

  000bd	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN22@SetSocketO:
  000c0	8b 4d 08	 mov	 ecx, DWORD PTR tv252[ebp]
  000c3	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
$LN2@SetSocketO:

; 1691 : 
; 1692 : 	int _IncValue = 0;
; 1693 : 
; 1694 : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)

  000c8	8b 45 f8	 mov	 eax, DWORD PTR tv246[ebp]
  000cb	40		 inc	 eax
  000cc	83 e9 01	 sub	 ecx, 1
  000cf	89 45 f8	 mov	 DWORD PTR tv246[ebp], eax
  000d2	89 4d 08	 mov	 DWORD PTR tv252[ebp], ecx
  000d5	0f 85 79 ff ff
	ff		 jne	 $LL4@SetSocketO
  000db	5b		 pop	 ebx
$LN3@SetSocketO:
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi

; 1720 : 		}
; 1721 : 	}
; 1722 : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 04 00	 ret	 4
$LN11@SetSocketO:

; 1711 : 		}
; 1712 : 		else if(btOption == 39 )

  000e4	80 fb 27	 cmp	 bl, 39			; 00000027H
  000e7	75 21		 jne	 SHORT $LN13@SetSocketO

; 1713 : 		{
; 1714 : 			_IncValue = GetResultValue(lpItem->m_HJOpDexterity,tmpSphere.wSphereValue,tmpSphere.btIncType);

  000e9	ff 75 ed	 push	 DWORD PTR _tmpSphere$[ebp+9]
  000ec	0f b7 be c4 00
	00 00		 movzx	 edi, WORD PTR [esi+196]
  000f3	ff 75 ee	 push	 DWORD PTR _tmpSphere$[ebp+10]
  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000f9	57		 push	 edi
  000fa	e8 00 00 00 00	 call	 ?GetResultValue@CSocketItems@@QAEHHGE@Z ; CSocketItems::GetResultValue

; 1715 : 			lpItem->m_HJOpDexterity += _IncValue;

  000ff	03 c7		 add	 eax, edi
  00101	66 89 86 c4 00
	00 00		 mov	 WORD PTR [esi+196], ax
  00108	eb b3		 jmp	 SHORT $LN23@SetSocketO
$LN13@SetSocketO:
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR tv252[ebp]

; 1716 : 		}
; 1717 : 		else if(btOption == 20 )

  0010d	80 fb 14	 cmp	 bl, 20			; 00000014H
  00110	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
  00115	75 b1		 jne	 SHORT $LN2@SetSocketO

; 1718 : 		{
; 1719 : 			lpItem->m_BonusDurability += tmpSphere.wSphereValue;

  00117	8a 45 ee	 mov	 al, BYTE PTR _tmpSphere$[ebp+10]
  0011a	00 86 cd 00 00
	00		 add	 BYTE PTR [esi+205], al
  00120	eb a6		 jmp	 SHORT $LN2@SetSocketO
?SetSocketOption@CSocketItems@@QAEXPAVCItem@@@Z ENDP	; CSocketItems::SetSocketOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_Type$ = 12						; size = 4
_btOption$ = 16						; size = 1
_IncType$ = 20						; size = 1
_IncValue$ = 24						; size = 2
?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z PROC ; CSocketItems::SetSocketOption, COMDAT
; _this$ = ecx

; 1348 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1349 : 	if( btOption >= 0 && btOption <= 9 )

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _btOption$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 18	 mov	 edi, DWORD PTR _IncValue$[ebp]
  0000f	80 fb 09	 cmp	 bl, 9
  00012	77 10		 ja	 SHORT $LN5@SetSocketO

; 1350 : 	{
; 1351 : 		ApplyFireOption(lpObj,btOption,IncType,IncValue);

  00014	57		 push	 edi
  00015	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	e8 00 00 00 00	 call	 ?ApplyFireOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyFireOption
  0001f	e9 80 00 00 00	 jmp	 $LN19@SetSocketO
$LN5@SetSocketO:

; 1352 : 	}
; 1353 : 	else if(btOption >= 10 && btOption <= 15)

  00024	8d 43 f6	 lea	 eax, DWORD PTR [ebx-10]
  00027	3c 05		 cmp	 al, 5
  00029	77 0d		 ja	 SHORT $LN7@SetSocketO

; 1354 : 	{
; 1355 : 		ApplyWaterOption(lpObj,btOption,IncType,IncValue);

  0002b	57		 push	 edi
  0002c	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  0002f	53		 push	 ebx
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ?ApplyWaterOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyWaterOption
  00036	eb 6c		 jmp	 SHORT $LN19@SetSocketO
$LN7@SetSocketO:

; 1356 : 	}
; 1357 : 	else if(btOption >= 16 && btOption <= 20)

  00038	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0003b	3c 04		 cmp	 al, 4
  0003d	77 0d		 ja	 SHORT $LN9@SetSocketO

; 1358 : 	{
; 1359 : 		ApplyIceOption(lpObj,btOption,IncType,IncValue);

  0003f	57		 push	 edi
  00040	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  00043	53		 push	 ebx
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ?ApplyIceOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyIceOption
  0004a	eb 58		 jmp	 SHORT $LN19@SetSocketO
$LN9@SetSocketO:

; 1360 : 	}
; 1361 : 	else if(btOption >= 21 && btOption <= 28)

  0004c	8d 43 eb	 lea	 eax, DWORD PTR [ebx-21]
  0004f	3c 07		 cmp	 al, 7
  00051	77 0d		 ja	 SHORT $LN11@SetSocketO

; 1362 : 	{
; 1363 : 		ApplyWindOption(lpObj,btOption,IncType,IncValue);

  00053	57		 push	 edi
  00054	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  00057	53		 push	 ebx
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ?ApplyWindOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyWindOption
  0005e	eb 44		 jmp	 SHORT $LN19@SetSocketO
$LN11@SetSocketO:

; 1364 : 	}
; 1365 : 	else if(btOption >= 29 && btOption <= 33)

  00060	8d 43 e3	 lea	 eax, DWORD PTR [ebx-29]
  00063	3c 04		 cmp	 al, 4
  00065	77 0d		 ja	 SHORT $LN13@SetSocketO

; 1366 : 	{
; 1367 : 		ApplyLightningOption(lpObj,btOption,IncType,IncValue);

  00067	57		 push	 edi
  00068	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  0006b	53		 push	 ebx
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ?ApplyLightningOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyLightningOption
  00072	eb 30		 jmp	 SHORT $LN19@SetSocketO
$LN13@SetSocketO:

; 1368 : 	}
; 1369 : 	else if(btOption >= 34 && btOption <= 40)

  00074	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  00077	3c 06		 cmp	 al, 6
  00079	77 0d		 ja	 SHORT $LN15@SetSocketO

; 1370 : 	{
; 1371 : 		ApplyEarthOption(lpObj,btOption,IncType,IncValue);

  0007b	57		 push	 edi
  0007c	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  0007f	53		 push	 ebx
  00080	56		 push	 esi
  00081	e8 00 00 00 00	 call	 ?ApplyEarthOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplyEarthOption
  00086	eb 1c		 jmp	 SHORT $LN19@SetSocketO
$LN15@SetSocketO:

; 1372 : 	}
; 1373 : 	else if(btOption >= 41 && btOption <= 43)

  00088	80 fb 29	 cmp	 bl, 41			; 00000029H
  0008b	72 05		 jb	 SHORT $LN17@SetSocketO
  0008d	80 fb 2b	 cmp	 bl, 43			; 0000002bH
  00090	76 12		 jbe	 SHORT $LN19@SetSocketO
$LN17@SetSocketO:

; 1374 : 	{
; 1375 : 		ApplyUnk1Option(lpObj,btOption,IncType,IncValue);
; 1376 : 	}
; 1377 : 	else if(btOption >= 44 && btOption <= 45)

  00092	8d 43 d4	 lea	 eax, DWORD PTR [ebx-44]
  00095	3c 01		 cmp	 al, 1
  00097	77 0b		 ja	 SHORT $LN19@SetSocketO

; 1378 : 	{
; 1379 : 		ApplySetOption(lpObj,btOption,IncType,IncValue);

  00099	57		 push	 edi
  0009a	ff 75 14	 push	 DWORD PTR _IncType$[ebp]
  0009d	53		 push	 ebx
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 ?ApplySetOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@EEG@Z ; CSocketItems::ApplySetOption
$LN19@SetSocketO:

; 1380 : 	}
; 1381 : 
; 1382 : 	for(int i = 0; i < 43; i++)

  000a4	33 c9		 xor	 ecx, ecx
  000a6	8d 86 86 24 00
	00		 lea	 eax, DWORD PTR [esi+9350]
  000ac	0f 1f 40 00	 npad	 4
$LL4@SetSocketO:

; 1383 : 	{
; 1384 : 		if( lpObj->m_SocketOptions[i].btOption == btOption &&

  000b0	8a 10		 mov	 dl, BYTE PTR [eax]
  000b2	3a d3		 cmp	 dl, bl
  000b4	75 0b		 jne	 SHORT $LN20@SetSocketO
  000b6	8b 5d 14	 mov	 ebx, DWORD PTR _IncType$[ebp]
  000b9	38 58 01	 cmp	 BYTE PTR [eax+1], bl
  000bc	8b 5d 10	 mov	 ebx, DWORD PTR _btOption$[ebp]
  000bf	74 15		 je	 SHORT $LN25@SetSocketO
$LN20@SetSocketO:

; 1389 : 			break;
; 1390 : 		}
; 1391 : 		else if(lpObj->m_SocketOptions[i].btOption == 0xFF)

  000c1	80 fa ff	 cmp	 dl, 255			; 000000ffH
  000c4	74 2c		 je	 SHORT $LN26@SetSocketO

; 1380 : 	}
; 1381 : 
; 1382 : 	for(int i = 0; i < 43; i++)

  000c6	41		 inc	 ecx
  000c7	83 c0 06	 add	 eax, 6
  000ca	83 f9 2b	 cmp	 ecx, 43			; 0000002bH
  000cd	7c e1		 jl	 SHORT $LL4@SetSocketO
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx

; 1397 : 			break;
; 1398 : 		}
; 1399 : 	}
; 1400 : }

  000d2	5d		 pop	 ebp
  000d3	c2 14 00	 ret	 20			; 00000014H
$LN25@SetSocketO:

; 1385 : 			lpObj->m_SocketOptions[i].IncType == IncType)
; 1386 : 		{
; 1387 : 			lpObj->m_SocketOptions[i].IncValue += IncValue;

  000d6	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000d9	66 01 bc 46 88
	24 00 00	 add	 WORD PTR [esi+eax*2+9352], di

; 1388 : 			lpObj->m_SocketOptions[i].Count++;

  000e1	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000e4	fe 84 46 8a 24
	00 00		 inc	 BYTE PTR [esi+eax*2+9354]
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx

; 1397 : 			break;
; 1398 : 		}
; 1399 : 	}
; 1400 : }

  000ee	5d		 pop	 ebp
  000ef	c2 14 00	 ret	 20			; 00000014H
$LN26@SetSocketO:

; 1392 : 		{
; 1393 : 			lpObj->m_SocketOptions[i].btOption = btOption;
; 1394 : 			lpObj->m_SocketOptions[i].IncType = IncType;

  000f2	8b 55 14	 mov	 edx, DWORD PTR _IncType$[ebp]
  000f5	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000f8	88 9c 46 86 24
	00 00		 mov	 BYTE PTR [esi+eax*2+9350], bl

; 1395 : 			lpObj->m_SocketOptions[i].IncValue = IncValue;

  000ff	66 89 bc 46 88
	24 00 00	 mov	 WORD PTR [esi+eax*2+9352], di
  00107	88 94 46 87 24
	00 00		 mov	 BYTE PTR [esi+eax*2+9351], dl

; 1396 : 			lpObj->m_SocketOptions[i].Count = 1;

  0010e	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00111	5f		 pop	 edi
  00112	c6 84 46 8a 24
	00 00 01	 mov	 BYTE PTR [esi+eax*2+9354], 1
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx

; 1397 : 			break;
; 1398 : 		}
; 1399 : 	}
; 1400 : }

  0011c	5d		 pop	 ebp
  0011d	c2 14 00	 ret	 20			; 00000014H
?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ENDP ; CSocketItems::SetSocketOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?InitUserSocketOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?InitUserSocketOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketItems::InitUserSocketOptions, COMDAT
; _this$ = ecx

; 1747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1748 : 	int i = 0;
; 1749 : 	if( lpObj == NULL )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	0f 84 c6 00 00
	00		 je	 $LN37@InitUserSo

; 1750 : 		return;
; 1751 : 
; 1752 : 	if( lpObj->Type != OBJ_USER )

  0000e	80 79 50 01	 cmp	 BYTE PTR [ecx+80], 1
  00012	0f 85 bc 00 00
	00		 jne	 $LN37@InitUserSo

; 1755 : 	for(i = 0; i < 35; i++)

  00018	8d 81 87 24 00
	00		 lea	 eax, DWORD PTR [ecx+9351]
  0001e	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  00023	56		 push	 esi
  00024	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@InitUserSo:
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  00030	c7 40 ff ff 00
	00 00		 mov	 DWORD PTR [eax-1], 255	; 000000ffH
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1755 : 	for(i = 0; i < 35; i++)

  00037	8d 40 06	 lea	 eax, DWORD PTR [eax+6]
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 134  : 		Count = 0;

  0003a	c6 40 fd 00	 mov	 BYTE PTR [eax-3], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1755 : 	for(i = 0; i < 35; i++)

  0003e	83 ea 01	 sub	 edx, 1
  00041	75 ed		 jne	 SHORT $LL4@InitUserSo
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  00043	c7 81 58 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9560], 255 ; 000000ffH
  0004d	c7 81 5e 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9566], 255 ; 000000ffH

; 134  : 		Count = 0;

  00057	88 91 5c 25 00
	00		 mov	 BYTE PTR [ecx+9564], dl
  0005d	88 91 62 25 00
	00		 mov	 BYTE PTR [ecx+9570], dl
  00063	c7 81 64 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9572], 255 ; 000000ffH
  0006d	88 91 68 25 00
	00		 mov	 BYTE PTR [ecx+9576], dl
  00073	c7 81 6a 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9578], 255 ; 000000ffH
  0007d	88 91 6e 25 00
	00		 mov	 BYTE PTR [ecx+9582], dl
  00083	c7 81 70 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9584], 255 ; 000000ffH
  0008d	88 91 74 25 00
	00		 mov	 BYTE PTR [ecx+9588], dl
  00093	c7 81 76 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9590], 255 ; 000000ffH
  0009d	88 91 7a 25 00
	00		 mov	 BYTE PTR [ecx+9594], dl
  000a3	c7 81 7c 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9596], 255 ; 000000ffH
  000ad	88 91 80 25 00
	00		 mov	 BYTE PTR [ecx+9600], dl

; 131  : 		btOption = -1;

  000b3	c7 81 82 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9602], 255 ; 000000ffH

; 134  : 		Count = 0;

  000bd	88 91 86 25 00
	00		 mov	 BYTE PTR [ecx+9606], dl
  000c3	c7 81 88 25 00
	00 ff 00 00 00	 mov	 DWORD PTR [ecx+9608], 255 ; 000000ffH
  000cd	88 91 8c 25 00
	00		 mov	 BYTE PTR [ecx+9612], dl
  000d3	5e		 pop	 esi
$LN37@InitUserSo:
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1769 : }

  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
?InitUserSocketOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketItems::InitUserSocketOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?InitUserOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?InitUserOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketItems::InitUserOptions, COMDAT
; _this$ = ecx

; 1307 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1308 : 	if( lpObj == NULL )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpObj$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 84 e1 00 00
	00		 je	 $LN13@InitUserOp

; 1309 : 		return;
; 1310 : 
; 1311 : 	if( lpObj->Type != OBJ_USER || lpObj->Connected < PLAYER_PLAYING )

  0000e	80 7a 50 01	 cmp	 BYTE PTR [edx+80], 1
  00012	0f 85 d7 00 00
	00		 jne	 $LN13@InitUserOp
  00018	83 7a 04 03	 cmp	 DWORD PTR [edx+4], 3
  0001c	0f 8c cd 00 00
	00		 jl	 $LN13@InitUserOp

; 1316 : 	for( i = 0; i < 35; i++)

  00022	33 c9		 xor	 ecx, ecx
  00024	8d 82 87 24 00
	00		 lea	 eax, DWORD PTR [edx+9351]
  0002a	56		 push	 esi
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@InitUserOp:

; 1318 : 		if( lpObj->m_SocketOption[i].btOption == (BYTE)-1 )

  00030	80 78 ff ff	 cmp	 BYTE PTR [eax-1], 255	; 000000ffH
  00034	74 5a		 je	 SHORT $LN37@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  00036	c7 40 ff ff 00
	00 00		 mov	 DWORD PTR [eax-1], 255	; 000000ffH

; 134  : 		Count = 0;

  0003d	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1318 : 		if( lpObj->m_SocketOption[i].btOption == (BYTE)-1 )

  00041	80 78 05 ff	 cmp	 BYTE PTR [eax+5], 255	; 000000ffH
  00045	74 49		 je	 SHORT $LN37@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  00047	c7 40 05 ff 00
	00 00		 mov	 DWORD PTR [eax+5], 255	; 000000ffH

; 134  : 		Count = 0;

  0004e	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1318 : 		if( lpObj->m_SocketOption[i].btOption == (BYTE)-1 )

  00052	80 78 0b ff	 cmp	 BYTE PTR [eax+11], 255	; 000000ffH
  00056	74 38		 je	 SHORT $LN37@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  00058	c7 40 0b ff 00
	00 00		 mov	 DWORD PTR [eax+11], 255	; 000000ffH

; 134  : 		Count = 0;

  0005f	c6 40 0f 00	 mov	 BYTE PTR [eax+15], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1318 : 		if( lpObj->m_SocketOption[i].btOption == (BYTE)-1 )

  00063	80 78 11 ff	 cmp	 BYTE PTR [eax+17], 255	; 000000ffH
  00067	74 27		 je	 SHORT $LN37@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  00069	c7 40 11 ff 00
	00 00		 mov	 DWORD PTR [eax+17], 255	; 000000ffH

; 134  : 		Count = 0;

  00070	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1318 : 		if( lpObj->m_SocketOption[i].btOption == (BYTE)-1 )

  00074	80 78 17 ff	 cmp	 BYTE PTR [eax+23], 255	; 000000ffH
  00078	74 16		 je	 SHORT $LN37@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  0007a	c7 40 17 ff 00
	00 00		 mov	 DWORD PTR [eax+23], 255	; 000000ffH

; 134  : 		Count = 0;

  00081	83 c1 05	 add	 ecx, 5
  00084	c6 40 1b 00	 mov	 BYTE PTR [eax+27], 0
  00088	83 c0 1e	 add	 eax, 30			; 0000001eH
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1316 : 	for( i = 0; i < 35; i++)

  0008b	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0008e	7c a0		 jl	 SHORT $LL4@InitUserOp
$LN37@InitUserOp:

; 1324 : 	for( i = 0; i < 7; i++)

  00090	33 c9		 xor	 ecx, ecx
  00092	8d 82 59 25 00
	00		 lea	 eax, DWORD PTR [edx+9561]
$LL7@InitUserOp:

; 1325 : 	{
; 1326 : 		if( lpObj->m_SocketBonus[i].btOption == (BYTE)-1 )

  00098	80 78 ff ff	 cmp	 BYTE PTR [eax-1], 255	; 000000ffH
  0009c	74 14		 je	 SHORT $LN28@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  0009e	c7 40 ff ff 00
	00 00		 mov	 DWORD PTR [eax-1], 255	; 000000ffH
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1324 : 	for( i = 0; i < 7; i++)

  000a5	41		 inc	 ecx
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 134  : 		Count = 0;

  000a6	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1324 : 	for( i = 0; i < 7; i++)

  000aa	83 c0 06	 add	 eax, 6
  000ad	83 f9 07	 cmp	 ecx, 7
  000b0	7c e6		 jl	 SHORT $LL7@InitUserOp
$LN28@InitUserOp:

; 1332 : 	for( i = 0; i < 2; i++)

  000b2	33 c9		 xor	 ecx, ecx
  000b4	8d 82 83 25 00
	00		 lea	 eax, DWORD PTR [edx+9603]
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL10@InitUserOp:

; 1333 : 	{
; 1334 : 		if( lpObj->m_SocketSet[i].btOption == (BYTE)-1 )

  000c0	80 78 ff ff	 cmp	 BYTE PTR [eax-1], 255	; 000000ffH
  000c4	74 14		 je	 SHORT $LN29@InitUserOp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 131  : 		btOption = -1;

  000c6	c7 40 ff ff 00
	00 00		 mov	 DWORD PTR [eax-1], 255	; 000000ffH
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1332 : 	for( i = 0; i < 2; i++)

  000cd	41		 inc	 ecx
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 134  : 		Count = 0;

  000ce	c6 40 03 00	 mov	 BYTE PTR [eax+3], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 1332 : 	for( i = 0; i < 2; i++)

  000d2	83 c0 06	 add	 eax, 6
  000d5	83 f9 02	 cmp	 ecx, 2
  000d8	7c e6		 jl	 SHORT $LL10@InitUserOp
$LN29@InitUserOp:

; 1335 : 			break;
; 1336 : 
; 1337 : 		lpObj->m_SocketSet[i].Clear();
; 1338 : 	}
; 1339 : 
; 1340 : 	lpObj->m_wSocketAddLife = 0;

  000da	33 c0		 xor	 eax, eax
  000dc	89 82 8e 25 00
	00		 mov	 DWORD PTR [edx+9614], eax

; 1341 : 	lpObj->m_wSocketAddMana = 0;
; 1342 : 	lpObj->m_wSocketMonsterDieLife = 0;

  000e2	89 82 92 25 00
	00		 mov	 DWORD PTR [edx+9618], eax

; 1343 : 	lpObj->m_wSocketMonsterDieMana = 0;
; 1344 : 	lpObj->m_btSocketBPUseDec = 0;

  000e8	88 82 96 25 00
	00		 mov	 BYTE PTR [edx+9622], al
  000ee	5e		 pop	 esi
$LN13@InitUserOp:

; 1345 : }

  000ef	5d		 pop	 ebp
  000f0	c2 04 00	 ret	 4
?InitUserOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketItems::InitUserOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetApplySocketItem@CSocketItems@@QAEEPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?SetApplySocketItem@CSocketItems@@QAEEPAUOBJECTSTRUCT@@@Z PROC ; CSocketItems::SetApplySocketItem, COMDAT
; _this$ = ecx

; 1287 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1288 : 	int OptionCount = 0;
; 1289 : 	if( lpObj == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 36		 je	 SHORT $LN4@SetApplySo

; 1290 : 		return false;
; 1291 : 
; 1292 : 	if( lpObj->Type != OBJ_USER || lpObj->Connected < PLAYER_PLAYING )

  0000e	80 7e 50 01	 cmp	 BYTE PTR [esi+80], 1
  00012	75 30		 jne	 SHORT $LN4@SetApplySo
  00014	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00018	7c 2a		 jl	 SHORT $LN4@SetApplySo

; 1294 : 
; 1295 : 	InitUserOptions(lpObj);

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?InitUserOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::InitUserOptions

; 1296 : 	OptionCount= ApplySocketOptions(lpObj);

  00020	56		 push	 esi
  00021	8b cf		 mov	 ecx, edi
  00023	e8 00 00 00 00	 call	 ?ApplySocketOptions@CSocketItems@@QAEHPAUOBJECTSTRUCT@@@Z ; CSocketItems::ApplySocketOptions

; 1297 : 
; 1298 : 	if( OptionCount <= 0 )

  00028	85 c0		 test	 eax, eax
  0002a	7e 18		 jle	 SHORT $LN4@SetApplySo

; 1299 : 		return false;
; 1300 : 
; 1301 : 	ApplyBonusOptions(lpObj);

  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?ApplyBonusOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::ApplyBonusOptions

; 1302 : 	ApplySetOptions(lpObj);

  00034	56		 push	 esi
  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?ApplySetOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ; CSocketItems::ApplySetOptions
  0003c	5f		 pop	 edi

; 1303 : return true;

  0003d	b0 01		 mov	 al, 1
  0003f	5e		 pop	 esi

; 1304 : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN4@SetApplySo:
  00044	5f		 pop	 edi

; 1293 : 		return false;

  00045	32 c0		 xor	 al, al
  00047	5e		 pop	 esi

; 1304 : }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?SetApplySocketItem@CSocketItems@@QAEEPAUOBJECTSTRUCT@@@Z ENDP ; CSocketItems::SetApplySocketItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplySetOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$GSCopy$1$ = -20					; size = 4
tv865 = -16						; size = 4
_this$GSCopy$1$ = -16					; size = 4
_OpCount$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
?ApplySetOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketItems::ApplySetOptions, COMDAT
; _this$ = ecx

; 1250 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi

; 1251 : 	BYTE OpCount[8];
; 1252 : 	BYTE btGroup = 0;
; 1253 : 	BYTE btCount = 0;

  00019	32 db		 xor	 bl, bl
  0001b	89 4d f0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0001e	89 45 ec	 mov	 DWORD PTR _lpObj$GSCopy$1$[ebp], eax
  00021	8d b0 8a 24 00
	00		 lea	 esi, DWORD PTR [eax+9354]

; 1254 : 
; 1255 : 	memset(&OpCount,0,sizeof(OpCount));

  00027	66 0f d6 45 f4	 movq	 QWORD PTR _OpCount$[ebp], xmm0

; 1256 : 
; 1257 : 	for(int i = 0; i < 35; i++)

  0002c	33 ff		 xor	 edi, edi
  0002e	66 90		 npad	 2
$LL4@ApplySetOp:

; 1258 : 	{
; 1259 : 		btGroup  = GetOptionGroup(lpObj->m_SocketOptions[i].btOption);

  00030	0f b6 46 fc	 movzx	 eax, BYTE PTR [esi-4]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetOptionGroup@CSocketItems@@QAEEE@Z ; CSocketItems::GetOptionGroup

; 1260 : 
; 1261 : 		if( btGroup == NULL )

  0003a	84 c0		 test	 al, al
  0003c	74 17		 je	 SHORT $LN18@ApplySetOp

; 1262 : 			break;
; 1263 : 
; 1264 : 		OpCount[-1+btGroup] += lpObj->m_SocketOptions[i].Count;

  0003e	0f b6 c0	 movzx	 eax, al
  00041	47		 inc	 edi
  00042	8d 4c 05 f3	 lea	 ecx, DWORD PTR _OpCount$[ebp+eax-1]
  00046	8a 06		 mov	 al, BYTE PTR [esi]
  00048	00 01		 add	 BYTE PTR [ecx], al
  0004a	83 c6 06	 add	 esi, 6
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00050	83 ff 23	 cmp	 edi, 35			; 00000023H
  00053	7c db		 jl	 SHORT $LL4@ApplySetOp
$LN18@ApplySetOp:

; 1265 : 	}
; 1266 : 
; 1267 : 	for(int n = 0; n < MAX_SET_OPTION; n++)

  00055	8b 7d f0	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00058	b9 02 00 00 00	 mov	 ecx, 2
  0005d	8a 7d f9	 mov	 bh, BYTE PTR _OpCount$[ebp+5]
  00060	89 4d f0	 mov	 DWORD PTR tv865[ebp], ecx
  00063	8d b7 a9 04 00
	00		 lea	 esi, DWORD PTR [edi+1193]
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@ApplySetOp:

; 1268 : 	{
; 1269 : 		for(int i = 0; i < MAX_SEED_TYPE; i++)
; 1270 : 		{
; 1271 : 			if( this->m_SetOption[n].SeedCount[i] <= OpCount[i] )

  00070	8a 55 f4	 mov	 dl, BYTE PTR _OpCount$[ebp]
  00073	38 56 ff	 cmp	 BYTE PTR [esi-1], dl
  00076	ba 01 00 00 00	 mov	 edx, 1
  0007b	0f b6 c3	 movzx	 eax, bl
  0007e	0f 46 c2	 cmovbe	 eax, edx
  00081	8a 55 f5	 mov	 dl, BYTE PTR _OpCount$[ebp+1]
  00084	38 16		 cmp	 BYTE PTR [esi], dl
  00086	77 02		 ja	 SHORT $LN29@ApplySetOp

; 1272 : 			{
; 1273 : 				btCount++;

  00088	04 01		 add	 al, 1
$LN29@ApplySetOp:

; 1268 : 	{
; 1269 : 		for(int i = 0; i < MAX_SEED_TYPE; i++)
; 1270 : 		{
; 1271 : 			if( this->m_SetOption[n].SeedCount[i] <= OpCount[i] )

  0008a	8a 55 f6	 mov	 dl, BYTE PTR _OpCount$[ebp+2]
  0008d	38 56 01	 cmp	 BYTE PTR [esi+1], dl
  00090	77 02		 ja	 SHORT $LN31@ApplySetOp

; 1272 : 			{
; 1273 : 				btCount++;

  00092	04 01		 add	 al, 1
$LN31@ApplySetOp:

; 1268 : 	{
; 1269 : 		for(int i = 0; i < MAX_SEED_TYPE; i++)
; 1270 : 		{
; 1271 : 			if( this->m_SetOption[n].SeedCount[i] <= OpCount[i] )

  00094	8a 55 f7	 mov	 dl, BYTE PTR _OpCount$[ebp+3]
  00097	38 56 02	 cmp	 BYTE PTR [esi+2], dl
  0009a	77 02		 ja	 SHORT $LN33@ApplySetOp

; 1272 : 			{
; 1273 : 				btCount++;

  0009c	04 01		 add	 al, 1
$LN33@ApplySetOp:

; 1268 : 	{
; 1269 : 		for(int i = 0; i < MAX_SEED_TYPE; i++)
; 1270 : 		{
; 1271 : 			if( this->m_SetOption[n].SeedCount[i] <= OpCount[i] )

  0009e	8a 55 f8	 mov	 dl, BYTE PTR _OpCount$[ebp+4]
  000a1	38 56 03	 cmp	 BYTE PTR [esi+3], dl
  000a4	77 02		 ja	 SHORT $LN35@ApplySetOp

; 1272 : 			{
; 1273 : 				btCount++;

  000a6	04 01		 add	 al, 1
$LN35@ApplySetOp:

; 1268 : 	{
; 1269 : 		for(int i = 0; i < MAX_SEED_TYPE; i++)
; 1270 : 		{
; 1271 : 			if( this->m_SetOption[n].SeedCount[i] <= OpCount[i] )

  000a8	38 7e 04	 cmp	 BYTE PTR [esi+4], bh
  000ab	77 02		 ja	 SHORT $LN37@ApplySetOp

; 1272 : 			{
; 1273 : 				btCount++;

  000ad	04 01		 add	 al, 1
$LN37@ApplySetOp:

; 1274 : 			}
; 1275 : 		}
; 1276 : 
; 1277 : 		if( btCount == 6 )

  000af	3c 06		 cmp	 al, 6
  000b1	75 1e		 jne	 SHORT $LN13@ApplySetOp

; 1278 : 		{
; 1279 : 			SetSocketOption(lpObj,3,this->m_SetOption[n].btEffect,this->m_SetOption[n].btIncType,this->m_SetOption[n].btIncValue);

  000b3	0f b6 46 f9	 movzx	 eax, BYTE PTR [esi-7]
  000b7	8b cf		 mov	 ecx, edi
  000b9	50		 push	 eax
  000ba	0f b6 46 f8	 movzx	 eax, BYTE PTR [esi-8]
  000be	50		 push	 eax
  000bf	0f b6 46 fa	 movzx	 eax, BYTE PTR [esi-6]
  000c3	50		 push	 eax
  000c4	6a 03		 push	 3
  000c6	ff 75 ec	 push	 DWORD PTR _lpObj$GSCopy$1$[ebp]
  000c9	e8 00 00 00 00	 call	 ?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketItems::SetSocketOption
  000ce	8b 4d f0	 mov	 ecx, DWORD PTR tv865[ebp]
$LN13@ApplySetOp:

; 1280 : 		}
; 1281 : 
; 1282 : 		btCount = 0;

  000d1	32 db		 xor	 bl, bl
  000d3	83 c6 10	 add	 esi, 16			; 00000010H
  000d6	83 e9 01	 sub	 ecx, 1
  000d9	89 4d f0	 mov	 DWORD PTR tv865[ebp], ecx
  000dc	75 92		 jne	 SHORT $LL7@ApplySetOp

; 1283 : 	}
; 1284 : }

  000de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	33 cd		 xor	 ecx, ebp
  000e5	5b		 pop	 ebx
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 04 00	 ret	 4
?ApplySetOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketItems::ApplySetOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplyBonusOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_btBonusOption$ = 8					; size = 1
_lpObj$ = 8						; size = 4
?ApplyBonusOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z PROC ; CSocketItems::ApplyBonusOptions, COMDAT
; _this$ = ecx

; 1223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b 5d 08	 mov	 ebx, DWORD PTR _lpObj$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx

; 1224 : 	BYTE btBonusOption = 0;
; 1225 : 	_SOCKET_BONUS_DATA* lpBonusOption = NULL;
; 1226 : 
; 1227 : 	for(int i = 0; i < INVETORY_WEAR_SIZE; i++)

  0000c	33 f6		 xor	 esi, esi
  0000e	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
$LL4@ApplyBonus:

; 1228 : 	{
; 1229 : 		if( IsSocketItem(&lpObj->pInventory[i]) == FALSE )

  00011	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  00017	8b cf		 mov	 ecx, edi
  00019	03 c6		 add	 eax, esi
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00021	84 c0		 test	 al, al
  00023	74 72		 je	 SHORT $LN2@ApplyBonus

; 1230 : 			continue;
; 1231 : 
; 1232 : 		btBonusOption = lpObj->pInventory[i].m_SocketBonus;

  00025	8b 83 c0 11 00
	00		 mov	 eax, DWORD PTR [ebx+4544]
  0002b	8a 84 30 c7 00
	00 00		 mov	 al, BYTE PTR [eax+esi+199]
  00032	88 45 08	 mov	 BYTE PTR _btBonusOption$[ebp], al

; 1233 : 
; 1234 : 		if( btBonusOption == 0xFF ||

  00035	3c ff		 cmp	 al, 255			; 000000ffH
  00037	74 5e		 je	 SHORT $LN2@ApplyBonus
  00039	3c fe		 cmp	 al, 254			; 000000feH
  0003b	74 5a		 je	 SHORT $LN2@ApplyBonus

; 1235 : 			btBonusOption == 0xFE )
; 1236 : 			continue;
; 1237 : 
; 1238 : 		lpBonusOption = GetBonusOption(btBonusOption);

  0003d	ff 75 08	 push	 DWORD PTR _btBonusOption$[ebp]
  00040	8b cf		 mov	 ecx, edi
  00042	e8 00 00 00 00	 call	 ?GetBonusOption@CSocketItems@@QAEPAU_SOCKET_BONUS_DATA@@E@Z ; CSocketItems::GetBonusOption
  00047	8b f8		 mov	 edi, eax

; 1239 : 
; 1240 : 		if( lpBonusOption == NULL )

  00049	85 ff		 test	 edi, edi
  0004b	74 47		 je	 SHORT $LN14@ApplyBonus

; 1241 : 			continue;
; 1242 : 
; 1243 : 		LogAddTD("[SocketItem] [%s][%s] Set Bonus Socket Option - OptionIndex : %d, EffectType : %d, OptionType : %d, OptionValue : %d",

  0004d	0f b6 4f 05	 movzx	 ecx, BYTE PTR [edi+5]
  00051	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00055	51		 push	 ecx
  00056	0f b6 4f 04	 movzx	 ecx, BYTE PTR [edi+4]
  0005a	51		 push	 ecx
  0005b	50		 push	 eax
  0005c	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  0005f	50		 push	 eax
  00060	8d 43 5d	 lea	 eax, DWORD PTR [ebx+93]
  00063	50		 push	 eax
  00064	8d 43 52	 lea	 eax, DWORD PTR [ebx+82]
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0HF@FBEKANIL@?$FLSocketItem?$FN?5?$FL?$CFs?$FN?$FL?$CFs?$FN?5Set?5Bonus?5@
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 1244 : 			lpObj->AccountID,lpObj->Name,lpBonusOption->btIndex,lpBonusOption->btEffectType,lpBonusOption->btOptionType,lpBonusOption->btOptionValue);
; 1245 : 		SetSocketOption(lpObj,2,lpBonusOption->btEffectType,lpBonusOption->btOptionType,lpBonusOption->btOptionValue);

  00073	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  00077	83 c4 1c	 add	 esp, 28			; 0000001cH
  0007a	50		 push	 eax
  0007b	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  0007f	50		 push	 eax
  00080	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  00084	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00087	8b cf		 mov	 ecx, edi
  00089	50		 push	 eax
  0008a	6a 02		 push	 2
  0008c	53		 push	 ebx
  0008d	e8 00 00 00 00	 call	 ?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketItems::SetSocketOption
  00092	eb 03		 jmp	 SHORT $LN2@ApplyBonus
$LN14@ApplyBonus:
  00094	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN2@ApplyBonus:

; 1224 : 	BYTE btBonusOption = 0;
; 1225 : 	_SOCKET_BONUS_DATA* lpBonusOption = NULL;
; 1226 : 
; 1227 : 	for(int i = 0; i < INVETORY_WEAR_SIZE; i++)

  00097	81 c6 d4 00 00
	00		 add	 esi, 212		; 000000d4H
  0009d	81 fe f0 09 00
	00		 cmp	 esi, 2544		; 000009f0H
  000a3	0f 8c 68 ff ff
	ff		 jl	 $LL4@ApplyBonus
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx

; 1246 : 	}
; 1247 : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
?ApplyBonusOptions@CSocketItems@@QAEXPAUOBJECTSTRUCT@@@Z ENDP ; CSocketItems::ApplyBonusOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?ApplySocketOptions@CSocketItems@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_tmpSphere$ = -28					; size = 16
tv194 = -12						; size = 4
_OptionCount$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
_btOption$ = 8						; size = 1
_lpObj$ = 8						; size = 4
?ApplySocketOptions@CSocketItems@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CSocketItems::ApplySocketOptions, COMDAT
; _this$ = ecx

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 1189 : 	int OptionCount = 0;

  0000a	33 c0		 xor	 eax, eax
  0000c	57		 push	 edi

; 1190 : 	BYTE btSocketOption = 0;
; 1191 : 	BYTE btOption = 0;
; 1192 : 	BYTE btLevel = 0;
; 1193 : 
; 1194 : 	_SOCKET_SPHERE_OPTION tmpSphere;

  0000d	8d 4d e4	 lea	 ecx, DWORD PTR _tmpSphere$[ebp]
  00010	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi
  00013	89 45 f8	 mov	 DWORD PTR _OptionCount$1$[ebp], eax
  00016	e8 00 00 00 00	 call	 ??0_SOCKET_SPHERE_OPTION@@QAE@XZ ; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _lpObj$[ebp]
  0001e	33 db		 xor	 ebx, ebx
  00020	c7 45 f4 32 00
	00 00		 mov	 DWORD PTR tv194[ebp], 50 ; 00000032H
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@ApplySocke:

; 1197 : 	{
; 1198 : 		if( IsSocketItem(&lpObj->pInventory[i]) == FALSE )

  00030	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00036	8b ce		 mov	 ecx, esi
  00038	03 c3		 add	 eax, ebx
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00040	84 c0		 test	 al, al
  00042	74 7e		 je	 SHORT $LN2@ApplySocke

; 1199 : 			continue;
; 1200 : 
; 1201 : 		for(int n = 0; n < MAX_SOCKET_COUNT; n++)

  00044	33 f6		 xor	 esi, esi
  00046	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@ApplySocke:

; 1202 : 		{
; 1203 : 			btSocketOption = lpObj->pInventory[i].m_SocketOption[n];

  00050	8b 87 c0 11 00
	00		 mov	 eax, DWORD PTR [edi+4544]
  00056	03 c3		 add	 eax, ebx
  00058	8a 84 30 c8 00
	00 00		 mov	 al, BYTE PTR [eax+esi+200]

; 1204 : 
; 1205 : 			if( btSocketOption == 0xFF ||

  0005f	3c ff		 cmp	 al, 255			; 000000ffH
  00061	74 56		 je	 SHORT $LN5@ApplySocke
  00063	3c fe		 cmp	 al, 254			; 000000feH
  00065	74 52		 je	 SHORT $LN5@ApplySocke

; 1206 : 				btSocketOption == 0xFE )
; 1207 : 				continue;
; 1208 : 
; 1209 : 			btOption = btSocketOption%50;

  00067	0f b6 c8	 movzx	 ecx, al
  0006a	8b c1		 mov	 eax, ecx
  0006c	99		 cdq
  0006d	f7 7d f4	 idiv	 DWORD PTR tv194[ebp]

; 1210 : 			btLevel = (btSocketOption-btOption)/50+1;

  00070	0f b6 c2	 movzx	 eax, dl
  00073	2b c8		 sub	 ecx, eax
  00075	88 55 08	 mov	 BYTE PTR _btOption$[ebp], dl
  00078	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0007d	f7 e9		 imul	 ecx

; 1211 : 
; 1212 : 			if( IsOptionSet(&tmpSphere,btOption,btLevel) == FALSE )

  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00082	c1 fa 04	 sar	 edx, 4
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
  0008c	fe c0		 inc	 al
  0008e	0f b6 c0	 movzx	 eax, al
  00091	50		 push	 eax
  00092	ff 75 08	 push	 DWORD PTR _btOption$[ebp]
  00095	8d 45 e4	 lea	 eax, DWORD PTR _tmpSphere$[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z ; CSocketItems::IsOptionSet
  0009e	84 c0		 test	 al, al
  000a0	74 17		 je	 SHORT $LN5@ApplySocke

; 1213 : 				continue;
; 1214 : 
; 1215 : 			SetSocketOption(lpObj,TRUE,btOption,tmpSphere.btIncType,tmpSphere.wSphereValue);

  000a2	ff 75 ee	 push	 DWORD PTR _tmpSphere$[ebp+10]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000a8	ff 75 ed	 push	 DWORD PTR _tmpSphere$[ebp+9]
  000ab	ff 75 08	 push	 DWORD PTR _btOption$[ebp]
  000ae	6a 01		 push	 1
  000b0	57		 push	 edi
  000b1	e8 00 00 00 00	 call	 ?SetSocketOption@CSocketItems@@QAEXPAUOBJECTSTRUCT@@HEEG@Z ; CSocketItems::SetSocketOption

; 1216 : 			OptionCount++;

  000b6	ff 45 f8	 inc	 DWORD PTR _OptionCount$1$[ebp]
$LN5@ApplySocke:

; 1199 : 			continue;
; 1200 : 
; 1201 : 		for(int n = 0; n < MAX_SOCKET_COUNT; n++)

  000b9	46		 inc	 esi
  000ba	83 fe 05	 cmp	 esi, 5
  000bd	7c 91		 jl	 SHORT $LL7@ApplySocke
  000bf	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN2@ApplySocke:

; 1195 : 
; 1196 : 	for(int i = 0; i < INVETORY_WEAR_SIZE; i++)

  000c2	81 c3 d4 00 00
	00		 add	 ebx, 212		; 000000d4H
  000c8	81 fb f0 09 00
	00		 cmp	 ebx, 2544		; 000009f0H
  000ce	0f 8c 5c ff ff
	ff		 jl	 $LL4@ApplySocke

; 1217 : 		}
; 1218 : 	}
; 1219 : return OptionCount;

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _OptionCount$1$[ebp]
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx

; 1220 : }

  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 04 00	 ret	 4
?ApplySocketOptions@CSocketItems@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CSocketItems::ApplySocketOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_Type$ = 12						; size = 2
_Level$ = 16						; size = 1
?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z PROC	; CSocketItems::CheckMountItem, COMDAT
; _this$ = ecx

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 931  : 	BYTE btType = 0;
; 932  : 	BYTE btOption = 0;
; 933  : 
; 934  : 	if( IsSocketItem(lpItem) == false)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpItem$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN5@CheckMount
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 956  : }

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
$LN5@CheckMount:
  0001a	53		 push	 ebx

; 935  : 	{
; 936  : 		return false;
; 937  : 	}
; 938  : 
; 939  : 	btOption = GetSphereOption(Type,Level);

  0001b	ff 75 10	 push	 DWORD PTR _Level$[ebp]
  0001e	8b ce		 mov	 ecx, esi
  00020	ff 75 0c	 push	 DWORD PTR _Type$[ebp]
  00023	e8 00 00 00 00	 call	 ?GetSphereOption@CSocketItems@@QAEEGE@Z ; CSocketItems::GetSphereOption

; 940  : 	btType = btOption%50;

  00028	0f b6 c0	 movzx	 eax, al
  0002b	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00030	99		 cdq
  00031	be 38 ff ff ff	 mov	 esi, -200		; ffffff38H
  00036	f7 f9		 idiv	 ecx
  00038	8d 8f c8 00 00
	00		 lea	 ecx, DWORD PTR [edi+200]
  0003e	2b f7		 sub	 esi, edi
  00040	8a da		 mov	 bl, dl
  00042	bf 32 00 00 00	 mov	 edi, 50			; 00000032H
$LL4@CheckMount:

; 943  : 	{
; 944  : 		if( lpItem->m_SocketOption[i] == 0xFF ||

  00047	8a 01		 mov	 al, BYTE PTR [ecx]
  00049	3c ff		 cmp	 al, 255			; 000000ffH
  0004b	74 11		 je	 SHORT $LN2@CheckMount
  0004d	3c fe		 cmp	 al, 254			; 000000feH
  0004f	74 0d		 je	 SHORT $LN2@CheckMount

; 945  : 			lpItem->m_SocketOption[i] == 0xFE )
; 946  : 		{
; 947  : 			continue;
; 948  : 		}
; 949  : 
; 950  : 		if( (lpItem->m_SocketOption[i]%50) == btType )

  00051	0f b6 c0	 movzx	 eax, al
  00054	99		 cdq
  00055	f7 ff		 idiv	 edi
  00057	0f b6 c3	 movzx	 eax, bl
  0005a	3b d0		 cmp	 edx, eax
  0005c	74 12		 je	 SHORT $LN11@CheckMount
$LN2@CheckMount:

; 941  : 
; 942  : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)

  0005e	41		 inc	 ecx
  0005f	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00062	83 f8 05	 cmp	 eax, 5
  00065	7c e0		 jl	 SHORT $LL4@CheckMount

; 953  : 		}
; 954  : 	}
; 955  : return true;

  00067	5b		 pop	 ebx
  00068	5f		 pop	 edi
  00069	b0 01		 mov	 al, 1
  0006b	5e		 pop	 esi

; 956  : }

  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
$LN11@CheckMount:
  00070	5b		 pop	 ebx
  00071	5f		 pop	 edi

; 951  : 		{
; 952  : 			return false;

  00072	32 c0		 xor	 al, al
  00074	5e		 pop	 esi

; 956  : }

  00075	5d		 pop	 ebp
  00076	c2 0c 00	 ret	 12			; 0000000cH
?CheckMountItem@CSocketItems@@QAEEPAVCItem@@GE@Z ENDP	; CSocketItems::CheckMountItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetResultValue@CSocketItems@@QAEHHGE@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_IncValue$ = 12						; size = 2
_IncType$ = 16						; size = 1
?GetResultValue@CSocketItems@@QAEHHGE@Z PROC		; CSocketItems::GetResultValue, COMDAT
; _this$ = ecx

; 1649 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1650 : 	int RetVal = 0;
; 1651 : 
; 1652 : 	if( IncValue == 0 )

  00003	66 8b 4d 0c	 mov	 cx, WORD PTR _IncValue$[ebp]
  00007	66 85 c9	 test	 cx, cx
  0000a	75 06		 jne	 SHORT $LN4@GetResultV

; 1653 : 		return 0;

  0000c	33 c0		 xor	 eax, eax

; 1674 : 	}
; 1675 : return RetVal;
; 1676 : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN4@GetResultV:

; 1654 : 
; 1655 : 	switch( IncType )

  00012	0f b6 45 10	 movzx	 eax, BYTE PTR _IncType$[ebp]
  00016	48		 dec	 eax
  00017	83 f8 04	 cmp	 eax, 4
  0001a	77 37		 ja	 SHORT $LN10@GetResultV
  0001c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@GetResultV[eax*4]
$LN5@GetResultV:

; 1656 : 	{
; 1657 : 	case 1:
; 1658 : 		RetVal = IncValue;

  00023	0f b7 c1	 movzx	 eax, cx

; 1674 : 	}
; 1675 : return RetVal;
; 1676 : }

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
$LN6@GetResultV:

; 1659 : 		break;
; 1660 : 	case 2:
; 1661 : 		RetVal = Value*IncValue/100;

  0002a	0f b7 c9	 movzx	 ecx, cx
  0002d	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00032	0f af 4d 08	 imul	 ecx, DWORD PTR _Value$[ebp]
  00036	f7 e9		 imul	 ecx
  00038	c1 fa 05	 sar	 edx, 5
  0003b	8b c2		 mov	 eax, edx
  0003d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00040	03 c2		 add	 eax, edx

; 1674 : 	}
; 1675 : return RetVal;
; 1676 : }

  00042	5d		 pop	 ebp
  00043	c2 0c 00	 ret	 12			; 0000000cH
$LN9@GetResultV:

; 1662 : 		break;
; 1663 : 	case 3:
; 1664 : 		RetVal = Value/IncValue;
; 1665 : 		break;
; 1666 : 	case 4:
; 1667 : 		RetVal = Value/IncValue;
; 1668 : 		break;
; 1669 : 	case 5:
; 1670 : 		RetVal = Value/IncValue;

  00046	8b 45 08	 mov	 eax, DWORD PTR _Value$[ebp]
  00049	99		 cdq
  0004a	0f b7 c9	 movzx	 ecx, cx
  0004d	f7 f9		 idiv	 ecx

; 1674 : 	}
; 1675 : return RetVal;
; 1676 : }

  0004f	5d		 pop	 ebp
  00050	c2 0c 00	 ret	 12			; 0000000cH
$LN10@GetResultV:

; 1671 : 		break;
; 1672 : 	default:
; 1673 : 		return -1;

  00053	83 c8 ff	 or	 eax, -1

; 1674 : 	}
; 1675 : return RetVal;
; 1676 : }

  00056	5d		 pop	 ebp
  00057	c2 0c 00	 ret	 12			; 0000000cH
  0005a	66 90		 npad	 2
$LN14@GetResultV:
  0005c	00 00 00 00	 DD	 $LN5@GetResultV
  00060	00 00 00 00	 DD	 $LN6@GetResultV
  00064	00 00 00 00	 DD	 $LN9@GetResultV
  00068	00 00 00 00	 DD	 $LN9@GetResultV
  0006c	00 00 00 00	 DD	 $LN9@GetResultV
?GetResultValue@CSocketItems@@QAEHHGE@Z ENDP		; CSocketItems::GetResultValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetOptionRate@CSocketItems@@QAEEXZ
_TEXT	SEGMENT
?GetOptionRate@CSocketItems@@QAEEXZ PROC		; CSocketItems::GetOptionRate, COMDAT
; _this$ = ecx

; 1153 : 	int OptionRate = 0;
; 1154 : 
; 1155 : 	OptionRate = this->m_OptionRnd.GetRandomValue(eRANDOMPOOL_BY_WEIGHT);

  00000	6a 01		 push	 1
  00002	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00008	e8 00 00 00 00	 call	 ?GetRandomValue@TRandomPoolMgr@@QAEHW4eRandomPoolSelectType@@@Z ; TRandomPoolMgr::GetRandomValue

; 1156 : return OptionRate;
; 1157 : }

  0000d	c3		 ret	 0
?GetOptionRate@CSocketItems@@QAEEXZ ENDP		; CSocketItems::GetOptionRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetBonusOption@CSocketItems@@QAEPAU_SOCKET_BONUS_DATA@@E@Z
_TEXT	SEGMENT
_btBonusOption$ = 8					; size = 1
?GetBonusOption@CSocketItems@@QAEPAU_SOCKET_BONUS_DATA@@E@Z PROC ; CSocketItems::GetBonusOption, COMDAT
; _this$ = ecx

; 1176 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1177 : 	for(int i = 0; i < MAX_BONUS_OPTION; i++)

  00004	8a 5d 08	 mov	 bl, BYTE PTR _btBonusOption$[ebp]
  00007	8d 91 28 04 00
	00		 lea	 edx, DWORD PTR [ecx+1064]
  0000d	33 c0		 xor	 eax, eax
  0000f	90		 npad	 1
$LL4@GetBonusOp:

; 1178 : 	{
; 1179 : 		if( this->m_BonusOption[i].btIndex == btBonusOption )

  00010	38 1a		 cmp	 BYTE PTR [edx], bl
  00012	74 10		 je	 SHORT $LN8@GetBonusOp

; 1177 : 	for(int i = 0; i < MAX_BONUS_OPTION; i++)

  00014	40		 inc	 eax
  00015	83 c2 14	 add	 edx, 20			; 00000014H
  00018	83 f8 06	 cmp	 eax, 6
  0001b	7c f3		 jl	 SHORT $LL4@GetBonusOp

; 1182 : 		}
; 1183 : 	}
; 1184 : return false;

  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx

; 1185 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@GetBonusOp:

; 1180 : 		{
; 1181 : 			return &this->m_BonusOption[i];

  00024	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00027	8d 80 0a 01 00
	00		 lea	 eax, DWORD PTR [eax+266]
  0002d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00030	5b		 pop	 ebx

; 1185 : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?GetBonusOption@CSocketItems@@QAEPAU_SOCKET_BONUS_DATA@@E@Z ENDP ; CSocketItems::GetBonusOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSphereLevelOption@CSocketItems@@QAEPAU_SOCKET_SPHERE_LEVEL@@E@Z
_TEXT	SEGMENT
_btLevel$ = 8						; size = 1
?GetSphereLevelOption@CSocketItems@@QAEPAU_SOCKET_SPHERE_LEVEL@@E@Z PROC ; CSocketItems::GetSphereLevelOption, COMDAT
; _this$ = ecx

; 1139 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1140 : 	for(int i = 0; i < MAX_SPHERE_LEVEL;i++)

  00004	8a 5d 08	 mov	 bl, BYTE PTR _btLevel$[ebp]
  00007	8d 91 ec 03 00
	00		 lea	 edx, DWORD PTR [ecx+1004]
  0000d	33 c0		 xor	 eax, eax
  0000f	90		 npad	 1
$LL4@GetSphereL:

; 1141 : 	{
; 1142 : 		if( this->m_SphereLevel[i].btLevel == btLevel )

  00010	38 1a		 cmp	 BYTE PTR [edx], bl
  00012	74 10		 je	 SHORT $LN8@GetSphereL

; 1140 : 	for(int i = 0; i < MAX_SPHERE_LEVEL;i++)

  00014	40		 inc	 eax
  00015	83 c2 0c	 add	 edx, 12			; 0000000cH
  00018	83 f8 05	 cmp	 eax, 5
  0001b	7c f3		 jl	 SHORT $LL4@GetSphereL

; 1145 : 		}
; 1146 : 	}
; 1147 : 
; 1148 : return false;

  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx

; 1149 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@GetSphereL:

; 1143 : 		{
; 1144 : 			return &this->m_SphereLevel[i];

  00024	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00027	8d 80 fb 00 00
	00		 lea	 eax, DWORD PTR [eax+251]
  0002d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00030	5b		 pop	 ebx

; 1149 : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?GetSphereLevelOption@CSocketItems@@QAEPAU_SOCKET_SPHERE_LEVEL@@E@Z ENDP ; CSocketItems::GetSphereLevelOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z
_TEXT	SEGMENT
_btOption$ = 8						; size = 1
?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z PROC ; CSocketItems::GetSeedOption, COMDAT
; _this$ = ecx

; 1127 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1128 : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00004	8a 5d 08	 mov	 bl, BYTE PTR _btOption$[ebp]
  00007	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	0f 1f 40 00	 npad	 4
$LL4@GetSeedOpt:

; 1129 : 	{
; 1130 : 		if( this->m_SeedOption[i].btOption == btOption )

  00010	38 1a		 cmp	 BYTE PTR [edx], bl
  00012	74 10		 je	 SHORT $LN8@GetSeedOpt

; 1128 : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00014	40		 inc	 eax
  00015	83 c2 14	 add	 edx, 20			; 00000014H
  00018	83 f8 32	 cmp	 eax, 50			; 00000032H
  0001b	7c f3		 jl	 SHORT $LL4@GetSeedOpt

; 1133 : 		}
; 1134 : 	}
; 1135 : return NULL;

  0001d	33 c0		 xor	 eax, eax
  0001f	5b		 pop	 ebx

; 1136 : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN8@GetSeedOpt:

; 1131 : 		{
; 1132 : 			return &this->m_SeedOption[i];

  00024	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00027	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0002a	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0002d	5b		 pop	 ebx

; 1136 : }

  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ENDP ; CSocketItems::GetSeedOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetOptionGroup@CSocketItems@@QAEEE@Z
_TEXT	SEGMENT
_SeedOption$ = 8					; size = 1
?GetOptionGroup@CSocketItems@@QAEEE@Z PROC		; CSocketItems::GetOptionGroup, COMDAT
; _this$ = ecx

; 1160 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1161 : 	BYTE btOption = 0;
; 1162 : 	_SOCKET_SEED_DATA* lpSeedData = NULL;
; 1163 : 
; 1164 : 	btOption = SeedOption % 50;

  00003	0f b6 45 08	 movzx	 eax, BYTE PTR _SeedOption$[ebp]
  00007	56		 push	 esi
  00008	99		 cdq
  00009	be 32 00 00 00	 mov	 esi, 50			; 00000032H
  0000e	f7 fe		 idiv	 esi

; 1165 : 
; 1166 : 	lpSeedData = GetSeedOption(btOption);

  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ; CSocketItems::GetSeedOption
  00016	5e		 pop	 esi

; 1167 : 
; 1168 : 	if( lpSeedData == NULL )

  00017	85 c0		 test	 eax, eax
  00019	75 06		 jne	 SHORT $LN2@GetOptionG

; 1169 : 	{
; 1170 : 		return false;

  0001b	32 c0		 xor	 al, al

; 1173 : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@GetOptionG:

; 1171 : 	}
; 1172 : return lpSeedData->btGroup;

  00021	8a 40 01	 mov	 al, BYTE PTR [eax+1]

; 1173 : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetOptionGroup@CSocketItems@@QAEEE@Z ENDP		; CSocketItems::GetOptionGroup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSphereOption@CSocketItems@@QAEEGE@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 2
_btIndex$ = 12						; size = 1
?GetSphereOption@CSocketItems@@QAEEGE@Z PROC		; CSocketItems::GetSphereOption, COMDAT
; _this$ = ecx

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 960  : 	BYTE btGroup = 0;
; 961  : 	BYTE btLevel = 0;
; 962  : 	BYTE btOption = 0;
; 963  : 
; 964  : 	btLevel = ((Type%512)-100)/6;

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _Type$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	25 ff 01 00 80	 and	 eax, -2147483137	; 800001ffH
  00011	79 07		 jns	 SHORT $LN13@GetSphereO
  00013	48		 dec	 eax
  00014	0d 00 fe ff ff	 or	 eax, -512		; fffffe00H
  00019	40		 inc	 eax
$LN13@GetSphereO:
  0001a	83 c0 9c	 add	 eax, -100		; ffffff9cH
  0001d	8a 5d 0c	 mov	 bl, BYTE PTR _btIndex$[ebp]
  00020	b9 06 00 00 00	 mov	 ecx, 6
  00025	99		 cdq
  00026	f7 f9		 idiv	 ecx
  00028	8d 4f 06	 lea	 ecx, DWORD PTR [edi+6]

; 965  : 	btGroup = ((Type%512)-100)%6+1;

  0002b	fe c2		 inc	 dl

; 966  : 
; 967  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  0002d	33 f6		 xor	 esi, esi
  0002f	90		 npad	 1
$LL4@GetSphereO:

; 968  : 	{
; 969  : 		if( this->m_SeedOption[i].btGroup == btGroup &&

  00030	38 51 ff	 cmp	 BYTE PTR [ecx-1], dl
  00033	75 04		 jne	 SHORT $LN2@GetSphereO
  00035	38 19		 cmp	 BYTE PTR [ecx], bl
  00037	74 12		 je	 SHORT $LN8@GetSphereO
$LN2@GetSphereO:

; 966  : 
; 967  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00039	46		 inc	 esi
  0003a	83 c1 14	 add	 ecx, 20			; 00000014H
  0003d	83 fe 32	 cmp	 esi, 50			; 00000032H
  00040	7c ee		 jl	 SHORT $LL4@GetSphereO

; 973  : 			return btOption;
; 974  : 		}
; 975  : 	}
; 976  : 
; 977  : 	return -1;

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	0c ff		 or	 al, 255			; 000000ffH
  00046	5b		 pop	 ebx

; 978  : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN8@GetSphereO:

; 970  : 			this->m_SeedOption[i].btIndex == btIndex)
; 971  : 		{
; 972  : 			btOption = btLevel*50+this->m_SeedOption[i].btOption;

  0004b	0f b6 c0	 movzx	 eax, al
  0004e	8d 0c b6	 lea	 ecx, DWORD PTR [esi+esi*4]
  00051	6b c0 32	 imul	 eax, eax, 50
  00054	02 44 8f 04	 add	 al, BYTE PTR [edi+ecx*4+4]
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx

; 978  : }

  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
?GetSphereOption@CSocketItems@@QAEEGE@Z ENDP		; CSocketItems::GetSphereOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSphereLevel@CSocketItems@@QAEEH@Z
_TEXT	SEGMENT
_SpearItem$ = 8						; size = 4
?GetSphereLevel@CSocketItems@@QAEEH@Z PROC		; CSocketItems::GetSphereLevel, COMDAT
; _this$ = ecx

; 911  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 912  : 	switch( SpearItem )

  00003	8b 45 08	 mov	 eax, DWORD PTR _SpearItem$[ebp]
  00006	05 ba e7 ff ff	 add	 eax, -6214		; ffffe7baH
  0000b	83 f8 04	 cmp	 eax, 4
  0000e	77 25		 ja	 SHORT $LN9@GetSphereL
  00010	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@GetSphereL[eax*4]
$LN4@GetSphereL:

; 913  : 	{
; 914  : 	case ITEMGET(12,70):
; 915  : 		return 1;

  00017	b0 01		 mov	 al, 1

; 926  : 	}
; 927  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN5@GetSphereL:

; 916  : 	case ITEMGET(12,71):
; 917  : 		return 2;

  0001d	b0 02		 mov	 al, 2

; 926  : 	}
; 927  : }

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN6@GetSphereL:

; 918  : 	case ITEMGET(12,72):
; 919  : 		return 3;

  00023	b0 03		 mov	 al, 3

; 926  : 	}
; 927  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN7@GetSphereL:

; 920  : 	case ITEMGET(12,73):
; 921  : 		return 4;

  00029	b0 04		 mov	 al, 4

; 926  : 	}
; 927  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
$LN8@GetSphereL:

; 922  : 	case ITEMGET(12,74):
; 923  : 		return 5;

  0002f	b0 05		 mov	 al, 5

; 926  : 	}
; 927  : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN9@GetSphereL:

; 924  : 	default:
; 925  : 		return 0;

  00035	32 c0		 xor	 al, al

; 926  : 	}
; 927  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
  0003b	90		 npad	 1
$LN12@GetSphereL:
  0003c	00 00 00 00	 DD	 $LN4@GetSphereL
  00040	00 00 00 00	 DD	 $LN5@GetSphereL
  00044	00 00 00 00	 DD	 $LN6@GetSphereL
  00048	00 00 00 00	 DD	 $LN7@GetSphereL
  0004c	00 00 00 00	 DD	 $LN8@GetSphereL
?GetSphereLevel@CSocketItems@@QAEEH@Z ENDP		; CSocketItems::GetSphereLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSeedOption@CSocketItems@@QAEEHE@Z
_TEXT	SEGMENT
_SeedItem$ = 8						; size = 4
_SeedIndex$ = 12					; size = 1
?GetSeedOption@CSocketItems@@QAEEHE@Z PROC		; CSocketItems::GetSeedOption, COMDAT
; _this$ = ecx

; 896  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 897  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00004	8a 5d 0c	 mov	 bl, BYTE PTR _SeedIndex$[ebp]
  00007	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _SeedItem$[ebp]
  0000e	33 d2		 xor	 edx, edx
$LL4@GetSeedOpt:

; 898  : 	{
; 899  : 		if( this->m_SeedOption[i].SeedItem == SeedItem )

  00010	39 70 0a	 cmp	 DWORD PTR [eax+10], esi
  00013	75 04		 jne	 SHORT $LN2@GetSeedOpt

; 900  : 		{
; 901  : 			if( this->m_SeedOption[i].btIndex == SeedIndex )

  00015	38 18		 cmp	 BYTE PTR [eax], bl
  00017	74 11		 je	 SHORT $LN9@GetSeedOpt
$LN2@GetSeedOpt:

; 897  : 	for(int i = 0; i < MAX_SEED_OPTION; i++)

  00019	42		 inc	 edx
  0001a	83 c0 14	 add	 eax, 20			; 00000014H
  0001d	83 fa 32	 cmp	 edx, 50			; 00000032H
  00020	7c ee		 jl	 SHORT $LL4@GetSeedOpt

; 904  : 			}
; 905  : 		}
; 906  : 	}
; 907  : 	return -1;

  00022	5e		 pop	 esi
  00023	0c ff		 or	 al, 255			; 000000ffH
  00025	5b		 pop	 ebx

; 908  : }

  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
$LN9@GetSeedOpt:

; 902  : 			{
; 903  : 				return this->m_SeedOption[i].btOption;

  0002a	8d 04 92	 lea	 eax, DWORD PTR [edx+edx*4]
  0002d	8a 44 81 04	 mov	 al, BYTE PTR [ecx+eax*4+4]
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 908  : }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?GetSeedOption@CSocketItems@@QAEEHE@Z ENDP		; CSocketItems::GetSeedOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z
_TEXT	SEGMENT
_lpSphereData$ = 8					; size = 4
_btOption$ = 12						; size = 1
_btLevel$ = 16						; size = 1
?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z PROC ; CSocketItems::IsOptionSet, COMDAT
; _this$ = ecx

; 1112 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1113 : 	_SOCKET_SEED_DATA* lpSeedData = NULL;
; 1114 : 	_SOCKET_SPHERE_OPTION* tmpSphereData = NULL;
; 1115 : 
; 1116 : 	lpSeedData = GetSeedOption(btOption);

  00003	ff 75 0c	 push	 DWORD PTR _btOption$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetSeedOption@CSocketItems@@QAEPAU_SOCKET_SEED_DATA@@E@Z ; CSocketItems::GetSeedOption

; 1117 : 
; 1118 : 	if( lpSeedData == NULL )

  0000b	85 c0		 test	 eax, eax
  0000d	75 06		 jne	 SHORT $LN2@IsOptionSe

; 1119 : 		return false;

  0000f	32 c0		 xor	 al, al

; 1122 : 		return false;
; 1123 : return true;
; 1124 : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
$LN2@IsOptionSe:

; 1120 : 
; 1121 : 	if( lpSphereData->SetSphereOption(lpSeedData,btLevel) == FALSE )

  00015	ff 75 10	 push	 DWORD PTR _btLevel$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _lpSphereData$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?SetSphereOption@_SOCKET_SPHERE_OPTION@@QAEEPAU_SOCKET_SEED_DATA@@E@Z ; _SOCKET_SPHERE_OPTION::SetSphereOption
  00021	84 c0		 test	 al, al
  00023	0f 95 c0	 setne	 al

; 1122 : 		return false;
; 1123 : return true;
; 1124 : }

  00026	5d		 pop	 ebp
  00027	c2 0c 00	 ret	 12			; 0000000cH
?IsOptionSet@CSocketItems@@QAEEPAU_SOCKET_SPHERE_OPTION@@EE@Z ENDP ; CSocketItems::IsOptionSet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsDropMap@CSocketItems@@QAEEH@Z
_TEXT	SEGMENT
_MapNumber$ = 8						; size = 4
?IsDropMap@CSocketItems@@QAEEH@Z PROC			; CSocketItems::IsDropMap, COMDAT
; _this$ = ecx

; 1050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1051 : 	switch(MapNumber)

  00003	8b 45 08	 mov	 eax, DWORD PTR _MapNumber$[ebp]
  00006	83 c0 c7	 add	 eax, -57		; ffffffc7H
  00009	83 f8 01	 cmp	 eax, 1
  0000c	0f 96 c0	 setbe	 al

; 1052 : 	{
; 1053 : 	case MAP_INDEX_RAKLION:
; 1054 : 	case MAP_INDEX_RAKLIONBOSS:
; 1055 : 		return true;
; 1056 : 	}
; 1057 : return false;
; 1058 : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?IsDropMap@CSocketItems@@QAEEH@Z ENDP			; CSocketItems::IsDropMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_SeedOption$ = 12					; size = 1
?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z PROC	; CSocketItems::IsItemType, COMDAT
; _this$ = ecx

; 1008 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1009 : 	if( IsSocketItem(lpItem) == FALSE )

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpItem$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00010	84 c0		 test	 al, al
  00012	75 06		 jne	 SHORT $LN6@IsItemType
  00014	5f		 pop	 edi
  00015	5e		 pop	 esi

; 1045 : 	}
; 1046 : return false;
; 1047 : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
$LN6@IsItemType:

; 1010 : 	{
; 1011 : 		return false;
; 1012 : 	}
; 1013 : 
; 1014 : 	BYTE btIndex = 0;
; 1015 : 	BYTE btNumber = 0;
; 1016 : 	BYTE btGroup = 0;
; 1017 : 
; 1018 : 	btNumber = lpItem->m_Type%512;

  0001a	0f bf 47 06	 movsx	 eax, WORD PTR [edi+6]
  0001e	8b c8		 mov	 ecx, eax
  00020	53		 push	 ebx
  00021	81 e1 ff 01 00
	80		 and	 ecx, -2147483137	; 800001ffH
  00027	79 08		 jns	 SHORT $LN15@IsItemType
  00029	49		 dec	 ecx
  0002a	81 c9 00 fe ff
	ff		 or	 ecx, -512		; fffffe00H
  00030	41		 inc	 ecx
$LN15@IsItemType:

; 1019 : 	btIndex = (lpItem->m_Type - btNumber)/512;
; 1020 : 	btGroup = GetOptionGroup(SeedOption);

  00031	ff 75 0c	 push	 DWORD PTR _SeedOption$[ebp]
  00034	0f b6 c9	 movzx	 ecx, cl
  00037	2b c1		 sub	 eax, ecx
  00039	8b ce		 mov	 ecx, esi
  0003b	99		 cdq
  0003c	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00042	03 c2		 add	 eax, edx
  00044	8b d8		 mov	 ebx, eax
  00046	c1 fb 09	 sar	 ebx, 9
  00049	e8 00 00 00 00	 call	 ?GetOptionGroup@CSocketItems@@QAEEE@Z ; CSocketItems::GetOptionGroup

; 1021 : 
; 1022 : 	if( btIndex >= 0 && btIndex <= 5 )

  0004e	80 fb 05	 cmp	 bl, 5
  00051	77 08		 ja	 SHORT $LN7@IsItemType

; 1023 : 	{
; 1024 : 		switch( btGroup )

  00053	0f b6 c0	 movzx	 eax, al
  00056	83 e8 01	 sub	 eax, 1

; 1025 : 		{
; 1026 : 		case 1:
; 1027 : 		case 3:
; 1028 : 		case 5:
; 1029 : 			return true;

  00059	eb 0e		 jmp	 SHORT $LN16@IsItemType
$LN7@IsItemType:

; 1030 : 		}
; 1031 : 	}
; 1032 : 	else if( btIndex >= 6 && btIndex <= 11)

  0005b	80 eb 06	 sub	 bl, 6
  0005e	80 fb 05	 cmp	 bl, 5
  00061	77 1b		 ja	 SHORT $LN10@IsItemType

; 1033 : 	{
; 1034 : 		switch( btGroup )

  00063	0f b6 c0	 movzx	 eax, al
  00066	83 e8 02	 sub	 eax, 2
$LN16@IsItemType:
  00069	74 0a		 je	 SHORT $LN12@IsItemType
  0006b	83 e8 02	 sub	 eax, 2
  0006e	74 05		 je	 SHORT $LN12@IsItemType
  00070	83 e8 02	 sub	 eax, 2
  00073	75 09		 jne	 SHORT $LN10@IsItemType
$LN12@IsItemType:
  00075	5b		 pop	 ebx
  00076	5f		 pop	 edi

; 1035 : 		{
; 1036 : 		case 2:
; 1037 : 		case 4:
; 1038 : 		case 6:
; 1039 : 			return true;

  00077	b0 01		 mov	 al, 1
  00079	5e		 pop	 esi

; 1045 : 	}
; 1046 : return false;
; 1047 : }

  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
$LN10@IsItemType:
  0007e	5b		 pop	 ebx
  0007f	5f		 pop	 edi

; 1040 : 		}
; 1041 : 	}
; 1042 : 	else
; 1043 : 	{
; 1044 : 		return false;

  00080	32 c0		 xor	 al, al
  00082	5e		 pop	 esi

; 1045 : 	}
; 1046 : return false;
; 1047 : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
?IsItemType@CSocketItems@@QAEEPAVCItem@@E@Z ENDP	; CSocketItems::IsItemType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsSeedSphereItem@CSocketItems@@QAEEH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?IsSeedSphereItem@CSocketItems@@QAEEH@Z PROC		; CSocketItems::IsSeedSphereItem, COMDAT
; _this$ = ecx

; 876  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 877  : 	BYTE ItemIndex = 0;
; 878  : 	BYTE ItemNumber = 0;
; 879  : 
; 880  : 	ItemNumber = ItemType % 512;

  00003	8b 45 08	 mov	 eax, DWORD PTR _ItemType$[ebp]
  00006	53		 push	 ebx
  00007	8b d8		 mov	 ebx, eax
  00009	81 e3 ff 01 00
	80		 and	 ebx, -2147483137	; 800001ffH
  0000f	79 08		 jns	 SHORT $LN5@IsSeedSphe
  00011	4b		 dec	 ebx
  00012	81 cb 00 fe ff
	ff		 or	 ebx, -512		; fffffe00H
  00018	43		 inc	 ebx
$LN5@IsSeedSphe:

; 881  : 	ItemIndex = (ItemType-ItemNumber) / 512;

  00019	0f b6 cb	 movzx	 ecx, bl
  0001c	2b c1		 sub	 eax, ecx
  0001e	99		 cdq
  0001f	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00025	03 c2		 add	 eax, edx
  00027	c1 f8 09	 sar	 eax, 9

; 882  : 
; 883  : 
; 884  : 	if( ItemIndex == 12 )

  0002a	3c 0c		 cmp	 al, 12			; 0000000cH
  0002c	75 0f		 jne	 SHORT $LN3@IsSeedSphe

; 885  : 	{
; 886  : 		if( ItemNumber >= 100 && ItemNumber <= 129 )

  0002e	80 eb 64	 sub	 bl, 100			; 00000064H
  00031	80 fb 1d	 cmp	 bl, 29			; 0000001dH
  00034	77 07		 ja	 SHORT $LN3@IsSeedSphe

; 887  : 		{
; 888  : 			return true;

  00036	b0 01		 mov	 al, 1
  00038	5b		 pop	 ebx

; 893  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
$LN3@IsSeedSphe:

; 889  : 		}
; 890  : 	}
; 891  : 
; 892  : return false;

  0003d	32 c0		 xor	 al, al
  0003f	5b		 pop	 ebx

; 893  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?IsSeedSphereItem@CSocketItems@@QAEEH@Z ENDP		; CSocketItems::IsSeedSphereItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsSphereItem@CSocketItems@@QAEEH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?IsSphereItem@CSocketItems@@QAEEH@Z PROC		; CSocketItems::IsSphereItem, COMDAT
; _this$ = ecx

; 862  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 863  : 	switch( ItemType )

  00003	8b 45 08	 mov	 eax, DWORD PTR _ItemType$[ebp]
  00006	05 ba e7 ff ff	 add	 eax, -6214		; ffffe7baH
  0000b	83 f8 04	 cmp	 eax, 4
  0000e	0f 96 c0	 setbe	 al

; 864  : 	{
; 865  : 	case ITEMGET(12,70):
; 866  : 	case ITEMGET(12,71):
; 867  : 	case ITEMGET(12,72):
; 868  : 	case ITEMGET(12,73):
; 869  : 	case ITEMGET(12,74):
; 870  : 		return true;
; 871  : 	}
; 872  : 	return false;
; 873  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?IsSphereItem@CSocketItems@@QAEEH@Z ENDP		; CSocketItems::IsSphereItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsSeedItem@CSocketItems@@QAEEH@Z
_TEXT	SEGMENT
_ItemType$ = 8						; size = 4
?IsSeedItem@CSocketItems@@QAEEH@Z PROC			; CSocketItems::IsSeedItem, COMDAT
; _this$ = ecx

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 848  : 	switch( ItemType )

  00003	8b 45 08	 mov	 eax, DWORD PTR _ItemType$[ebp]
  00006	05 c4 e7 ff ff	 add	 eax, -6204		; ffffe7c4H
  0000b	83 f8 05	 cmp	 eax, 5
  0000e	0f 96 c0	 setbe	 al

; 849  : 	{
; 850  : 	case ITEMGET(12,60):
; 851  : 	case ITEMGET(12,61):
; 852  : 	case ITEMGET(12,62):
; 853  : 	case ITEMGET(12,63):
; 854  : 	case ITEMGET(12,64):
; 855  : 	case ITEMGET(12,65):
; 856  : 		return true;
; 857  : 	}
; 858  : 	return false;
; 859  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?IsSeedItem@CSocketItems@@QAEEH@Z ENDP			; CSocketItems::IsSeedItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z PROC	; CSocketItems::CheckSocketOption, COMDAT
; _this$ = ecx

; 820  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 821  : 	if( lpItem == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 32		 je	 SHORT $LN15@CheckSocke

; 822  : 	{
; 823  : 		return false;
; 824  : 	}
; 825  : 
; 826  : 	if( lpItem->IsItem() == FALSE )

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00015	85 c0		 test	 eax, eax
  00017	74 27		 je	 SHORT $LN15@CheckSocke

; 827  : 	{
; 828  : 		return false;
; 829  : 	}
; 830  : 
; 831  : 	if( IsSocketItem(lpItem) == FALSE )

  00019	56		 push	 esi
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00021	84 c0		 test	 al, al
  00023	74 1b		 je	 SHORT $LN15@CheckSocke

; 832  : 	{
; 833  : 		return false;
; 834  : 	}
; 835  : 
; 836  : 	for(int n = 0; n < MAX_SOCKET_COUNT; n++)

  00025	33 c0		 xor	 eax, eax
  00027	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@CheckSocke:

; 837  : 	{
; 838  : 		if( lpItem->m_SocketOption[n] != (BYTE)-1 )

  00030	80 bc 06 c8 00
	00 00 ff	 cmp	 BYTE PTR [esi+eax+200], 255 ; 000000ffH
  00038	75 0e		 jne	 SHORT $LN11@CheckSocke

; 832  : 	{
; 833  : 		return false;
; 834  : 	}
; 835  : 
; 836  : 	for(int n = 0; n < MAX_SOCKET_COUNT; n++)

  0003a	40		 inc	 eax
  0003b	83 f8 05	 cmp	 eax, 5
  0003e	7c f0		 jl	 SHORT $LL4@CheckSocke
$LN15@CheckSocke:
  00040	5f		 pop	 edi

; 841  : 		}
; 842  : 	}
; 843  : return false;

  00041	32 c0		 xor	 al, al
  00043	5e		 pop	 esi

; 844  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN11@CheckSocke:
  00048	5f		 pop	 edi

; 839  : 		{
; 840  : 			return true;

  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 844  : }

  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?CheckSocketOption@CSocketItems@@QAE_NPAVCItem@@@Z ENDP	; CSocketItems::CheckSocketOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
_SocketOp$ = 12						; size = 4
_SocketId$ = 16						; size = 4
?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z PROC	; CSocketItems::GetItemOptions, COMDAT
; _this$ = ecx

; 804  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 805  : 	if( lpItem == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 51		 je	 SHORT $LN7@GetItemOpt

; 806  : 		return;
; 807  : 
; 808  : 	if( lpItem->IsItem() == FALSE || this->IsSocketItem(lpItem) == FALSE)

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00015	85 c0		 test	 eax, eax
  00017	74 46		 je	 SHORT $LN7@GetItemOpt
  00019	56		 push	 esi
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ; CSocketItems::IsSocketItem
  00021	84 c0		 test	 al, al
  00023	74 3a		 je	 SHORT $LN7@GetItemOpt

; 809  : 		return;
; 810  : 
; 811  : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 812  : 	{
; 813  : 		SocketOp[i] = lpItem->m_SocketOption[i];

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _SocketOp$[ebp]
  00028	8a 86 c8 00 00
	00		 mov	 al, BYTE PTR [esi+200]
  0002e	88 01		 mov	 BYTE PTR [ecx], al
  00030	8a 86 c9 00 00
	00		 mov	 al, BYTE PTR [esi+201]
  00036	88 41 01	 mov	 BYTE PTR [ecx+1], al
  00039	8a 86 ca 00 00
	00		 mov	 al, BYTE PTR [esi+202]
  0003f	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00042	8a 86 cb 00 00
	00		 mov	 al, BYTE PTR [esi+203]
  00048	88 41 03	 mov	 BYTE PTR [ecx+3], al
  0004b	8a 86 cc 00 00
	00		 mov	 al, BYTE PTR [esi+204]
  00051	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 814  : 	}
; 815  : 
; 816  : 	*SocketId = lpItem->m_SocketBonus;

  00054	8b 45 10	 mov	 eax, DWORD PTR _SocketId$[ebp]
  00057	8a 8e c7 00 00
	00		 mov	 cl, BYTE PTR [esi+199]
  0005d	88 08		 mov	 BYTE PTR [eax], cl
$LN7@GetItemOpt:
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 817  : }

  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
?GetItemOptions@CSocketItems@@QAEXPAVCItem@@PAE1@Z ENDP	; CSocketItems::GetItemOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetEmptySocketCount@CSocketItems@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
?GetEmptySocketCount@CSocketItems@@QAEEPAVCItem@@@Z PROC ; CSocketItems::GetEmptySocketCount, COMDAT
; _this$ = ecx

; 789  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 790  : 	BYTE count = 0;
; 791  : 
; 792  : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 793  : 	{
; 794  : 		if( lpItem->m_SocketOption[i] == 0xFE )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpItem$[ebp]
  00006	32 c0		 xor	 al, al
  00008	0f b6 c0	 movzx	 eax, al
  0000b	ba 01 00 00 00	 mov	 edx, 1
  00010	80 b9 c8 00 00
	00 fe		 cmp	 BYTE PTR [ecx+200], 254	; 000000feH
  00017	0f 44 c2	 cmove	 eax, edx
  0001a	80 b9 c9 00 00
	00 fe		 cmp	 BYTE PTR [ecx+201], 254	; 000000feH
  00021	75 02		 jne	 SHORT $LN14@GetEmptySo

; 795  : 		{
; 796  : 			count++;

  00023	fe c0		 inc	 al
$LN14@GetEmptySo:

; 790  : 	BYTE count = 0;
; 791  : 
; 792  : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 793  : 	{
; 794  : 		if( lpItem->m_SocketOption[i] == 0xFE )

  00025	80 b9 ca 00 00
	00 fe		 cmp	 BYTE PTR [ecx+202], 254	; 000000feH
  0002c	75 02		 jne	 SHORT $LN16@GetEmptySo

; 795  : 		{
; 796  : 			count++;

  0002e	fe c0		 inc	 al
$LN16@GetEmptySo:

; 790  : 	BYTE count = 0;
; 791  : 
; 792  : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 793  : 	{
; 794  : 		if( lpItem->m_SocketOption[i] == 0xFE )

  00030	80 b9 cb 00 00
	00 fe		 cmp	 BYTE PTR [ecx+203], 254	; 000000feH
  00037	75 02		 jne	 SHORT $LN18@GetEmptySo

; 795  : 		{
; 796  : 			count++;

  00039	fe c0		 inc	 al
$LN18@GetEmptySo:

; 790  : 	BYTE count = 0;
; 791  : 
; 792  : 	for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 793  : 	{
; 794  : 		if( lpItem->m_SocketOption[i] == 0xFE )

  0003b	80 b9 cc 00 00
	00 fe		 cmp	 BYTE PTR [ecx+204], 254	; 000000feH
  00042	75 02		 jne	 SHORT $LN20@GetEmptySo

; 795  : 		{
; 796  : 			count++;

  00044	fe c0		 inc	 al
$LN20@GetEmptySo:

; 797  : 		}
; 798  : 	}
; 799  : 
; 800  : return count;
; 801  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?GetEmptySocketCount@CSocketItems@@QAEEPAVCItem@@@Z ENDP ; CSocketItems::GetEmptySocketCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsSocketItem@CSocketItems@@QAE_NH@Z
_TEXT	SEGMENT
_ItemIndex$ = 8						; size = 4
?IsSocketItem@CSocketItems@@QAE_NH@Z PROC		; CSocketItems::IsSocketItem, COMDAT
; _this$ = ecx

; 644  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 777  : 	for( int i = 0; i < this->m_SocketItemList.size(); i++ )

  00007	33 d2		 xor	 edx, edx
  00009	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0000a	8b 86 48 05 00
	00		 mov	 eax, DWORD PTR [esi+1352]
  00010	2b 86 44 05 00
	00		 sub	 eax, DWORD PTR [esi+1348]
  00016	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 777  : 	for( int i = 0; i < this->m_SocketItemList.size(); i++ )

  00019	85 c0		 test	 eax, eax
  0001b	74 35		 je	 SHORT $LN3@IsSocketIt
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0001d	8b be 44 05 00
	00		 mov	 edi, DWORD PTR [esi+1348]
  00023	8b 5d 08	 mov	 ebx, DWORD PTR _ItemIndex$[ebp]
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@IsSocketIt:
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 779  : 		if( ITEMGET(this->m_SocketItemList[i].ItemType, this->m_SocketItemList[i].ItemIndex) == ItemIndex )

  00030	0f b7 0c 97	 movzx	 ecx, WORD PTR [edi+edx*4]
  00034	0f b7 44 97 02	 movzx	 eax, WORD PTR [edi+edx*4+2]
  00039	c1 e1 09	 shl	 ecx, 9
  0003c	03 c8		 add	 ecx, eax
  0003e	3b cb		 cmp	 ecx, ebx
  00040	74 19		 je	 SHORT $LN51@IsSocketIt
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00042	8b 86 48 05 00
	00		 mov	 eax, DWORD PTR [esi+1352]
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 777  : 	for( int i = 0; i < this->m_SocketItemList.size(); i++ )

  00048	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00049	2b c7		 sub	 eax, edi
  0004b	c1 f8 02	 sar	 eax, 2
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 777  : 	for( int i = 0; i < this->m_SocketItemList.size(); i++ )

  0004e	3b d0		 cmp	 edx, eax
  00050	72 de		 jb	 SHORT $LL4@IsSocketIt
$LN3@IsSocketIt:
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 782  : 		}
; 783  : 
; 784  : 	}
; 785  : 	return false;

  00054	32 c0		 xor	 al, al
  00056	5b		 pop	 ebx

; 786  : }

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN51@IsSocketIt:
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 780  : 		{
; 781  : 			return true;

  0005d	b0 01		 mov	 al, 1
  0005f	5b		 pop	 ebx

; 786  : }

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
?IsSocketItem@CSocketItems@@QAE_NH@Z ENDP		; CSocketItems::IsSocketItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z PROC	; CSocketItems::IsSocketItem, COMDAT
; _this$ = ecx

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 630  : 	if( lpItem == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	75 08		 jne	 SHORT $LN2@IsSocketIt
$LN5@IsSocketIt:
  0000e	5f		 pop	 edi

; 631  : 	{
; 632  : 		return false;

  0000f	32 c0		 xor	 al, al
  00011	5e		 pop	 esi

; 641  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
$LN2@IsSocketIt:

; 633  : 	}
; 634  : 
; 635  : 	if( lpItem->IsItem() == FALSE )

  00016	8b ce		 mov	 ecx, esi
  00018	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0001d	85 c0		 test	 eax, eax
  0001f	74 ed		 je	 SHORT $LN5@IsSocketIt

; 636  : 	{
; 637  : 		return false;
; 638  : 	}
; 639  : 
; 640  : return IsSocketItem(lpItem->m_Type);

  00021	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  00025	8b cf		 mov	 ecx, edi
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi

; 641  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?IsSocketItem@CSocketItems@@QAE_NPAVCItem@@@Z ENDP	; CSocketItems::IsSocketItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?LoadOptions@CSocketItems@@QAEXXZ
_TEXT	SEGMENT
?LoadOptions@CSocketItems@@QAEXXZ PROC			; CSocketItems::LoadOptions, COMDAT
; _this$ = ecx

; 574  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 575  : 	this->m_SocketType1Rnd.InitPool();

  00005	8d b3 d0 04 00
	00		 lea	 esi, DWORD PTR [ebx+1232]
  0000b	8b ce		 mov	 ecx, esi
  0000d	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 576  : 	this->m_SocketType2Rnd.InitPool();

  00012	8d bb e0 04 00
	00		 lea	 edi, DWORD PTR [ebx+1248]
  00018	8b cf		 mov	 ecx, edi
  0001a	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 577  : 
; 578  : 	this->m_SocketType1Rate[0] = GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate1",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00024	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00029	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0002e	50		 push	 eax
  0002f	6a 00		 push	 0
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MBJOIPCF@SocketSlotCountRate1?$AA@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 579  : 	this->m_SocketType1Rate[1] = GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate2",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0004b	89 83 f0 04 00
	00		 mov	 DWORD PTR [ebx+1264], eax
  00051	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00056	50		 push	 eax
  00057	6a 00		 push	 0
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OKLDNMOG@SocketSlotCountRate2?$AA@
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 580  : 	this->m_SocketType1Rate[2] = GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate3",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00073	89 83 f4 04 00
	00		 mov	 DWORD PTR [ebx+1268], eax
  00079	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0007e	50		 push	 eax
  0007f	6a 00		 push	 0
  00081	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PDKIONKH@SocketSlotCountRate3?$AA@
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 581  : 	this->m_SocketType1Rate[3] = GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate4",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0009b	89 83 f8 04 00
	00		 mov	 DWORD PTR [ebx+1272], eax
  000a1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000a6	50		 push	 eax
  000a7	6a 00		 push	 0
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LMOJHLGA@SocketSlotCountRate4?$AA@
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 582  : 	this->m_SocketType1Rate[4] = GetPrivateProfileInt("GameServerInfo","SocketSlotCountRate5",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  000be	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000c3	89 83 fc 04 00
	00		 mov	 DWORD PTR [ebx+1276], eax
  000c9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000ce	50		 push	 eax
  000cf	6a 00		 push	 0
  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KFPCEKCB@SocketSlotCountRate5?$AA@
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 583  : 
; 584  : 	this->m_SocketType2Rate[0] = GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate1",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  000e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  000eb	89 83 00 05 00
	00		 mov	 DWORD PTR [ebx+1280], eax
  000f1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000f6	50		 push	 eax
  000f7	6a 00		 push	 0
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DCGBAHJM@TwoHandWeaponSocketSlotCountRate@
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 585  : 	this->m_SocketType2Rate[1] = GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate2",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0010e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00113	89 83 04 05 00
	00		 mov	 DWORD PTR [ebx+1284], eax
  00119	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0011e	50		 push	 eax
  0011f	6a 00		 push	 0
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@BJEMFEFP@TwoHandWeaponSocketSlotCountRate@
  00126	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 586  : 	this->m_SocketType2Rate[2] = GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate3",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00136	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0013b	89 83 08 05 00
	00		 mov	 DWORD PTR [ebx+1288], eax
  00141	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00146	50		 push	 eax
  00147	6a 00		 push	 0
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FHGFBO@TwoHandWeaponSocketSlotCountRate@
  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 587  : 	this->m_SocketType2Rate[3] = GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate4",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00159	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0015e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00163	89 83 0c 05 00
	00		 mov	 DWORD PTR [ebx+1292], eax
  00169	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0016e	50		 push	 eax
  0016f	6a 00		 push	 0
  00171	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPBGPDNJ@TwoHandWeaponSocketSlotCountRate@
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 588  : 	this->m_SocketType2Rate[4] = GetPrivateProfileInt("GameServerInfo","TwoHandWeaponSocketSlotCountRate5",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00181	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00186	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0018b	89 83 10 05 00
	00		 mov	 DWORD PTR [ebx+1296], eax
  00191	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00196	50		 push	 eax
  00197	6a 00		 push	 0
  00199	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FGANMCJI@TwoHandWeaponSocketSlotCountRate@
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 589  : 
; 590  : 	g_SeedExtractMoney = GetPrivateProfileInt("GameServerInfo","SeedExtractMoney",1000000,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  001ae	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001b3	89 83 14 05 00
	00		 mov	 DWORD PTR [ebx+1300], eax
  001b9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001be	50		 push	 eax
  001bf	68 40 42 0f 00	 push	 1000000			; 000f4240H
  001c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HIAJNHAP@SeedExtractMoney?$AA@
  001c9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 591  : 	g_SphereCompositeMoney = GetPrivateProfileInt("GameServerInfo","SeedSphereCompositeMoney",1000000,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  001d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  001d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  001de	a3 00 00 00 00	 mov	 DWORD PTR ?g_SeedExtractMoney@@3HA, eax ; g_SeedExtractMoney
  001e3	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  001e8	50		 push	 eax
  001e9	68 40 42 0f 00	 push	 1000000			; 000f4240H
  001ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JLALOKNC@SeedSphereCompositeMoney?$AA@
  001f3	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 592  : 	g_SphereSetMoney = GetPrivateProfileInt("GameServerInfo","SeedSphereSetMoney",1000000,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  001fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00203	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00208	a3 00 00 00 00	 mov	 DWORD PTR ?g_SphereCompositeMoney@@3HA, eax ; g_SphereCompositeMoney
  0020d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00212	50		 push	 eax
  00213	68 40 42 0f 00	 push	 1000000			; 000f4240H
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LJKECKDD@SeedSphereSetMoney?$AA@
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16

; 593  : 	g_SphereRemoveMoney = GetPrivateProfileInt("GameServerInfo","SeedSphereRemoveMoney",1000000,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00228	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0022d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00232	a3 00 00 00 00	 mov	 DWORD PTR ?g_SphereSetMoney@@3HA, eax ; g_SphereSetMoney
  00237	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0023c	50		 push	 eax
  0023d	68 40 42 0f 00	 push	 1000000			; 000f4240H
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HKFAGMAG@SeedSphereRemoveMoney?$AA@
  00247	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00252	a3 00 00 00 00	 mov	 DWORD PTR ?g_SphereRemoveMoney@@3HA, eax ; g_SphereRemoveMoney

; 594  : 
; 595  : 	this->m_SocketType1Rnd.AddValue(1,this->m_SocketType1Rate[0]);

  00257	8b ce		 mov	 ecx, esi
  00259	ff b3 f0 04 00
	00		 push	 DWORD PTR [ebx+1264]
  0025f	6a 01		 push	 1
  00261	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 596  : 	this->m_SocketType1Rnd.AddValue(2,this->m_SocketType1Rate[1]);

  00266	ff b3 f4 04 00
	00		 push	 DWORD PTR [ebx+1268]
  0026c	8b ce		 mov	 ecx, esi
  0026e	6a 02		 push	 2
  00270	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 597  : 	this->m_SocketType1Rnd.AddValue(3,this->m_SocketType1Rate[2]);

  00275	ff b3 f8 04 00
	00		 push	 DWORD PTR [ebx+1272]
  0027b	8b ce		 mov	 ecx, esi
  0027d	6a 03		 push	 3
  0027f	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 598  : 	this->m_SocketType1Rnd.AddValue(4,this->m_SocketType1Rate[3]);

  00284	ff b3 fc 04 00
	00		 push	 DWORD PTR [ebx+1276]
  0028a	8b ce		 mov	 ecx, esi
  0028c	6a 04		 push	 4
  0028e	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 599  : 	this->m_SocketType1Rnd.AddValue(5,this->m_SocketType1Rate[4]);

  00293	ff b3 00 05 00
	00		 push	 DWORD PTR [ebx+1280]
  00299	8b ce		 mov	 ecx, esi
  0029b	6a 05		 push	 5
  0029d	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 600  : 
; 601  : 
; 602  : 	this->m_SocketType2Rnd.AddValue(1,this->m_SocketType2Rate[0]);

  002a2	ff b3 04 05 00
	00		 push	 DWORD PTR [ebx+1284]
  002a8	8b cf		 mov	 ecx, edi
  002aa	6a 01		 push	 1
  002ac	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 603  : 	this->m_SocketType2Rnd.AddValue(2,this->m_SocketType2Rate[1]);

  002b1	ff b3 08 05 00
	00		 push	 DWORD PTR [ebx+1288]
  002b7	6a 02		 push	 2
  002b9	8b cf		 mov	 ecx, edi
  002bb	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 604  : 	this->m_SocketType2Rnd.AddValue(3,this->m_SocketType2Rate[2]);

  002c0	ff b3 0c 05 00
	00		 push	 DWORD PTR [ebx+1292]
  002c6	8b cf		 mov	 ecx, edi
  002c8	6a 03		 push	 3
  002ca	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 605  : 	this->m_SocketType2Rnd.AddValue(4,this->m_SocketType2Rate[3]);

  002cf	ff b3 10 05 00
	00		 push	 DWORD PTR [ebx+1296]
  002d5	8b cf		 mov	 ecx, edi
  002d7	6a 04		 push	 4
  002d9	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 606  : 	this->m_SocketType2Rnd.AddValue(5,this->m_SocketType2Rate[4]);

  002de	ff b3 14 05 00
	00		 push	 DWORD PTR [ebx+1300]
  002e4	8b cf		 mov	 ecx, edi
  002e6	6a 05		 push	 5
  002e8	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 607  : 
; 608  : 	this->m_bSphereDrop = GetPrivateProfileInt("GameServerInfo","SphereDropOn",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  002ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  002f2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  002f7	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  002fc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetPrivateProfileIntA@16
  00302	50		 push	 eax
  00303	6a 00		 push	 0
  00305	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PNENKPIH@SphereDropOn?$AA@
  0030a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0030f	ff d6		 call	 esi

; 609  : 
; 610  : 	this->m_SphereDropRate[0] = GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv1",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00311	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00316	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0031b	89 83 18 05 00
	00		 mov	 DWORD PTR [ebx+1304], eax
  00321	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00326	50		 push	 eax
  00327	6a 00		 push	 0
  00329	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMLBDNNA@SphereDropRate_Lv1?$AA@
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00333	ff d6		 call	 esi

; 611  : 	this->m_SphereDropRate[1] = GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv2",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00335	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0033a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0033f	89 83 1c 05 00
	00		 mov	 DWORD PTR [ebx+1308], eax
  00345	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0034a	50		 push	 eax
  0034b	6a 00		 push	 0
  0034d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DHJMGOBD@SphereDropRate_Lv2?$AA@
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00357	ff d6		 call	 esi

; 612  : 	this->m_SphereDropRate[2] = GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv3",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0035e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00363	89 83 20 05 00
	00		 mov	 DWORD PTR [ebx+1312], eax
  00369	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0036e	50		 push	 eax
  0036f	6a 00		 push	 0
  00371	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@COIHFPFC@SphereDropRate_Lv3?$AA@
  00376	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0037b	ff d6		 call	 esi

; 613  : 	this->m_SphereDropRate[3] = GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv4",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  0037d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00382	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00387	89 83 24 05 00
	00		 mov	 DWORD PTR [ebx+1316], eax
  0038d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00392	50		 push	 eax
  00393	6a 00		 push	 0
  00395	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GBMGMJJF@SphereDropRate_Lv4?$AA@
  0039a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0039f	ff d6		 call	 esi

; 614  : 	this->m_SphereDropRate[4] = GetPrivateProfileInt("GameServerInfo","SphereDropRate_Lv5",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  003a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  003a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  003ab	89 83 28 05 00
	00		 mov	 DWORD PTR [ebx+1320], eax
  003b1	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  003b6	50		 push	 eax
  003b7	6a 00		 push	 0
  003b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HINNPINE@SphereDropRate_Lv5?$AA@
  003be	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003c3	ff d6		 call	 esi

; 615  : 
; 616  : 	this->m_SphereDropLevel[0] = GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv1",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  003c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  003ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  003cf	89 83 2c 05 00
	00		 mov	 DWORD PTR [ebx+1324], eax
  003d5	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  003da	50		 push	 eax
  003db	6a 00		 push	 0
  003dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CJNBJIKA@SphereDropLevel_Lv1?$AA@
  003e2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  003e7	ff d6		 call	 esi

; 617  : 	this->m_SphereDropLevel[1] = GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv2",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  003e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  003ee	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  003f3	89 83 30 05 00
	00		 mov	 DWORD PTR [ebx+1328], eax
  003f9	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  003fe	50		 push	 eax
  003ff	6a 00		 push	 0
  00401	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CPMMLGD@SphereDropLevel_Lv2?$AA@
  00406	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0040b	ff d6		 call	 esi

; 618  : 	this->m_SphereDropLevel[2] = GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv3",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  0040d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00412	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00417	89 83 34 05 00
	00		 mov	 DWORD PTR [ebx+1332], eax
  0041d	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00422	50		 push	 eax
  00423	6a 00		 push	 0
  00425	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BLOHPKCC@SphereDropLevel_Lv3?$AA@
  0042a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0042f	ff d6		 call	 esi

; 619  : 	this->m_SphereDropLevel[3] = GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv4",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00431	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  00436	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0043b	89 83 38 05 00
	00		 mov	 DWORD PTR [ebx+1336], eax
  00441	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00446	50		 push	 eax
  00447	6a 00		 push	 0
  00449	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FEKGGMOF@SphereDropLevel_Lv4?$AA@
  0044e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00453	ff d6		 call	 esi

; 620  : 	this->m_SphereDropLevel[4] = GetPrivateProfileInt("GameServerInfo","SphereDropLevel_Lv5",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00455	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0045a	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  0045f	89 83 3c 05 00
	00		 mov	 DWORD PTR [ebx+1340], eax
  00465	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0046a	50		 push	 eax
  0046b	6a 00		 push	 0
  0046d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@ENLNFNKE@SphereDropLevel_Lv5?$AA@
  00472	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00477	ff d6		 call	 esi

; 621  : 
; 622  : 	g_SocketRecipe_DropLevel = GetPrivateProfileInt("GameServerInfo","SocketRecipe_DropLevel",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  00479	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  0047e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00483	89 83 40 05 00
	00		 mov	 DWORD PTR [ebx+1344], eax
  00489	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0048e	50		 push	 eax
  0048f	6a 00		 push	 0
  00491	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@PCJJOCDE@SocketRecipe_DropLevel?$AA@
  00496	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  0049b	ff d6		 call	 esi

; 623  : 	g_SocketRecipe_DropRate = GetPrivateProfileInt("GameServerInfo","SocketRecipe_DropRate",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  004a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  004a7	a3 00 00 00 00	 mov	 DWORD PTR ?g_SocketRecipe_DropLevel@@3HA, eax ; g_SocketRecipe_DropLevel
  004ac	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  004b1	50		 push	 eax
  004b2	6a 00		 push	 0
  004b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OMNADNPK@SocketRecipe_DropRate?$AA@
  004b9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  004be	ff d6		 call	 esi

; 624  : 	g_SocketMaterial_Lv1 = GetPrivateProfileInt("GameServerInfo","SocketMaterial_DropRate_Lv1",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  004c0	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  004c5	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  004ca	a3 00 00 00 00	 mov	 DWORD PTR ?g_SocketRecipe_DropRate@@3HA, eax ; g_SocketRecipe_DropRate
  004cf	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  004d4	50		 push	 eax
  004d5	6a 00		 push	 0
  004d7	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MKEOGCLH@SocketMaterial_DropRate_Lv1?$AA@
  004dc	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  004e1	ff d6		 call	 esi

; 625  : 	g_SocketMaterial_Lv2 = GetPrivateProfileInt("GameServerInfo","SocketMaterial_DropRate_Lv2",0,gDirPath.GetNewPath(FILE_SERVER_COMMON));

  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@COIIOJMI@CommonServer?4cfg?$AA@
  004e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  004ed	a3 00 00 00 00	 mov	 DWORD PTR ?g_SocketMaterial_Lv1@@3HA, eax ; g_SocketMaterial_Lv1
  004f2	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  004f7	50		 push	 eax
  004f8	6a 00		 push	 0
  004fa	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OBGDDBHE@SocketMaterial_DropRate_Lv2?$AA@
  004ff	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EMJDPFDH@GameServerInfo?$AA@
  00504	ff d6		 call	 esi
  00506	5f		 pop	 edi
  00507	5e		 pop	 esi
  00508	a3 00 00 00 00	 mov	 DWORD PTR ?g_SocketMaterial_Lv2@@3HA, eax ; g_SocketMaterial_Lv2
  0050d	5b		 pop	 ebx

; 626  : }

  0050e	c3		 ret	 0
?LoadOptions@CSocketItems@@QAEXXZ ENDP			; CSocketItems::LoadOptions
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?LoadData@CSocketItems@@QAEEPAD@Z
_TEXT	SEGMENT
tv906 = -108						; size = 4
tv904 = -104						; size = 4
tv902 = -100						; size = 4
tv900 = -96						; size = 4
_btOption$1 = -92					; size = 1
_btGroup$2 = -88					; size = 1
_btIndex$3 = -84					; size = 1
_btIncType$4 = -80					; size = 1
_lpInfo$5 = -76						; size = 4
tv954 = -72						; size = 4
tv952 = -68						; size = 4
tv892 = -64						; size = 4
tv863 = -64						; size = 4
tv895 = -60						; size = 4
tv880 = -60						; size = 4
_count1$1$ = -56					; size = 4
tv876 = -52						; size = 4
_count3$1$ = -52					; size = 4
_this$GSCopy$1$ = -48					; size = 4
_Index$1$ = -44						; size = 4
tv953 = -40						; size = 4
tv878 = -40						; size = 4
_count4$1$ = -36					; size = 4
_tmpBonus$6 = -32					; size = 20
_btIncValue$7 = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?LoadData@CSocketItems@@QAEEPAD@Z PROC			; CSocketItems::LoadData, COMDAT
; _this$ = ecx

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b c1		 mov	 eax, ecx
  00012	56		 push	 esi
  00013	8b 75 08	 mov	 esi, DWORD PTR _szFileName$[ebp]
  00016	89 45 d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 310  : 	this->Init();

  00019	e8 00 00 00 00	 call	 ?Init@CSocketItems@@QAEXXZ ; CSocketItems::Init

; 311  : 
; 312  : 	SMDFile = fopen(szFileName,"r");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00023	56		 push	 esi
  00024	e8 00 00 00 00	 call	 _fopen
  00029	83 c4 08	 add	 esp, 8
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 313  : 
; 314  : 	if( SMDFile == NULL )

  00031	85 c0		 test	 eax, eax
  00033	75 21		 jne	 SHORT $LN13@LoadData

; 315  : 	{
; 316  : 		MsgBox("[SocketOption] SocketOption Script file Load failed. (%s)",szFileName);

  00035	56		 push	 esi
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@NFCIJECI@?$FLSocketOption?$FN?5SocketOption?5Scri@
  0003b	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00040	83 c4 08	 add	 esp, 8

; 317  : 		return false;

  00043	32 c0		 xor	 al, al
  00045	5e		 pop	 esi

; 570  : return true;
; 571  : }

  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
$LN13@LoadData:
  00056	53		 push	 ebx
  00057	57		 push	 edi

; 318  : 	}
; 319  : 
; 320  : 	int Token;
; 321  : 	int Index = 0;
; 322  : 	int count1 = 0;
; 323  : 	int count2 = 0;
; 324  : 	int count3 = 0;

  00058	33 ff		 xor	 edi, edi
  0005a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _count1$1$[ebp], 0

; 325  : 	int count4 = 0;

  00061	33 db		 xor	 ebx, ebx
  00063	89 7d cc	 mov	 DWORD PTR _count3$1$[ebp], edi
  00066	89 5d dc	 mov	 DWORD PTR _count4$1$[ebp], ebx

; 326  : 
; 327  : 	while( TRUE )
; 328  : 	{
; 329  : 		Token = GetToken();

  00069	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  0006e	8b f0		 mov	 esi, eax

; 330  : 
; 331  : 		if( Token == END )

  00070	83 fe 02	 cmp	 esi, 2
  00073	0f 84 2a 05 00
	00		 je	 $LN88@LoadData
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@LoadData:

; 332  : 			break;
; 333  : 
; 334  : 		if( strcmp("end",TokenString) == NULL )

  00080	ba 00 00 00 00	 mov	 edx, OFFSET ?TokenString@@3PADA
  00085	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL67@LoadData:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	3a 02		 cmp	 al, BYTE PTR [edx]
  00094	75 1a		 jne	 SHORT $LN68@LoadData
  00096	84 c0		 test	 al, al
  00098	74 12		 je	 SHORT $LN69@LoadData
  0009a	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  0009d	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  000a0	75 0e		 jne	 SHORT $LN68@LoadData
  000a2	83 c1 02	 add	 ecx, 2
  000a5	83 c2 02	 add	 edx, 2
  000a8	84 c0		 test	 al, al
  000aa	75 e4		 jne	 SHORT $LL67@LoadData
$LN69@LoadData:
  000ac	33 c0		 xor	 eax, eax
  000ae	eb 05		 jmp	 SHORT $LN70@LoadData
$LN68@LoadData:
  000b0	1b c0		 sbb	 eax, eax
  000b2	83 c8 01	 or	 eax, 1
$LN70@LoadData:
  000b5	85 c0		 test	 eax, eax
  000b7	0f 84 e6 04 00
	00		 je	 $LN88@LoadData

; 335  : 			break;
; 336  : 
; 337  : 		if( Token == NUMBER )

  000bd	83 fe 01	 cmp	 esi, 1
  000c0	0f 85 cd 04 00
	00		 jne	 $LN45@LoadData

; 338  : 		{
; 339  : 			Index = (int)TokenNumber;

  000c6	8b 55 d0	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  000c9	8b c3		 mov	 eax, ebx
  000cb	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  000d3	c1 e0 04	 shl	 eax, 4
  000d6	05 a1 04 00 00	 add	 eax, 1185		; 000004a1H
  000db	03 c2		 add	 eax, edx
  000dd	89 45 b8	 mov	 DWORD PTR tv954[ebp], eax
  000e0	8d 04 bd 0a 01
	00 00		 lea	 eax, DWORD PTR [edi*4+266]
  000e7	03 c7		 add	 eax, edi
  000e9	8d 34 82	 lea	 esi, DWORD PTR [edx+eax*4]
  000ec	89 4d d4	 mov	 DWORD PTR _Index$1$[ebp], ecx
  000ef	8b 45 c8	 mov	 eax, DWORD PTR _count1$1$[ebp]
  000f2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000f5	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000f8	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  000fb	89 45 bc	 mov	 DWORD PTR tv952[ebp], eax
$LN89@LoadData:
  000fe	89 75 d8	 mov	 DWORD PTR tv953[ebp], esi
$LL4@LoadData:

; 340  : 
; 341  : 			while( TRUE )
; 342  : 			{
; 343  : 				if( Index == 0 )

  00101	85 c9		 test	 ecx, ecx
  00103	0f 85 33 01 00
	00		 jne	 $LN17@LoadData

; 344  : 				{
; 345  : 					BYTE btOption = 0;
; 346  : 					BYTE btGroup = 0;
; 347  : 					BYTE btIndex = 0;
; 348  : 					BYTE btIncType = 0;
; 349  : 					BYTE btIncValue[MAX_SPHERE_LEVEL] = {0};

  00109	88 4d f4	 mov	 BYTE PTR _btIncValue$7[ebp], cl
  0010c	89 4d f5	 mov	 DWORD PTR _btIncValue$7[ebp+1], ecx

; 350  : 					int OptionRate = 0;
; 351  : 					int SeedItem = 0;
; 352  : 
; 353  : 					Token = GetToken();

  0010f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 354  : 
; 355  : 					if( strcmp("end",TokenString) == NULL )

  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00119	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  0011e	66 90		 npad	 2
$LL71@LoadData:
  00120	8a 10		 mov	 dl, BYTE PTR [eax]
  00122	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00124	75 1a		 jne	 SHORT $LN72@LoadData
  00126	84 d2		 test	 dl, dl
  00128	74 12		 je	 SHORT $LN73@LoadData
  0012a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0012d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00130	75 0e		 jne	 SHORT $LN72@LoadData
  00132	83 c0 02	 add	 eax, 2
  00135	83 c1 02	 add	 ecx, 2
  00138	84 d2		 test	 dl, dl
  0013a	75 e4		 jne	 SHORT $LL71@LoadData
$LN73@LoadData:
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 05		 jmp	 SHORT $LN74@LoadData
$LN72@LoadData:
  00140	1b c0		 sbb	 eax, eax
  00142	83 c8 01	 or	 eax, 1
$LN74@LoadData:
  00145	85 c0		 test	 eax, eax
  00147	0f 84 46 04 00
	00		 je	 $LN45@LoadData

; 356  : 						break;
; 357  : 
; 358  : 					btOption = (BYTE)TokenNumber;

  0014d	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
  00155	88 5d a4	 mov	 BYTE PTR _btOption$1[ebp], bl

; 359  : 
; 360  : 					Token = GetToken();

  00158	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 361  : 					btGroup = (BYTE)TokenNumber;

  0015d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00165	88 45 a8	 mov	 BYTE PTR _btGroup$2[ebp], al

; 362  : 
; 363  : 					Token = GetToken();

  00168	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 364  : 					btIndex = (BYTE)TokenNumber;

  0016d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00175	88 45 ac	 mov	 BYTE PTR _btIndex$3[ebp], al

; 365  : 
; 366  : 					Token = GetToken();

  00178	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 367  : 
; 368  : 					Token = GetToken();

  0017d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 369  : 					btIncType = (BYTE)TokenNumber;

  00182	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0018a	88 45 b0	 mov	 BYTE PTR _btIncType$4[ebp], al

; 370  : 
; 371  : 					Token = GetToken();

  0018d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 372  : 					btIncValue[0] = (BYTE)TokenNumber;

  00192	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0019a	88 45 f4	 mov	 BYTE PTR _btIncValue$7[ebp], al

; 373  : 
; 374  : 					Token = GetToken();

  0019d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 375  : 					btIncValue[1] = (BYTE)TokenNumber;

  001a2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001aa	88 45 f5	 mov	 BYTE PTR _btIncValue$7[ebp+1], al

; 376  : 
; 377  : 					Token = GetToken();

  001ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 378  : 					btIncValue[2] = (BYTE)TokenNumber;

  001b2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001ba	88 45 f6	 mov	 BYTE PTR _btIncValue$7[ebp+2], al

; 379  : 
; 380  : 					Token = GetToken();

  001bd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 381  : 					btIncValue[3] = (BYTE)TokenNumber;

  001c2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001ca	88 45 f7	 mov	 BYTE PTR _btIncValue$7[ebp+3], al

; 382  : 
; 383  : 					Token = GetToken();

  001cd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 384  : 					btIncValue[4] = (BYTE)TokenNumber;

  001d2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001da	88 45 f8	 mov	 BYTE PTR _btIncValue$7[ebp+4], al

; 385  : 
; 386  : 					Token = GetToken();

  001dd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 387  : 					OptionRate = (int)TokenNumber;

  001e2	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 388  : 
; 389  : 					this->m_OptionRnd.AddValue(btOption,OptionRate);

  001ea	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  001ed	0f b6 c3	 movzx	 eax, bl
  001f0	8d 89 c0 04 00
	00		 lea	 ecx, DWORD PTR [ecx+1216]
  001f6	56		 push	 esi
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?AddValue@TRandomPoolMgr@@QAE_NHH@Z ; TRandomPoolMgr::AddValue

; 390  : 					this->m_SeedOption[count1].SetOptionData(btOption,btGroup,btIndex,btIncType,&btIncValue[0],OptionRate);

  001fd	8b 5d bc	 mov	 ebx, DWORD PTR tv952[ebp]
  00200	8d 45 f4	 lea	 eax, DWORD PTR _btIncValue$7[ebp]
  00203	56		 push	 esi
  00204	50		 push	 eax
  00205	ff 75 b0	 push	 DWORD PTR _btIncType$4[ebp]
  00208	8b cb		 mov	 ecx, ebx
  0020a	ff 75 ac	 push	 DWORD PTR _btIndex$3[ebp]
  0020d	ff 75 a8	 push	 DWORD PTR _btGroup$2[ebp]
  00210	ff 75 a4	 push	 DWORD PTR _btOption$1[ebp]
  00213	e8 00 00 00 00	 call	 ?SetOptionData@_SOCKET_SEED_DATA@@QAEXEEEEPAEH@Z ; _SOCKET_SEED_DATA::SetOptionData

; 391  : 					count1++;

  00218	8b 45 c8	 mov	 eax, DWORD PTR _count1$1$[ebp]
  0021b	83 c3 14	 add	 ebx, 20			; 00000014H
  0021e	40		 inc	 eax
  0021f	89 5d bc	 mov	 DWORD PTR tv952[ebp], ebx
  00222	89 45 c8	 mov	 DWORD PTR _count1$1$[ebp], eax

; 392  : 
; 393  : 					if( count1 > MAX_SEED_OPTION )

  00225	83 f8 32	 cmp	 eax, 50			; 00000032H
  00228	0f 8f 54 03 00
	00		 jg	 $LN44@LoadData

; 396  : 						break;
; 397  : 					}
; 398  : 				}

  0022e	8b 4d d4	 mov	 ecx, DWORD PTR _Index$1$[ebp]
  00231	8b 75 d8	 mov	 esi, DWORD PTR tv953[ebp]
  00234	8b 5d dc	 mov	 ebx, DWORD PTR _count4$1$[ebp]
  00237	e9 c5 fe ff ff	 jmp	 $LL4@LoadData
$LN17@LoadData:

; 399  : 				else if( Index == 1 )

  0023c	83 f9 01	 cmp	 ecx, 1
  0023f	0f 85 83 01 00
	00		 jne	 $LN21@LoadData

; 400  : 				{
; 401  : 					_SOCKET_BONUS_DATA tmpBonus;
; 402  : 
; 403  : 					Token = GetToken();

  00245	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 404  : 
; 405  : 					if( strcmp("end",TokenString) == NULL )

  0024a	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0024f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL75@LoadData:
  00254	8a 10		 mov	 dl, BYTE PTR [eax]
  00256	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00258	75 1a		 jne	 SHORT $LN76@LoadData
  0025a	84 d2		 test	 dl, dl
  0025c	74 12		 je	 SHORT $LN77@LoadData
  0025e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00261	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00264	75 0e		 jne	 SHORT $LN76@LoadData
  00266	83 c0 02	 add	 eax, 2
  00269	83 c1 02	 add	 ecx, 2
  0026c	84 d2		 test	 dl, dl
  0026e	75 e4		 jne	 SHORT $LL75@LoadData
$LN77@LoadData:
  00270	33 c0		 xor	 eax, eax
  00272	eb 05		 jmp	 SHORT $LN78@LoadData
$LN76@LoadData:
  00274	1b c0		 sbb	 eax, eax
  00276	83 c8 01	 or	 eax, 1
$LN78@LoadData:
  00279	85 c0		 test	 eax, eax
  0027b	0f 84 12 03 00
	00		 je	 $LN45@LoadData

; 406  : 						break;
; 407  : 
; 408  : 					memset(&tmpBonus,0,sizeof(tmpBonus));
; 409  : 
; 410  : 					tmpBonus.btIndex = (BYTE)TokenNumber;

  00281	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00289	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _tmpBonus$6[ebp+16], 0
  00290	0f 57 c0	 xorps	 xmm0, xmm0
  00293	0f 11 45 e0	 movups	 XMMWORD PTR _tmpBonus$6[ebp], xmm0
  00297	89 45 c0	 mov	 DWORD PTR tv863[ebp], eax
  0029a	88 45 e0	 mov	 BYTE PTR _tmpBonus$6[ebp], al

; 411  : 
; 412  : 					Token = GetToken();

  0029d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 413  : 					tmpBonus.btIndexMin = (BYTE)TokenNumber;

  002a2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002aa	88 45 e2	 mov	 BYTE PTR _tmpBonus$6[ebp+2], al

; 414  : 
; 415  : 					Token = GetToken();

  002ad	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 416  : 					tmpBonus.btIndexMax = (BYTE)TokenNumber;

  002b2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002ba	88 45 e3	 mov	 BYTE PTR _tmpBonus$6[ebp+3], al

; 417  : 
; 418  : 					Token = GetToken();

  002bd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 419  : 
; 420  : 					Token = GetToken();

  002c2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 421  : 					tmpBonus.btOptionType = (BYTE)TokenNumber;

  002c7	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002cf	88 45 e4	 mov	 BYTE PTR _tmpBonus$6[ebp+4], al

; 422  : 
; 423  : 					Token = GetToken();

  002d2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 424  : 					tmpBonus.btOptionValue = (BYTE)TokenNumber;

  002d7	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002df	88 45 e5	 mov	 BYTE PTR _tmpBonus$6[ebp+5], al

; 425  : 
; 426  : 					Token = GetToken();

  002e2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 427  : 					tmpBonus.OptionRate = (int)TokenNumber;

  002e7	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002ef	89 45 e8	 mov	 DWORD PTR _tmpBonus$6[ebp+8], eax

; 428  : 
; 429  : 					Token = GetToken();

  002f2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 430  : 					tmpBonus.btValue[0] = (BYTE)TokenNumber;

  002f7	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA
  002ff	88 5d ec	 mov	 BYTE PTR _tmpBonus$6[ebp+12], bl

; 431  : 
; 432  : 					Token = GetToken();

  00302	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 433  : 					tmpBonus.btValue[1] = (BYTE)TokenNumber;

  00307	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0030f	89 45 cc	 mov	 DWORD PTR tv876[ebp], eax
  00312	88 45 ed	 mov	 BYTE PTR _tmpBonus$6[ebp+13], al

; 434  : 
; 435  : 					Token = GetToken();

  00315	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 436  : 					tmpBonus.btValue[2] = (BYTE)TokenNumber;

  0031a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00322	89 45 d8	 mov	 DWORD PTR tv878[ebp], eax
  00325	88 45 ee	 mov	 BYTE PTR _tmpBonus$6[ebp+14], al

; 437  : 
; 438  : 					Token = GetToken();

  00328	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 439  : 					tmpBonus.btValue[3] = (BYTE)TokenNumber;

  0032d	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00335	89 45 c4	 mov	 DWORD PTR tv880[ebp], eax
  00338	88 45 ef	 mov	 BYTE PTR _tmpBonus$6[ebp+15], al

; 440  : 
; 441  : 					Token = GetToken();

  0033b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 447  : 						{
; 448  : 							tmpBonus.btCount++;

  00340	8a 45 f1	 mov	 al, BYTE PTR _tmpBonus$6[ebp+17]
  00343	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  0034b	88 4d f0	 mov	 BYTE PTR _tmpBonus$6[ebp+16], cl
  0034e	84 db		 test	 bl, bl
  00350	74 05		 je	 SHORT $LN6@LoadData
  00352	fe c0		 inc	 al
  00354	88 45 f1	 mov	 BYTE PTR _tmpBonus$6[ebp+17], al
$LN6@LoadData:

; 442  : 					tmpBonus.btValue[4] = (BYTE)TokenNumber;
; 443  : 
; 444  : 					for(int n = 0; n < MAX_SPHERE_LEVEL; n++)
; 445  : 					{
; 446  : 						if( tmpBonus.btValue[n] != NULL )

  00357	80 7d cc 00	 cmp	 BYTE PTR tv876[ebp], 0
  0035b	74 05		 je	 SHORT $LN58@LoadData

; 447  : 						{
; 448  : 							tmpBonus.btCount++;

  0035d	fe c0		 inc	 al
  0035f	88 45 f1	 mov	 BYTE PTR _tmpBonus$6[ebp+17], al
$LN58@LoadData:

; 442  : 					tmpBonus.btValue[4] = (BYTE)TokenNumber;
; 443  : 
; 444  : 					for(int n = 0; n < MAX_SPHERE_LEVEL; n++)
; 445  : 					{
; 446  : 						if( tmpBonus.btValue[n] != NULL )

  00362	80 7d d8 00	 cmp	 BYTE PTR tv878[ebp], 0
  00366	74 05		 je	 SHORT $LN60@LoadData

; 447  : 						{
; 448  : 							tmpBonus.btCount++;

  00368	fe c0		 inc	 al
  0036a	88 45 f1	 mov	 BYTE PTR _tmpBonus$6[ebp+17], al
$LN60@LoadData:

; 442  : 					tmpBonus.btValue[4] = (BYTE)TokenNumber;
; 443  : 
; 444  : 					for(int n = 0; n < MAX_SPHERE_LEVEL; n++)
; 445  : 					{
; 446  : 						if( tmpBonus.btValue[n] != NULL )

  0036d	80 7d c4 00	 cmp	 BYTE PTR tv880[ebp], 0
  00371	74 05		 je	 SHORT $LN62@LoadData

; 447  : 						{
; 448  : 							tmpBonus.btCount++;

  00373	fe c0		 inc	 al
  00375	88 45 f1	 mov	 BYTE PTR _tmpBonus$6[ebp+17], al
$LN62@LoadData:

; 442  : 					tmpBonus.btValue[4] = (BYTE)TokenNumber;
; 443  : 
; 444  : 					for(int n = 0; n < MAX_SPHERE_LEVEL; n++)
; 445  : 					{
; 446  : 						if( tmpBonus.btValue[n] != NULL )

  00378	84 c9		 test	 cl, cl
  0037a	74 05		 je	 SHORT $LN64@LoadData

; 447  : 						{
; 448  : 							tmpBonus.btCount++;

  0037c	fe c0		 inc	 al
  0037e	88 45 f1	 mov	 BYTE PTR _tmpBonus$6[ebp+17], al
$LN64@LoadData:

; 449  : 						}
; 450  : 					}
; 451  : 
; 452  : 					switch( tmpBonus.btIndex )

  00381	8b 45 c0	 mov	 eax, DWORD PTR tv863[ebp]
  00384	0f b6 c0	 movzx	 eax, al
  00387	83 f8 05	 cmp	 eax, 5
  0038a	77 1d		 ja	 SHORT $LN9@LoadData
  0038c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN91@LoadData[eax*4]
$LN25@LoadData:

; 453  : 					{
; 454  : 					case 0:
; 455  : 						tmpBonus.btEffectType = 0;

  00393	c6 45 e1 00	 mov	 BYTE PTR _tmpBonus$6[ebp+1], 0

; 456  : 						break;

  00397	eb 10		 jmp	 SHORT $LN9@LoadData
$LN26@LoadData:

; 457  : 					case 1:
; 458  : 						tmpBonus.btEffectType = 18;

  00399	c6 45 e1 12	 mov	 BYTE PTR _tmpBonus$6[ebp+1], 18 ; 00000012H

; 459  : 						break;

  0039d	eb 0a		 jmp	 SHORT $LN9@LoadData
$LN29@LoadData:

; 460  : 					case 2:
; 461  : 						tmpBonus.btEffectType = 0;
; 462  : 						break;
; 463  : 					case 3:
; 464  : 						tmpBonus.btEffectType = 18;
; 465  : 						break;
; 466  : 					case 4:
; 467  : 						tmpBonus.btEffectType = 11;

  0039f	c6 45 e1 0b	 mov	 BYTE PTR _tmpBonus$6[ebp+1], 11 ; 0000000bH

; 468  : 						break;

  003a3	eb 04		 jmp	 SHORT $LN9@LoadData
$LN30@LoadData:

; 469  : 					case 5:
; 470  : 						tmpBonus.btEffectType = 22;

  003a5	c6 45 e1 16	 mov	 BYTE PTR _tmpBonus$6[ebp+1], 22 ; 00000016H
$LN9@LoadData:

; 471  : 						break;
; 472  : 					}
; 473  : 
; 474  : 					memcpy(&this->m_BonusOption[count3],&tmpBonus,sizeof(tmpBonus));

  003a9	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _tmpBonus$6[ebp]
  003ad	8b 45 f0	 mov	 eax, DWORD PTR _tmpBonus$6[ebp+16]

; 475  : 					count3++;

  003b0	47		 inc	 edi
  003b1	8b 4d d4	 mov	 ecx, DWORD PTR _Index$1$[ebp]
  003b4	8b 5d dc	 mov	 ebx, DWORD PTR _count4$1$[ebp]
  003b7	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  003ba	89 46 10	 mov	 DWORD PTR [esi+16], eax
  003bd	83 c6 14	 add	 esi, 20			; 00000014H
  003c0	89 7d cc	 mov	 DWORD PTR _count3$1$[ebp], edi
  003c3	e9 36 fd ff ff	 jmp	 $LN89@LoadData
$LN21@LoadData:

; 476  : 				}
; 477  : 				else if( Index == 2 )

  003c8	83 f9 02	 cmp	 ecx, 2
  003cb	0f 85 39 01 00
	00		 jne	 $LN31@LoadData

; 478  : 				{
; 479  : 					int iIndex = 0;
; 480  : 					BYTE btEffect = 0;
; 481  : 					BYTE btIncType = 0;
; 482  : 					BYTE btIncValue = 0;
; 483  : 					int OptionRate = 0;
; 484  : 					BYTE SeedCount[MAX_SEED_TYPE] = {0};
; 485  : 
; 486  : 					Token = GetToken();

  003d1	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 487  : 
; 488  : 					if( strcmp("end",TokenString) == NULL )

  003d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  003db	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL79@LoadData:
  003e0	8a 10		 mov	 dl, BYTE PTR [eax]
  003e2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  003e4	75 1a		 jne	 SHORT $LN80@LoadData
  003e6	84 d2		 test	 dl, dl
  003e8	74 12		 je	 SHORT $LN81@LoadData
  003ea	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  003ed	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  003f0	75 0e		 jne	 SHORT $LN80@LoadData
  003f2	83 c0 02	 add	 eax, 2
  003f5	83 c1 02	 add	 ecx, 2
  003f8	84 d2		 test	 dl, dl
  003fa	75 e4		 jne	 SHORT $LL79@LoadData
$LN81@LoadData:
  003fc	33 c0		 xor	 eax, eax
  003fe	eb 05		 jmp	 SHORT $LN82@LoadData
$LN80@LoadData:
  00400	1b c0		 sbb	 eax, eax
  00402	83 c8 01	 or	 eax, 1
$LN82@LoadData:
  00405	85 c0		 test	 eax, eax
  00407	0f 84 86 01 00
	00		 je	 $LN45@LoadData

; 489  : 						break;
; 490  : 
; 491  : 					iIndex = (int)TokenNumber;

  0040d	f3 0f 2c 3d 00
	00 00 00	 cvttss2si edi, DWORD PTR ?TokenNumber@@3MA

; 492  : 
; 493  : 					Token = GetToken();

  00415	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 494  : 					btEffect = (BYTE)TokenNumber;
; 495  : 
; 496  : 					Token = GetToken();

  0041a	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 497  : 
; 498  : 					Token = GetToken();

  0041f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 499  : 					btIncType = (BYTE)TokenNumber;

  00424	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0042c	89 45 c0	 mov	 DWORD PTR tv892[ebp], eax

; 500  : 
; 501  : 					Token = GetToken();

  0042f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 502  : 					btIncValue = (BYTE)TokenNumber;

  00434	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0043c	89 45 c4	 mov	 DWORD PTR tv895[ebp], eax

; 503  : 
; 504  : 					Token = GetToken();

  0043f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 505  : 					OptionRate = (int)TokenNumber;

  00444	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 506  : 
; 507  : 					Token = GetToken();

  0044c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 508  : 					SeedCount[0] = (BYTE)TokenNumber;

  00451	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00459	89 45 a0	 mov	 DWORD PTR tv900[ebp], eax

; 509  : 
; 510  : 					Token = GetToken();

  0045c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 511  : 					SeedCount[1] = (BYTE)TokenNumber;

  00461	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00469	89 45 9c	 mov	 DWORD PTR tv902[ebp], eax

; 512  : 
; 513  : 					Token = GetToken();

  0046c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 514  : 					SeedCount[2] = (BYTE)TokenNumber;

  00471	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00479	89 45 98	 mov	 DWORD PTR tv904[ebp], eax

; 515  : 
; 516  : 					Token = GetToken();

  0047c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 517  : 					SeedCount[3] = (BYTE)TokenNumber;

  00481	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00489	89 45 94	 mov	 DWORD PTR tv906[ebp], eax

; 518  : 
; 519  : 					Token = GetToken();

  0048c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 520  : 					SeedCount[4] = (BYTE)TokenNumber;

  00491	f3 0f 2c 1d 00
	00 00 00	 cvttss2si ebx, DWORD PTR ?TokenNumber@@3MA

; 521  : 
; 522  : 					Token = GetToken();

  00499	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 523  : 					SeedCount[5] = (BYTE)TokenNumber;
; 524  : 
; 525  : 					this->m_SetOption[count4].btIndex = count4;

  0049e	8b 55 b8	 mov	 edx, DWORD PTR tv954[ebp]
  004a1	8b 4d dc	 mov	 ecx, DWORD PTR _count4$1$[ebp]
  004a4	88 4a ff	 mov	 BYTE PTR [edx-1], cl

; 526  : 					this->m_SetOption[count4].btIncType = btIncType;

  004a7	8b 4d c0	 mov	 ecx, DWORD PTR tv892[ebp]
  004aa	88 0a		 mov	 BYTE PTR [edx], cl

; 527  : 					this->m_SetOption[count4].btIncValue = btIncValue;

  004ac	8b 4d c4	 mov	 ecx, DWORD PTR tv895[ebp]
  004af	88 4a 01	 mov	 BYTE PTR [edx+1], cl

; 528  : 					this->m_SetOption[count4].OptionRate = OptionRate;
; 529  : 					this->m_SetOption[count4].SeedCount[0] = SeedCount[0];

  004b2	8b 4d a0	 mov	 ecx, DWORD PTR tv900[ebp]
  004b5	89 72 03	 mov	 DWORD PTR [edx+3], esi
  004b8	88 4a 07	 mov	 BYTE PTR [edx+7], cl

; 530  : 					this->m_SetOption[count4].SeedCount[1] = SeedCount[1];

  004bb	8b 4d 9c	 mov	 ecx, DWORD PTR tv902[ebp]
  004be	88 4a 08	 mov	 BYTE PTR [edx+8], cl

; 531  : 					this->m_SetOption[count4].SeedCount[2] = SeedCount[2];

  004c1	8b 4d 98	 mov	 ecx, DWORD PTR tv904[ebp]
  004c4	88 4a 09	 mov	 BYTE PTR [edx+9], cl

; 532  : 					this->m_SetOption[count4].SeedCount[3] = SeedCount[3];

  004c7	8b 4d 94	 mov	 ecx, DWORD PTR tv906[ebp]
  004ca	88 4a 0a	 mov	 BYTE PTR [edx+10], cl

; 533  : 					this->m_SetOption[count4].SeedCount[4] = SeedCount[4];

  004cd	88 5a 0b	 mov	 BYTE PTR [edx+11], bl
  004d0	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 534  : 					this->m_SetOption[count4].SeedCount[5] = SeedCount[5];

  004d8	88 42 0c	 mov	 BYTE PTR [edx+12], al

; 535  : 
; 536  : 					switch( iIndex )

  004db	83 ef 00	 sub	 edi, 0
  004de	74 0b		 je	 SHORT $LN34@LoadData
  004e0	83 ef 01	 sub	 edi, 1
  004e3	75 0a		 jne	 SHORT $LN11@LoadData

; 540  : 						break;
; 541  : 					case 1:
; 542  : 						this->m_SetOption[count4].btEffect = 45;

  004e5	c6 42 02 2d	 mov	 BYTE PTR [edx+2], 45	; 0000002dH
  004e9	eb 04		 jmp	 SHORT $LN11@LoadData
$LN34@LoadData:

; 537  : 					{
; 538  : 					case 0:
; 539  : 						this->m_SetOption[count4].btEffect = 44;

  004eb	c6 42 02 2c	 mov	 BYTE PTR [edx+2], 44	; 0000002cH
$LN11@LoadData:

; 543  : 						break;
; 544  : 					}
; 545  : 
; 546  : 					count4++;

  004ef	8b 5d dc	 mov	 ebx, DWORD PTR _count4$1$[ebp]
  004f2	8b 4d d4	 mov	 ecx, DWORD PTR _Index$1$[ebp]
  004f5	43		 inc	 ebx
  004f6	8b 75 d8	 mov	 esi, DWORD PTR tv953[ebp]
  004f9	83 c2 10	 add	 edx, 16			; 00000010H
  004fc	8b 7d cc	 mov	 edi, DWORD PTR _count3$1$[ebp]
  004ff	89 5d dc	 mov	 DWORD PTR _count4$1$[ebp], ebx
  00502	89 55 b8	 mov	 DWORD PTR tv954[ebp], edx
  00505	e9 f7 fb ff ff	 jmp	 $LL4@LoadData
$LN31@LoadData:

; 547  : 				}
; 548  : 				else if( Index == 3 )

  0050a	83 f9 03	 cmp	 ecx, 3
  0050d	0f 85 ee fb ff
	ff		 jne	 $LL4@LoadData

; 549  : 				{
; 550  : 					Token = GetToken();

  00513	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 551  : 					// ----
; 552  : 					if( !strcmp("end", TokenString) )

  00518	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0051d	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL83@LoadData:
  00522	8a 10		 mov	 dl, BYTE PTR [eax]
  00524	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00526	75 1a		 jne	 SHORT $LN84@LoadData
  00528	84 d2		 test	 dl, dl
  0052a	74 12		 je	 SHORT $LN85@LoadData
  0052c	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0052f	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00532	75 0e		 jne	 SHORT $LN84@LoadData
  00534	83 c0 02	 add	 eax, 2
  00537	83 c1 02	 add	 ecx, 2
  0053a	84 d2		 test	 dl, dl
  0053c	75 e4		 jne	 SHORT $LL83@LoadData
$LN85@LoadData:
  0053e	33 c0		 xor	 eax, eax
  00540	eb 05		 jmp	 SHORT $LN86@LoadData
$LN84@LoadData:
  00542	1b c0		 sbb	 eax, eax
  00544	83 c8 01	 or	 eax, 1
$LN86@LoadData:
  00547	85 c0		 test	 eax, eax
  00549	74 48		 je	 SHORT $LN45@LoadData

; 553  : 					{
; 554  : 						break;
; 555  : 					}
; 556  : 					// ----
; 557  : 					SocketItemInfo lpInfo;
; 558  : 					lpInfo.ItemType = TokenNumber;

  0054b	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00553	66 89 45 b4	 mov	 WORD PTR _lpInfo$5[ebp], ax

; 559  : 					Token = GetToken();

  00557	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 560  : 					lpInfo.ItemIndex = TokenNumber;

  0055c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 561  : 					m_SocketItemList.push_back(lpInfo);

  00564	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00567	8d 89 44 05 00
	00		 lea	 ecx, DWORD PTR [ecx+1348]
  0056d	66 89 45 b6	 mov	 WORD PTR _lpInfo$5[ebp+2], ax
  00571	8d 45 b4	 lea	 eax, DWORD PTR _lpInfo$5[ebp]
  00574	50		 push	 eax
  00575	e8 00 00 00 00	 call	 ?push_back@?$vector@USocketItemInfo@@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXABUSocketItemInfo@@@Z ; std::vector<SocketItemInfo,std::allocator<SocketItemInfo> >::push_back

; 562  : 				}
; 563  : 			}

  0057a	8b 4d d4	 mov	 ecx, DWORD PTR _Index$1$[ebp]
  0057d	e9 7f fb ff ff	 jmp	 $LL4@LoadData
$LN44@LoadData:

; 394  : 					{
; 395  : 						MsgBox("[ERROR] MAX SeedSphere Option Data Overflow! [%d]",count1);

  00582	50		 push	 eax
  00583	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@KHBMLNBK@?$FLERROR?$FN?5MAX?5SeedSphere?5Option?5Da@
  00588	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0058d	8b 5d dc	 mov	 ebx, DWORD PTR _count4$1$[ebp]
  00590	83 c4 08	 add	 esp, 8
$LN45@LoadData:

; 326  : 
; 327  : 	while( TRUE )
; 328  : 	{
; 329  : 		Token = GetToken();

  00593	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00598	8b f0		 mov	 esi, eax

; 330  : 
; 331  : 		if( Token == END )

  0059a	83 fe 02	 cmp	 esi, 2
  0059d	0f 85 dd fa ff
	ff		 jne	 $LL2@LoadData
$LN88@LoadData:

; 564  : 		}
; 565  : 	}
; 566  : 		
; 567  : 	this->LoadOptions();

  005a3	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  005a6	e8 00 00 00 00	 call	 ?LoadOptions@CSocketItems@@QAEXXZ ; CSocketItems::LoadOptions

; 568  : 
; 569  : 	fclose(SMDFile);

  005ab	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  005b1	e8 00 00 00 00	 call	 _fclose

; 570  : return true;
; 571  : }

  005b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005b9	83 c4 04	 add	 esp, 4
  005bc	33 cd		 xor	 ecx, ebp
  005be	b0 01		 mov	 al, 1
  005c0	5f		 pop	 edi
  005c1	5b		 pop	 ebx
  005c2	5e		 pop	 esi
  005c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005c8	8b e5		 mov	 esp, ebp
  005ca	5d		 pop	 ebp
  005cb	c2 04 00	 ret	 4
  005ce	66 90		 npad	 2
$LN91@LoadData:
  005d0	00 00 00 00	 DD	 $LN25@LoadData
  005d4	00 00 00 00	 DD	 $LN26@LoadData
  005d8	00 00 00 00	 DD	 $LN25@LoadData
  005dc	00 00 00 00	 DD	 $LN26@LoadData
  005e0	00 00 00 00	 DD	 $LN29@LoadData
  005e4	00 00 00 00	 DD	 $LN30@LoadData
?LoadData@CSocketItems@@QAEEPAD@Z ENDP			; CSocketItems::LoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?Init@CSocketItems@@QAEXXZ
_TEXT	SEGMENT
?Init@CSocketItems@@QAEXXZ PROC				; CSocketItems::Init, COMDAT
; _this$ = ecx

; 278  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 279  : 	int i = 0;
; 280  : 
; 281  : 	for( i = 0; i < MAX_SEED_OPTION; i++)

  00005	bb 32 00 00 00	 mov	 ebx, 50			; 00000032H
  0000a	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0000d	0f 1f 00	 npad	 3
$LL4@Init:

; 282  : 	{
; 283  : 		this->m_SeedOption[i].Clear();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?Clear@_SOCKET_SEED_DATA@@QAEXXZ ; _SOCKET_SEED_DATA::Clear
  00017	83 c6 14	 add	 esi, 20			; 00000014H
  0001a	83 eb 01	 sub	 ebx, 1
  0001d	75 f1		 jne	 SHORT $LL4@Init

; 284  : 	}
; 285  : 
; 286  : 	for( i = 0; i < MAX_SPHERE_LEVEL; i++)

  0001f	8d b7 ec 03 00
	00		 lea	 esi, DWORD PTR [edi+1004]
  00025	bb 05 00 00 00	 mov	 ebx, 5
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@Init:

; 287  : 	{
; 288  : 		this->m_SphereLevel[i].Clear();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?Clear@_SOCKET_SPHERE_LEVEL@@QAEXXZ ; _SOCKET_SPHERE_LEVEL::Clear
  00037	83 c6 0c	 add	 esi, 12			; 0000000cH
  0003a	83 eb 01	 sub	 ebx, 1
  0003d	75 f1		 jne	 SHORT $LL7@Init

; 291  : 	for( i = 0; i < MAX_BONUS_OPTION; i++)

  0003f	8d 87 2a 04 00
	00		 lea	 eax, DWORD PTR [edi+1066]
  00045	8d 4b 06	 lea	 ecx, DWORD PTR [ebx+6]
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL10@Init:
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 92   : 		this->btIndex = 0;

  00050	c7 40 fe 00 00
	00 00		 mov	 DWORD PTR [eax-2], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 291  : 	for( i = 0; i < MAX_BONUS_OPTION; i++)

  00057	8d 40 14	 lea	 eax, DWORD PTR [eax+20]
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h

; 96   : 		this->btOptionType = 0;

  0005a	66 c7 40 ee 00
	00		 mov	 WORD PTR [eax-18], 0

; 97   : 		this->btOptionValue = 0;
; 98   : 
; 99   : 		this->OptionRate = 0;

  00060	c7 40 f2 00 00
	00 00		 mov	 DWORD PTR [eax-14], 0

; 100  : 
; 101  : 		for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 102  : 		{
; 103  : 			this->btValue[i] = 0;

  00067	c7 40 f6 00 00
	00 00		 mov	 DWORD PTR [eax-10], 0
  0006e	66 c7 40 fa 00
	00		 mov	 WORD PTR [eax-6], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 291  : 	for( i = 0; i < MAX_BONUS_OPTION; i++)

  00074	83 e9 01	 sub	 ecx, 1
  00077	75 d7		 jne	 SHORT $LL10@Init

; 292  : 	{
; 293  : 		this->m_BonusOption[i].Clear();
; 294  : 	}
; 295  : 
; 296  : 	m_SocketType1Rnd.InitPool();

  00079	8d 8f d0 04 00
	00		 lea	 ecx, DWORD PTR [edi+1232]
  0007f	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 297  : 	m_OptionRnd.InitPool();

  00084	8d 8f c0 04 00
	00		 lea	 ecx, DWORD PTR [edi+1216]
  0008a	e8 00 00 00 00	 call	 ?InitPool@TRandomPoolMgr@@QAEXXZ ; TRandomPoolMgr::InitPool

; 298  : 
; 299  : 	for( i = 0; i < MAX_SOCKET_COUNT; i++)
; 300  : 	{
; 301  : 		this->m_SphereDropRate[i] = 0;

  0008f	c7 87 1c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1308], 0

; 302  : 		this->m_SphereDropLevel[i] = 0;

  00099	c7 87 30 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1328], 0
  000a3	c7 87 20 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1312], 0
  000ad	c7 87 34 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1332], 0
  000b7	c7 87 24 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1316], 0
  000c1	c7 87 38 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1336], 0
  000cb	c7 87 28 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1320], 0
  000d5	c7 87 3c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1340], 0
  000df	c7 87 2c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1324], 0
  000e9	c7 87 40 05 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+1344], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  000f3	8b 87 44 05 00
	00		 mov	 eax, DWORD PTR [edi+1348]
  000f9	89 87 48 05 00
	00		 mov	 DWORD PTR [edi+1352], eax
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 306  : }

  00102	c3		 ret	 0
?Init@CSocketItems@@QAEXXZ ENDP				; CSocketItems::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??1CSocketItems@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSocketItems@@UAE@XZ PROC				; CSocketItems::~CSocketItems, COMDAT
; _this$ = ecx

; 269  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSocketItems@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 271  : }

  00026	8d b7 44 05 00
	00		 lea	 esi, DWORD PTR [edi+1348]
  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSocketItems@@6B@
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00032	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00034	85 c9		 test	 ecx, ecx
  00036	74 25		 je	 SHORT $LN7@CSocketIte

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00038	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0003b	2b c1		 sub	 eax, ecx
  0003d	c1 f8 02	 sar	 eax, 2
  00040	50		 push	 eax
  00041	51		 push	 ecx
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@USocketItemInfo@@@std@@@std@@QAEXPAUSocketItemInfo@@I@Z ; std::_Wrap_alloc<std::allocator<SocketItemInfo> >::deallocate

; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();

  00049	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0004f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00056	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@CSocketIte:
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 271  : }

  0005d	8d 8f e0 04 00
	00		 lea	 ecx, DWORD PTR [edi+1248]
  00063	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00068	8d 8f d0 04 00
	00		 lea	 ecx, DWORD PTR [edi+1232]
  0006e	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  00073	8d 8f c0 04 00
	00		 lea	 ecx, DWORD PTR [edi+1216]
  00079	e8 00 00 00 00	 call	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
  0007e	68 00 00 00 00	 push	 OFFSET ??1_SOCKET_SPHERE_LEVEL@@QAE@XZ ; _SOCKET_SPHERE_LEVEL::~_SOCKET_SPHERE_LEVEL
  00083	6a 05		 push	 5
  00085	6a 0c		 push	 12			; 0000000cH
  00087	8d 87 ec 03 00
	00		 lea	 eax, DWORD PTR [edi+1004]
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00093	68 00 00 00 00	 push	 OFFSET ??1_SOCKET_SEED_DATA@@QAE@XZ ; _SOCKET_SEED_DATA::~_SOCKET_SEED_DATA
  00098	6a 32		 push	 50			; 00000032H
  0009a	6a 14		 push	 20			; 00000014H
  0009c	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSocketItems@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSocketItems@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSocketItems@@UAE@XZ ENDP				; CSocketItems::~CSocketItems
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??0CSocketItems@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSocketItems@@QAE@XZ PROC				; CSocketItems::CSocketItems, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSocketItems@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	68 00 00 00 00	 push	 OFFSET ??1_SOCKET_SEED_DATA@@QAE@XZ ; _SOCKET_SEED_DATA::~_SOCKET_SEED_DATA
  0002e	68 00 00 00 00	 push	 OFFSET ??0_SOCKET_SEED_DATA@@QAE@XZ ; _SOCKET_SEED_DATA::_SOCKET_SEED_DATA
  00033	6a 32		 push	 50			; 00000032H
  00035	6a 14		 push	 20			; 00000014H
  00037	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSocketItems@@6B@
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00046	68 00 00 00 00	 push	 OFFSET ??1_SOCKET_SPHERE_LEVEL@@QAE@XZ ; _SOCKET_SPHERE_LEVEL::~_SOCKET_SPHERE_LEVEL
  0004b	68 00 00 00 00	 push	 OFFSET ??0_SOCKET_SPHERE_LEVEL@@QAE@XZ ; _SOCKET_SPHERE_LEVEL::_SOCKET_SPHERE_LEVEL
  00050	6a 05		 push	 5
  00052	6a 0c		 push	 12			; 0000000cH
  00054	8d 86 ec 03 00
	00		 lea	 eax, DWORD PTR [esi+1004]
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00067	8d 8e c0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1216]
  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00076	8d 8e d0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1232]
  0007c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00080	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
  00085	8d 8e e0 04 00
	00		 lea	 ecx, DWORD PTR [esi+1248]
  0008b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0008f	e8 00 00 00 00	 call	 ??0TRandomPoolMgr@@QAE@XZ ; TRandomPoolMgr::TRandomPoolMgr
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00094	c7 86 44 05 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1348], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 266  : }

  0009e	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  000a0	c7 86 48 05 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1352], 0

; 482  : 		_Myend = pointer();

  000aa	c7 86 4c 05 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1356], 0
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp

; 266  : }

  000b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000be	59		 pop	 ecx
  000bf	5e		 pop	 esi
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSocketItems@@QAE@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ??1_SOCKET_SEED_DATA@@QAE@XZ ; _SOCKET_SEED_DATA::~_SOCKET_SEED_DATA
  00005	6a 32		 push	 50			; 00000032H
  00007	6a 14		 push	 20			; 00000014H
  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00015	c3		 ret	 0
__unwindfunclet$??0CSocketItems@@QAE@XZ$1:
  00016	68 00 00 00 00	 push	 OFFSET ??1_SOCKET_SPHERE_LEVEL@@QAE@XZ ; _SOCKET_SPHERE_LEVEL::~_SOCKET_SPHERE_LEVEL
  0001b	6a 05		 push	 5
  0001d	6a 0c		 push	 12			; 0000000cH
  0001f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00022	05 ec 03 00 00	 add	 eax, 1004		; 000003ecH
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0002d	c3		 ret	 0
__unwindfunclet$??0CSocketItems@@QAE@XZ$2:
  0002e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	81 c1 c0 04 00
	00		 add	 ecx, 1216		; 000004c0H
  00037	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__unwindfunclet$??0CSocketItems@@QAE@XZ$3:
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	81 c1 d0 04 00
	00		 add	 ecx, 1232		; 000004d0H
  00045	e9 00 00 00 00	 jmp	 ??1TRandomPoolMgr@@UAE@XZ ; TRandomPoolMgr::~TRandomPoolMgr
__ehhandler$??0CSocketItems@@QAE@XZ:
  0004a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0004e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00051	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSocketItems@@QAE@XZ
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSocketItems@@QAE@XZ ENDP				; CSocketItems::CSocketItems
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
;	COMDAT ?Clear@_SOCKET_USER_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_SOCKET_USER_DATA@@QAEXXZ PROC			; _SOCKET_USER_DATA::Clear, COMDAT
; _this$ = ecx

; 131  : 		btOption = -1;

  00000	c7 01 ff 00 00
	00		 mov	 DWORD PTR [ecx], 255	; 000000ffH

; 132  : 		IncValue = 0;
; 133  : 		IncType = 0;
; 134  : 		Count = 0;

  00006	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 135  : 	}

  0000a	c3		 ret	 0
?Clear@_SOCKET_USER_DATA@@QAEXXZ ENDP			; _SOCKET_USER_DATA::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.h
;	COMDAT ?Clear@_SOCKET_BONUS_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_SOCKET_BONUS_DATA@@QAEXXZ PROC			; _SOCKET_BONUS_DATA::Clear, COMDAT
; _this$ = ecx

; 92   : 		this->btIndex = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 93   : 		this->btEffectType = 0;
; 94   : 		this->btIndexMin = 0;
; 95   : 		this->btIndexMax = 0;
; 96   : 		this->btOptionType = 0;

  00006	66 c7 41 04 00
	00		 mov	 WORD PTR [ecx+4], 0

; 97   : 		this->btOptionValue = 0;
; 98   : 
; 99   : 		this->OptionRate = 0;

  0000c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 100  : 
; 101  : 		for(int i = 0; i < MAX_SOCKET_COUNT; i++)
; 102  : 		{
; 103  : 			this->btValue[i] = 0;

  00013	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001a	66 c7 41 10 00
	00		 mov	 WORD PTR [ecx+16], 0

; 104  : 		}
; 105  : 
; 106  : 		this->btCount = 0;
; 107  : 	}

  00020	c3		 ret	 0
?Clear@_SOCKET_BONUS_DATA@@QAEXXZ ENDP			; _SOCKET_BONUS_DATA::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?IncValue@_SOCKET_SPHERE_OPTION@@QAEXE@Z
_TEXT	SEGMENT
_btValue$ = 8						; size = 1
?IncValue@_SOCKET_SPHERE_OPTION@@QAEXE@Z PROC		; _SOCKET_SPHERE_OPTION::IncValue, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 249  : 	if( ( this->wSphereValue + btValue ) > (WORD)-2 )

  00004	8a 5d 08	 mov	 bl, BYTE PTR _btValue$[ebp]
  00007	56		 push	 esi
  00008	0f b7 71 0a	 movzx	 esi, WORD PTR [ecx+10]
  0000c	0f b6 d3	 movzx	 edx, bl
  0000f	03 d6		 add	 edx, esi
  00011	81 fa fe ff 00
	00		 cmp	 edx, 65534		; 0000fffeH
  00017	7f 0a		 jg	 SHORT $LN1@IncValue

; 250  : 	{
; 251  : 		return;
; 252  : 	}
; 253  : 
; 254  : 	this->wSphereValue += btValue;

  00019	0f b6 c3	 movzx	 eax, bl
  0001c	66 03 c6	 add	 ax, si
  0001f	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax
$LN1@IncValue:
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx

; 255  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?IncValue@_SOCKET_SPHERE_OPTION@@QAEXE@Z ENDP		; _SOCKET_SPHERE_OPTION::IncValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetSphereOption@_SOCKET_SPHERE_OPTION@@QAEEPAU_SOCKET_SEED_DATA@@E@Z
_TEXT	SEGMENT
_lpSeedData$ = 8					; size = 4
_btLevel$ = 12						; size = 1
?SetSphereOption@_SOCKET_SPHERE_OPTION@@QAEEPAU_SOCKET_SEED_DATA@@E@Z PROC ; _SOCKET_SPHERE_OPTION::SetSphereOption, COMDAT
; _this$ = ecx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 203  : 	if( lpSeedData == NULL || btLevel == NULL )

  00003	8b 55 08	 mov	 edx, DWORD PTR _lpSeedData$[ebp]
  00006	53		 push	 ebx
  00007	85 d2		 test	 edx, edx
  00009	0f 84 a2 00 00
	00		 je	 $LN5@SetSphereO
  0000f	8a 5d 0c	 mov	 bl, BYTE PTR _btLevel$[ebp]
  00012	84 db		 test	 bl, bl
  00014	0f 84 97 00 00
	00		 je	 $LN5@SetSphereO

; 206  : 	}
; 207  : 
; 208  : 	this->btOptionId = btLevel * MAX_SEED_OPTION + lpSeedData->btOption;

  0001a	0f b6 c3	 movzx	 eax, bl
  0001d	6b c0 32	 imul	 eax, eax, 50
  00020	56		 push	 esi

; 209  : 	this->btOption = lpSeedData->btOption;
; 210  : 	this->btGroup = lpSeedData->btGroup;
; 211  : 	this->btIndex = lpSeedData->btIndex;
; 212  : 	this->btIncType = lpSeedData->btIncType;
; 213  : 	this->btLevel = btLevel;
; 214  : 	this->wSphereValue = lpSeedData->btIncValue[-1+btLevel];

  00021	0f b6 f3	 movzx	 esi, bl
  00024	02 02		 add	 al, BYTE PTR [edx]
  00026	88 01		 mov	 BYTE PTR [ecx], al
  00028	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0002b	88 41 01	 mov	 BYTE PTR [ecx+1], al
  0002e	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00032	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00035	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  00039	88 41 08	 mov	 BYTE PTR [ecx+8], al
  0003c	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  00040	88 41 09	 mov	 BYTE PTR [ecx+9], al
  00043	88 59 0c	 mov	 BYTE PTR [ecx+12], bl
  00046	0f b6 44 16 03	 movzx	 eax, BYTE PTR [esi+edx+3]
  0004b	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 215  : 
; 216  : 	switch( lpSeedData->btGroup )

  0004f	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00053	48		 dec	 eax
  00054	83 f8 06	 cmp	 eax, 6
  00057	77 50		 ja	 SHORT $LN13@SetSphereO
  00059	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@SetSphereO[eax*4]
$LN6@SetSphereO:

; 217  : 	{
; 218  : 	case 1:
; 219  : 		this->SeedItem = ITEMGET(12,100);

  00060	c7 41 04 64 18
	00 00		 mov	 DWORD PTR [ecx+4], 6244	; 00001864H

; 220  : 		break;

  00067	eb 2b		 jmp	 SHORT $LN12@SetSphereO
$LN7@SetSphereO:

; 221  : 	case 2:
; 222  : 		this->SeedItem = ITEMGET(12,101);

  00069	c7 41 04 65 18
	00 00		 mov	 DWORD PTR [ecx+4], 6245	; 00001865H

; 223  : 		break;

  00070	eb 22		 jmp	 SHORT $LN12@SetSphereO
$LN8@SetSphereO:

; 224  : 	case 3:
; 225  : 		this->SeedItem = ITEMGET(12,102);

  00072	c7 41 04 66 18
	00 00		 mov	 DWORD PTR [ecx+4], 6246	; 00001866H

; 226  : 		break;

  00079	eb 19		 jmp	 SHORT $LN12@SetSphereO
$LN9@SetSphereO:

; 227  : 	case 4:
; 228  : 		this->SeedItem = ITEMGET(12,103);

  0007b	c7 41 04 67 18
	00 00		 mov	 DWORD PTR [ecx+4], 6247	; 00001867H

; 229  : 		break;

  00082	eb 10		 jmp	 SHORT $LN12@SetSphereO
$LN10@SetSphereO:

; 230  : 	case 5:
; 231  : 		this->SeedItem = ITEMGET(12,104);

  00084	c7 41 04 68 18
	00 00		 mov	 DWORD PTR [ecx+4], 6248	; 00001868H

; 232  : 		break;

  0008b	eb 07		 jmp	 SHORT $LN12@SetSphereO
$LN11@SetSphereO:

; 233  : 	case 6:
; 234  : 		this->SeedItem = ITEMGET(12,105);

  0008d	c7 41 04 69 18
	00 00		 mov	 DWORD PTR [ecx+4], 6249	; 00001869H
$LN12@SetSphereO:

; 240  : 	}
; 241  : 
; 242  : 	this->SeedItem += (this->btLevel -1)*6;

  00094	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00097	8d 04 45 fa ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-6]
  0009e	01 41 04	 add	 DWORD PTR [ecx+4], eax

; 243  : 
; 244  : return true;

  000a1	b0 01		 mov	 al, 1
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx

; 245  : }

  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
$LN13@SetSphereO:
  000a9	5e		 pop	 esi

; 235  : 		break;
; 236  : 	case 7:
; 237  : 		break;
; 238  : 	default:
; 239  : 		return false;

  000aa	32 c0		 xor	 al, al
  000ac	5b		 pop	 ebx

; 245  : }

  000ad	5d		 pop	 ebp
  000ae	c2 08 00	 ret	 8
$LN5@SetSphereO:

; 204  : 	{
; 205  : 		return false;

  000b1	32 c0		 xor	 al, al
  000b3	5b		 pop	 ebx

; 245  : }

  000b4	5d		 pop	 ebp
  000b5	c2 08 00	 ret	 8
$LN17@SetSphereO:
  000b8	00 00 00 00	 DD	 $LN6@SetSphereO
  000bc	00 00 00 00	 DD	 $LN7@SetSphereO
  000c0	00 00 00 00	 DD	 $LN8@SetSphereO
  000c4	00 00 00 00	 DD	 $LN9@SetSphereO
  000c8	00 00 00 00	 DD	 $LN10@SetSphereO
  000cc	00 00 00 00	 DD	 $LN11@SetSphereO
  000d0	00 00 00 00	 DD	 $LN12@SetSphereO
?SetSphereOption@_SOCKET_SPHERE_OPTION@@QAEEPAU_SOCKET_SEED_DATA@@E@Z ENDP ; _SOCKET_SPHERE_OPTION::SetSphereOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?Clear@_SOCKET_SPHERE_OPTION@@QAEXXZ
_TEXT	SEGMENT
?Clear@_SOCKET_SPHERE_OPTION@@QAEXXZ PROC		; _SOCKET_SPHERE_OPTION::Clear, COMDAT
; _this$ = ecx

; 192  : 	this->btOptionId = 0;

  00000	66 c7 01 00 00	 mov	 WORD PTR [ecx], 0

; 193  : 	this->btOption = 0;
; 194  : 	this->btGroup = 0;

  00005	c6 41 02 00	 mov	 BYTE PTR [ecx+2], 0

; 195  : 	this->btIndex = 0;

  00009	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 196  : 	this->btIncType = 0;
; 197  : 	this->wSphereValue = 0;
; 198  : 	this->SeedItem = 0;

  00010	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 199  : }

  00017	c3		 ret	 0
?Clear@_SOCKET_SPHERE_OPTION@@QAEXXZ ENDP		; _SOCKET_SPHERE_OPTION::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?GetSphereItem@_SOCKET_SPHERE_OPTION@@QAEHXZ
_TEXT	SEGMENT
?GetSphereItem@_SOCKET_SPHERE_OPTION@@QAEHXZ PROC	; _SOCKET_SPHERE_OPTION::GetSphereItem, COMDAT
; _this$ = ecx

; 187  : 	return this->SeedItem;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 188  : }

  00003	c3		 ret	 0
?GetSphereItem@_SOCKET_SPHERE_OPTION@@QAEHXZ ENDP	; _SOCKET_SPHERE_OPTION::GetSphereItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??1_SOCKET_SPHERE_OPTION@@QAE@XZ
_TEXT	SEGMENT
??1_SOCKET_SPHERE_OPTION@@QAE@XZ PROC			; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION, COMDAT
; _this$ = ecx

; 179  : 
; 180  : }

  00000	c3		 ret	 0
??1_SOCKET_SPHERE_OPTION@@QAE@XZ ENDP			; _SOCKET_SPHERE_OPTION::~_SOCKET_SPHERE_OPTION
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??0_SOCKET_SPHERE_OPTION@@QAE@XZ
_TEXT	SEGMENT
??0_SOCKET_SPHERE_OPTION@@QAE@XZ PROC			; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION, COMDAT
; _this$ = ecx

; 173  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 174  : 	this->Clear();

  00003	e8 00 00 00 00	 call	 ?Clear@_SOCKET_SPHERE_OPTION@@QAEXXZ ; _SOCKET_SPHERE_OPTION::Clear

; 175  : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0_SOCKET_SPHERE_OPTION@@QAE@XZ ENDP			; _SOCKET_SPHERE_OPTION::_SOCKET_SPHERE_OPTION
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetSphereLevel@_SOCKET_SPHERE_LEVEL@@QAEXEK@Z
_TEXT	SEGMENT
_btLevel$ = 8						; size = 1
_Value$ = 12						; size = 4
?SetSphereLevel@_SOCKET_SPHERE_LEVEL@@QAEXEK@Z PROC	; _SOCKET_SPHERE_LEVEL::SetSphereLevel, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	this->btLevel = btLevel;

  00003	8a 55 08	 mov	 dl, BYTE PTR _btLevel$[ebp]

; 144  : 	this->Value = Value;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _Value$[ebp]
  00009	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 145  : 
; 146  : 	switch( btLevel )

  0000c	0f b6 c2	 movzx	 eax, dl
  0000f	48		 dec	 eax
  00010	88 11		 mov	 BYTE PTR [ecx], dl
  00012	83 f8 04	 cmp	 eax, 4
  00015	77 3a		 ja	 SHORT $LN2@SetSphereL
  00017	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN11@SetSphereL[eax*4]
$LN4@SetSphereL:

; 147  : 	{
; 148  : 	case 1:
; 149  : 		this->SeedItem = ITEMGET(12,70);

  0001e	c7 41 08 46 18
	00 00		 mov	 DWORD PTR [ecx+8], 6214	; 00001846H

; 162  : 		break;
; 163  : 	}
; 164  : }

  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN5@SetSphereL:

; 150  : 		break;
; 151  : 	case 2:
; 152  : 		this->SeedItem = ITEMGET(12,71);

  00029	c7 41 08 47 18
	00 00		 mov	 DWORD PTR [ecx+8], 6215	; 00001847H

; 162  : 		break;
; 163  : 	}
; 164  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN6@SetSphereL:

; 153  : 		break;
; 154  : 	case 3:
; 155  : 		this->SeedItem = ITEMGET(12,72);

  00034	c7 41 08 48 18
	00 00		 mov	 DWORD PTR [ecx+8], 6216	; 00001848H

; 162  : 		break;
; 163  : 	}
; 164  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
$LN7@SetSphereL:

; 156  : 		break;
; 157  : 	case 4:
; 158  : 		this->SeedItem = ITEMGET(12,73);

  0003f	c7 41 08 49 18
	00 00		 mov	 DWORD PTR [ecx+8], 6217	; 00001849H

; 162  : 		break;
; 163  : 	}
; 164  : }

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN8@SetSphereL:

; 159  : 		break;
; 160  : 	case 5:
; 161  : 		this->SeedItem = ITEMGET(12,74);

  0004a	c7 41 08 4a 18
	00 00		 mov	 DWORD PTR [ecx+8], 6218	; 0000184aH
$LN2@SetSphereL:

; 162  : 		break;
; 163  : 	}
; 164  : }

  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
  00055	0f 1f 00	 npad	 3
$LN11@SetSphereL:
  00058	00 00 00 00	 DD	 $LN4@SetSphereL
  0005c	00 00 00 00	 DD	 $LN5@SetSphereL
  00060	00 00 00 00	 DD	 $LN6@SetSphereL
  00064	00 00 00 00	 DD	 $LN7@SetSphereL
  00068	00 00 00 00	 DD	 $LN8@SetSphereL
?SetSphereLevel@_SOCKET_SPHERE_LEVEL@@QAEXEK@Z ENDP	; _SOCKET_SPHERE_LEVEL::SetSphereLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?Clear@_SOCKET_SPHERE_LEVEL@@QAEXXZ
_TEXT	SEGMENT
?Clear@_SOCKET_SPHERE_LEVEL@@QAEXXZ PROC		; _SOCKET_SPHERE_LEVEL::Clear, COMDAT
; _this$ = ecx

; 136  : 	this->btLevel = 0;

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 137  : 	this->Value = 0;

  00003	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 138  : 	this->SeedItem = 0;

  0000a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 139  : }

  00011	c3		 ret	 0
?Clear@_SOCKET_SPHERE_LEVEL@@QAEXXZ ENDP		; _SOCKET_SPHERE_LEVEL::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??1_SOCKET_SPHERE_LEVEL@@QAE@XZ
_TEXT	SEGMENT
??1_SOCKET_SPHERE_LEVEL@@QAE@XZ PROC			; _SOCKET_SPHERE_LEVEL::~_SOCKET_SPHERE_LEVEL, COMDAT
; _this$ = ecx

; 128  : 
; 129  : }

  00000	c3		 ret	 0
??1_SOCKET_SPHERE_LEVEL@@QAE@XZ ENDP			; _SOCKET_SPHERE_LEVEL::~_SOCKET_SPHERE_LEVEL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??0_SOCKET_SPHERE_LEVEL@@QAE@XZ
_TEXT	SEGMENT
??0_SOCKET_SPHERE_LEVEL@@QAE@XZ PROC			; _SOCKET_SPHERE_LEVEL::_SOCKET_SPHERE_LEVEL, COMDAT
; _this$ = ecx

; 123  : 
; 124  : }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_SOCKET_SPHERE_LEVEL@@QAE@XZ ENDP			; _SOCKET_SPHERE_LEVEL::_SOCKET_SPHERE_LEVEL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?SetOptionData@_SOCKET_SEED_DATA@@QAEXEEEEPAEH@Z
_TEXT	SEGMENT
_btOption$ = 8						; size = 1
_btGroup$ = 12						; size = 1
_btIndex$ = 16						; size = 1
_btIncType$ = 20					; size = 1
_btIncValue$ = 24					; size = 4
_OptionRate$ = 28					; size = 4
?SetOptionData@_SOCKET_SEED_DATA@@QAEXEEEEPAEH@Z PROC	; _SOCKET_SEED_DATA::SetOptionData, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 76   : 	this->btOption = btOption;

  00003	8a 45 08	 mov	 al, BYTE PTR _btOption$[ebp]

; 77   : 	this->btGroup = btGroup;

  00006	8a 55 0c	 mov	 dl, BYTE PTR _btGroup$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 78   : 	this->btIndex = btIndex;
; 79   : 	this->btIncType = btIncType;
; 80   : 
; 81   : 	for(int i =0; i<MAX_SPHERE_LEVEL;i++)
; 82   : 	{
; 83   : 		this->btIncValue[i] = btIncValue[i];

  0000c	8b 4d 18	 mov	 ecx, DWORD PTR _btIncValue$[ebp]
  0000f	88 06		 mov	 BYTE PTR [esi], al
  00011	8a 45 10	 mov	 al, BYTE PTR _btIndex$[ebp]
  00014	88 46 02	 mov	 BYTE PTR [esi+2], al
  00017	8a 45 14	 mov	 al, BYTE PTR _btIncType$[ebp]
  0001a	88 46 03	 mov	 BYTE PTR [esi+3], al
  0001d	88 56 01	 mov	 BYTE PTR [esi+1], dl
  00020	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00023	88 46 04	 mov	 BYTE PTR [esi+4], al
  00026	0f b6 41 01	 movzx	 eax, BYTE PTR [ecx+1]
  0002a	88 46 05	 mov	 BYTE PTR [esi+5], al
  0002d	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]
  00031	88 46 06	 mov	 BYTE PTR [esi+6], al
  00034	0f b6 41 03	 movzx	 eax, BYTE PTR [ecx+3]
  00038	88 46 07	 mov	 BYTE PTR [esi+7], al
  0003b	0f b6 41 04	 movzx	 eax, BYTE PTR [ecx+4]
  0003f	88 46 08	 mov	 BYTE PTR [esi+8], al

; 84   : 	}
; 85   : 
; 86   : 	this->OptionRate = OptionRate;

  00042	8b 45 1c	 mov	 eax, DWORD PTR _OptionRate$[ebp]
  00045	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 87   : 
; 88   : 	switch( btGroup )

  00048	0f b6 c2	 movzx	 eax, dl
  0004b	48		 dec	 eax
  0004c	83 f8 06	 cmp	 eax, 6
  0004f	77 56		 ja	 SHORT $LN5@SetOptionD
  00051	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@SetOptionD[eax*4]
$LN7@SetOptionD:

; 89   : 	{
; 90   : 	case 1:
; 91   : 		SeedItem = ITEMGET(12,60);

  00058	c7 46 0c 3c 18
	00 00		 mov	 DWORD PTR [esi+12], 6204 ; 0000183cH
  0005f	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  00060	5d		 pop	 ebp
  00061	c2 18 00	 ret	 24			; 00000018H
$LN8@SetOptionD:

; 92   : 		break;
; 93   : 	case 2:
; 94   : 		SeedItem = ITEMGET(12,61);

  00064	c7 46 0c 3d 18
	00 00		 mov	 DWORD PTR [esi+12], 6205 ; 0000183dH
  0006b	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  0006c	5d		 pop	 ebp
  0006d	c2 18 00	 ret	 24			; 00000018H
$LN9@SetOptionD:

; 95   : 		break;
; 96   : 	case 3:
; 97   : 		SeedItem = ITEMGET(12,62);

  00070	c7 46 0c 3e 18
	00 00		 mov	 DWORD PTR [esi+12], 6206 ; 0000183eH
  00077	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  00078	5d		 pop	 ebp
  00079	c2 18 00	 ret	 24			; 00000018H
$LN10@SetOptionD:

; 98   : 		break;
; 99   : 	case 4:
; 100  : 		SeedItem = ITEMGET(12,63);

  0007c	c7 46 0c 3f 18
	00 00		 mov	 DWORD PTR [esi+12], 6207 ; 0000183fH
  00083	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  00084	5d		 pop	 ebp
  00085	c2 18 00	 ret	 24			; 00000018H
$LN11@SetOptionD:

; 101  : 		break;
; 102  : 	case 5:
; 103  : 		SeedItem = ITEMGET(12,64);

  00088	c7 46 0c 40 18
	00 00		 mov	 DWORD PTR [esi+12], 6208 ; 00001840H
  0008f	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  00090	5d		 pop	 ebp
  00091	c2 18 00	 ret	 24			; 00000018H
$LN12@SetOptionD:

; 104  : 		break;
; 105  : 	case 6:
; 106  : 		SeedItem = ITEMGET(12,65);

  00094	c7 46 0c 41 18
	00 00		 mov	 DWORD PTR [esi+12], 6209 ; 00001841H
  0009b	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  0009c	5d		 pop	 ebp
  0009d	c2 18 00	 ret	 24			; 00000018H
$LN13@SetOptionD:

; 107  : 		break;
; 108  : 	case 7:
; 109  : 		SeedItem = ITEMGET(12,66);

  000a0	c7 46 0c 42 18
	00 00		 mov	 DWORD PTR [esi+12], 6210 ; 00001842H
$LN5@SetOptionD:
  000a7	5e		 pop	 esi

; 110  : 		break;
; 111  : 	}
; 112  : }

  000a8	5d		 pop	 ebp
  000a9	c2 18 00	 ret	 24			; 00000018H
$LN25@SetOptionD:
  000ac	00 00 00 00	 DD	 $LN7@SetOptionD
  000b0	00 00 00 00	 DD	 $LN8@SetOptionD
  000b4	00 00 00 00	 DD	 $LN9@SetOptionD
  000b8	00 00 00 00	 DD	 $LN10@SetOptionD
  000bc	00 00 00 00	 DD	 $LN11@SetOptionD
  000c0	00 00 00 00	 DD	 $LN12@SetOptionD
  000c4	00 00 00 00	 DD	 $LN13@SetOptionD
?SetOptionData@_SOCKET_SEED_DATA@@QAEXEEEEPAEH@Z ENDP	; _SOCKET_SEED_DATA::SetOptionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?CheckSeed@_SOCKET_SEED_DATA@@QAEEPAVCItem@@@Z
_TEXT	SEGMENT
_lpItem$ = 8						; size = 4
?CheckSeed@_SOCKET_SEED_DATA@@QAEEPAVCItem@@@Z PROC	; _SOCKET_SEED_DATA::CheckSeed, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 62   : 	if( lpItem == NULL )

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpItem$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	74 26		 je	 SHORT $LN4@CheckSeed

; 63   : 		return false;
; 64   : 
; 65   : 	if( lpItem->IsItem() == FALSE )

  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00015	85 c0		 test	 eax, eax
  00017	74 1b		 je	 SHORT $LN4@CheckSeed

; 66   : 		return false;
; 67   : 	
; 68   : 	if( this->SeedItem == lpItem->m_Type && this->btIndex == lpItem->m_Level )

  00019	0f bf 46 06	 movsx	 eax, WORD PTR [esi+6]
  0001d	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  00020	75 12		 jne	 SHORT $LN4@CheckSeed
  00022	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  00026	66 3b 46 08	 cmp	 ax, WORD PTR [esi+8]
  0002a	75 08		 jne	 SHORT $LN4@CheckSeed

; 69   : 		return true;

  0002c	5f		 pop	 edi
  0002d	b0 01		 mov	 al, 1
  0002f	5e		 pop	 esi

; 72   : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN4@CheckSeed:
  00034	5f		 pop	 edi

; 70   : 
; 71   : return false;

  00035	32 c0		 xor	 al, al
  00037	5e		 pop	 esi

; 72   : }

  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?CheckSeed@_SOCKET_SEED_DATA@@QAEEPAVCItem@@@Z ENDP	; _SOCKET_SEED_DATA::CheckSeed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?Clear@_SOCKET_SEED_DATA@@QAEXXZ
_TEXT	SEGMENT
?Clear@_SOCKET_SEED_DATA@@QAEXXZ PROC			; _SOCKET_SEED_DATA::Clear, COMDAT
; _this$ = ecx

; 45   : 	this->btOption = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 46   : 	this->btGroup = 0;
; 47   : 	this->btIndex = 0;
; 48   : 	this->btIncType = 0;
; 49   : 
; 50   : 	for(int i = 0; i < MAX_SPHERE_LEVEL; i++)
; 51   : 	{
; 52   : 		this->btIncValue[i] = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0

; 53   : 	}
; 54   : 
; 55   : 	this->OptionRate =0;

  00011	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 56   : 	this->SeedItem = 0;

  00018	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 57   : }

  0001f	c3		 ret	 0
?Clear@_SOCKET_SEED_DATA@@QAEXXZ ENDP			; _SOCKET_SEED_DATA::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??1_SOCKET_SEED_DATA@@QAE@XZ
_TEXT	SEGMENT
??1_SOCKET_SEED_DATA@@QAE@XZ PROC			; _SOCKET_SEED_DATA::~_SOCKET_SEED_DATA, COMDAT
; _this$ = ecx

; 36   : 
; 37   : }

  00000	c3		 ret	 0
??1_SOCKET_SEED_DATA@@QAE@XZ ENDP			; _SOCKET_SEED_DATA::~_SOCKET_SEED_DATA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ??0_SOCKET_SEED_DATA@@QAE@XZ
_TEXT	SEGMENT
??0_SOCKET_SEED_DATA@@QAE@XZ PROC			; _SOCKET_SEED_DATA::_SOCKET_SEED_DATA, COMDAT
; _this$ = ecx

; 30   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 31   : 	this->Clear();

  00003	e8 00 00 00 00	 call	 ?Clear@_SOCKET_SEED_DATA@@QAEXXZ ; _SOCKET_SEED_DATA::Clear

; 32   : }

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi
  0000b	c3		 ret	 0
??0_SOCKET_SEED_DATA@@QAE@XZ ENDP			; _SOCKET_SEED_DATA::_SOCKET_SEED_DATA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 1879 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\socketitemoption.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 1879 : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
