; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\common\WZScriptEncode.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XorTable@@3PAEA				; XorTable
_DATA	SEGMENT
?XorTable@@3PAEA DB 0a1H				; XorTable
	DB	0b2H
	DB	0aaH
	DB	012H
	DB	023H
	DB	0f1H
	DB	0f3H
	DB	0d3H
	DB	078H
	DB	02H
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CWZScriptEncode@@QAE@XZ			; CWZScriptEncode::CWZScriptEncode
PUBLIC	??1CWZScriptEncode@@UAE@XZ			; CWZScriptEncode::~CWZScriptEncode
PUBLIC	?Open@CWZScriptEncode@@QAEHPAD@Z		; CWZScriptEncode::Open
PUBLIC	?Close@CWZScriptEncode@@QAEXXZ			; CWZScriptEncode::Close
PUBLIC	?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer
PUBLIC	?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ; CWZScriptEncode::GetToken
PUBLIC	?GetNumber@CWZScriptEncode@@QAEHXZ		; CWZScriptEncode::GetNumber
PUBLIC	?GetString@CWZScriptEncode@@QAEPADXZ		; CWZScriptEncode::GetString
PUBLIC	?Encode@CWZScriptEncode@@QAEXPADH@Z		; CWZScriptEncode::Encode
PUBLIC	?GetC@CWZScriptEncode@@IAEHXZ			; CWZScriptEncode::GetC
PUBLIC	?UnGetC@CWZScriptEncode@@IAEXH@Z		; CWZScriptEncode::UnGetC
PUBLIC	??_GCWZScriptEncode@@UAEPAXI@Z			; CWZScriptEncode::`scalar deleting destructor'
PUBLIC	??_7CWZScriptEncode@@6B@			; CWZScriptEncode::`vftable'
PUBLIC	??_R4CWZScriptEncode@@6B@			; CWZScriptEncode::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWZScriptEncode@@@8			; CWZScriptEncode `RTTI Type Descriptor'
PUBLIC	??_R3CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWZScriptEncode@@8				; CWZScriptEncode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWZScriptEncode@@8		; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_atof:PROC
EXTRN	??_ECWZScriptEncode@@UAEPAXI@Z:PROC		; CWZScriptEncode::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CWZScriptEncode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWZScriptEncode@@8 DD FLAT:??_R0?AVCWZScriptEncode@@@8 ; CWZScriptEncode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R2CWZScriptEncode@@8
rdata$r	SEGMENT
??_R2CWZScriptEncode@@8 DD FLAT:??_R1A@?0A@EA@CWZScriptEncode@@8 ; CWZScriptEncode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWZScriptEncode@@8
rdata$r	SEGMENT
??_R3CWZScriptEncode@@8 DD 00H				; CWZScriptEncode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWZScriptEncode@@@8
data$r	SEGMENT
??_R0?AVCWZScriptEncode@@@8 DD FLAT:??_7type_info@@6B@	; CWZScriptEncode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWZScriptEncode@@', 00H
data$r	ENDS
;	COMDAT ??_R4CWZScriptEncode@@6B@
rdata$r	SEGMENT
??_R4CWZScriptEncode@@6B@ DD 00H			; CWZScriptEncode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWZScriptEncode@@@8
	DD	FLAT:??_R3CWZScriptEncode@@8
rdata$r	ENDS
;	COMDAT ??_7CWZScriptEncode@@6B@
CONST	SEGMENT
??_7CWZScriptEncode@@6B@ DD FLAT:??_R4CWZScriptEncode@@6B@ ; CWZScriptEncode::`vftable'
	DD	FLAT:??_ECWZScriptEncode@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCWZScriptEncode@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWZScriptEncode@@UAEPAXI@Z PROC			; CWZScriptEncode::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWZScriptEncode@@UAE@XZ ; CWZScriptEncode::~CWZScriptEncode
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 84 00 00 00	 push	 132			; 00000084H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCWZScriptEncode@@UAEPAXI@Z ENDP			; CWZScriptEncode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?UnGetC@CWZScriptEncode@@IAEXH@Z
_TEXT	SEGMENT
_ch$ = 8						; size = 4
?UnGetC@CWZScriptEncode@@IAEXH@Z PROC			; CWZScriptEncode::UnGetC, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	if ( this->m_iBufferCount <= 0)

  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	85 d2		 test	 edx, edx
  00008	7e 0d		 jle	 SHORT $LN3@UnGetC

; 96   : 	{
; 97   : 		return;
; 98   : 	}
; 99   : 	else
; 100  : 	{
; 101  : 		this->m_iBufferCount--;
; 102  : 
; 103  : 		this->m_pBuffer [ this->m_iBufferCount ] = ch;

  0000a	8a 45 08	 mov	 al, BYTE PTR _ch$[ebp]
  0000d	4a		 dec	 edx
  0000e	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00011	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00014	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN3@UnGetC:

; 104  : 	}
; 105  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?UnGetC@CWZScriptEncode@@IAEXH@Z ENDP			; CWZScriptEncode::UnGetC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?GetC@CWZScriptEncode@@IAEHXZ
_TEXT	SEGMENT
?GetC@CWZScriptEncode@@IAEHXZ PROC			; CWZScriptEncode::GetC, COMDAT
; _this$ = ecx

; 82   : {

  00000	8b d1		 mov	 edx, ecx

; 83   : 	if ( this->m_iBufferCount >= this->m_iBufferSize )

  00002	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00005	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  00008	7c 04		 jl	 SHORT $LN2@GetC

; 84   : 	{
; 85   : 		return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 90   : 	}
; 91   : }

  0000d	c3		 ret	 0
$LN2@GetC:

; 86   : 	}
; 87   : 	else
; 88   : 	{
; 89   : 		return this->m_pBuffer [ this->m_iBufferCount++ ];

  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	0f be 04 08	 movsx	 eax, BYTE PTR [eax+ecx]
  00015	41		 inc	 ecx
  00016	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 90   : 	}
; 91   : }

  00019	c3		 ret	 0
?GetC@CWZScriptEncode@@IAEHXZ ENDP			; CWZScriptEncode::GetC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?Encode@CWZScriptEncode@@QAEXPADH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Encode@CWZScriptEncode@@QAEXPADH@Z PROC		; CWZScriptEncode::Encode, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 73   : 	int i;
; 74   : 
; 75   : 	for (i=0;i<size; i++)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _size$[ebp]
  00007	33 c9		 xor	 ecx, ecx
  00009	85 f6		 test	 esi, esi
  0000b	7e 26		 jle	 SHORT $LN3@Encode
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _buffer$[ebp]
$LL4@Encode:

; 76   : 	{
; 77   : 		buffer[i]=buffer[i]^XorTable[i%10];	

  00011	b8 cd cc cc cc	 mov	 eax, -858993459		; cccccccdH
  00016	f7 e1		 mul	 ecx
  00018	8b c1		 mov	 eax, ecx
  0001a	c1 ea 03	 shr	 edx, 3
  0001d	8d 14 92	 lea	 edx, DWORD PTR [edx+edx*4]
  00020	03 d2		 add	 edx, edx
  00022	2b c2		 sub	 eax, edx
  00024	8a 80 00 00 00
	00		 mov	 al, BYTE PTR ?XorTable@@3PAEA[eax]
  0002a	30 04 39	 xor	 BYTE PTR [ecx+edi], al
  0002d	41		 inc	 ecx
  0002e	3b ce		 cmp	 ecx, esi
  00030	7c df		 jl	 SHORT $LL4@Encode
  00032	5f		 pop	 edi
$LN3@Encode:
  00033	5e		 pop	 esi

; 78   : 	}
; 79   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?Encode@CWZScriptEncode@@QAEXPADH@Z ENDP		; CWZScriptEncode::Encode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?GetString@CWZScriptEncode@@QAEPADXZ
_TEXT	SEGMENT
?GetString@CWZScriptEncode@@QAEPADXZ PROC		; CWZScriptEncode::GetString, COMDAT
; _this$ = ecx

; 122  : 	return &this->TokenString[0];

  00000	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]

; 123  : }

  00003	c3		 ret	 0
?GetString@CWZScriptEncode@@QAEPADXZ ENDP		; CWZScriptEncode::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?GetNumber@CWZScriptEncode@@QAEHXZ
_TEXT	SEGMENT
?GetNumber@CWZScriptEncode@@QAEHXZ PROC			; CWZScriptEncode::GetNumber, COMDAT
; _this$ = ecx

; 117  : 	return this->TokenNumber;

  00000	f3 0f 2c 41 18	 cvttss2si eax, DWORD PTR [ecx+24]

; 118  : }

  00005	c3		 ret	 0
?GetNumber@CWZScriptEncode@@QAEHXZ ENDP			; CWZScriptEncode::GetNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ PROC	; CWZScriptEncode::GetToken, COMDAT
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi

; 127  : 	char ch;
; 128  : 	char* p;
; 129  : 	char TempString[100];
; 130  : 
; 131  : 	this->TokenString[0]=0;	// Set String NULL

  00015	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
  00018	c6 07 00	 mov	 BYTE PTR [edi], 0
  0001b	0f 1f 44 00 00	 npad	 5
$LL4@GetToken:

; 132  : 
; 133  : 	do
; 134  : 	{
; 135  : 		if ( (ch=this->GetC ()) == (-1) )

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00027	8a d8		 mov	 bl, al
  00029	80 fb ff	 cmp	 bl, -1
  0002c	0f 84 25 02 00
	00		 je	 $LN38@GetToken

; 136  : 		{
; 137  : 			return T_END;
; 138  : 		}
; 139  : 		else
; 140  : 		{	
; 141  : 			if (ch=='/')		// this is /

  00032	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00035	75 1c		 jne	 SHORT $LN2@GetToken

; 142  : 			{
; 143  : 				if((ch=this->GetC ()) == '/')

  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0003e	8a d8		 mov	 bl, al
  00040	80 fb 2f	 cmp	 bl, 47			; 0000002fH
  00043	75 0e		 jne	 SHORT $LN2@GetToken
$LL5@GetToken:

; 144  : 				{
; 145  : 					while ( ((ch=this->GetC()) != ('\n')) )	// End of Line (EOL)

  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0004c	8a d8		 mov	 bl, al
  0004e	80 fb 0a	 cmp	 bl, 10			; 0000000aH
  00051	75 f2		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 146  : 					{
; 147  : 						continue;
; 148  : 					}
; 149  : 				}
; 150  : 			}
; 151  : 		}
; 152  : 	}
; 153  : 	while (isspace(ch) != 0);

  00053	0f be c3	 movsx	 eax, bl
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 _isspace
  0005c	83 c4 04	 add	 esp, 4
  0005f	85 c0		 test	 eax, eax
  00061	75 bd		 jne	 SHORT $LL4@GetToken

; 154  : 
; 155  : 	switch(ch)

  00063	0f be cb	 movsx	 ecx, bl
  00066	8d 41 de	 lea	 eax, DWORD PTR [ecx-34]
  00069	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0006c	0f 87 77 01 00
	00		 ja	 $LN28@GetToken
  00072	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN53@GetToken[eax]
  00079	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN58@GetToken[eax*4]
$LN19@GetToken:
  00080	5f		 pop	 edi

; 156  : 	{
; 157  : 
; 158  : 	case 0x23:	// #
; 159  : 		return this->CurrentToken=T_COMMAND;

  00081	c7 86 80 00 00
	00 23 00 00 00	 mov	 DWORD PTR [esi+128], 35	; 00000023H
  0008b	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  00090	5e		 pop	 esi
  00091	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN20@GetToken:
  000a0	5f		 pop	 edi

; 160  : 		break;
; 161  : 	
; 162  : 	case 0x3B:	// ;
; 163  : 		return this->CurrentToken=T_SEMICOLON;

  000a1	c7 86 80 00 00
	00 3b 00 00 00	 mov	 DWORD PTR [esi+128], 59	; 0000003bH
  000ab	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN21@GetToken:
  000c0	5f		 pop	 edi

; 164  : 		break;
; 165  : 	
; 166  : 	case 0x2C:	// ,
; 167  : 
; 168  : 		return this->CurrentToken=T_COMMA;

  000c1	c7 86 80 00 00
	00 2c 00 00 00	 mov	 DWORD PTR [esi+128], 44	; 0000002cH
  000cb	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d5	33 cd		 xor	 ecx, ebp
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
$LN22@GetToken:
  000e0	5f		 pop	 edi

; 169  : 		break;
; 170  : 	
; 171  : 	case 0x7B:	// {
; 172  : 		return this->CurrentToken = T_LP;

  000e1	c7 86 80 00 00
	00 7b 00 00 00	 mov	 DWORD PTR [esi+128], 123 ; 0000007bH
  000eb	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  000f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f5	33 cd		 xor	 ecx, ebp
  000f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
$LN23@GetToken:
  00100	5f		 pop	 edi

; 173  : 		break;
; 174  : 
; 175  : 	case 0x7D:	// }
; 176  : 		return this->CurrentToken = T_RP;

  00101	c7 86 80 00 00
	00 7d 00 00 00	 mov	 DWORD PTR [esi+128], 125 ; 0000007dH
  0010b	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN24@GetToken:

; 177  : 		break;
; 178  : 	// Nice Index Table :)	by Deathway
; 179  : 	case 0x2D:	//-
; 180  : 	case 0x2E:	//.
; 181  : 	case 0x30:	//0
; 182  : 	case 0x31:	//1
; 183  : 	case 0x32:	//2
; 184  : 	case 0x33:	//3
; 185  : 	case 0x34:	//4		
; 186  : 	case 0x35:	//5
; 187  : 	case 0x36:	//6
; 188  : 	case 0x37:	//7
; 189  : 	case 0x38:	//8
; 190  : 	case 0x39:	//9
; 191  : 		this->UnGetC (ch);

  00120	51		 push	 ecx
  00121	8b ce		 mov	 ecx, esi
  00123	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC

; 192  : 		p = TempString;
; 193  : 		
; 194  : 		while (((ch=this->GetC()) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D))) 

  00128	8b ce		 mov	 ecx, esi
  0012a	8d 7d 98	 lea	 edi, DWORD PTR _TempString$[ebp]
  0012d	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00132	8a d8		 mov	 bl, al
  00134	80 fb ff	 cmp	 bl, -1
  00137	74 32		 je	 SHORT $LN54@GetToken
  00139	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@GetToken:
  00140	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  00143	74 15		 je	 SHORT $LN25@GetToken
  00145	0f be cb	 movsx	 ecx, bl
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 _isdigit
  0014e	83 c4 04	 add	 esp, 4
  00151	85 c0		 test	 eax, eax
  00153	75 05		 jne	 SHORT $LN25@GetToken
  00155	80 fb 2d	 cmp	 bl, 45			; 0000002dH
  00158	75 11		 jne	 SHORT $LN54@GetToken
$LN25@GetToken:

; 195  : 		{
; 196  : 			*p = ch;

  0015a	88 1f		 mov	 BYTE PTR [edi], bl
  0015c	8b ce		 mov	 ecx, esi

; 197  : 			p++;

  0015e	47		 inc	 edi
  0015f	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00164	8a d8		 mov	 bl, al
  00166	80 fb ff	 cmp	 bl, -1
  00169	75 d5		 jne	 SHORT $LL9@GetToken
$LN54@GetToken:

; 198  : 		}		
; 199  : 		*p = 0;
; 200  : 		this->TokenNumber = atof( TempString);

  0016b	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  0016e	c6 07 00	 mov	 BYTE PTR [edi], 0
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 _atof
  00177	83 c4 04	 add	 esp, 4

; 201  : 		return this->CurrentToken  = T_NUMBER ;

  0017a	c7 86 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+128], 1
  00184	d9 5e 18	 fstp	 DWORD PTR [esi+24]
  00187	b8 01 00 00 00	 mov	 eax, 1
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  0018f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00192	33 cd		 xor	 ecx, ebp
  00194	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
$LN26@GetToken:

; 202  : 		break;
; 203  : 
; 204  : 	case 0x22:	// "	
; 205  : 		p=&this->TokenString[0];
; 206  : 		
; 207  : 		while (((ch=this->GetC() ) != -1 ) && (ch != 0x22))	// nice

  0019d	8b ce		 mov	 ecx, esi
  0019f	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  001a4	3c ff		 cmp	 al, -1
  001a6	74 12		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001a8	3c 22		 cmp	 al, 34			; 00000022H
  001aa	74 1d		 je	 SHORT $LN27@GetToken

; 208  : 		{
; 209  : 			*p = ch;

  001ac	88 07		 mov	 BYTE PTR [edi], al
  001ae	8b ce		 mov	 ecx, esi

; 210  : 			p++;

  001b0	47		 inc	 edi
  001b1	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  001b6	3c ff		 cmp	 al, -1
  001b8	75 ee		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 211  : 		}
; 212  : 		if (ch != 0x22 )

  001ba	3c 22		 cmp	 al, 34			; 00000022H
  001bc	74 0b		 je	 SHORT $LN27@GetToken

; 213  : 		{
; 214  : 			this->UnGetC(ch);

  001be	0f be c0	 movsx	 eax, al
$LN56@GetToken:
  001c1	50		 push	 eax
  001c2	8b ce		 mov	 ecx, esi
  001c4	e8 00 00 00 00	 call	 ?UnGetC@CWZScriptEncode@@IAEXH@Z ; CWZScriptEncode::UnGetC
$LN27@GetToken:

; 215  : 		}
; 216  : 		*p = 0;

  001c9	c6 07 00	 mov	 BYTE PTR [edi], 0

; 217  : 		return this->CurrentToken = T_NAME;

  001cc	33 c0		 xor	 eax, eax
  001ce	5f		 pop	 edi
  001cf	c7 86 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+128], 0
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  001db	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001de	33 cd		 xor	 ecx, ebp
  001e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e5	8b e5		 mov	 esp, ebp
  001e7	5d		 pop	 ebp
  001e8	c3		 ret	 0
$LN28@GetToken:

; 218  : 		break;
; 219  : 
; 220  : 	default:	
; 221  : 		if (isalpha(ch))

  001e9	51		 push	 ecx
  001ea	e8 00 00 00 00	 call	 _isalpha
  001ef	83 c4 04	 add	 esp, 4
  001f2	85 c0		 test	 eax, eax
  001f4	74 41		 je	 SHORT $LN29@GetToken

; 222  : 		{
; 223  : 			p=&this->TokenString[0];
; 224  : 			*p=ch;

  001f6	88 1f		 mov	 BYTE PTR [edi], bl

; 225  : 			p++;
; 226  : 
; 227  : 			while ( ((ch=this->GetC() ) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  001f8	8b ce		 mov	 ecx, esi
  001fa	47		 inc	 edi
  001fb	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  00200	8a d8		 mov	 bl, al
  00202	80 fb ff	 cmp	 bl, -1
  00205	74 2b		 je	 SHORT $LN55@GetToken
$LL13@GetToken:
  00207	80 fb 2e	 cmp	 bl, 46			; 0000002eH
  0020a	74 15		 je	 SHORT $LN31@GetToken
  0020c	80 fb 5f	 cmp	 bl, 95			; 0000005fH
  0020f	74 10		 je	 SHORT $LN31@GetToken
  00211	0f be c3	 movsx	 eax, bl
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 _isalnum
  0021a	83 c4 04	 add	 esp, 4
  0021d	85 c0		 test	 eax, eax
  0021f	74 11		 je	 SHORT $LN55@GetToken
$LN31@GetToken:

; 228  : 			{
; 229  : 				*p=ch;

  00221	88 1f		 mov	 BYTE PTR [edi], bl
  00223	8b ce		 mov	 ecx, esi

; 230  : 				p++;

  00225	47		 inc	 edi
  00226	e8 00 00 00 00	 call	 ?GetC@CWZScriptEncode@@IAEHXZ ; CWZScriptEncode::GetC
  0022b	8a d8		 mov	 bl, al
  0022d	80 fb ff	 cmp	 bl, -1
  00230	75 d5		 jne	 SHORT $LL13@GetToken
$LN55@GetToken:

; 231  : 				
; 232  : 			}
; 233  : 
; 234  : 			this->UnGetC(ch);

  00232	0f be c3	 movsx	 eax, bl

; 235  : 			*p=0;
; 236  : 			this->CurrentToken=T_NAME;
; 237  : 			return T_NAME;

  00235	eb 8a		 jmp	 SHORT $LN56@GetToken
$LN29@GetToken:
  00237	5f		 pop	 edi

; 238  : 		}
; 239  : 		else
; 240  : 		{
; 241  : 			return this->CurrentToken = T_SMD_ERROR;

  00238	c7 86 80 00 00
	00 3c 00 00 00	 mov	 DWORD PTR [esi+128], 60	; 0000003cH
  00242	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  00247	5e		 pop	 esi
  00248	5b		 pop	 ebx

; 242  : 		}
; 243  : 		break;
; 244  : 
; 245  : 	}
; 246  : 
; 247  : }

  00249	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024c	33 cd		 xor	 ecx, ebp
  0024e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00253	8b e5		 mov	 esp, ebp
  00255	5d		 pop	 ebp
  00256	c3		 ret	 0
$LN38@GetToken:
  00257	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025a	b8 02 00 00 00	 mov	 eax, 2
  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	33 cd		 xor	 ecx, ebp
  00263	5b		 pop	 ebx
  00264	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00269	8b e5		 mov	 esp, ebp
  0026b	5d		 pop	 ebp
  0026c	c3		 ret	 0
  0026d	0f 1f 00	 npad	 3
$LN58@GetToken:
  00270	00 00 00 00	 DD	 $LN26@GetToken
  00274	00 00 00 00	 DD	 $LN19@GetToken
  00278	00 00 00 00	 DD	 $LN21@GetToken
  0027c	00 00 00 00	 DD	 $LN24@GetToken
  00280	00 00 00 00	 DD	 $LN20@GetToken
  00284	00 00 00 00	 DD	 $LN22@GetToken
  00288	00 00 00 00	 DD	 $LN23@GetToken
  0028c	00 00 00 00	 DD	 $LN28@GetToken
$LN53@GetToken:
  00290	00		 DB	 0
  00291	01		 DB	 1
  00292	07		 DB	 7
  00293	07		 DB	 7
  00294	07		 DB	 7
  00295	07		 DB	 7
  00296	07		 DB	 7
  00297	07		 DB	 7
  00298	07		 DB	 7
  00299	07		 DB	 7
  0029a	02		 DB	 2
  0029b	03		 DB	 3
  0029c	03		 DB	 3
  0029d	07		 DB	 7
  0029e	03		 DB	 3
  0029f	03		 DB	 3
  002a0	03		 DB	 3
  002a1	03		 DB	 3
  002a2	03		 DB	 3
  002a3	03		 DB	 3
  002a4	03		 DB	 3
  002a5	03		 DB	 3
  002a6	03		 DB	 3
  002a7	03		 DB	 3
  002a8	07		 DB	 7
  002a9	04		 DB	 4
  002aa	07		 DB	 7
  002ab	07		 DB	 7
  002ac	07		 DB	 7
  002ad	07		 DB	 7
  002ae	07		 DB	 7
  002af	07		 DB	 7
  002b0	07		 DB	 7
  002b1	07		 DB	 7
  002b2	07		 DB	 7
  002b3	07		 DB	 7
  002b4	07		 DB	 7
  002b5	07		 DB	 7
  002b6	07		 DB	 7
  002b7	07		 DB	 7
  002b8	07		 DB	 7
  002b9	07		 DB	 7
  002ba	07		 DB	 7
  002bb	07		 DB	 7
  002bc	07		 DB	 7
  002bd	07		 DB	 7
  002be	07		 DB	 7
  002bf	07		 DB	 7
  002c0	07		 DB	 7
  002c1	07		 DB	 7
  002c2	07		 DB	 7
  002c3	07		 DB	 7
  002c4	07		 DB	 7
  002c5	07		 DB	 7
  002c6	07		 DB	 7
  002c7	07		 DB	 7
  002c8	07		 DB	 7
  002c9	07		 DB	 7
  002ca	07		 DB	 7
  002cb	07		 DB	 7
  002cc	07		 DB	 7
  002cd	07		 DB	 7
  002ce	07		 DB	 7
  002cf	07		 DB	 7
  002d0	07		 DB	 7
  002d1	07		 DB	 7
  002d2	07		 DB	 7
  002d3	07		 DB	 7
  002d4	07		 DB	 7
  002d5	07		 DB	 7
  002d6	07		 DB	 7
  002d7	07		 DB	 7
  002d8	07		 DB	 7
  002d9	07		 DB	 7
  002da	07		 DB	 7
  002db	07		 DB	 7
  002dc	07		 DB	 7
  002dd	07		 DB	 7
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	07		 DB	 7
  002e7	07		 DB	 7
  002e8	07		 DB	 7
  002e9	05		 DB	 5
  002ea	07		 DB	 7
  002eb	06		 DB	 6
?GetToken@CWZScriptEncode@@QAE?AW4WZSMDToken@@XZ ENDP	; CWZScriptEncode::GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z PROC ; CWZScriptEncode::SetScriptParsingBuffer, COMDAT
; _this$ = ecx

; 109  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 110  : 	this->m_pBuffer = buffer;

  00003	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 111  : 	this->m_iBufferSize = size;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0000c	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 112  : 	this->m_iBufferCount = 0;

  0000f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 113  : }

  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ENDP ; CWZScriptEncode::SetScriptParsingBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?Close@CWZScriptEncode@@QAEXXZ
_TEXT	SEGMENT
?Close@CWZScriptEncode@@QAEXXZ PROC			; CWZScriptEncode::Close, COMDAT
; _this$ = ecx

; 65   : 	if ( this->m_pBuffer != 0)

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $LN2@Close

; 66   : 	{
; 67   : 		free( this->m_pBuffer );

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 _free
  0000d	59		 pop	 ecx
$LN2@Close:

; 68   : 	}
; 69   : }

  0000e	c3		 ret	 0
?Close@CWZScriptEncode@@QAEXXZ ENDP			; CWZScriptEncode::Close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?Open@CWZScriptEncode@@QAEHPAD@Z
_TEXT	SEGMENT
_iReadFileSize$ = -4					; size = 4
_pBuffer$1$ = 8						; size = 4
_filename$ = 8						; size = 4
?Open@CWZScriptEncode@@QAEHPAD@Z PROC			; CWZScriptEncode::Open, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 30   : 	int filesize;
; 31   : 	char* pBuffer;
; 32   : 	int iReadFileSize;
; 33   : 
; 34   : 	if ( this->m_hFile != INVALID_HANDLE_VALUE )

  00007	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0000a	83 f8 ff	 cmp	 eax, -1
  0000d	74 07		 je	 SHORT $LN2@Open

; 35   : 	{
; 36   : 		CloseHandle( this->m_hFile );

  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@Open:

; 37   : 	}
; 38   : 
; 39   : 	this->m_hFile = CreateFile(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0x80 , NULL); // 0x80 == NORMAL

  00016	6a 00		 push	 0
  00018	68 80 00 00 00	 push	 128			; 00000080H
  0001d	6a 03		 push	 3
  0001f	6a 00		 push	 0
  00021	6a 01		 push	 1
  00023	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00028	ff 75 08	 push	 DWORD PTR _filename$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00031	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 40   : 
; 41   : 	if ( this->m_hFile == INVALID_HANDLE_VALUE )

  00034	83 f8 ff	 cmp	 eax, -1
  00037	75 09		 jne	 SHORT $LN3@Open

; 42   : 	{
; 43   : 		return 0;

  00039	33 c0		 xor	 eax, eax
  0003b	5f		 pop	 edi

; 61   : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN3@Open:
  00042	56		 push	 esi

; 44   : 	}
; 45   : 
; 46   : 	filesize = GetFileSize(this->m_hFile , NULL);

  00043	6a 00		 push	 0
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  0004c	8b f0		 mov	 esi, eax

; 47   : 	pBuffer = (char*)malloc(filesize);

  0004e	56		 push	 esi
  0004f	e8 00 00 00 00	 call	 _malloc
  00054	83 c4 04	 add	 esp, 4
  00057	89 45 08	 mov	 DWORD PTR _pBuffer$1$[ebp], eax

; 48   : 	ReadFile(this->m_hFile, (void*)pBuffer, filesize, (unsigned long*)&iReadFileSize, 0);

  0005a	8d 4d fc	 lea	 ecx, DWORD PTR _iReadFileSize$[ebp]
  0005d	6a 00		 push	 0
  0005f	51		 push	 ecx
  00060	56		 push	 esi
  00061	50		 push	 eax
  00062	ff 77 10	 push	 DWORD PTR [edi+16]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20

; 49   : 
; 50   : 	if ( iReadFileSize == 0 )

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _iReadFileSize$[ebp]

; 51   : 	{
; 52   : 		this->Close();

  0006e	8b cf		 mov	 ecx, edi
  00070	85 c0		 test	 eax, eax
  00072	75 0f		 jne	 SHORT $LN4@Open
  00074	e8 00 00 00 00	 call	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close
  00079	5e		 pop	 esi

; 53   : 		return 0;

  0007a	33 c0		 xor	 eax, eax
  0007c	5f		 pop	 edi

; 61   : }

  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN4@Open:

; 54   : 	}
; 55   : 
; 56   : 	this->Encode(pBuffer, iReadFileSize);

  00083	8b 75 08	 mov	 esi, DWORD PTR _pBuffer$1$[ebp]
  00086	50		 push	 eax
  00087	56		 push	 esi
  00088	e8 00 00 00 00	 call	 ?Encode@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::Encode

; 57   : 	this->SetScriptParsingBuffer(pBuffer, iReadFileSize);

  0008d	ff 75 fc	 push	 DWORD PTR _iReadFileSize$[ebp]
  00090	8b cf		 mov	 ecx, edi
  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 ?SetScriptParsingBuffer@CWZScriptEncode@@QAEXPADH@Z ; CWZScriptEncode::SetScriptParsingBuffer

; 58   : 
; 59   : 	CloseHandle(this->m_hFile );

  00098	ff 77 10	 push	 DWORD PTR [edi+16]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  000a1	5e		 pop	 esi

; 60   : 	return 1;

  000a2	b8 01 00 00 00	 mov	 eax, 1
  000a7	5f		 pop	 edi

; 61   : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
?Open@CWZScriptEncode@@QAEHPAD@Z ENDP			; CWZScriptEncode::Open
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ??1CWZScriptEncode@@UAE@XZ
_TEXT	SEGMENT
??1CWZScriptEncode@@UAE@XZ PROC				; CWZScriptEncode::~CWZScriptEncode, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWZScriptEncode@@6B@

; 24   : 	this->Close();

  00006	e9 00 00 00 00	 jmp	 ?Close@CWZScriptEncode@@QAEXXZ ; CWZScriptEncode::Close
??1CWZScriptEncode@@UAE@XZ ENDP				; CWZScriptEncode::~CWZScriptEncode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ??0CWZScriptEncode@@QAE@XZ
_TEXT	SEGMENT
??0CWZScriptEncode@@QAE@XZ PROC				; CWZScriptEncode::CWZScriptEncode, COMDAT
; _this$ = ecx

; 15   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CWZScriptEncode@@6B@

; 16   : 	this->m_pBuffer=0;
; 17   : 	this->m_iBufferSize=0;
; 18   : 	this->m_iBufferCount=0;
; 19   : 	this->m_hFile=INVALID_HANDLE_VALUE;
; 20   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [ecx+16], -1
  00024	c3		 ret	 0
??0CWZScriptEncode@@QAE@XZ ENDP				; CWZScriptEncode::CWZScriptEncode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\common\wzscriptencode.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
