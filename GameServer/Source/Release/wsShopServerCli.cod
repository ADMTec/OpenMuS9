; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\wsShopServerCli.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?SetProtocolCore@wsShopServerCli@@QAEHP6AXKPAEH@Z@Z ; wsShopServerCli::SetProtocolCore
PUBLIC	?FDWRITE_MsgDataSend@wsShopServerCli@@QAEHXZ	; wsShopServerCli::FDWRITE_MsgDataSend
PUBLIC	?DataRecv@wsShopServerCli@@QAEHXZ		; wsShopServerCli::DataRecv
PUBLIC	?DataSend@wsShopServerCli@@QAEHPADH@Z		; wsShopServerCli::DataSend
PUBLIC	?Connect@wsShopServerCli@@QAEHPADGK@Z		; wsShopServerCli::Connect
PUBLIC	??0wsShopServerCli@@QAE@XZ			; wsShopServerCli::wsShopServerCli
PUBLIC	??1wsShopServerCli@@UAE@XZ			; wsShopServerCli::~wsShopServerCli
PUBLIC	??_GwsShopServerCli@@UAEPAXI@Z			; wsShopServerCli::`scalar deleting destructor'
PUBLIC	??_7wsShopServerCli@@6B@			; wsShopServerCli::`vftable'
PUBLIC	??_C@_0BE@MIAGCGEJ@wsShopServerCli?4cpp?$AA@	; `string'
PUBLIC	??_C@_0BF@CPKGJHBM@?5Connect?5Error?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BL@INMHEGJC@server?5name?5not?5found?5?$FL?$CFs?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BP@DJPBKKNL@Client?5WSAAsyncSelect?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BG@DJOPGDCB@error?9L3?5?3?5?$CFd?5?$CI?$CFs?5?$CFd?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CG@DMMIJENA@error?9L3?5?3?5buffer?5error?5closed?5?$CF@ ; `string'
PUBLIC	??_C@_0CK@NAOKACP@error?9L3?5?3?5Copy1?5?3?5nLeft?3?$CFd?5len?3@ ; `string'
PUBLIC	??_C@_0CC@HECGJOBH@error?9L3?5?3?5send?$CI?$CJ?5?5result?5is?5zer@ ; `string'
PUBLIC	??_C@_0BL@NPCCNEKA@FD_WRITE?5send?$CI?$CJ?5fail?5?$CGd?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CE@HIKCACFP@FD_WRITE?5send?$CI?$CJ?5WSAEWOULDBLOCK?5?3@ ; `string'
PUBLIC	??_C@_0BJ@BMEBGMFO@send?$CI?$CJ?5result?5is?5zero?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CC@CMOPGBFG@error?9L3?5?3?5nDx?5?$CFd?5m_SendBufLen?5?$CF@ ; `string'
PUBLIC	??_C@_0CE@LOFMLGPB@error?9L3?5?3?5closed?5?$CFd?5?9?5buff?3?$CFd?$CI?$CF@ ; `string'
PUBLIC	??_C@_0BJ@MHCMJICL@error?9L3?5?3?5recv?5error?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BD@JDAMFKGN@error?9L2?5?3?5size?5?$CFd?$AA@ ; `string'
PUBLIC	??_R4wsShopServerCli@@6B@			; wsShopServerCli::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVwsShopServerCli@@@8			; wsShopServerCli `RTTI Type Descriptor'
PUBLIC	??_R3wsShopServerCli@@8				; wsShopServerCli::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2wsShopServerCli@@8				; wsShopServerCli::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@wsShopServerCli@@8		; wsShopServerCli::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVMyWinsockBase@@@8			; MyWinsockBase `RTTI Type Descriptor'
PUBLIC	??_R3MyWinsockBase@@8				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MyWinsockBase@@8				; MyWinsockBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MyWinsockBase@@8			; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__connect@12:PROC
EXTRN	__imp__inet_addr@4:PROC
EXTRN	__imp__ntohs@4:PROC
EXTRN	__imp__recv@16:PROC
EXTRN	__imp__send@16:PROC
EXTRN	__imp__gethostbyname@4:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
EXTRN	__imp__WSAAsyncSelect@16:PROC
EXTRN	?Close@MyWinsockBase@@QAEHI@Z:PROC		; MyWinsockBase::Close
EXTRN	?Close@MyWinsockBase@@QAEHXZ:PROC		; MyWinsockBase::Close
EXTRN	?SetConnect@MyWinsockBase@@QAEXH@Z:PROC		; MyWinsockBase::SetConnect
EXTRN	??0MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::MyWinsockBase
EXTRN	??1MyWinsockBase@@QAE@XZ:PROC			; MyWinsockBase::~MyWinsockBase
EXTRN	??_EwsShopServerCli@@UAEPAXI@Z:PROC		; wsShopServerCli::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddC@@3P6AXEPADZZA:DWORD			; LogAddC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@MyWinsockBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R2MyWinsockBase@@8
rdata$r	SEGMENT
??_R2MyWinsockBase@@8 DD FLAT:??_R1A@?0A@EA@MyWinsockBase@@8 ; MyWinsockBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MyWinsockBase@@8
rdata$r	SEGMENT
??_R3MyWinsockBase@@8 DD 00H				; MyWinsockBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMyWinsockBase@@@8
data$r	SEGMENT
??_R0?AVMyWinsockBase@@@8 DD FLAT:??_7type_info@@6B@	; MyWinsockBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMyWinsockBase@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@MyWinsockBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@MyWinsockBase@@8 DD FLAT:??_R0?AVMyWinsockBase@@@8 ; MyWinsockBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@wsShopServerCli@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@wsShopServerCli@@8 DD FLAT:??_R0?AVwsShopServerCli@@@8 ; wsShopServerCli::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3wsShopServerCli@@8
rdata$r	ENDS
;	COMDAT ??_R2wsShopServerCli@@8
rdata$r	SEGMENT
??_R2wsShopServerCli@@8 DD FLAT:??_R1A@?0A@EA@wsShopServerCli@@8 ; wsShopServerCli::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@MyWinsockBase@@8
rdata$r	ENDS
;	COMDAT ??_R3wsShopServerCli@@8
rdata$r	SEGMENT
??_R3wsShopServerCli@@8 DD 00H				; wsShopServerCli::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2wsShopServerCli@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVwsShopServerCli@@@8
data$r	SEGMENT
??_R0?AVwsShopServerCli@@@8 DD FLAT:??_7type_info@@6B@	; wsShopServerCli `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVwsShopServerCli@@', 00H
data$r	ENDS
;	COMDAT ??_R4wsShopServerCli@@6B@
rdata$r	SEGMENT
??_R4wsShopServerCli@@6B@ DD 00H			; wsShopServerCli::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVwsShopServerCli@@@8
	DD	FLAT:??_R3wsShopServerCli@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@JDAMFKGN@error?9L2?5?3?5size?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BD@JDAMFKGN@error?9L2?5?3?5size?5?$CFd?$AA@ DB 'error-L2 : size %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MHCMJICL@error?9L3?5?3?5recv?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@MHCMJICL@error?9L3?5?3?5recv?5error?5?$CFd?$AA@ DB 'error-L3 : '
	DB	'recv error %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LOFMLGPB@error?9L3?5?3?5closed?5?$CFd?5?9?5buff?3?$CFd?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@LOFMLGPB@error?9L3?5?3?5closed?5?$CFd?5?9?5buff?3?$CFd?$CI?$CF@ DB 'e'
	DB	'rror-L3 : closed %d - buff:%d(%d) ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CMOPGBFG@error?9L3?5?3?5nDx?5?$CFd?5m_SendBufLen?5?$CF@
CONST	SEGMENT
??_C@_0CC@CMOPGBFG@error?9L3?5?3?5nDx?5?$CFd?5m_SendBufLen?5?$CF@ DB 'err'
	DB	'or-L3 : nDx %d m_SendBufLen %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BMEBGMFO@send?$CI?$CJ?5result?5is?5zero?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@BMEBGMFO@send?$CI?$CJ?5result?5is?5zero?5?$CFd?$AA@ DB 'send() '
	DB	'result is zero %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HIKCACFP@FD_WRITE?5send?$CI?$CJ?5WSAEWOULDBLOCK?5?3@
CONST	SEGMENT
??_C@_0CE@HIKCACFP@FD_WRITE?5send?$CI?$CJ?5WSAEWOULDBLOCK?5?3@ DB 'FD_WRI'
	DB	'TE send() WSAEWOULDBLOCK : %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NPCCNEKA@FD_WRITE?5send?$CI?$CJ?5fail?5?$CGd?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BL@NPCCNEKA@FD_WRITE?5send?$CI?$CJ?5fail?5?$CGd?5?$CFd?$AA@ DB 'FD'
	DB	'_WRITE send() fail &d %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HECGJOBH@error?9L3?5?3?5send?$CI?$CJ?5?5result?5is?5zer@
CONST	SEGMENT
??_C@_0CC@HECGJOBH@error?9L3?5?3?5send?$CI?$CJ?5?5result?5is?5zer@ DB 'er'
	DB	'ror-L3 : send()  result is zero', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NAOKACP@error?9L3?5?3?5Copy1?5?3?5nLeft?3?$CFd?5len?3@
CONST	SEGMENT
??_C@_0CK@NAOKACP@error?9L3?5?3?5Copy1?5?3?5nLeft?3?$CFd?5len?3@ DB 'erro'
	DB	'r-L3 : Copy1 : nLeft:%d len:%d nDx:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DMMIJENA@error?9L3?5?3?5buffer?5error?5closed?5?$CF@
CONST	SEGMENT
??_C@_0CG@DMMIJENA@error?9L3?5?3?5buffer?5error?5closed?5?$CF@ DB 'error-'
	DB	'L3 : buffer error closed %d, %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DJOPGDCB@error?9L3?5?3?5?$CFd?5?$CI?$CFs?5?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@DJOPGDCB@error?9L3?5?3?5?$CFd?5?$CI?$CFs?5?$CFd?$CJ?$AA@ DB 'er'
	DB	'ror-L3 : %d (%s %d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DJPBKKNL@Client?5WSAAsyncSelect?5error?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BP@DJPBKKNL@Client?5WSAAsyncSelect?5error?5?$CFd?$AA@ DB 'Client W'
	DB	'SAAsyncSelect error %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@INMHEGJC@server?5name?5not?5found?5?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0BL@INMHEGJC@server?5name?5not?5found?5?$FL?$CFs?$FN?$AA@ DB 'serve'
	DB	'r name not found [%s]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CPKGJHBM@?5Connect?5Error?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BF@CPKGJHBM@?5Connect?5Error?5?$CFs?5?$CFd?$AA@ DB ' Connect Error'
	DB	' %s %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MIAGCGEJ@wsShopServerCli?4cpp?$AA@
CONST	SEGMENT
??_C@_0BE@MIAGCGEJ@wsShopServerCli?4cpp?$AA@ DB 'wsShopServerCli.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7wsShopServerCli@@6B@
CONST	SEGMENT
??_7wsShopServerCli@@6B@ DD FLAT:??_R4wsShopServerCli@@6B@ ; wsShopServerCli::`vftable'
	DD	FLAT:??_EwsShopServerCli@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GwsShopServerCli@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GwsShopServerCli@@UAEPAXI@Z PROC			; wsShopServerCli::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1wsShopServerCli@@UAE@XZ ; wsShopServerCli::~wsShopServerCli
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 28 00 19 00	 push	 1638440			; 00190028H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GwsShopServerCli@@UAEPAXI@Z ENDP			; wsShopServerCli::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ??1wsShopServerCli@@UAE@XZ
_TEXT	SEGMENT
??1wsShopServerCli@@UAE@XZ PROC				; wsShopServerCli::~wsShopServerCli, COMDAT
; _this$ = ecx

; 20   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7wsShopServerCli@@6B@

; 21   : 	return;
; 22   : }

  00006	83 c1 04	 add	 ecx, 4
  00009	e9 00 00 00 00	 jmp	 ??1MyWinsockBase@@QAE@XZ ; MyWinsockBase::~MyWinsockBase
??1wsShopServerCli@@UAE@XZ ENDP				; wsShopServerCli::~wsShopServerCli
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ??0wsShopServerCli@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0wsShopServerCli@@QAE@XZ PROC				; wsShopServerCli::wsShopServerCli, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	e8 00 00 00 00	 call	 ??0MyWinsockBase@@QAE@XZ ; MyWinsockBase::MyWinsockBase
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7wsShopServerCli@@6B@

; 16   : 	return;
; 17   : }

  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0wsShopServerCli@@QAE@XZ ENDP				; wsShopServerCli::wsShopServerCli
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?Connect@wsShopServerCli@@QAEHPADGK@Z
_TEXT	SEGMENT
_addr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_ip_addr$ = 8						; size = 4
_port$ = 12						; size = 2
_WinMsgNum$ = 16					; size = 4
?Connect@wsShopServerCli@@QAEHPADGK@Z PROC		; wsShopServerCli::Connect, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	57		 push	 edi
  00014	8b 7d 08	 mov	 edi, DWORD PTR _ip_addr$[ebp]

; 35   : 	hostent* host = NULL;
; 36   : 	sockaddr_in addr;
; 37   : 	int nResult;
; 38   : 
; 39   : 	if ( this->m_hWnd == NULL )

  00017	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  0001b	75 29		 jne	 SHORT $LN2@Connect

; 40   : 	{
; 41   : 		LogAdd(" Connect Error %s %d", __FILE__, __LINE__);

  0001d	6a 29		 push	 41			; 00000029H
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MIAGCGEJ@wsShopServerCli?4cpp?$AA@
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CPKGJHBM@?5Connect?5Error?5?$CFs?5?$CFd?$AA@
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 		return FALSE;

  00032	33 c0		 xor	 eax, eax
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 82   : 
; 83   : 	return TRUE;
; 84   : }

  00036	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00039	33 cd		 xor	 ecx, ebp
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Connect:

; 43   : 	}
; 44   : 
; 45   : 	addr.sin_family = AF_INET;
; 46   : 	addr.sin_port =  ntohs(port);

  00046	ff 75 0c	 push	 DWORD PTR _port$[ebp]
  00049	b8 02 00 00 00	 mov	 eax, 2
  0004e	66 89 45 ec	 mov	 WORD PTR _addr$[ebp], ax
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ntohs@4

; 47   : 	addr.sin_addr.S_un.S_addr = inet_addr(ip_addr);

  00058	57		 push	 edi
  00059	66 89 45 ee	 mov	 WORD PTR _addr$[ebp+2], ax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  00063	89 45 f0	 mov	 DWORD PTR _addr$[ebp+4], eax

; 48   : 
; 49   : 	if ( addr.sin_addr.S_un.S_addr == -1 )

  00066	83 f8 ff	 cmp	 eax, -1
  00069	75 46		 jne	 SHORT $LN3@Connect

; 50   : 	{
; 51   : 		host = gethostbyname(ip_addr);

  0006b	57		 push	 edi
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__gethostbyname@4
  00072	8b c8		 mov	 ecx, eax

; 52   : 		if ( host == 0 )

  00074	85 c9		 test	 ecx, ecx
  00076	75 23		 jne	 SHORT $LN4@Connect

; 53   : 		{
; 54   : 			LogAdd("server name not found [%s]", ip_addr);

  00078	57		 push	 edi
  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@INMHEGJC@server?5name?5not?5found?5?$FL?$CFs?$FN?$AA@
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00084	83 c4 08	 add	 esp, 8

; 55   : 			return FALSE;

  00087	33 c0		 xor	 eax, eax
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi

; 82   : 
; 83   : 	return TRUE;
; 84   : }

  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	33 cd		 xor	 ecx, ebp
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 0c 00	 ret	 12			; 0000000cH
$LN4@Connect:

; 56   : 		}
; 57   : 
; 58   : 		memcpy(&addr.sin_addr.S_un.S_addr, *host->h_addr_list  , host->h_length  );	

  0009b	0f bf 41 0a	 movsx	 eax, WORD PTR [ecx+10]
  0009f	50		 push	 eax
  000a0	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000a3	ff 30		 push	 DWORD PTR [eax]
  000a5	8d 45 f0	 lea	 eax, DWORD PTR _addr$[ebp+4]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _memcpy
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Connect:

; 59   : 	}
; 60   : 
; 61   : 	nResult=connect(this->m_socket, (sockaddr*)&addr, 16);

  000b1	6a 10		 push	 16			; 00000010H
  000b3	8d 45 ec	 lea	 eax, DWORD PTR _addr$[ebp]
  000b6	50		 push	 eax
  000b7	ff 76 0c	 push	 DWORD PTR [esi+12]
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__connect@12

; 62   : 
; 63   : 	if (nResult== -1)

  000c0	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__WSAGetLastError@0
  000c6	83 f8 ff	 cmp	 eax, -1
  000c9	75 28		 jne	 SHORT $LN6@Connect

; 64   : 	{
; 65   : 		if ( WSAGetLastError() != WSAEWOULDBLOCK)

  000cb	ff d7		 call	 edi
  000cd	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  000d2	74 1f		 je	 SHORT $LN6@Connect

; 66   : 		{
; 67   : 			this->Close(this->m_socket );

  000d4	ff 76 0c	 push	 DWORD PTR [esi+12]
  000d7	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000da	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHI@Z ; MyWinsockBase::Close
  000df	5f		 pop	 edi

; 68   : 			return FALSE;

  000e0	33 c0		 xor	 eax, eax
  000e2	5e		 pop	 esi

; 82   : 
; 83   : 	return TRUE;
; 84   : }

  000e3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e6	33 cd		 xor	 ecx, ebp
  000e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
$LN6@Connect:

; 69   : 		}
; 70   : 	}
; 71   : 
; 72   : 	nResult=WSAAsyncSelect(this->m_socket, this->m_hWnd , WinMsgNum, FD_READ|FD_WRITE|FD_CLOSE);

  000f3	6a 23		 push	 35			; 00000023H
  000f5	ff 75 10	 push	 DWORD PTR _WinMsgNum$[ebp]
  000f8	ff 76 08	 push	 DWORD PTR [esi+8]
  000fb	ff 76 0c	 push	 DWORD PTR [esi+12]
  000fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAAsyncSelect@16

; 73   : 
; 74   : 	if ( nResult == -1 )

  00104	83 f8 ff	 cmp	 eax, -1
  00107	75 2e		 jne	 SHORT $LN7@Connect

; 75   : 	{
; 76   : 		closesocket(this->m_socket );

  00109	ff 76 0c	 push	 DWORD PTR [esi+12]
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 77   : 		LogAdd("Client WSAAsyncSelect error %d", WSAGetLastError());

  00112	ff d7		 call	 edi
  00114	50		 push	 eax
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DJPBKKNL@Client?5WSAAsyncSelect?5error?5?$CFd?$AA@
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00120	83 c4 08	 add	 esp, 8

; 78   : 		return FALSE;

  00123	33 c0		 xor	 eax, eax
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi

; 82   : 
; 83   : 	return TRUE;
; 84   : }

  00127	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012a	33 cd		 xor	 ecx, ebp
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 0c 00	 ret	 12			; 0000000cH
$LN7@Connect:

; 79   : 	}
; 80   : 	this->m_SendBufLen=0;
; 81   : 	this->SetConnect(TRUE);

  00137	6a 01		 push	 1
  00139	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0013c	c7 86 1c 80 0c
	00 00 00 00 00	 mov	 DWORD PTR [esi+819228], 0
  00146	e8 00 00 00 00	 call	 ?SetConnect@MyWinsockBase@@QAEXH@Z ; MyWinsockBase::SetConnect

; 82   : 
; 83   : 	return TRUE;
; 84   : }

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	5f		 pop	 edi
  00154	33 cd		 xor	 ecx, ebp
  00156	5e		 pop	 esi
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	8b e5		 mov	 esp, ebp
  0015e	5d		 pop	 ebp
  0015f	c2 0c 00	 ret	 12			; 0000000cH
?Connect@wsShopServerCli@@QAEHPADGK@Z ENDP		; wsShopServerCli::Connect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?DataSend@wsShopServerCli@@QAEHPADH@Z
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_nDx$1$ = 12						; size = 4
_len$ = 12						; size = 4
?DataSend@wsShopServerCli@@QAEHPADH@Z PROC		; wsShopServerCli::DataSend, COMDAT
; _this$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 91   : 	int nResult;
; 92   : 	int nLeft;
; 93   : 	int nDx;	// Degeneration X :)
; 94   : 	LPBYTE sendbuf;
; 95   : 	int* sendbuflen;
; 96   : 	
; 97   : 	if ( len <= 0 )

  00005	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	85 f6		 test	 esi, esi
  0000c	7e 4a		 jle	 SHORT $LN29@DataSend

; 98   : 	{
; 99   : 		return 0;
; 100  : 	}
; 101  : 
; 102  : 	if ( this->m_socket  == INVALID_SOCKET )	// 

  0000e	83 7b 0c ff	 cmp	 DWORD PTR [ebx+12], -1
  00012	74 44		 je	 SHORT $LN29@DataSend

; 103  : 	{
; 104  : 		return 0;
; 105  : 	}
; 106  : 
; 107  : 	nDx = 0;
; 108  : 
; 109  : 	sendbuf = this->m_SendBuf;
; 110  : 	sendbuflen= &len;	// Strange, dangeorus
; 111  : 
; 112  : 	if ( this->m_SendBufLen   > 0 )

  00014	8b 93 1c 80 0c
	00		 mov	 edx, DWORD PTR [ebx+819228]
  0001a	33 c9		 xor	 ecx, ecx
  0001c	89 4d 0c	 mov	 DWORD PTR _nDx$1$[ebp], ecx
  0001f	85 d2		 test	 edx, edx
  00021	7e 3d		 jle	 SHORT $LN6@DataSend

; 113  : 	{
; 114  : 		if ( (this->m_SendBufLen +len) < 819200 )

  00023	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  00026	3d 00 80 0c 00	 cmp	 eax, 819200		; 000c8000H
  0002b	7d 23		 jge	 SHORT $LN7@DataSend

; 115  : 		{
; 116  : 			memcpy( &this->m_SendBuf[this->m_SendBufLen]  , buf, len);	// Review this later

  0002d	56		 push	 esi
  0002e	ff 75 08	 push	 DWORD PTR _buf$[ebp]
  00031	8d 43 1c	 lea	 eax, DWORD PTR [ebx+28]
  00034	03 c2		 add	 eax, edx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 _memcpy
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 117  : 
; 118  : 			this->m_SendBufLen +=len;
; 119  : 			return 1;

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	01 b3 1c 80 0c
	00		 add	 DWORD PTR [ebx+819228], esi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx

; 178  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN7@DataSend:

; 120  : 		}
; 121  : 		this->Close();

  00050	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00053	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close
$LN29@DataSend:

; 122  : 		return FALSE;

  00058	5e		 pop	 esi
  00059	33 c0		 xor	 eax, eax
  0005b	5b		 pop	 ebx

; 178  : }

  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN6@DataSend:
  00060	57		 push	 edi

; 123  : 	}
; 124  : 
; 125  : 	nLeft= *sendbuflen;

  00061	8b fe		 mov	 edi, esi
$LL2@DataSend:

; 126  : 
; 127  : 	while ( true )
; 128  : 	{
; 129  : 		nResult=send(this->m_socket, (char*)&buf[nDx], (*sendbuflen - nDx), 0);

  00063	6a 00		 push	 0
  00065	8b c6		 mov	 eax, esi
  00067	2b c1		 sub	 eax, ecx
  00069	50		 push	 eax
  0006a	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0006d	03 c1		 add	 eax, ecx
  0006f	50		 push	 eax
  00070	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16

; 130  : 
; 131  : 		if ( nResult == -1)

  00079	83 f8 ff	 cmp	 eax, -1
  0007c	75 64		 jne	 SHORT $LN8@DataSend

; 132  : 		{
; 133  : 			if ( WSAGetLastError() != WSAEWOULDBLOCK )

  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00084	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00089	0f 85 91 00 00
	00		 jne	 $LN19@DataSend

; 139  : 			}
; 140  : 
; 141  : 			if ( (*sendbuflen + nLeft) > 819200 )

  0008f	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00092	3d 00 80 0c 00	 cmp	 eax, 819200		; 000c8000H
  00097	7f 6f		 jg	 SHORT $LN20@DataSend

; 147  : 			}
; 148  : 
; 149  : 			if ( nDx >= 0 )

  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _nDx$1$[ebp]
  0009c	85 c9		 test	 ecx, ecx
  0009e	78 54		 js	 SHORT $LN14@DataSend

; 150  : 			{
; 151  : 				memcpy( &this->m_SendBuf[this->m_SendBufLen],  &buf[nDx], nLeft);

  000a0	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  000a3	03 c1		 add	 eax, ecx
  000a5	57		 push	 edi
  000a6	50		 push	 eax
  000a7	8b 83 1c 80 0c
	00		 mov	 eax, DWORD PTR [ebx+819228]
  000ad	83 c0 1c	 add	 eax, 28			; 0000001cH
  000b0	03 c3		 add	 eax, ebx
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _memcpy

; 152  : 				
; 153  : 				this->m_SendBufLen +=nLeft;
; 154  : 
; 155  : 				LogAdd("error-L3 : Copy1 : nLeft:%d len:%d nDx:%d", nLeft, this->m_SendBufLen , nDx);

  000b8	ff 75 0c	 push	 DWORD PTR _nDx$1$[ebp]
  000bb	01 bb 1c 80 0c
	00		 add	 DWORD PTR [ebx+819228], edi
  000c1	ff b3 1c 80 0c
	00		 push	 DWORD PTR [ebx+819228]
  000c7	57		 push	 edi
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@NAOKACP@error?9L3?5?3?5Copy1?5?3?5nLeft?3?$CFd?5len?3@
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000d3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 173  : 		{
; 174  : 			break;
; 175  : 		}
; 176  : 	}
; 177  : 	return TRUE;

  000d6	b8 01 00 00 00	 mov	 eax, 1
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx

; 178  : }

  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8
$LN8@DataSend:

; 156  : 				return TRUE;
; 157  : 			}
; 158  : 		}
; 159  : 
; 160  : 		else if ( nResult == 0 )

  000e2	85 c0		 test	 eax, eax
  000e4	74 6d		 je	 SHORT $LN22@DataSend

; 167  : 		{
; 168  : 			nDx += nResult;

  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _nDx$1$[ebp]

; 163  : 			break;
; 164  : 		}
; 165  : 		
; 166  : 		if ( nResult >0 )

  000e9	7e 09		 jle	 SHORT $LN14@DataSend

; 167  : 		{
; 168  : 			nDx += nResult;

  000eb	03 c8		 add	 ecx, eax

; 169  : 			nLeft -= nResult;

  000ed	2b f8		 sub	 edi, eax
  000ef	89 4d 0c	 mov	 DWORD PTR _nDx$1$[ebp], ecx

; 170  : 			*sendbuflen -= nResult;

  000f2	2b f0		 sub	 esi, eax
$LN14@DataSend:

; 171  : 		}
; 172  : 		if ( nLeft <= 0)

  000f4	85 ff		 test	 edi, edi
  000f6	0f 8f 67 ff ff
	ff		 jg	 $LL2@DataSend

; 173  : 		{
; 174  : 			break;
; 175  : 		}
; 176  : 	}
; 177  : 	return TRUE;

  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi
  000fe	b8 01 00 00 00	 mov	 eax, 1
  00103	5b		 pop	 ebx

; 178  : }

  00104	5d		 pop	 ebp
  00105	c2 08 00	 ret	 8
$LN20@DataSend:

; 142  : 			{
; 143  : 				LogAddC(2,"error-L3 : buffer error closed %d, %d", (*sendbuflen+nLeft), 819200);

  00108	68 00 80 0c 00	 push	 819200			; 000c8000H
  0010d	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  00110	50		 push	 eax
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@DMMIJENA@error?9L3?5?3?5buffer?5error?5closed?5?$CF@
  00116	6a 02		 push	 2
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddC@@3P6AXEPADZZA ; LogAddC

; 144  : 				*sendbuflen = 0;
; 145  : 				this->Close(this->m_socket);
; 146  : 				return FALSE;

  0011e	eb 1c		 jmp	 SHORT $LN28@DataSend
$LN19@DataSend:

; 134  : 			{
; 135  : 				LogAdd("error-L3 : %d (%s %d)", WSAGetLastError(), __FILE__, __LINE__);

  00120	68 87 00 00 00	 push	 135			; 00000087H
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@MIAGCGEJ@wsShopServerCli?4cpp?$AA@
  0012a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00130	50		 push	 eax
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DJOPGDCB@error?9L3?5?3?5?$CFd?5?$CI?$CFs?5?$CFd?$CJ?$AA@
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
$LN28@DataSend:
  0013c	83 c4 10	 add	 esp, 16			; 00000010H

; 136  : 				*sendbuflen=0;
; 137  : 				this->Close(this->m_socket );

  0013f	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00142	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00145	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHI@Z ; MyWinsockBase::Close
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi

; 138  : 				return FALSE;

  0014c	33 c0		 xor	 eax, eax
  0014e	5b		 pop	 ebx

; 178  : }

  0014f	5d		 pop	 ebp
  00150	c2 08 00	 ret	 8
$LN22@DataSend:

; 161  : 		{
; 162  : 			LogAdd("error-L3 : send()  result is zero", WSAGetLastError());

  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00159	50		 push	 eax
  0015a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@HECGJOBH@error?9L3?5?3?5send?$CI?$CJ?5?5result?5is?5zer@
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00165	83 c4 08	 add	 esp, 8

; 173  : 		{
; 174  : 			break;
; 175  : 		}
; 176  : 	}
; 177  : 	return TRUE;

  00168	b8 01 00 00 00	 mov	 eax, 1
  0016d	5f		 pop	 edi
  0016e	5e		 pop	 esi
  0016f	5b		 pop	 ebx

; 178  : }

  00170	5d		 pop	 ebp
  00171	c2 08 00	 ret	 8
?DataSend@wsShopServerCli@@QAEHPADH@Z ENDP		; wsShopServerCli::DataSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?DataRecv@wsShopServerCli@@QAEHXZ
_TEXT	SEGMENT
?DataRecv@wsShopServerCli@@QAEHXZ PROC			; wsShopServerCli::DataRecv, COMDAT
; _this$ = ecx

; 237  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 238  : 	int nResult;
; 239  : 	unsigned char* recvbuf;
; 240  : 	int* recvbuflen;
; 241  : 	int lOfs;
; 242  : 	int size;
; 243  : 
; 244  : 	recvbuf= (UCHAR*)&this->m_RecvBuf[0]   ;
; 245  : 	recvbuflen=&this->m_RecvBufLen ;
; 246  : 	nResult=recv(this->m_socket , (CHAR*)&recvbuf[*recvbuflen], (819200-*recvbuflen), 0);

  00004	bf 00 80 0c 00	 mov	 edi, 819200		; 000c8000H
  00009	6a 00		 push	 0
  0000b	8b c7		 mov	 eax, edi
  0000d	8b 96 20 00 19
	00		 mov	 edx, DWORD PTR [esi+1638432]
  00013	2b c2		 sub	 eax, edx
  00015	50		 push	 eax
  00016	8d 86 20 80 0c
	00		 lea	 eax, DWORD PTR [esi+819232]
  0001c	03 c2		 add	 eax, edx
  0001e	50		 push	 eax
  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recv@16

; 247  : 
; 248  : 	if ( nResult == 0 )

  00028	85 c0		 test	 eax, eax
  0002a	75 2a		 jne	 SHORT $LN4@DataRecv

; 249  : 	{
; 250  : 		LogAdd("error-L3 : closed %d - buff:%d(%d) ", WSAGetLastError(), this->m_RecvBufLen, 819200 - *recvbuflen );

  0002c	2b be 20 00 19
	00		 sub	 edi, DWORD PTR [esi+1638432]
  00032	57		 push	 edi
  00033	ff b6 20 00 19
	00		 push	 DWORD PTR [esi+1638432]
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0003f	50		 push	 eax
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LOFMLGPB@error?9L3?5?3?5closed?5?$CFd?5?9?5buff?3?$CFd?$CI?$CF@
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
$LN23@DataRecv:

; 251  : 		return 1;

  0004e	5f		 pop	 edi
  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	5e		 pop	 esi

; 304  : 			break;
; 305  : 		}
; 306  : 		else
; 307  : 		{
; 308  : 			break;
; 309  : 		}
; 310  : 
; 311  : 	}
; 312  : 	return 0;
; 313  : }

  00055	c3		 ret	 0
$LN4@DataRecv:

; 252  : 	}
; 253  : 	else if (nResult == -1 )

  00056	83 f8 ff	 cmp	 eax, -1
  00059	75 28		 jne	 SHORT $LN6@DataRecv

; 254  : 	{
; 255  : 		if ( WSAGetLastError() == WSAEWOULDBLOCK )

  0005b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__WSAGetLastError@0
  00061	ff d6		 call	 esi
  00063	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00068	74 e4		 je	 SHORT $LN23@DataRecv

; 256  : 		{
; 257  : 			return 1;
; 258  : 		}
; 259  : 		LogAdd("error-L3 : recv error %d", WSAGetLastError() );

  0006a	ff d6		 call	 esi
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@MHCMJICL@error?9L3?5?3?5recv?5error?5?$CFd?$AA@
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00078	83 c4 08	 add	 esp, 8

; 260  : 		return 1;

  0007b	b8 01 00 00 00	 mov	 eax, 1
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi

; 304  : 			break;
; 305  : 		}
; 306  : 		else
; 307  : 		{
; 308  : 			break;
; 309  : 		}
; 310  : 
; 311  : 	}
; 312  : 	return 0;
; 313  : }

  00082	c3		 ret	 0
$LN6@DataRecv:

; 261  : 	}
; 262  : 
; 263  : 	*recvbuflen += nResult;

  00083	01 86 20 00 19
	00		 add	 DWORD PTR [esi+1638432], eax

; 264  : 
; 265  : 	if (*recvbuflen<3)

  00089	83 be 20 00 19
	00 03		 cmp	 DWORD PTR [esi+1638432], 3
  00090	7d 08		 jge	 SHORT $LN8@DataRecv

; 266  : 	{
; 267  : 		return 3;

  00092	5f		 pop	 edi
  00093	b8 03 00 00 00	 mov	 eax, 3
  00098	5e		 pop	 esi

; 304  : 			break;
; 305  : 		}
; 306  : 		else
; 307  : 		{
; 308  : 			break;
; 309  : 		}
; 310  : 
; 311  : 	}
; 312  : 	return 0;
; 313  : }

  00099	c3		 ret	 0
$LN8@DataRecv:

; 277  : 		size = lpHead->size;

  0009a	8b be 20 80 0c
	00		 mov	 edi, DWORD PTR [esi+819232]
  000a0	8d 8e 20 80 0c
	00		 lea	 ecx, DWORD PTR [esi+819232]
  000a6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a9	53		 push	 ebx
  000aa	33 db		 xor	 ebx, ebx

; 278  : 
; 279  : 		if ( size <= 0 )

  000ac	85 ff		 test	 edi, edi
  000ae	7e 3f		 jle	 SHORT $LN18@DataRecv
$LL2@DataRecv:

; 283  : 		}
; 284  : 
; 285  : 		if ( size <= *recvbuflen )

  000b0	3b be 20 00 19
	00		 cmp	 edi, DWORD PTR [esi+1638432]
  000b6	7f 4c		 jg	 SHORT $LN10@DataRecv

; 286  : 		{
; 287  : 			this->wsProtocolCore(dwMsgID, (LPBYTE)&recvbuf[lOfs], size);

  000b8	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  000bb	57		 push	 edi
  000bc	50		 push	 eax
  000bd	8b 86 24 00 19
	00		 mov	 eax, DWORD PTR [esi+1638436]
  000c3	52		 push	 edx
  000c4	ff d0		 call	 eax

; 288  : 			lOfs += size;
; 289  : 			*recvbuflen -= size;

  000c6	29 be 20 00 19
	00		 sub	 DWORD PTR [esi+1638432], edi
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  000cf	03 df		 add	 ebx, edi

; 290  : 
; 291  : 			if ( *recvbuflen <=  0 )

  000d1	83 be 20 00 19
	00 00		 cmp	 DWORD PTR [esi+1638432], 0
  000d8	7e 24		 jle	 SHORT $LN13@DataRecv

; 268  : 	}
; 269  : 
; 270  : 	lOfs=0;
; 271  : 	size=0;
; 272  : 
; 273  : 	while ( true )
; 274  : 	{
; 275  : 		protocol::MSG_HEADER * lpHead = (protocol::MSG_HEADER *)&recvbuf[lOfs];
; 276  : 		DWORD dwMsgID = lpHead->id;

  000da	8b bc 33 20 80
	0c 00		 mov	 edi, DWORD PTR [ebx+esi+819232]
  000e1	8d 8e 20 80 0c
	00		 lea	 ecx, DWORD PTR [esi+819232]
  000e7	8b 54 0b 04	 mov	 edx, DWORD PTR [ebx+ecx+4]

; 278  : 
; 279  : 		if ( size <= 0 )

  000eb	85 ff		 test	 edi, edi
  000ed	7f c1		 jg	 SHORT $LL2@DataRecv
$LN18@DataRecv:

; 280  : 		{
; 281  : 			LogAdd("error-L2 : size %d", size);

  000ef	57		 push	 edi
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JDAMFKGN@error?9L2?5?3?5size?5?$CFd?$AA@
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000fb	83 c4 08	 add	 esp, 8
$LN13@DataRecv:

; 282  : 			return 0;

  000fe	5b		 pop	 ebx
  000ff	5f		 pop	 edi
  00100	33 c0		 xor	 eax, eax
  00102	5e		 pop	 esi

; 304  : 			break;
; 305  : 		}
; 306  : 		else
; 307  : 		{
; 308  : 			break;
; 309  : 		}
; 310  : 
; 311  : 	}
; 312  : 	return 0;
; 313  : }

  00103	c3		 ret	 0
$LN10@DataRecv:

; 292  : 			{
; 293  : 				break;
; 294  : 			}
; 295  : 		}
; 296  : 		else if ( lOfs > 0 )

  00104	85 db		 test	 ebx, ebx
  00106	7e f6		 jle	 SHORT $LN13@DataRecv

; 297  : 		{
; 298  : 			if ( *recvbuflen < 1 )

  00108	8b 86 20 00 19
	00		 mov	 eax, DWORD PTR [esi+1638432]
  0010e	83 f8 01	 cmp	 eax, 1
  00111	7c eb		 jl	 SHORT $LN13@DataRecv

; 299  : 			{
; 300  : 				break;
; 301  : 			}
; 302  : 
; 303  : 			memcpy(recvbuf, &recvbuf[lOfs], *recvbuflen);

  00113	50		 push	 eax
  00114	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  00117	50		 push	 eax
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 _memcpy
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	33 c0		 xor	 eax, eax
  00123	5b		 pop	 ebx
  00124	5f		 pop	 edi
  00125	5e		 pop	 esi

; 304  : 			break;
; 305  : 		}
; 306  : 		else
; 307  : 		{
; 308  : 			break;
; 309  : 		}
; 310  : 
; 311  : 	}
; 312  : 	return 0;
; 313  : }

  00126	c3		 ret	 0
?DataRecv@wsShopServerCli@@QAEHXZ ENDP			; wsShopServerCli::DataRecv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?FDWRITE_MsgDataSend@wsShopServerCli@@QAEHXZ
_TEXT	SEGMENT
?FDWRITE_MsgDataSend@wsShopServerCli@@QAEHXZ PROC	; wsShopServerCli::FDWRITE_MsgDataSend, COMDAT
; _this$ = ecx

; 184  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 185  : 	int nResult;
; 186  : 	int nDx;	// Degeneration X :)
; 187  : 	LPBYTE sendbuf;
; 188  : 	int* sendbuflen;
; 189  : 
; 190  : 	nDx=0;

  00004	33 ff		 xor	 edi, edi

; 191  : 	sendbuf=&this->m_SendBuf[0];
; 192  : 	sendbuflen=&this->m_SendBufLen ;
; 193  : 
; 194  : 	if (this->m_SendBufLen < 1)

  00006	83 be 1c 80 0c
	00 01		 cmp	 DWORD PTR [esi+819228], 1
  0000d	7d 06		 jge	 SHORT $LN11@FDWRITE_Ms

; 195  : 	{
; 196  : 		return TRUE;

  0000f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00012	5f		 pop	 edi
  00013	5e		 pop	 esi

; 232  : }

  00014	c3		 ret	 0
$LN11@FDWRITE_Ms:
  00015	53		 push	 ebx

; 197  : 	}
; 198  : 
; 199  : 	while (*sendbuflen>0)

  00016	39 be 1c 80 0c
	00		 cmp	 DWORD PTR [esi+819228], edi
  0001c	0f 8e c9 00 00
	00		 jle	 $LN3@FDWRITE_Ms
$LL2@FDWRITE_Ms:

; 200  : 	{
; 201  : 		nResult=send(this->m_socket, (PCHAR)&sendbuf[nDx], *sendbuflen-nDx, 0);

  00022	8b 86 1c 80 0c
	00		 mov	 eax, DWORD PTR [esi+819228]
  00028	6a 00		 push	 0
  0002a	2b c7		 sub	 eax, edi
  0002c	50		 push	 eax
  0002d	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00030	03 c7		 add	 eax, edi
  00032	50		 push	 eax
  00033	ff 76 0c	 push	 DWORD PTR [esi+12]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__send@16
  0003c	8b d8		 mov	 ebx, eax

; 202  : 		if (nResult == -1)

  0003e	83 fb ff	 cmp	 ebx, -1
  00041	74 63		 je	 SHORT $LN12@FDWRITE_Ms

; 213  : 				break;
; 214  : 			}
; 215  : 		}
; 216  : 		if (nResult <= 0)

  00043	85 db		 test	 ebx, ebx
  00045	7e 41		 jle	 SHORT $LN13@FDWRITE_Ms

; 219  : 			break;
; 220  : 		}
; 221  : 		LogAdd("error-L3 : nDx %d m_SendBufLen %d", nDx, this->m_SendBufLen );

  00047	ff b6 1c 80 0c
	00		 push	 DWORD PTR [esi+819228]
  0004d	57		 push	 edi
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@CMOPGBFG@error?9L3?5?3?5nDx?5?$CFd?5m_SendBufLen?5?$CF@
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 222  : 
; 223  : 		if (nResult > 0)
; 224  : 		{
; 225  : 			nDx += nResult;
; 226  : 			*sendbuflen -= nResult;

  00059	29 9e 1c 80 0c
	00		 sub	 DWORD PTR [esi+819228], ebx
  0005f	03 fb		 add	 edi, ebx

; 227  : 		}
; 228  : 
; 229  : 		LogAdd("error-L3 : nDx %d m_SendBufLen %d", nDx, this->m_SendBufLen );

  00061	ff b6 1c 80 0c
	00		 push	 DWORD PTR [esi+819228]
  00067	57		 push	 edi
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@CMOPGBFG@error?9L3?5?3?5nDx?5?$CFd?5m_SendBufLen?5?$CF@
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00073	83 c4 18	 add	 esp, 24			; 00000018H
  00076	83 be 1c 80 0c
	00 00		 cmp	 DWORD PTR [esi+819228], 0
  0007d	7f a3		 jg	 SHORT $LL2@FDWRITE_Ms

; 230  : 	}
; 231  : 	return TRUE;

  0007f	5b		 pop	 ebx
  00080	5f		 pop	 edi
  00081	b8 01 00 00 00	 mov	 eax, 1
  00086	5e		 pop	 esi

; 232  : }

  00087	c3		 ret	 0
$LN13@FDWRITE_Ms:

; 217  : 		{
; 218  : 			LogAdd("send() result is zero %d", WSAGetLastError());

  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@BMEBGMFO@send?$CI?$CJ?5result?5is?5zero?5?$CFd?$AA@
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0009a	83 c4 08	 add	 esp, 8

; 230  : 	}
; 231  : 	return TRUE;

  0009d	b8 01 00 00 00	 mov	 eax, 1
  000a2	5b		 pop	 ebx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi

; 232  : }

  000a5	c3		 ret	 0
$LN12@FDWRITE_Ms:

; 203  : 		{
; 204  : 			if ( WSAGetLastError() != WSAEWOULDBLOCK)

  000a6	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__WSAGetLastError@0
  000ac	ff d7		 call	 edi
  000ae	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  000b3	74 25		 je	 SHORT $LN6@FDWRITE_Ms

; 205  : 			{
; 206  : 				LogAdd("FD_WRITE send() fail &d %d", WSAGetLastError(), *sendbuflen);

  000b5	ff b6 1c 80 0c
	00		 push	 DWORD PTR [esi+819228]
  000bb	ff d7		 call	 edi
  000bd	50		 push	 eax
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@NPCCNEKA@FD_WRITE?5send?$CI?$CJ?5fail?5?$CGd?5?$CFd?$AA@
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 207  : 				this->Close();

  000cc	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000cf	e8 00 00 00 00	 call	 ?Close@MyWinsockBase@@QAEHXZ ; MyWinsockBase::Close
  000d4	5b		 pop	 ebx
  000d5	5f		 pop	 edi

; 208  : 				return FALSE;

  000d6	33 c0		 xor	 eax, eax
  000d8	5e		 pop	 esi

; 232  : }

  000d9	c3		 ret	 0
$LN6@FDWRITE_Ms:

; 209  : 			}
; 210  : 			else
; 211  : 			{
; 212  : 				LogAdd("FD_WRITE send() WSAEWOULDBLOCK : %d", WSAGetLastError());

  000da	ff d7		 call	 edi
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@HIKCACFP@FD_WRITE?5send?$CI?$CJ?5WSAEWOULDBLOCK?5?3@
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000e8	83 c4 08	 add	 esp, 8
$LN3@FDWRITE_Ms:

; 230  : 	}
; 231  : 	return TRUE;

  000eb	5b		 pop	 ebx
  000ec	5f		 pop	 edi
  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	5e		 pop	 esi

; 232  : }

  000f3	c3		 ret	 0
?FDWRITE_MsgDataSend@wsShopServerCli@@QAEHXZ ENDP	; wsShopServerCli::FDWRITE_MsgDataSend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?SetProtocolCore@wsShopServerCli@@QAEHP6AXKPAEH@Z@Z
_TEXT	SEGMENT
_pc$ = 8						; size = 4
?SetProtocolCore@wsShopServerCli@@QAEHP6AXKPAEH@Z@Z PROC ; wsShopServerCli::SetProtocolCore, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : 	this->wsProtocolCore = pc;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pc$[ebp]
  00006	89 81 24 00 19
	00		 mov	 DWORD PTR [ecx+1638436], eax

; 29   : 	return TRUE;

  0000c	b8 01 00 00 00	 mov	 eax, 1

; 30   : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?SetProtocolCore@wsShopServerCli@@QAEHP6AXKPAEH@Z@Z ENDP ; wsShopServerCli::SetProtocolCore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\wsshopservercli.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 314  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
