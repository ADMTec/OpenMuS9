; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\Gambling.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0_GAMBLING_ITEMOPTION@@QAE@XZ			; _GAMBLING_ITEMOPTION::_GAMBLING_ITEMOPTION
PUBLIC	??0_GAMBLING_RATE_STRUCT@@QAE@XZ		; _GAMBLING_RATE_STRUCT::_GAMBLING_RATE_STRUCT
PUBLIC	??0CGamblingEvent@@QAE@XZ			; CGamblingEvent::CGamblingEvent
PUBLIC	??1CGamblingEvent@@UAE@XZ			; CGamblingEvent::~CGamblingEvent
PUBLIC	?Init@CGamblingEvent@@QAEXPAD@Z			; CGamblingEvent::Init
PUBLIC	?LoadData@CGamblingEvent@@QAEXPAD@Z		; CGamblingEvent::LoadData
PUBLIC	?GetLevel@CGamblingEvent@@QAEEH@Z		; CGamblingEvent::GetLevel
PUBLIC	?GetExcOption@CGamblingEvent@@QAEEH@Z		; CGamblingEvent::GetExcOption
PUBLIC	?GetExcOption@CGamblingEvent@@QAEEXZ		; CGamblingEvent::GetExcOption
PUBLIC	?BuyRequest@CGamblingEvent@@QAEEHEEEE@Z		; CGamblingEvent::BuyRequest
PUBLIC	??_GCGamblingEvent@@UAEPAXI@Z			; CGamblingEvent::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CGamblingEvent@@6B@				; CGamblingEvent::`vftable'
PUBLIC	?gGamblingEvent@@3VCGamblingEvent@@A		; gGamblingEvent
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@ ; `string'
PUBLIC	??_R4CGamblingEvent@@6B@			; CGamblingEvent::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGamblingEvent@@@8			; CGamblingEvent `RTTI Type Descriptor'
PUBLIC	??_R3CGamblingEvent@@8				; CGamblingEvent::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGamblingEvent@@8				; CGamblingEvent::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGamblingEvent@@8			; CGamblingEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_rand:PROC
EXTRN	_atof:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??_ECGamblingEvent@@UAEPAXI@Z:PROC		; CGamblingEvent::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?ItemGetNumberMake@@YAHHH@Z:PROC		; ItemGetNumberMake
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?IsSocketItem@CSocketItems@@QAE_NH@Z:PROC	; CSocketItems::IsSocketItem
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	?GetLargeRand@@YAKXZ:PROC			; GetLargeRand
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A:BYTE	; ItemAttribute
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?g_SocketItem@@3VCSocketItems@@A:BYTE		; g_SocketItem
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?gGamblingEvent@@3VCGamblingEvent@@A DB 077cH DUP (?)	; gGamblingEvent
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?gGamblingEvent$initializer$@@3P6AXXZA DD FLAT:??__EgGamblingEvent@@YAXXZ ; gGamblingEvent$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CGamblingEvent@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGamblingEvent@@8 DD FLAT:??_R0?AVCGamblingEvent@@@8 ; CGamblingEvent::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGamblingEvent@@8
rdata$r	ENDS
;	COMDAT ??_R2CGamblingEvent@@8
rdata$r	SEGMENT
??_R2CGamblingEvent@@8 DD FLAT:??_R1A@?0A@EA@CGamblingEvent@@8 ; CGamblingEvent::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGamblingEvent@@8
rdata$r	SEGMENT
??_R3CGamblingEvent@@8 DD 00H				; CGamblingEvent::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGamblingEvent@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGamblingEvent@@@8
data$r	SEGMENT
??_R0?AVCGamblingEvent@@@8 DD FLAT:??_7type_info@@6B@	; CGamblingEvent `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGamblingEvent@@', 00H
data$r	ENDS
;	COMDAT ??_R4CGamblingEvent@@6B@
rdata$r	SEGMENT
??_R4CGamblingEvent@@6B@ DD 00H				; CGamblingEvent::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGamblingEvent@@@8
	DD	FLAT:??_R3CGamblingEvent@@8
rdata$r	ENDS
;	COMDAT ??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@
CONST	SEGMENT
??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@ DB '['
	DB	' GAMBLING ][ TryGambling ] %s(%s) Try Item : [%s]%d Level:%d '
	DB	'op1:%d op2:%d op3:%d ExOp:%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@ DB 'Load Script Error '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CGamblingEvent@@6B@
CONST	SEGMENT
??_7CGamblingEvent@@6B@ DD FLAT:??_R4CGamblingEvent@@6B@ ; CGamblingEvent::`vftable'
	DD	FLAT:??_ECGamblingEvent@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FgGamblingEvent@@YAXXZ
text$yd	SEGMENT
??__FgGamblingEvent@@YAXXZ PROC				; `dynamic atexit destructor for 'gGamblingEvent'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGamblingEvent@@3VCGamblingEvent@@A ; gGamblingEvent
  00005	e9 00 00 00 00	 jmp	 ??1CGamblingEvent@@UAE@XZ ; CGamblingEvent::~CGamblingEvent
??__FgGamblingEvent@@YAXXZ ENDP				; `dynamic atexit destructor for 'gGamblingEvent''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ??__EgGamblingEvent@@YAXXZ
text$di	SEGMENT
??__EgGamblingEvent@@YAXXZ PROC				; `dynamic initializer for 'gGamblingEvent'', COMDAT

; 9    : CGamblingEvent gGamblingEvent;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGamblingEvent@@3VCGamblingEvent@@A ; gGamblingEvent
  00005	e8 00 00 00 00	 call	 ??0CGamblingEvent@@QAE@XZ ; CGamblingEvent::CGamblingEvent
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgGamblingEvent@@YAXXZ ; `dynamic atexit destructor for 'gGamblingEvent''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgGamblingEvent@@YAXXZ ENDP				; `dynamic initializer for 'gGamblingEvent''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGamblingEvent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGamblingEvent@@UAEPAXI@Z PROC			; CGamblingEvent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGamblingEvent@@UAE@XZ ; CGamblingEvent::~CGamblingEvent
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 7c 07 00 00	 push	 1916			; 0000077cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGamblingEvent@@UAEPAXI@Z ENDP			; CGamblingEvent::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?BuyRequest@CGamblingEvent@@QAEEHEEEE@Z
_TEXT	SEGMENT
_lpObj$1$ = -40						; size = 4
tv795 = -36						; size = 4
__iRate$1$ = -32					; size = 4
_Number$1$ = -32					; size = 4
_Option1$1$ = -28					; size = 4
_Option2$1$ = -24					; size = 4
_iTotalCountStart$1$ = -20				; size = 4
_Level$1$ = -20						; size = 4
_ExOption$1$ = -16					; size = 4
_Item$1$ = -16						; size = 4
_SocketOption$ = -12					; size = 5
__$ArrayPad$ = -4					; size = 4
_aIndex$ = 8						; size = 4
_MapNumber$ = 12					; size = 1
_cX$ = 16						; size = 1
_cY$ = 20						; size = 1
_Type$ = 24						; size = 1
?BuyRequest@CGamblingEvent@@QAEEHEEEE@Z PROC		; CGamblingEvent::BuyRequest, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _aIndex$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 304  : 	if( m_bLoaded == FALSE )

  00016	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0001a	75 13		 jne	 SHORT $LN14@BuyRequest

; 305  : 		return false;

  0001c	32 c0		 xor	 al, al
  0001e	5e		 pop	 esi

; 522  : }

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00022	33 cd		 xor	 ecx, ebp
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 14 00	 ret	 20			; 00000014H
$LN14@BuyRequest:

; 306  : 
; 307  : 	BYTE Dur = 0;
; 308  : 	int Item = 0;
; 309  : 	int Level = 0;
; 310  : 	int X = 0;
; 311  : 	int Y = 0;
; 312  : 	int Option1 = 0;
; 313  : 	int Option2 = 0; 
; 314  : 	int Option3 = 0;
; 315  : 	int Number = 0;
; 316  : 	int SetOption = 0;
; 317  : 	int ExOption = 0;
; 318  : 
; 319  : 	int SocketCount = 0;
; 320  : 
; 321  : 	BYTE SocketBonus = (BYTE)-1;
; 322  : 	BYTE SocketOption[5];
; 323  : 
; 324  : 	LPOBJ lpObj = &gObj[aIndex];

  0002f	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00035	33 c9		 xor	 ecx, ecx
  00037	53		 push	 ebx
  00038	57		 push	 edi
  00039	33 ff		 xor	 edi, edi
  0003b	89 4d f0	 mov	 DWORD PTR _ExOption$1$[ebp], ecx
  0003e	33 db		 xor	 ebx, ebx
  00040	89 7d e4	 mov	 DWORD PTR _Option1$1$[ebp], edi
  00043	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00049	89 7d e8	 mov	 DWORD PTR _Option2$1$[ebp], edi
  0004c	89 45 d8	 mov	 DWORD PTR _lpObj$1$[ebp], eax

; 325  : 
; 326  : 	if( GetItemCount() > 0 )

  0004f	39 8e 60 02 00
	00		 cmp	 DWORD PTR [esi+608], ecx
  00055	0f 8e b2 01 00
	00		 jle	 $LN15@BuyRequest

; 327  : 	{
; 328  : 		if( m_Option2Rate[Type] >= GetLargeRand()%1000000   )

  0005b	0f b6 45 18	 movzx	 eax, BYTE PTR _Type$[ebp]
  0005f	89 45 dc	 mov	 DWORD PTR tv795[ebp], eax
  00062	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00067	33 d2		 xor	 edx, edx

; 329  : 		{
; 330  : 			Level = 0;

  00069	89 5d ec	 mov	 DWORD PTR _Level$1$[ebp], ebx
  0006c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00071	f7 f1		 div	 ecx
  00073	8b 45 dc	 mov	 eax, DWORD PTR tv795[ebp]
  00076	39 94 86 0c 02
	00 00		 cmp	 DWORD PTR [esi+eax*4+524], edx
  0007d	0f 82 b8 01 00
	00		 jb	 $LN16@BuyRequest

; 331  : 			Dur = 0;
; 332  : 			Option1 = 1;

  00083	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$1$[ebp], 1

; 333  : 			Option2 = 0;

  0008a	89 5d e8	 mov	 DWORD PTR _Option2$1$[ebp], ebx

; 334  : 
; 335  : 			DWORD _iRandOp = GetLargeRand()%1000000;

  0008d	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00092	33 d2		 xor	 edx, edx
  00094	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00099	f7 f1		 div	 ecx

; 336  : 
; 337  : 			if( _iRandOp <= m_OptionRate[0] )

  0009b	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  000a1	3b d1		 cmp	 edx, ecx
  000a3	77 05		 ja	 SHORT $LN18@BuyRequest

; 338  : 			{
; 339  : 				Option3 = 1;

  000a5	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  000a8	eb 4a		 jmp	 SHORT $LN24@BuyRequest
$LN18@BuyRequest:

; 340  : 			}
; 341  : 			else if( _iRandOp <= m_OptionRate[0]+m_OptionRate[1] )

  000aa	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
  000b0	03 c1		 add	 eax, ecx
  000b2	3b d0		 cmp	 edx, eax
  000b4	77 07		 ja	 SHORT $LN20@BuyRequest

; 342  : 			{
; 343  : 				Option3 = 2;

  000b6	bb 02 00 00 00	 mov	 ebx, 2
  000bb	eb 37		 jmp	 SHORT $LN24@BuyRequest
$LN20@BuyRequest:

; 344  : 			}
; 345  : 			else if( _iRandOp <= m_OptionRate[0]+m_OptionRate[1]+m_OptionRate[2] )

  000bd	8b 86 00 02 00
	00		 mov	 eax, DWORD PTR [esi+512]
  000c3	03 86 04 02 00
	00		 add	 eax, DWORD PTR [esi+516]
  000c9	03 c1		 add	 eax, ecx
  000cb	3b d0		 cmp	 edx, eax
  000cd	77 07		 ja	 SHORT $LN22@BuyRequest

; 346  : 			{
; 347  : 				Option3 = 3;

  000cf	bb 03 00 00 00	 mov	 ebx, 3
  000d4	eb 1e		 jmp	 SHORT $LN24@BuyRequest
$LN22@BuyRequest:

; 348  : 			}
; 349  : 			else if( _iRandOp <= m_OptionRate[0]+m_OptionRate[1]+m_OptionRate[2]+m_OptionRate[3] )

  000d6	8b 86 08 02 00
	00		 mov	 eax, DWORD PTR [esi+520]
  000dc	03 86 04 02 00
	00		 add	 eax, DWORD PTR [esi+516]
  000e2	03 86 00 02 00
	00		 add	 eax, DWORD PTR [esi+512]
  000e8	03 c1		 add	 eax, ecx
  000ea	b9 04 00 00 00	 mov	 ecx, 4
  000ef	3b d0		 cmp	 edx, eax
  000f1	0f 46 d9	 cmovbe	 ebx, ecx
$LN24@BuyRequest:

; 350  : 			{
; 351  : 				Option3 = 4;
; 352  : 			}
; 353  : 
; 354  : 			DWORD _iRandExOp = GetLargeRand()%1000000;

  000f4	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  000f9	33 d2		 xor	 edx, edx
  000fb	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00100	f7 f1		 div	 ecx

; 355  : 
; 356  : 			if( _iRandExOp <= m_Option3Rate[0] )

  00102	8b 8e 20 02 00
	00		 mov	 ecx, DWORD PTR [esi+544]
  00108	3b d1		 cmp	 edx, ecx
  0010a	77 04		 ja	 SHORT $LN25@BuyRequest

; 357  : 			{
; 358  : 				ExOption = GetExcOption(1);

  0010c	6a 01		 push	 1
  0010e	eb 40		 jmp	 SHORT $LN88@BuyRequest
$LN25@BuyRequest:

; 359  : 			}
; 360  : 			else if( _iRandExOp <= m_Option3Rate[0]+m_Option3Rate[1] )

  00110	8b 86 24 02 00
	00		 mov	 eax, DWORD PTR [esi+548]
  00116	03 c1		 add	 eax, ecx
  00118	3b d0		 cmp	 edx, eax
  0011a	77 04		 ja	 SHORT $LN27@BuyRequest

; 361  : 			{
; 362  : 				ExOption = GetExcOption(2);

  0011c	6a 02		 push	 2
  0011e	eb 30		 jmp	 SHORT $LN88@BuyRequest
$LN27@BuyRequest:

; 363  : 			}
; 364  : 			else if( _iRandExOp <= m_Option3Rate[0]+m_Option3Rate[1]+m_Option3Rate[2] )

  00120	8b 86 24 02 00
	00		 mov	 eax, DWORD PTR [esi+548]
  00126	03 86 28 02 00
	00		 add	 eax, DWORD PTR [esi+552]
  0012c	03 c1		 add	 eax, ecx
  0012e	3b d0		 cmp	 edx, eax
  00130	77 04		 ja	 SHORT $LN29@BuyRequest

; 365  : 			{
; 366  : 				ExOption = GetExcOption(3);

  00132	6a 03		 push	 3
  00134	eb 1a		 jmp	 SHORT $LN88@BuyRequest
$LN29@BuyRequest:

; 367  : 			}
; 368  : 			else if( _iRandExOp <= m_Option3Rate[0]+m_Option3Rate[1]+m_Option3Rate[2]+m_Option3Rate[3] )

  00136	8b 86 2c 02 00
	00		 mov	 eax, DWORD PTR [esi+556]
  0013c	03 86 28 02 00
	00		 add	 eax, DWORD PTR [esi+552]
  00142	03 86 24 02 00
	00		 add	 eax, DWORD PTR [esi+548]
  00148	03 c1		 add	 eax, ecx
  0014a	3b d0		 cmp	 edx, eax
  0014c	77 0f		 ja	 SHORT $LN31@BuyRequest

; 369  : 			{
; 370  : 				ExOption = GetExcOption(4);

  0014e	6a 04		 push	 4
$LN88@BuyRequest:
  00150	8b ce		 mov	 ecx, esi
  00152	e8 00 00 00 00	 call	 ?GetExcOption@CGamblingEvent@@QAEEH@Z ; CGamblingEvent::GetExcOption
  00157	0f b6 c8	 movzx	 ecx, al
  0015a	89 4d f0	 mov	 DWORD PTR _ExOption$1$[ebp], ecx
$LN31@BuyRequest:

; 371  : 			}
; 372  : 
; 373  : 			switch( Type )

  0015d	8b 45 dc	 mov	 eax, DWORD PTR tv795[ebp]
  00160	83 f8 04	 cmp	 eax, 4
  00163	77 1b		 ja	 SHORT $LN85@BuyRequest
  00165	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN92@BuyRequest[eax*4]
$LN32@BuyRequest:

; 374  : 			{
; 375  : 			case 0:
; 376  : 				Item = ItemGetNumberMake(3,11);

  0016c	6a 0b		 push	 11			; 0000000bH
  0016e	6a 03		 push	 3

; 377  : 				break;

  00170	eb 04		 jmp	 SHORT $LN89@BuyRequest
$LN33@BuyRequest:

; 378  : 			case 1:
; 379  : 				Item = ItemGetNumberMake(5,33);

  00172	6a 21		 push	 33			; 00000021H
$LN90@BuyRequest:

; 387  : 			case 4:
; 388  : 				Item = ItemGetNumberMake(5,34);

  00174	6a 05		 push	 5
$LN89@BuyRequest:

; 378  : 			case 1:
; 379  : 				Item = ItemGetNumberMake(5,33);

  00176	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  0017b	8b f8		 mov	 edi, eax
  0017d	83 c4 08	 add	 esp, 8
$LN85@BuyRequest:
  00180	8b 75 f0	 mov	 esi, DWORD PTR _ExOption$1$[ebp]
$LN59@BuyRequest:

; 496  : 				}
; 497  : 			}
; 498  : 		}
; 499  : 
; 500  : 		if( g_SocketItem.IsSocketItem(Item) )

  00183	57		 push	 edi
  00184	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00189	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  0018e	84 c0		 test	 al, al
  00190	74 21		 je	 SHORT $LN12@BuyRequest

; 501  : 		{
; 502  : 			SocketCount = 1+rand()%3;

  00192	e8 00 00 00 00	 call	 _rand
  00197	b9 03 00 00 00	 mov	 ecx, 3
  0019c	99		 cdq
  0019d	f7 f9		 idiv	 ecx
  0019f	42		 inc	 edx

; 503  : 
; 504  : 			for(int i = 0; i < 5; i++)

  001a0	33 c9		 xor	 ecx, ecx
$LL13@BuyRequest:

; 505  : 			{
; 506  : 				if( i < SocketCount )

  001a2	3b ca		 cmp	 ecx, edx
  001a4	0f 9d c0	 setge	 al
  001a7	04 fe		 add	 al, 254			; 000000feH
  001a9	88 44 0d f4	 mov	 BYTE PTR _SocketOption$[ebp+ecx], al
  001ad	41		 inc	 ecx
  001ae	83 f9 05	 cmp	 ecx, 5
  001b1	7c ef		 jl	 SHORT $LL13@BuyRequest
$LN12@BuyRequest:

; 507  : 				{
; 508  : 					SocketOption[i] = (BYTE)-2;
; 509  : 				}
; 510  : 				else
; 511  : 				{
; 512  : 					SocketOption[i] = (BYTE)-1;
; 513  : 				}
; 514  : 			}
; 515  : 		}
; 516  : 
; 517  : 		ItemSerialCreateSend(lpObj->m_Index,MapNumber,X,Y,Item,Level,Dur,Option1,Option2,Option3,lpObj->m_Index,ExOption,0,SocketBonus,SocketOption);

  001b3	8b 45 d8	 mov	 eax, DWORD PTR _lpObj$1$[ebp]
  001b6	8d 4d f4	 lea	 ecx, DWORD PTR _SocketOption$[ebp]
  001b9	51		 push	 ecx
  001ba	68 ff 00 00 00	 push	 255			; 000000ffH
  001bf	6a 00		 push	 0
  001c1	8b 00		 mov	 eax, DWORD PTR [eax]
  001c3	56		 push	 esi
  001c4	50		 push	 eax
  001c5	53		 push	 ebx
  001c6	ff 75 e8	 push	 DWORD PTR _Option2$1$[ebp]
  001c9	ff 75 e4	 push	 DWORD PTR _Option1$1$[ebp]
  001cc	6a 00		 push	 0
  001ce	ff 75 ec	 push	 DWORD PTR _Level$1$[ebp]
  001d1	57		 push	 edi
  001d2	6a 00		 push	 0
  001d4	6a 00		 push	 0
  001d6	ff 75 0c	 push	 DWORD PTR _MapNumber$[ebp]
  001d9	50		 push	 eax
  001da	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 518  : 		LogAddTD("[ GAMBLING ][ TryGambling ] %s(%s) Try Item : [%s]%d Level:%d op1:%d op2:%d op3:%d ExOp:%d",

  001df	8b 4d d8	 mov	 ecx, DWORD PTR _lpObj$1$[ebp]
  001e2	56		 push	 esi
  001e3	53		 push	 ebx
  001e4	ff 75 e8	 push	 DWORD PTR _Option2$1$[ebp]
  001e7	6b c7 70	 imul	 eax, edi, 112
  001ea	ff 75 e4	 push	 DWORD PTR _Option1$1$[ebp]
  001ed	ff 75 ec	 push	 DWORD PTR _Level$1$[ebp]
  001f0	57		 push	 edi
  001f1	05 00 00 00 00	 add	 eax, OFFSET ?ItemAttribute@@3PAUITEM_ATTRIBUTE@@A ; ItemAttribute
  001f6	50		 push	 eax
  001f7	8d 41 5d	 lea	 eax, DWORD PTR [ecx+93]
  001fa	50		 push	 eax
  001fb	8d 41 52	 lea	 eax, DWORD PTR [ecx+82]
  001fe	50		 push	 eax
  001ff	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@CMIFDAIK@?$FL?5GAMBLING?5?$FN?$FL?5TryGambling?5?$FN?5?$CFs?$CI?$CF@
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0020a	83 c4 64	 add	 esp, 100		; 00000064H
$LN15@BuyRequest:

; 519  : 			lpObj->AccountID,lpObj->Name,ItemAttribute[Item].Name,Item,Level,Option1,Option2,Option3,ExOption);
; 520  : 	}
; 521  : return true;

  0020d	5f		 pop	 edi
  0020e	5b		 pop	 ebx
  0020f	b0 01		 mov	 al, 1
  00211	5e		 pop	 esi

; 522  : }

  00212	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00215	33 cd		 xor	 ecx, ebp
  00217	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c2 14 00	 ret	 20			; 00000014H
$LN34@BuyRequest:

; 380  : 				break;
; 381  : 			case 2:
; 382  : 				Item = ItemGetNumberMake(4,24);

  00222	6a 18		 push	 24			; 00000018H
  00224	6a 04		 push	 4

; 383  : 				break;

  00226	e9 4b ff ff ff	 jmp	 $LN89@BuyRequest
$LN35@BuyRequest:

; 384  : 			case 3:
; 385  : 				Item = ItemGetNumberMake(2,18);

  0022b	6a 12		 push	 18			; 00000012H
  0022d	6a 02		 push	 2

; 386  : 				break;

  0022f	e9 42 ff ff ff	 jmp	 $LN89@BuyRequest
$LN36@BuyRequest:

; 387  : 			case 4:
; 388  : 				Item = ItemGetNumberMake(5,34);

  00234	6a 22		 push	 34			; 00000022H

; 389  : 				break;
; 390  : 			}
; 391  : 		}
; 392  : 		else

  00236	e9 39 ff ff ff	 jmp	 $LN90@BuyRequest
$LN16@BuyRequest:

; 393  : 		{
; 394  : 			int iCount = 0;
; 395  : 			int iTotalCountStart = 0;
; 396  : 			int iTotalCountEnd = 0;
; 397  : 			int StartIndex = 0;

  0023b	33 ff		 xor	 edi, edi

; 398  : 
; 399  : 			switch( Type )

  0023d	83 f8 04	 cmp	 eax, 4
  00240	77 25		 ja	 SHORT $LN4@BuyRequest
  00242	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN93@BuyRequest[eax*4]
$LN37@BuyRequest:

; 400  : 			{
; 401  : 			case 0:	StartIndex = 0;	break;

  00249	33 ff		 xor	 edi, edi
  0024b	eb 1a		 jmp	 SHORT $LN4@BuyRequest
$LN38@BuyRequest:

; 402  : 			case 1:	StartIndex = 5;	break;

  0024d	bf 05 00 00 00	 mov	 edi, 5
  00252	eb 13		 jmp	 SHORT $LN4@BuyRequest
$LN39@BuyRequest:

; 403  : 			case 2:	StartIndex = 10;	break;

  00254	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
  00259	eb 0c		 jmp	 SHORT $LN4@BuyRequest
$LN40@BuyRequest:

; 404  : 			case 3:	StartIndex = 15;	break;

  0025b	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00260	eb 05		 jmp	 SHORT $LN4@BuyRequest
$LN41@BuyRequest:

; 405  : 			case 4:	StartIndex = 20;	break;

  00262	bf 14 00 00 00	 mov	 edi, 20			; 00000014H
$LN4@BuyRequest:

; 406  : 			}
; 407  : 
; 408  : 			DWORD _iRate = GetLargeRand()%1000000;

  00267	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0026c	33 d2		 xor	 edx, edx

; 409  : 			DWORD _iItemRate = 0;
; 410  : 
; 411  : 			int i; 
; 412  : 
; 413  : 			for( i = StartIndex; i < (StartIndex+5);i++)

  0026e	8d 5f 05	 lea	 ebx, DWORD PTR [edi+5]
  00271	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00276	f7 f1		 div	 ecx
  00278	8b cf		 mov	 ecx, edi
  0027a	89 55 e0	 mov	 DWORD PTR __iRate$1$[ebp], edx
  0027d	33 d2		 xor	 edx, edx
  0027f	3b fb		 cmp	 edi, ebx
  00281	7d 20		 jge	 SHORT $LN67@BuyRequest

; 406  : 			}
; 407  : 
; 408  : 			DWORD _iRate = GetLargeRand()%1000000;

  00283	8d 04 bd 06 00
	00 00		 lea	 eax, DWORD PTR [edi*4+6]
  0028a	03 c7		 add	 eax, edi
  0028c	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  0028f	90		 npad	 1
$LL8@BuyRequest:

; 414  : 			{
; 415  : 				_iItemRate += m_RateInfo[i].iDropRate; 

  00290	03 10		 add	 edx, DWORD PTR [eax]

; 416  : 
; 417  : 				if( _iRate <= _iItemRate )

  00292	39 55 e0	 cmp	 DWORD PTR __iRate$1$[ebp], edx
  00295	76 0a		 jbe	 SHORT $LN69@BuyRequest

; 409  : 			DWORD _iItemRate = 0;
; 410  : 
; 411  : 			int i; 
; 412  : 
; 413  : 			for( i = StartIndex; i < (StartIndex+5);i++)

  00297	41		 inc	 ecx
  00298	83 c0 14	 add	 eax, 20			; 00000014H
  0029b	3b cb		 cmp	 ecx, ebx
  0029d	7c f1		 jl	 SHORT $LL8@BuyRequest

; 427  : 
; 428  : 				if( StartIndex <= iCount )

  0029f	eb 02		 jmp	 SHORT $LN67@BuyRequest
$LN69@BuyRequest:

; 418  : 				{
; 419  : 					StartIndex = i;

  002a1	8b f9		 mov	 edi, ecx
$LN67@BuyRequest:

; 420  : 					break;
; 421  : 				}
; 422  : 			}
; 423  : 
; 424  : 			while( TRUE )
; 425  : 			{
; 426  : 				iTotalCountEnd += m_iGroupItemCount[iCount];

  002a3	8b 9e 64 02 00
	00		 mov	 ebx, DWORD PTR [esi+612]
  002a9	8d 86 64 02 00
	00		 lea	 eax, DWORD PTR [esi+612]

; 427  : 
; 428  : 				if( StartIndex <= iCount )

  002af	85 ff		 test	 edi, edi
  002b1	7e 13		 jle	 SHORT $LN70@BuyRequest

; 420  : 					break;
; 421  : 				}
; 422  : 			}
; 423  : 
; 424  : 			while( TRUE )
; 425  : 			{
; 426  : 				iTotalCountEnd += m_iGroupItemCount[iCount];

  002b3	8b cb		 mov	 ecx, ebx
  002b5	8b d7		 mov	 edx, edi
$LL9@BuyRequest:

; 429  : 					break;
; 430  : 
; 431  : 				iTotalCountStart += m_iGroupItemCount[iCount];

  002b7	01 4d ec	 add	 DWORD PTR _iTotalCountStart$1$[ebp], ecx

; 432  : 				iCount++;

  002ba	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  002bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  002bf	03 d9		 add	 ebx, ecx
  002c1	83 ea 01	 sub	 edx, 1
  002c4	75 f1		 jne	 SHORT $LL9@BuyRequest
$LN70@BuyRequest:

; 433  : 			}
; 434  : 
; 435  : 			Number = GetLargeRand()%(iTotalCountEnd-iTotalCountStart) + iTotalCountStart;

  002c6	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  002cb	8b 4d ec	 mov	 ecx, DWORD PTR _iTotalCountStart$1$[ebp]
  002ce	33 d2		 xor	 edx, edx
  002d0	2b d9		 sub	 ebx, ecx
  002d2	f7 f3		 div	 ebx
  002d4	8d 1c 11	 lea	 ebx, DWORD PTR [ecx+edx]

; 436  : 
; 437  : 			Dur = 0;
; 438  : 			X = 0;
; 439  : 			Y = 0;
; 440  : 
; 441  : 			Level = GetLevel(Number);

  002d7	8b ce		 mov	 ecx, esi
  002d9	53		 push	 ebx
  002da	89 5d e0	 mov	 DWORD PTR _Number$1$[ebp], ebx
  002dd	e8 00 00 00 00	 call	 ?GetLevel@CGamblingEvent@@QAEEH@Z ; CGamblingEvent::GetLevel
  002e2	0f b6 c0	 movzx	 eax, al
  002e5	89 45 ec	 mov	 DWORD PTR _Level$1$[ebp], eax

; 442  : 			Item = ItemGetNumberMake(m_ItemList[Number].btItemIndex,m_ItemList[Number].btItemType);

  002e8	0f b6 84 de cd
	02 00 00	 movzx	 eax, BYTE PTR [esi+ebx*8+717]
  002f0	50		 push	 eax
  002f1	0f b6 84 de cc
	02 00 00	 movzx	 eax, BYTE PTR [esi+ebx*8+716]
  002f9	50		 push	 eax
  002fa	e8 00 00 00 00	 call	 ?ItemGetNumberMake@@YAHHH@Z ; ItemGetNumberMake
  002ff	83 c4 08	 add	 esp, 8
  00302	89 45 f0	 mov	 DWORD PTR _Item$1$[ebp], eax

; 443  : 
; 444  : 			if( Item == -1 )

  00305	83 f8 ff	 cmp	 eax, -1
  00308	75 15		 jne	 SHORT $LN44@BuyRequest

; 522  : }

  0030a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030d	32 c0		 xor	 al, al
  0030f	5f		 pop	 edi
  00310	5b		 pop	 ebx
  00311	33 cd		 xor	 ecx, ebp
  00313	5e		 pop	 esi
  00314	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00319	8b e5		 mov	 esp, ebp
  0031b	5d		 pop	 ebp
  0031c	c2 14 00	 ret	 20			; 00000014H
$LN44@BuyRequest:

; 445  : 				return false;
; 446  : 
; 447  : 			if( m_ItemList[Number].btSkillOption )

  0031f	80 bc de d0 02
	00 00 00	 cmp	 BYTE PTR [esi+ebx*8+720], 0
  00327	74 22		 je	 SHORT $LN46@BuyRequest

; 448  : 			{
; 449  : 				if( (DWORD)m_RateInfo[StartIndex].iSkillOptionRate >= GetLargeRand()%1000000 )

  00329	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0032e	33 d2		 xor	 edx, edx
  00330	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00335	f7 f1		 div	 ecx
  00337	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0033a	33 c9		 xor	 ecx, ecx
  0033c	39 54 86 08	 cmp	 DWORD PTR [esi+eax*4+8], edx
  00340	b8 01 00 00 00	 mov	 eax, 1
  00345	0f 43 c8	 cmovae	 ecx, eax
  00348	89 4d e4	 mov	 DWORD PTR _Option1$1$[ebp], ecx
$LN46@BuyRequest:

; 450  : 				{
; 451  : 					Option1 = 1;
; 452  : 				}
; 453  : 			}
; 454  : 
; 455  : 			if( m_ItemList[Number].btLuckOption )

  0034b	80 bc de d1 02
	00 00 00	 cmp	 BYTE PTR [esi+ebx*8+721], 0
  00353	74 22		 je	 SHORT $LN48@BuyRequest

; 456  : 			{
; 457  : 				if( (DWORD)m_RateInfo[StartIndex].iLuckOptionRate >= GetLargeRand()%1000000 )

  00355	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0035a	33 d2		 xor	 edx, edx
  0035c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00361	f7 f1		 div	 ecx
  00363	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  00366	33 c9		 xor	 ecx, ecx
  00368	39 54 86 0c	 cmp	 DWORD PTR [esi+eax*4+12], edx
  0036c	b8 01 00 00 00	 mov	 eax, 1
  00371	0f 43 c8	 cmovae	 ecx, eax
  00374	89 4d e8	 mov	 DWORD PTR _Option2$1$[ebp], ecx
$LN48@BuyRequest:

; 458  : 				{
; 459  : 					Option2 = 1;
; 460  : 				}
; 461  : 			}
; 462  : 
; 463  : 			if( m_ItemList[Number].btAddOption )

  00377	80 bc de d2 02
	00 00 00	 cmp	 BYTE PTR [esi+ebx*8+722], 0
  0037f	0f 84 78 00 00
	00		 je	 $LN81@BuyRequest

; 464  : 			{
; 465  : 				if( (DWORD)m_RateInfo[StartIndex].iAddOptionRate >= GetLargeRand()%1000000 )

  00385	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  0038a	33 d2		 xor	 edx, edx
  0038c	bb 40 42 0f 00	 mov	 ebx, 1000000		; 000f4240H
  00391	f7 f3		 div	 ebx
  00393	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  00396	39 54 86 10	 cmp	 DWORD PTR [esi+eax*4+16], edx
  0039a	72 61		 jb	 SHORT $LN81@BuyRequest

; 466  : 				{
; 467  : 					DWORD _iRate = GetLargeRand()%1000000;

  0039c	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  003a1	33 d2		 xor	 edx, edx

; 468  : 
; 469  : 					if( _iRate <= m_OptionRate[0] )

  003a3	8b 8e fc 01 00
	00		 mov	 ecx, DWORD PTR [esi+508]
  003a9	f7 f3		 div	 ebx
  003ab	3b d1		 cmp	 edx, ecx
  003ad	77 07		 ja	 SHORT $LN51@BuyRequest

; 470  : 					{
; 471  : 						Option3 = 1;

  003af	bb 01 00 00 00	 mov	 ebx, 1
  003b4	eb 49		 jmp	 SHORT $LN57@BuyRequest
$LN51@BuyRequest:

; 472  : 					}
; 473  : 					else if( _iRate <= m_OptionRate[0]+m_OptionRate[1] )

  003b6	8b 9e 00 02 00
	00		 mov	 ebx, DWORD PTR [esi+512]
  003bc	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
  003bf	3b d0		 cmp	 edx, eax
  003c1	77 07		 ja	 SHORT $LN53@BuyRequest

; 474  : 					{
; 475  : 						Option3 = 2;

  003c3	bb 02 00 00 00	 mov	 ebx, 2
  003c8	eb 35		 jmp	 SHORT $LN57@BuyRequest
$LN53@BuyRequest:

; 476  : 					}
; 477  : 					else if( _iRate <= m_OptionRate[0]+m_OptionRate[1]+m_OptionRate[2] )

  003ca	8b 86 04 02 00
	00		 mov	 eax, DWORD PTR [esi+516]
  003d0	03 c3		 add	 eax, ebx
  003d2	03 c1		 add	 eax, ecx
  003d4	3b d0		 cmp	 edx, eax
  003d6	77 07		 ja	 SHORT $LN55@BuyRequest

; 478  : 					{
; 479  : 						Option3 = 3;

  003d8	bb 03 00 00 00	 mov	 ebx, 3
  003dd	eb 20		 jmp	 SHORT $LN57@BuyRequest
$LN55@BuyRequest:

; 480  : 					}
; 481  : 					else if( _iRate <= m_OptionRate[0]+m_OptionRate[1]+m_OptionRate[2]+m_OptionRate[3] )

  003df	8b 86 08 02 00
	00		 mov	 eax, DWORD PTR [esi+520]
  003e5	03 86 04 02 00
	00		 add	 eax, DWORD PTR [esi+516]
  003eb	03 c3		 add	 eax, ebx
  003ed	33 db		 xor	 ebx, ebx
  003ef	03 c1		 add	 eax, ecx
  003f1	b9 04 00 00 00	 mov	 ecx, 4
  003f6	3b d0		 cmp	 edx, eax
  003f8	0f 46 d9	 cmovbe	 ebx, ecx
  003fb	eb 02		 jmp	 SHORT $LN57@BuyRequest
$LN81@BuyRequest:
  003fd	33 db		 xor	 ebx, ebx
$LN57@BuyRequest:

; 482  : 					{
; 483  : 						Option3 = 4;
; 484  : 					}
; 485  : 				}
; 486  : 			}
; 487  : 
; 488  : 			if( m_ItemList[Number].btExOption )

  003ff	8b 45 e0	 mov	 eax, DWORD PTR _Number$1$[ebp]
  00402	80 bc c6 d3 02
	00 00 00	 cmp	 BYTE PTR [esi+eax*8+723], 0
  0040a	74 3e		 je	 SHORT $LN82@BuyRequest

; 489  : 			{
; 490  : 				if( (DWORD)m_RateInfo[StartIndex].iExOptionRate >= GetLargeRand()%1000000 )

  0040c	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00411	33 d2		 xor	 edx, edx
  00413	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00418	f7 f1		 div	 ecx
  0041a	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0041d	39 54 86 14	 cmp	 DWORD PTR [esi+eax*4+20], edx
  00421	72 27		 jb	 SHORT $LN82@BuyRequest

; 491  : 				{
; 492  : 					ExOption = GetExcOption();

  00423	8b ce		 mov	 ecx, esi
  00425	e8 00 00 00 00	 call	 ?GetExcOption@CGamblingEvent@@QAEEXZ ; CGamblingEvent::GetExcOption
  0042a	8b 7d f0	 mov	 edi, DWORD PTR _Item$1$[ebp]
  0042d	0f b6 f0	 movzx	 esi, al

; 493  : 					Option1 = 1;

  00430	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _Option1$1$[ebp], 1

; 494  : 					Option2 = 0;

  00437	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _Option2$1$[ebp], 0

; 495  : 					Level = 0;

  0043e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Level$1$[ebp], 0
  00445	e9 39 fd ff ff	 jmp	 $LN59@BuyRequest
$LN82@BuyRequest:
  0044a	8b 7d f0	 mov	 edi, DWORD PTR _Item$1$[ebp]
  0044d	33 f6		 xor	 esi, esi
  0044f	e9 2f fd ff ff	 jmp	 $LN59@BuyRequest
$LN92@BuyRequest:

; 522  : }

  00454	00 00 00 00	 DD	 $LN32@BuyRequest
  00458	00 00 00 00	 DD	 $LN33@BuyRequest
  0045c	00 00 00 00	 DD	 $LN34@BuyRequest
  00460	00 00 00 00	 DD	 $LN35@BuyRequest
  00464	00 00 00 00	 DD	 $LN36@BuyRequest
$LN93@BuyRequest:
  00468	00 00 00 00	 DD	 $LN37@BuyRequest
  0046c	00 00 00 00	 DD	 $LN38@BuyRequest
  00470	00 00 00 00	 DD	 $LN39@BuyRequest
  00474	00 00 00 00	 DD	 $LN40@BuyRequest
  00478	00 00 00 00	 DD	 $LN41@BuyRequest
?BuyRequest@CGamblingEvent@@QAEEHEEEE@Z ENDP		; CGamblingEvent::BuyRequest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.h
;	COMDAT ?GetItemCount@CGamblingEvent@@QAEHXZ
_TEXT	SEGMENT
?GetItemCount@CGamblingEvent@@QAEHXZ PROC		; CGamblingEvent::GetItemCount, COMDAT
; _this$ = ecx

; 67   : 	int GetItemCount(){ return m_iCount; }

  00000	8b 81 60 02 00
	00		 mov	 eax, DWORD PTR [ecx+608]
  00006	c3		 ret	 0
?GetItemCount@CGamblingEvent@@QAEHXZ ENDP		; CGamblingEvent::GetItemCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?GetExcOption@CGamblingEvent@@QAEEXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?GetExcOption@CGamblingEvent@@QAEEXZ PROC		; CGamblingEvent::GetExcOption, COMDAT
; _this$ = ecx

; 562  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 563  : 	BYTE ExOption = 0;

  00007	32 db		 xor	 bl, bl
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 564  : 
; 565  : 	int OpIndex = 0;

  0000c	33 f6		 xor	 esi, esi

; 566  : 	int Count = 0;

  0000e	33 ff		 xor	 edi, edi
$LL2@GetExcOpti:

; 567  : 
; 568  : 	while( TRUE )
; 569  : 	{
; 570  : 		if( (DWORD)m_Option5Rate[OpIndex] >= GetLargeRand()%1000000 )

  00010	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00015	33 d2		 xor	 edx, edx
  00017	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0001c	f7 f1		 div	 ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00021	39 94 b0 48 02
	00 00		 cmp	 DWORD PTR [eax+esi*4+584], edx
  00028	72 0d		 jb	 SHORT $LN5@GetExcOpti

; 571  : 		{
; 572  : 			BYTE ExcValue = 1<<OpIndex;

  0002a	b0 01		 mov	 al, 1
  0002c	8b ce		 mov	 ecx, esi
  0002e	d2 e0		 shl	 al, cl

; 573  : 			if( !(ExOption&ExcValue) )

  00030	84 c3		 test	 al, bl
  00032	75 03		 jne	 SHORT $LN5@GetExcOpti

; 574  : 			{
; 575  : 				ExOption |= ExcValue;

  00034	0a d8		 or	 bl, al

; 576  : 				Count++;

  00036	47		 inc	 edi
$LN5@GetExcOpti:

; 577  : 			}
; 578  : 		}
; 579  : 
; 580  : 		OpIndex++;

  00037	46		 inc	 esi

; 581  : 
; 582  : 		if( Count == 0 )

  00038	85 ff		 test	 edi, edi
  0003a	75 09		 jne	 SHORT $LN6@GetExcOpti

; 583  : 		{
; 584  : 			if( OpIndex >= 6 )

  0003c	83 fe 06	 cmp	 esi, 6
  0003f	7c cf		 jl	 SHORT $LL2@GetExcOpti

; 585  : 			{
; 586  : 				OpIndex = 0;

  00041	33 f6		 xor	 esi, esi

; 587  : 			}
; 588  : 		}

  00043	eb cb		 jmp	 SHORT $LL2@GetExcOpti
$LN6@GetExcOpti:

; 589  : 		else if( Count == 1 )

  00045	83 ff 01	 cmp	 edi, 1
  00048	75 05		 jne	 SHORT $LN9@GetExcOpti

; 590  : 		{
; 591  : 			if( OpIndex >= 6 )

  0004a	83 fe 06	 cmp	 esi, 6

; 592  : 			{
; 593  : 				break;
; 594  : 			}
; 595  : 		}

  0004d	eb 03		 jmp	 SHORT $LN22@GetExcOpti
$LN9@GetExcOpti:

; 596  : 		else if( Count >= 2 )

  0004f	83 ff 02	 cmp	 edi, 2
$LN22@GetExcOpti:
  00052	7c bc		 jl	 SHORT $LL2@GetExcOpti

; 597  : 		{
; 598  : 			break;
; 599  : 		}
; 600  : 	}
; 601  : 
; 602  : return ExOption;

  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	8a c3		 mov	 al, bl
  00058	5b		 pop	 ebx

; 603  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?GetExcOption@CGamblingEvent@@QAEEXZ ENDP		; CGamblingEvent::GetExcOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?GetExcOption@CGamblingEvent@@QAEEH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_Number$ = 8						; size = 4
?GetExcOption@CGamblingEvent@@QAEEH@Z PROC		; CGamblingEvent::GetExcOption, COMDAT
; _this$ = ecx

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 526  : 	BYTE ExOption = 0;

  00007	32 db		 xor	 bl, bl
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 527  : 
; 528  : 	int OpIndex = 0;

  0000c	33 f6		 xor	 esi, esi

; 529  : 	int Count = 0;

  0000e	33 ff		 xor	 edi, edi
$LL2@GetExcOpti:

; 530  : 
; 531  : 	while( TRUE )
; 532  : 	{
; 533  : 		if( (DWORD)m_Option4Rate[OpIndex] >= GetLargeRand()%1000000 )

  00010	e8 00 00 00 00	 call	 ?GetLargeRand@@YAKXZ	; GetLargeRand
  00015	33 d2		 xor	 edx, edx
  00017	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0001c	f7 f1		 div	 ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00021	39 94 b0 30 02
	00 00		 cmp	 DWORD PTR [eax+esi*4+560], edx
  00028	72 0d		 jb	 SHORT $LN5@GetExcOpti

; 534  : 		{
; 535  : 			BYTE ExcValue = 1<<OpIndex;

  0002a	b0 01		 mov	 al, 1
  0002c	8b ce		 mov	 ecx, esi
  0002e	d2 e0		 shl	 al, cl

; 536  : 			if( !(ExOption&ExcValue) )

  00030	84 c3		 test	 al, bl
  00032	75 03		 jne	 SHORT $LN5@GetExcOpti

; 537  : 			{
; 538  : 				ExOption |= ExcValue;

  00034	0a d8		 or	 bl, al

; 539  : 				Count++;

  00036	47		 inc	 edi
$LN5@GetExcOpti:

; 540  : 			}
; 541  : 		}
; 542  : 
; 543  : 		OpIndex++;

  00037	46		 inc	 esi

; 544  : 
; 545  : 		if( Count < Number )

  00038	3b 7d 08	 cmp	 edi, DWORD PTR _Number$[ebp]
  0003b	7d 09		 jge	 SHORT $LN16@GetExcOpti

; 546  : 		{
; 547  : 			if( OpIndex >= 6 )

  0003d	83 fe 06	 cmp	 esi, 6
  00040	7c ce		 jl	 SHORT $LL2@GetExcOpti

; 548  : 			{
; 549  : 				OpIndex = 0;

  00042	33 f6		 xor	 esi, esi

; 550  : 			}
; 551  : 		}
; 552  : 		else if( Count >= Number )
; 553  : 		{
; 554  : 			break;
; 555  : 		}
; 556  : 	}

  00044	eb ca		 jmp	 SHORT $LL2@GetExcOpti
$LN16@GetExcOpti:
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 557  : 
; 558  : return ExOption;

  00048	8a c3		 mov	 al, bl
  0004a	5b		 pop	 ebx

; 559  : }

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?GetExcOption@CGamblingEvent@@QAEEH@Z ENDP		; CGamblingEvent::GetExcOption
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?GetLevel@CGamblingEvent@@QAEEH@Z
_TEXT	SEGMENT
_Index$ = 8						; size = 4
?GetLevel@CGamblingEvent@@QAEEH@Z PROC			; CGamblingEvent::GetLevel, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	if( Index < 0 || Index > 149 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _Index$[ebp]
  00006	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  0000b	77 34		 ja	 SHORT $LN3@GetLevel

; 290  : 
; 291  : 	if( m_ItemList[Index].btItemLevelMin == m_ItemList[Index].btItemLevelMax )

  0000d	57		 push	 edi
  0000e	8d 3c c1	 lea	 edi, DWORD PTR [ecx+eax*8]
  00011	8a 87 ce 02 00
	00		 mov	 al, BYTE PTR [edi+718]
  00017	8a 8f cf 02 00
	00		 mov	 cl, BYTE PTR [edi+719]
  0001d	3a c1		 cmp	 al, cl
  0001f	74 1b		 je	 SHORT $LN6@GetLevel

; 292  : 	{
; 293  : 		return m_ItemList[Index].btItemLevelMin;
; 294  : 	}
; 295  : 
; 296  : 	int sub = (m_ItemList[Index].btItemLevelMax - m_ItemList[Index].btItemLevelMin) + 1;

  00021	56		 push	 esi
  00022	0f b6 f1	 movzx	 esi, cl
  00025	0f b6 c0	 movzx	 eax, al
  00028	2b f0		 sub	 esi, eax
  0002a	46		 inc	 esi

; 297  : 	int level = m_ItemList[Index].btItemLevelMin + (rand()%sub);

  0002b	e8 00 00 00 00	 call	 _rand
  00030	99		 cdq
  00031	f7 fe		 idiv	 esi
  00033	5e		 pop	 esi
  00034	02 97 ce 02 00
	00		 add	 dl, BYTE PTR [edi+718]

; 298  : 
; 299  : 	return level;

  0003a	8a c2		 mov	 al, dl
$LN6@GetLevel:
  0003c	5f		 pop	 edi

; 300  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
$LN3@GetLevel:

; 289  : 		return false;

  00041	32 c0		 xor	 al, al

; 300  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?GetLevel@CGamblingEvent@@QAEEH@Z ENDP			; CGamblingEvent::GetLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?LoadData@CGamblingEvent@@QAEXPAD@Z
_TEXT	SEGMENT
_iGroupCount$1$ = -8					; size = 4
tv650 = -4						; size = 4
_szFileName$ = 8					; size = 4
?LoadData@CGamblingEvent@@QAEXPAD@Z PROC		; CGamblingEvent::LoadData, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 58   : 	m_bLoaded = FALSE;
; 59   : 	m_iCount = FALSE;
; 60   : 
; 61   : 	SMDFile = fopen(szFileName,"r");

  00008	8b 7d 08	 mov	 edi, DWORD PTR _szFileName$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  00012	57		 push	 edi
  00013	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  0001a	c7 83 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+608], 0
  00024	e8 00 00 00 00	 call	 _fopen
  00029	83 c4 08	 add	 esp, 8
  0002c	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 62   : 
; 63   : 	if( SMDFile == NULL )

  00031	85 c0		 test	 eax, eax
  00033	75 22		 jne	 SHORT $LN16@LoadData

; 64   : 	{
; 65   : 		LogAdd(lMsg.Get(MSGGET(1,197)),szFileName);

  00035	57		 push	 edi
  00036	68 c5 01 00 00	 push	 453			; 000001c5H
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00040	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004c	83 c4 08	 add	 esp, 8
  0004f	5f		 pop	 edi
  00050	5b		 pop	 ebx

; 284  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN16@LoadData:
  00057	56		 push	 esi

; 66   : 		return;
; 67   : 	}
; 68   : 
; 69   : 	int Token,iCount = 0,iGroupCount = 0,iRateCount = 0,Index;

  00058	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iGroupCount$1$[ebp], 0

; 70   : 
; 71   : 	while( TRUE )
; 72   : 	{
; 73   : 		Token = GetToken();

  0005f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 74   : 
; 75   : 		if( Token == END )

  00064	83 f8 02	 cmp	 eax, 2
  00067	0f 84 0f 04 00
	00		 je	 $LN88@LoadData

; 66   : 		return;
; 67   : 	}
; 68   : 
; 69   : 	int Token,iCount = 0,iGroupCount = 0,iRateCount = 0,Index;

  0006d	8d 8b 64 02 00
	00		 lea	 ecx, DWORD PTR [ebx+612]
  00073	89 4d fc	 mov	 DWORD PTR tv650[ebp], ecx
$LL2@LoadData:

; 76   : 			break;
; 77   : 
; 78   : 		if( Token == NUMBER )

  00076	83 f8 01	 cmp	 eax, 1
  00079	0f 85 ef 03 00
	00		 jne	 $LN44@LoadData

; 79   : 		{
; 80   : 			Index = (int)TokenNumber;

  0007f	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 81   : 
; 82   : 			if( Index == 0 )

  00087	85 c0		 test	 eax, eax
  00089	0f 85 a1 00 00
	00		 jne	 $LN19@LoadData

; 83   : 			{
; 84   : 				iRateCount = 0;

  0008f	33 ff		 xor	 edi, edi
  00091	8d 73 0c	 lea	 esi, DWORD PTR [ebx+12]
$LL4@LoadData:

; 85   : 
; 86   : 				while( TRUE )
; 87   : 				{
; 88   : 					Token = GetToken();

  00094	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 89   : 
; 90   : 					if( Token == NAME )

  00099	85 c0		 test	 eax, eax
  0009b	75 37		 jne	 SHORT $LN22@LoadData

; 91   : 					{
; 92   : 						if( strcmp("end",TokenString) == NULL )

  0009d	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  000a2	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL89@LoadData:
  000a7	8a 10		 mov	 dl, BYTE PTR [eax]
  000a9	3a 11		 cmp	 dl, BYTE PTR [ecx]
  000ab	75 1a		 jne	 SHORT $LN90@LoadData
  000ad	84 d2		 test	 dl, dl
  000af	74 12		 je	 SHORT $LN91@LoadData
  000b1	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  000b4	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  000b7	75 0e		 jne	 SHORT $LN90@LoadData
  000b9	83 c0 02	 add	 eax, 2
  000bc	83 c1 02	 add	 ecx, 2
  000bf	84 d2		 test	 dl, dl
  000c1	75 e4		 jne	 SHORT $LL89@LoadData
$LN91@LoadData:
  000c3	33 c0		 xor	 eax, eax
  000c5	eb 05		 jmp	 SHORT $LN92@LoadData
$LN90@LoadData:
  000c7	1b c0		 sbb	 eax, eax
  000c9	83 c8 01	 or	 eax, 1
$LN92@LoadData:
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 97 03 00
	00		 je	 $LN117@LoadData
$LN22@LoadData:

; 93   : 							break;
; 94   : 					}
; 95   : 
; 96   : 					if( iRateCount > MAX_GAMBLING_GROUP )

  000d4	83 ff 19	 cmp	 edi, 25			; 00000019H
  000d7	0f 8f 08 02 00
	00		 jg	 $LN68@LoadData

; 97   : 					{
; 98   : 						MsgBox("Load Script Error %s",szFileName);
; 99   : 						break;
; 100  : 					}
; 101  : 
; 102  : 					m_RateInfo[iRateCount].iSkillOptionRate = (int)TokenNumber;

  000dd	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000e5	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 103  : 
; 104  : 					Token = GetToken();

  000e8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 105  : 					m_RateInfo[iRateCount].iLuckOptionRate = (int)TokenNumber;

  000ed	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000f5	89 06		 mov	 DWORD PTR [esi], eax

; 106  : 
; 107  : 					Token = GetToken();

  000f7	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 108  : 					m_RateInfo[iRateCount].iAddOptionRate = (int)TokenNumber;

  000fc	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00104	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 109  : 
; 110  : 					Token = GetToken();

  00107	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 111  : 					m_RateInfo[iRateCount].iExOptionRate = (int)TokenNumber;

  0010c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00114	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 112  : 
; 113  : 					Token = GetToken();

  00117	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 114  : 					m_RateInfo[iRateCount].iDropRate = (int)TokenNumber;

  0011c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 115  : 
; 116  : 					iRateCount++;

  00124	47		 inc	 edi
  00125	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00128	83 c6 14	 add	 esi, 20			; 00000014H

; 117  : 				}

  0012b	e9 64 ff ff ff	 jmp	 $LL4@LoadData
$LN19@LoadData:

; 118  : 			}
; 119  : 			else if( Index == 1 )

  00130	83 f8 01	 cmp	 eax, 1
  00133	75 64		 jne	 SHORT $LN24@LoadData

; 120  : 			{
; 121  : 				iRateCount = 0;

  00135	33 f6		 xor	 esi, esi
  00137	8d bb fc 01 00
	00		 lea	 edi, DWORD PTR [ebx+508]
  0013d	0f 1f 00	 npad	 3
$LL6@LoadData:

; 122  : 				while( TRUE )
; 123  : 				{
; 124  : 					Token = GetToken();

  00140	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 125  : 
; 126  : 					if( Token == NAME )

  00145	85 c0		 test	 eax, eax
  00147	75 37		 jne	 SHORT $LN27@LoadData

; 127  : 					{
; 128  : 						if( strcmp("end",TokenString) == NULL )

  00149	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0014e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL93@LoadData:
  00153	8a 10		 mov	 dl, BYTE PTR [eax]
  00155	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00157	75 1a		 jne	 SHORT $LN94@LoadData
  00159	84 d2		 test	 dl, dl
  0015b	74 12		 je	 SHORT $LN95@LoadData
  0015d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00160	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00163	75 0e		 jne	 SHORT $LN94@LoadData
  00165	83 c0 02	 add	 eax, 2
  00168	83 c1 02	 add	 ecx, 2
  0016b	84 d2		 test	 dl, dl
  0016d	75 e4		 jne	 SHORT $LL93@LoadData
$LN95@LoadData:
  0016f	33 c0		 xor	 eax, eax
  00171	eb 05		 jmp	 SHORT $LN96@LoadData
$LN94@LoadData:
  00173	1b c0		 sbb	 eax, eax
  00175	83 c8 01	 or	 eax, 1
$LN96@LoadData:
  00178	85 c0		 test	 eax, eax
  0017a	0f 84 eb 02 00
	00		 je	 $LN117@LoadData
$LN27@LoadData:

; 129  : 							break;
; 130  : 					}
; 131  : 
; 132  : 					if( iRateCount > MAX_GAMBLING_OPTION1 )

  00180	83 fe 04	 cmp	 esi, 4
  00183	0f 8f 5c 01 00
	00		 jg	 $LN68@LoadData

; 133  : 					{
; 134  : 						MsgBox("Load Script Error %s",szFileName);
; 135  : 						break;
; 136  : 					}
; 137  : 
; 138  : 					m_OptionRate[iRateCount] = (int)TokenNumber;

  00189	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 139  : 					iRateCount++;

  00191	46		 inc	 esi
  00192	89 07		 mov	 DWORD PTR [edi], eax
  00194	83 c7 04	 add	 edi, 4

; 140  : 				}

  00197	eb a7		 jmp	 SHORT $LL6@LoadData
$LN24@LoadData:

; 141  : 			}
; 142  : 			else if( Index == 2 )

  00199	83 f8 02	 cmp	 eax, 2
  0019c	75 68		 jne	 SHORT $LN29@LoadData

; 143  : 			{
; 144  : 				iRateCount = 0;

  0019e	33 f6		 xor	 esi, esi
  001a0	8d bb 0c 02 00
	00		 lea	 edi, DWORD PTR [ebx+524]
$LL8@LoadData:

; 145  : 				while( TRUE )
; 146  : 				{
; 147  : 					Token = GetToken();

  001a6	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 148  : 
; 149  : 					if( Token == NAME )

  001ab	85 c0		 test	 eax, eax
  001ad	75 3e		 jne	 SHORT $LN32@LoadData

; 150  : 					{
; 151  : 						if( strcmp("end",TokenString) == NULL )

  001af	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  001b4	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  001b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL97@LoadData:
  001c0	8a 10		 mov	 dl, BYTE PTR [eax]
  001c2	3a 11		 cmp	 dl, BYTE PTR [ecx]
  001c4	75 1a		 jne	 SHORT $LN98@LoadData
  001c6	84 d2		 test	 dl, dl
  001c8	74 12		 je	 SHORT $LN99@LoadData
  001ca	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  001cd	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  001d0	75 0e		 jne	 SHORT $LN98@LoadData
  001d2	83 c0 02	 add	 eax, 2
  001d5	83 c1 02	 add	 ecx, 2
  001d8	84 d2		 test	 dl, dl
  001da	75 e4		 jne	 SHORT $LL97@LoadData
$LN99@LoadData:
  001dc	33 c0		 xor	 eax, eax
  001de	eb 05		 jmp	 SHORT $LN100@LoadData
$LN98@LoadData:
  001e0	1b c0		 sbb	 eax, eax
  001e2	83 c8 01	 or	 eax, 1
$LN100@LoadData:
  001e5	85 c0		 test	 eax, eax
  001e7	0f 84 7e 02 00
	00		 je	 $LN117@LoadData
$LN32@LoadData:

; 152  : 							break;
; 153  : 					}
; 154  : 
; 155  : 					if( iRateCount > MAX_GAMBLING_OPTION2 )

  001ed	83 fe 05	 cmp	 esi, 5
  001f0	0f 8f ef 00 00
	00		 jg	 $LN68@LoadData

; 156  : 					{
; 157  : 						MsgBox("Load Script Error %s",szFileName);
; 158  : 						break;
; 159  : 					}
; 160  : 
; 161  : 					m_Option2Rate[iRateCount] = (int)TokenNumber;

  001f6	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 162  : 					iRateCount++;

  001fe	46		 inc	 esi
  001ff	89 07		 mov	 DWORD PTR [edi], eax
  00201	83 c7 04	 add	 edi, 4

; 163  : 				}

  00204	eb a0		 jmp	 SHORT $LL8@LoadData
$LN29@LoadData:

; 164  : 			}
; 165  : 			else if( Index == 3 )

  00206	83 f8 03	 cmp	 eax, 3
  00209	75 61		 jne	 SHORT $LN34@LoadData

; 166  : 			{
; 167  : 				iRateCount = 0;

  0020b	33 f6		 xor	 esi, esi
  0020d	8d bb 20 02 00
	00		 lea	 edi, DWORD PTR [ebx+544]
$LL10@LoadData:

; 168  : 				while( TRUE )
; 169  : 				{
; 170  : 					Token = GetToken();

  00213	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 171  : 
; 172  : 					if( Token == NAME )

  00218	85 c0		 test	 eax, eax
  0021a	75 37		 jne	 SHORT $LN37@LoadData

; 173  : 					{
; 174  : 						if( strcmp("end",TokenString) == NULL )

  0021c	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00221	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL101@LoadData:
  00226	8a 10		 mov	 dl, BYTE PTR [eax]
  00228	3a 11		 cmp	 dl, BYTE PTR [ecx]
  0022a	75 1a		 jne	 SHORT $LN102@LoadData
  0022c	84 d2		 test	 dl, dl
  0022e	74 12		 je	 SHORT $LN103@LoadData
  00230	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00233	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00236	75 0e		 jne	 SHORT $LN102@LoadData
  00238	83 c0 02	 add	 eax, 2
  0023b	83 c1 02	 add	 ecx, 2
  0023e	84 d2		 test	 dl, dl
  00240	75 e4		 jne	 SHORT $LL101@LoadData
$LN103@LoadData:
  00242	33 c0		 xor	 eax, eax
  00244	eb 05		 jmp	 SHORT $LN104@LoadData
$LN102@LoadData:
  00246	1b c0		 sbb	 eax, eax
  00248	83 c8 01	 or	 eax, 1
$LN104@LoadData:
  0024b	85 c0		 test	 eax, eax
  0024d	0f 84 18 02 00
	00		 je	 $LN117@LoadData
$LN37@LoadData:

; 175  : 							break;
; 176  : 					}
; 177  : 
; 178  : 					if( iRateCount > MAX_GAMBLING_OPTION3 )

  00253	83 fe 04	 cmp	 esi, 4
  00256	0f 8f 89 00 00
	00		 jg	 $LN68@LoadData

; 179  : 					{
; 180  : 						MsgBox("Load Script Error %s",szFileName);
; 181  : 						break;
; 182  : 					}
; 183  : 
; 184  : 					m_Option3Rate[iRateCount] = (int)TokenNumber;

  0025c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 185  : 					iRateCount++;

  00264	46		 inc	 esi
  00265	89 07		 mov	 DWORD PTR [edi], eax
  00267	83 c7 04	 add	 edi, 4

; 186  : 				}

  0026a	eb a7		 jmp	 SHORT $LL10@LoadData
$LN34@LoadData:

; 187  : 			}
; 188  : 			else if( Index == 4 )

  0026c	83 f8 04	 cmp	 eax, 4
  0026f	0f 85 86 00 00
	00		 jne	 $LN39@LoadData

; 189  : 			{
; 190  : 				iRateCount = 0;

  00275	33 ff		 xor	 edi, edi
  00277	8d b3 48 02 00
	00		 lea	 esi, DWORD PTR [ebx+584]
  0027d	0f 1f 00	 npad	 3
$LL12@LoadData:

; 191  : 				while( TRUE )
; 192  : 				{
; 193  : 					Token = GetToken();

  00280	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 194  : 
; 195  : 					if( Token == NAME )

  00285	85 c0		 test	 eax, eax
  00287	75 37		 jne	 SHORT $LN42@LoadData

; 196  : 					{
; 197  : 						if( strcmp("end",TokenString) == NULL )

  00289	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  0028e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
$LL105@LoadData:
  00293	8a 10		 mov	 dl, BYTE PTR [eax]
  00295	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00297	75 1a		 jne	 SHORT $LN106@LoadData
  00299	84 d2		 test	 dl, dl
  0029b	74 12		 je	 SHORT $LN107@LoadData
  0029d	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  002a0	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  002a3	75 0e		 jne	 SHORT $LN106@LoadData
  002a5	83 c0 02	 add	 eax, 2
  002a8	83 c1 02	 add	 ecx, 2
  002ab	84 d2		 test	 dl, dl
  002ad	75 e4		 jne	 SHORT $LL105@LoadData
$LN107@LoadData:
  002af	33 c0		 xor	 eax, eax
  002b1	eb 05		 jmp	 SHORT $LN108@LoadData
$LN106@LoadData:
  002b3	1b c0		 sbb	 eax, eax
  002b5	83 c8 01	 or	 eax, 1
$LN108@LoadData:
  002b8	85 c0		 test	 eax, eax
  002ba	0f 84 ab 01 00
	00		 je	 $LN117@LoadData
$LN42@LoadData:

; 198  : 							break;
; 199  : 					}
; 200  : 
; 201  : 					if( iRateCount > MAX_GAMBLING_OPTION5 )

  002c0	83 ff 06	 cmp	 edi, 6
  002c3	7f 20		 jg	 SHORT $LN68@LoadData

; 204  : 						break;
; 205  : 					}
; 206  : 
; 207  : 					m_Option4Rate[iRateCount] = (int)TokenNumber;

  002c5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002cd	89 46 e8	 mov	 DWORD PTR [esi-24], eax

; 208  : 
; 209  : 					Token = GetToken();

  002d0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 210  : 					m_Option5Rate[iRateCount] = (int)TokenNumber;

  002d5	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 211  : 					iRateCount++;

  002dd	47		 inc	 edi
  002de	89 06		 mov	 DWORD PTR [esi], eax
  002e0	83 c6 04	 add	 esi, 4

; 212  : 				}

  002e3	eb 9b		 jmp	 SHORT $LL12@LoadData
$LN68@LoadData:

; 202  : 					{
; 203  : 						MsgBox("Load Script Error %s",szFileName);

  002e5	8b 7d 08	 mov	 edi, DWORD PTR _szFileName$[ebp]
  002e8	57		 push	 edi
  002e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  002ee	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  002f3	83 c4 08	 add	 esp, 8

; 213  : 			}
; 214  : 			else if( Index >= 5 )

  002f6	e9 73 01 00 00	 jmp	 $LN44@LoadData
$LN39@LoadData:
  002fb	83 f8 05	 cmp	 eax, 5
  002fe	0f 8c 6a 01 00
	00		 jl	 $LN44@LoadData

; 215  : 			{
; 216  : 				iCount = 0;

  00304	33 f6		 xor	 esi, esi
$LL14@LoadData:

; 217  : 
; 218  : 				while( TRUE )
; 219  : 				{
; 220  : 					Token = GetToken();

  00306	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 221  : 
; 222  : 					if( Token == NAME )

  0030b	85 c0		 test	 eax, eax
  0030d	75 3e		 jne	 SHORT $LN46@LoadData

; 223  : 					{
; 224  : 						if(strcmp("end",TokenString) == NULL)

  0030f	b9 00 00 00 00	 mov	 ecx, OFFSET ?TokenString@@3PADA
  00314	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_03JBJLGPFL@end?$AA@
  00319	0f 1f 80 00 00
	00 00		 npad	 7
$LL109@LoadData:
  00320	8a 10		 mov	 dl, BYTE PTR [eax]
  00322	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00324	75 1a		 jne	 SHORT $LN110@LoadData
  00326	84 d2		 test	 dl, dl
  00328	74 12		 je	 SHORT $LN111@LoadData
  0032a	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  0032d	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00330	75 0e		 jne	 SHORT $LN110@LoadData
  00332	83 c0 02	 add	 eax, 2
  00335	83 c1 02	 add	 ecx, 2
  00338	84 d2		 test	 dl, dl
  0033a	75 e4		 jne	 SHORT $LL109@LoadData
$LN111@LoadData:
  0033c	33 c0		 xor	 eax, eax
  0033e	eb 05		 jmp	 SHORT $LN112@LoadData
$LN110@LoadData:
  00340	1b c0		 sbb	 eax, eax
  00342	83 c8 01	 or	 eax, 1
$LN112@LoadData:
  00345	85 c0		 test	 eax, eax
  00347	0f 84 17 01 00
	00		 je	 $LN69@LoadData
$LN46@LoadData:

; 227  : 							break;
; 228  : 						}
; 229  : 					}
; 230  : 
; 231  : 					m_ItemList[m_iCount].btItemIndex = (BYTE)TokenNumber;

  0034d	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  00355	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  0035b	88 8c c3 cc 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+716], cl

; 232  : 
; 233  : 					Token = GetToken();

  00362	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 234  : 					m_ItemList[m_iCount].btItemType = (BYTE)TokenNumber;

  00367	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  0036f	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  00375	88 8c c3 cd 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+717], cl

; 235  : 
; 236  : 					Token = GetToken();

  0037c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 237  : 					m_ItemList[m_iCount].btItemLevelMin = (BYTE)TokenNumber;

  00381	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  00389	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  0038f	88 8c c3 ce 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+718], cl

; 238  : 
; 239  : 					Token = GetToken();

  00396	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 240  : 					m_ItemList[m_iCount].btItemLevelMax = (BYTE)TokenNumber;

  0039b	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  003a3	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  003a9	88 8c c3 cf 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+719], cl

; 241  : 
; 242  : 					Token = GetToken();

  003b0	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 243  : 					m_ItemList[m_iCount].btSkillOption = (BYTE)TokenNumber;

  003b5	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  003bd	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  003c3	88 8c c3 d0 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+720], cl

; 244  : 
; 245  : 					Token = GetToken();

  003ca	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 246  : 					m_ItemList[m_iCount].btLuckOption = (BYTE)TokenNumber;

  003cf	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  003d7	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  003dd	88 8c c3 d1 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+721], cl

; 247  : 
; 248  : 					Token = GetToken();

  003e4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 249  : 					m_ItemList[m_iCount].btAddOption = (BYTE)TokenNumber;

  003e9	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  003f1	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  003f7	88 8c c3 d2 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+722], cl

; 250  : 
; 251  : 					Token = GetToken();

  003fe	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 252  : 					m_ItemList[m_iCount].btExOption = (BYTE)TokenNumber;

  00403	f3 0f 2c 0d 00
	00 00 00	 cvttss2si ecx, DWORD PTR ?TokenNumber@@3MA
  0040b	8b 83 60 02 00
	00		 mov	 eax, DWORD PTR [ebx+608]
  00411	88 8c c3 d3 02
	00 00		 mov	 BYTE PTR [ebx+eax*8+723], cl

; 253  : 
; 254  : 					if( m_ItemList[m_iCount].btItemLevelMin > m_ItemList[m_iCount].btItemLevelMax )

  00418	8b 8b 60 02 00
	00		 mov	 ecx, DWORD PTR [ebx+608]
  0041e	8a 84 cb ce 02
	00 00		 mov	 al, BYTE PTR [ebx+ecx*8+718]
  00425	3a 84 cb cf 02
	00 00		 cmp	 al, BYTE PTR [ebx+ecx*8+719]
  0042c	0f 87 82 00 00
	00		 ja	 $LN70@LoadData

; 257  : 						return;
; 258  : 					}
; 259  : 
; 260  : 					iCount++;
; 261  : 					m_iCount++;

  00432	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00435	46		 inc	 esi
  00436	89 83 60 02 00
	00		 mov	 DWORD PTR [ebx+608], eax

; 262  : 
; 263  : 					if( m_iCount > 149 )

  0043c	3d 95 00 00 00	 cmp	 eax, 149		; 00000095H
  00441	0f 8e bf fe ff
	ff		 jle	 $LL14@LoadData
  00447	8b 45 fc	 mov	 eax, DWORD PTR tv650[ebp]
$LN71@LoadData:

; 264  : 					{
; 265  : 						break;
; 266  : 					}
; 267  : 				}
; 268  : 
; 269  : 				iGroupCount++;

  0044a	8b 75 f8	 mov	 esi, DWORD PTR _iGroupCount$1$[ebp]
  0044d	83 c0 04	 add	 eax, 4
  00450	46		 inc	 esi
  00451	89 45 fc	 mov	 DWORD PTR tv650[ebp], eax
  00454	89 75 f8	 mov	 DWORD PTR _iGroupCount$1$[ebp], esi

; 270  : 
; 271  : 				if( iGroupCount > (MAX_GAMBLING_GROUP-1) )

  00457	83 fe 18	 cmp	 esi, 24			; 00000018H
  0045a	7f 20		 jg	 SHORT $LN88@LoadData

; 272  : 				{
; 273  : 					break;
; 274  : 				}
; 275  : 
; 276  : 				m_iGroupCount = iGroupCount;

  0045c	89 b3 c8 02 00
	00		 mov	 DWORD PTR [ebx+712], esi
  00462	eb 0a		 jmp	 SHORT $LN44@LoadData
$LN69@LoadData:

; 225  : 						{
; 226  : 							m_iGroupItemCount[iGroupCount] = iCount;

  00464	8b 45 fc	 mov	 eax, DWORD PTR tv650[ebp]
  00467	89 30		 mov	 DWORD PTR [eax], esi
  00469	eb df		 jmp	 SHORT $LN71@LoadData
$LN117@LoadData:
  0046b	8b 7d 08	 mov	 edi, DWORD PTR _szFileName$[ebp]
$LN44@LoadData:

; 70   : 
; 71   : 	while( TRUE )
; 72   : 	{
; 73   : 		Token = GetToken();

  0046e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 74   : 
; 75   : 		if( Token == END )

  00473	83 f8 02	 cmp	 eax, 2
  00476	0f 85 fa fb ff
	ff		 jne	 $LL2@LoadData
$LN88@LoadData:

; 277  : 			}
; 278  : 		}
; 279  : 	}
; 280  : 
; 281  : 	fclose(SMDFile);

  0047c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00482	e8 00 00 00 00	 call	 _fclose
  00487	83 c4 04	 add	 esp, 4

; 282  : 	LogAdd(lMsg.Get(MSGGET(1,198)),szFileName);

  0048a	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0048f	57		 push	 edi
  00490	68 c6 01 00 00	 push	 454			; 000001c6H
  00495	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0049a	50		 push	 eax
  0049b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  004a1	83 c4 08	 add	 esp, 8

; 283  : 	m_bLoaded = TRUE;

  004a4	c7 43 04 01 00
	00 00		 mov	 DWORD PTR [ebx+4], 1
  004ab	5e		 pop	 esi
  004ac	5f		 pop	 edi
  004ad	5b		 pop	 ebx

; 284  : }

  004ae	8b e5		 mov	 esp, ebp
  004b0	5d		 pop	 ebp
  004b1	c2 04 00	 ret	 4
$LN70@LoadData:

; 255  : 					{
; 256  : 						MsgBox("Load Script Error %s",szFileName);

  004b4	57		 push	 edi
  004b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KEOMIEDM@Load?5Script?5Error?5?$CFs?$AA@
  004ba	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 282  : 	LogAdd(lMsg.Get(MSGGET(1,198)),szFileName);

  004bf	83 c4 08	 add	 esp, 8
  004c2	5e		 pop	 esi
  004c3	5f		 pop	 edi
  004c4	5b		 pop	 ebx

; 284  : }

  004c5	8b e5		 mov	 esp, ebp
  004c7	5d		 pop	 ebp
  004c8	c2 04 00	 ret	 4
?LoadData@CGamblingEvent@@QAEXPAD@Z ENDP		; CGamblingEvent::LoadData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?Init@CGamblingEvent@@QAEXPAD@Z
_TEXT	SEGMENT
_szFileName$ = 8					; size = 4
?Init@CGamblingEvent@@QAEXPAD@Z PROC			; CGamblingEvent::Init, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 25   : 	m_bLoaded = FALSE;
; 26   : 	m_iCount = 0;
; 27   : 	m_iGroupCount = 0;
; 28   : 
; 29   : 	int i;
; 30   : 	for(i = 0; i < MAX_GAMBLING_OPTION1; i++)
; 31   : 	{
; 32   : 		m_OptionRate[i] = 0;
; 33   : 	}
; 34   : 
; 35   : 	for(i = 0; i < MAX_GAMBLING_OPTION2; i++)
; 36   : 	{
; 37   : 		m_Option2Rate[i] = 0;
; 38   : 	}
; 39   : 
; 40   : 	for(i = 0; i < MAX_GAMBLING_OPTION3; i++)
; 41   : 	{
; 42   : 	}
; 43   : 
; 44   : 	for(i = 0; i < MAX_GAMBLING_OPTION4; i++)
; 45   : 	{
; 46   : 	}
; 47   : 
; 48   : 	for(i = 0; i < MAX_GAMBLING_GROUP; i++)
; 49   : 	{
; 50   : 		m_iGroupItemCount[i] = 0;
; 51   : 	}
; 52   : 
; 53   : 	LoadData(gDirPath.GetNewPath(szFileName));

  00009	ff 75 08	 push	 DWORD PTR _szFileName$[ebp]
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00011	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00018	c7 86 60 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+608], 0
  00022	c7 86 c8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+712], 0
  0002c	c7 86 fc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+508], 0
  00036	c7 86 00 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+512], 0
  00040	c7 86 04 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+516], 0
  0004a	c7 86 08 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+520], 0
  00054	c7 86 0c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+524], 0
  0005e	c7 86 10 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+528], 0
  00068	c7 86 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+532], 0
  00072	c7 86 18 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+536], 0
  0007c	c7 86 1c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+540], 0
  00086	0f 11 86 64 02
	00 00		 movups	 XMMWORD PTR [esi+612], xmm0
  0008d	0f 11 86 74 02
	00 00		 movups	 XMMWORD PTR [esi+628], xmm0
  00094	0f 11 86 84 02
	00 00		 movups	 XMMWORD PTR [esi+644], xmm0
  0009b	0f 11 86 94 02
	00 00		 movups	 XMMWORD PTR [esi+660], xmm0
  000a2	0f 11 86 a4 02
	00 00		 movups	 XMMWORD PTR [esi+676], xmm0
  000a9	0f 11 86 b4 02
	00 00		 movups	 XMMWORD PTR [esi+692], xmm0
  000b0	c7 86 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+708], 0
  000ba	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000bf	50		 push	 eax
  000c0	8b ce		 mov	 ecx, esi
  000c2	e8 00 00 00 00	 call	 ?LoadData@CGamblingEvent@@QAEXPAD@Z ; CGamblingEvent::LoadData
  000c7	5e		 pop	 esi

; 54   : }

  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?Init@CGamblingEvent@@QAEXPAD@Z ENDP			; CGamblingEvent::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ??1CGamblingEvent@@UAE@XZ
_TEXT	SEGMENT
??1CGamblingEvent@@UAE@XZ PROC				; CGamblingEvent::~CGamblingEvent, COMDAT
; _this$ = ecx

; 17   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CGamblingEvent@@6B@

; 18   : 
; 19   : }

  00006	c3		 ret	 0
??1CGamblingEvent@@UAE@XZ ENDP				; CGamblingEvent::~CGamblingEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
; File c:\users\michel\desktop\source\gameserver\source\gambling.h
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ??0CGamblingEvent@@QAE@XZ
_TEXT	SEGMENT
??0CGamblingEvent@@QAE@XZ PROC				; CGamblingEvent::CGamblingEvent, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	ba 19 00 00 00	 mov	 edx, 25			; 00000019H
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGamblingEvent@@6B@
; File c:\users\michel\desktop\source\gameserver\source\gambling.h

; 72   : 	int m_bLoaded;

  0000e	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
$LL4@CGamblingE:

; 14   : 		btLuckOption = 0;
; 15   : 		btAddOption = 0;
; 16   : 		btExOption = 0;
; 17   : 	}
; 18   : 
; 19   : 	BYTE btItemIndex;	// 0
; 20   : 	BYTE btItemType;	// 1
; 21   : 	BYTE btItemLevelMin;	// 2
; 22   : 	BYTE btItemLevelMax;	// 3
; 23   : 	BYTE btSkillOption;	// 4
; 24   : 	BYTE btLuckOption;	// 5
; 25   : 	BYTE btAddOption;	// 6
; 26   : 	BYTE btExOption;	// 7
; 27   : };
; 28   : 
; 29   : struct _GAMBLING_RATE_STRUCT
; 30   : {
; 31   : 	_GAMBLING_RATE_STRUCT()
; 32   : 	{
; 33   : 		iDropRate = 0;

  00011	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00018	8d 40 14	 lea	 eax, DWORD PTR [eax+20]

; 34   : 		iSkillOptionRate = 0;

  0001b	c7 40 ec 00 00
	00 00		 mov	 DWORD PTR [eax-20], 0

; 35   : 		iLuckOptionRate = 0;

  00022	c7 40 f0 00 00
	00 00		 mov	 DWORD PTR [eax-16], 0

; 36   : 		iAddOptionRate = 0;

  00029	c7 40 f4 00 00
	00 00		 mov	 DWORD PTR [eax-12], 0

; 37   : 		iExOptionRate = 0;

  00030	c7 40 f8 00 00
	00 00		 mov	 DWORD PTR [eax-8], 0
  00037	83 ea 01	 sub	 edx, 1
  0003a	75 d5		 jne	 SHORT $LL4@CGamblingE

; 73   : 
; 74   : 	_GAMBLING_RATE_STRUCT m_RateInfo[MAX_GAMBLING_GROUP];
; 75   : 
; 76   : 	DWORD m_OptionRate[MAX_GAMBLING_OPTION1];
; 77   : 	DWORD m_Option2Rate[MAX_GAMBLING_OPTION2];
; 78   : 	DWORD m_Option3Rate[MAX_GAMBLING_OPTION3];
; 79   : 	DWORD m_Option4Rate[MAX_GAMBLING_OPTION4];
; 80   : 	DWORD m_Option5Rate[MAX_GAMBLING_OPTION5];
; 81   : 
; 82   : 	int m_iCount;
; 83   : 
; 84   : 	int m_iGroupItemCount[MAX_GAMBLING_GROUP];
; 85   : 	int m_iGroupCount;

  0003c	8d 86 cc 02 00
	00		 lea	 eax, DWORD PTR [esi+716]
  00042	b9 96 00 00 00	 mov	 ecx, 150		; 00000096H
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@CGamblingE:

; 9    : 		btItemIndex = 0;

  00050	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00056	8d 40 08	 lea	 eax, DWORD PTR [eax+8]

; 10   : 		btItemType = 0;
; 11   : 		btItemLevelMin = 0;
; 12   : 		btItemLevelMax = 0;
; 13   : 		btSkillOption = 0;

  00059	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00060	83 e9 01	 sub	 ecx, 1
  00063	75 eb		 jne	 SHORT $LL10@CGamblingE
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp

; 14   : }

  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	c3		 ret	 0
??0CGamblingEvent@@QAE@XZ ENDP				; CGamblingEvent::CGamblingEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.h
;	COMDAT ??0_GAMBLING_RATE_STRUCT@@QAE@XZ
_TEXT	SEGMENT
??0_GAMBLING_RATE_STRUCT@@QAE@XZ PROC			; _GAMBLING_RATE_STRUCT::_GAMBLING_RATE_STRUCT, COMDAT
; _this$ = ecx

; 32   : 	{
; 33   : 		iDropRate = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 34   : 		iSkillOptionRate = 0;
; 35   : 		iLuckOptionRate = 0;
; 36   : 		iAddOptionRate = 0;
; 37   : 		iExOptionRate = 0;
; 38   : 	}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00024	c3		 ret	 0
??0_GAMBLING_RATE_STRUCT@@QAE@XZ ENDP			; _GAMBLING_RATE_STRUCT::_GAMBLING_RATE_STRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.h
;	COMDAT ??0_GAMBLING_ITEMOPTION@@QAE@XZ
_TEXT	SEGMENT
??0_GAMBLING_ITEMOPTION@@QAE@XZ PROC			; _GAMBLING_ITEMOPTION::_GAMBLING_ITEMOPTION, COMDAT
; _this$ = ecx

; 8    : 	{
; 9    : 		btItemIndex = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 10   : 		btItemType = 0;
; 11   : 		btItemLevelMin = 0;
; 12   : 		btItemLevelMax = 0;
; 13   : 		btSkillOption = 0;
; 14   : 		btLuckOption = 0;
; 15   : 		btAddOption = 0;
; 16   : 		btExOption = 0;
; 17   : 	}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0_GAMBLING_ITEMOPTION@@QAE@XZ ENDP			; _GAMBLING_ITEMOPTION::_GAMBLING_ITEMOPTION
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\gambling.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 604  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
