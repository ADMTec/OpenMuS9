; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MonsterMoneyDrop.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0MonsterMoneyDrop@@QAE@XZ			; MonsterMoneyDrop::MonsterMoneyDrop
PUBLIC	??1MonsterMoneyDrop@@UAE@XZ			; MonsterMoneyDrop::~MonsterMoneyDrop
PUBLIC	?Init@MonsterMoneyDrop@@QAEXXZ			; MonsterMoneyDrop::Init
PUBLIC	?Load@MonsterMoneyDrop@@QAEXXZ			; MonsterMoneyDrop::Load
PUBLIC	?Read@MonsterMoneyDrop@@QAEXPAD@Z		; MonsterMoneyDrop::Read
PUBLIC	?Run@MonsterMoneyDrop@@QAEHPAUOBJECTSTRUCT@@0@Z	; MonsterMoneyDrop::Run
PUBLIC	?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
PUBLIC	?allocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::allocate
PUBLIC	?push_back@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXABUMonsterMoneyDropInfo@@@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reserve
PUBLIC	??_GMonsterMoneyDrop@@UAEPAXI@Z			; MonsterMoneyDrop::`scalar deleting destructor'
PUBLIC	??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>
PUBLIC	??_7MonsterMoneyDrop@@6B@			; MonsterMoneyDrop::`vftable'
PUBLIC	?g_MonsterMoneyDrop@@3VMonsterMoneyDrop@@A	; g_MonsterMoneyDrop
PUBLIC	??_C@_0BN@JCBOCOHK@Monster?2MonsterMoneyDrop?4xml?$AA@ ; `string'
PUBLIC	??_C@_0CJ@PBPHNJC@?$FLMonsterMoneyDrop?$FN?5File?5?$CFs?5not?5f@ ; `string'
PUBLIC	??_C@_0BB@ODGADNNF@monstermoneydrop?$AA@	; `string'
PUBLIC	??_C@_07MHHIKOPA@enabled?$AA@			; `string'
PUBLIC	??_C@_0M@EHINOFIH@monsterlist?$AA@		; `string'
PUBLIC	??_C@_07JHAJHILB@monster?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_08MFNNEPNC@levelmin?$AA@			; `string'
PUBLIC	??_C@_08NHFGKLLN@levelmax?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_08LPFHINAC@moneymin?$AA@			; `string'
PUBLIC	??_C@_08KNNMGJGN@moneymax?$AA@			; `string'
PUBLIC	??_C@_04HCCHHEEF@rate?$AA@			; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4MonsterMoneyDrop@@6B@			; MonsterMoneyDrop::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMonsterMoneyDrop@@@8			; MonsterMoneyDrop `RTTI Type Descriptor'
PUBLIC	??_R3MonsterMoneyDrop@@8			; MonsterMoneyDrop::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MonsterMoneyDrop@@8			; MonsterMoneyDrop::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MonsterMoneyDrop@@8		; MonsterMoneyDrop::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@40c00000
PUBLIC	__real@42c80000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_rand:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?MoneyItemDrop@MapClass@@QAEHHHH@Z:PROC		; MapClass::MoneyItemDrop
EXTRN	?gObjUnicornSprite@@YAHPAUOBJECTSTRUCT@@@Z:PROC	; gObjUnicornSprite
EXTRN	??_EMonsterMoneyDrop@@UAEPAXI@Z:PROC		; MonsterMoneyDrop::`vector deleting destructor'
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?text@xml_node@pugi@@QBE?AVxml_text@2@XZ:PROC	; pugi::xml_node::text
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	?as_int@xml_text@pugi@@QBEHH@Z:PROC		; pugi::xml_text::as_int
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?GetMoney@MapRateInfo@@QAEMF@Z:PROC		; MapRateInfo::GetMoney
EXTRN	?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z:PROC ; gObjMonsterTopHitDamageUser
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?m_ObjBill@@3PAVBILL_CLASS@@A:BYTE		; m_ObjBill
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?g_MapRateInfo@@3VMapRateInfo@@A:BYTE		; g_MapRateInfo
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_MonsterMoneyDrop@@3VMonsterMoneyDrop@@A DB 014H DUP (?) ; g_MonsterMoneyDrop
_BSS	ENDS
CRT$XCU	SEGMENT
?g_MonsterMoneyDrop$initializer$@@3P6AXXZA DD FLAT:??__Eg_MonsterMoneyDrop@@YAXXZ ; g_MonsterMoneyDrop$initializer$
CRT$XCU	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@MonsterMoneyDrop@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MonsterMoneyDrop@@8 DD FLAT:??_R0?AVMonsterMoneyDrop@@@8 ; MonsterMoneyDrop::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MonsterMoneyDrop@@8
rdata$r	ENDS
;	COMDAT ??_R2MonsterMoneyDrop@@8
rdata$r	SEGMENT
??_R2MonsterMoneyDrop@@8 DD FLAT:??_R1A@?0A@EA@MonsterMoneyDrop@@8 ; MonsterMoneyDrop::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MonsterMoneyDrop@@8
rdata$r	SEGMENT
??_R3MonsterMoneyDrop@@8 DD 00H				; MonsterMoneyDrop::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MonsterMoneyDrop@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMonsterMoneyDrop@@@8
data$r	SEGMENT
??_R0?AVMonsterMoneyDrop@@@8 DD FLAT:??_7type_info@@6B@	; MonsterMoneyDrop `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMonsterMoneyDrop@@', 00H
data$r	ENDS
;	COMDAT ??_R4MonsterMoneyDrop@@6B@
rdata$r	SEGMENT
??_R4MonsterMoneyDrop@@6B@ DD 00H			; MonsterMoneyDrop::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMonsterMoneyDrop@@@8
	DD	FLAT:??_R3MonsterMoneyDrop@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCCHHEEF@rate?$AA@
CONST	SEGMENT
??_C@_04HCCHHEEF@rate?$AA@ DB 'rate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KNNMGJGN@moneymax?$AA@
CONST	SEGMENT
??_C@_08KNNMGJGN@moneymax?$AA@ DB 'moneymax', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPFHINAC@moneymin?$AA@
CONST	SEGMENT
??_C@_08LPFHINAC@moneymin?$AA@ DB 'moneymin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHFGKLLN@levelmax?$AA@
CONST	SEGMENT
??_C@_08NHFGKLLN@levelmax?$AA@ DB 'levelmax', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MFNNEPNC@levelmin?$AA@
CONST	SEGMENT
??_C@_08MFNNEPNC@levelmin?$AA@ DB 'levelmin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHAJHILB@monster?$AA@
CONST	SEGMENT
??_C@_07JHAJHILB@monster?$AA@ DB 'monster', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHINOFIH@monsterlist?$AA@
CONST	SEGMENT
??_C@_0M@EHINOFIH@monsterlist?$AA@ DB 'monsterlist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHHIKOPA@enabled?$AA@
CONST	SEGMENT
??_C@_07MHHIKOPA@enabled?$AA@ DB 'enabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ODGADNNF@monstermoneydrop?$AA@
CONST	SEGMENT
??_C@_0BB@ODGADNNF@monstermoneydrop?$AA@ DB 'monstermoneydrop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PBPHNJC@?$FLMonsterMoneyDrop?$FN?5File?5?$CFs?5not?5f@
CONST	SEGMENT
??_C@_0CJ@PBPHNJC@?$FLMonsterMoneyDrop?$FN?5File?5?$CFs?5not?5f@ DB '[Mon'
	DB	'sterMoneyDrop] File %s not found! %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JCBOCOHK@Monster?2MonsterMoneyDrop?4xml?$AA@
CONST	SEGMENT
??_C@_0BN@JCBOCOHK@Monster?2MonsterMoneyDrop?4xml?$AA@ DB 'Monster\Monste'
	DB	'rMoneyDrop.xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7MonsterMoneyDrop@@6B@
CONST	SEGMENT
??_7MonsterMoneyDrop@@6B@ DD FLAT:??_R4MonsterMoneyDrop@@6B@ ; MonsterMoneyDrop::`vftable'
	DD	FLAT:??_EMonsterMoneyDrop@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@MonsterMoneyDrop@@QAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@MonsterMoneyDrop@@QAEXPAD@Z$0
__ehfuncinfo$?Read@MonsterMoneyDrop@@QAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@MonsterMoneyDrop@@QAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@U1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMonsterMoneyDropInfo@@U1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@$$QAU2@@Z PROC ; std::allocator<MonsterMoneyDropInfo>::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UMonsterMoneyDropInfo@@U1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@$$QAU2@@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@U1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMonsterMoneyDropInfo@@U1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@UMonsterMoneyDropInfo@@U1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UMonsterMoneyDropInfo@@@std@@YA$$QAUMonsterMoneyDropInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMonsterMoneyDropInfo@@@std@@YA$$QAUMonsterMoneyDropInfo@@AAU1@@Z PROC ; std::forward<MonsterMoneyDropInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UMonsterMoneyDropInfo@@@std@@YA$$QAUMonsterMoneyDropInfo@@AAU1@@Z ENDP ; std::forward<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@U1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMonsterMoneyDropInfo@@U1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UMonsterMoneyDropInfo@@U1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMonsterMoneyDropInfo@@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMonsterMoneyDropInfo@@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@@Z PROC ; std::allocator<MonsterMoneyDropInfo>::destroy<MonsterMoneyDropInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMonsterMoneyDropInfo@@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::destroy<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	3b ce		 cmp	 ecx, esi
  0000f	74 1a		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00011	85 c0		 test	 eax, eax
  00013	74 0c		 je	 SHORT $LN2@Uninit_mov
  00015	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00018	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001e	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	83 c0 14	 add	 eax, 20			; 00000014H
  00027	3b ce		 cmp	 ecx, esi
  00029	75 e6		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:
  0002b	5e		 pop	 esi

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@@Z PROC ; std::_Val_type<MonsterMoneyDropInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@@Z ENDP ; std::_Val_type<MonsterMoneyDropInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMonsterMoneyDropInfo@@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UMonsterMoneyDropInfo@@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@@Z PROC ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::destroy<MonsterMoneyDropInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UMonsterMoneyDropInfo@@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@@Z ENDP ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::destroy<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MonsterMoneyDropInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUMonsterMoneyDropInfo@@PAU1@@std@@YAAAPAUMonsterMoneyDropInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUMonsterMoneyDropInfo@@PAU1@@std@@YAAAPAUMonsterMoneyDropInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUMonsterMoneyDropInfo@@PAU1@@std@@YAAAPAUMonsterMoneyDropInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@@Z PROC ; std::_Unchecked<MonsterMoneyDropInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@@Z ENDP ; std::_Unchecked<MonsterMoneyDropInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMonsterMoneyDropInfo@@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMonsterMoneyDropInfo@@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::destroy<MonsterMoneyDropInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMonsterMoneyDropInfo@@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::destroy<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@AAU1@@Z PROC ; std::addressof<MonsterMoneyDropInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UMonsterMoneyDropInfo@@@std@@YAPAUMonsterMoneyDropInfo@@AAU1@@Z ENDP ; std::addressof<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@ABU1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMonsterMoneyDropInfo@@ABU1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@ABU2@@Z PROC ; std::allocator<MonsterMoneyDropInfo>::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UMonsterMoneyDropInfo@@ABU1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@ABU2@@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@AAU1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMonsterMoneyDropInfo@@AAU1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@AAU2@@Z PROC ; std::allocator<MonsterMoneyDropInfo>::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN3@construct:

; 656  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UMonsterMoneyDropInfo@@AAU1@@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@AAU2@@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAUMonsterMoneyDropInfo@@@std@@YA$$QAPAUMonsterMoneyDropInfo@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAUMonsterMoneyDropInfo@@@std@@YA$$QAPAUMonsterMoneyDropInfo@@AAPAU1@@Z PROC ; std::_Move<MonsterMoneyDropInfo * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAUMonsterMoneyDropInfo@@@std@@YA$$QAPAUMonsterMoneyDropInfo@@AAPAU1@@Z ENDP ; std::_Move<MonsterMoneyDropInfo * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUMonsterMoneyDropInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMonsterMoneyDropInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUMonsterMoneyDropInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXPAUMonsterMoneyDropInfo@@0AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXPAUMonsterMoneyDropInfo@@0AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXPAUMonsterMoneyDropInfo@@0AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UMonsterMoneyDropInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMonsterMoneyDropInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMonsterMoneyDropInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMonsterMoneyDropInfo@@0@Z PROC ; std::_Ptr_cat<MonsterMoneyDropInfo,MonsterMoneyDropInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UMonsterMoneyDropInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMonsterMoneyDropInfo@@0@Z ENDP ; std::_Ptr_cat<MonsterMoneyDropInfo,MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@YAABV?$allocator@UMonsterMoneyDropInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@YAABV?$allocator@UMonsterMoneyDropInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<MonsterMoneyDropInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@YAABV?$allocator@UMonsterMoneyDropInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<MonsterMoneyDropInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@ABU1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMonsterMoneyDropInfo@@ABU1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@UMonsterMoneyDropInfo@@ABU1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUMonsterMoneyDropInfo@@@std@@YAABUMonsterMoneyDropInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMonsterMoneyDropInfo@@@std@@YAABUMonsterMoneyDropInfo@@ABU1@@Z PROC ; std::forward<MonsterMoneyDropInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUMonsterMoneyDropInfo@@@std@@YAABUMonsterMoneyDropInfo@@ABU1@@Z ENDP ; std::forward<MonsterMoneyDropInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@AAU1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMonsterMoneyDropInfo@@AAU1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$construct@UMonsterMoneyDropInfo@@AAU1@@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAXAAV?$allocator@UMonsterMoneyDropInfo@@@1@PAUMonsterMoneyDropInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUMonsterMoneyDropInfo@@@std@@YAAAUMonsterMoneyDropInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMonsterMoneyDropInfo@@@std@@YAAAUMonsterMoneyDropInfo@@AAU1@@Z PROC ; std::forward<MonsterMoneyDropInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUMonsterMoneyDropInfo@@@std@@YAAAUMonsterMoneyDropInfo@@AAU1@@Z ENDP ; std::forward<MonsterMoneyDropInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUMonsterMoneyDropInfo@@@std@@YAPBUMonsterMoneyDropInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUMonsterMoneyDropInfo@@@std@@YAPBUMonsterMoneyDropInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MonsterMoneyDropInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUMonsterMoneyDropInfo@@@std@@YAPBUMonsterMoneyDropInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MonsterMoneyDropInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUMonsterMoneyDropInfo@@@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEPAUMonsterMoneyDropInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUMonsterMoneyDropInfo@@@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEPAUMonsterMoneyDropInfo@@PAU2@00@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Umove<MonsterMoneyDropInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMonsterMoneyDropInfo@@@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEPAUMonsterMoneyDropInfo@@PAU2@00@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Umove<MonsterMoneyDropInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXPAUMonsterMoneyDropInfo@@0AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXPAUMonsterMoneyDropInfo@@0AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXPAUMonsterMoneyDropInfo@@0AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UMonsterMoneyDropInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UMonsterMoneyDropInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1><std::allocator<MonsterMoneyDropInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UMonsterMoneyDropInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1><std::allocator<MonsterMoneyDropInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMonsterMoneyDropInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UMonsterMoneyDropInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMonsterMoneyDropInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMonsterMoneyDropInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00016	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??$construct@UMonsterMoneyDropInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::construct<MonsterMoneyDropInfo,MonsterMoneyDropInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUMonsterMoneyDropInfo@@@std@@YAPBUMonsterMoneyDropInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMonsterMoneyDropInfo@@@std@@YAPBUMonsterMoneyDropInfo@@ABU1@@Z PROC ; std::addressof<MonsterMoneyDropInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUMonsterMoneyDropInfo@@@std@@YAPBUMonsterMoneyDropInfo@@ABU1@@Z ENDP ; std::addressof<MonsterMoneyDropInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAUMonsterMoneyDropInfo@@@std@@YAXAAPAUMonsterMoneyDropInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUMonsterMoneyDropInfo@@@std@@YAXAAPAUMonsterMoneyDropInfo@@0@Z PROC ; std::swap<MonsterMoneyDropInfo *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAUMonsterMoneyDropInfo@@@std@@YAXAAPAUMonsterMoneyDropInfo@@0@Z ENDP ; std::swap<MonsterMoneyDropInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAUMonsterMoneyDropInfo@@@std@@YAXAAPAUMonsterMoneyDropInfo@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAUMonsterMoneyDropInfo@@@std@@YAXAAPAUMonsterMoneyDropInfo@@0@Z PROC ; std::_Swap_adl<MonsterMoneyDropInfo *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAUMonsterMoneyDropInfo@@@std@@YAXAAPAUMonsterMoneyDropInfo@@0@Z ENDP ; std::_Swap_adl<MonsterMoneyDropInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8UMonsterMoneyDropInfo@@U0@@std@@YA_NABV?$allocator@UMonsterMoneyDropInfo@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UMonsterMoneyDropInfo@@U0@@std@@YA_NABV?$allocator@UMonsterMoneyDropInfo@@@0@0@Z PROC ; std::operator==<MonsterMoneyDropInfo,MonsterMoneyDropInfo>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8UMonsterMoneyDropInfo@@U0@@std@@YA_NABV?$allocator@UMonsterMoneyDropInfo@@@0@0@Z ENDP ; std::operator==<MonsterMoneyDropInfo,MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@UMonsterMoneyDropInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@UMonsterMoneyDropInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<MonsterMoneyDropInfo>,std::allocator<MonsterMoneyDropInfo> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@UMonsterMoneyDropInfo@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<MonsterMoneyDropInfo>,std::allocator<MonsterMoneyDropInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_MonsterMoneyDrop@@YAXXZ
text$yd	SEGMENT
??__Fg_MonsterMoneyDrop@@YAXXZ PROC			; `dynamic atexit destructor for 'g_MonsterMoneyDrop'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterMoneyDrop@@3VMonsterMoneyDrop@@A ; g_MonsterMoneyDrop
  00005	e9 00 00 00 00	 jmp	 ??1MonsterMoneyDrop@@UAE@XZ ; MonsterMoneyDrop::~MonsterMoneyDrop
??__Fg_MonsterMoneyDrop@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_MonsterMoneyDrop''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ??__Eg_MonsterMoneyDrop@@YAXXZ
text$di	SEGMENT
??__Eg_MonsterMoneyDrop@@YAXXZ PROC			; `dynamic initializer for 'g_MonsterMoneyDrop'', COMDAT

; 10   : MonsterMoneyDrop g_MonsterMoneyDrop;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MonsterMoneyDrop@@3VMonsterMoneyDrop@@A ; g_MonsterMoneyDrop
  00005	e8 00 00 00 00	 call	 ??0MonsterMoneyDrop@@QAE@XZ ; MonsterMoneyDrop::MonsterMoneyDrop
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_MonsterMoneyDrop@@YAXXZ ; `dynamic atexit destructor for 'g_MonsterMoneyDrop''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_MonsterMoneyDrop@@YAXXZ ENDP			; `dynamic initializer for 'g_MonsterMoneyDrop''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GMonsterMoneyDrop@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMonsterMoneyDrop@@UAEPAXI@Z PROC			; MonsterMoneyDrop::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1MonsterMoneyDrop@@UAE@XZ ; MonsterMoneyDrop::~MonsterMoneyDrop
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GMonsterMoneyDrop@@UAEPAXI@Z ENDP			; MonsterMoneyDrop::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEXPAUMonsterMoneyDropInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEXPAUMonsterMoneyDropInfo@@0@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEXPAUMonsterMoneyDropInfo@@0@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 03	 sar	 edx, 3
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 03	 sar	 edx, 3
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 03	 sar	 edx, 3
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMonsterMoneyDropInfo@@PAU1@V?$allocator@UMonsterMoneyDropInfo@@@std@@U1@@std@@YAPAUMonsterMoneyDropInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MonsterMoneyDropInfo *,MonsterMoneyDropInfo *,std::allocator<MonsterMoneyDropInfo>,MonsterMoneyDropInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 03	 sar	 edx, 3
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0007e	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00080	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00082	c1 fa 03	 sar	 edx, 3
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00097	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0009a	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000a0	8d 04 9b	 lea	 eax, DWORD PTR [ebx+ebx*4]
  000a3	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  000a6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a9	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bf	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBE_NPBUMonsterMoneyDropInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBE_NPBUMonsterMoneyDropInfo@@@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBE_NPBUMonsterMoneyDropInfo@@@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 cc cc cc 0c	 mov	 ecx, 214748364		; 0cccccccH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXPAUMonsterMoneyDropInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXPAUMonsterMoneyDropInfo@@0@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXPAUMonsterMoneyDropInfo@@0@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXABUMonsterMoneyDropInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXABUMonsterMoneyDropInfo@@@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4b		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 45		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 03	 sar	 edx, 3
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00038	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003b	85 d2		 test	 edx, edx
  0003d	74 3e		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00044	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00045	0f 10 04 88	 movups	 xmm0, XMMWORD PTR [eax+ecx*4]
  00049	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0004c	8b 44 88 10	 mov	 eax, DWORD PTR [eax+ecx*4+16]
  00050	89 42 10	 mov	 DWORD PTR [edx+16], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00053	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00057	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0005c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005f	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00061	6a 01		 push	 1
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@IAEXI@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 0c		 je	 SHORT $LN205@push_back
  00071	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00074	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00077	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0007a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0007d	83 46 04 14	 add	 DWORD PTR [esi+4], 20	; 00000014H
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
?push_back@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXABUMonsterMoneyDropInfo@@@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEAAUMonsterMoneyDropInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEAAUMonsterMoneyDropInfo@@I@Z PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 80	 lea	 edx, DWORD PTR [eax+eax*4]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 1241 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEAAUMonsterMoneyDropInfo@@I@Z ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 03	 sar	 edx, 3
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 03	 sar	 edx, 3
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::~vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::~vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >,std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >::_Vector_val<std::_Simple_types<MonsterMoneyDropInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABQAUMonsterMoneyDropInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAPAUMonsterMoneyDropInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >::_Vector_alloc<std::_Vec_base_types<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAE@ABV?$allocator@UMonsterMoneyDropInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >::_Wrap_alloc<std::allocator<MonsterMoneyDropInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAIABV?$allocator@UMonsterMoneyDropInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAIABV?$allocator@UMonsterMoneyDropInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@SAIABV?$allocator@UMonsterMoneyDropInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<MonsterMoneyDropInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UMonsterMoneyDropInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UMonsterMoneyDropInfo@@@std@@QBEIXZ PROC ; std::allocator<MonsterMoneyDropInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UMonsterMoneyDropInfo@@@std@@QBEIXZ ENDP ; std::allocator<MonsterMoneyDropInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z PROC ; std::allocator<MonsterMoneyDropInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00018	c1 e0 02	 shl	 eax, 2

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEPAUMonsterMoneyDropInfo@@I@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z PROC ; std::allocator<MonsterMoneyDropInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00013	c1 e0 02	 shl	 eax, 2

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMonsterMoneyDropInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UMonsterMoneyDropInfo@@@std@@QAE@ABV01@@Z PROC ; std::allocator<MonsterMoneyDropInfo>::allocator<MonsterMoneyDropInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UMonsterMoneyDropInfo@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<MonsterMoneyDropInfo>::allocator<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMonsterMoneyDropInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UMonsterMoneyDropInfo@@@std@@QAE@XZ PROC	; std::allocator<MonsterMoneyDropInfo>::allocator<MonsterMoneyDropInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UMonsterMoneyDropInfo@@@std@@QAE@XZ ENDP	; std::allocator<MonsterMoneyDropInfo>::allocator<MonsterMoneyDropInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ?Run@MonsterMoneyDrop@@QAEHPAUOBJECTSTRUCT@@0@Z
_TEXT	SEGMENT
_x$1$ = -12						; size = 4
$T1 = -8						; size = 4
_y$1$ = -8						; size = 4
_RandomRoll$1$ = -4					; size = 4
_this$1$ = -4						; size = 4
_lpUser$ = 8						; size = 4
_money$2$ = 12						; size = 4
_DropInfo$1$ = 12					; size = 4
_money$2 = 12						; size = 4
_lpMonster$ = 12					; size = 4
?Run@MonsterMoneyDrop@@QAEHPAUOBJECTSTRUCT@@0@Z PROC	; MonsterMoneyDrop::Run, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b c1		 mov	 eax, ecx
  00008	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax

; 68   : 	if( !this->m_Enabled )

  0000b	80 78 04 00	 cmp	 BYTE PTR [eax+4], 0
  0000f	75 08		 jne	 SHORT $LN5@Run

; 69   : 	{
; 70   : 		return 0;

  00011	33 c0		 xor	 eax, eax

; 191  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN5@Run:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00019	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001c	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  0001f	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00024	f7 e9		 imul	 ecx
  00026	53		 push	 ebx
  00027	c1 fa 03	 sar	 edx, 3
  0002a	56		 push	 esi
  0002b	8b c2		 mov	 eax, edx
  0002d	57		 push	 edi
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 75   : 	for( int i = 0; i < this->m_DropInfo.size(); i++ )

  00031	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00033	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 75   : 	for( int i = 0; i < this->m_DropInfo.size(); i++ )

  00035	0f 84 8a 00 00
	00		 je	 $LN165@Run
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 79   : 			if( this->m_DropInfo[i].MonsterID != lpMonster->Class )

  0003e	8b 5d 0c	 mov	 ebx, DWORD PTR _lpMonster$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00041	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00044	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  00047	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Run:
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 77   : 		if( this->m_DropInfo[i].MonsterID != -1 )

  00050	0f b7 46 fc	 movzx	 eax, WORD PTR [esi-4]
  00054	66 83 f8 ff	 cmp	 ax, -1
  00058	74 0e		 je	 SHORT $LN7@Run

; 79   : 			if( this->m_DropInfo[i].MonsterID != lpMonster->Class )

  0005a	0f bf c8	 movsx	 ecx, ax
  0005d	0f b7 83 90 00
	00 00		 movzx	 eax, WORD PTR [ebx+144]
  00064	3b c8		 cmp	 ecx, eax
  00066	75 3b		 jne	 SHORT $LN2@Run
$LN7@Run:

; 80   : 			{
; 81   : 				continue;
; 82   : 			}
; 83   : 		}
; 84   : 		
; 85   : 		if( this->m_DropInfo[i].MonsterMinLevel != -1 )

  00068	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  0006c	66 83 f8 ff	 cmp	 ax, -1
  00070	74 09		 je	 SHORT $LN9@Run

; 86   : 		{
; 87   : 			if( lpMonster->Level < this->m_DropInfo[i].MonsterMinLevel )

  00072	66 39 83 96 00
	00 00		 cmp	 WORD PTR [ebx+150], ax
  00079	7c 28		 jl	 SHORT $LN2@Run
$LN9@Run:

; 88   : 			{
; 89   : 				continue;
; 90   : 			}
; 91   : 		}
; 92   : 
; 93   : 		if( this->m_DropInfo[i].MonsterMaxLevel != -1 )

  0007b	0f b7 06	 movzx	 eax, WORD PTR [esi]
  0007e	66 83 f8 ff	 cmp	 ax, -1
  00082	74 09		 je	 SHORT $LN11@Run

; 94   : 		{
; 95   : 			if( lpMonster->Level > this->m_DropInfo[i].MonsterMaxLevel )

  00084	66 39 83 96 00
	00 00		 cmp	 WORD PTR [ebx+150], ax
  0008b	7f 16		 jg	 SHORT $LN2@Run
$LN11@Run:

; 96   : 			{
; 97   : 				continue;
; 98   : 			}
; 99   : 		}
; 100  : 
; 101  : 		if( this->m_DropInfo[i].MonsterMapNumber != -1 )

  0008d	0f b7 4e 02	 movzx	 ecx, WORD PTR [esi+2]
  00091	66 83 f9 ff	 cmp	 cx, -1
  00095	74 39		 je	 SHORT $LN13@Run

; 102  : 		{
; 103  : 			if( lpMonster->MapNumber != this->m_DropInfo[i].MonsterMapNumber )

  00097	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  0009e	66 3b c1	 cmp	 ax, cx
  000a1	74 2d		 je	 SHORT $LN13@Run
$LN2@Run:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000a3	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  000a6	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000ab	2b 4a 08	 sub	 ecx, DWORD PTR [edx+8]
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 75   : 	for( int i = 0; i < this->m_DropInfo.size(); i++ )

  000ae	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000af	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 75   : 	for( int i = 0; i < this->m_DropInfo.size(); i++ )

  000b1	83 c6 14	 add	 esi, 20			; 00000014H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000b4	c1 fa 03	 sar	 edx, 3
  000b7	8b c2		 mov	 eax, edx
  000b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000bc	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 75   : 	for( int i = 0; i < this->m_DropInfo.size(); i++ )

  000be	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  000c1	3b f8		 cmp	 edi, eax
  000c3	72 8b		 jb	 SHORT $LL4@Run
$LN165@Run:
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi

; 114  : 	{
; 115  : 		return 0;

  000c7	33 c0		 xor	 eax, eax
  000c9	5b		 pop	 ebx

; 191  : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
$LN13@Run:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  000d0	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000d3	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  000d6	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  000d9	89 75 0c	 mov	 DWORD PTR _DropInfo$1$[ebp], esi
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 113  : 	if( DropInfo == NULL )

  000dc	85 f6		 test	 esi, esi
  000de	74 e5		 je	 SHORT $LN165@Run

; 116  : 	}
; 117  : 
; 118  : 	DWORD RandomRoll = rand() % 10000;

  000e0	e8 00 00 00 00	 call	 _rand
  000e5	99		 cdq
  000e6	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000eb	f7 f9		 idiv	 ecx

; 119  : 	
; 120  : 	if (DropInfo->MoneyMin == -1 && DropInfo->MoneyMax == -1) {

  000ed	83 7e 08 ff	 cmp	 DWORD PTR [esi+8], -1
  000f1	89 55 fc	 mov	 DWORD PTR _RandomRoll$1$[ebp], edx
  000f4	0f 85 94 01 00
	00		 jne	 $LN15@Run
  000fa	83 7e 0c ff	 cmp	 DWORD PTR [esi+12], -1
  000fe	0f 85 8a 01 00
	00		 jne	 $LN15@Run

; 121  : 		int x = lpMonster->X;
; 122  : 		int y = lpMonster->Y;
; 123  : 		float money = (float)lpMonster->Money;

  00104	66 0f 6e 93 cc
	00 00 00	 movd	 xmm2, DWORD PTR [ebx+204]
  0010c	0f 5b d2	 cvtdq2ps xmm2, xmm2
  0010f	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]

; 124  : 		money /= 6.0f;
; 125  : 		money += (money/100.0f)*lpUser->MonsterDieGetMoney;

  00116	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  00119	89 45 f4	 mov	 DWORD PTR _x$1$[ebp], eax
  0011c	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  00123	89 45 f8	 mov	 DWORD PTR _y$1$[ebp], eax
  00126	f3 0f 5e 15 00
	00 00 00	 divss	 xmm2, DWORD PTR __real@40c00000
  0012e	0f bf 81 4a 01
	00 00		 movsx	 eax, WORD PTR [ecx+330]
  00135	66 0f 6e c8	 movd	 xmm1, eax
  00139	0f 28 c2	 movaps	 xmm0, xmm2

; 126  : 		money *= g_MapRateInfo.GetMoney(lpUser->MapNumber);

  0013c	0f b6 81 23 01
	00 00		 movzx	 eax, BYTE PTR [ecx+291]
  00143	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42c80000
  0014b	50		 push	 eax
  0014c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MapRateInfo@@3VMapRateInfo@@A ; g_MapRateInfo
  00151	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00154	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00158	f3 0f 58 ca	 addss	 xmm1, xmm2
  0015c	f3 0f 11 4d 0c	 movss	 DWORD PTR _money$2[ebp], xmm1
  00161	e8 00 00 00 00	 call	 ?GetMoney@MapRateInfo@@QAEMF@Z ; MapRateInfo::GetMoney

; 127  : 
; 128  : 		int AddZenPerc = 100;
; 129  : 
; 130  : 		if( lpUser->m_Change == 503 ) {

  00166	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  00169	b9 96 00 00 00	 mov	 ecx, 150		; 00000096H
  0016e	d8 4d 0c	 fmul	 DWORD PTR _money$2[ebp]
  00171	bf 64 00 00 00	 mov	 edi, 100		; 00000064H

; 131  : 			AddZenPerc += 50;
; 132  : 		}
; 133  : 
; 134  : 		if( gObjUnicornSprite(lpUser) == TRUE ) {

  00176	50		 push	 eax
  00177	81 b8 34 06 00
	00 f7 01 00 00	 cmp	 DWORD PTR [eax+1588], 503 ; 000001f7H
  00181	d9 5d 0c	 fstp	 DWORD PTR _money$2[ebp]
  00184	0f 44 f9	 cmove	 edi, ecx
  00187	e8 00 00 00 00	 call	 ?gObjUnicornSprite@@YAHPAUOBJECTSTRUCT@@@Z ; gObjUnicornSprite
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 f8 01	 cmp	 eax, 1
  00192	75 03		 jne	 SHORT $LN18@Run

; 135  : 			AddZenPerc += 50;

  00194	83 c7 32	 add	 edi, 50			; 00000032H
$LN18@Run:

; 136  : 		}
; 137  : 
; 138  : 		if( AddZenPerc != 100 ) {
; 139  : 			money = money*AddZenPerc/100;

  00197	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  0019f	83 ff 64	 cmp	 edi, 100		; 00000064H
  001a2	74 12		 je	 SHORT $LN167@Run
  001a4	66 0f 6e cf	 movd	 xmm1, edi
  001a8	0f 5b c9	 cvtdq2ps xmm1, xmm1
  001ab	f3 0f 59 4d 0c	 mulss	 xmm1, DWORD PTR _money$2[ebp]
  001b0	f3 0f 5e ca	 divss	 xmm1, xmm2
  001b4	eb 05		 jmp	 SHORT $LN171@Run
$LN167@Run:
  001b6	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _money$2[ebp]
$LN171@Run:

; 140  : 		}
; 141  : 
; 142  : 		if (m_ObjBill[lpUser->m_Index].GetZen() > 0) {

  001bb	8b 4d 08	 mov	 ecx, DWORD PTR _lpUser$[ebp]
  001be	f3 0f 11 4d 0c	 movss	 DWORD PTR _money$2$[ebp], xmm1
  001c3	8b 01		 mov	 eax, DWORD PTR [ecx]
  001c5	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001c8	c1 e0 04	 shl	 eax, 4
  001cb	8b 80 24 00 00
	00		 mov	 eax, DWORD PTR ?m_ObjBill@@3PAVBILL_CLASS@@A[eax+36]
  001d1	85 c0		 test	 eax, eax
  001d3	7e 18		 jle	 SHORT $LN20@Run

; 143  : 			money += money * m_ObjBill[lpUser->m_Index].GetZen() / 100;

  001d5	66 0f 6e c0	 movd	 xmm0, eax
  001d9	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001dc	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001e0	f3 0f 5e c2	 divss	 xmm0, xmm2
  001e4	f3 0f 58 c8	 addss	 xmm1, xmm0
  001e8	f3 0f 11 4d 0c	 movss	 DWORD PTR _money$2$[ebp], xmm1
$LN20@Run:

; 144  : 		}
; 145  : 		
; 146  : 		//LogAddDebug("Zen increase: %d", m_ObjBill[lpUser->m_Index].GetZen());
; 147  : 
; 148  : 		if( money < 1.0f ) {

  001ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f5	0f 2f c1	 comiss	 xmm0, xmm1
  001f8	76 08		 jbe	 SHORT $LN21@Run

; 149  : 			money = 1.0f;

  001fa	0f 28 c8	 movaps	 xmm1, xmm0
  001fd	f3 0f 11 4d 0c	 movss	 DWORD PTR _money$2$[ebp], xmm1
$LN21@Run:

; 150  : 		}
; 151  : 		
; 152  : 		if( DropInfo->Rate > RandomRoll ) {

  00202	8b 55 fc	 mov	 edx, DWORD PTR _RandomRoll$1$[ebp]
  00205	39 56 10	 cmp	 DWORD PTR [esi+16], edx
  00208	0f 86 0c 01 00
	00		 jbe	 $LN29@Run

; 153  : 			if ( DS_MAP_RANGE(lpUser->MapNumber) ) {

  0020e	8a 89 23 01 00
	00		 mov	 cl, BYTE PTR [ecx+291]
  00214	80 f9 09	 cmp	 cl, 9
  00217	74 3d		 je	 SHORT $LN166@Run
  00219	33 c0		 xor	 eax, eax
  0021b	80 f9 20	 cmp	 cl, 32			; 00000020H
  0021e	0f 94 c0	 sete	 al
  00221	85 c0		 test	 eax, eax
  00223	75 31		 jne	 SHORT $LN166@Run

; 160  : 			}
; 161  : 			else {
; 162  : 				MapC[lpMonster->MapNumber].MoneyItemDrop((int)money, x, y);

  00225	ff 75 f8	 push	 DWORD PTR _y$1$[ebp]
  00228	f3 0f 2c c1	 cvttss2si eax, xmm1
  0022c	ff 75 f4	 push	 DWORD PTR _x$1$[ebp]
  0022f	50		 push	 eax
  00230	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  00237	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  0023d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00243	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop
  00248	5f		 pop	 edi
  00249	5e		 pop	 esi

; 163  : 			}
; 164  : 			return 1;

  0024a	b8 01 00 00 00	 mov	 eax, 1
  0024f	5b		 pop	 ebx

; 191  : }

  00250	8b e5		 mov	 esp, ebp
  00252	5d		 pop	 ebp
  00253	c2 08 00	 ret	 8
$LN166@Run:

; 154  : 				int MaxHitUser = gObjMonsterTopHitDamageUser(lpMonster);

  00256	53		 push	 ebx
  00257	e8 00 00 00 00	 call	 ?gObjMonsterTopHitDamageUser@@YAHPAUOBJECTSTRUCT@@@Z ; gObjMonsterTopHitDamageUser
  0025c	83 c4 04	 add	 esp, 4

; 155  : 
; 156  : 				if( MaxHitUser == -1 )

  0025f	83 f8 ff	 cmp	 eax, -1
  00262	0f 84 5d fe ff
	ff		 je	 $LN165@Run

; 157  : 					return 0;
; 158  : 
; 159  : 				gObj[MaxHitUser].m_nEventMoney += (int)money;

  00268	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0026e	69 d0 40 27 00
	00		 imul	 edx, eax, 10048
  00274	f3 0f 2c 45 0c	 cvttss2si eax, DWORD PTR _money$2$[ebp]
  00279	5f		 pop	 edi
  0027a	5e		 pop	 esi
  0027b	5b		 pop	 ebx
  0027c	01 84 0a 30 12
	00 00		 add	 DWORD PTR [edx+ecx+4656], eax

; 163  : 			}
; 164  : 			return 1;

  00283	b8 01 00 00 00	 mov	 eax, 1

; 191  : }

  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c2 08 00	 ret	 8
$LN15@Run:

; 165  : 		}
; 166  : 	}
; 167  : 	else {
; 168  : 		if( DropInfo->MoneyMax < 0 ) {

  0028e	83 7e 0c 00	 cmp	 DWORD PTR [esi+12], 0
  00292	0f 8c 2d fe ff
	ff		 jl	 $LN165@Run

; 169  : 			return 0;
; 170  : 		}
; 171  : 
; 172  : 		DWORD MoneyAmount = DropInfo->MoneyMin + (rand() % (DWORD)(DropInfo->MoneyMax - DropInfo->MoneyMin + 1));

  00298	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  0029b	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0029e	e8 00 00 00 00	 call	 _rand
  002a3	8b cf		 mov	 ecx, edi
  002a5	33 d2		 xor	 edx, edx
  002a7	2b ce		 sub	 ecx, esi
  002a9	41		 inc	 ecx
  002aa	f7 f1		 div	 ecx

; 173  : 
; 174  : 		if( MoneyAmount > DropInfo->MoneyMax ) {
; 175  : 			MoneyAmount = DropInfo->MoneyMax;
; 176  : 		}
; 177  : 
; 178  : 		if (m_ObjBill[lpUser->m_Index].GetZen() > 0) {

  002ac	8b 45 08	 mov	 eax, DWORD PTR _lpUser$[ebp]
  002af	8b 00		 mov	 eax, DWORD PTR [eax]
  002b1	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  002b4	3b cf		 cmp	 ecx, edi
  002b6	0f 47 cf	 cmova	 ecx, edi
  002b9	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  002bc	c1 e0 04	 shl	 eax, 4
  002bf	8b 90 24 00 00
	00		 mov	 edx, DWORD PTR ?m_ObjBill@@3PAVBILL_CLASS@@A[eax+36]
  002c5	85 d2		 test	 edx, edx
  002c7	7e 0f		 jle	 SHORT $LN28@Run

; 179  : 			MoneyAmount += MoneyAmount * m_ObjBill[lpUser->m_Index].GetZen() / 100;

  002c9	0f af d1	 imul	 edx, ecx
  002cc	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  002d1	f7 e2		 mul	 edx
  002d3	c1 ea 05	 shr	 edx, 5
  002d6	03 ca		 add	 ecx, edx
$LN28@Run:

; 180  : 		}
; 181  : 
; 182  : 		//LogAddDebug("Zen increase: %d", m_ObjBill[lpUser->m_Index].GetZen());
; 183  : 
; 184  : 		if( DropInfo->Rate > RandomRoll ) {

  002d8	8b 45 0c	 mov	 eax, DWORD PTR _DropInfo$1$[ebp]
  002db	8b 55 fc	 mov	 edx, DWORD PTR _RandomRoll$1$[ebp]
  002de	39 50 10	 cmp	 DWORD PTR [eax+16], edx
  002e1	76 37		 jbe	 SHORT $LN29@Run

; 185  : 			MapC[lpMonster->MapNumber].MoneyItemDrop(MoneyAmount, lpMonster->X, lpMonster->Y);

  002e3	0f b6 83 21 01
	00 00		 movzx	 eax, BYTE PTR [ebx+289]
  002ea	50		 push	 eax
  002eb	0f b6 83 20 01
	00 00		 movzx	 eax, BYTE PTR [ebx+288]
  002f2	50		 push	 eax
  002f3	0f b6 83 23 01
	00 00		 movzx	 eax, BYTE PTR [ebx+291]
  002fa	51		 push	 ecx
  002fb	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00301	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00307	e8 00 00 00 00	 call	 ?MoneyItemDrop@MapClass@@QAEHHHH@Z ; MapClass::MoneyItemDrop
  0030c	5f		 pop	 edi
  0030d	5e		 pop	 esi

; 186  : 			return 1;

  0030e	b8 01 00 00 00	 mov	 eax, 1
  00313	5b		 pop	 ebx

; 191  : }

  00314	8b e5		 mov	 esp, ebp
  00316	5d		 pop	 ebp
  00317	c2 08 00	 ret	 8
$LN29@Run:
  0031a	5f		 pop	 edi
  0031b	5e		 pop	 esi

; 187  : 		}
; 188  : 	}
; 189  : 
; 190  : 	return 2;

  0031c	b8 02 00 00 00	 mov	 eax, 2
  00321	5b		 pop	 ebx

; 191  : }

  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 08 00	 ret	 8
?Run@MonsterMoneyDrop@@QAEHPAUOBJECTSTRUCT@@0@Z ENDP	; MonsterMoneyDrop::Run
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ?Read@MonsterMoneyDrop@@QAEXPAD@Z
_TEXT	SEGMENT
_Result$ = -288						; size = 12
$T2 = -276						; size = 4
$T3 = -272						; size = 4
$T4 = -268						; size = 4
$T5 = -264						; size = 4
$T6 = -260						; size = 4
$T7 = -256						; size = 4
$T8 = -252						; size = 4
$T9 = -248						; size = 4
$T10 = -248						; size = 4
$T11 = -248						; size = 4
_MonsterMoneyDrop$ = -244				; size = 4
_Node$12 = -240						; size = 4
$T13 = -240						; size = 4
_Document$ = -236					; size = 200
_lpInfo$14 = -36					; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_File$ = 8						; size = 4
?Read@MonsterMoneyDrop@@QAEXPAD@Z PROC			; MonsterMoneyDrop::Read, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@MonsterMoneyDrop@@QAEXPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _File$[ebp]

; 40   : 	xml_document Document;

  00032	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 41   : 	xml_parse_result Result = Document.load_file(File);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	56		 push	 esi
  00042	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 42   : 	// ----
; 43   : 	if( Result.status != status_ok )

  0005b	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _Result$[ebp]
  00061	85 c0		 test	 eax, eax
  00063	74 14		 je	 SHORT $LN5@Read

; 44   : 	{
; 45   : 		MsgBox("[MonsterMoneyDrop] File %s not found! %d", File, Result.status);

  00065	50		 push	 eax
  00066	56		 push	 esi
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@PBPHNJC@?$FLMonsterMoneyDrop?$FN?5File?5?$CFs?5not?5f@
  0006c	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	e9 bc 01 00 00	 jmp	 $LN3@Read
$LN5@Read:

; 46   : 		return;
; 47   : 	}
; 48   : 	// ----
; 49   : 	xml_node MonsterMoneyDrop = Document.child("monstermoneydrop");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@ODGADNNF@monstermoneydrop?$AA@
  0007e	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _MonsterMoneyDrop$[ebp]
  00084	50		 push	 eax
  00085	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0008b	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 50   : 	this->m_Enabled = MonsterMoneyDrop.child("enabled").text().as_int();

  00090	6a 00		 push	 0
  00092	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00098	50		 push	 eax
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_07MHHIKOPA@enabled?$AA@
  0009e	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  000a4	50		 push	 eax
  000a5	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _MonsterMoneyDrop$[ebp]
  000ab	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000b0	8b c8		 mov	 ecx, eax
  000b2	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  000b7	8b c8		 mov	 ecx, eax
  000b9	e8 00 00 00 00	 call	 ?as_int@xml_text@pugi@@QBEHH@Z ; pugi::xml_text::as_int
  000be	85 c0		 test	 eax, eax

; 51   : 	// ----
; 52   : 	for( xml_node Node = MonsterMoneyDrop.child("monsterlist").child("monster"); Node; Node = Node.next_sibling() )

  000c0	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _MonsterMoneyDrop$[ebp]
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_07JHAJHILB@monster?$AA@
  000cb	0f 95 c0	 setne	 al
  000ce	88 47 04	 mov	 BYTE PTR [edi+4], al
  000d1	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _Node$12[ebp]
  000d7	50		 push	 eax
  000d8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EHINOFIH@monsterlist?$AA@
  000dd	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  000e3	50		 push	 eax
  000e4	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000e9	8b c8		 mov	 ecx, eax
  000eb	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000f0	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  000f6	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 32 01 00
	00		 je	 $LN3@Read
$LL4@Read:

; 53   : 	{
; 54   : 		MonsterMoneyDropInfo lpInfo;
; 55   : 		lpInfo.MonsterID = Node.attribute("id").as_int();

  00103	6a 00		 push	 0
  00105	68 00 00 00 00	 push	 OFFSET ??_C@_02EGCJHIOB@id?$AA@
  0010a	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00110	50		 push	 eax
  00111	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  00117	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0011c	8b c8		 mov	 ecx, eax
  0011e	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 56   : 		lpInfo.MonsterMinLevel = Node.attribute("levelmin").as_int();

  00123	6a 00		 push	 0
  00125	66 89 45 dc	 mov	 WORD PTR _lpInfo$14[ebp], ax
  00129	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_08MFNNEPNC@levelmin?$AA@
  00134	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00140	8b c8		 mov	 ecx, eax
  00142	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 57   : 		lpInfo.MonsterMaxLevel = Node.attribute("levelmax").as_int();

  00147	6a 00		 push	 0
  00149	66 89 45 de	 mov	 WORD PTR _lpInfo$14[ebp+2], ax
  0014d	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  00153	68 00 00 00 00	 push	 OFFSET ??_C@_08NHFGKLLN@levelmax?$AA@
  00158	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00164	8b c8		 mov	 ecx, eax
  00166	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 58   : 		lpInfo.MonsterMapNumber = Node.attribute("map").as_int();

  0016b	6a 00		 push	 0
  0016d	66 89 45 e0	 mov	 WORD PTR _lpInfo$14[ebp+4], ax
  00171	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map?$AA@
  0017c	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00188	8b c8		 mov	 ecx, eax
  0018a	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 59   : 		lpInfo.MoneyMin = Node.attribute("moneymin").as_int(-1);

  0018f	6a ff		 push	 -1
  00191	66 89 45 e2	 mov	 WORD PTR _lpInfo$14[ebp+6], ax
  00195	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_08LPFHINAC@moneymin?$AA@
  001a0	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001ac	8b c8		 mov	 ecx, eax
  001ae	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 60   : 		lpInfo.MoneyMax = Node.attribute("moneymax").as_int(-1);

  001b3	6a ff		 push	 -1
  001b5	89 45 e4	 mov	 DWORD PTR _lpInfo$14[ebp+8], eax
  001b8	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_08KNNMGJGN@moneymax?$AA@
  001c3	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001cf	8b c8		 mov	 ecx, eax
  001d1	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 61   : 		lpInfo.Rate = Node.attribute("rate").as_int();

  001d6	6a 00		 push	 0
  001d8	89 45 e8	 mov	 DWORD PTR _lpInfo$14[ebp+12], eax
  001db	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  001e1	68 00 00 00 00	 push	 OFFSET ??_C@_04HCCHHEEF@rate?$AA@
  001e6	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001f2	8b c8		 mov	 ecx, eax
  001f4	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  001f9	89 45 ec	 mov	 DWORD PTR _lpInfo$14[ebp+16], eax

; 62   : 		this->m_DropInfo.push_back(lpInfo);

  001fc	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  001ff	8d 45 dc	 lea	 eax, DWORD PTR _lpInfo$14[ebp]
  00202	50		 push	 eax
  00203	e8 00 00 00 00	 call	 ?push_back@?$vector@UMonsterMoneyDropInfo@@V?$allocator@UMonsterMoneyDropInfo@@@std@@@std@@QAEXABUMonsterMoneyDropInfo@@@Z ; std::vector<MonsterMoneyDropInfo,std::allocator<MonsterMoneyDropInfo> >::push_back
  00208	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0020e	50		 push	 eax
  0020f	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  00215	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  0021a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Node$12[ebp]
  00220	8b 00		 mov	 eax, DWORD PTR [eax]
  00222	89 85 10 ff ff
	ff		 mov	 DWORD PTR _Node$12[ebp], eax
  00228	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  0022d	85 c0		 test	 eax, eax
  0022f	0f 85 ce fe ff
	ff		 jne	 $LL4@Read
$LN3@Read:

; 63   : 	}
; 64   : }

  00235	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0023b	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  00240	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00243	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024a	59		 pop	 ecx
  0024b	5f		 pop	 edi
  0024c	5e		 pop	 esi
  0024d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00250	33 cd		 xor	 ecx, ebp
  00252	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00257	8b e5		 mov	 esp, ebp
  00259	5d		 pop	 ebp
  0025a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@MonsterMoneyDrop@@QAEXPAD@Z$0:
  00000	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Read@MonsterMoneyDrop@@QAEXPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@MonsterMoneyDrop@@QAEXPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@MonsterMoneyDrop@@QAEXPAD@Z ENDP			; MonsterMoneyDrop::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ?Load@MonsterMoneyDrop@@QAEXXZ
_TEXT	SEGMENT
?Load@MonsterMoneyDrop@@QAEXXZ PROC			; MonsterMoneyDrop::Load, COMDAT
; _this$ = ecx

; 33   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 34   : 	this->Init();

  00003	e8 00 00 00 00	 call	 ?Init@MonsterMoneyDrop@@QAEXXZ ; MonsterMoneyDrop::Init

; 35   : 	this->Read(gDirPath.GetNewPath(FILE_MONSTER_MONEYDROP));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JCBOCOHK@Monster?2MonsterMoneyDrop?4xml?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@MonsterMoneyDrop@@QAEXPAD@Z ; MonsterMoneyDrop::Read
  0001f	5e		 pop	 esi

; 36   : }

  00020	c3		 ret	 0
?Load@MonsterMoneyDrop@@QAEXXZ ENDP			; MonsterMoneyDrop::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ?Init@MonsterMoneyDrop@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?Init@MonsterMoneyDrop@@QAEXXZ PROC			; MonsterMoneyDrop::Init, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0000a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 24   : 	this->m_DropInfo.clear();

  0000d	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00010	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00013	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00018	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0001b	2b 16		 sub	 edx, DWORD PTR [esi]
  0001d	f7 ea		 imul	 edx
  0001f	c1 fa 03	 sar	 edx, 3
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 25   : 	if( this->m_DropInfo.capacity() > 0 )

  00029	74 41		 je	 SHORT $LN402@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  0002b	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0002e	3b c6		 cmp	 eax, esi
  00030	74 3a		 je	 SHORT $LN402@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00032	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 54   : 	_Right = _Move(_Tmp);

  00034	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0003a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 53   : 	_Left = _Move(_Right);

  00041	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 54   : 	_Right = _Move(_Tmp);

  00044	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0004b	85 c9		 test	 ecx, ecx
  0004d	74 1d		 je	 SHORT $LN402@Init

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0004f	2b d1		 sub	 edx, ecx
  00051	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00056	f7 ea		 imul	 edx
  00058	c1 fa 03	 sar	 edx, 3
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00062	50		 push	 eax
  00063	51		 push	 ecx
  00064	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00067	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
$LN402@Init:
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 29   : 	this->m_Enabled = false;

  0006c	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  00070	5f		 pop	 edi
  00071	5e		 pop	 esi

; 30   : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?Init@MonsterMoneyDrop@@QAEXXZ ENDP			; MonsterMoneyDrop::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ??1MonsterMoneyDrop@@UAE@XZ
_TEXT	SEGMENT
??1MonsterMoneyDrop@@UAE@XZ PROC			; MonsterMoneyDrop::~MonsterMoneyDrop, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi

; 20   : }

  00001	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7MonsterMoneyDrop@@6B@
  0000a	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000d	85 ff		 test	 edi, edi
  0000f	74 33		 je	 SHORT $LN7@MonsterMon

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00011	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00014	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00019	2b cf		 sub	 ecx, edi
  0001b	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001d	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0001f	c1 fa 03	 sar	 edx, 3
  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00029	50		 push	 eax
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMonsterMoneyDropInfo@@@std@@QAEXPAUMonsterMoneyDropInfo@@I@Z ; std::allocator<MonsterMoneyDropInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@MonsterMon:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 20   : }

  00046	c3		 ret	 0
??1MonsterMoneyDrop@@UAE@XZ ENDP			; MonsterMoneyDrop::~MonsterMoneyDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ??0MonsterMoneyDrop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MonsterMoneyDrop@@QAE@XZ PROC			; MonsterMoneyDrop::MonsterMoneyDrop, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7MonsterMoneyDrop@@6B@

; 15   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 481  : 		_Mylast = pointer();

  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 482  : 		_Myend = pointer();

  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp

; 15   : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0MonsterMoneyDrop@@QAE@XZ ENDP			; MonsterMoneyDrop::MonsterMoneyDrop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\user.h
;	COMDAT ?GetZen@BILL_CLASS@@QAEHXZ
_TEXT	SEGMENT
?GetZen@BILL_CLASS@@QAEHXZ PROC				; BILL_CLASS::GetZen, COMDAT
; _this$ = ecx

; 2031 : 	int GetZen() {return AddZen; };

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	c3		 ret	 0
?GetZen@BILL_CLASS@@QAEHXZ ENDP				; BILL_CLASS::GetZen
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 192  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\monstermoneydrop.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 192  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
