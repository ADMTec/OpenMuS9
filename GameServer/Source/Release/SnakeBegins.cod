; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\SnakeBegins.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0SnakeBegins@@QAE@XZ				; SnakeBegins::SnakeBegins
PUBLIC	??1SnakeBegins@@UAE@XZ				; SnakeBegins::~SnakeBegins
PUBLIC	?DropScroll@SnakeBegins@@QAE_NPAUOBJECTSTRUCT@@G@Z ; SnakeBegins::DropScroll
PUBLIC	?Mix@SnakeBegins@@QAEXPAUOBJECTSTRUCT@@@Z	; SnakeBegins::Mix
PUBLIC	??_GSnakeBegins@@UAEPAXI@Z			; SnakeBegins::`scalar deleting destructor'
PUBLIC	??_7SnakeBegins@@6B@				; SnakeBegins::`vftable'
PUBLIC	?g_SnakeBegins@@3VSnakeBegins@@A		; g_SnakeBegins
PUBLIC	??_C@_0DF@EELEBNLN@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@ ; `string'
PUBLIC	??_C@_0DH@IELGGGDK@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@ ; `string'
PUBLIC	??_C@_0DG@JACAFFIG@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@ ; `string'
PUBLIC	??_C@_0EL@JMLIHFE@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@ ; `string'
PUBLIC	??_C@_0EI@KINFLCA@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@ ; `string'
PUBLIC	??_C@_0EL@DGAAPJMB@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@ ; `string'
PUBLIC	??_C@_0EI@DCLGNAFD@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@ ; `string'
PUBLIC	??_C@_0EL@JFJGNBIN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@ ; `string'
PUBLIC	??_C@_0EI@JDIPFELN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@ ; `string'
PUBLIC	??_R4SnakeBegins@@6B@				; SnakeBegins::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSnakeBegins@@@8				; SnakeBegins `RTTI Type Descriptor'
PUBLIC	??_R3SnakeBegins@@8				; SnakeBegins::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SnakeBegins@@8				; SnakeBegins::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SnakeBegins@@8			; SnakeBegins::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_rand:PROC
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?DataSend@@YAHHPAEK@Z:PROC			; DataSend
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GetAttr@MapClass@@QAEEHH@Z:PROC		; MapClass::GetAttr
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z:PROC ; GCUserChaosBoxSend
EXTRN	?gObjSetMonster@@YAHHH@Z:PROC			; gObjSetMonster
EXTRN	?gObjAddMonster@@YAFH@Z:PROC			; gObjAddMonster
EXTRN	?gObjDel@@YAFH@Z:PROC				; gObjDel
EXTRN	?gObjInventoryCommit@@YAHH@Z:PROC		; gObjInventoryCommit
EXTRN	??_ESnakeBegins@@UAEPAXI@Z:PROC			; SnakeBegins::`vector deleting destructor'
EXTRN	?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z:PROC ; CMonsterAttr::GetAttr
EXTRN	?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CChaosBox::ChaosBoxInit
EXTRN	?PHeadSetB@@YAXPAEEH@Z:PROC			; PHeadSetB
EXTRN	?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z:PROC ; ItemSerialCreateSend
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?MapC@@3PAVMapClass@@A:BYTE			; MapC
EXTRN	?gMAttr@@3VCMonsterAttr@@A:BYTE			; gMAttr
EXTRN	?g_ChaosBox@@3VCChaosBox@@A:BYTE		; g_ChaosBox
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?g_SnakeBegins@@3VSnakeBegins@@A DB 01cH DUP (?)	; g_SnakeBegins
_BSS	ENDS
CRT$XCU	SEGMENT
?g_SnakeBegins$initializer$@@3P6AXXZA DD FLAT:??__Eg_SnakeBegins@@YAXXZ ; g_SnakeBegins$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@SnakeBegins@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SnakeBegins@@8 DD FLAT:??_R0?AVSnakeBegins@@@8 ; SnakeBegins::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SnakeBegins@@8
rdata$r	ENDS
;	COMDAT ??_R2SnakeBegins@@8
rdata$r	SEGMENT
??_R2SnakeBegins@@8 DD FLAT:??_R1A@?0A@EA@SnakeBegins@@8 ; SnakeBegins::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SnakeBegins@@8
rdata$r	SEGMENT
??_R3SnakeBegins@@8 DD 00H				; SnakeBegins::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SnakeBegins@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSnakeBegins@@@8
data$r	SEGMENT
??_R0?AVSnakeBegins@@@8 DD FLAT:??_7type_info@@6B@	; SnakeBegins `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSnakeBegins@@', 00H
data$r	ENDS
;	COMDAT ??_R4SnakeBegins@@6B@
rdata$r	SEGMENT
??_R4SnakeBegins@@6B@ DD 00H				; SnakeBegins::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSnakeBegins@@@8
	DD	FLAT:??_R3SnakeBegins@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EI@JDIPFELN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@
CONST	SEGMENT
??_C@_0EI@JDIPFELN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@ DB '['
	DB	'SnakeBegins][ChaosMix] Grade 3 Fail [%s][%s], Rate: %d, Money'
	DB	': %d / %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@JFJGNBIN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@
CONST	SEGMENT
??_C@_0EL@JFJGNBIN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@ DB '['
	DB	'SnakeBegins][ChaosMix] Grade 3 Success [%s][%s], Rate: %d, Mo'
	DB	'ney: %d / %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@DCLGNAFD@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@
CONST	SEGMENT
??_C@_0EI@DCLGNAFD@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@ DB '['
	DB	'SnakeBegins][ChaosMix] Grade 2 Fail [%s][%s], Rate: %d, Money'
	DB	': %d / %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@DGAAPJMB@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@
CONST	SEGMENT
??_C@_0EL@DGAAPJMB@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@ DB '['
	DB	'SnakeBegins][ChaosMix] Grade 2 Success [%s][%s], Rate: %d, Mo'
	DB	'ney: %d / %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@KINFLCA@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@
CONST	SEGMENT
??_C@_0EI@KINFLCA@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@ DB '[S'
	DB	'nakeBegins][ChaosMix] Grade 1 Fail [%s][%s], Rate: %d, Money:'
	DB	' %d / %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@JMLIHFE@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@
CONST	SEGMENT
??_C@_0EL@JMLIHFE@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@ DB '[S'
	DB	'nakeBegins][ChaosMix] Grade 1 Success [%s][%s], Rate: %d, Mon'
	DB	'ey: %d / %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@JACAFFIG@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@
CONST	SEGMENT
??_C@_0DG@JACAFFIG@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@ DB '['
	DB	'SnakeBegins] [%s] [%s] Drop fail, monster attr error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IELGGGDK@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@
CONST	SEGMENT
??_C@_0DH@IELGGGDK@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@ DB '['
	DB	'SnakeBegins] [%s] [%s] Drop fail, monster index error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@EELEBNLN@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@
CONST	SEGMENT
??_C@_0DF@EELEBNLN@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@ DB '['
	DB	'SnakeBegins] [%s] [%s] Drop fail, used in safe zone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7SnakeBegins@@6B@
CONST	SEGMENT
??_7SnakeBegins@@6B@ DD FLAT:??_R4SnakeBegins@@6B@	; SnakeBegins::`vftable'
	DD	FLAT:??_ESnakeBegins@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_SnakeBegins@@YAXXZ
text$yd	SEGMENT
??__Fg_SnakeBegins@@YAXXZ PROC				; `dynamic atexit destructor for 'g_SnakeBegins'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SnakeBegins@@3VSnakeBegins@@A ; g_SnakeBegins
  00005	e9 00 00 00 00	 jmp	 ??1SnakeBegins@@UAE@XZ	; SnakeBegins::~SnakeBegins
??__Fg_SnakeBegins@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_SnakeBegins''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ??__Eg_SnakeBegins@@YAXXZ
text$di	SEGMENT
??__Eg_SnakeBegins@@YAXXZ PROC				; `dynamic initializer for 'g_SnakeBegins'', COMDAT

; 10   : SnakeBegins g_SnakeBegins;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SnakeBegins@@3VSnakeBegins@@A ; g_SnakeBegins
  00005	e8 00 00 00 00	 call	 ??0SnakeBegins@@QAE@XZ	; SnakeBegins::SnakeBegins
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_SnakeBegins@@YAXXZ ; `dynamic atexit destructor for 'g_SnakeBegins''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_SnakeBegins@@YAXXZ ENDP				; `dynamic initializer for 'g_SnakeBegins''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSnakeBegins@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSnakeBegins@@UAEPAXI@Z PROC				; SnakeBegins::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1SnakeBegins@@UAE@XZ	; SnakeBegins::~SnakeBegins
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 1c		 push	 28			; 0000001cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GSnakeBegins@@UAEPAXI@Z ENDP				; SnakeBegins::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ?Mix@SnakeBegins@@QAEXPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -28					; size = 4
_OtherItemCount$1$ = -22				; size = 1
_SummonLv1Count$1$ = -21				; size = 1
_pMsg$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpUser$ = 8						; size = 4
?Mix@SnakeBegins@@QAEXPAUOBJECTSTRUCT@@@Z PROC		; SnakeBegins::Mix, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]

; 82   : 	PMSG_CHAOSMIXRESULT pMsg;
; 83   : 	PHeadSetB((LPBYTE)&pMsg.h, 0x86, sizeof(PMSG_CHAOSMIXRESULT));

  00015	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  00018	57		 push	 edi
  00019	6a 10		 push	 16			; 00000010H
  0001b	68 86 00 00 00	 push	 134			; 00000086H
  00020	50		 push	 eax
  00021	89 4d e4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00024	e8 00 00 00 00	 call	 ?PHeadSetB@@YAXPAEEH@Z	; PHeadSetB

; 84   : 	pMsg.Result = CB_ERROR;
; 85   : 	// ----
; 86   : 	lpUser->ChaosLock = TRUE;
; 87   : 	// ----
; 88   : 	BYTE SummonLv1Count = 0;
; 89   : 	BYTE SummonLv2Count = 0;
; 90   : 	BYTE SummonLv3Count = 0;

  00029	32 db		 xor	 bl, bl
  0002b	c6 45 ef 00	 mov	 BYTE PTR _pMsg$[ebp+3], 0
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00032	c7 86 20 12 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+4640], 1
  0003c	32 ff		 xor	 bh, bh
  0003e	c6 45 eb 00	 mov	 BYTE PTR _SummonLv1Count$1$[ebp], 0

; 91   : 	BYTE OtherItemCount	= 0;

  00042	88 5d ea	 mov	 BYTE PTR _OtherItemCount$1$[ebp], bl
  00045	33 ff		 xor	 edi, edi
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Mix:

; 94   : 	{
; 95   : 		if( !lpUser->pChaosBox[n].IsItem() )

  00050	8b 8e 10 12 00
	00		 mov	 ecx, DWORD PTR [esi+4624]
  00056	03 cf		 add	 ecx, edi
  00058	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  0005d	85 c0		 test	 eax, eax
  0005f	74 2b		 je	 SHORT $LN33@Mix

; 96   : 		{
; 97   : 			continue;
; 98   : 		}
; 99   : 		// ----
; 100  : 		if( lpUser->pChaosBox[n].m_Type == ITEMGET(14, 210) )

  00061	8b 86 10 12 00
	00		 mov	 eax, DWORD PTR [esi+4624]
  00067	b9 d2 1c 00 00	 mov	 ecx, 7378		; 00001cd2H
  0006c	0f b7 44 38 06	 movzx	 eax, WORD PTR [eax+edi+6]
  00071	66 3b c1	 cmp	 ax, cx
  00074	75 0a		 jne	 SHORT $LN6@Mix

; 101  : 		{
; 102  : 			SummonLv1Count++;

  00076	8a 45 eb	 mov	 al, BYTE PTR _SummonLv1Count$1$[ebp]
  00079	fe c0		 inc	 al
  0007b	88 45 eb	 mov	 BYTE PTR _SummonLv1Count$1$[ebp], al
  0007e	eb 0f		 jmp	 SHORT $LN34@Mix
$LN6@Mix:

; 103  : 		}
; 104  : 		else if( lpUser->pChaosBox[n].m_Type == ITEMGET(14, 211) )

  00080	b9 d3 1c 00 00	 mov	 ecx, 7379		; 00001cd3H
  00085	66 3b c1	 cmp	 ax, cx
  00088	75 5e		 jne	 SHORT $LN8@Mix

; 105  : 		{
; 106  : 			SummonLv2Count++;

  0008a	fe c7		 inc	 bh
$LN33@Mix:
  0008c	8a 45 eb	 mov	 al, BYTE PTR _SummonLv1Count$1$[ebp]
$LN34@Mix:
  0008f	8a 4d ea	 mov	 cl, BYTE PTR _OtherItemCount$1$[ebp]
$LN2@Mix:

; 92   : 	// ----
; 93   : 	for( int n = 0; n < CHAOS_BOX_SIZE; n++ )

  00092	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00098	81 ff 80 1a 00
	00		 cmp	 edi, 6784		; 00001a80H
  0009e	7c b0		 jl	 SHORT $LL4@Mix

; 115  : 		}
; 116  : 	}
; 117  : 	// ----
; 118  : 	if( OtherItemCount != 0 )

  000a0	84 c9		 test	 cl, cl
  000a2	75 2c		 jne	 SHORT $LN36@Mix

; 119  : 	{
; 120  : 		DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 121  : 		lpUser->ChaosLock = FALSE;
; 122  : 		return;
; 123  : 	}
; 124  : 	// ----
; 125  : 	if(		SummonLv1Count == 2 
; 126  : 		&&	SummonLv2Count == 0
; 127  : 		&&	SummonLv3Count == 0 )

  000a4	3c 02		 cmp	 al, 2
  000a6	0f 85 2a 01 00
	00		 jne	 $LN13@Mix
  000ac	84 ff		 test	 bh, bh
  000ae	0f 85 1a 03 00
	00		 jne	 $LN26@Mix
  000b4	84 db		 test	 bl, bl
  000b6	0f 85 12 03 00
	00		 jne	 $LN26@Mix

; 128  : 	{
; 129  : 		if( lpUser->Money < this->m_Grade1MixMoney )

  000bc	8b 5d e4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  000bf	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  000c5	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000c8	3b c1		 cmp	 eax, ecx
  000ca	7d 37		 jge	 SHORT $LN15@Mix
$LN37@Mix:

; 130  : 		{
; 131  : 			pMsg.Result = CB_NOT_ENOUGH_ZEN;

  000cc	c6 45 ef 02	 mov	 BYTE PTR _pMsg$[ebp+3], 2
$LN36@Mix:

; 132  : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  000d0	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  000d4	50		 push	 eax
  000d5	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  000d8	50		 push	 eax
  000d9	ff 36		 push	 DWORD PTR [esi]
  000db	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 133  : 			lpUser->ChaosLock = FALSE;
; 134  : 			return;

  000e3	e9 e6 02 00 00	 jmp	 $LN26@Mix
$LN8@Mix:

; 107  : 		}
; 108  : 		else if( lpUser->pChaosBox[n].m_Type == ITEMGET(14, 212) )

  000e8	b9 d4 1c 00 00	 mov	 ecx, 7380		; 00001cd4H
  000ed	66 3b c1	 cmp	 ax, cx

; 111  : 		}
; 112  : 		else

  000f0	8a 45 eb	 mov	 al, BYTE PTR _SummonLv1Count$1$[ebp]
  000f3	8a 4d ea	 mov	 cl, BYTE PTR _OtherItemCount$1$[ebp]
  000f6	75 04		 jne	 SHORT $LN10@Mix

; 109  : 		{
; 110  : 			SummonLv3Count++;

  000f8	fe c3		 inc	 bl

; 111  : 		}
; 112  : 		else

  000fa	eb 96		 jmp	 SHORT $LN2@Mix
$LN10@Mix:

; 113  : 		{
; 114  : 			OtherItemCount++;

  000fc	fe c1		 inc	 cl
  000fe	88 4d ea	 mov	 BYTE PTR _OtherItemCount$1$[ebp], cl
  00101	eb 8f		 jmp	 SHORT $LN2@Mix
$LN15@Mix:

; 135  : 		}
; 136  : 		// ----
; 137  : 		lpUser->Money -= this->m_Grade1MixMoney;

  00103	2b c1		 sub	 eax, ecx

; 138  : 		GCMoneySend(lpUser->m_Index, lpUser->Money);

  00105	50		 push	 eax
  00106	ff 36		 push	 DWORD PTR [esi]
  00108	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  0010e	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 139  : 		// ----
; 140  : 		lpUser->ChaosSuccessRate = this->m_Grade1MixRate;

  00113	0f b6 43 04	 movzx	 eax, BYTE PTR [ebx+4]
  00117	83 c4 08	 add	 esp, 8
  0011a	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 141  : 		// ----
; 142  : 		if( rand() % 100 < lpUser->ChaosSuccessRate )

  00120	e8 00 00 00 00	 call	 _rand
  00125	99		 cdq
  00126	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0012b	f7 f9		 idiv	 ecx
  0012d	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00133	7d 5d		 jge	 SHORT $LN16@Mix

; 143  : 		{
; 144  : 			ItemSerialCreateSend(lpUser->m_Index, 255, 0, 0, ITEMGET(14, 211), 0, 1, 0, 0, 0, lpUser->m_Index, 0, 0);

  00135	8b 06		 mov	 eax, DWORD PTR [esi]
  00137	6a 00		 push	 0
  00139	6a 00		 push	 0
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	50		 push	 eax
  00140	6a 00		 push	 0
  00142	6a 00		 push	 0
  00144	6a 00		 push	 0
  00146	6a 01		 push	 1
  00148	6a 00		 push	 0
  0014a	68 d3 1c 00 00	 push	 7379			; 00001cd3H
  0014f	6a 00		 push	 0
  00151	6a 00		 push	 0
  00153	68 ff 00 00 00	 push	 255			; 000000ffH
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 145  : 			gObjInventoryCommit(lpUser->m_Index);

  0015e	ff 36		 push	 DWORD PTR [esi]
  00160	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00165	83 c4 40	 add	 esp, 64			; 00000040H

; 146  : 			LogAddTD("[SnakeBegins][ChaosMix] Grade 1 Success [%s][%s], Rate: %d, Money: %d / %d",

  00168	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0016b	ff 73 08	 push	 DWORD PTR [ebx+8]
  0016e	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00174	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  0017a	50		 push	 eax
  0017b	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0017e	50		 push	 eax
  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@JMLIHFE@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0018a	83 c4 18	 add	 esp, 24			; 00000018H

; 147  : 				lpUser->AccountID, lpUser->Name, lpUser->ChaosSuccessRate, lpUser->Money, this->m_Grade1MixMoney);
; 148  : 		}
; 149  : 		else

  0018d	e9 3c 02 00 00	 jmp	 $LN26@Mix
$LN16@Mix:

; 150  : 		{
; 151  : 			g_ChaosBox.ChaosBoxInit(lpUser);

  00192	56		 push	 esi
  00193	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00198	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 152  : 			GCUserChaosBoxSend(lpUser, 0);

  0019d	6a 00		 push	 0
  0019f	56		 push	 esi
  001a0	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 153  : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  001a5	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  001a9	50		 push	 eax
  001aa	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  001ad	50		 push	 eax
  001ae	ff 36		 push	 DWORD PTR [esi]
  001b0	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 154  : 			LogAddTD("[SnakeBegins][ChaosMix] Grade 1 Fail [%s][%s], Rate: %d, Money: %d / %d",

  001b5	ff 73 08	 push	 DWORD PTR [ebx+8]
  001b8	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001bb	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001c1	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  001c7	50		 push	 eax
  001c8	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001cb	50		 push	 eax
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@KINFLCA@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?51?5@

; 155  : 				lpUser->AccountID, lpUser->Name, lpUser->ChaosSuccessRate, lpUser->Money, this->m_Grade1MixMoney);
; 156  : 		}
; 157  : 	}
; 158  : 	else if(	SummonLv1Count == 1

  001d1	e9 ef 01 00 00	 jmp	 $LN35@Mix
$LN13@Mix:

; 159  : 			&&	SummonLv2Count == 1
; 160  : 			&&	SummonLv3Count == 0 )

  001d6	3c 01		 cmp	 al, 1
  001d8	0f 85 f0 01 00
	00		 jne	 $LN26@Mix
  001de	3a f8		 cmp	 bh, al
  001e0	0f 85 ef 00 00
	00		 jne	 $LN32@Mix
  001e6	84 db		 test	 bl, bl
  001e8	0f 85 e0 01 00
	00		 jne	 $LN26@Mix

; 161  : 	{
; 162  : 		if( lpUser->Money < this->m_Grade2MixMoney )

  001ee	8b 5d e4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  001f1	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  001f7	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  001fa	3b c1		 cmp	 eax, ecx
  001fc	0f 8c ca fe ff
	ff		 jl	 $LN37@Mix

; 163  : 		{
; 164  : 			pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 165  : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 166  : 			lpUser->ChaosLock = FALSE;
; 167  : 			return;
; 168  : 		}
; 169  : 		// ----
; 170  : 		lpUser->Money -= this->m_Grade2MixMoney;

  00202	2b c1		 sub	 eax, ecx

; 171  : 		GCMoneySend(lpUser->m_Index, lpUser->Money);

  00204	50		 push	 eax
  00205	ff 36		 push	 DWORD PTR [esi]
  00207	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  0020d	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 172  : 		// ----
; 173  : 		lpUser->ChaosSuccessRate = this->m_Grade2MixRate;

  00212	0f b6 43 0c	 movzx	 eax, BYTE PTR [ebx+12]
  00216	83 c4 08	 add	 esp, 8
  00219	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 174  : 		// ----
; 175  : 		if( rand() % 100 < lpUser->ChaosSuccessRate )

  0021f	e8 00 00 00 00	 call	 _rand
  00224	99		 cdq
  00225	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0022a	f7 f9		 idiv	 ecx
  0022c	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  00232	7d 5d		 jge	 SHORT $LN21@Mix

; 176  : 		{
; 177  : 			ItemSerialCreateSend(lpUser->m_Index, 255, 0, 0, ITEMGET(14, 212), 0, 1, 0, 0, 0, lpUser->m_Index, 0, 0);

  00234	8b 06		 mov	 eax, DWORD PTR [esi]
  00236	6a 00		 push	 0
  00238	6a 00		 push	 0
  0023a	6a 00		 push	 0
  0023c	6a 00		 push	 0
  0023e	50		 push	 eax
  0023f	6a 00		 push	 0
  00241	6a 00		 push	 0
  00243	6a 00		 push	 0
  00245	6a 01		 push	 1
  00247	6a 00		 push	 0
  00249	68 d4 1c 00 00	 push	 7380			; 00001cd4H
  0024e	6a 00		 push	 0
  00250	6a 00		 push	 0
  00252	68 ff 00 00 00	 push	 255			; 000000ffH
  00257	50		 push	 eax
  00258	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 178  : 			gObjInventoryCommit(lpUser->m_Index);

  0025d	ff 36		 push	 DWORD PTR [esi]
  0025f	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  00264	83 c4 40	 add	 esp, 64			; 00000040H

; 179  : 			LogAddTD("[SnakeBegins][ChaosMix] Grade 2 Success [%s][%s], Rate: %d, Money: %d / %d",

  00267	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0026a	ff 73 10	 push	 DWORD PTR [ebx+16]
  0026d	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  00273	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00279	50		 push	 eax
  0027a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0027d	50		 push	 eax
  0027e	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@DGAAPJMB@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00289	83 c4 18	 add	 esp, 24			; 00000018H

; 180  : 				lpUser->AccountID, lpUser->Name, lpUser->ChaosSuccessRate, lpUser->Money, this->m_Grade2MixMoney);
; 181  : 		}
; 182  : 		else

  0028c	e9 3d 01 00 00	 jmp	 $LN26@Mix
$LN21@Mix:

; 183  : 		{
; 184  : 			g_ChaosBox.ChaosBoxInit(lpUser);

  00291	56		 push	 esi
  00292	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  00297	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 185  : 			GCUserChaosBoxSend(lpUser, 0);

  0029c	6a 00		 push	 0
  0029e	56		 push	 esi
  0029f	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 186  : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  002a4	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  002a8	50		 push	 eax
  002a9	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  002ac	50		 push	 eax
  002ad	ff 36		 push	 DWORD PTR [esi]
  002af	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 187  : 			LogAddTD("[SnakeBegins][ChaosMix] Grade 2 Fail [%s][%s], Rate: %d, Money: %d / %d",

  002b4	ff 73 10	 push	 DWORD PTR [ebx+16]
  002b7	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  002ba	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  002c0	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  002c6	50		 push	 eax
  002c7	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  002ca	50		 push	 eax
  002cb	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@DCLGNAFD@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?52?5@

; 188  : 				lpUser->AccountID, lpUser->Name, lpUser->ChaosSuccessRate, lpUser->Money, this->m_Grade2MixMoney);
; 189  : 		}
; 190  : 	}
; 191  : 	else if(	SummonLv1Count == 1

  002d0	e9 f0 00 00 00	 jmp	 $LN35@Mix
$LN32@Mix:

; 192  : 			&&	SummonLv2Count == 0
; 193  : 			&&	SummonLv3Count == 1 )

  002d5	84 ff		 test	 bh, bh
  002d7	0f 85 f1 00 00
	00		 jne	 $LN26@Mix
  002dd	80 fb 01	 cmp	 bl, 1
  002e0	0f 85 e8 00 00
	00		 jne	 $LN26@Mix

; 194  : 	{
; 195  : 		if( lpUser->Money < this->m_Grade3MixMoney )

  002e6	8b 5d e4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  002e9	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  002ef	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  002f2	3b c1		 cmp	 eax, ecx
  002f4	0f 8c d2 fd ff
	ff		 jl	 $LN37@Mix

; 196  : 		{
; 197  : 			pMsg.Result = CB_NOT_ENOUGH_ZEN;
; 198  : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);
; 199  : 			lpUser->ChaosLock = FALSE;
; 200  : 			return;
; 201  : 		}
; 202  : 		// ----
; 203  : 		lpUser->Money -= this->m_Grade3MixMoney;

  002fa	2b c1		 sub	 eax, ecx

; 204  : 		GCMoneySend(lpUser->m_Index, lpUser->Money);

  002fc	50		 push	 eax
  002fd	ff 36		 push	 DWORD PTR [esi]
  002ff	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00305	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend

; 205  : 		// ----
; 206  : 		lpUser->ChaosSuccessRate = this->m_Grade3MixRate;

  0030a	0f b6 43 14	 movzx	 eax, BYTE PTR [ebx+20]
  0030e	83 c4 08	 add	 esp, 8
  00311	89 86 1c 12 00
	00		 mov	 DWORD PTR [esi+4636], eax

; 207  : 		// ----
; 208  : 		if( rand() % 100 < lpUser->ChaosSuccessRate )

  00317	e8 00 00 00 00	 call	 _rand
  0031c	99		 cdq
  0031d	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00322	f7 f9		 idiv	 ecx
  00324	3b 96 1c 12 00
	00		 cmp	 edx, DWORD PTR [esi+4636]
  0032a	7d 5a		 jge	 SHORT $LN25@Mix

; 209  : 		{
; 210  : 			ItemSerialCreateSend(lpUser->m_Index, 255, 0, 0, ITEMGET(14, 213), 0, 1, 0, 0, 0, lpUser->m_Index, 0, 0);

  0032c	8b 06		 mov	 eax, DWORD PTR [esi]
  0032e	6a 00		 push	 0
  00330	6a 00		 push	 0
  00332	6a 00		 push	 0
  00334	6a 00		 push	 0
  00336	50		 push	 eax
  00337	6a 00		 push	 0
  00339	6a 00		 push	 0
  0033b	6a 00		 push	 0
  0033d	6a 01		 push	 1
  0033f	6a 00		 push	 0
  00341	68 d5 1c 00 00	 push	 7381			; 00001cd5H
  00346	6a 00		 push	 0
  00348	6a 00		 push	 0
  0034a	68 ff 00 00 00	 push	 255			; 000000ffH
  0034f	50		 push	 eax
  00350	e8 00 00 00 00	 call	 ?ItemSerialCreateSend@@YAXHEEEHEEEEEHEEEPAE@Z ; ItemSerialCreateSend

; 211  : 			gObjInventoryCommit(lpUser->m_Index);

  00355	ff 36		 push	 DWORD PTR [esi]
  00357	e8 00 00 00 00	 call	 ?gObjInventoryCommit@@YAHH@Z ; gObjInventoryCommit
  0035c	83 c4 40	 add	 esp, 64			; 00000040H

; 212  : 			LogAddTD("[SnakeBegins][ChaosMix] Grade 3 Success [%s][%s], Rate: %d, Money: %d / %d",

  0035f	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00362	ff 73 18	 push	 DWORD PTR [ebx+24]
  00365	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0036b	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  00371	50		 push	 eax
  00372	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00375	50		 push	 eax
  00376	68 00 00 00 00	 push	 OFFSET ??_C@_0EL@JFJGNBIN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@
  0037b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00381	83 c4 18	 add	 esp, 24			; 00000018H

; 213  : 				lpUser->AccountID, lpUser->Name, lpUser->ChaosSuccessRate, lpUser->Money, this->m_Grade3MixMoney);
; 214  : 		}
; 215  : 		else

  00384	eb 48		 jmp	 SHORT $LN26@Mix
$LN25@Mix:

; 216  : 		{
; 217  : 			g_ChaosBox.ChaosBoxInit(lpUser);

  00386	56		 push	 esi
  00387	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ChaosBox@@3VCChaosBox@@A ; g_ChaosBox
  0038c	e8 00 00 00 00	 call	 ?ChaosBoxInit@CChaosBox@@QAEHPAUOBJECTSTRUCT@@@Z ; CChaosBox::ChaosBoxInit

; 218  : 			GCUserChaosBoxSend(lpUser, 0);

  00391	6a 00		 push	 0
  00393	56		 push	 esi
  00394	e8 00 00 00 00	 call	 ?GCUserChaosBoxSend@@YAXPAUOBJECTSTRUCT@@H@Z ; GCUserChaosBoxSend

; 219  : 			DataSend(lpUser->m_Index, (LPBYTE)&pMsg, pMsg.h.size);

  00399	0f b6 45 ed	 movzx	 eax, BYTE PTR _pMsg$[ebp+1]
  0039d	50		 push	 eax
  0039e	8d 45 ec	 lea	 eax, DWORD PTR _pMsg$[ebp]
  003a1	50		 push	 eax
  003a2	ff 36		 push	 DWORD PTR [esi]
  003a4	e8 00 00 00 00	 call	 ?DataSend@@YAHHPAEK@Z	; DataSend

; 220  : 			LogAddTD("[SnakeBegins][ChaosMix] Grade 3 Fail [%s][%s], Rate: %d, Money: %d / %d",

  003a9	ff 73 18	 push	 DWORD PTR [ebx+24]
  003ac	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  003af	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  003b5	ff b6 1c 12 00
	00		 push	 DWORD PTR [esi+4636]
  003bb	50		 push	 eax
  003bc	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  003bf	50		 push	 eax
  003c0	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@JDIPFELN@?$FLSnakeBegins?$FN?$FLChaosMix?$FN?5Grade?53?5@
$LN35@Mix:
  003c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  003cb	83 c4 2c	 add	 esp, 44			; 0000002cH
$LN26@Mix:

; 221  : 				lpUser->AccountID, lpUser->Name, lpUser->ChaosSuccessRate, lpUser->Money, this->m_Grade3MixMoney);
; 222  : 		}
; 223  : 	}
; 224  : 	// ----
; 225  : 	lpUser->ChaosLock = FALSE;
; 226  : }

  003ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d1	5f		 pop	 edi
  003d2	c7 86 20 12 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4640], 0
  003dc	33 cd		 xor	 ecx, ebp
  003de	5e		 pop	 esi
  003df	5b		 pop	 ebx
  003e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e5	8b e5		 mov	 esp, ebp
  003e7	5d		 pop	 ebp
  003e8	c2 04 00	 ret	 4
?Mix@SnakeBegins@@QAEXPAUOBJECTSTRUCT@@@Z ENDP		; SnakeBegins::Mix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ?DropScroll@SnakeBegins@@QAE_NPAUOBJECTSTRUCT@@G@Z
_TEXT	SEGMENT
_lpUser$ = 8						; size = 4
_MonsterType$1$ = 12					; size = 4
_ItemType$ = 12						; size = 2
?DropScroll@SnakeBegins@@QAE_NPAUOBJECTSTRUCT@@G@Z PROC	; SnakeBegins::DropScroll, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 32   : 	WORD MonsterType	= ItemType - 6731;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _ItemType$[ebp]
  00006	56		 push	 esi

; 33   : 	BYTE MapAttr		= MapC[lpUser->MapNumber].GetAttr(lpUser->X, lpUser->Y);

  00007	8b 75 08	 mov	 esi, DWORD PTR _lpUser$[ebp]
  0000a	05 b5 e5 ff ff	 add	 eax, -6731		; ffffe5b5H
  0000f	0f b7 c0	 movzx	 eax, ax
  00012	89 45 0c	 mov	 DWORD PTR _MonsterType$1$[ebp], eax
  00015	0f b6 86 21 01
	00 00		 movzx	 eax, BYTE PTR [esi+289]
  0001c	50		 push	 eax
  0001d	0f b6 86 20 01
	00 00		 movzx	 eax, BYTE PTR [esi+288]
  00024	50		 push	 eax
  00025	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  0002c	69 c8 28 38 05
	00		 imul	 ecx, eax, 342056
  00032	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?MapC@@3PAVMapClass@@A ; MapC
  00038	e8 00 00 00 00	 call	 ?GetAttr@MapClass@@QAEEHH@Z ; MapClass::GetAttr

; 34   : 	// ----
; 35   : 	if( MapAttr & 1 != 0 )

  0003d	a8 01		 test	 al, 1
  0003f	74 1d		 je	 SHORT $LN2@DropScroll

; 36   : 	{
; 37   : 		LogAddTD("[SnakeBegins] [%s] [%s] Drop fail, used in safe zone",

  00041	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00044	50		 push	 eax
  00045	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00048	50		 push	 eax
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@EELEBNLN@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   : 			lpUser->AccountID, lpUser->Name);
; 39   : 		return false;

  00057	32 c0		 xor	 al, al
  00059	5e		 pop	 esi

; 77   : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
$LN2@DropScroll:

; 40   : 	}
; 41   : 	// ----
; 42   : 	int MonsterIndex = gObjAddMonster(lpUser->MapNumber);

  0005e	0f b6 86 23 01
	00 00		 movzx	 eax, BYTE PTR [esi+291]
  00065	57		 push	 edi
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?gObjAddMonster@@YAFH@Z	; gObjAddMonster
  0006c	0f bf f8	 movsx	 edi, ax
  0006f	83 c4 04	 add	 esp, 4

; 43   : 	// ----
; 44   : 	if( MonsterIndex < 0 )

  00072	85 ff		 test	 edi, edi
  00074	79 1e		 jns	 SHORT $LN3@DropScroll

; 45   : 	{
; 46   : 		LogAddTD("[SnakeBegins] [%s] [%s] Drop fail, monster index error",

  00076	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00079	50		 push	 eax
  0007a	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0007d	50		 push	 eax
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@IELGGGDK@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 			lpUser->AccountID, lpUser->Name);
; 48   : 		return false;

  0008c	32 c0		 xor	 al, al
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi

; 77   : }

  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
$LN3@DropScroll:

; 49   : 	}
; 50   : 	// ----
; 51   : 	gObj[MonsterIndex].m_PosNum		= -1;

  00094	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00099	83 c9 ff	 or	 ecx, -1
  0009c	53		 push	 ebx
  0009d	69 df 40 27 00
	00		 imul	 ebx, edi, 10048
  000a3	66 89 8c 03 98
	05 00 00	 mov	 WORD PTR [ebx+eax+1432], cx

; 52   :     gObj[MonsterIndex].X			= lpUser->X + rand() % 2;

  000ab	e8 00 00 00 00	 call	 _rand
  000b0	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000b5	79 05		 jns	 SHORT $LN8@DropScroll
  000b7	48		 dec	 eax
  000b8	83 c8 fe	 or	 eax, -2			; fffffffeH
  000bb	40		 inc	 eax
$LN8@DropScroll:
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000c2	02 86 20 01 00
	00		 add	 al, BYTE PTR [esi+288]
  000c8	88 84 0b 20 01
	00 00		 mov	 BYTE PTR [ebx+ecx+288], al

; 53   :     gObj[MonsterIndex].Y			= lpUser->Y + rand() % 2;

  000cf	e8 00 00 00 00	 call	 _rand
  000d4	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000d9	79 05		 jns	 SHORT $LN9@DropScroll
  000db	48		 dec	 eax
  000dc	83 c8 fe	 or	 eax, -2			; fffffffeH
  000df	40		 inc	 eax
$LN9@DropScroll:
  000e0	02 86 21 01 00
	00		 add	 al, BYTE PTR [esi+289]
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000ec	88 84 0b 21 01
	00 00		 mov	 BYTE PTR [ebx+ecx+289], al

; 54   :     gObj[MonsterIndex].MapNumber	= lpUser->MapNumber;

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  000f8	8a 8e 23 01 00
	00		 mov	 cl, BYTE PTR [esi+291]
  000fe	88 8c 03 23 01
	00 00		 mov	 BYTE PTR [ebx+eax+291], cl

; 55   :     gObj[MonsterIndex].TX			= gObj[MonsterIndex].X;

  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0010b	8a 84 19 20 01
	00 00		 mov	 al, BYTE PTR [ecx+ebx+288]
  00112	88 84 19 52 01
	00 00		 mov	 BYTE PTR [ecx+ebx+338], al

; 56   :     gObj[MonsterIndex].TY			= gObj[MonsterIndex].Y;

  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0011f	8a 84 19 21 01
	00 00		 mov	 al, BYTE PTR [ecx+ebx+289]
  00126	88 84 19 53 01
	00 00		 mov	 BYTE PTR [ecx+ebx+339], al

; 57   :     gObj[MonsterIndex].m_OldX		= gObj[MonsterIndex].X;

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00133	8a 84 19 20 01
	00 00		 mov	 al, BYTE PTR [ecx+ebx+288]
  0013a	88 84 19 50 01
	00 00		 mov	 BYTE PTR [ecx+ebx+336], al

; 58   :     gObj[MonsterIndex].m_OldY		= gObj[MonsterIndex].Y;

  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00147	8a 84 19 21 01
	00 00		 mov	 al, BYTE PTR [ecx+ebx+289]
  0014e	88 84 19 51 01
	00 00		 mov	 BYTE PTR [ecx+ebx+337], al

; 59   :     gObj[MonsterIndex].StartX		= gObj[MonsterIndex].X;

  00155	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0015b	8a 84 19 20 01
	00 00		 mov	 al, BYTE PTR [ecx+ebx+288]
  00162	88 84 19 4e 01
	00 00		 mov	 BYTE PTR [ecx+ebx+334], al

; 60   :     gObj[MonsterIndex].StartY		= gObj[MonsterIndex].Y;

  00169	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0016f	8a 84 19 21 01
	00 00		 mov	 al, BYTE PTR [ecx+ebx+289]
  00176	88 84 19 4f 01
	00 00		 mov	 BYTE PTR [ecx+ebx+335], al

; 61   : 	gObj[MonsterIndex].m_iRegenType	= 0;
; 62   : 	// ----
; 63   : 	LPMONSTER_ATTRIBUTE lpMonAttr = gMAttr.GetAttr(MonsterType);

  0017d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMAttr@@3VCMonsterAttr@@A ; gMAttr
  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  00187	c7 84 03 e8 20
	00 00 00 00 00
	00		 mov	 DWORD PTR [ebx+eax+8424], 0
  00192	8b 45 0c	 mov	 eax, DWORD PTR _MonsterType$1$[ebp]
  00195	0f b7 c0	 movzx	 eax, ax
  00198	50		 push	 eax
  00199	e8 00 00 00 00	 call	 ?GetAttr@CMonsterAttr@@QAEPAUMONSTER_ATTRIBUTE@@H@Z ; CMonsterAttr::GetAttr

; 64   : 	// ----
; 65   : 	if( lpMonAttr == NULL )

  0019e	85 c0		 test	 eax, eax
  001a0	75 25		 jne	 SHORT $LN4@DropScroll

; 66   : 	{
; 67   : 		gObjDel(MonsterIndex);

  001a2	57		 push	 edi
  001a3	e8 00 00 00 00	 call	 ?gObjDel@@YAFH@Z	; gObjDel

; 68   : 		LogAddTD("[SnakeBegins] [%s] [%s] Drop fail, monster attr error",

  001a8	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001ab	50		 push	 eax
  001ac	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001af	50		 push	 eax
  001b0	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@JACAFFIG@?$FLSnakeBegins?$FN?5?$FL?$CFs?$FN?5?$FL?$CFs?$FN?5Drop?5fai@
  001b5	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  001bb	83 c4 10	 add	 esp, 16			; 00000010H

; 69   : 			lpUser->AccountID, lpUser->Name);
; 70   : 		return false;

  001be	32 c0		 xor	 al, al
  001c0	5b		 pop	 ebx
  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi

; 77   : }

  001c3	5d		 pop	 ebp
  001c4	c2 08 00	 ret	 8
$LN4@DropScroll:

; 71   : 	}
; 72   : 	// ----
; 73   :     gObjSetMonster(MonsterIndex, MonsterType);

  001c7	8b 4d 0c	 mov	 ecx, DWORD PTR _MonsterType$1$[ebp]
  001ca	0f b7 c1	 movzx	 eax, cx
  001cd	50		 push	 eax
  001ce	57		 push	 edi
  001cf	e8 00 00 00 00	 call	 ?gObjSetMonster@@YAHHH@Z ; gObjSetMonster
  001d4	83 c4 08	 add	 esp, 8

; 74   :     gObj[MonsterIndex].Dir = rand() % 8;

  001d7	e8 00 00 00 00	 call	 _rand
  001dc	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  001e1	79 05		 jns	 SHORT $LN10@DropScroll
  001e3	48		 dec	 eax
  001e4	83 c8 f8	 or	 eax, -8			; fffffff8H
  001e7	40		 inc	 eax
$LN10@DropScroll:
  001e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  001ee	88 84 0b 22 01
	00 00		 mov	 BYTE PTR [ebx+ecx+290], al

; 75   : 	// ----
; 76   : 	return true;

  001f5	b0 01		 mov	 al, 1
  001f7	5b		 pop	 ebx
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi

; 77   : }

  001fa	5d		 pop	 ebp
  001fb	c2 08 00	 ret	 8
?DropScroll@SnakeBegins@@QAE_NPAUOBJECTSTRUCT@@G@Z ENDP	; SnakeBegins::DropScroll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ??1SnakeBegins@@UAE@XZ
_TEXT	SEGMENT
??1SnakeBegins@@UAE@XZ PROC				; SnakeBegins::~SnakeBegins, COMDAT
; _this$ = ecx

; 25   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SnakeBegins@@6B@

; 26   : 
; 27   : }

  00006	c3		 ret	 0
??1SnakeBegins@@UAE@XZ ENDP				; SnakeBegins::~SnakeBegins
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ??0SnakeBegins@@QAE@XZ
_TEXT	SEGMENT
??0SnakeBegins@@QAE@XZ PROC				; SnakeBegins::SnakeBegins, COMDAT
; _this$ = ecx

; 14   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SnakeBegins@@6B@

; 15   : 	this->m_Grade1MixRate	= 50;
; 16   : 	this->m_Grade2MixRate	= 50;
; 17   : 	this->m_Grade3MixRate	= 40;
; 18   : 	this->m_Grade1MixMoney	= 100000;
; 19   : 	this->m_Grade2MixMoney	= 200000;
; 20   : 	this->m_Grade3MixMoney	= 300000;
; 21   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c6 41 04 32	 mov	 BYTE PTR [ecx+4], 50	; 00000032H
  0000c	c6 41 0c 32	 mov	 BYTE PTR [ecx+12], 50	; 00000032H
  00010	c6 41 14 28	 mov	 BYTE PTR [ecx+20], 40	; 00000028H
  00014	c7 41 08 a0 86
	01 00		 mov	 DWORD PTR [ecx+8], 100000 ; 000186a0H
  0001b	c7 41 10 40 0d
	03 00		 mov	 DWORD PTR [ecx+16], 200000 ; 00030d40H
  00022	c7 41 18 e0 93
	04 00		 mov	 DWORD PTR [ecx+24], 300000 ; 000493e0H
  00029	c3		 ret	 0
??0SnakeBegins@@QAE@XZ ENDP				; SnakeBegins::SnakeBegins
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 228  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\snakebegins.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 228  : // -------------------------------------------------------------------------------

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
