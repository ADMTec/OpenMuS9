; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MagicDamage.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?Get@CMagicDamage@@AAEHH@Z			; CMagicDamage::Get
PUBLIC	?SetMasterLevelSkillInfo@CMagicDamage@@AAEXHHHHHHGHH@Z ; CMagicDamage::SetMasterLevelSkillInfo
PUBLIC	?SetEx@CMagicDamage@@AAEXHHHHPAH@Z		; CMagicDamage::SetEx
PUBLIC	?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHHEE@Z	; CMagicDamage::Set
PUBLIC	?CheckSkillAttr@CMagicDamage@@AAEHHH@Z		; CMagicDamage::CheckSkillAttr
PUBLIC	??0CMagicDamage@@QAE@XZ				; CMagicDamage::CMagicDamage
PUBLIC	??1CMagicDamage@@UAE@XZ				; CMagicDamage::~CMagicDamage
PUBLIC	?Init@CMagicDamage@@QAEXXZ			; CMagicDamage::Init
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPADH@Z		; CMagicDamage::LogSkillList
PUBLIC	?LogSkillList@CMagicDamage@@QAEXPAD@Z		; CMagicDamage::LogSkillList
PUBLIC	?LogSkillNameList@CMagicDamage@@QAEXPADH@Z	; CMagicDamage::LogSkillNameList
PUBLIC	?LogSkillNameList@CMagicDamage@@QAEXPAD@Z	; CMagicDamage::LogSkillNameList
PUBLIC	?SkillGet@CMagicDamage@@QAEHH@Z			; CMagicDamage::SkillGet
PUBLIC	?SkillGetMana@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetMana
PUBLIC	?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireEnergy
PUBLIC	?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z	; CMagicDamage::SkillGetRequireLevel
PUBLIC	?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z	; CMagicDamage::SkillGetRequireClass
PUBLIC	?SkillGetBP@CMagicDamage@@QAEHH@Z		; CMagicDamage::SkillGetBP
PUBLIC	?GetSkillAttr@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillAttr
PUBLIC	?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ; CMagicDamage::GetskillRequireLeadership
PUBLIC	?GetDelayTime@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetDelayTime
PUBLIC	?GetSkillType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillType
PUBLIC	?CheckStatus@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckStatus
PUBLIC	?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z	; CMagicDamage::CheckBrandOfSkill
PUBLIC	?CheckKillCount@CMagicDamage@@QAEHHH@Z		; CMagicDamage::CheckKillCount
PUBLIC	?GetSkillDistance@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillDistance
PUBLIC	?GetBrandOfSkill@CMagicDamage@@QAEGH@Z		; CMagicDamage::GetBrandOfSkill
PUBLIC	?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z	; CMagicDamage::GetNormalBrandOfSkill
PUBLIC	?GetSkillUseType@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillUseType
PUBLIC	?GetRLevel@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetRLevel
PUBLIC	?GetRequireStrength@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetRequireStrength
PUBLIC	?GetRequireDexterity@CMagicDamage@@QAEHH@Z	; CMagicDamage::GetRequireDexterity
PUBLIC	?GetSkillRank@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillRank
PUBLIC	?GetSkillGroup@CMagicDamage@@QAEHH@Z		; CMagicDamage::GetSkillGroup
PUBLIC	?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z	; CMagicDamage::IsItemAttachedSkill
PUBLIC	??_GCMagicDamage@@UAEPAXI@Z			; CMagicDamage::`scalar deleting destructor'
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??_7CMagicDamage@@6B@				; CMagicDamage::`vftable'
PUBLIC	?MagicDamageC@@3VCMagicDamage@@A		; MagicDamageC
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0M@LDHACGGK@Skill_Local?$AA@		; `string'
PUBLIC	??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@	; `string'
PUBLIC	??_C@_0CF@MDHHCBNC@?$FLGetNormalBrandOfSkill?$FN?5fail?$CB?$CB?$CB?5@ ; `string'
PUBLIC	??_R4CMagicDamage@@6B@				; CMagicDamage::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMagicDamage@@@8			; CMagicDamage `RTTI Type Descriptor'
PUBLIC	??_R3CMagicDamage@@8				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMagicDamage@@8				; CMagicDamage::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMagicDamage@@8			; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	_isalnum:PROC
EXTRN	_strcpy_s:PROC
EXTRN	_fclose:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen:PROC
EXTRN	_getc:PROC
EXTRN	_ungetc:PROC
EXTRN	_atof:PROC
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??_ECMagicDamage@@UAEPAXI@Z:PROC		; CMagicDamage::`vector deleting destructor'
EXTRN	??0CWzMemScript@@QAE@XZ:PROC			; CWzMemScript::CWzMemScript
EXTRN	??1CWzMemScript@@UAE@XZ:PROC			; CWzMemScript::~CWzMemScript
EXTRN	?SetBuffer@CWzMemScript@@QAEHPADH@Z:PROC	; CWzMemScript::SetBuffer
EXTRN	?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ:PROC ; CWzMemScript::GetToken
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?Set@CMagicInf@@QAEHHE@Z:PROC			; CMagicInf::Set
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z:PROC ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAdd@@3P6AXPADZZA:DWORD			; LogAdd
EXTRN	?DefMagicInf@@3PAVCMagicInf@@A:BYTE		; DefMagicInf
EXTRN	?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A:BYTE ; g_MasterSkillSystem
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?MagicDamageC@@3VCMagicDamage@@A DB 0151b8H DUP (?)	; MagicDamageC
?SMDFile@@3PAU_iobuf@@A DD 01H DUP (?)			; SMDFile
?TokenNumber@@3MA DD 01H DUP (?)			; TokenNumber
?TokenString@@3PADA DB 064H DUP (?)			; TokenString
?CurrentToken@@3W4SMDToken@@A DD 01H DUP (?)		; CurrentToken
_BSS	ENDS
CRT$XCU	SEGMENT
?MagicDamageC$initializer$@@3P6AXXZA DD FLAT:??__EMagicDamageC@@YAXXZ ; MagicDamageC$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CMagicDamage@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMagicDamage@@8 DD FLAT:??_R0?AVCMagicDamage@@@8 ; CMagicDamage::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R2CMagicDamage@@8
rdata$r	SEGMENT
??_R2CMagicDamage@@8 DD FLAT:??_R1A@?0A@EA@CMagicDamage@@8 ; CMagicDamage::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMagicDamage@@8
rdata$r	SEGMENT
??_R3CMagicDamage@@8 DD 00H				; CMagicDamage::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMagicDamage@@@8
data$r	SEGMENT
??_R0?AVCMagicDamage@@@8 DD FLAT:??_7type_info@@6B@	; CMagicDamage `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMagicDamage@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMagicDamage@@6B@
rdata$r	SEGMENT
??_R4CMagicDamage@@6B@ DD 00H				; CMagicDamage::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMagicDamage@@@8
	DD	FLAT:??_R3CMagicDamage@@8
rdata$r	ENDS
;	COMDAT ??_C@_0CF@MDHHCBNC@?$FLGetNormalBrandOfSkill?$FN?5fail?$CB?$CB?$CB?5@
CONST	SEGMENT
??_C@_0CF@MDHHCBNC@?$FLGetNormalBrandOfSkill?$FN?5fail?$CB?$CB?$CB?5@ DB '['
	DB	'GetNormalBrandOfSkill] fail!!! - %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
CONST	SEGMENT
??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@ DB 'MagicDamage.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LDHACGGK@Skill_Local?$AA@
CONST	SEGMENT
??_C@_0M@LDHACGGK@Skill_Local?$AA@ DB 'Skill_Local', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CMagicDamage@@6B@
CONST	SEGMENT
??_7CMagicDamage@@6B@ DD FLAT:??_R4CMagicDamage@@6B@	; CMagicDamage::`vftable'
	DD	FLAT:??_ECMagicDamage@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z$0
__ehfuncinfo$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FMagicDamageC@@YAXXZ
text$yd	SEGMENT
??__FMagicDamageC@@YAXXZ PROC				; `dynamic atexit destructor for 'MagicDamageC'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00005	e9 00 00 00 00	 jmp	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
??__FMagicDamageC@@YAXXZ ENDP				; `dynamic atexit destructor for 'MagicDamageC''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ??__EMagicDamageC@@YAXXZ
text$di	SEGMENT
??__EMagicDamageC@@YAXXZ PROC				; `dynamic initializer for 'MagicDamageC'', COMDAT

; 10   : CMagicDamage MagicDamageC;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?MagicDamageC@@3VCMagicDamage@@A ; MagicDamageC
  00005	e8 00 00 00 00	 call	 ??0CMagicDamage@@QAE@XZ	; CMagicDamage::CMagicDamage
  0000a	68 00 00 00 00	 push	 OFFSET ??__FMagicDamageC@@YAXXZ ; `dynamic atexit destructor for 'MagicDamageC''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EMagicDamageC@@YAXXZ ENDP				; `dynamic initializer for 'MagicDamageC''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\include\readscript.h
;	COMDAT ?GetToken@@YA?AW4SMDToken@@XZ
_TEXT	SEGMENT
_TempString$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
?GetToken@@YA?AW4SMDToken@@XZ PROC			; GetToken, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 68	 sub	 esp, 104		; 00000068H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : 	int ch;
; 26   : 	char* p;
; 27   : 	char TempString[100];
; 28   : 
; 29   : 	TokenString[0]=0;

  00010	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?TokenString@@3PADA, 0
  00017	53		 push	 ebx
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetToken:

; 30   : 
; 31   : 	do
; 32   : 	{
; 33   : 		if ((ch=fgetc(SMDFile)) == -1)

  00020	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00026	e8 00 00 00 00	 call	 _fgetc
  0002b	8b d8		 mov	 ebx, eax
  0002d	83 c4 04	 add	 esp, 4
  00030	83 fb ff	 cmp	 ebx, -1
  00033	74 5d		 je	 SHORT $LN43@GetToken

; 34   : 		{
; 35   : 			return END;	// End of FILE (EOF)
; 36   : 		}
; 37   : 		else
; 38   : 		{	
; 39   : 			if (ch=='/')		// this is /

  00035	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  00038	75 30		 jne	 SHORT $LN2@GetToken

; 40   : 			{
; 41   : 				if((ch=fgetc(SMDFile)) == '/')

  0003a	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00040	e8 00 00 00 00	 call	 _fgetc
  00045	8b d8		 mov	 ebx, eax
  00047	83 c4 04	 add	 esp, 4
  0004a	83 fb 2f	 cmp	 ebx, 47			; 0000002fH
  0004d	75 1b		 jne	 SHORT $LN2@GetToken
  0004f	90		 npad	 1
$LL5@GetToken:

; 42   : 				{
; 43   : 					while ((ch != '\n') && (ch != -1))	// End of Line (EOL)

  00050	83 fb ff	 cmp	 ebx, -1
  00053	74 3d		 je	 SHORT $LN43@GetToken

; 44   : 					{
; 45   : 						ch=fgetc(SMDFile);

  00055	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0005b	e8 00 00 00 00	 call	 _fgetc
  00060	8b d8		 mov	 ebx, eax
  00062	83 c4 04	 add	 esp, 4
  00065	83 fb 0a	 cmp	 ebx, 10			; 0000000aH
  00068	75 e6		 jne	 SHORT $LL5@GetToken
$LN2@GetToken:

; 51   : 					}
; 52   : 				}
; 53   : 			}
; 54   : 		}
; 55   : 	}
; 56   : 	while (isspace(ch) != 0);

  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _isspace
  00070	83 c4 04	 add	 esp, 4
  00073	85 c0		 test	 eax, eax
  00075	75 a9		 jne	 SHORT $LL4@GetToken

; 57   : 
; 58   : 	
; 59   : 	switch(ch)

  00077	8d 43 de	 lea	 eax, DWORD PTR [ebx-34]
  0007a	56		 push	 esi
  0007b	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0007e	0f 87 89 01 00
	00		 ja	 $LN29@GetToken
  00084	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN58@GetToken[eax]
  0008b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@GetToken[eax*4]
$LN43@GetToken:

; 46   : 					}
; 47   : 	
; 48   : 					if (ch == -1)
; 49   : 					{
; 50   : 						return END;	// End of FILE

  00092	b8 02 00 00 00	 mov	 eax, 2
  00097	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
$LN20@GetToken:
  000a6	5e		 pop	 esi

; 60   : 	{
; 61   : 
; 62   : 	case 0x23:	// #
; 63   : 		return CurrentToken=COMMAND;

  000a7	c7 05 00 00 00
	00 23 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 35 ; 00000023H
  000b1	b8 23 00 00 00	 mov	 eax, 35			; 00000023H
  000b6	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN21@GetToken:
  000c5	5e		 pop	 esi

; 64   : 		break;
; 65   : 	
; 66   : 	case 0x3B:	// ;
; 67   : 		return CurrentToken=SEMICOLON;

  000c6	c7 05 00 00 00
	00 3b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 59 ; 0000003bH
  000d0	b8 3b 00 00 00	 mov	 eax, 59			; 0000003bH
  000d5	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
$LN22@GetToken:
  000e4	5e		 pop	 esi

; 68   : 		break;
; 69   : 	
; 70   : 	case 0x2C:	// ,
; 71   : 
; 72   : 		return CurrentToken=COMMA;

  000e5	c7 05 00 00 00
	00 2c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 44 ; 0000002cH
  000ef	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH
  000f4	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  000f5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	8b e5		 mov	 esp, ebp
  00101	5d		 pop	 ebp
  00102	c3		 ret	 0
$LN23@GetToken:
  00103	5e		 pop	 esi

; 73   : 		break;
; 74   : 	
; 75   : 	case 0x7B:	// {
; 76   : 		return CurrentToken = LP;

  00104	c7 05 00 00 00
	00 7b 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 123 ; 0000007bH
  0010e	b8 7b 00 00 00	 mov	 eax, 123		; 0000007bH
  00113	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
$LN24@GetToken:
  00122	5e		 pop	 esi

; 77   : 		break;
; 78   : 
; 79   : 	case 0x7D:	// }
; 80   : 		return CurrentToken = RP;

  00123	c7 05 00 00 00
	00 7d 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 125 ; 0000007dH
  0012d	b8 7d 00 00 00	 mov	 eax, 125		; 0000007dH
  00132	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  00133	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00136	33 cd		 xor	 ecx, ebp
  00138	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c3		 ret	 0
$LN25@GetToken:

; 81   : 		break;
; 82   : 	// Nice Index Table :)	by Deathway
; 83   : 	// Numbers Case
; 84   : 	case 0x2D:	//-
; 85   : 	case 0x2E:	//.
; 86   : 	case '0':	//0
; 87   : 	case '1':	//1
; 88   : 	case '2':	//2
; 89   : 	case '3':	//3
; 90   : 	case '4':	//4		
; 91   : 	case '5':	//5
; 92   : 	case '6':	//6
; 93   : 	case '7':	//7
; 94   : 	case '8':	//8
; 95   : 	case '9':	//9
; 96   : 		ungetc(ch, SMDFile);

  00141	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00147	53		 push	 ebx
  00148	e8 00 00 00 00	 call	 _ungetc

; 97   : 		p = TempString;
; 98   : 		
; 99   : 		while (((ch=getc(SMDFile)) != -1) && ((ch == 0x2E) || (isdigit(ch) != 0) || (ch == 0x2D)))  // 2e '.'  2D '-'

  0014d	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00153	8d 75 98	 lea	 esi, DWORD PTR _TempString$[ebp]
  00156	e8 00 00 00 00	 call	 _getc
  0015b	8b d8		 mov	 ebx, eax
  0015d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00160	83 fb ff	 cmp	 ebx, -1
  00163	74 2f		 je	 SHORT $LN59@GetToken
$LL9@GetToken:
  00165	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00168	74 12		 je	 SHORT $LN26@GetToken
  0016a	53		 push	 ebx
  0016b	e8 00 00 00 00	 call	 _isdigit
  00170	83 c4 04	 add	 esp, 4
  00173	85 c0		 test	 eax, eax
  00175	75 05		 jne	 SHORT $LN26@GetToken
  00177	83 fb 2d	 cmp	 ebx, 45			; 0000002dH
  0017a	75 18		 jne	 SHORT $LN59@GetToken
$LN26@GetToken:
  0017c	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 100  : 		{
; 101  : 			*p = ch;	// Construct a String

  00182	88 1e		 mov	 BYTE PTR [esi], bl

; 102  : 			p++;

  00184	46		 inc	 esi
  00185	e8 00 00 00 00	 call	 _getc
  0018a	8b d8		 mov	 ebx, eax
  0018c	83 c4 04	 add	 esp, 4
  0018f	83 fb ff	 cmp	 ebx, -1
  00192	75 d1		 jne	 SHORT $LL9@GetToken
$LN59@GetToken:

; 103  : 		}		
; 104  : 		*p = 0;
; 105  : 		TokenNumber = (float)atof( TempString);	// Select the first Byte as Main ID

  00194	8d 45 98	 lea	 eax, DWORD PTR _TempString$[ebp]
  00197	c6 06 00	 mov	 BYTE PTR [esi], 0
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 _atof
  001a0	83 c4 04	 add	 esp, 4

; 106  : 		return CurrentToken  = NUMBER ;

  001a3	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 1
  001ad	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?TokenNumber@@3MA
  001b3	b8 01 00 00 00	 mov	 eax, 1
  001b8	5e		 pop	 esi
  001b9	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  001ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bd	33 cd		 xor	 ecx, ebp
  001bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN27@GetToken:

; 107  : 		break;
; 108  : 
; 109  : 	case '\"':	// "	String Case
; 110  : 		p=&TokenString[0];
; 111  : 		
; 112  : 		while (((ch=getc(SMDFile)) != -1 ) && (ch != 0x22))	// nice

  001c8	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  001ce	be 00 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA
  001d3	e8 00 00 00 00	 call	 _getc
  001d8	83 c4 04	 add	 esp, 4
  001db	83 f8 ff	 cmp	 eax, -1
  001de	74 1f		 je	 SHORT $LN12@GetToken
$LL11@GetToken:
  001e0	83 f8 22	 cmp	 eax, 34			; 00000022H
  001e3	0f 84 95 00 00
	00		 je	 $LN28@GetToken
  001e9	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 113  : 		{
; 114  : 			*p = ch;

  001ef	88 06		 mov	 BYTE PTR [esi], al

; 115  : 			p++;

  001f1	46		 inc	 esi
  001f2	e8 00 00 00 00	 call	 _getc
  001f7	83 c4 04	 add	 esp, 4
  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 e1		 jne	 SHORT $LL11@GetToken
$LN12@GetToken:

; 116  : 		}
; 117  : 		if (ch != 0x22 )

  001ff	83 f8 22	 cmp	 eax, 34			; 00000022H
  00202	74 7a		 je	 SHORT $LN28@GetToken

; 118  : 		{
; 119  : 			ungetc(ch, SMDFile);

  00204	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0020a	50		 push	 eax

; 120  : 		}
; 121  : 		*p = 0;
; 122  : 		return CurrentToken = NAME;

  0020b	eb 69		 jmp	 SHORT $LN62@GetToken
$LN29@GetToken:

; 123  : 		break;
; 124  : 
; 125  : 	default:	// Others
; 126  : 		if (isalpha(ch))

  0020d	53		 push	 ebx
  0020e	e8 00 00 00 00	 call	 _isalpha
  00213	83 c4 04	 add	 esp, 4
  00216	85 c0		 test	 eax, eax
  00218	0f 84 7f 00 00
	00		 je	 $LN30@GetToken

; 127  : 		{
; 128  : 			p=&TokenString[0];
; 129  : 			*p=ch;
; 130  : 			p++;
; 131  : 
; 132  : 			while ( ((ch=getc(SMDFile)) != -1) && ( (ch == 0x2E) || (ch == 0x5F) || (isalnum(ch) != 0) ) )

  0021e	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00224	88 1d 00 00 00
	00		 mov	 BYTE PTR ?TokenString@@3PADA, bl
  0022a	be 01 00 00 00	 mov	 esi, OFFSET ?TokenString@@3PADA+1
  0022f	e8 00 00 00 00	 call	 _getc
  00234	8b d8		 mov	 ebx, eax
  00236	83 c4 04	 add	 esp, 4
  00239	83 fb ff	 cmp	 ebx, -1
  0023c	74 31		 je	 SHORT $LN60@GetToken
  0023e	66 90		 npad	 2
$LL13@GetToken:
  00240	83 fb 2e	 cmp	 ebx, 46			; 0000002eH
  00243	74 12		 je	 SHORT $LN32@GetToken
  00245	83 fb 5f	 cmp	 ebx, 95			; 0000005fH
  00248	74 0d		 je	 SHORT $LN32@GetToken
  0024a	53		 push	 ebx
  0024b	e8 00 00 00 00	 call	 _isalnum
  00250	83 c4 04	 add	 esp, 4
  00253	85 c0		 test	 eax, eax
  00255	74 18		 je	 SHORT $LN60@GetToken
$LN32@GetToken:
  00257	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A

; 133  : 			{
; 134  : 				*p=ch;

  0025d	88 1e		 mov	 BYTE PTR [esi], bl

; 135  : 				p++;

  0025f	46		 inc	 esi
  00260	e8 00 00 00 00	 call	 _getc
  00265	8b d8		 mov	 ebx, eax
  00267	83 c4 04	 add	 esp, 4
  0026a	83 fb ff	 cmp	 ebx, -1
  0026d	75 d1		 jne	 SHORT $LL13@GetToken
$LN60@GetToken:

; 136  : 				
; 137  : 			}
; 138  : 
; 139  : 			ungetc(ch, SMDFile);

  0026f	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  00275	53		 push	 ebx
$LN62@GetToken:
  00276	e8 00 00 00 00	 call	 _ungetc
  0027b	83 c4 08	 add	 esp, 8
$LN28@GetToken:

; 140  : 			*p=0;

  0027e	c6 06 00	 mov	 BYTE PTR [esi], 0

; 141  : 			CurrentToken=NAME;
; 142  : 			return CurrentToken;

  00281	33 c0		 xor	 eax, eax
  00283	5e		 pop	 esi
  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 0
  0028e	5b		 pop	 ebx

; 143  : 		}
; 144  : 		else
; 145  : 		{
; 146  : 			return CurrentToken = SMD_ERROR; // '<'
; 147  : 		}
; 148  : 		break;
; 149  : 
; 150  : 	}
; 151  : 
; 152  : 	return NAME;
; 153  : }

  0028f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00292	33 cd		 xor	 ecx, ebp
  00294	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00299	8b e5		 mov	 esp, ebp
  0029b	5d		 pop	 ebp
  0029c	c3		 ret	 0
$LN30@GetToken:
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a0	b8 3c 00 00 00	 mov	 eax, 60			; 0000003cH
  002a5	5e		 pop	 esi
  002a6	33 cd		 xor	 ecx, ebp
  002a8	c7 05 00 00 00
	00 3c 00 00 00	 mov	 DWORD PTR ?CurrentToken@@3W4SMDToken@@A, 60 ; 0000003cH
  002b2	5b		 pop	 ebx
  002b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
$LN64@GetToken:
  002bc	00 00 00 00	 DD	 $LN27@GetToken
  002c0	00 00 00 00	 DD	 $LN20@GetToken
  002c4	00 00 00 00	 DD	 $LN22@GetToken
  002c8	00 00 00 00	 DD	 $LN25@GetToken
  002cc	00 00 00 00	 DD	 $LN21@GetToken
  002d0	00 00 00 00	 DD	 $LN23@GetToken
  002d4	00 00 00 00	 DD	 $LN24@GetToken
  002d8	00 00 00 00	 DD	 $LN29@GetToken
$LN58@GetToken:
  002dc	00		 DB	 0
  002dd	01		 DB	 1
  002de	07		 DB	 7
  002df	07		 DB	 7
  002e0	07		 DB	 7
  002e1	07		 DB	 7
  002e2	07		 DB	 7
  002e3	07		 DB	 7
  002e4	07		 DB	 7
  002e5	07		 DB	 7
  002e6	02		 DB	 2
  002e7	03		 DB	 3
  002e8	03		 DB	 3
  002e9	07		 DB	 7
  002ea	03		 DB	 3
  002eb	03		 DB	 3
  002ec	03		 DB	 3
  002ed	03		 DB	 3
  002ee	03		 DB	 3
  002ef	03		 DB	 3
  002f0	03		 DB	 3
  002f1	03		 DB	 3
  002f2	03		 DB	 3
  002f3	03		 DB	 3
  002f4	07		 DB	 7
  002f5	04		 DB	 4
  002f6	07		 DB	 7
  002f7	07		 DB	 7
  002f8	07		 DB	 7
  002f9	07		 DB	 7
  002fa	07		 DB	 7
  002fb	07		 DB	 7
  002fc	07		 DB	 7
  002fd	07		 DB	 7
  002fe	07		 DB	 7
  002ff	07		 DB	 7
  00300	07		 DB	 7
  00301	07		 DB	 7
  00302	07		 DB	 7
  00303	07		 DB	 7
  00304	07		 DB	 7
  00305	07		 DB	 7
  00306	07		 DB	 7
  00307	07		 DB	 7
  00308	07		 DB	 7
  00309	07		 DB	 7
  0030a	07		 DB	 7
  0030b	07		 DB	 7
  0030c	07		 DB	 7
  0030d	07		 DB	 7
  0030e	07		 DB	 7
  0030f	07		 DB	 7
  00310	07		 DB	 7
  00311	07		 DB	 7
  00312	07		 DB	 7
  00313	07		 DB	 7
  00314	07		 DB	 7
  00315	07		 DB	 7
  00316	07		 DB	 7
  00317	07		 DB	 7
  00318	07		 DB	 7
  00319	07		 DB	 7
  0031a	07		 DB	 7
  0031b	07		 DB	 7
  0031c	07		 DB	 7
  0031d	07		 DB	 7
  0031e	07		 DB	 7
  0031f	07		 DB	 7
  00320	07		 DB	 7
  00321	07		 DB	 7
  00322	07		 DB	 7
  00323	07		 DB	 7
  00324	07		 DB	 7
  00325	07		 DB	 7
  00326	07		 DB	 7
  00327	07		 DB	 7
  00328	07		 DB	 7
  00329	07		 DB	 7
  0032a	07		 DB	 7
  0032b	07		 DB	 7
  0032c	07		 DB	 7
  0032d	07		 DB	 7
  0032e	07		 DB	 7
  0032f	07		 DB	 7
  00330	07		 DB	 7
  00331	07		 DB	 7
  00332	07		 DB	 7
  00333	07		 DB	 7
  00334	07		 DB	 7
  00335	05		 DB	 5
  00336	07		 DB	 7
  00337	06		 DB	 6
?GetToken@@YA?AW4SMDToken@@XZ ENDP			; GetToken
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMagicDamage@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMagicDamage@@UAEPAXI@Z PROC			; CMagicDamage::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMagicDamage@@UAE@XZ	; CMagicDamage::~CMagicDamage
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 b8 51 01 00	 push	 86456			; 000151b8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMagicDamage@@UAEPAXI@Z ENDP			; CMagicDamage::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z PROC		; CMagicDamage::IsItemAttachedSkill, COMDAT
; _this$ = ecx

; 1058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1059 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@IsItemAtta

; 1063 : 	}
; 1064 : 
; 1065 : 	return this->m_btIsItemSkill[iSkill];

  0000d	8a 84 08 a4 4c
	01 00		 mov	 al, BYTE PTR [eax+ecx+85156]

; 1066 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@IsItemAtta:

; 1060 : 	{
; 1061 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 25 04 00 00	 push	 1061			; 00000425H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 		return -1;

  0003b	0c ff		 or	 al, 255			; 000000ffH

; 1066 : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?IsItemAttachedSkill@CMagicDamage@@QAEEH@Z ENDP		; CMagicDamage::IsItemAttachedSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetSkillGroup@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetSkillGroup@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillGroup, COMDAT
; _this$ = ecx

; 1047 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1048 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetSkillGr

; 1052 : 	}
; 1053 : 
; 1054 : 	return this->m_wML_SkillGroup[iSkill];

  0000d	0f b7 84 41 18
	29 01 00	 movzx	 eax, WORD PTR [ecx+eax*2+76056]

; 1055 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetSkillGr:

; 1049 : 	{
; 1050 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 1a 04 00 00	 push	 1050			; 0000041aH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1051 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1055 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillGroup@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillGroup
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetSkillRank@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetSkillRank@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillRank, COMDAT
; _this$ = ecx

; 1036 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1037 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetSkillRa

; 1041 : 	}
; 1042 : 
; 1043 : 	return this->m_wML_Rank[iSkill];

  0000d	0f b7 84 41 04
	24 01 00	 movzx	 eax, WORD PTR [ecx+eax*2+74756]

; 1044 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetSkillRa:

; 1038 : 	{
; 1039 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 0f 04 00 00	 push	 1039			; 0000040fH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1040 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1044 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillRank@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillRank
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetRequireDexterity@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetRequireDexterity@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetRequireDexterity, COMDAT
; _this$ = ecx

; 1025 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1026 : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetRequire

; 1030 : 	}
; 1031 : 
; 1032 : 	return this->m_wML_RequireDex[iSkill];

  0000d	0f b7 84 41 90
	47 01 00	 movzx	 eax, WORD PTR [ecx+eax*2+83856]

; 1033 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetRequire:

; 1027 : 	{
; 1028 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 04 04 00 00	 push	 1028			; 00000404H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1029 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1033 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetRequireDexterity@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetRequireDexterity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetRequireStrength@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetRequireStrength@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetRequireStrength, COMDAT
; _this$ = ecx

; 1014 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1015 : 	if (iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetRequire

; 1019 : 	}
; 1020 : 
; 1021 : 	return this->m_wML_RequireStr[iSkill];

  0000d	0f b7 84 41 7c
	42 01 00	 movzx	 eax, WORD PTR [ecx+eax*2+82556]

; 1022 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetRequire:

; 1016 : 	{
; 1017 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 f9 03 00 00	 push	 1017			; 000003f9H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1018 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1022 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetRequireStrength@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetRequireStrength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetRLevel@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetRLevel@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::GetRLevel, COMDAT
; _this$ = ecx

; 1003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1004 : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetRLevel

; 1008 : 	}
; 1009 : 
; 1010 : return this->m_rLevel[skill];

  0000d	0f b6 84 08 20
	89 00 00	 movzx	 eax, BYTE PTR [eax+ecx+35104]

; 1011 : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetRLevel:

; 1005 : 	{
; 1006 : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 ee 03 00 00	 push	 1006			; 000003eeH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1007 : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 1011 : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetRLevel@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::GetRLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetSkillUseType@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillUseType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillUseType, COMDAT
; _this$ = ecx

; 992  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 993  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@GetSkillUs

; 997  : 	}
; 998  : 
; 999  : return this->m_iSkillUseType[skill];

  0000d	8b 84 81 14 e7
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+59156]

; 1000 : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@GetSkillUs:

; 994  : 	{
; 995  : 		//LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);
; 996  : 		return -1;

  00018	83 c8 ff	 or	 eax, -1

; 1000 : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetSkillUseType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillUseType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_iSkill$ = 8						; size = 4
?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z PROC	; CMagicDamage::GetNormalBrandOfSkill, COMDAT
; _this$ = ecx

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 966  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00004	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000f	77 6f		 ja	 SHORT $LN5@GetNormalB

; 970  : 	}
; 971  : 
; 972  : 	int Cnt = 0;
; 973  : 	WORD nBrandOfSkill;
; 974  : 	WORD iBrandOfSkill = iSkill;
; 975  : 	
; 976  : 	while( nBrandOfSkill = this->GetBrandOfSkill(iBrandOfSkill) , g_MasterSkillSystem.CheckMasterLevelSkill(nBrandOfSkill) )

  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	0f b7 c0	 movzx	 eax, ax
  00017	33 f6		 xor	 esi, esi
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  0001f	0f b7 f8	 movzx	 edi, ax
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00027	8b df		 mov	 ebx, edi
  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  0002f	85 c0		 test	 eax, eax
  00031	74 23		 je	 SHORT $LN3@GetNormalB
$LL2@GetNormalB:

; 977  : 	{
; 978  : 		iBrandOfSkill = nBrandOfSkill;
; 979  : 		Cnt++;

  00033	46		 inc	 esi

; 980  : 
; 981  : 		if( Cnt > 3 )

  00034	83 fe 03	 cmp	 esi, 3
  00037	7f 29		 jg	 SHORT $LN9@GetNormalB

; 970  : 	}
; 971  : 
; 972  : 	int Cnt = 0;
; 973  : 	WORD nBrandOfSkill;
; 974  : 	WORD iBrandOfSkill = iSkill;
; 975  : 	
; 976  : 	while( nBrandOfSkill = this->GetBrandOfSkill(iBrandOfSkill) , g_MasterSkillSystem.CheckMasterLevelSkill(nBrandOfSkill) )

  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0003c	53		 push	 ebx
  0003d	e8 00 00 00 00	 call	 ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ; CMagicDamage::GetBrandOfSkill
  00042	0f b7 f8	 movzx	 edi, ax
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  0004a	8b df		 mov	 ebx, edi
  0004c	53		 push	 ebx
  0004d	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00052	85 c0		 test	 eax, eax
  00054	75 dd		 jne	 SHORT $LL2@GetNormalB
$LN3@GetNormalB:

; 985  : 		}
; 986  : 	}
; 987  : 
; 988  : return nBrandOfSkill;

  00056	66 8b c7	 mov	 ax, di
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 989  : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
$LN9@GetNormalB:

; 982  : 		{
; 983  : 			LogAdd("[GetNormalBrandOfSkill] fail!!! - %d",iSkill);

  00062	8b 75 08	 mov	 esi, DWORD PTR _iSkill$[ebp]
  00065	56		 push	 esi
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MDHHCBNC@?$FLGetNormalBrandOfSkill?$FN?5fail?$CB?$CB?$CB?5@
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00071	83 c4 08	 add	 esp, 8

; 984  : 			return iSkill;

  00074	66 8b c6	 mov	 ax, si
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx

; 989  : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN5@GetNormalB:

; 967  : 	{
; 968  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00080	68 c8 03 00 00	 push	 968			; 000003c8H
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0008a	68 c9 01 00 00	 push	 457			; 000001c9H
  0008f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00094	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00099	50		 push	 eax
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 969  : 		return -1;

  000a3	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 989  : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
?GetNormalBrandOfSkill@CMagicDamage@@QAEGH@Z ENDP	; CMagicDamage::GetNormalBrandOfSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetBrandOfSkill@CMagicDamage@@QAEGH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetBrandOfSkill@CMagicDamage@@QAEGH@Z PROC		; CMagicDamage::GetBrandOfSkill, COMDAT
; _this$ = ecx

; 954  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 955  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetBrandOf

; 959  : 	}
; 960  : 
; 961  : return this->m_wSkillBrand[iSkill];

  0000d	66 8b 84 41 3c
	f1 00 00	 mov	 ax, WORD PTR [ecx+eax*2+61756]

; 962  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetBrandOf:

; 956  : 	{
; 957  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 bd 03 00 00	 push	 957			; 000003bdH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 958  : 		return -1;

  0003c	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH

; 962  : }

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?GetBrandOfSkill@CMagicDamage@@QAEGH@Z ENDP		; CMagicDamage::GetBrandOfSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetSkillDistance@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillDistance, COMDAT
; _this$ = ecx

; 943  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 944  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0c		 ja	 SHORT $LN3@GetSkillDi

; 948  : 	}
; 949  : 
; 950  : 	return this->m_Distance[skill];

  0000d	0f b6 84 08 be
	90 00 00	 movzx	 eax, BYTE PTR [eax+ecx+37054]

; 951  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN3@GetSkillDi:

; 945  : 	{
; 946  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00019	68 b2 03 00 00	 push	 946			; 000003b2H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 c9 01 00 00	 push	 457			; 000001c9H
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00032	50		 push	 eax
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 947  : 		return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 951  : }

  0003f	5d		 pop	 ebp
  00040	c2 04 00	 ret	 4
?GetSkillDistance@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?CheckKillCount@CMagicDamage@@QAEHHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iKillCount$ = 12					; size = 4
?CheckKillCount@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckKillCount, COMDAT
; _this$ = ecx

; 931  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 932  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00006	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0000c	77 0e		 ja	 SHORT $LN3@CheckKillC

; 936  : 	}
; 937  : 
; 938  : 	return iKillCount - this->m_iKillCount[iSkill];

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _iKillCount$[ebp]
  00011	2b 84 91 50 f6
	00 00		 sub	 eax, DWORD PTR [ecx+edx*4+63056]

; 939  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN3@CheckKillC:

; 933  : 	{
; 934  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0001c	68 a6 03 00 00	 push	 934			; 000003a6H
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00026	68 c9 01 00 00	 push	 457			; 000001c9H
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00030	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 935  : 		return -1;

  0003f	83 c8 ff	 or	 eax, -1

; 939  : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
?CheckKillCount@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckKillCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::CheckBrandOfSkill, COMDAT
; _this$ = ecx

; 911  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 912  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 13		 ja	 SHORT $LN3@CheckBrand

; 916  : 	}
; 917  : 
; 918  : 	if ( this->m_wSkillBrand[iSkill] > 0 )

  0000d	66 33 d2	 xor	 dx, dx
  00010	66 3b 94 41 3c
	f1 00 00	 cmp	 dx, WORD PTR [ecx+eax*2+61756]
  00018	1b c0		 sbb	 eax, eax
  0001a	f7 d8		 neg	 eax

; 919  : 	{
; 920  : 		return TRUE;
; 921  : 	}
; 922  : 
; 923  : 	return FALSE;
; 924  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@CheckBrand:

; 913  : 	{
; 914  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00020	68 92 03 00 00	 push	 914			; 00000392H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0002a	68 c9 01 00 00	 push	 457			; 000001c9H
  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00034	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 915  : 		return 0;

  00043	33 c0		 xor	 eax, eax

; 919  : 	{
; 920  : 		return TRUE;
; 921  : 	}
; 922  : 
; 923  : 	return FALSE;
; 924  : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?CheckBrandOfSkill@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::CheckBrandOfSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?CheckStatus@CMagicDamage@@QAEHHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iGuildStatus$ = 12					; size = 4
?CheckStatus@CMagicDamage@@QAEHHH@Z PROC		; CMagicDamage::CheckStatus, COMDAT
; _this$ = ecx

; 863  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 864  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00004	8b 75 08	 mov	 esi, DWORD PTR _iSkill$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fe 89 02 00
	00		 cmp	 esi, 649		; 00000289H
  00010	77 75		 ja	 SHORT $LN3@CheckStatu

; 868  : 	}
; 869  : 
; 870  : 	if ( this->m_iSkillUseType[iSkill] == 0 )

  00012	83 bc b7 14 e7
	00 00 00	 cmp	 DWORD PTR [edi+esi*4+59156], 0
  0001a	74 26		 je	 SHORT $LN15@CheckStatu

; 871  : 	{
; 872  : 		return TRUE;
; 873  : 	}
; 874  : 
; 875  : 	if ( g_MasterSkillSystem.CheckMasterLevelSkill(iSkill) )

  0001c	56		 push	 esi
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_MasterSkillSystem@@3VCMasterLevelSkillTreeSystem@@A ; g_MasterSkillSystem
  00022	e8 00 00 00 00	 call	 ?CheckMasterLevelSkill@CMasterLevelSkillTreeSystem@@QAEHH@Z ; CMasterLevelSkillTreeSystem::CheckMasterLevelSkill
  00027	85 c0		 test	 eax, eax
  00029	75 17		 jne	 SHORT $LN15@CheckStatu

; 876  : 	{
; 877  : 		return TRUE;
; 878  : 	}
; 879  : 
; 880  : 	if ( iGuildStatus == 0x80 )

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _iGuildStatus$[ebp]
  0002e	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00033	75 18		 jne	 SHORT $LN6@CheckStatu

; 881  : 	{
; 882  : 		if ( this->m_iRequireStatus[iSkill][0] == 1 )

  00035	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00038	83 bc 87 78 00
	01 00 01	 cmp	 DWORD PTR [edi+eax*4+65656], 1
  00040	75 68		 jne	 SHORT $LN13@CheckStatu
$LN15@CheckStatu:
  00042	5f		 pop	 edi

; 883  : 		{
; 884  : 			return TRUE;

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5e		 pop	 esi

; 899  : 		}
; 900  : 	}
; 901  : 
; 902  : 	return FALSE;
; 903  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN6@CheckStatu:

; 885  : 		}
; 886  : 	}
; 887  : 	else if ( iGuildStatus == 0x40 )

  0004d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00050	75 18		 jne	 SHORT $LN9@CheckStatu

; 888  : 	{
; 889  : 		if ( this->m_iRequireStatus[iSkill][1] == 1 )

  00052	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00055	83 bc 87 7c 00
	01 00 01	 cmp	 DWORD PTR [edi+eax*4+65660], 1
  0005d	75 4b		 jne	 SHORT $LN13@CheckStatu

; 890  : 		{
; 891  : 			return TRUE;

  0005f	5f		 pop	 edi
  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	5e		 pop	 esi

; 899  : 		}
; 900  : 	}
; 901  : 
; 902  : 	return FALSE;
; 903  : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
$LN9@CheckStatu:

; 892  : 		}
; 893  : 	}
; 894  : 	else if ( iGuildStatus == 0x20 )

  0006a	83 f8 20	 cmp	 eax, 32			; 00000020H
  0006d	75 3b		 jne	 SHORT $LN13@CheckStatu

; 895  : 	{
; 896  : 		if ( this->m_iRequireStatus[iSkill][2] == 1 )

  0006f	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00072	83 bc 87 80 00
	01 00 01	 cmp	 DWORD PTR [edi+eax*4+65664], 1
  0007a	75 2e		 jne	 SHORT $LN13@CheckStatu

; 897  : 		{
; 898  : 			return TRUE;

  0007c	5f		 pop	 edi
  0007d	b8 01 00 00 00	 mov	 eax, 1
  00082	5e		 pop	 esi

; 899  : 		}
; 900  : 	}
; 901  : 
; 902  : 	return FALSE;
; 903  : }

  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN3@CheckStatu:

; 865  : 	{
; 866  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00087	68 62 03 00 00	 push	 866			; 00000362H
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00091	68 c9 01 00 00	 push	 457			; 000001c9H
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0009b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@CheckStatu:

; 867  : 		return 0;

  000aa	5f		 pop	 edi
  000ab	33 c0		 xor	 eax, eax
  000ad	5e		 pop	 esi

; 899  : 		}
; 900  : 	}
; 901  : 
; 902  : 	return FALSE;
; 903  : }

  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?CheckStatus@CMagicDamage@@QAEHHH@Z ENDP		; CMagicDamage::CheckStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetSkillType@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
?GetSkillType@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillType, COMDAT
; _this$ = ecx

; 832  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 833  : 	if ( iSkill < 0 || iSkill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _iSkill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@GetSkillTy

; 837  : 	}
; 838  : 	
; 839  : 	return this->m_iSkillType[iSkill];

  0000d	8b 84 81 ec dc
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+56556]

; 840  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@GetSkillTy:

; 834  : 	{
; 835  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 43 03 00 00	 push	 835			; 00000343H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 836  : 		return 0;

  0003b	33 c0		 xor	 eax, eax

; 840  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetSkillType@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetDelayTime@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetDelayTime@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetDelayTime, COMDAT
; _this$ = ecx

; 816  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 817  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@GetDelayTi

; 821  : 	}
; 822  : 
; 823  : 	return this->m_Delay[skill];

  0000d	8b 84 81 88 c3
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+50056]

; 824  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@GetDelayTi:

; 818  : 	{
; 819  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 33 03 00 00	 push	 819			; 00000333H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  : 		return 0;

  0003b	33 c0		 xor	 eax, eax

; 824  : }

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetDelayTime@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetDelayTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::GetskillRequireLeadership, COMDAT
; _this$ = ecx

; 797  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 798  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 1d		 ja	 SHORT $LN3@GetskillRe

; 802  : 	}
; 803  : 
; 804  : 	if ( this->m_RequireLeadership[skill] == -1 )

  0000d	8b 84 81 60 b9
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+47456]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN1@GetskillRe

; 805  : 	{
; 806  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 26 03 00 00	 push	 806			; 00000326H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 807  : 		return -1;

  00028	eb 0f		 jmp	 SHORT $LN6@GetskillRe
$LN3@GetskillRe:

; 799  : 	{
; 800  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 20 03 00 00	 push	 800			; 00000320H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@GetskillRe:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 801  : 		return -1;

  0004d	83 c8 ff	 or	 eax, -1
$LN1@GetskillRe:

; 808  : 	}
; 809  : 
; 810  : 	return this->m_RequireLeadership[skill];
; 811  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?GetskillRequireLeadership@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::GetskillRequireLeadership
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?GetSkillAttr@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::GetSkillAttr, COMDAT
; _this$ = ecx

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 769  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@GetSkillAt

; 772  : 	}
; 773  : 
; 774  : 	return this->m_Attr[skill];

  0000d	8b 84 81 c4 d2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+53956]

; 775  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@GetSkillAt:

; 770  : 	{
; 771  : 		return -1;

  00018	83 c8 ff	 or	 eax, -1

; 775  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetSkillAttr@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::GetSkillAttr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SkillGetBP@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetBP@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGetBP, COMDAT
; _this$ = ecx

; 672  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 673  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 24		 ja	 SHORT $LN3@SkillGetBP

; 677  : 	}
; 678  : 
; 679  : 	if ( this->m_Damage[skill] == -1 )

  0000d	83 7c 81 04 ff	 cmp	 DWORD PTR [ecx+eax*4+4], -1
  00012	75 11		 jne	 SHORT $LN4@SkillGetBP

; 680  : 	{
; 681  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00014	68 a9 02 00 00	 push	 681			; 000002a9H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001e	68 ca 01 00 00	 push	 458			; 000001caH

; 682  : 		return 0;

  00023	eb 1b		 jmp	 SHORT $LN6@SkillGetBP
$LN4@SkillGetBP:

; 683  : 	}
; 684  : 
; 685  : 	return this->m_BrainPower[skill];

  00025	0f b7 84 41 b0
	cd 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+52656]

; 686  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN3@SkillGetBP:

; 674  : 	{
; 675  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00031	68 a3 02 00 00	 push	 675			; 000002a3H
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0003b	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGetBP:
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00045	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 676  : 		return 0;

  00054	33 c0		 xor	 eax, eax

; 686  : }

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?SkillGetBP@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGetBP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z
_TEXT	SEGMENT
_Cclass$ = 8						; size = 4
_ChangeUP$ = 12						; size = 4
_ChangeUP2$ = 16					; size = 4
_skill$ = 20						; size = 4
?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z PROC	; CMagicDamage::SkillGetRequireClass, COMDAT
; _this$ = ecx

; 719  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 720  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 55 14	 mov	 edx, DWORD PTR _skill$[ebp]
  00006	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0000c	77 6e		 ja	 SHORT $LN3@SkillGetRe

; 724  : 	}
; 725  : 
; 726  : 	if ( Cclass < 0 || Cclass > MAX_TYPE_PLAYER-1 )

  0000e	83 7d 08 06	 cmp	 DWORD PTR _Cclass$[ebp], 6
  00012	77 45		 ja	 SHORT $LN5@SkillGetRe

; 729  : 		return -1;
; 730  : 	}
; 731  : 
; 732  : 	int requireclass = this->m_RequireClass[skill][Cclass];

  00014	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  0001b	2b c2		 sub	 eax, edx
  0001d	03 45 08	 add	 eax, DWORD PTR _Cclass$[ebp]
  00020	0f b6 8c 08 70
	9d 00 00	 movzx	 ecx, BYTE PTR [eax+ecx+40304]

; 733  : 
; 734  : 	if ( requireclass == 0 )

  00028	85 c9		 test	 ecx, ecx
  0002a	75 06		 jne	 SHORT $LN6@SkillGetRe
$LN13@SkillGetRe:

; 735  : 	{
; 736  : 		return FALSE;

  0002c	33 c0		 xor	 eax, eax

; 760  : }

  0002e	5d		 pop	 ebp
  0002f	c2 10 00	 ret	 16			; 00000010H
$LN6@SkillGetRe:

; 737  : 	}
; 738  : 
; 739  : 	if ( requireclass == 3 )

  00032	83 f9 03	 cmp	 ecx, 3
  00035	75 0c		 jne	 SHORT $LN9@SkillGetRe

; 740  : 	{
; 741  : 		if( ChangeUP2 > 0 )

  00037	33 c0		 xor	 eax, eax
  00039	39 45 10	 cmp	 DWORD PTR _ChangeUP2$[ebp], eax
  0003c	0f 9f c0	 setg	 al

; 760  : }

  0003f	5d		 pop	 ebp
  00040	c2 10 00	 ret	 16			; 00000010H
$LN9@SkillGetRe:

; 742  : 		{
; 743  : 			return TRUE;
; 744  : 		}
; 745  : 		else
; 746  : 		{
; 747  : 			return FALSE;
; 748  : 		}
; 749  : 	}
; 750  : 
; 751  : 	if ( requireclass > 1 )

  00043	83 f9 01	 cmp	 ecx, 1
  00046	7e 08		 jle	 SHORT $LN11@SkillGetRe

; 752  : 	{
; 753  : 		if ( requireclass != (ChangeUP+1) )

  00048	8b 45 0c	 mov	 eax, DWORD PTR _ChangeUP$[ebp]
  0004b	40		 inc	 eax
  0004c	3b c8		 cmp	 ecx, eax
  0004e	75 dc		 jne	 SHORT $LN13@SkillGetRe
$LN11@SkillGetRe:

; 754  : 		{
; 755  : 			return FALSE;
; 756  : 		}
; 757  : 	}
; 758  : 
; 759  : 	return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 760  : }

  00055	5d		 pop	 ebp
  00056	c2 10 00	 ret	 16			; 00000010H
$LN5@SkillGetRe:

; 727  : 	{
; 728  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00059	68 d8 02 00 00	 push	 728			; 000002d8H
  0005e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00063	68 ca 01 00 00	 push	 458			; 000001caH
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0006d	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00072	50		 push	 eax
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@SkillGetRe:

; 721  : 	{
; 722  : 		//LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);
; 723  : 		return -1;

  0007c	83 c8 ff	 or	 eax, -1

; 760  : }

  0007f	5d		 pop	 ebp
  00080	c2 10 00	 ret	 16			; 00000010H
?SkillGetRequireClass@CMagicDamage@@QAEHHHHH@Z ENDP	; CMagicDamage::SkillGetRequireClass
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireLevel, COMDAT
; _this$ = ecx

; 847  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 848  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@SkillGetRe

; 852  : 	}
; 853  : 
; 854  : 	return this->m_RequireLevel[skill];

  0000d	8b 84 81 38 af
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+44856]

; 855  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN3@SkillGetRe:

; 849  : 	{
; 850  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00018	68 52 03 00 00	 push	 850			; 00000352H
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00022	68 c9 01 00 00	 push	 457			; 000001c9H
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH

; 851  : 		return -1;

  0003b	83 c8 ff	 or	 eax, -1

; 855  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?SkillGetRequireLevel@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z PROC	; CMagicDamage::SkillGetRequireEnergy, COMDAT
; _this$ = ecx

; 696  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 1d		 ja	 SHORT $LN3@SkillGetRe

; 701  : 	}
; 702  : 
; 703  : 	if ( this->m_RequireEnergy[skill] == -1 )

  0000d	8b 84 81 48 93
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+37704]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN1@SkillGetRe

; 704  : 	{
; 705  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 c1 02 00 00	 push	 705			; 000002c1H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 706  : 		return -1;

  00028	eb 0f		 jmp	 SHORT $LN6@SkillGetRe
$LN3@SkillGetRe:

; 698  : 	{
; 699  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 bb 02 00 00	 push	 699			; 000002bbH
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGetRe:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 700  : 		return -1;

  0004d	83 c8 ff	 or	 eax, -1
$LN1@SkillGetRe:

; 707  : 	}
; 708  : 
; 709  : 	return this->m_RequireEnergy[skill];
; 710  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?SkillGetRequireEnergy@CMagicDamage@@QAEHH@Z ENDP	; CMagicDamage::SkillGetRequireEnergy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SkillGetMana@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGetMana@CMagicDamage@@QAEHH@Z PROC		; CMagicDamage::SkillGetMana, COMDAT
; _this$ = ecx

; 650  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 651  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000e	77 3f		 ja	 SHORT $LN3@SkillGetMa

; 655  : 	}
; 656  : 
; 657  : 	if ( this->m_Damage[skill] == -1 )

  00010	83 7c 86 04 ff	 cmp	 DWORD PTR [esi+eax*4+4], -1
  00015	75 2b		 jne	 SHORT $LN4@SkillGetMa

; 658  : 	{
; 659  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00017	68 93 02 00 00	 push	 659			; 00000293H
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00021	68 ca 01 00 00	 push	 458			; 000001caH
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0002b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 660  : 		return this->m_Damage[0];

  00037	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	5e		 pop	 esi

; 664  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN4@SkillGetMa:

; 661  : 	}
; 662  : 
; 663  : 	return this->m_Mana[skill];

  00042	0f b7 84 46 aa
	8b 00 00	 movzx	 eax, WORD PTR [esi+eax*2+35754]
  0004a	5e		 pop	 esi

; 664  : }

  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN3@SkillGetMa:

; 652  : 	{
; 653  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0004f	68 8d 02 00 00	 push	 653			; 0000028dH
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00059	68 c9 01 00 00	 push	 457			; 000001c9H
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00063	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 654  : 		return this->m_Mana[0];

  0006f	0f b7 86 aa 8b
	00 00		 movzx	 eax, WORD PTR [esi+35754]
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	5e		 pop	 esi

; 664  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?SkillGetMana@CMagicDamage@@QAEHH@Z ENDP		; CMagicDamage::SkillGetMana
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SkillGet@CMagicDamage@@QAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?SkillGet@CMagicDamage@@QAEHH@Z PROC			; CMagicDamage::SkillGet, COMDAT
; _this$ = ecx

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 628  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000e	77 1a		 ja	 SHORT $LN3@SkillGet

; 632  : 	}
; 633  : 
; 634  : 	if ( this->m_Damage[skill] == -1 )

  00010	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN1@SkillGet

; 635  : 	{
; 636  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 7c 02 00 00	 push	 636			; 0000027cH
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 637  : 		return this->m_Damage[0];

  00028	eb 0f		 jmp	 SHORT $LN6@SkillGet
$LN3@SkillGet:

; 629  : 	{
; 630  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 76 02 00 00	 push	 630			; 00000276H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SkillGet:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 631  : 		return this->m_Damage[0];

  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SkillGet:
  00050	5e		 pop	 esi

; 638  : 	}
; 639  : 
; 640  : 	return this->m_Damage[skill];
; 641  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?SkillGet@CMagicDamage@@QAEHH@Z ENDP			; CMagicDamage::SkillGet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?LogSkillNameList@CMagicDamage@@QAEXPAD@Z
_TEXT	SEGMENT
_name$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillNameList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillNameList, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	57		 push	 edi
  00012	8b 7d 08	 mov	 edi, DWORD PTR _filename$[ebp]
  00015	8b d9		 mov	 ebx, ecx

; 219  : 	int Token;
; 220  : 	int n;
; 221  : 	int number;
; 222  : 	char name[50];
; 223  : 	
; 224  : 	SMDFile = fopen(filename, "r");

  00017	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0001c	57		 push	 edi
  0001d	e8 00 00 00 00	 call	 _fopen
  00022	83 c4 08	 add	 esp, 8
  00025	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 225  : 
; 226  : 	if ( SMDFile == NULL )

  0002a	85 c0		 test	 eax, eax
  0002c	75 18		 jne	 SHORT $LN4@LogSkillNa

; 227  : 	{
; 228  : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  0002e	57		 push	 edi
  0002f	68 c7 01 00 00	 push	 455			; 000001c7H
  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00039	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 229  : 		return;

  00044	eb 76		 jmp	 SHORT $LN13@LogSkillNa
$LN4@LogSkillNa:

; 230  : 	}
; 231  : 
; 232  : 	n=0;
; 233  : 
; 234  : 	while ( true )
; 235  : 	{
; 236  : 		Token = GetToken();

  00046	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 237  : 
; 238  : 		if ( Token == 2 )

  0004b	83 f8 02	 cmp	 eax, 2
  0004e	74 47		 je	 SHORT $LN10@LogSkillNa
  00050	56		 push	 esi
$LL2@LogSkillNa:

; 239  : 		{
; 240  : 			break;
; 241  : 		}
; 242  : 
; 243  : 		if ( Token == 1 )

  00051	83 f8 01	 cmp	 eax, 1
  00054	75 36		 jne	 SHORT $LN6@LogSkillNa

; 244  : 		{
; 245  : 			number = (int)TokenNumber;

  00056	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 246  : 
; 247  : 			Token = GetToken();

  0005e	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 248  : 			strcpy_s(name, sizeof(name), TokenString);

  00063	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  00068	8d 45 c8	 lea	 eax, DWORD PTR _name$[ebp]
  0006b	6a 32		 push	 50			; 00000032H
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _strcpy_s

; 249  : 			strcpy_s(this->m_Name[number], sizeof(this->m_Name[number]), name);

  00073	8d 45 c8	 lea	 eax, DWORD PTR _name$[ebp]
  00076	50		 push	 eax
  00077	6b c6 32	 imul	 eax, esi, 50
  0007a	6a 32		 push	 50			; 00000032H
  0007c	05 2c 0a 00 00	 add	 eax, 2604		; 00000a2cH
  00081	03 c3		 add	 eax, ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _strcpy_s
  00089	83 c4 18	 add	 esp, 24			; 00000018H
$LN6@LogSkillNa:

; 237  : 
; 238  : 		if ( Token == 2 )

  0008c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  00091	83 f8 02	 cmp	 eax, 2
  00094	75 bb		 jne	 SHORT $LL2@LogSkillNa
  00096	5e		 pop	 esi
$LN10@LogSkillNa:

; 250  : 		}
; 251  : 	}
; 252  : 
; 253  : 	fclose(SMDFile);

  00097	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  0009d	e8 00 00 00 00	 call	 _fclose
  000a2	83 c4 04	 add	 esp, 4

; 254  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  000a5	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000aa	57		 push	 edi
  000ab	68 c8 01 00 00	 push	 456			; 000001c8H
  000b0	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
$LN13@LogSkillNa:

; 255  : }

  000bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	83 c4 08	 add	 esp, 8
  000c2	33 cd		 xor	 ecx, ebp
  000c4	5f		 pop	 edi
  000c5	5b		 pop	 ebx
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 04 00	 ret	 4
?LogSkillNameList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillNameList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
_TEXT	SEGMENT
_WzMemScript$ = -200					; size = 132
_name$ = -68						; size = 50
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LogSkillNameList@CMagicDamage@@QAEXPADH@Z PROC		; CMagicDamage::LogSkillNameList, COMDAT
; _this$ = ecx

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec bc 00 00
	00		 sub	 esp, 188		; 000000bcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _Buffer$[ebp]

; 421  : 	CWzMemScript WzMemScript;

  00032	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CWzMemScript@@QAE@XZ	; CWzMemScript::CWzMemScript

; 422  : 	int Token;
; 423  : 	int n;
; 424  : 	int number;
; 425  : 	char name[50];
; 426  : 	
; 427  : 	WzMemScript.SetBuffer(Buffer, iSize);

  0003d	ff 75 0c	 push	 DWORD PTR _iSize$[ebp]
  00040	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ?SetBuffer@CWzMemScript@@QAEHPADH@Z ; CWzMemScript::SetBuffer

; 428  : 
; 429  : 	n=0;
; 430  : 
; 431  : 	while ( true )
; 432  : 	{
; 433  : 		Token = WzMemScript.GetToken();

  00053	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00059	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 434  : 
; 435  : 		if ( Token == 2 )

  0005e	83 f8 02	 cmp	 eax, 2
  00061	74 51		 je	 SHORT $LN10@LogSkillNa
$LL2@LogSkillNa:

; 436  : 		{
; 437  : 			break;
; 438  : 		}
; 439  : 
; 440  : 		if ( Token == 1 )

  00063	83 f8 01	 cmp	 eax, 1
  00066	75 3c		 jne	 SHORT $LN5@LogSkillNa

; 441  : 		{
; 442  : 			number = (int)TokenNumber;

  00068	f3 0f 2c 35 00
	00 00 00	 cvttss2si esi, DWORD PTR ?TokenNumber@@3MA

; 443  : 
; 444  : 			Token = WzMemScript.GetToken();	

  00070	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00076	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 445  : 			strcpy_s(name, sizeof(name), TokenString);

  0007b	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  00080	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  00083	6a 32		 push	 50			; 00000032H
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _strcpy_s

; 446  : 
; 447  : 			strcpy_s(this->m_Name[number], sizeof(this->m_Name[number]), name);

  0008b	8d 45 bc	 lea	 eax, DWORD PTR _name$[ebp]
  0008e	50		 push	 eax
  0008f	6b c6 32	 imul	 eax, esi, 50
  00092	6a 32		 push	 50			; 00000032H
  00094	05 2c 0a 00 00	 add	 eax, 2604		; 00000a2cH
  00099	03 c7		 add	 eax, edi
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _strcpy_s
  000a1	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@LogSkillNa:

; 428  : 
; 429  : 	n=0;
; 430  : 
; 431  : 	while ( true )
; 432  : 	{
; 433  : 		Token = WzMemScript.GetToken();

  000a4	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000aa	e8 00 00 00 00	 call	 ?GetToken@CWzMemScript@@QAE?AW4SMDToken@@XZ ; CWzMemScript::GetToken

; 434  : 
; 435  : 		if ( Token == 2 )

  000af	83 f8 02	 cmp	 eax, 2
  000b2	75 af		 jne	 SHORT $LL2@LogSkillNa
$LN10@LogSkillNa:

; 448  : 		}
; 449  : 	}
; 450  : 
; 451  : 	
; 452  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill_Local");

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LDHACGGK@Skill_Local?$AA@
  000b9	68 c8 01 00 00	 push	 456			; 000001c8H
  000be	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  000c3	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000c8	50		 push	 eax
  000c9	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd
  000cf	83 c4 08	 add	 esp, 8

; 453  : }

  000d2	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  000d8	e8 00 00 00 00	 call	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
  000dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e7	59		 pop	 ecx
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z$0:
  00000	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _WzMemScript$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CWzMemScript@@UAE@XZ	; CWzMemScript::~CWzMemScript
__ehhandler$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 38 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-200]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LogSkillNameList@CMagicDamage@@QAEXPADH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LogSkillNameList@CMagicDamage@@QAEXPADH@Z ENDP		; CMagicDamage::LogSkillNameList
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?LogSkillList@CMagicDamage@@QAEXPAD@Z
_TEXT	SEGMENT
_RequireStatus$ = -164					; size = 12
_filename$GSCopy$1$ = -152				; size = 4
_nSkillRank$1$ = -148					; size = 4
_nSkillGroup$1$ = -144					; size = 4
_nRequireMLPoint$1$ = -140				; size = 4
_nHP$1$ = -136						; size = 4
_nSD$1$ = -132						; size = 4
_iSkillUseType$1$ = -128				; size = 4
_iSkillBrand$1$ = -124					; size = 4
_iKillCount$1$ = -120					; size = 4
_damage$1$ = -116					; size = 4
_requireLevel$1$ = -112					; size = 4
_mana$1$ = -108						; size = 4
_bp$1$ = -104						; size = 4
_dis$1$ = -100						; size = 4
_attr$1$ = -96						; size = 4
_iSkillType$1$ = -92					; size = 4
_rEnergy$1$ = -88					; size = 4
_rLeadership$1$ = -84					; size = 4
_rDelay$1$ = -80					; size = 4
_btItemSkill$ = -76					; size = 1
_this$GSCopy$1$ = -72					; size = 4
_number$1$ = -68					; size = 4
_RequireClass$ = -64					; size = 7
_name$ = -56						; size = 50
__$ArrayPad$ = -4					; size = 4
_filename$ = 8						; size = 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z PROC		; CMagicDamage::LogSkillList, COMDAT
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _filename$[ebp]
  00017	8b c1		 mov	 eax, ecx
  00019	89 45 b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax
  0001c	89 9d 68 ff ff
	ff		 mov	 DWORD PTR _filename$GSCopy$1$[ebp], ebx

; 34   : 	this->Init();

  00022	e8 00 00 00 00	 call	 ?Init@CMagicDamage@@QAEXXZ ; CMagicDamage::Init

; 35   : 
; 36   : 
; 37   : 	SMDFile = fopen(filename, "r");

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_01KDCPPGHE@r?$AA@
  0002c	53		 push	 ebx
  0002d	e8 00 00 00 00	 call	 _fopen
  00032	83 c4 08	 add	 esp, 8
  00035	a3 00 00 00 00	 mov	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A, eax

; 38   : 
; 39   : 	if ( SMDFile == NULL )

  0003a	85 c0		 test	 eax, eax
  0003c	75 2a		 jne	 SHORT $LN4@LogSkillLi

; 40   : 	{
; 41   : 		MsgBox(lMsg.Get(MSGGET(1, 199)), filename);

  0003e	53		 push	 ebx
  0003f	68 c7 01 00 00	 push	 455			; 000001c7H
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00049	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox

; 213  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  00054	83 c4 08	 add	 esp, 8
  00057	5b		 pop	 ebx

; 214  : }

  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	33 cd		 xor	 ecx, ebp
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN4@LogSkillLi:
  00068	0f 57 c0	 xorps	 xmm0, xmm0

; 42   : 		return;
; 43   : 	}
; 44   : 
; 45   : 	int Token;
; 46   : 	int n=0;
; 47   : 	int number;
; 48   : 	char name[50];
; 49   : 	int requireLevel;
; 50   : 	int damage;
; 51   : 	int mana;
; 52   : 	int bp=0;
; 53   : 	int dis;
; 54   : 	int rEnergy;
; 55   : 	int iSkillType;
; 56   : 	int rLeadership;
; 57   : 	int rDelay;
; 58   : 	int attr;
; 59   : 	int iSkillUseType;
; 60   : 	int iSkillBrand;
; 61   : 	int iKillCount;
; 62   : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};

  0006b	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _RequireStatus$[ebp], 0
  00075	66 0f d6 85 60
	ff ff ff	 movq	 QWORD PTR _RequireStatus$[ebp+4], xmm0

; 63   : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 64   : 	short nSkillRank;
; 65   : 	short nSkillGroup;
; 66   : 	short nRequireMLPoint;
; 67   : 	short nHP;
; 68   : 	short nSD;
; 69   : 	WORD wKeepTime;
; 70   : 	short nRequireStr;
; 71   : 	short nRequireDex;
; 72   : 	BYTE btIconNum;
; 73   : 	int nSkillType;
; 74   : 	BYTE btItemSkill;
; 75   : 	BYTE btIsDamage;
; 76   : 
; 77   : 	while ( true )
; 78   : 	{
; 79   : 		Token = GetToken();

  0007d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 80   : 
; 81   : 		if ( Token == 2 )

  00082	83 f8 02	 cmp	 eax, 2
  00085	0f 84 27 03 00
	00		 je	 $LN10@LogSkillLi
  0008b	56		 push	 esi
  0008c	57		 push	 edi
  0008d	0f 1f 00	 npad	 3
$LL2@LogSkillLi:

; 82   : 		{
; 83   : 			break;
; 84   : 		}
; 85   : 
; 86   : 		if ( Token == 1 )

  00090	83 f8 01	 cmp	 eax, 1
  00093	0f 85 03 03 00
	00		 jne	 $LN6@LogSkillLi

; 87   : 		{
; 88   : 			number = (int)TokenNumber;

  00099	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000a1	89 45 bc	 mov	 DWORD PTR _number$1$[ebp], eax

; 89   : 
; 90   : 			Token = GetToken();

  000a4	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 91   : 			strcpy_s(name, sizeof(name), TokenString);

  000a9	68 00 00 00 00	 push	 OFFSET ?TokenString@@3PADA
  000ae	8d 45 c8	 lea	 eax, DWORD PTR _name$[ebp]
  000b1	6a 32		 push	 50			; 00000032H
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 _strcpy_s
  000b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 92   : 
; 93   : 			Token = GetToken();

  000bc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 94   : 			requireLevel = (int)TokenNumber;

  000c1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000c9	89 45 90	 mov	 DWORD PTR _requireLevel$1$[ebp], eax

; 95   : 
; 96   : 			Token = GetToken();

  000cc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 97   : 			damage = (int)TokenNumber;

  000d1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000d9	89 45 8c	 mov	 DWORD PTR _damage$1$[ebp], eax

; 98   : 
; 99   : 			Token = GetToken();

  000dc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 100  : 			mana = (int)TokenNumber;

  000e1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000e9	89 45 94	 mov	 DWORD PTR _mana$1$[ebp], eax

; 101  : 
; 102  : 			Token = GetToken();

  000ec	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 103  : 			bp = (int)TokenNumber;	// Agility Gauge

  000f1	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  000f9	89 45 98	 mov	 DWORD PTR _bp$1$[ebp], eax

; 104  : 
; 105  : 			Token = GetToken();

  000fc	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 106  : 			dis = (int)TokenNumber;

  00101	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00109	89 45 9c	 mov	 DWORD PTR _dis$1$[ebp], eax

; 107  : 
; 108  : 			Token = GetToken();

  0010c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 109  : 			rDelay = (int)TokenNumber;

  00111	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00119	89 45 b0	 mov	 DWORD PTR _rDelay$1$[ebp], eax

; 110  : 
; 111  : 			Token = GetToken();

  0011c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 112  : 			rEnergy = (int)TokenNumber;

  00121	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00129	89 45 a8	 mov	 DWORD PTR _rEnergy$1$[ebp], eax

; 113  : 
; 114  : 			Token = GetToken();

  0012c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 115  : 			rLeadership = (int)TokenNumber;

  00131	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00139	89 45 ac	 mov	 DWORD PTR _rLeadership$1$[ebp], eax

; 116  : 
; 117  : 			Token = GetToken();

  0013c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 118  : 			attr = (int)TokenNumber;

  00141	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00149	89 45 a0	 mov	 DWORD PTR _attr$1$[ebp], eax

; 119  : 
; 120  : 			Token = GetToken();

  0014c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 121  : 			iSkillType = (int)TokenNumber;

  00151	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00159	89 45 a4	 mov	 DWORD PTR _iSkillType$1$[ebp], eax

; 122  : 
; 123  : 			Token = GetToken();

  0015c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 124  : 			iSkillUseType = (int)TokenNumber;

  00161	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00169	89 45 80	 mov	 DWORD PTR _iSkillUseType$1$[ebp], eax

; 125  : 
; 126  : 			Token = GetToken();

  0016c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 127  : 			iSkillBrand = (int)TokenNumber;

  00171	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00179	89 45 84	 mov	 DWORD PTR _iSkillBrand$1$[ebp], eax

; 128  : 
; 129  : 			Token = GetToken();

  0017c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 130  : 			iKillCount = (int)TokenNumber;

  00181	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00189	89 45 88	 mov	 DWORD PTR _iKillCount$1$[ebp], eax

; 131  : 			/*
; 132  : 			CLASS_WIZARD = 0x0,
; 133  :   CLASS_KNIGHT = 0x1,
; 134  :   CLASS_ELF = 0x2,
; 135  :   CLASS_MAGUMSA = 0x3,
; 136  :   CLASS_DARKLORD = 0x4,
; 137  :   CLASS_SUMMONER = 0x5,
; 138  :   CLASS_FIGHTER = 0x6,*/
; 139  : 			Token = GetToken();

  0018c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 140  : 			RequireStatus[0] = (int)TokenNumber;

  00191	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00199	89 85 5c ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp], eax

; 141  : 
; 142  : 			Token = GetToken();

  0019f	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 143  : 			RequireStatus[1] = (int)TokenNumber;

  001a4	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001ac	89 85 60 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+4], eax

; 144  : 
; 145  : 			Token = GetToken();

  001b2	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 146  : 			RequireStatus[2] = (int)TokenNumber;

  001b7	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001bf	89 85 64 ff ff
	ff		 mov	 DWORD PTR _RequireStatus$[ebp+8], eax

; 147  : 
; 148  : 			Token = GetToken();

  001c5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 149  : 			RequireClass[0] = (BYTE)TokenNumber;

  001ca	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001d2	88 45 c0	 mov	 BYTE PTR _RequireClass$[ebp], al

; 150  : 
; 151  : 			Token = GetToken();

  001d5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 152  : 			RequireClass[1] = (BYTE)TokenNumber;

  001da	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001e2	88 45 c1	 mov	 BYTE PTR _RequireClass$[ebp+1], al

; 153  : 
; 154  : 			Token = GetToken();

  001e5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 155  : 			RequireClass[2] = (BYTE)TokenNumber;

  001ea	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  001f2	88 45 c2	 mov	 BYTE PTR _RequireClass$[ebp+2], al

; 156  : 
; 157  : 			Token = GetToken();

  001f5	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 158  : 			RequireClass[3] = (BYTE)TokenNumber;

  001fa	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00202	88 45 c3	 mov	 BYTE PTR _RequireClass$[ebp+3], al

; 159  : 
; 160  : 			Token = GetToken();

  00205	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 161  : 			RequireClass[4] = (BYTE)TokenNumber;

  0020a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00212	88 45 c4	 mov	 BYTE PTR _RequireClass$[ebp+4], al

; 162  : 
; 163  : 			Token = GetToken();

  00215	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 164  : 			RequireClass[5] = (BYTE)TokenNumber;

  0021a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00222	88 45 c5	 mov	 BYTE PTR _RequireClass$[ebp+5], al

; 165  : 
; 166  : 			Token = GetToken();

  00225	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 167  : 			RequireClass[6] = (BYTE)TokenNumber;

  0022a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00232	88 45 c6	 mov	 BYTE PTR _RequireClass$[ebp+6], al

; 168  : 
; 169  : 			Token = GetToken();

  00235	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 170  : 			nSkillRank = (WORD)TokenNumber;

  0023a	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00242	0f b7 c0	 movzx	 eax, ax
  00245	89 85 6c ff ff
	ff		 mov	 DWORD PTR _nSkillRank$1$[ebp], eax

; 171  : 
; 172  : 			Token = GetToken();

  0024b	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 173  : 			nSkillGroup = (WORD)TokenNumber;

  00250	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00258	0f b7 c0	 movzx	 eax, ax
  0025b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _nSkillGroup$1$[ebp], eax

; 174  : 
; 175  : 			Token = GetToken();

  00261	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 176  : 			nRequireMLPoint = (WORD)TokenNumber;

  00266	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0026e	0f b7 c0	 movzx	 eax, ax
  00271	89 85 74 ff ff
	ff		 mov	 DWORD PTR _nRequireMLPoint$1$[ebp], eax

; 177  : 
; 178  : 			Token = GetToken();

  00277	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 179  : 			nHP = (WORD)TokenNumber;

  0027c	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  00284	0f b7 c0	 movzx	 eax, ax
  00287	89 85 78 ff ff
	ff		 mov	 DWORD PTR _nHP$1$[ebp], eax

; 180  : 
; 181  : 			Token = GetToken();

  0028d	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 182  : 			nSD = (WORD)TokenNumber;

  00292	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  0029a	0f b7 c0	 movzx	 eax, ax
  0029d	89 85 7c ff ff
	ff		 mov	 DWORD PTR _nSD$1$[ebp], eax

; 183  : 
; 184  : 			Token = GetToken();

  002a3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 185  : 			wKeepTime = (WORD)TokenNumber;

  002a8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002b0	0f b7 d8	 movzx	 ebx, ax

; 186  : 
; 187  : 			Token = GetToken();

  002b3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 188  : 			nRequireStr = (WORD)TokenNumber;

  002b8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002c0	0f b7 f8	 movzx	 edi, ax

; 189  : 
; 190  : 			Token = GetToken();

  002c3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 191  : 			nRequireDex = (WORD)TokenNumber;

  002c8	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002d0	0f b7 f0	 movzx	 esi, ax

; 192  : 
; 193  : 			Token = GetToken();

  002d3	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 194  : 			btIconNum = (BYTE)TokenNumber;
; 195  : 
; 196  : 			Token = GetToken();

  002d8	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 197  : 			nSkillType = TokenNumber;
; 198  : 
; 199  : 			Token = GetToken();

  002dd	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 200  : 			btItemSkill = (BYTE)TokenNumber;

  002e2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA
  002ea	88 45 b4	 mov	 BYTE PTR _btItemSkill$[ebp], al

; 201  : 
; 202  : 			Token = GetToken();

  002ed	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken

; 203  : 			btIsDamage = (BYTE)TokenNumber;

  002f2	f3 0f 2c 05 00
	00 00 00	 cvttss2si eax, DWORD PTR ?TokenNumber@@3MA

; 204  : 
; 205  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay, btItemSkill, btIsDamage );

  002fa	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002fd	0f b6 c0	 movzx	 eax, al
  00300	50		 push	 eax
  00301	ff 75 b4	 push	 DWORD PTR _btItemSkill$[ebp]
  00304	8d 45 c0	 lea	 eax, DWORD PTR _RequireClass$[ebp]
  00307	ff 75 b0	 push	 DWORD PTR _rDelay$1$[ebp]
  0030a	ff 75 ac	 push	 DWORD PTR _rLeadership$1$[ebp]
  0030d	ff 75 a8	 push	 DWORD PTR _rEnergy$1$[ebp]
  00310	50		 push	 eax
  00311	ff 75 a4	 push	 DWORD PTR _iSkillType$1$[ebp]
  00314	8d 45 c8	 lea	 eax, DWORD PTR _name$[ebp]
  00317	ff 75 a0	 push	 DWORD PTR _attr$1$[ebp]
  0031a	ff 75 9c	 push	 DWORD PTR _dis$1$[ebp]
  0031d	ff 75 98	 push	 DWORD PTR _bp$1$[ebp]
  00320	ff 75 94	 push	 DWORD PTR _mana$1$[ebp]
  00323	ff 75 90	 push	 DWORD PTR _requireLevel$1$[ebp]
  00326	ff 75 8c	 push	 DWORD PTR _damage$1$[ebp]
  00329	ff 75 bc	 push	 DWORD PTR _number$1$[ebp]
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHHEE@Z ; CMagicDamage::Set

; 206  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);

  00332	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00335	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _RequireStatus$[ebp]
  0033b	50		 push	 eax
  0033c	ff 75 88	 push	 DWORD PTR _iKillCount$1$[ebp]
  0033f	ff 75 84	 push	 DWORD PTR _iSkillBrand$1$[ebp]
  00342	ff 75 80	 push	 DWORD PTR _iSkillUseType$1$[ebp]
  00345	ff 75 bc	 push	 DWORD PTR _number$1$[ebp]
  00348	e8 00 00 00 00	 call	 ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ; CMagicDamage::SetEx

; 207  : 			this->SetMasterLevelSkillInfo(number,nSkillRank,nSkillGroup,nRequireMLPoint,nHP,nSD,wKeepTime,nRequireStr,nRequireDex);

  0034d	0f bf c6	 movsx	 eax, si
  00350	50		 push	 eax
  00351	0f bf c7	 movsx	 eax, di
  00354	50		 push	 eax
  00355	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _nSD$1$[ebp]
  0035b	98		 cwde
  0035c	53		 push	 ebx
  0035d	50		 push	 eax
  0035e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _nHP$1$[ebp]
  00364	98		 cwde
  00365	50		 push	 eax
  00366	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _nRequireMLPoint$1$[ebp]
  0036c	98		 cwde
  0036d	50		 push	 eax
  0036e	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _nSkillGroup$1$[ebp]
  00374	98		 cwde
  00375	50		 push	 eax
  00376	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _nSkillRank$1$[ebp]
  0037c	98		 cwde
  0037d	50		 push	 eax
  0037e	8b 5d bc	 mov	 ebx, DWORD PTR _number$1$[ebp]
  00381	8b 4d b8	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00384	53		 push	 ebx
  00385	e8 00 00 00 00	 call	 ?SetMasterLevelSkillInfo@CMagicDamage@@AAEXHHHHHHGHH@Z ; CMagicDamage::SetMasterLevelSkillInfo

; 208  : 			DefMagicInf[number].Set(number, 0);

  0038a	6a 00		 push	 0
  0038c	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  0038f	53		 push	 ebx
  00390	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?DefMagicInf@@3PAVCMagicInf@@A[eax*8]
  00397	e8 00 00 00 00	 call	 ?Set@CMagicInf@@QAEHHE@Z ; CMagicInf::Set
$LN6@LogSkillLi:

; 80   : 
; 81   : 		if ( Token == 2 )

  0039c	e8 00 00 00 00	 call	 ?GetToken@@YA?AW4SMDToken@@XZ ; GetToken
  003a1	83 f8 02	 cmp	 eax, 2
  003a4	0f 85 e6 fc ff
	ff		 jne	 $LL2@LogSkillLi
  003aa	8b 9d 68 ff ff
	ff		 mov	 ebx, DWORD PTR _filename$GSCopy$1$[ebp]
  003b0	5f		 pop	 edi
  003b1	5e		 pop	 esi
$LN10@LogSkillLi:

; 209  : 		}
; 210  : 	}
; 211  : 
; 212  : 	fclose(SMDFile);

  003b2	ff 35 00 00 00
	00		 push	 DWORD PTR ?SMDFile@@3PAU_iobuf@@A
  003b8	e8 00 00 00 00	 call	 _fclose
  003bd	83 c4 04	 add	 esp, 4

; 213  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), filename);

  003c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  003c5	53		 push	 ebx
  003c6	68 c8 01 00 00	 push	 456			; 000001c8H
  003cb	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  003d0	50		 push	 eax
  003d1	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 214  : }

  003d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003da	83 c4 08	 add	 esp, 8
  003dd	33 cd		 xor	 ecx, ebp
  003df	5b		 pop	 ebx
  003e0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003e5	8b e5		 mov	 esp, ebp
  003e7	5d		 pop	 ebp
  003e8	c2 04 00	 ret	 4
?LogSkillList@CMagicDamage@@QAEXPAD@Z ENDP		; CMagicDamage::LogSkillList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?LogSkillList@CMagicDamage@@QAEXPADH@Z
_TEXT	SEGMENT
_Buffer$ = 8						; size = 4
_iSize$ = 12						; size = 4
?LogSkillList@CMagicDamage@@QAEXPADH@Z PROC		; CMagicDamage::LogSkillList, COMDAT
; _this$ = ecx

; 259  : 	/*
; 260  : 	this->Init();
; 261  : 	CWzMemScript WzMemScript;
; 262  : 
; 263  : 	WzMemScript.SetBuffer(Buffer, iSize);
; 264  : 
; 265  : 	int Token;
; 266  : 	int n=0;
; 267  : 	int number;
; 268  : 	char name[50];
; 269  : 	int requireLevel;
; 270  : 	int damage;
; 271  : 	int mana;
; 272  : 	int bp=0;
; 273  : 	int dis;
; 274  : 	int rEnergy;
; 275  : 	int iSkillType;
; 276  : 	int rLeadership;
; 277  : 	int rDelay;
; 278  : 	int attr;
; 279  : 	int iSkillUseType;
; 280  : 	int iSkillBrand;
; 281  : 	int iKillCount;
; 282  : 	int RequireStatus[MAX_REQ_SKILL_STATUS] = {0};
; 283  : 	BYTE RequireClass[MAX_TYPE_PLAYER];
; 284  : 
; 285  : 	short m_Unk1;
; 286  : 	short m_Unk2;
; 287  : 	short m_Unk3;
; 288  : 	short m_Unk4;
; 289  : 	short m_Unk5;
; 290  : 	WORD m_Unk6;
; 291  : 	short m_Unk7;
; 292  : 	short m_Unk8;
; 293  : 	BYTE m_Unk9;
; 294  : 	int m_Unk10;
; 295  : 
; 296  : 	while ( true )
; 297  : 	{
; 298  : 		Token = WzMemScript.GetToken();
; 299  : 
; 300  : 		if ( Token == 2 )
; 301  : 		{
; 302  : 			break;
; 303  : 		}
; 304  : 
; 305  : 		if ( Token == 1 )
; 306  : 		{
; 307  : 			number = WzMemScript.GetNumber();
; 308  : 
; 309  : 			Token = WzMemScript.GetToken();
; 310  : 			strcpy(name, WzMemScript.GetString() );
; 311  : 
; 312  : 			Token = WzMemScript.GetToken();
; 313  : 			requireLevel = WzMemScript.GetNumber();
; 314  : 
; 315  : 			Token = WzMemScript.GetToken();
; 316  : 			damage = WzMemScript.GetNumber();
; 317  : 
; 318  : 			Token = WzMemScript.GetToken();
; 319  : 			mana = WzMemScript.GetNumber();
; 320  : 
; 321  : 			Token = WzMemScript.GetToken();
; 322  : 			bp = WzMemScript.GetNumber();	// Agility Gauge
; 323  : 
; 324  : 			Token = WzMemScript.GetToken();
; 325  : 			dis = WzMemScript.GetNumber();
; 326  : 
; 327  : 			Token = WzMemScript.GetToken();
; 328  : 			rDelay = WzMemScript.GetNumber();
; 329  : 
; 330  : 			Token = WzMemScript.GetToken();
; 331  : 			rEnergy = WzMemScript.GetNumber();
; 332  : 
; 333  : 			Token = WzMemScript.GetToken();
; 334  : 			rLeadership = WzMemScript.GetNumber();
; 335  : 
; 336  : 			Token = WzMemScript.GetToken();
; 337  : 			attr = WzMemScript.GetNumber();
; 338  : 
; 339  : 			Token = WzMemScript.GetToken();
; 340  : 			iSkillType = WzMemScript.GetNumber();
; 341  : 
; 342  : 			Token = WzMemScript.GetToken();
; 343  : 			iSkillUseType = WzMemScript.GetNumber();
; 344  : 
; 345  : 			Token = WzMemScript.GetToken();
; 346  : 			iSkillBrand = WzMemScript.GetNumber();
; 347  : 
; 348  : 			Token = WzMemScript.GetToken();
; 349  : 			iKillCount = WzMemScript.GetNumber();
; 350  : 
; 351  : 			Token = WzMemScript.GetToken();
; 352  : 			RequireStatus[0] = WzMemScript.GetNumber();
; 353  : 
; 354  : 			Token = WzMemScript.GetToken();
; 355  : 			RequireStatus[1] = WzMemScript.GetNumber();
; 356  : 
; 357  : 			Token = WzMemScript.GetToken();
; 358  : 			RequireStatus[2] = WzMemScript.GetNumber();
; 359  : 
; 360  : 			Token = WzMemScript.GetToken();
; 361  : 			RequireClass[0] = WzMemScript.GetNumber();
; 362  : 
; 363  : 			Token = WzMemScript.GetToken();
; 364  : 			RequireClass[1] = WzMemScript.GetNumber();
; 365  : 
; 366  : 			Token = WzMemScript.GetToken();
; 367  : 			RequireClass[2] = WzMemScript.GetNumber();
; 368  : 
; 369  : 			Token = WzMemScript.GetToken();
; 370  : 			RequireClass[3] = WzMemScript.GetNumber();
; 371  : 
; 372  : 			Token = WzMemScript.GetToken();
; 373  : 			RequireClass[4] = WzMemScript.GetNumber();
; 374  : 
; 375  : 			Token = WzMemScript.GetToken();
; 376  : 			m_Unk1 = WzMemScript.GetNumber();
; 377  : 
; 378  : 			Token = WzMemScript.GetToken();
; 379  : 			m_Unk2 = WzMemScript.GetNumber();
; 380  : 
; 381  : 			Token = WzMemScript.GetToken();
; 382  : 			m_Unk3 = WzMemScript.GetNumber();
; 383  : 
; 384  : 			Token = WzMemScript.GetToken();
; 385  : 			m_Unk4 = WzMemScript.GetNumber();
; 386  : 
; 387  : 			Token = WzMemScript.GetToken();
; 388  : 			m_Unk5 = WzMemScript.GetNumber();
; 389  : 
; 390  : 			Token = WzMemScript.GetToken();
; 391  : 			m_Unk6 = WzMemScript.GetNumber();
; 392  : 
; 393  : 			Token = WzMemScript.GetToken();
; 394  : 			m_Unk7 = WzMemScript.GetNumber();
; 395  : 
; 396  : 			Token = WzMemScript.GetToken();
; 397  : 			m_Unk8 = WzMemScript.GetNumber();
; 398  : 
; 399  : 			Token = WzMemScript.GetToken();
; 400  : 			m_Unk9 = WzMemScript.GetNumber();
; 401  : 
; 402  : 			Token = WzMemScript.GetToken();
; 403  : 			m_Unk10 = WzMemScript.GetNumber();
; 404  : 
; 405  : 
; 406  : 			this->Set(name, number,damage, requireLevel, mana, bp, dis, attr, iSkillType, RequireClass, rEnergy, rLeadership, rDelay);
; 407  : 			this->SetEx(number, iSkillUseType, iSkillBrand, iKillCount, RequireStatus);
; 408  : 			DefMagicInf[number].Set(number, 0);
; 409  : 		}
; 410  : 	}
; 411  : 
; 412  : 	LogAdd(lMsg.Get(MSGGET(1, 200)), "Skill");*/
; 413  : }

  00000	c2 08 00	 ret	 8
?LogSkillList@CMagicDamage@@QAEXPADH@Z ENDP		; CMagicDamage::LogSkillList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?Init@CMagicDamage@@QAEXXZ
_TEXT	SEGMENT
?Init@CMagicDamage@@QAEXXZ PROC				; CMagicDamage::Init, COMDAT
; _this$ = ecx

; 24   : {

  00000	57		 push	 edi

; 25   : 	for ( int n=0; n< MAX_SKILL;n++)

  00001	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]

; 26   : 	{
; 27   : 		this->m_Damage[n] = -1;

  00004	83 c8 ff	 or	 eax, -1
  00007	b9 8a 02 00 00	 mov	 ecx, 650		; 0000028aH
  0000c	f3 ab		 rep stosd
  0000e	5f		 pop	 edi

; 28   : 	}
; 29   : }

  0000f	c3		 ret	 0
?Init@CMagicDamage@@QAEXXZ ENDP				; CMagicDamage::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ??1CMagicDamage@@UAE@XZ
_TEXT	SEGMENT
??1CMagicDamage@@UAE@XZ PROC				; CMagicDamage::~CMagicDamage, COMDAT
; _this$ = ecx

; 19   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicDamage@@6B@

; 20   : 	return;
; 21   : }

  00006	c3		 ret	 0
??1CMagicDamage@@UAE@XZ ENDP				; CMagicDamage::~CMagicDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ??0CMagicDamage@@QAE@XZ
_TEXT	SEGMENT
??0CMagicDamage@@QAE@XZ PROC				; CMagicDamage::CMagicDamage, COMDAT
; _this$ = ecx

; 13   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMagicDamage@@6B@

; 14   : 	return;
; 15   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CMagicDamage@@QAE@XZ ENDP				; CMagicDamage::CMagicDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?CheckSkillAttr@CMagicDamage@@AAEHHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
_attr$ = 12						; size = 4
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z PROC		; CMagicDamage::CheckSkillAttr, COMDAT
; _this$ = ecx

; 783  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 784  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000b	77 0b		 ja	 SHORT $LN3@CheckSkill

; 787  : 	}
; 788  : 
; 789  : 	return this->m_Attr[skill];

  0000d	8b 84 81 c4 d2
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+53956]

; 790  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
$LN3@CheckSkill:

; 785  : 	{
; 786  : 		return FALSE;

  00018	33 c0		 xor	 eax, eax

; 790  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?CheckSkillAttr@CMagicDamage@@AAEHHH@Z ENDP		; CMagicDamage::CheckSkillAttr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHHEE@Z
_TEXT	SEGMENT
_name$ = 8						; size = 4
_skill$ = 12						; size = 4
_damage$ = 16						; size = 4
_rlevel$ = 20						; size = 4
_mana$ = 24						; size = 4
_bp$ = 28						; size = 4
_dis$ = 32						; size = 4
_Attr$ = 36						; size = 4
_iSkillType$ = 40					; size = 4
_ReqClass$ = 44						; size = 4
_rEnergy$ = 48						; size = 4
_rLeadership$ = 52					; size = 4
_rdelay$ = 56						; size = 4
_byItemSkill$ = 60					; size = 1
_byIsDamage$ = 64					; size = 1
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHHEE@Z PROC	; CMagicDamage::Set, COMDAT
; _this$ = ecx

; 500  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 501  : 	if ( skill <0 || skill > MAX_SKILL -1 )

  00004	8b 75 0c	 mov	 esi, DWORD PTR _skill$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	81 fe 89 02 00
	00		 cmp	 esi, 649		; 00000289H
  00010	0f 87 92 01 00
	00		 ja	 $LN5@Set

; 504  : 		return;
; 505  : 	}
; 506  : 
; 507  : 	if ( this->m_Damage[skill] != -1 )

  00016	83 7c b7 04 ff	 cmp	 DWORD PTR [edi+esi*4+4], -1
  0001b	74 14		 je	 SHORT $LN6@Set

; 508  : 	{
; 509  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  0001d	68 fd 01 00 00	 push	 509			; 000001fdH
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00027	68 32 02 00 00	 push	 562			; 00000232H

; 510  : 		return;

  0002c	e9 86 01 00 00	 jmp	 $LN20@Set
$LN6@Set:

; 511  : 	}
; 512  : 
; 513  : 	strcpy_s(this->m_Name[skill], sizeof(this->m_Name[skill]), name);

  00031	6b c6 32	 imul	 eax, esi, 50
  00034	53		 push	 ebx
  00035	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00038	6a 32		 push	 50			; 00000032H
  0003a	05 2c 0a 00 00	 add	 eax, 2604		; 00000a2cH
  0003f	03 c7		 add	 eax, edi
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _strcpy_s

; 514  : 	this->m_Damage[skill] = damage;

  00047	8b 45 10	 mov	 eax, DWORD PTR _damage$[ebp]

; 515  : 	this->m_rLevel[skill] = rlevel;
; 516  : 	this->m_Mana[skill] = mana;
; 517  : 	this->m_Distance[skill] = dis;
; 518  : 	this->m_RequireLeadership[skill] = rLeadership;
; 519  : 	this->m_Delay[skill] = rdelay;
; 520  : 	this->m_BrainPower[skill] = bp;
; 521  : 	this->m_Attr[skill] = Attr;
; 522  : 	this->m_iSkillType[skill] = iSkillType;
; 523  : 	memcpy(m_RequireClass[skill], ReqClass, MAX_TYPE_PLAYER);

  0004a	8d 14 f5 00 00
	00 00		 lea	 edx, DWORD PTR [esi*8]
  00051	8b 5d 14	 mov	 ebx, DWORD PTR _rlevel$[ebp]
  00054	2b d6		 sub	 edx, esi
  00056	8b 4d 2c	 mov	 ecx, DWORD PTR _ReqClass$[ebp]
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	89 44 b7 04	 mov	 DWORD PTR [edi+esi*4+4], eax
  00060	66 8b 45 18	 mov	 ax, WORD PTR _mana$[ebp]
  00064	88 9c 3e 20 89
	00 00		 mov	 BYTE PTR [esi+edi+35104], bl

; 524  : 
; 525  : 	int ReqEnergy = (rEnergy * rlevel * 4);

  0006b	0f af 5d 30	 imul	 ebx, DWORD PTR _rEnergy$[ebp]
  0006f	66 89 84 77 aa
	8b 00 00	 mov	 WORD PTR [edi+esi*2+35754], ax
  00077	8a 45 20	 mov	 al, BYTE PTR _dis$[ebp]
  0007a	88 84 3e be 90
	00 00		 mov	 BYTE PTR [esi+edi+37054], al
  00081	8b 45 34	 mov	 eax, DWORD PTR _rLeadership$[ebp]
  00084	89 84 b7 60 b9
	00 00		 mov	 DWORD PTR [edi+esi*4+47456], eax
  0008b	8b 45 38	 mov	 eax, DWORD PTR _rdelay$[ebp]
  0008e	89 84 b7 88 c3
	00 00		 mov	 DWORD PTR [edi+esi*4+50056], eax
  00095	66 8b 45 1c	 mov	 ax, WORD PTR _bp$[ebp]
  00099	66 89 84 77 b0
	cd 00 00	 mov	 WORD PTR [edi+esi*2+52656], ax
  000a1	8b 45 24	 mov	 eax, DWORD PTR _Attr$[ebp]
  000a4	89 84 b7 c4 d2
	00 00		 mov	 DWORD PTR [edi+esi*4+53956], eax
  000ab	8b 45 28	 mov	 eax, DWORD PTR _iSkillType$[ebp]
  000ae	89 84 b7 ec dc
	00 00		 mov	 DWORD PTR [edi+esi*4+56556], eax
  000b5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b7	89 84 3a 70 9d
	00 00		 mov	 DWORD PTR [edx+edi+40304], eax
  000be	0f b7 41 04	 movzx	 eax, WORD PTR [ecx+4]
  000c2	66 89 84 3a 74
	9d 00 00	 mov	 WORD PTR [edx+edi+40308], ax
  000ca	0f b6 41 06	 movzx	 eax, BYTE PTR [ecx+6]
  000ce	c1 e3 02	 shl	 ebx, 2
  000d1	88 84 3a 76 9d
	00 00		 mov	 BYTE PTR [edx+edi+40310], al

; 526  : 
; 527  : 	if( ReqEnergy > 0 )

  000d8	85 db		 test	 ebx, ebx
  000da	7e 13		 jle	 SHORT $LN7@Set

; 528  : 	{
; 529  : 		ReqEnergy = ReqEnergy / 100;

  000dc	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000e1	f7 eb		 imul	 ebx
  000e3	c1 fa 05	 sar	 edx, 5
  000e6	8b c2		 mov	 eax, edx
  000e8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000eb	03 c2		 add	 eax, edx

; 530  : 	}
; 531  : 	else

  000ed	eb 02		 jmp	 SHORT $LN8@Set
$LN7@Set:

; 532  : 	{
; 533  : 		ReqEnergy = 0;

  000ef	33 c0		 xor	 eax, eax
$LN8@Set:

; 534  : 	}
; 535  : 
; 536  : 	// Set Level Requirements for Skills
; 537  : 	this->m_RequireLevel[skill] = 0;	// Required Level to use the skill

  000f1	c7 84 b7 38 af
	00 00 00 00 00
	00		 mov	 DWORD PTR [edi+esi*4+44856], 0
  000fc	5b		 pop	 ebx

; 538  : 
; 539  : 
; 540  : 		/*if ( skill == 41 )	// Twisting Slash
; 541  : 		{
; 542  : 			this->m_RequireLevel[skill] = 80;
; 543  : 		}
; 544  : 		else if ( skill == 42 )	// Rageful Blow
; 545  : 		{
; 546  : 			this->m_RequireLevel[skill] = 170;
; 547  : 		}
; 548  : 		else if ( skill == 43 )	// Death Stab
; 549  : 		{
; 550  : 			this->m_RequireLevel[skill] = 160;
; 551  : 		}
; 552  : 		else if ( skill == 47 )	// Impale
; 553  : 		{
; 554  : 			this->m_RequireLevel[skill] = 28;
; 555  : 		}
; 556  : 		else if ( skill == 48 )	// Inner Strength
; 557  : 		{
; 558  : 			this->m_RequireLevel[skill] = 120;
; 559  : 		}
; 560  : 		else if ( skill == 52 )	
; 561  : 		{
; 562  : 			this->m_RequireLevel[skill] = 130;
; 563  : 		}*/
; 564  : 
; 565  : 	if( ReqEnergy > 0 )

  000fd	85 c0		 test	 eax, eax
  000ff	7e 10		 jle	 SHORT $LN9@Set

; 566  : 	{
; 567  : 		this->m_RequireEnergy[skill] =  ReqEnergy+20;

  00101	83 c0 14	 add	 eax, 20			; 00000014H
  00104	89 84 b7 48 93
	00 00		 mov	 DWORD PTR [edi+esi*4+37704], eax
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  0010d	5d		 pop	 ebp
  0010e	c2 3c 00	 ret	 60			; 0000003cH
$LN9@Set:

; 568  : 	}
; 569  : 	else
; 570  : 	{
; 571  : 		switch( skill )

  00111	8d 46 e2	 lea	 eax, DWORD PTR [esi-30]
  00114	83 f8 06	 cmp	 eax, 6
  00117	77 7e		 ja	 SHORT $LN18@Set
  00119	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@Set[eax*4]
$LN11@Set:

; 572  : 		{
; 573  : 		case 30:
; 574  : 			this->m_RequireEnergy[skill] = 30;

  00120	c7 84 b7 48 93
	00 00 1e 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 30 ; 0000001eH
  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  0012d	5d		 pop	 ebp
  0012e	c2 3c 00	 ret	 60			; 0000003cH
$LN12@Set:

; 575  : 			break;
; 576  : 		case 31:
; 577  : 			this->m_RequireEnergy[skill] = 60;

  00131	c7 84 b7 48 93
	00 00 3c 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 60 ; 0000003cH
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  0013e	5d		 pop	 ebp
  0013f	c2 3c 00	 ret	 60			; 0000003cH
$LN13@Set:

; 578  : 			break;
; 579  : 		case 32:
; 580  : 			this->m_RequireEnergy[skill] = 90;

  00142	c7 84 b7 48 93
	00 00 5a 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 90 ; 0000005aH
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  0014f	5d		 pop	 ebp
  00150	c2 3c 00	 ret	 60			; 0000003cH
$LN14@Set:

; 581  : 			break;
; 582  : 		case 33:
; 583  : 			this->m_RequireEnergy[skill] = 130;

  00153	c7 84 b7 48 93
	00 00 82 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 130 ; 00000082H
  0015e	5f		 pop	 edi
  0015f	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  00160	5d		 pop	 ebp
  00161	c2 3c 00	 ret	 60			; 0000003cH
$LN15@Set:

; 584  : 			break;
; 585  : 		case 34:
; 586  : 			this->m_RequireEnergy[skill] = 170;

  00164	c7 84 b7 48 93
	00 00 aa 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 170 ; 000000aaH
  0016f	5f		 pop	 edi
  00170	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  00171	5d		 pop	 ebp
  00172	c2 3c 00	 ret	 60			; 0000003cH
$LN16@Set:

; 587  : 			break;
; 588  : 		case 35:
; 589  : 			this->m_RequireEnergy[skill] = 210;

  00175	c7 84 b7 48 93
	00 00 d2 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 210 ; 000000d2H
  00180	5f		 pop	 edi
  00181	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  00182	5d		 pop	 ebp
  00183	c2 3c 00	 ret	 60			; 0000003cH
$LN17@Set:

; 590  : 			break;
; 591  : 		case 36:
; 592  : 			this->m_RequireEnergy[skill] = 300;

  00186	c7 84 b7 48 93
	00 00 2c 01 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 300 ; 0000012cH
  00191	5f		 pop	 edi
  00192	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  00193	5d		 pop	 ebp
  00194	c2 3c 00	 ret	 60			; 0000003cH
$LN18@Set:

; 593  : 			break;
; 594  : 		default:
; 595  : 			this->m_RequireEnergy[skill] = 0;

  00197	c7 84 b7 48 93
	00 00 00 00 00
	00		 mov	 DWORD PTR [edi+esi*4+37704], 0
  001a2	5f		 pop	 edi
  001a3	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  001a4	5d		 pop	 ebp
  001a5	c2 3c 00	 ret	 60			; 0000003cH
$LN5@Set:

; 502  : 	{
; 503  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  001a8	68 f7 01 00 00	 push	 503			; 000001f7H
  001ad	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  001b2	68 c9 01 00 00	 push	 457			; 000001c9H
$LN20@Set:
  001b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001bc	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001c1	50		 push	 eax
  001c2	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  001c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ca	5f		 pop	 edi
  001cb	5e		 pop	 esi

; 596  : 			break;
; 597  : 		}
; 598  : 	}
; 599  : }

  001cc	5d		 pop	 ebp
  001cd	c2 3c 00	 ret	 60			; 0000003cH
$LN22@Set:
  001d0	00 00 00 00	 DD	 $LN11@Set
  001d4	00 00 00 00	 DD	 $LN12@Set
  001d8	00 00 00 00	 DD	 $LN13@Set
  001dc	00 00 00 00	 DD	 $LN14@Set
  001e0	00 00 00 00	 DD	 $LN15@Set
  001e4	00 00 00 00	 DD	 $LN16@Set
  001e8	00 00 00 00	 DD	 $LN17@Set
?Set@CMagicDamage@@AAEXPADHHHHHHHHPAEHHHEE@Z ENDP	; CMagicDamage::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SetEx@CMagicDamage@@AAEXHHHHPAH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iSkillUseType$ = 12					; size = 4
_iSkillBrand$ = 16					; size = 4
_iKillCount$ = 20					; size = 4
_pReqStatus$ = 24					; size = 4
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z PROC			; CMagicDamage::SetEx, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00006	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0000c	77 5a		 ja	 SHORT $LN3@SetEx

; 484  : 		return;
; 485  : 	}
; 486  : 
; 487  : 	if ( this->m_Damage[iSkill] == -1 )

  0000e	83 7c 91 04 ff	 cmp	 DWORD PTR [ecx+edx*4+4], -1
  00013	75 11		 jne	 SHORT $LN4@SetEx

; 488  : 	{
; 489  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  00015	68 e9 01 00 00	 push	 489			; 000001e9H
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001f	68 32 02 00 00	 push	 562			; 00000232H

; 490  : 		return;

  00024	eb 51		 jmp	 SHORT $LN6@SetEx
$LN4@SetEx:

; 491  : 	}
; 492  : 
; 493  : 	this->m_iSkillUseType[iSkill] = iSkillUseType;

  00026	8b 45 0c	 mov	 eax, DWORD PTR _iSkillUseType$[ebp]
  00029	89 84 91 14 e7
	00 00		 mov	 DWORD PTR [ecx+edx*4+59156], eax

; 494  : 	this->m_wSkillBrand[iSkill] = iSkillBrand;

  00030	66 8b 45 10	 mov	 ax, WORD PTR _iSkillBrand$[ebp]
  00034	66 89 84 51 3c
	f1 00 00	 mov	 WORD PTR [ecx+edx*2+61756], ax

; 495  : 	this->m_iKillCount[iSkill] = iKillCount;

  0003c	8b 45 14	 mov	 eax, DWORD PTR _iKillCount$[ebp]
  0003f	89 84 91 50 f6
	00 00		 mov	 DWORD PTR [ecx+edx*4+63056], eax

; 496  : 	memcpy(this->m_iRequireStatus[iSkill], pReqStatus, sizeof(this->m_iRequireStatus[0]));

  00046	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  00049	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  0004c	8b 45 18	 mov	 eax, DWORD PTR _pReqStatus$[ebp]
  0004f	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00053	66 0f d6 81 78
	00 01 00	 movq	 QWORD PTR [ecx+65656], xmm0
  0005b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0005e	89 81 80 00 01
	00		 mov	 DWORD PTR [ecx+65664], eax

; 497  : }

  00064	5d		 pop	 ebp
  00065	c2 14 00	 ret	 20			; 00000014H
$LN3@SetEx:

; 482  : 	{
; 483  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  00068	68 e3 01 00 00	 push	 483			; 000001e3H
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00072	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SetEx:
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0007c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH

; 497  : }

  0008a	5d		 pop	 ebp
  0008b	c2 14 00	 ret	 20			; 00000014H
?SetEx@CMagicDamage@@AAEXHHHHPAH@Z ENDP			; CMagicDamage::SetEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?SetMasterLevelSkillInfo@CMagicDamage@@AAEXHHHHHHGHH@Z
_TEXT	SEGMENT
_iSkill$ = 8						; size = 4
_iSkillRank$ = 12					; size = 4
_iSkillGroup$ = 16					; size = 4
_iRequireMLPoint$ = 20					; size = 4
_iHP$ = 24						; size = 4
_iSD$ = 28						; size = 4
_wKeepTime$ = 32					; size = 2
_iRequireStr$ = 36					; size = 4
_iRequireDex$ = 40					; size = 4
?SetMasterLevelSkillInfo@CMagicDamage@@AAEXHHHHHHGHH@Z PROC ; CMagicDamage::SetMasterLevelSkillInfo, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 457  : 	if ( iSkill <0 || iSkill > MAX_SKILL -1 )

  00003	8b 55 08	 mov	 edx, DWORD PTR _iSkill$[ebp]
  00006	81 fa 89 02 00
	00		 cmp	 edx, 649		; 00000289H
  0000c	77 7c		 ja	 SHORT $LN3@SetMasterL

; 460  : 		return;
; 461  : 	}
; 462  : 
; 463  : 	if ( this->m_Damage[iSkill] == -1 )

  0000e	83 7c 91 04 ff	 cmp	 DWORD PTR [ecx+edx*4+4], -1
  00013	75 11		 jne	 SHORT $LN4@SetMasterL

; 464  : 	{
; 465  : 		MsgBox(lMsg.Get(MSGGET(2, 50)), __FILE__, __LINE__);

  00015	68 d1 01 00 00	 push	 465			; 000001d1H
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  0001f	68 32 02 00 00	 push	 562			; 00000232H

; 466  : 		return;

  00024	eb 73		 jmp	 SHORT $LN6@SetMasterL
$LN4@SetMasterL:

; 467  : 	}
; 468  : 
; 469  : 	m_wML_Rank[iSkill] = iSkillRank;

  00026	66 8b 45 0c	 mov	 ax, WORD PTR _iSkillRank$[ebp]
  0002a	66 89 84 51 04
	24 01 00	 mov	 WORD PTR [ecx+edx*2+74756], ax

; 470  : 	m_wML_SkillGroup[iSkill] = iSkillGroup;

  00032	66 8b 45 10	 mov	 ax, WORD PTR _iSkillGroup$[ebp]
  00036	66 89 84 51 18
	29 01 00	 mov	 WORD PTR [ecx+edx*2+76056], ax

; 471  : 	m_wML_RequirePoint[iSkill]= iRequireMLPoint;

  0003e	66 8b 45 14	 mov	 ax, WORD PTR _iRequireMLPoint$[ebp]
  00042	66 89 84 51 2c
	2e 01 00	 mov	 WORD PTR [ecx+edx*2+77356], ax

; 472  : 	m_wML_HP[iSkill] = iHP;

  0004a	66 8b 45 18	 mov	 ax, WORD PTR _iHP$[ebp]
  0004e	66 89 84 51 40
	33 01 00	 mov	 WORD PTR [ecx+edx*2+78656], ax

; 473  : 	m_wML_SD[iSkill] = iSD;

  00056	66 8b 45 1c	 mov	 ax, WORD PTR _iSD$[ebp]
  0005a	66 89 84 51 54
	38 01 00	 mov	 WORD PTR [ecx+edx*2+79956], ax

; 474  : 	m_wML_KeepTime[iSkill] = wKeepTime;

  00062	66 8b 45 20	 mov	 ax, WORD PTR _wKeepTime$[ebp]
  00066	66 89 84 51 68
	3d 01 00	 mov	 WORD PTR [ecx+edx*2+81256], ax

; 475  : 	m_wML_RequireStr[iSkill] = iRequireStr;

  0006e	66 8b 45 24	 mov	 ax, WORD PTR _iRequireStr$[ebp]
  00072	66 89 84 51 7c
	42 01 00	 mov	 WORD PTR [ecx+edx*2+82556], ax

; 476  : 	m_wML_RequireDex[iSkill] = iRequireDex;

  0007a	66 8b 45 28	 mov	 ax, WORD PTR _iRequireDex$[ebp]
  0007e	66 89 84 51 90
	47 01 00	 mov	 WORD PTR [ecx+edx*2+83856], ax

; 477  : }

  00086	5d		 pop	 ebp
  00087	c2 24 00	 ret	 36			; 00000024H
$LN3@SetMasterL:

; 458  : 	{
; 459  : 		MsgBox(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0008a	68 cb 01 00 00	 push	 459			; 000001cbH
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00094	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@SetMasterL:
  00099	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0009e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 477  : }

  000ac	5d		 pop	 ebp
  000ad	c2 24 00	 ret	 36			; 00000024H
?SetMasterLevelSkillInfo@CMagicDamage@@AAEXHHHHHHGHH@Z ENDP ; CMagicDamage::SetMasterLevelSkillInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?Get@CMagicDamage@@AAEHH@Z
_TEXT	SEGMENT
_skill$ = 8						; size = 4
?Get@CMagicDamage@@AAEHH@Z PROC				; CMagicDamage::Get, COMDAT
; _this$ = ecx

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 606  : 	if ( skill < 0 || skill > MAX_SKILL-1 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _skill$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3d 89 02 00 00	 cmp	 eax, 649		; 00000289H
  0000e	77 1a		 ja	 SHORT $LN3@Get

; 610  : 	}
; 611  : 
; 612  : 	if ( this->m_Damage[skill] == -1 )

  00010	8b 44 86 04	 mov	 eax, DWORD PTR [esi+eax*4+4]
  00014	83 f8 ff	 cmp	 eax, -1
  00017	75 37		 jne	 SHORT $LN1@Get

; 613  : 	{
; 614  : 		LogAdd(lMsg.Get(MSGGET(1, 202)), __FILE__, __LINE__);

  00019	68 66 02 00 00	 push	 614			; 00000266H
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00023	68 ca 01 00 00	 push	 458			; 000001caH

; 615  : 		return this->m_Damage[0];

  00028	eb 0f		 jmp	 SHORT $LN6@Get
$LN3@Get:

; 607  : 	{
; 608  : 		LogAdd(lMsg.Get(MSGGET(1, 201)), __FILE__, __LINE__);

  0002a	68 60 02 00 00	 push	 608			; 00000260H
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@CDFCCCPM@MagicDamage?4cpp?$AA@
  00034	68 c9 01 00 00	 push	 457			; 000001c9H
$LN6@Get:
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0003e	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAdd@@3P6AXPADZZA ; LogAdd

; 609  : 		return this->m_Damage[0];

  0004a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Get:
  00050	5e		 pop	 esi

; 616  : 	}
; 617  : 
; 618  : 	return this->m_Damage[skill];
; 619  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?Get@CMagicDamage@@AAEHH@Z ENDP				; CMagicDamage::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\magicdamage.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
