; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MoveCheck.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0CMoveCheck@@QAE@XZ				; CMoveCheck::CMoveCheck
PUBLIC	??1CMoveCheck@@UAE@XZ				; CMoveCheck::~CMoveCheck
PUBLIC	?Init@CMoveCheck@@QAEXXZ			; CMoveCheck::Init
PUBLIC	?Insert@CMoveCheck@@QAEHHH@Z			; CMoveCheck::Insert
PUBLIC	?Check@CMoveCheck@@QAEHXZ			; CMoveCheck::Check
PUBLIC	??_GCMoveCheck@@UAEPAXI@Z			; CMoveCheck::`scalar deleting destructor'
PUBLIC	??_7CMoveCheck@@6B@				; CMoveCheck::`vftable'
PUBLIC	??_R4CMoveCheck@@6B@				; CMoveCheck::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCheck@@@8				; CMoveCheck `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCheck@@8				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCheck@@8				; CMoveCheck::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCheck@@8			; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	??_ECMoveCheck@@UAEPAXI@Z:PROC			; CMoveCheck::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMoveCheck@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCheck@@8 DD FLAT:??_R0?AVCMoveCheck@@@8 ; CMoveCheck::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCheck@@8
rdata$r	SEGMENT
??_R2CMoveCheck@@8 DD FLAT:??_R1A@?0A@EA@CMoveCheck@@8	; CMoveCheck::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCheck@@8
rdata$r	SEGMENT
??_R3CMoveCheck@@8 DD 00H				; CMoveCheck::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCheck@@@8
data$r	SEGMENT
??_R0?AVCMoveCheck@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCheck `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCheck@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMoveCheck@@6B@
rdata$r	SEGMENT
??_R4CMoveCheck@@6B@ DD 00H				; CMoveCheck::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCheck@@@8
	DD	FLAT:??_R3CMoveCheck@@8
rdata$r	ENDS
;	COMDAT ??_7CMoveCheck@@6B@
CONST	SEGMENT
??_7CMoveCheck@@6B@ DD FLAT:??_R4CMoveCheck@@6B@	; CMoveCheck::`vftable'
	DD	FLAT:??_ECMoveCheck@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMoveCheck@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMoveCheck@@UAEPAXI@Z PROC				; CMoveCheck::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMoveCheck@@UAE@XZ	; CMoveCheck::~CMoveCheck
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 3c		 push	 60			; 0000003cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCMoveCheck@@UAEPAXI@Z ENDP				; CMoveCheck::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ?Check@CMoveCheck@@QAEHXZ
_TEXT	SEGMENT
?Check@CMoveCheck@@QAEHXZ PROC				; CMoveCheck::Check, COMDAT
; _this$ = ecx

; 62   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 63   : 	int x;
; 64   : 	int y;
; 65   : 
; 66   : 	for (y=0;y<5;y++)

  00005	33 f6		 xor	 esi, esi
$LL4@Check:

; 69   : 		{
; 70   : 			if ( this->m_PosX[y] != this->m_PosX[x] )

  00007	8b 7c b3 08	 mov	 edi, DWORD PTR [ebx+esi*4+8]
  0000b	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0000e	33 d2		 xor	 edx, edx
$LL7@Check:
  00010	3b 38		 cmp	 edi, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $LN21@Check

; 67   : 	{
; 68   : 		for (x=0;x<5;x++)

  00014	42		 inc	 edx
  00015	83 c0 04	 add	 eax, 4
  00018	83 fa 05	 cmp	 edx, 5
  0001b	7c f3		 jl	 SHORT $LL7@Check

; 63   : 	int x;
; 64   : 	int y;
; 65   : 
; 66   : 	for (y=0;y<5;y++)

  0001d	46		 inc	 esi
  0001e	83 fe 05	 cmp	 esi, 5
  00021	7c e4		 jl	 SHORT $LL4@Check

; 73   : 			}
; 74   : 		}
; 75   : 	}
; 76   : 
; 77   : 	for (y=0;y<5;y++)

  00023	33 d2		 xor	 edx, edx
$LL10@Check:

; 80   : 		{
; 81   : 			if ( this->m_PosY[y] != this->m_PosY[x] )

  00025	8b 74 93 1c	 mov	 esi, DWORD PTR [ebx+edx*4+28]
  00029	8d 43 1c	 lea	 eax, DWORD PTR [ebx+28]
  0002c	33 c9		 xor	 ecx, ecx
  0002e	66 90		 npad	 2
$LL13@Check:
  00030	3b 30		 cmp	 esi, DWORD PTR [eax]
  00032	75 18		 jne	 SHORT $LN21@Check

; 78   : 	{
; 79   : 		for (x=0;x<5;x++)

  00034	41		 inc	 ecx
  00035	83 c0 04	 add	 eax, 4
  00038	83 f9 05	 cmp	 ecx, 5
  0003b	7c f3		 jl	 SHORT $LL13@Check

; 73   : 			}
; 74   : 		}
; 75   : 	}
; 76   : 
; 77   : 	for (y=0;y<5;y++)

  0003d	42		 inc	 edx
  0003e	83 fa 05	 cmp	 edx, 5
  00041	7c e2		 jl	 SHORT $LL10@Check

; 82   : 			{
; 83   : 				return 0;
; 84   : 			}
; 85   : 		}
; 86   : 	}
; 87   : 	return 1;

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	b8 01 00 00 00	 mov	 eax, 1
  0004a	5b		 pop	 ebx

; 88   : }

  0004b	c3		 ret	 0
$LN21@Check:
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi

; 71   : 			{
; 72   : 				return 0;

  0004e	33 c0		 xor	 eax, eax
  00050	5b		 pop	 ebx

; 88   : }

  00051	c3		 ret	 0
?Check@CMoveCheck@@QAEHXZ ENDP				; CMoveCheck::Check
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ?Insert@CMoveCheck@@QAEHHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?Insert@CMoveCheck@@QAEHHH@Z PROC			; CMoveCheck::Insert, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 36   : 	if ( (this->m_TmpPosX != x) || (this->m_TmpPosY != y) )

  00008	8b 7d 08	 mov	 edi, DWORD PTR _x$[ebp]
  0000b	39 7e 34	 cmp	 DWORD PTR [esi+52], edi
  0000e	75 3e		 jne	 SHORT $LN3@Insert
  00010	8b 5d 0c	 mov	 ebx, DWORD PTR _y$[ebp]
  00013	39 5e 38	 cmp	 DWORD PTR [esi+56], ebx
  00016	75 36		 jne	 SHORT $LN3@Insert

; 40   : 	}
; 41   : 	
; 42   : 	this->m_TmpPosX=x;

  00018	89 7e 34	 mov	 DWORD PTR [esi+52], edi

; 43   : 	this->m_TmpPosY=y;

  0001b	89 5e 38	 mov	 DWORD PTR [esi+56], ebx

; 44   : 
; 45   : 	if ( (GetTickCount() - this->m_Time) < 1000)

  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00024	2b 46 04	 sub	 eax, DWORD PTR [esi+4]
  00027	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  0002c	73 09		 jae	 SHORT $LN4@Insert

; 46   : 	{
; 47   : 		this->m_Time=GetTickCount();

  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00034	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN4@Insert:

; 48   : 	}
; 49   : 
; 50   : 	this->m_PosX[this->m_PosCount]=x;

  00037	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0003a	89 7c 86 08	 mov	 DWORD PTR [esi+eax*4+8], edi

; 51   : 	this->m_PosY[this->m_PosCount]=y;

  0003e	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00041	89 5c 86 1c	 mov	 DWORD PTR [esi+eax*4+28], ebx

; 52   : 	this->m_PosCount++;

  00045	ff 46 30	 inc	 DWORD PTR [esi+48]

; 53   : 
; 54   : 	if (this->m_PosCount > 4)

  00048	83 7e 30 04	 cmp	 DWORD PTR [esi+48], 4
  0004c	7e 07		 jle	 SHORT $LN5@Insert
$LN3@Insert:

; 37   : 	{
; 38   : 		this->m_PosCount =0;

  0004e	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN5@Insert:
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi

; 39   : 		return 1;

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	5b		 pop	 ebx

; 55   : 	{
; 56   : 		this->m_PosCount = 0;
; 57   : 	}
; 58   : 	return 1;
; 59   : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?Insert@CMoveCheck@@QAEHHH@Z ENDP			; CMoveCheck::Insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ?Init@CMoveCheck@@QAEXXZ
_TEXT	SEGMENT
?Init@CMoveCheck@@QAEXXZ PROC				; CMoveCheck::Init, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20   : 	this->m_Time=GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 21   : 
; 22   : 	for (int n=0;n<5;n++)
; 23   : 	{
; 24   : 		this->m_PosX[n]=n;

  0000c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 25   : 		this->m_PosY[n]=n;

  00013	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0001a	c7 46 0c 01 00
	00 00		 mov	 DWORD PTR [esi+12], 1
  00021	c7 46 20 01 00
	00 00		 mov	 DWORD PTR [esi+32], 1
  00028	c7 46 10 02 00
	00 00		 mov	 DWORD PTR [esi+16], 2
  0002f	c7 46 24 02 00
	00 00		 mov	 DWORD PTR [esi+36], 2
  00036	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  0003d	c7 46 28 03 00
	00 00		 mov	 DWORD PTR [esi+40], 3
  00044	c7 46 18 04 00
	00 00		 mov	 DWORD PTR [esi+24], 4
  0004b	c7 46 2c 04 00
	00 00		 mov	 DWORD PTR [esi+44], 4

; 26   : 	}
; 27   : 
; 28   : 	this->m_PosCount=0;

  00052	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 29   : 	this->m_TmpPosX=0;

  00059	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 30   : 	this->m_TmpPosY=0;

  00060	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00067	5e		 pop	 esi

; 31   : }

  00068	c3		 ret	 0
?Init@CMoveCheck@@QAEXXZ ENDP				; CMoveCheck::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ??1CMoveCheck@@UAE@XZ
_TEXT	SEGMENT
??1CMoveCheck@@UAE@XZ PROC				; CMoveCheck::~CMoveCheck, COMDAT
; _this$ = ecx

; 14   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCheck@@6B@

; 15   : 	return;
; 16   : }

  00006	c3		 ret	 0
??1CMoveCheck@@UAE@XZ ENDP				; CMoveCheck::~CMoveCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ??0CMoveCheck@@QAE@XZ
_TEXT	SEGMENT
??0CMoveCheck@@QAE@XZ PROC				; CMoveCheck::CMoveCheck, COMDAT
; _this$ = ecx

; 9    : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCheck@@6B@

; 10   : 	return;
; 11   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0CMoveCheck@@QAE@XZ ENDP				; CMoveCheck::CMoveCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecheck.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
