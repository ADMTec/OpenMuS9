; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\MoveCommand.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?g_sttKALIMAGATE_LEVEL@@3PAU_KALIMAGATE_LEVEL@@A DD 028H ; g_sttKALIMAGATE_LEVEL
	DD	082H
	DD	014H
	DD	06eH
	DD	083H
	DD	0b4H
	DD	06fH
	DD	0a0H
	DD	0b5H
	DD	0e6H
	DD	0a1H
	DD	0d2H
	DD	0e7H
	DD	0118H
	DD	0d3H
	DD	0104H
	DD	0119H
	DD	014aH
	DD	0105H
	DD	0136H
	DD	014bH
	DD	015dH
	DD	0137H
	DD	015dH
	DD	015eH
	DD	0190H
	DD	015eH
	DD	0190H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	?FindIndex@CMoveCommand@@AAEHPAD@Z		; CMoveCommand::FindIndex
PUBLIC	?FindIndex@CMoveCommand@@AAEHH@Z		; CMoveCommand::FindIndex
PUBLIC	??0CMoveCommand@@QAE@XZ				; CMoveCommand::CMoveCommand
PUBLIC	??1CMoveCommand@@UAE@XZ				; CMoveCommand::~CMoveCommand
PUBLIC	?Init@CMoveCommand@@QAEXXZ			; CMoveCommand::Init
PUBLIC	?Load@CMoveCommand@@QAEHPAD@Z			; CMoveCommand::Load
PUBLIC	?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z		; CMoveCommand::LoadMoveLevel
PUBLIC	?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z		; CMoveCommand::GetMoveLevel
PUBLIC	?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::CheckMainToMove
PUBLIC	?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ; CMoveCommand::CheckEquipmentToMove
PUBLIC	?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::CheckInterfaceToMove
PUBLIC	?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z	; CMoveCommand::Move
PUBLIC	?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z	; CMoveCommand::Move
PUBLIC	?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ; CMoveCommand::MoveFree2Kalima
PUBLIC	?CheckMoveMapBound@CMoveCommand@@QAEHH@Z	; CMoveCommand::CheckMoveMapBound
PUBLIC	?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z ; CMoveCommand::GetMoveCommandData
PUBLIC	?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
PUBLIC	?allocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::allocate
PUBLIC	?push_back@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXABUMOVE_MOVE_LEVEL@@@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::push_back
PUBLIC	?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reserve
PUBLIC	??_GCMoveCommand@@UAEPAXI@Z			; CMoveCommand::`scalar deleting destructor'
PUBLIC	?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z	; GetKalimaGateLevel
PUBLIC	??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7CMoveCommand@@6B@				; CMoveCommand::`vftable'
PUBLIC	?gMoveCommand@@3VCMoveCommand@@A		; gMoveCommand
PUBLIC	??_C@_0BN@JDGONFBC@?$FLMoveList?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@ ; `string'
PUBLIC	??_C@_08GNJIAMHD@movelist?$AA@			; `string'
PUBLIC	??_C@_04HDMMNHEL@move?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_05IKCNOJAA@money?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_04NKCHGMLH@gate?$AA@			; `string'
PUBLIC	??_C@_0BO@FCPELHNC@?$FLMoveLevel?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@ ; `string'
PUBLIC	??_C@_09OPODEIFF@movelevel?$AA@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_02JMABBILH@x1?$AA@			; `string'
PUBLIC	??_C@_02JNMDHCIA@y1?$AA@			; `string'
PUBLIC	??_C@_02LHCMELHE@x2?$AA@			; `string'
PUBLIC	??_C@_02LGOOCBED@y2?$AA@			; `string'
PUBLIC	??_C@_0DH@IHNMAGGP@Only?5players?5with?5Seal?5effect?5ar@ ; `string'
PUBLIC	??_C@_0CL@EOBINLPM@1?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ ; `string'
PUBLIC	??_C@_0DP@PMJPGPAA@You?5have?5not?5joined?5the?5gens?5and@ ; `string'
PUBLIC	??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@ ; `string'
PUBLIC	??_C@_0CL@IHCMMAPB@2?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ ; `string'
PUBLIC	??_C@_0CL@MADPDGAK@3?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ ; `string'
PUBLIC	??_C@_0CL@MODFPAKK@4?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CMoveCommand@@6B@				; CMoveCommand::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMoveCommand@@@8			; CMoveCommand `RTTI Type Descriptor'
PUBLIC	??_R3CMoveCommand@@8				; CMoveCommand::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMoveCommand@@8				; CMoveCommand::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMoveCommand@@8			; CMoveCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__strcmpi:PROC
EXTRN	__imp__wsprintfA:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	?IsItem@CItem@@QAEHXZ:PROC			; CItem::IsItem
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	?GensMap@CGensSystem@@QAEHH@Z:PROC		; CGensSystem::GensMap
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?GCServerMsgStringSend@@YAXPADHE@Z:PROC		; GCServerMsgStringSend
EXTRN	?GCRecallMonLife@@YAXHHH@Z:PROC			; GCRecallMonLife
EXTRN	?GCMoneySend@@YAXHK@Z:PROC			; GCMoneySend
EXTRN	?gObjMoveGate@@YAHHH@Z:PROC			; gObjMoveGate
EXTRN	?gObjMonsterCallKill@@YAXH@Z:PROC		; gObjMonsterCallKill
EXTRN	?MsgOutput@@YAXHPADZZ:PROC			; MsgOutput
EXTRN	??_ECMoveCommand@@UAEPAXI@Z:PROC		; CMoveCommand::`vector deleting destructor'
EXTRN	?GetGate@CGate@@QAEHHAAE000AAF@Z:PROC		; CGate::GetGate
EXTRN	?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z:PROC ; CCashItemPeriodSystem::CheckMoveMapBoundItem
EXTRN	?DeleteUserData@CRaklionBattleUserMng@@QAEHH@Z:PROC ; CRaklionBattleUserMng::DeleteUserData
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?text@xml_node@pugi@@QBE?AVxml_text@2@XZ:PROC	; pugi::xml_node::text
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	?as_string@xml_text@pugi@@QBEPBDPBD@Z:PROC	; pugi::xml_text::as_string
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gGensSystem@@3VCGensSystem@@A:BYTE		; gGensSystem
EXTRN	?gGateC@@3VCGate@@A:BYTE			; gGateC
EXTRN	?g_bUseMoveMapBound@@3HA:DWORD			; g_bUseMoveMapBound
EXTRN	?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A:BYTE ; g_CashItemPeriodSystem
EXTRN	?g_RaklionBattleUserMng@@3VCRaklionBattleUserMng@@A:BYTE ; g_RaklionBattleUserMng
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?gMoveCommand@@3VCMoveCommand@@A DB 06730H DUP (?)	; gMoveCommand
_BSS	ENDS
CRT$XCU	SEGMENT
?gMoveCommand$initializer$@@3P6AXXZA DD FLAT:??__EgMoveCommand@@YAXXZ ; gMoveCommand$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@CMoveCommand@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMoveCommand@@8 DD FLAT:??_R0?AVCMoveCommand@@@8 ; CMoveCommand::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_R2CMoveCommand@@8
rdata$r	SEGMENT
??_R2CMoveCommand@@8 DD FLAT:??_R1A@?0A@EA@CMoveCommand@@8 ; CMoveCommand::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMoveCommand@@8
rdata$r	SEGMENT
??_R3CMoveCommand@@8 DD 00H				; CMoveCommand::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMoveCommand@@@8
data$r	SEGMENT
??_R0?AVCMoveCommand@@@8 DD FLAT:??_7type_info@@6B@	; CMoveCommand `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMoveCommand@@', 00H
data$r	ENDS
;	COMDAT ??_R4CMoveCommand@@6B@
rdata$r	SEGMENT
??_R4CMoveCommand@@6B@ DD 00H				; CMoveCommand::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMoveCommand@@@8
	DD	FLAT:??_R3CMoveCommand@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MODFPAKK@4?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@
CONST	SEGMENT
??_C@_0CL@MODFPAKK@4?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ DB '4'
	DB	'[%s][%s] Use [%s %s] Fail GateNumber = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MADPDGAK@3?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@
CONST	SEGMENT
??_C@_0CL@MADPDGAK@3?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ DB '3'
	DB	'[%s][%s] Use [%s %s] Fail GateNumber = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IHCMMAPB@2?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@
CONST	SEGMENT
??_C@_0CL@IHCMMAPB@2?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ DB '2'
	DB	'[%s][%s] Use [%s %s] Fail GateNumber = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
CONST	SEGMENT
??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@ DB '['
	DB	'%s][%s] Use [%s %s] Success : reduces money %d - %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@PMJPGPAA@You?5have?5not?5joined?5the?5gens?5and@
CONST	SEGMENT
??_C@_0DP@PMJPGPAA@You?5have?5not?5joined?5the?5gens?5and@ DB 'You have n'
	DB	'ot joined the gens and cannot enter the battle zone.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EOBINLPM@1?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@
CONST	SEGMENT
??_C@_0CL@EOBINLPM@1?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@ DB '1'
	DB	'[%s][%s] Use [%s %s] Fail GateNumber = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@IHNMAGGP@Only?5players?5with?5Seal?5effect?5ar@
CONST	SEGMENT
??_C@_0DH@IHNMAGGP@Only?5players?5with?5Seal?5effect?5ar@ DB 'Only player'
	DB	's with Seal effect are allowed to this map.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LGOOCBED@y2?$AA@
CONST	SEGMENT
??_C@_02LGOOCBED@y2?$AA@ DB 'y2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LHCMELHE@x2?$AA@
CONST	SEGMENT
??_C@_02LHCMELHE@x2?$AA@ DB 'x2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JNMDHCIA@y1?$AA@
CONST	SEGMENT
??_C@_02JNMDHCIA@y1?$AA@ DB 'y1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JMABBILH@x1?$AA@
CONST	SEGMENT
??_C@_02JMABBILH@x1?$AA@ DB 'x1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPODEIFF@movelevel?$AA@
CONST	SEGMENT
??_C@_09OPODEIFF@movelevel?$AA@ DB 'movelevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FCPELHNC@?$FLMoveLevel?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0BO@FCPELHNC@?$FLMoveLevel?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@ DB '['
	DB	'MoveLevel] Loading fail [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKCHGMLH@gate?$AA@
CONST	SEGMENT
??_C@_04NKCHGMLH@gate?$AA@ DB 'gate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IKCNOJAA@money?$AA@
CONST	SEGMENT
??_C@_05IKCNOJAA@money?$AA@ DB 'money', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDMMNHEL@move?$AA@
CONST	SEGMENT
??_C@_04HDMMNHEL@move?$AA@ DB 'move', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNJIAMHD@movelist?$AA@
CONST	SEGMENT
??_C@_08GNJIAMHD@movelist?$AA@ DB 'movelist', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JDGONFBC@?$FLMoveList?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@
CONST	SEGMENT
??_C@_0BN@JDGONFBC@?$FLMoveList?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@ DB '['
	DB	'MoveList] Loading fail [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CMoveCommand@@6B@
CONST	SEGMENT
??_7CMoveCommand@@6B@ DD FLAT:??_R4CMoveCommand@@6B@	; CMoveCommand::`vftable'
	DD	FLAT:??_ECMoveCommand@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z$0
__ehfuncinfo$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Load@CMoveCommand@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CMoveCommand@@QAEHPAD@Z$0
__ehfuncinfo$?Load@CMoveCommand@@QAEHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Load@CMoveCommand@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@U1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@U1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@$$QAU2@@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UMOVE_MOVE_LEVEL@@U1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@$$QAU2@@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@U1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@U1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@UMOVE_MOVE_LEVEL@@U1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UMOVE_MOVE_LEVEL@@@std@@YA$$QAUMOVE_MOVE_LEVEL@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMOVE_MOVE_LEVEL@@@std@@YA$$QAUMOVE_MOVE_LEVEL@@AAU1@@Z PROC ; std::forward<MOVE_MOVE_LEVEL>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UMOVE_MOVE_LEVEL@@@std@@YA$$QAUMOVE_MOVE_LEVEL@@AAU1@@Z ENDP ; std::forward<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@U1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@U1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UMOVE_MOVE_LEVEL@@U1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMOVE_MOVE_LEVEL@@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMOVE_MOVE_LEVEL@@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::destroy<MOVE_MOVE_LEVEL>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMOVE_MOVE_LEVEL@@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::destroy<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00009	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0000c	3b ca		 cmp	 ecx, edx
  0000e	74 1e		 je	 SHORT $LN3@Uninit_mov
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00010	85 c0		 test	 eax, eax
  00012	74 10		 je	 SHORT $LN2@Uninit_mov
  00014	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00017	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001a	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  0001f	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00024	83 c1 18	 add	 ecx, 24			; 00000018H
  00027	83 c0 18	 add	 eax, 24			; 00000018H
  0002a	3b ca		 cmp	 ecx, edx
  0002c	75 e2		 jne	 SHORT $LL4@Uninit_mov
$LN3@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);
; 450  : 	}

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@@Z PROC ; std::_Val_type<MOVE_MOVE_LEVEL *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@@Z ENDP ; std::_Val_type<MOVE_MOVE_LEVEL *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMOVE_MOVE_LEVEL@@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UMOVE_MOVE_LEVEL@@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@@Z PROC ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::destroy<MOVE_MOVE_LEVEL>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UMOVE_MOVE_LEVEL@@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@@Z ENDP ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::destroy<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MOVE_MOVE_LEVEL>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUMOVE_MOVE_LEVEL@@PAU1@@std@@YAAAPAUMOVE_MOVE_LEVEL@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUMOVE_MOVE_LEVEL@@PAU1@@std@@YAAAPAUMOVE_MOVE_LEVEL@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUMOVE_MOVE_LEVEL@@PAU1@@std@@YAAAPAUMOVE_MOVE_LEVEL@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z PROC ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z ENDP ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@@Z PROC ; std::_Unchecked<MOVE_MOVE_LEVEL *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@@Z ENDP ; std::_Unchecked<MOVE_MOVE_LEVEL *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UMOVE_MOVE_LEVEL@@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UMOVE_MOVE_LEVEL@@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::destroy<MOVE_MOVE_LEVEL>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UMOVE_MOVE_LEVEL@@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::destroy<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@AAU1@@Z PROC ; std::addressof<MOVE_MOVE_LEVEL>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UMOVE_MOVE_LEVEL@@@std@@YAPAUMOVE_MOVE_LEVEL@@AAU1@@Z ENDP ; std::addressof<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@ABU2@@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@ABU2@@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@AAU2@@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN3@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN3@construct:

; 656  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@AAU2@@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAUMOVE_MOVE_LEVEL@@@std@@YA$$QAPAUMOVE_MOVE_LEVEL@@AAPAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAUMOVE_MOVE_LEVEL@@@std@@YA$$QAPAUMOVE_MOVE_LEVEL@@AAPAU1@@Z PROC ; std::_Move<MOVE_MOVE_LEVEL * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAUMOVE_MOVE_LEVEL@@@std@@YA$$QAPAUMOVE_MOVE_LEVEL@@AAPAU1@@Z ENDP ; std::_Move<MOVE_MOVE_LEVEL * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUMOVE_MOVE_LEVEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMOVE_MOVE_LEVEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z PROC ; std::_Uninitialized_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUMOVE_MOVE_LEVEL@@PAU1@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXPAUMOVE_MOVE_LEVEL@@0AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXPAUMOVE_MOVE_LEVEL@@0AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXPAUMOVE_MOVE_LEVEL@@0AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UMOVE_MOVE_LEVEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMOVE_MOVE_LEVEL@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMOVE_MOVE_LEVEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMOVE_MOVE_LEVEL@@0@Z PROC ; std::_Ptr_cat<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UMOVE_MOVE_LEVEL@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMOVE_MOVE_LEVEL@@0@Z ENDP ; std::_Ptr_cat<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@YAABV?$allocator@UMOVE_MOVE_LEVEL@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@YAABV?$allocator@UMOVE_MOVE_LEVEL@@@0@ABV10@@Z PROC ; std::forward<std::allocator<MOVE_MOVE_LEVEL> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@YAABV?$allocator@UMOVE_MOVE_LEVEL@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<MOVE_MOVE_LEVEL> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUMOVE_MOVE_LEVEL@@@std@@YAABUMOVE_MOVE_LEVEL@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUMOVE_MOVE_LEVEL@@@std@@YAABUMOVE_MOVE_LEVEL@@ABU1@@Z PROC ; std::forward<MOVE_MOVE_LEVEL const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUMOVE_MOVE_LEVEL@@@std@@YAABUMOVE_MOVE_LEVEL@@ABU1@@Z ENDP ; std::forward<MOVE_MOVE_LEVEL const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN8@construct
  0000a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAXAAV?$allocator@UMOVE_MOVE_LEVEL@@@1@PAUMOVE_MOVE_LEVEL@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUMOVE_MOVE_LEVEL@@@std@@YAAAUMOVE_MOVE_LEVEL@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUMOVE_MOVE_LEVEL@@@std@@YAAAUMOVE_MOVE_LEVEL@@AAU1@@Z PROC ; std::forward<MOVE_MOVE_LEVEL &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUMOVE_MOVE_LEVEL@@@std@@YAAAUMOVE_MOVE_LEVEL@@AAU1@@Z ENDP ; std::forward<MOVE_MOVE_LEVEL &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUMOVE_MOVE_LEVEL@@@std@@YAPBUMOVE_MOVE_LEVEL@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUMOVE_MOVE_LEVEL@@@std@@YAPBUMOVE_MOVE_LEVEL@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<MOVE_MOVE_LEVEL const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUMOVE_MOVE_LEVEL@@@std@@YAPBUMOVE_MOVE_LEVEL@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<MOVE_MOVE_LEVEL const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUMOVE_MOVE_LEVEL@@@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEPAUMOVE_MOVE_LEVEL@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUMOVE_MOVE_LEVEL@@@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEPAUMOVE_MOVE_LEVEL@@PAU2@00@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Umove<MOVE_MOVE_LEVEL *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUMOVE_MOVE_LEVEL@@@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEPAUMOVE_MOVE_LEVEL@@PAU2@00@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Umove<MOVE_MOVE_LEVEL *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXPAUMOVE_MOVE_LEVEL@@0AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXPAUMOVE_MOVE_LEVEL@@0AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXPAUMOVE_MOVE_LEVEL@@0AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UMOVE_MOVE_LEVEL@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UMOVE_MOVE_LEVEL@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1><std::allocator<MOVE_MOVE_LEVEL> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UMOVE_MOVE_LEVEL@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1><std::allocator<MOVE_MOVE_LEVEL> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UMOVE_MOVE_LEVEL@@ABU1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 13		 je	 SHORT $LN13@construct
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00013	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00018	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??$construct@UMOVE_MOVE_LEVEL@@AAU1@@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::construct<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUMOVE_MOVE_LEVEL@@@std@@YAPBUMOVE_MOVE_LEVEL@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUMOVE_MOVE_LEVEL@@@std@@YAPBUMOVE_MOVE_LEVEL@@ABU1@@Z PROC ; std::addressof<MOVE_MOVE_LEVEL const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUMOVE_MOVE_LEVEL@@@std@@YAPBUMOVE_MOVE_LEVEL@@ABU1@@Z ENDP ; std::addressof<MOVE_MOVE_LEVEL const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAUMOVE_MOVE_LEVEL@@@std@@YAXAAPAUMOVE_MOVE_LEVEL@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAUMOVE_MOVE_LEVEL@@@std@@YAXAAPAUMOVE_MOVE_LEVEL@@0@Z PROC ; std::swap<MOVE_MOVE_LEVEL *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAUMOVE_MOVE_LEVEL@@@std@@YAXAAPAUMOVE_MOVE_LEVEL@@0@Z ENDP ; std::swap<MOVE_MOVE_LEVEL *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAUMOVE_MOVE_LEVEL@@@std@@YAXAAPAUMOVE_MOVE_LEVEL@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAUMOVE_MOVE_LEVEL@@@std@@YAXAAPAUMOVE_MOVE_LEVEL@@0@Z PROC ; std::_Swap_adl<MOVE_MOVE_LEVEL *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAUMOVE_MOVE_LEVEL@@@std@@YAXAAPAUMOVE_MOVE_LEVEL@@0@Z ENDP ; std::_Swap_adl<MOVE_MOVE_LEVEL *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8UMOVE_MOVE_LEVEL@@U0@@std@@YA_NABV?$allocator@UMOVE_MOVE_LEVEL@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8UMOVE_MOVE_LEVEL@@U0@@std@@YA_NABV?$allocator@UMOVE_MOVE_LEVEL@@@0@0@Z PROC ; std::operator==<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8UMOVE_MOVE_LEVEL@@U0@@std@@YA_NABV?$allocator@UMOVE_MOVE_LEVEL@@@0@0@Z ENDP ; std::operator==<MOVE_MOVE_LEVEL,MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@UMOVE_MOVE_LEVEL@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@UMOVE_MOVE_LEVEL@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<MOVE_MOVE_LEVEL>,std::allocator<MOVE_MOVE_LEVEL> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@UMOVE_MOVE_LEVEL@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<MOVE_MOVE_LEVEL>,std::allocator<MOVE_MOVE_LEVEL> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z PROC	; GetKalimaGateLevel, COMDAT

; 597  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 598  : 	if ( lpObj->Class == 3 || lpObj->Class == 4 )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	0f b7 88 90 00
	00 00		 movzx	 ecx, WORD PTR [eax+144]
  0000d	83 f9 03	 cmp	 ecx, 3
  00010	74 2f		 je	 SHORT $LN10@GetKalimaG
  00012	83 f9 04	 cmp	 ecx, 4
  00015	74 2a		 je	 SHORT $LN10@GetKalimaG

; 611  : 		{
; 612  : 			if ( lpObj->Level >= g_sttKALIMAGATE_LEVEL[i].iLOWER_BOUND && lpObj->Level <= g_sttKALIMAGATE_LEVEL[i].iUPPER_BOUND )

  00017	0f b7 80 96 00
	00 00		 movzx	 eax, WORD PTR [eax+150]
  0001e	33 c9		 xor	 ecx, ecx
  00020	0f bf d0	 movsx	 edx, ax
  00023	b8 04 00 00 00	 mov	 eax, OFFSET ?g_sttKALIMAGATE_LEVEL@@3PAU_KALIMAGATE_LEVEL@@A+4
$LL7@GetKalimaG:
  00028	3b 50 fc	 cmp	 edx, DWORD PTR [eax-4]
  0002b	7c 04		 jl	 SHORT $LN5@GetKalimaG
  0002d	3b 10		 cmp	 edx, DWORD PTR [eax]
  0002f	7e 3a		 jle	 SHORT $LN17@GetKalimaG
$LN5@GetKalimaG:

; 605  : 			}
; 606  : 		}
; 607  : 	}
; 608  : 	else
; 609  : 	{
; 610  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  00031	83 c0 10	 add	 eax, 16			; 00000010H
  00034	41		 inc	 ecx
  00035	3d 74 00 00 00	 cmp	 eax, OFFSET ?g_sttKALIMAGATE_LEVEL@@3PAU_KALIMAGATE_LEVEL@@A+116
  0003a	7c ec		 jl	 SHORT $LL7@GetKalimaG

; 613  : 			{
; 614  : 				return i;
; 615  : 			}
; 616  : 		}
; 617  : 	}
; 618  : 
; 619  : 	return -1;

  0003c	83 c8 ff	 or	 eax, -1

; 620  : }

  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
$LN10@GetKalimaG:

; 601  : 		{
; 602  : 			if ( lpObj->Level >= g_sttKALIMAGATE_LEVEL[i].iLOWER_BOUND_MAGUMSA && lpObj->Level <= g_sttKALIMAGATE_LEVEL[i].iUPPER_BOUND_MAGUMSA )

  00041	0f b7 80 96 00
	00 00		 movzx	 eax, WORD PTR [eax+150]
  00048	33 c9		 xor	 ecx, ecx
  0004a	0f bf d0	 movsx	 edx, ax
  0004d	b8 0c 00 00 00	 mov	 eax, OFFSET ?g_sttKALIMAGATE_LEVEL@@3PAU_KALIMAGATE_LEVEL@@A+12
$LL4@GetKalimaG:
  00052	3b 50 fc	 cmp	 edx, DWORD PTR [eax-4]
  00055	7c 04		 jl	 SHORT $LN2@GetKalimaG
  00057	3b 10		 cmp	 edx, DWORD PTR [eax]
  00059	7e 10		 jle	 SHORT $LN17@GetKalimaG
$LN2@GetKalimaG:

; 599  : 	{
; 600  : 		for ( int i=0;i<KALIMA_FLOORS;i++)

  0005b	83 c0 10	 add	 eax, 16			; 00000010H
  0005e	41		 inc	 ecx
  0005f	3d 7c 00 00 00	 cmp	 eax, OFFSET ?g_sttKALIMAGATE_LEVEL@@3PAU_KALIMAGATE_LEVEL@@A+124
  00064	7c ec		 jl	 SHORT $LL4@GetKalimaG

; 613  : 			{
; 614  : 				return i;
; 615  : 			}
; 616  : 		}
; 617  : 	}
; 618  : 
; 619  : 	return -1;

  00066	83 c8 ff	 or	 eax, -1

; 620  : }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN17@GetKalimaG:

; 603  : 			{
; 604  : 				return i;

  0006b	8b c1		 mov	 eax, ecx

; 620  : }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z ENDP	; GetKalimaGateLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FgMoveCommand@@YAXXZ
text$yd	SEGMENT
??__FgMoveCommand@@YAXXZ PROC				; `dynamic atexit destructor for 'gMoveCommand'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00005	e9 00 00 00 00	 jmp	 ??1CMoveCommand@@UAE@XZ	; CMoveCommand::~CMoveCommand
??__FgMoveCommand@@YAXXZ ENDP				; `dynamic atexit destructor for 'gMoveCommand''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ??__EgMoveCommand@@YAXXZ
text$di	SEGMENT
??__EgMoveCommand@@YAXXZ PROC				; `dynamic initializer for 'gMoveCommand'', COMDAT

; 22   : CMoveCommand gMoveCommand;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gMoveCommand@@3VCMoveCommand@@A ; gMoveCommand
  00005	e8 00 00 00 00	 call	 ??0CMoveCommand@@QAE@XZ	; CMoveCommand::CMoveCommand
  0000a	68 00 00 00 00	 push	 OFFSET ??__FgMoveCommand@@YAXXZ ; `dynamic atexit destructor for 'gMoveCommand''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EgMoveCommand@@YAXXZ ENDP				; `dynamic initializer for 'gMoveCommand''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCMoveCommand@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMoveCommand@@UAEPAXI@Z PROC			; CMoveCommand::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CMoveCommand@@UAE@XZ	; CMoveCommand::~CMoveCommand
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 30 67 00 00	 push	 26416			; 00006730H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCMoveCommand@@UAEPAXI@Z ENDP			; CMoveCommand::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEXPAUMOVE_MOVE_LEVEL@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEXPAUMOVE_MOVE_LEVEL@@0@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEXPAUMOVE_MOVE_LEVEL@@0@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEXXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEXXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:
  0003c	5e		 pop	 esi

; 1665 : 			}
; 1666 : 		}

  0003d	c3		 ret	 0
?_Tidy@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv202 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 1646 : 		if (_Unused_capacity() < _Count)

  0000d	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00010	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00013	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00016	2b d6		 sub	 edx, esi
  00018	f7 ea		 imul	 edx
  0001a	c1 fa 02	 sar	 edx, 2
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00024	3b c7		 cmp	 eax, edi
  00026	73 61		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00028	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002a	2b f0		 sub	 esi, eax
  0002c	89 45 08	 mov	 DWORD PTR tv202[ebp], eax
  0002f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00034	f7 ee		 imul	 esi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00036	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	c1 fa 02	 sar	 edx, 2
  0003e	8b ca		 mov	 ecx, edx
  00040	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00043	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00045	2b c1		 sub	 eax, ecx
  00047	3b c7		 cmp	 eax, edi
  00049	72 45		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004b	03 f9		 add	 edi, ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0004d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00052	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00055	2b 4d 08	 sub	 ecx, DWORD PTR tv202[ebp]
  00058	f7 e9		 imul	 ecx
  0005a	c1 fa 02	 sar	 edx, 2
  0005d	8b f2		 mov	 esi, edx
  0005f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00062	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00064	ba aa aa aa 0a	 mov	 edx, 178956970		; 0aaaaaaaH
  00069	8b c6		 mov	 eax, esi
  0006b	d1 e8		 shr	 eax, 1
  0006d	2b d0		 sub	 edx, eax
  0006f	3b d6		 cmp	 edx, esi
  00071	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  00074	b8 00 00 00 00	 mov	 eax, 0
  00079	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  0007c	3b cf		 cmp	 ecx, edi
  0007e	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00081	51		 push	 ecx
  00082	8b cb		 mov	 ecx, ebx
  00084	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reallocate
$LN2@Reserve:
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00095	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  0009a	cc		 int	 3
?_Reserve@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUMOVE_MOVE_LEVEL@@PAU1@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@U1@@std@@YAPAUMOVE_MOVE_LEVEL@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<MOVE_MOVE_LEVEL *,MOVE_MOVE_LEVEL *,std::allocator<MOVE_MOVE_LEVEL>,MOVE_MOVE_LEVEL>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	c1 fa 02	 sar	 edx, 2
  00069	8b da		 mov	 ebx, edx
  0006b	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  0006e	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00070	85 c0		 test	 eax, eax
  00072	74 20		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00074	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00077	2b c8		 sub	 ecx, eax
  00079	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007e	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00080	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00082	c1 fa 02	 sar	 edx, 2
  00085	8b c2		 mov	 eax, edx
  00087	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0008c	50		 push	 eax
  0008d	ff 36		 push	 DWORD PTR [esi]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00094	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00097	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0009a	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000a0	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000a3	8d 04 c7	 lea	 eax, DWORD PTR [edi+eax*8]
  000a6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000a9	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000bf	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000c2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000c8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000cd	6a 00		 push	 0
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000d6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBE_NPBUMOVE_MOVE_LEVEL@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBE_NPBUMOVE_MOVE_LEVEL@@@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBE_NPBUMOVE_MOVE_LEVEL@@@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEII@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000d	b9 aa aa aa 0a	 mov	 ecx, 178956970		; 0aaaaaaaH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00012	f7 ea		 imul	 edx
  00014	56		 push	 esi
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b f2		 mov	 esi, edx
  0001a	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  0001d	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001f	8b c6		 mov	 eax, esi
  00021	d1 e8		 shr	 eax, 1
  00023	57		 push	 edi
  00024	2b c8		 sub	 ecx, eax
  00026	33 ff		 xor	 edi, edi
  00028	3b ce		 cmp	 ecx, esi
  0002a	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002d	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00030	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00033	5f		 pop	 edi
  00034	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  00038	8b c2		 mov	 eax, edx
  0003a	5e		 pop	 esi

; 1612 : 		}

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?_Grow_to@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IBEII@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXPAUMOVE_MOVE_LEVEL@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXPAUMOVE_MOVE_LEVEL@@0@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXPAUMOVE_MOVE_LEVEL@@0@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXABUMOVE_MOVE_LEVEL@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXABUMOVE_MOVE_LEVEL@@@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 4f		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 49		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	f7 ef		 imul	 edi
  00020	c1 fa 02	 sar	 edx, 2
  00023	8b fa		 mov	 edi, edx
  00025	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00028	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002d	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  0002f	6a 01		 push	 1
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00038	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003b	85 d2		 test	 edx, edx
  0003d	74 46		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00044	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00045	0f 10 04 c8	 movups	 xmm0, XMMWORD PTR [eax+ecx*8]
  00049	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0004c	f3 0f 7e 44 c8
	10		 movq	 xmm0, QWORD PTR [eax+ecx*8+16]
  00052	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00057	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  0005b	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00060	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00063	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00065	6a 01		 push	 1
  00067	8b ce		 mov	 ecx, esi
  00069	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@IAEXI@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0006e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00071	85 c0		 test	 eax, eax
  00073	74 10		 je	 SHORT $LN205@push_back
  00075	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00078	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0007b	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00080	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00085	83 46 04 18	 add	 DWORD PTR [esi+4], 24	; 00000018H
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?push_back@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXABUMOVE_MOVE_LEVEL@@@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEAAUMOVE_MOVE_LEVEL@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEAAUMOVE_MOVE_LEVEL@@I@Z PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	8d 04 d0	 lea	 eax, DWORD PTR [eax+edx*8]

; 1241 : 		}

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
??A?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEAAUMOVE_MOVE_LEVEL@@I@Z ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::size, COMDAT
; _this$ = ecx

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1180 : 		}

  00016	c3		 ret	 0
?size@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 02	 sar	 edx, 2
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx

; 1048 : 		}

  00017	c3		 ret	 0
?_Unused_capacity@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::capacity, COMDAT
; _this$ = ecx

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1043 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIXZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::~vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 33		 je	 SHORT $LN4@vector

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b d1		 sub	 edx, ecx
  00013	f7 ea		 imul	 edx
  00015	c1 fa 02	 sar	 edx, 2
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0001f	50		 push	 eax
  00020	51		 push	 ecx
  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00035	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  0003c	5e		 pop	 esi

; 975  : 		_Tidy();
; 976  : 		}

  0003d	c3		 ret	 0
??1?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::~vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ PROC ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ ENDP ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >,std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >::_Vector_val<std::_Simple_types<MOVE_MOVE_LEVEL> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABQAUMOVE_MOVE_LEVEL@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAPAUMOVE_MOVE_LEVEL@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@@std@@QAE@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >::_Vector_alloc<std::_Vec_base_types<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAE@ABV?$allocator@UMOVE_MOVE_LEVEL@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >::_Wrap_alloc<std::allocator<MOVE_MOVE_LEVEL> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAIABV?$allocator@UMOVE_MOVE_LEVEL@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAIABV?$allocator@UMOVE_MOVE_LEVEL@@@2@@Z PROC ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@SAIABV?$allocator@UMOVE_MOVE_LEVEL@@@2@@Z ENDP ; std::allocator_traits<std::allocator<MOVE_MOVE_LEVEL> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QBEIXZ PROC ; std::allocator<MOVE_MOVE_LEVEL>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QBEIXZ ENDP ; std::allocator<MOVE_MOVE_LEVEL>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00018	c1 e0 03	 shl	 eax, 3

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEPAUMOVE_MOVE_LEVEL@@I@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00013	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAE@ABV01@@Z PROC ; std::allocator<MOVE_MOVE_LEVEL>::allocator<MOVE_MOVE_LEVEL>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<MOVE_MOVE_LEVEL>::allocator<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAE@XZ PROC	; std::allocator<MOVE_MOVE_LEVEL>::allocator<MOVE_MOVE_LEVEL>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAE@XZ ENDP	; std::allocator<MOVE_MOVE_LEVEL>::allocator<MOVE_MOVE_LEVEL>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z
_TEXT	SEGMENT
_nMapIndex$ = 8						; size = 4
?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z PROC ; CMoveCommand::GetMoveCommandData, COMDAT
; _this$ = ecx

; 642  : MOVE_COMMAND_DATA* CMoveCommand::GetMoveCommandData(int nMapIndex) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 643  : 	int nIndex = -1;
; 644  : 	for(int i = 0; i < MAX_MOVE_COMMAND; i++) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _nMapIndex$[ebp]
  00007	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000a	33 c0		 xor	 eax, eax
  0000c	0f 1f 40 00	 npad	 4
$LL4@GetMoveCom:

; 645  : 		if(this->m_MoveCommandData[i].Index == nMapIndex) {

  00010	39 32		 cmp	 DWORD PTR [edx], esi
  00012	74 13		 je	 SHORT $LN9@GetMoveCom

; 643  : 	int nIndex = -1;
; 644  : 	for(int i = 0; i < MAX_MOVE_COMMAND; i++) {

  00014	40		 inc	 eax
  00015	81 c2 10 02 00
	00		 add	 edx, 528		; 00000210H
  0001b	83 f8 32	 cmp	 eax, 50			; 00000032H
  0001e	7c f0		 jl	 SHORT $LL4@GetMoveCom
$LN6@GetMoveCom:

; 652  : 	}
; 653  : 	return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	5e		 pop	 esi

; 654  : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
$LN9@GetMoveCom:

; 646  : 			nIndex = i;
; 647  : 			break;
; 648  : 		}
; 649  : 	}
; 650  : 	if (nIndex >= 0){

  00027	85 c0		 test	 eax, eax
  00029	78 f5		 js	 SHORT $LN6@GetMoveCom

; 651  : 		return &this->m_MoveCommandData[nIndex];

  0002b	69 c0 10 02 00
	00		 imul	 eax, eax, 528
  00031	5e		 pop	 esi
  00032	83 c0 04	 add	 eax, 4
  00035	03 c1		 add	 eax, ecx

; 654  : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?GetMoveCommandData@CMoveCommand@@QAEPAUMOVE_COMMAND_DATA@@H@Z ENDP ; CMoveCommand::GetMoveCommandData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?CheckMoveMapBound@CMoveCommand@@QAEHH@Z
_TEXT	SEGMENT
_iMapIndex$ = 8						; size = 4
?CheckMoveMapBound@CMoveCommand@@QAEHH@Z PROC		; CMoveCommand::CheckMoveMapBound, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 368  : 	switch ( iMapIndex )

  00003	33 c0		 xor	 eax, eax
  00005	39 45 08	 cmp	 DWORD PTR _iMapIndex$[ebp], eax
  00008	0f 95 c0	 setne	 al

; 369  : 	{
; 370  : 	case 0:	return FALSE;
; 371  : 	}
; 372  : 	
; 373  : 	return TRUE;
; 374  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?CheckMoveMapBound@CMoveCommand@@QAEHH@Z ENDP		; CMoveCommand::CheckMoveMapBound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::MoveFree2Kalima, COMDAT
; _this$ = ecx

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 627  : 	int iIdx = GetKalimaGateLevel(lpObj);

  00004	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ?GetKalimaGateLevel@@YAHPAUOBJECTSTRUCT@@@Z ; GetKalimaGateLevel
  0000d	83 c4 04	 add	 esp, 4

; 628  : 
; 629  : 	if ( iIdx >= 6 )

  00010	83 f8 06	 cmp	 eax, 6
  00013	7c 18		 jl	 SHORT $LN2@MoveFree2K

; 630  : 		iIdx = 5;

  00015	b8 05 00 00 00	 mov	 eax, 5
$LN3@MoveFree2K:

; 635  : 	}
; 636  : 
; 637  : 	int iGateNumber = iIdx + 88;

  0001a	83 c0 58	 add	 eax, 88			; 00000058H

; 638  : 
; 639  : 	return gObjMoveGate(lpObj->m_Index, iGateNumber);

  0001d	50		 push	 eax
  0001e	ff 36		 push	 DWORD PTR [esi]
  00020	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00025	83 c4 08	 add	 esp, 8
  00028	5e		 pop	 esi

; 640  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN2@MoveFree2K:

; 631  : 
; 632  : 	if ( iIdx < 0 )

  0002d	85 c0		 test	 eax, eax
  0002f	79 e9		 jns	 SHORT $LN3@MoveFree2K

; 633  : 	{
; 634  : 		return FALSE;

  00031	33 c0		 xor	 eax, eax
  00033	5e		 pop	 esi

; 640  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?MoveFree2Kalima@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::MoveFree2Kalima
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_level$1 = -280						; size = 2
_NeedZen$1$ = -276					; size = 4
_x$2 = -271						; size = 1
_y$3 = -270						; size = 1
_dir$4 = -269						; size = 1
_GateNumber$1$ = -268					; size = 4
_mapNumber$5 = -261					; size = 1
_szTemp$6 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_moveindex$ = 12					; size = 4
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z PROC	; CMoveCommand::Move, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00018	57		 push	 edi

; 484  : 	int m_number = -1;
; 485  : 	int overlevel = 0;
; 486  : 	int subMoney = 2000;
; 487  : 
; 488  : 	int index = FindIndex(moveindex);

  00019	ff 75 0c	 push	 DWORD PTR _moveindex$[ebp]
  0001c	8b f9		 mov	 edi, ecx
  0001e	e8 00 00 00 00	 call	 ?FindIndex@CMoveCommand@@AAEHH@Z ; CMoveCommand::FindIndex
  00023	8b d8		 mov	 ebx, eax

; 489  : 
; 490  : 	if ( index == -1 )

  00025	83 fb ff	 cmp	 ebx, -1
  00028	0f 84 76 02 00
	00		 je	 $LN19@Move

; 491  : 	{
; 492  : 		return FALSE;
; 493  : 	}
; 494  : 
; 495  : 	if ( g_bUseMoveMapBound == TRUE )

  0002e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bUseMoveMapBound@@3HA, 1 ; g_bUseMoveMapBound
  00035	75 2f		 jne	 SHORT $LN5@Move

; 496  : 	{
; 497  : 		if ( g_CashItemPeriodSystem.CheckMoveMapBoundItem(lpObj) == FALSE )

  00037	56		 push	 esi
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  0003d	e8 00 00 00 00	 call	 ?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::CheckMoveMapBoundItem
  00042	85 c0		 test	 eax, eax
  00044	75 20		 jne	 SHORT $LN5@Move

; 498  : 		{
; 499  : 			if ( !CheckMoveMapBound(index))

  00046	53		 push	 ebx
  00047	8b cf		 mov	 ecx, edi
  00049	e8 00 00 00 00	 call	 ?CheckMoveMapBound@CMoveCommand@@QAEHH@Z ; CMoveCommand::CheckMoveMapBound
  0004e	85 c0		 test	 eax, eax
  00050	75 14		 jne	 SHORT $LN5@Move

; 500  : 			{
; 501  : 				MsgOutput(lpObj->m_Index,"Only players with Seal effect are allowed to this map.");

  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@IHNMAGGP@Only?5players?5with?5Seal?5effect?5ar@
  00057	ff 36		 push	 DWORD PTR [esi]
  00059	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  0005e	83 c4 08	 add	 esp, 8

; 502  : 				return FALSE;

  00061	e9 3e 02 00 00	 jmp	 $LN19@Move
$LN5@Move:

; 503  : 			}
; 504  : 		}
; 505  : 	}
; 506  : 
; 507  : 	int NeedLevel = this->m_MoveCommandData[index].NeedLevel;

  00066	69 db 10 02 00
	00		 imul	 ebx, ebx, 528
  0006c	03 df		 add	 ebx, edi

; 508  : 	int NeedZen   = this->m_MoveCommandData[index].NeedZen;
; 509  : 	int GateNumber= this->m_MoveCommandData[index].GateNumber;

  0006e	8b 83 10 02 00
	00		 mov	 eax, DWORD PTR [ebx+528]
  00074	8b 8b 08 02 00
	00		 mov	 ecx, DWORD PTR [ebx+520]
  0007a	8b bb 0c 02 00
	00		 mov	 edi, DWORD PTR [ebx+524]
  00080	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _GateNumber$1$[ebp], eax

; 510  : 
; 511  : 	if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA || lpObj->Class == CLASS_FIGHTER )

  00086	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  0008d	89 8d ec fe ff
	ff		 mov	 DWORD PTR _NeedZen$1$[ebp], ecx
  00093	83 f8 04	 cmp	 eax, 4
  00096	74 0a		 je	 SHORT $LN7@Move
  00098	83 f8 03	 cmp	 eax, 3
  0009b	74 05		 je	 SHORT $LN7@Move
  0009d	83 f8 06	 cmp	 eax, 6
  000a0	75 1b		 jne	 SHORT $LN8@Move
$LN7@Move:

; 512  : 	{
; 513  : 		if ( NeedLevel > 0 )

  000a2	85 ff		 test	 edi, edi
  000a4	7e 17		 jle	 SHORT $LN8@Move

; 514  : 		{
; 515  : 			NeedLevel = NeedLevel *2 / 3;

  000a6	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  000a9	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000ae	f7 e9		 imul	 ecx
  000b0	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _NeedZen$1$[ebp]
  000b6	8b fa		 mov	 edi, edx
  000b8	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000bb	03 fa		 add	 edi, edx
$LN8@Move:

; 516  : 		}
; 517  : 	}
; 518  : 
; 519  : 	if ( GateNumber >= 0 )

  000bd	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _GateNumber$1$[ebp], 0
  000c4	0f 8c a7 01 00
	00		 jl	 $LN11@Move

; 520  : 	{
; 521  : 		if ( NeedLevel <= lpObj->Level )

  000ca	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  000d1	3b f8		 cmp	 edi, eax
  000d3	0f 8f 67 01 00
	00		 jg	 $LN10@Move

; 522  : 		{
; 523  : 			if ( (lpObj->Money - NeedZen ) >= 0 )

  000d9	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  000df	2b c1		 sub	 eax, ecx
  000e1	0f 88 3b 01 00
	00		 js	 $LN12@Move

; 524  : 			{
; 525  : 
; 526  : #if (__GENS_SYSTEM__ == 1)
; 527  : 
; 528  : 		BYTE mapNumber = 0;
; 529  : 		BYTE dir;
; 530  : 		BYTE x;
; 531  : 		BYTE y;
; 532  : 		short level;
; 533  : 
; 534  : 		int result = gGateC.GetGate(GateNumber,x,y,(BYTE &)mapNumber,(BYTE &)dir,(short &)level);

  000e7	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _level$1[ebp]
  000ed	c6 85 fb fe ff
	ff 00		 mov	 BYTE PTR _mapNumber$5[ebp], 0
  000f4	50		 push	 eax
  000f5	8d 85 f3 fe ff
	ff		 lea	 eax, DWORD PTR _dir$4[ebp]
  000fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  00100	50		 push	 eax
  00101	8d 85 fb fe ff
	ff		 lea	 eax, DWORD PTR _mapNumber$5[ebp]
  00107	50		 push	 eax
  00108	8d 85 f2 fe ff
	ff		 lea	 eax, DWORD PTR _y$3[ebp]
  0010e	50		 push	 eax
  0010f	8d 85 f1 fe ff
	ff		 lea	 eax, DWORD PTR _x$2[ebp]
  00115	50		 push	 eax
  00116	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _GateNumber$1$[ebp]
  0011c	e8 00 00 00 00	 call	 ?GetGate@CGate@@QAEHHAAE000AAF@Z ; CGate::GetGate

; 535  : 
; 536  : 		if( result < 0 )

  00121	85 c0		 test	 eax, eax
  00123	79 2f		 jns	 SHORT $LN14@Move

; 537  : 		{
; 538  : 			LogAddTD("3[%s][%s] Use [%s %s] Fail GateNumber = %d",

  00125	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _GateNumber$1$[ebp]
  0012b	8d 83 07 01 00
	00		 lea	 eax, DWORD PTR [ebx+263]
  00131	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00136	50		 push	 eax
  00137	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  0013c	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00141	50		 push	 eax
  00142	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00145	50		 push	 eax
  00146	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00149	50		 push	 eax
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MADPDGAK@3?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@

; 539  : 				lpObj->AccountID, lpObj->Name,
; 540  : 				lMsg.Get(MSGGET(11, 185)), m_MoveCommandData[index].EngName, GateNumber);
; 541  : 			return FALSE;

  0014f	e9 47 01 00 00	 jmp	 $LN20@Move
$LN14@Move:

; 542  : 		}
; 543  : 
; 544  : 		if( gGensSystem.GensMap(mapNumber) && lpObj->m_GensInfo.btFamily == GENS_NONE )

  00154	0f b6 85 fb fe
	ff ff		 movzx	 eax, BYTE PTR _mapNumber$5[ebp]
  0015b	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VCGensSystem@@A ; gGensSystem
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?GensMap@CGensSystem@@QAEHH@Z ; CGensSystem::GensMap
  00166	85 c0		 test	 eax, eax
  00168	74 1f		 je	 SHORT $LN15@Move
  0016a	80 be ac 26 00
	00 00		 cmp	 BYTE PTR [esi+9900], 0
  00171	75 16		 jne	 SHORT $LN15@Move

; 545  : 		{
; 546  : 			GCServerMsgStringSend("You have not joined the gens and cannot enter the battle zone.",lpObj->m_Index,1);

  00173	6a 01		 push	 1
  00175	ff 36		 push	 DWORD PTR [esi]
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@PMJPGPAA@You?5have?5not?5joined?5the?5gens?5and@
  0017c	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  00181	83 c4 0c	 add	 esp, 12			; 0000000cH

; 547  : 			return FALSE;

  00184	e9 1b 01 00 00	 jmp	 $LN19@Move
$LN15@Move:

; 548  : 		}
; 549  : 
; 550  : #endif
; 551  : 
; 552  : 				if ( gObjMoveGate(lpObj->m_Index, GateNumber ) != FALSE )

  00189	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _GateNumber$1$[ebp]
  0018f	ff 36		 push	 DWORD PTR [esi]
  00191	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  00196	83 c4 08	 add	 esp, 8
  00199	85 c0		 test	 eax, eax
  0019b	0f 84 d0 00 00
	00		 je	 $LN11@Move

; 553  : 				{
; 554  : 					lpObj->m_bPShopRedrawAbs = true;
; 555  : 					lpObj->Money -= NeedZen;

  001a1	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _NeedZen$1$[ebp]

; 556  : 
; 557  : 					LogAddTD("[%s][%s] Use [%s %s] Success : reduces money %d - %d"

  001a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001ac	29 86 cc 00 00
	00		 sub	 DWORD PTR [esi+204], eax
  001b2	8d 83 07 01 00
	00		 lea	 eax, DWORD PTR [ebx+263]
  001b8	57		 push	 edi
  001b9	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001bf	c6 86 5f 12 00
	00 01		 mov	 BYTE PTR [esi+4703], 1
  001c6	50		 push	 eax
  001c7	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  001cc	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001d1	50		 push	 eax
  001d2	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001d5	50		 push	 eax
  001d6	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001d9	50		 push	 eax
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 558  : 						, lpObj->AccountID, lpObj->Name,
; 559  : 						lMsg.Get(MSGGET(11, 185)), m_MoveCommandData[index].EngName, lpObj->Money, NeedLevel);
; 560  : 
; 561  : 					GCMoneySend(lpObj->m_Index, lpObj->Money );

  001e5	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001eb	ff 36		 push	 DWORD PTR [esi]
  001ed	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001f2	83 c4 24	 add	 esp, 36			; 00000024H

; 562  : 
; 563  : 					if(lpObj->MapNumber == MAP_INDEX_RAKLIONBOSS)//Season 4.5 addon

  001f5	80 be 23 01 00
	00 3a		 cmp	 BYTE PTR [esi+291], 58	; 0000003aH
  001fc	75 0c		 jne	 SHORT $LN17@Move

; 564  : 					{
; 565  : 						g_RaklionBattleUserMng.DeleteUserData(lpObj->m_Index);

  001fe	ff 36		 push	 DWORD PTR [esi]
  00200	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_RaklionBattleUserMng@@3VCRaklionBattleUserMng@@A ; g_RaklionBattleUserMng
  00205	e8 00 00 00 00	 call	 ?DeleteUserData@CRaklionBattleUserMng@@QAEHH@Z ; CRaklionBattleUserMng::DeleteUserData
$LN17@Move:

; 566  : 					}
; 567  : 					return TRUE;

  0020a	5f		 pop	 edi
  0020b	5e		 pop	 esi
  0020c	b8 01 00 00 00	 mov	 eax, 1
  00211	5b		 pop	 ebx

; 585  : 		lpObj->AccountID, lpObj->Name,
; 586  : 		lMsg.Get(MSGGET(11, 185)), m_MoveCommandData[index].EngName, GateNumber);
; 587  : 	return FALSE;
; 588  : 
; 589  : }

  00212	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00215	33 cd		 xor	 ecx, ebp
  00217	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c2 08 00	 ret	 8
$LN12@Move:

; 568  : 				}
; 569  : 			}
; 570  : 			else
; 571  : 			{
; 572  : 				::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 102)), lpObj->m_Index, 1);

  00222	6a 01		 push	 1
  00224	ff 36		 push	 DWORD PTR [esi]
  00226	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0022b	68 66 04 00 00	 push	 1126			; 00000466H
  00230	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0023b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 573  : 			}
; 574  : 		}
; 575  : 		else

  0023e	eb 31		 jmp	 SHORT $LN11@Move
$LN10@Move:

; 576  : 		{
; 577  : 			char szTemp[256];
; 578  : 
; 579  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 93)), NeedLevel);

  00240	57		 push	 edi
  00241	68 5d 04 00 00	 push	 1117			; 0000045dH
  00246	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0024b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00250	50		 push	 eax
  00251	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$6[ebp]
  00257	50		 push	 eax
  00258	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 580  : 			::GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  0025e	6a 01		 push	 1
  00260	ff 36		 push	 DWORD PTR [esi]
  00262	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$6[ebp]
  00268	50		 push	 eax
  00269	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0026e	83 c4 18	 add	 esp, 24			; 00000018H
$LN11@Move:

; 581  : 		}
; 582  : 	}
; 583  : 
; 584  : 	LogAddTD("4[%s][%s] Use [%s %s] Fail GateNumber = %d",

  00271	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _GateNumber$1$[ebp]
  00277	8d 83 07 01 00
	00		 lea	 eax, DWORD PTR [ebx+263]
  0027d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00282	50		 push	 eax
  00283	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  00288	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0028d	50		 push	 eax
  0028e	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00291	50		 push	 eax
  00292	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00295	50		 push	 eax
  00296	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@MODFPAKK@4?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@
$LN20@Move:
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  002a1	83 c4 18	 add	 esp, 24			; 00000018H
$LN19@Move:

; 585  : 		lpObj->AccountID, lpObj->Name,
; 586  : 		lMsg.Get(MSGGET(11, 185)), m_MoveCommandData[index].EngName, GateNumber);
; 587  : 	return FALSE;
; 588  : 
; 589  : }

  002a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a7	33 c0		 xor	 eax, eax
  002a9	5f		 pop	 edi
  002aa	5e		 pop	 esi
  002ab	33 cd		 xor	 ecx, ebp
  002ad	5b		 pop	 ebx
  002ae	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b3	8b e5		 mov	 esp, ebp
  002b5	5d		 pop	 ebp
  002b6	c2 08 00	 ret	 8
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP	; CMoveCommand::Move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z
_TEXT	SEGMENT
_level$1 = -276						; size = 2
_NeedZen$1$ = -272					; size = 4
_mapname$GSCopy$1$ = -268				; size = 4
_x$2 = -264						; size = 1
_y$3 = -263						; size = 1
_dir$4 = -262						; size = 1
_mapNumber$5 = -261					; size = 1
_szTemp$6 = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_lpObj$ = 8						; size = 4
_mapname$ = 12						; size = 4
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z PROC	; CMoveCommand::Move, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 0c	 mov	 eax, DWORD PTR _mapname$[ebp]
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  0001b	8b d9		 mov	 ebx, ecx
  0001d	57		 push	 edi

; 381  : 	int m_number = -1;
; 382  : 	int overlevel = 0;
; 383  : 	int subMoney = 2000;
; 384  : 	int index = FindIndex(mapname);

  0001e	50		 push	 eax
  0001f	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _mapname$GSCopy$1$[ebp], eax
  00025	e8 00 00 00 00	 call	 ?FindIndex@CMoveCommand@@AAEHPAD@Z ; CMoveCommand::FindIndex
  0002a	8b f8		 mov	 edi, eax

; 385  : 
; 386  : 	if ( index == -1 )

  0002c	83 ff ff	 cmp	 edi, -1
  0002f	0f 84 39 02 00
	00		 je	 $LN18@Move

; 387  : 	{
; 388  : 		return FALSE;
; 389  : 	}
; 390  : 
; 391  : 	if ( g_bUseMoveMapBound == TRUE )

  00035	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?g_bUseMoveMapBound@@3HA, 1 ; g_bUseMoveMapBound
  0003c	75 2f		 jne	 SHORT $LN5@Move

; 392  : 	{
; 393  : 		if ( g_CashItemPeriodSystem.CheckMoveMapBoundItem(lpObj) == FALSE )

  0003e	56		 push	 esi
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_CashItemPeriodSystem@@3VCCashItemPeriodSystem@@A ; g_CashItemPeriodSystem
  00044	e8 00 00 00 00	 call	 ?CheckMoveMapBoundItem@CCashItemPeriodSystem@@QAEHPAUOBJECTSTRUCT@@@Z ; CCashItemPeriodSystem::CheckMoveMapBoundItem
  00049	85 c0		 test	 eax, eax
  0004b	75 20		 jne	 SHORT $LN5@Move

; 394  : 		{
; 395  : 			if ( !CheckMoveMapBound(index))

  0004d	57		 push	 edi
  0004e	8b cb		 mov	 ecx, ebx
  00050	e8 00 00 00 00	 call	 ?CheckMoveMapBound@CMoveCommand@@QAEHH@Z ; CMoveCommand::CheckMoveMapBound
  00055	85 c0		 test	 eax, eax
  00057	75 14		 jne	 SHORT $LN5@Move

; 396  : 			{
; 397  : 				MsgOutput(lpObj->m_Index,"Only players with Seal effect are allowed to this map.");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@IHNMAGGP@Only?5players?5with?5Seal?5effect?5ar@
  0005e	ff 36		 push	 DWORD PTR [esi]
  00060	e8 00 00 00 00	 call	 ?MsgOutput@@YAXHPADZZ	; MsgOutput
  00065	83 c4 08	 add	 esp, 8

; 398  : 				return FALSE;

  00068	e9 01 02 00 00	 jmp	 $LN18@Move
$LN5@Move:

; 399  : 			}
; 400  : 		}
; 401  : 	}
; 402  : 
; 403  : 	int NeedLevel = this->m_MoveCommandData[index].NeedLevel;

  0006d	69 c7 10 02 00
	00		 imul	 eax, edi, 528

; 404  : 	int NeedZen   = this->m_MoveCommandData[index].NeedZen;

  00073	8b 8c 18 08 02
	00 00		 mov	 ecx, DWORD PTR [eax+ebx+520]
  0007a	8b bc 18 0c 02
	00 00		 mov	 edi, DWORD PTR [eax+ebx+524]

; 405  : 	int GateNumber= this->m_MoveCommandData[index].GateNumber;

  00081	8b 9c 18 10 02
	00 00		 mov	 ebx, DWORD PTR [eax+ebx+528]

; 406  : 
; 407  : 	if ( lpObj->Class == CLASS_DARKLORD || lpObj->Class == CLASS_MAGUMSA || lpObj->Class == CLASS_FIGHTER )

  00088	0f b7 86 90 00
	00 00		 movzx	 eax, WORD PTR [esi+144]
  0008f	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _NeedZen$1$[ebp], ecx
  00095	83 f8 04	 cmp	 eax, 4
  00098	74 0a		 je	 SHORT $LN7@Move
  0009a	83 f8 03	 cmp	 eax, 3
  0009d	74 05		 je	 SHORT $LN7@Move
  0009f	83 f8 06	 cmp	 eax, 6
  000a2	75 1b		 jne	 SHORT $LN8@Move
$LN7@Move:

; 408  : 	{
; 409  : 		if ( NeedLevel > 0 )

  000a4	85 ff		 test	 edi, edi
  000a6	7e 17		 jle	 SHORT $LN8@Move

; 410  : 		{
; 411  : 			NeedLevel = NeedLevel *2 / 3;

  000a8	8d 0c 3f	 lea	 ecx, DWORD PTR [edi+edi]
  000ab	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000b0	f7 e9		 imul	 ecx
  000b2	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _NeedZen$1$[ebp]
  000b8	8b fa		 mov	 edi, edx
  000ba	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  000bd	03 fa		 add	 edi, edx
$LN8@Move:

; 412  : 		}
; 413  : 	}
; 414  : 
; 415  : 	if ( GateNumber >= 0 )

  000bf	85 db		 test	 ebx, ebx
  000c1	0f 88 7a 01 00
	00		 js	 $LN11@Move

; 416  : 	{
; 417  : 		if ( NeedLevel <= lpObj->Level )

  000c7	0f bf 86 96 00
	00 00		 movsx	 eax, WORD PTR [esi+150]
  000ce	3b f8		 cmp	 edi, eax
  000d0	0f 8f 3a 01 00
	00		 jg	 $LN10@Move

; 418  : 		{
; 419  : 			if ( (lpObj->Money - NeedZen ) >= 0 )

  000d6	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  000dc	2b c1		 sub	 eax, ecx
  000de	0f 88 0e 01 00
	00		 js	 $LN12@Move

; 420  : 			{
; 421  : 
; 422  : #if (__GENS_SYSTEM__ == 1)
; 423  : 
; 424  : 		BYTE mapNumber;
; 425  : 		BYTE dir;
; 426  : 		BYTE x;
; 427  : 		BYTE y;
; 428  : 		short level;
; 429  : 
; 430  : 		int result = gGateC.GetGate(GateNumber,x,y,(BYTE &)mapNumber,(BYTE &)dir,(short &)level);

  000e4	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _level$1[ebp]
  000ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGateC@@3VCGate@@A ; gGateC
  000ef	50		 push	 eax
  000f0	8d 85 fa fe ff
	ff		 lea	 eax, DWORD PTR _dir$4[ebp]
  000f6	50		 push	 eax
  000f7	8d 85 fb fe ff
	ff		 lea	 eax, DWORD PTR _mapNumber$5[ebp]
  000fd	50		 push	 eax
  000fe	8d 85 f9 fe ff
	ff		 lea	 eax, DWORD PTR _y$3[ebp]
  00104	50		 push	 eax
  00105	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _x$2[ebp]
  0010b	50		 push	 eax
  0010c	53		 push	 ebx
  0010d	e8 00 00 00 00	 call	 ?GetGate@CGate@@QAEHHAAE000AAF@Z ; CGate::GetGate

; 431  : 
; 432  : 		if( result < 0 )

  00112	85 c0		 test	 eax, eax
  00114	79 29		 jns	 SHORT $LN14@Move

; 433  : 		{
; 434  : 			LogAddTD("1[%s][%s] Use [%s %s] Fail GateNumber = %d",

  00116	53		 push	 ebx
  00117	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _mapname$GSCopy$1$[ebp]
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00122	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  00127	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0012c	50		 push	 eax
  0012d	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  00130	50		 push	 eax
  00131	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  00134	50		 push	 eax
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@EOBINLPM@1?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@

; 435  : 				lpObj->AccountID, lpObj->Name,
; 436  : 				lMsg.Get(MSGGET(11, 185)), mapname, GateNumber);
; 437  : 			return FALSE;

  0013a	e9 26 01 00 00	 jmp	 $LN19@Move
$LN14@Move:

; 438  : 		}
; 439  : 
; 440  : 		if( gGensSystem.GensMap(mapNumber) && lpObj->m_GensInfo.btFamily == GENS_NONE )

  0013f	0f b6 85 fb fe
	ff ff		 movzx	 eax, BYTE PTR _mapNumber$5[ebp]
  00146	b9 00 00 00 00	 mov	 ecx, OFFSET ?gGensSystem@@3VCGensSystem@@A ; gGensSystem
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?GensMap@CGensSystem@@QAEHH@Z ; CGensSystem::GensMap
  00151	85 c0		 test	 eax, eax
  00153	74 1f		 je	 SHORT $LN15@Move
  00155	80 be ac 26 00
	00 00		 cmp	 BYTE PTR [esi+9900], 0
  0015c	75 16		 jne	 SHORT $LN15@Move

; 441  : 		{
; 442  : 			GCServerMsgStringSend("You have not joined the gens and cannot enter the battle zone.",lpObj->m_Index,1);

  0015e	6a 01		 push	 1
  00160	ff 36		 push	 DWORD PTR [esi]
  00162	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@PMJPGPAA@You?5have?5not?5joined?5the?5gens?5and@
  00167	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 443  : 			return FALSE;

  0016f	e9 fa 00 00 00	 jmp	 $LN18@Move
$LN15@Move:

; 444  : 		}
; 445  : 
; 446  : #endif
; 447  : 
; 448  : 				if ( gObjMoveGate(lpObj->m_Index, GateNumber ) != FALSE )

  00174	53		 push	 ebx
  00175	ff 36		 push	 DWORD PTR [esi]
  00177	e8 00 00 00 00	 call	 ?gObjMoveGate@@YAHHH@Z	; gObjMoveGate
  0017c	83 c4 08	 add	 esp, 8
  0017f	85 c0		 test	 eax, eax
  00181	0f 84 ba 00 00
	00		 je	 $LN11@Move

; 449  : 				{
; 450  : 					lpObj->m_bPShopRedrawAbs = true;
; 451  : 					lpObj->Money -= NeedZen;

  00187	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _NeedZen$1$[ebp]

; 452  : 
; 453  : 					LogAddTD("[%s][%s] Use [%s %s] Success : reduces money %d - %d"

  0018d	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00192	29 86 cc 00 00
	00		 sub	 DWORD PTR [esi+204], eax
  00198	57		 push	 edi
  00199	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  0019f	c6 86 5f 12 00
	00 01		 mov	 BYTE PTR [esi+4703], 1
  001a6	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _mapname$GSCopy$1$[ebp]
  001ac	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  001b1	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  001b6	50		 push	 eax
  001b7	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  001ba	50		 push	 eax
  001bb	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  001be	50		 push	 eax
  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@GFFIBCDJ@?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Success?5?3?5r@
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD

; 454  : 						, lpObj->AccountID, lpObj->Name,
; 455  : 						lMsg.Get(MSGGET(11, 185)), mapname, lpObj->Money, NeedLevel);
; 456  : 
; 457  : 					GCMoneySend(lpObj->m_Index, lpObj->Money );

  001ca	ff b6 cc 00 00
	00		 push	 DWORD PTR [esi+204]
  001d0	ff 36		 push	 DWORD PTR [esi]
  001d2	e8 00 00 00 00	 call	 ?GCMoneySend@@YAXHK@Z	; GCMoneySend
  001d7	83 c4 24	 add	 esp, 36			; 00000024H

; 458  : 					return TRUE;

  001da	b8 01 00 00 00	 mov	 eax, 1
  001df	5f		 pop	 edi
  001e0	5e		 pop	 esi
  001e1	5b		 pop	 ebx

; 476  : 		lpObj->AccountID, lpObj->Name,
; 477  : 		lMsg.Get(MSGGET(11, 185)), mapname, GateNumber);
; 478  : 	return FALSE;
; 479  : 
; 480  : }

  001e2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e5	33 cd		 xor	 ecx, ebp
  001e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ec	8b e5		 mov	 esp, ebp
  001ee	5d		 pop	 ebp
  001ef	c2 08 00	 ret	 8
$LN12@Move:

; 459  : 				}
; 460  : 			}
; 461  : 			else
; 462  : 			{
; 463  : 				::GCServerMsgStringSend(lMsg.Get(MSGGET(4, 102)), lpObj->m_Index, 1);

  001f2	6a 01		 push	 1
  001f4	ff 36		 push	 DWORD PTR [esi]
  001f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  001fb	68 66 04 00 00	 push	 1126			; 00000466H
  00200	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00205	50		 push	 eax
  00206	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 464  : 			}
; 465  : 		}
; 466  : 		else

  0020e	eb 31		 jmp	 SHORT $LN11@Move
$LN10@Move:

; 467  : 		{
; 468  : 			char szTemp[256];
; 469  : 
; 470  : 			wsprintf(szTemp, lMsg.Get(MSGGET(4, 93)), NeedLevel);

  00210	57		 push	 edi
  00211	68 5d 04 00 00	 push	 1117			; 0000045dH
  00216	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0021b	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00220	50		 push	 eax
  00221	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$6[ebp]
  00227	50		 push	 eax
  00228	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfA

; 471  : 			::GCServerMsgStringSend(szTemp, lpObj->m_Index, 1);

  0022e	6a 01		 push	 1
  00230	ff 36		 push	 DWORD PTR [esi]
  00232	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$6[ebp]
  00238	50		 push	 eax
  00239	e8 00 00 00 00	 call	 ?GCServerMsgStringSend@@YAXPADHE@Z ; GCServerMsgStringSend
  0023e	83 c4 18	 add	 esp, 24			; 00000018H
$LN11@Move:

; 472  : 		}
; 473  : 	}
; 474  : 
; 475  : 	LogAddTD("2[%s][%s] Use [%s %s] Fail GateNumber = %d",

  00241	53		 push	 ebx
  00242	ff b5 f4 fe ff
	ff		 push	 DWORD PTR _mapname$GSCopy$1$[ebp]
  00248	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  0024d	68 b9 0b 00 00	 push	 3001			; 00000bb9H
  00252	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00257	50		 push	 eax
  00258	8d 46 5d	 lea	 eax, DWORD PTR [esi+93]
  0025b	50		 push	 eax
  0025c	8d 46 52	 lea	 eax, DWORD PTR [esi+82]
  0025f	50		 push	 eax
  00260	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@IHCMMAPB@2?$FL?$CFs?$FN?$FL?$CFs?$FN?5Use?5?$FL?$CFs?5?$CFs?$FN?5Fail?5GateN@
$LN19@Move:
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
  0026b	83 c4 18	 add	 esp, 24			; 00000018H
$LN18@Move:

; 476  : 		lpObj->AccountID, lpObj->Name,
; 477  : 		lMsg.Get(MSGGET(11, 185)), mapname, GateNumber);
; 478  : 	return FALSE;
; 479  : 
; 480  : }

  0026e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00271	33 c0		 xor	 eax, eax
  00273	5f		 pop	 edi
  00274	5e		 pop	 esi
  00275	33 cd		 xor	 ecx, ebp
  00277	5b		 pop	 ebx
  00278	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0027d	8b e5		 mov	 esp, ebp
  0027f	5d		 pop	 ebp
  00280	c2 08 00	 ret	 8
?Move@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@PAD@Z ENDP	; CMoveCommand::Move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::CheckInterfaceToMove, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 313  : 	if ( lpObj->m_IfState.use == 1 )

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _lpObj$[ebp]
  00006	8b 81 b8 11 00
	00		 mov	 eax, DWORD PTR [ecx+4536]
  0000c	24 03		 and	 al, 3
  0000e	3c 01		 cmp	 al, 1
  00010	75 06		 jne	 SHORT $LN2@CheckInter

; 314  : 	{
; 315  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax

; 319  : 	{
; 320  : 		return FALSE;
; 321  : 	}
; 322  : 
; 323  : 	return TRUE;
; 324  : }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
$LN2@CheckInter:

; 316  : 	}
; 317  : 
; 318  : 	if ( lpObj->m_bPShopOpen == true )

  00018	33 c0		 xor	 eax, eax
  0001a	80 b9 5c 12 00
	00 01		 cmp	 BYTE PTR [ecx+4700], 1
  00021	0f 95 c0	 setne	 al

; 319  : 	{
; 320  : 		return FALSE;
; 321  : 	}
; 322  : 
; 323  : 	return TRUE;
; 324  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?CheckInterfaceToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::CheckInterfaceToMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
_iTargetMapNumber$ = 12					; size = 4
?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z PROC ; CMoveCommand::CheckEquipmentToMove, COMDAT
; _this$ = ecx

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 252  : 	if ( iTargetMapNumber == MAP_INDEX_ATHLANSE )

  00003	8b 45 0c	 mov	 eax, DWORD PTR _iTargetMapNumber$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	83 f8 07	 cmp	 eax, 7
  0000b	75 49		 jne	 SHORT $LN5@CheckEquip

; 253  : 	{
; 254  : 		if ( lpObj->pInventory[8].IsItem() != FALSE )

  0000d	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00010	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  00016	81 c1 a0 06 00
	00		 add	 ecx, 1696		; 000006a0H
  0001c	e8 00 00 00 00	 call	 ?IsItem@CItem@@QAEHXZ	; CItem::IsItem
  00021	85 c0		 test	 eax, eax
  00023	0f 84 26 01 00
	00		 je	 $LN13@CheckEquip

; 255  : 		{
; 256  : 			if ( lpObj->pInventory[8].m_Type == ITEMGET(13,2) ) // Uniria

  00029	8b 86 c0 11 00
	00		 mov	 eax, DWORD PTR [esi+4544]
  0002f	b9 02 1a 00 00	 mov	 ecx, 6658		; 00001a02H
  00034	0f b7 80 a6 06
	00 00		 movzx	 eax, WORD PTR [eax+1702]
  0003b	66 3b c1	 cmp	 ax, cx
  0003e	74 0e		 je	 SHORT $LN15@CheckEquip

; 257  : 			{
; 258  : 				return FALSE;
; 259  : 			}
; 260  : 
; 261  : 			if ( lpObj->pInventory[8].m_Type == ITEMGET(13,3) ) // Dino

  00040	b9 03 1a 00 00	 mov	 ecx, 6659		; 00001a03H
  00045	66 3b c1	 cmp	 ax, cx
  00048	0f 85 01 01 00
	00		 jne	 $LN13@CheckEquip
$LN15@CheckEquip:
  0004e	5f		 pop	 edi

; 262  : 			{
; 263  : 				return FALSE;

  0004f	33 c0		 xor	 eax, eax
  00051	5e		 pop	 esi

; 305  : }

  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN5@CheckEquip:

; 264  : 			}
; 265  : 		}
; 266  : 	}
; 267  : 
; 268  : 	if ( iTargetMapNumber == MAP_INDEX_ICARUS )

  00056	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00059	0f 85 f0 00 00
	00		 jne	 $LN13@CheckEquip

; 269  : 	{
; 270  : 		if ( (lpObj->pInventory[8].m_Type != ITEMGET(13,3) &&
; 271  : 			 lpObj->pInventory[7].m_Type != ITEMGET(13,30) &&
; 272  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,49) &&
; 273  : 			 lpObj->pInventory[7].m_Type != ITEMGET(12,50) &&
; 274  : 			 lpObj->pInventory[8].m_Type != ITEMGET(13,37) &&
; 275  : 			 (lpObj->pInventory[7].m_Type < ITEMGET(12,0) || lpObj->pInventory[7].m_Type > ITEMGET(12,6)) &&
; 276  : 			 (lpObj->pInventory[7].m_Type < ITEMGET(12,36) || lpObj->pInventory[7].m_Type > ITEMGET(12,43)) &&
; 277  : 			 (lpObj->pInventory[7].m_Type < ITEMGET(12,130) || lpObj->pInventory[7].m_Type > ITEMGET(12,135)) &&
; 278  : 			 (lpObj->pInventory[7].m_Type < ITEMGET(12,262) || lpObj->pInventory[7].m_Type > ITEMGET(12,267)) ) ||
; 279  : 			 lpObj->pInventory[8].m_Type == ITEMGET(13,2) ||
; 280  : 			 lpObj->pInventory[11].m_Type == ITEMGET(13,10) ||

  0005f	8b 75 08	 mov	 esi, DWORD PTR _lpObj$[ebp]
  00062	b8 03 1a 00 00	 mov	 eax, 6659		; 00001a03H
  00067	8b 8e c0 11 00
	00		 mov	 ecx, DWORD PTR [esi+4544]
  0006d	0f b7 91 a6 06
	00 00		 movzx	 edx, WORD PTR [ecx+1702]
  00074	66 3b d0	 cmp	 dx, ax
  00077	0f 84 87 00 00
	00		 je	 $LN9@CheckEquip
  0007d	0f b7 81 d2 05
	00 00		 movzx	 eax, WORD PTR [ecx+1490]
  00084	bf 1e 1a 00 00	 mov	 edi, 6686		; 00001a1eH
  00089	66 3b c7	 cmp	 ax, di
  0008c	74 76		 je	 SHORT $LN9@CheckEquip
  0008e	bf 31 18 00 00	 mov	 edi, 6193		; 00001831H
  00093	66 3b c7	 cmp	 ax, di
  00096	74 6c		 je	 SHORT $LN9@CheckEquip
  00098	bf 32 18 00 00	 mov	 edi, 6194		; 00001832H
  0009d	66 3b c7	 cmp	 ax, di
  000a0	74 62		 je	 SHORT $LN9@CheckEquip
  000a2	bf 25 1a 00 00	 mov	 edi, 6693		; 00001a25H
  000a7	66 3b d7	 cmp	 dx, di
  000aa	74 58		 je	 SHORT $LN9@CheckEquip
  000ac	bf 00 18 00 00	 mov	 edi, 6144		; 00001800H
  000b1	66 3b c7	 cmp	 ax, di
  000b4	7c 0a		 jl	 SHORT $LN10@CheckEquip
  000b6	bf 06 18 00 00	 mov	 edi, 6150		; 00001806H
  000bb	66 3b c7	 cmp	 ax, di
  000be	7e 44		 jle	 SHORT $LN9@CheckEquip
$LN10@CheckEquip:
  000c0	bf 24 18 00 00	 mov	 edi, 6180		; 00001824H
  000c5	66 3b c7	 cmp	 ax, di
  000c8	7c 0a		 jl	 SHORT $LN11@CheckEquip
  000ca	bf 2b 18 00 00	 mov	 edi, 6187		; 0000182bH
  000cf	66 3b c7	 cmp	 ax, di
  000d2	7e 30		 jle	 SHORT $LN9@CheckEquip
$LN11@CheckEquip:
  000d4	bf 82 18 00 00	 mov	 edi, 6274		; 00001882H
  000d9	66 3b c7	 cmp	 ax, di
  000dc	7c 0a		 jl	 SHORT $LN12@CheckEquip
  000de	bf 87 18 00 00	 mov	 edi, 6279		; 00001887H
  000e3	66 3b c7	 cmp	 ax, di
  000e6	7e 1c		 jle	 SHORT $LN9@CheckEquip
$LN12@CheckEquip:
  000e8	bf 06 19 00 00	 mov	 edi, 6406		; 00001906H
  000ed	66 3b c7	 cmp	 ax, di
  000f0	0f 8c 58 ff ff
	ff		 jl	 $LN15@CheckEquip
  000f6	bf 0b 19 00 00	 mov	 edi, 6411		; 0000190bH
  000fb	66 3b c7	 cmp	 ax, di
  000fe	0f 8f 4a ff ff
	ff		 jg	 $LN15@CheckEquip
$LN9@CheckEquip:
  00104	b8 02 1a 00 00	 mov	 eax, 6658		; 00001a02H
  00109	66 3b d0	 cmp	 dx, ax
  0010c	0f 84 3c ff ff
	ff		 je	 $LN15@CheckEquip
  00112	b8 0a 1a 00 00	 mov	 eax, 6666		; 00001a0aH
  00117	66 39 81 22 09
	00 00		 cmp	 WORD PTR [ecx+2338], ax
  0011e	0f 84 2a ff ff
	ff		 je	 $LN15@CheckEquip
  00124	66 39 81 4e 08
	00 00		 cmp	 WORD PTR [ecx+2126], ax
  0012b	0f 84 1d ff ff
	ff		 je	 $LN15@CheckEquip

; 281  : 			 lpObj->pInventory[10].m_Type == ITEMGET(13,10) )
; 282  : 		{
; 283  : #if( CUSTOM_WINGS == 1)
; 284  : 			if( lpObj->pInventory[7].m_Type >= ITEMGET(12,440) && lpObj->pInventory[7].m_Type <= ITEMGET(12,445))
; 285  : 			{
; 286  : 
; 287  : 			}
; 288  : 			else
; 289  : 			{
; 290  : 				return FALSE;
; 291  : 			}
; 292  : #else
; 293  : 			return FALSE;
; 294  : #endif
; 295  : 		}
; 296  : 
; 297  : 		if ( lpObj->m_RecallMon >= 0 )

  00131	83 be 30 06 00
	00 00		 cmp	 DWORD PTR [esi+1584], 0
  00138	7c 15		 jl	 SHORT $LN13@CheckEquip

; 298  : 		{
; 299  : 			GCRecallMonLife(lpObj->m_Index, 60, 0);

  0013a	6a 00		 push	 0
  0013c	6a 3c		 push	 60			; 0000003cH
  0013e	ff 36		 push	 DWORD PTR [esi]
  00140	e8 00 00 00 00	 call	 ?GCRecallMonLife@@YAXHHH@Z ; GCRecallMonLife

; 300  : 			gObjMonsterCallKill(lpObj->m_Index);

  00145	ff 36		 push	 DWORD PTR [esi]
  00147	e8 00 00 00 00	 call	 ?gObjMonsterCallKill@@YAXH@Z ; gObjMonsterCallKill
  0014c	83 c4 10	 add	 esp, 16			; 00000010H
$LN13@CheckEquip:

; 301  : 		}
; 302  : 	}
; 303  : 
; 304  : 	return TRUE;

  0014f	5f		 pop	 edi
  00150	b8 01 00 00 00	 mov	 eax, 1
  00155	5e		 pop	 esi

; 305  : }

  00156	5d		 pop	 ebp
  00157	c2 08 00	 ret	 8
?CheckEquipmentToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@H@Z ENDP ; CMoveCommand::CheckEquipmentToMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z
_TEXT	SEGMENT
_lpObj$ = 8						; size = 4
?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z PROC ; CMoveCommand::CheckMainToMove, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 197  : 	if ( BC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00003	8b 45 08	 mov	 eax, DWORD PTR _lpObj$[ebp]
  00006	8a 88 23 01 00
	00		 mov	 cl, BYTE PTR [eax+291]
  0000c	80 f9 34	 cmp	 cl, 52			; 00000034H
  0000f	0f 84 a5 00 00
	00		 je	 $LN33@CheckMainT
  00015	80 f9 0b	 cmp	 cl, 11			; 0000000bH
  00018	72 0f		 jb	 SHORT $LN2@CheckMainT
  0001a	b0 11		 mov	 al, 17			; 00000011H
  0001c	3a c1		 cmp	 al, cl
  0001e	1b c0		 sbb	 eax, eax
  00020	83 c0 01	 add	 eax, 1
  00023	0f 85 91 00 00
	00		 jne	 $LN33@CheckMainT
$LN2@CheckMainT:

; 200  : 	}
; 201  : 
; 202  : 	if ( CC_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00029	80 f9 35	 cmp	 cl, 53			; 00000035H
  0002c	0f 84 88 00 00
	00		 je	 $LN33@CheckMainT
  00032	80 f9 12	 cmp	 cl, 18			; 00000012H
  00035	72 0b		 jb	 SHORT $LN3@CheckMainT
  00037	b0 17		 mov	 al, 23			; 00000017H
  00039	3a c1		 cmp	 al, cl
  0003b	1b c0		 sbb	 eax, eax
  0003d	83 c0 01	 add	 eax, 1
  00040	75 78		 jne	 SHORT $LN33@CheckMainT
$LN3@CheckMainT:

; 203  : 	{
; 204  : 		return FALSE;
; 205  : 	}
; 206  : 
; 207  : 	if ( KALIMA_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00042	80 f9 18	 cmp	 cl, 24			; 00000018H
  00045	72 11		 jb	 SHORT $LN4@CheckMainT
  00047	80 f9 1d	 cmp	 cl, 29			; 0000001dH
  0004a	76 6e		 jbe	 SHORT $LN33@CheckMainT
  0004c	33 c0		 xor	 eax, eax
  0004e	80 f9 24	 cmp	 cl, 36			; 00000024H
  00051	0f 94 c0	 sete	 al
  00054	85 c0		 test	 eax, eax
  00056	75 62		 jne	 SHORT $LN33@CheckMainT
$LN4@CheckMainT:

; 208  : 	{
; 209  : 		return FALSE;
; 210  : 	}
; 211  : 
; 212  : 	if ( DS_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00058	80 f9 09	 cmp	 cl, 9
  0005b	74 5d		 je	 SHORT $LN33@CheckMainT
  0005d	33 c0		 xor	 eax, eax
  0005f	80 f9 20	 cmp	 cl, 32			; 00000020H
  00062	0f 94 c0	 sete	 al
  00065	85 c0		 test	 eax, eax
  00067	75 51		 jne	 SHORT $LN33@CheckMainT

; 213  : 	{
; 214  : 		return FALSE;
; 215  : 	}
; 216  : 
; 217  : 	if ( lpObj->MapNumber == MAP_INDEX_KANTURU_BOSS )

  00069	80 f9 27	 cmp	 cl, 39			; 00000027H
  0006c	74 4c		 je	 SHORT $LN33@CheckMainT

; 218  : 	{
; 219  : 		return FALSE;
; 220  : 	}
; 221  : 
; 222  : 	if ( lpObj->MapNumber == MAP_INDEX_BARRACKS
; 223  : 		|| lpObj->MapNumber == MAP_INDEX_REFUGE )

  0006e	80 f9 29	 cmp	 cl, 41			; 00000029H
  00071	74 47		 je	 SHORT $LN33@CheckMainT
  00073	80 f9 2a	 cmp	 cl, 42			; 0000002aH
  00076	74 42		 je	 SHORT $LN33@CheckMainT

; 224  : 	{
; 225  : 		return FALSE;
; 226  : 	}
; 227  : 
; 228  : 	if ( IT_MAP_RANGE(lpObj->MapNumber) != FALSE )

  00078	80 f9 2d	 cmp	 cl, 45			; 0000002dH
  0007b	72 0e		 jb	 SHORT $LN9@CheckMainT
  0007d	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00082	3a c1		 cmp	 al, cl
  00084	1b c0		 sbb	 eax, eax
  00086	83 c0 01	 add	 eax, 1
  00089	75 2f		 jne	 SHORT $LN33@CheckMainT
$LN9@CheckMainT:

; 229  : 	{
; 230  : 		return FALSE;
; 231  : 	}
; 232  : 
; 233  : 	if ( DG_MAP_RANGE(lpObj->MapNumber) )

  0008b	80 f9 41	 cmp	 cl, 65			; 00000041H
  0008e	72 0e		 jb	 SHORT $LN10@CheckMainT
  00090	b8 44 00 00 00	 mov	 eax, 68			; 00000044H
  00095	3a c1		 cmp	 al, cl
  00097	1b c0		 sbb	 eax, eax
  00099	83 c0 01	 add	 eax, 1
  0009c	75 1c		 jne	 SHORT $LN33@CheckMainT
$LN10@CheckMainT:

; 234  : 	{
; 235  : 		return FALSE;
; 236  : 	}
; 237  : 
; 238  : 	if ( IF_MAP_RANGE(lpObj->MapNumber) )

  0009e	80 f9 45	 cmp	 cl, 69			; 00000045H
  000a1	72 0e		 jb	 SHORT $LN11@CheckMainT
  000a3	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  000a8	3a c1		 cmp	 al, cl
  000aa	1b c0		 sbb	 eax, eax
  000ac	83 c0 01	 add	 eax, 1
  000af	75 09		 jne	 SHORT $LN33@CheckMainT
$LN11@CheckMainT:

; 239  : 	{
; 240  : 		return FALSE;
; 241  : 	}
; 242  : 
; 243  : 	return TRUE;

  000b1	b8 01 00 00 00	 mov	 eax, 1

; 244  : }

  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
$LN33@CheckMainT:

; 198  : 	{
; 199  : 		return FALSE;

  000ba	33 c0		 xor	 eax, eax

; 244  : }

  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
?CheckMainToMove@CMoveCommand@@QAEHPAUOBJECTSTRUCT@@@Z ENDP ; CMoveCommand::CheckMainToMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$1$ = -4						; size = 4
_mapnumber$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Class$ = 20						; size = 4
?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z PROC		; CMoveCommand::GetMoveLevel, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00006	8b 91 28 67 00
	00		 mov	 edx, DWORD PTR [ecx+26408]
  0000c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00011	2b 91 24 67 00
	00		 sub	 edx, DWORD PTR [ecx+26404]
  00017	f7 ea		 imul	 edx
  00019	53		 push	 ebx
  0001a	c1 fa 02	 sar	 edx, 2
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 172  : 	for( int i=0;i< this->m_MoveLevel.size();i++)

  0001d	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0001f	8b c2		 mov	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 171  : {

  00021	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	56		 push	 esi
  00028	57		 push	 edi
  00029	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 172  : 	for( int i=0;i< this->m_MoveLevel.size();i++)

  0002b	0f 84 9f 00 00
	00		 je	 $LN114@GetMoveLev
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  00031	8b 75 10	 mov	 esi, DWORD PTR _y$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00034	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  00036	8b 7d 0c	 mov	 edi, DWORD PTR _x$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00039	8b 88 24 67 00
	00		 mov	 ecx, DWORD PTR [eax+26404]
  0003f	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  00042	83 c1 08	 add	 ecx, 8
$LL4@GetMoveLev:
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 174  : 		if ( this->m_MoveLevel[i].MapNumber == mapnumber )

  00045	8b 55 08	 mov	 edx, DWORD PTR _mapnumber$[ebp]
  00048	39 51 fc	 cmp	 DWORD PTR [ecx-4], edx
  0004b	75 13		 jne	 SHORT $LN2@GetMoveLev

; 175  : 		{
; 176  : 			if ( x >= this->m_MoveLevel[i].X && x <= this->m_MoveLevel[i].TX && y >= this->m_MoveLevel[i].Y && y <= this->m_MoveLevel[i].TY )

  0004d	3b 39		 cmp	 edi, DWORD PTR [ecx]
  0004f	7c 0f		 jl	 SHORT $LN2@GetMoveLev
  00051	3b 79 08	 cmp	 edi, DWORD PTR [ecx+8]
  00054	7f 0a		 jg	 SHORT $LN2@GetMoveLev
  00056	3b 71 04	 cmp	 esi, DWORD PTR [ecx+4]
  00059	7c 05		 jl	 SHORT $LN2@GetMoveLev
  0005b	3b 71 0c	 cmp	 esi, DWORD PTR [ecx+12]
  0005e	7e 2a		 jle	 SHORT $LN110@GetMoveLev
$LN2@GetMoveLev:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00060	8b 90 28 67 00
	00		 mov	 edx, DWORD PTR [eax+26408]
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 172  : 	for( int i=0;i< this->m_MoveLevel.size();i++)

  00066	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00067	2b 90 24 67 00
	00		 sub	 edx, DWORD PTR [eax+26404]
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 172  : 	for( int i=0;i< this->m_MoveLevel.size();i++)

  0006d	83 c1 18	 add	 ecx, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00070	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00075	f7 ea		 imul	 edx
  00077	c1 fa 02	 sar	 edx, 2
  0007a	8b c2		 mov	 eax, edx
  0007c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007f	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 172  : 	for( int i=0;i< this->m_MoveLevel.size();i++)

  00081	3b d8		 cmp	 ebx, eax
  00083	73 4b		 jae	 SHORT $LN114@GetMoveLev
  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00088	eb bb		 jmp	 SHORT $LL4@GetMoveLev
$LN110@GetMoveLev:

; 177  : 			{
; 178  : 				if ( Class == CLASS_DARKLORD || Class == CLASS_MAGUMSA || Class == CLASS_FIGHTER )

  0008a	8b 4d 14	 mov	 ecx, DWORD PTR _Class$[ebp]
  0008d	83 f9 04	 cmp	 ecx, 4
  00090	74 1c		 je	 SHORT $LN9@GetMoveLev
  00092	83 f9 03	 cmp	 ecx, 3
  00095	74 17		 je	 SHORT $LN9@GetMoveLev
  00097	83 f9 06	 cmp	 ecx, 6
  0009a	74 12		 je	 SHORT $LN9@GetMoveLev

; 184  : 					return this->m_MoveLevel[i].MoveLevel;

  0009c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0009f	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 184  : 					return this->m_MoveLevel[i].MoveLevel;

  000a5	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]

; 191  : }

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 10 00	 ret	 16			; 00000010H
$LN9@GetMoveLev:

; 180  : 					return this->m_MoveLevel[i].MoveLevel * 2 / 3;

  000ae	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  000b1	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 180  : 					return this->m_MoveLevel[i].MoveLevel * 2 / 3;

  000b7	8b 0c c1	 mov	 ecx, DWORD PTR [ecx+eax*8]
  000ba	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  000bf	03 c9		 add	 ecx, ecx
  000c1	f7 e9		 imul	 ecx
  000c3	8b c2		 mov	 eax, edx
  000c5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000c8	03 c2		 add	 eax, edx

; 191  : }

  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c2 10 00	 ret	 16			; 00000010H
$LN114@GetMoveLev:
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi

; 185  : 				}
; 186  : 			}
; 187  : 		}
; 188  : 	}
; 189  : 
; 190  : 	return -1;

  000d2	83 c8 ff	 or	 eax, -1
  000d5	5b		 pop	 ebx

; 191  : }

  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 10 00	 ret	 16			; 00000010H
?GetMoveLevel@CMoveCommand@@QAEHHHHH@Z ENDP		; CMoveCommand::GetMoveLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z
_TEXT	SEGMENT
_Result$ = -288						; size = 12
$T2 = -276						; size = 4
$T3 = -272						; size = 4
$T4 = -268						; size = 4
$T5 = -264						; size = 4
$T6 = -260						; size = 4
$T7 = -256						; size = 4
$T8 = -252						; size = 4
_MoveLevel$ = -248					; size = 4
_Move$9 = -244						; size = 4
_Document$ = -240					; size = 200
_lpInfo$10 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z PROC		; CMoveCommand::LoadMoveLevel, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]

; 86   : 	int MapCount = 0;
; 87   : 	xml_document Document;

  00032	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 88   : 	xml_parse_result Result = Document.load_file(filename);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	56		 push	 esi
  00042	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 89   : 	// ----
; 90   : 	if( Result.status != status_ok )

  0005b	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0
  00062	74 15		 je	 SHORT $LN5@LoadMoveLe

; 91   : 	{
; 92   : 		MsgBox("[MoveLevel] Loading fail [%s]", filename);

  00064	56		 push	 esi
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@FCPELHNC@?$FLMoveLevel?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@
  0006a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0006f	83 c4 08	 add	 esp, 8
  00072	33 f6		 xor	 esi, esi
  00074	e9 5a 01 00 00	 jmp	 $LN8@LoadMoveLe
$LN5@LoadMoveLe:

; 93   : 		return 0;
; 94   : 	}
; 95   : 	// ----
; 96   : 	xml_node MoveLevel = Document.child("movelevel");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_09OPODEIFF@movelevel?$AA@
  0007e	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _MoveLevel$[ebp]
  00084	50		 push	 eax
  00085	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0008b	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 97   : 	// ----
; 98   : 	for( xml_node Move = MoveLevel.child("move"); Move; Move = Move.next_sibling() )

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_04HDMMNHEL@move?$AA@
  00095	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _Move$9[ebp]
  0009b	50		 push	 eax
  0009c	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR _MoveLevel$[ebp]
  000a2	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000a7	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  000ad	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000b2	85 c0		 test	 eax, eax
  000b4	0f 84 14 01 00
	00		 je	 $LN3@LoadMoveLe
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL4@LoadMoveLe:

; 99   : 	{
; 100  : 		MOVE_MOVE_LEVEL lpInfo;
; 101  : 		lpInfo.MoveLevel = Move.attribute("level").as_int();

  000c0	6a 00		 push	 0
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_05KJNJLLGA@level?$AA@
  000c7	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  000cd	50		 push	 eax
  000ce	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  000d4	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000d9	8b c8		 mov	 ecx, eax
  000db	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 102  : 		lpInfo.MapNumber = Move.attribute("map").as_int();

  000e0	6a 00		 push	 0
  000e2	89 45 d8	 mov	 DWORD PTR _lpInfo$10[ebp], eax
  000e5	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  000eb	68 00 00 00 00	 push	 OFFSET ??_C@_03HBNNNHNM@map?$AA@
  000f0	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  000f6	50		 push	 eax
  000f7	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000fc	8b c8		 mov	 ecx, eax
  000fe	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 103  : 		lpInfo.X = Move.attribute("x1").as_int();

  00103	6a 00		 push	 0
  00105	89 45 dc	 mov	 DWORD PTR _lpInfo$10[ebp+4], eax
  00108	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  0010e	68 00 00 00 00	 push	 OFFSET ??_C@_02JMABBILH@x1?$AA@
  00113	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00119	50		 push	 eax
  0011a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0011f	8b c8		 mov	 ecx, eax
  00121	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 104  : 		lpInfo.Y = Move.attribute("y1").as_int();

  00126	6a 00		 push	 0
  00128	89 45 e0	 mov	 DWORD PTR _lpInfo$10[ebp+8], eax
  0012b	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00131	68 00 00 00 00	 push	 OFFSET ??_C@_02JNMDHCIA@y1?$AA@
  00136	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00142	8b c8		 mov	 ecx, eax
  00144	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 105  : 		lpInfo.TX = Move.attribute("x2").as_int();

  00149	6a 00		 push	 0
  0014b	89 45 e4	 mov	 DWORD PTR _lpInfo$10[ebp+12], eax
  0014e	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_02LHCMELHE@x2?$AA@
  00159	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00165	8b c8		 mov	 ecx, eax
  00167	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 106  : 		lpInfo.TY = Move.attribute("y2").as_int();

  0016c	6a 00		 push	 0
  0016e	89 45 e8	 mov	 DWORD PTR _lpInfo$10[ebp+16], eax
  00171	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00177	68 00 00 00 00	 push	 OFFSET ??_C@_02LGOOCBED@y2?$AA@
  0017c	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00188	8b c8		 mov	 ecx, eax
  0018a	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  0018f	89 45 ec	 mov	 DWORD PTR _lpInfo$10[ebp+20], eax

; 107  : 		this->m_MoveLevel.push_back(lpInfo);

  00192	8d 8f 24 67 00
	00		 lea	 ecx, DWORD PTR [edi+26404]
  00198	8d 45 d8	 lea	 eax, DWORD PTR _lpInfo$10[ebp]
  0019b	50		 push	 eax
  0019c	e8 00 00 00 00	 call	 ?push_back@?$vector@UMOVE_MOVE_LEVEL@@V?$allocator@UMOVE_MOVE_LEVEL@@@std@@@std@@QAEXABUMOVE_MOVE_LEVEL@@@Z ; std::vector<MOVE_MOVE_LEVEL,std::allocator<MOVE_MOVE_LEVEL> >::push_back
  001a1	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  001a7	50		 push	 eax
  001a8	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  001ae	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  001b3	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  001b9	8b 00		 mov	 eax, DWORD PTR [eax]
  001bb	89 85 0c ff ff
	ff		 mov	 DWORD PTR _Move$9[ebp], eax
  001c1	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  001c6	85 c0		 test	 eax, eax
  001c8	0f 85 f2 fe ff
	ff		 jne	 $LL4@LoadMoveLe
$LN3@LoadMoveLe:

; 108  : 	}
; 109  : 	return 1;

  001ce	be 01 00 00 00	 mov	 esi, 1
$LN8@LoadMoveLe:
  001d3	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  001d9	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  001de	8b c6		 mov	 eax, esi

; 110  : 	/*int Token;
; 111  : 	int counter;
; 112  : 
; 113  : 	memset(this->m_MoveLevel, -1, sizeof(this->m_MoveLevel));
; 114  : 
; 115  : 	SMDFile=fopen(filename, "r");
; 116  : 
; 117  : 	if ( SMDFile == 0 )
; 118  : 	{
; 119  : 		MsgBox("MoveLevel %s File Load Error", filename);
; 120  : 		return 0;
; 121  : 	}
; 122  : 
; 123  : 	counter=0;
; 124  : 
; 125  : 	while ( true )
; 126  : 	{
; 127  : 		Token=GetToken();
; 128  : 
; 129  : 		if ( Token == 2)
; 130  : 		{
; 131  : 			break;
; 132  : 		}
; 133  : 		
; 134  : 		
; 135  : 		if ( Token == 1)
; 136  : 		{
; 137  : 			this->m_MoveLevel[counter].MoveLevel = (int)TokenNumber;
; 138  : 
; 139  : 			Token = GetToken();
; 140  : 			this->m_MoveLevel[counter].MapNumber = (int)TokenNumber;
; 141  : 
; 142  : 			Token = GetToken();
; 143  : 			this->m_MoveLevel[counter].X = (int)TokenNumber;
; 144  : 
; 145  : 			Token = GetToken();
; 146  : 			this->m_MoveLevel[counter].Y = (int)TokenNumber;
; 147  : 
; 148  : 			Token = GetToken();
; 149  : 			this->m_MoveLevel[counter].TX = (int)TokenNumber;
; 150  : 
; 151  : 			Token = GetToken();
; 152  : 			this->m_MoveLevel[counter].TY = (int)TokenNumber;
; 153  : 
; 154  : 			counter++;
; 155  : 		}
; 156  : 		else
; 157  : 		{
; 158  : 			this->Init();
; 159  : 			fclose(SMDFile);
; 160  : 			MsgBox("MoveLevel script load fail");
; 161  : 			return FALSE;
; 162  : 		}
; 163  : 	}
; 164  : 	fclose(SMDFile);
; 165  : 	return TRUE;*/
; 166  : }

  001e0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ea	59		 pop	 ecx
  001eb	5f		 pop	 edi
  001ec	5e		 pop	 esi
  001ed	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	33 cd		 xor	 ecx, ebp
  001f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z$0:
  00000	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadMoveLevel@CMoveCommand@@QAEHPAD@Z ENDP		; CMoveCommand::LoadMoveLevel
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?Load@CMoveCommand@@QAEHPAD@Z
_TEXT	SEGMENT
_Result$ = -264						; size = 12
$T2 = -252						; size = 4
$T3 = -248						; size = 4
$T4 = -244						; size = 4
$T5 = -240						; size = 4
$T6 = -236						; size = 4
$T7 = -232						; size = 4
$T8 = -228						; size = 4
_MoveList$ = -224					; size = 4
_Move$9 = -220						; size = 4
_Document$ = -216					; size = 200
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?Load@CMoveCommand@@QAEHPAD@Z PROC			; CMoveCommand::Load, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CMoveCommand@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]

; 57   : 	int MapCount = 0;
; 58   : 	xml_document Document;

  00032	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 59   : 	xml_parse_result Result = Document.load_file(filename);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	56		 push	 esi
  00042	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 60   : 	// ----
; 61   : 	if( Result.status != status_ok )

  0005b	83 bd f8 fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0
  00062	74 15		 je	 SHORT $LN5@Load

; 62   : 	{
; 63   : 		MsgBox("[MoveList] Loading fail [%s]", filename);

  00064	56		 push	 esi
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JDGONFBC@?$FLMoveList?$FN?5Loading?5fail?5?$FL?$CFs?$FN?$AA@
  0006a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0006f	83 c4 08	 add	 esp, 8
  00072	33 f6		 xor	 esi, esi
  00074	e9 73 01 00 00	 jmp	 $LN10@Load
$LN5@Load:

; 64   : 		return 0;
; 65   : 	}
; 66   : 	// ----
; 67   : 	xml_node MoveList = Document.child("movelist");

  00079	68 00 00 00 00	 push	 OFFSET ??_C@_08GNJIAMHD@movelist?$AA@
  0007e	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _MoveList$[ebp]
  00084	50		 push	 eax
  00085	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  0008b	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 68   : 	// ----
; 69   : 	for( xml_node Move = MoveList.child("move"); Move; Move = Move.next_sibling() )

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_04HDMMNHEL@move?$AA@
  00095	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _Move$9[ebp]
  0009b	50		 push	 eax
  0009c	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _MoveList$[ebp]
  000a2	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000a7	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  000ad	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000b2	85 c0		 test	 eax, eax
  000b4	0f 84 2d 01 00
	00		 je	 $LN3@Load

; 64   : 		return 0;
; 65   : 	}
; 66   : 	// ----
; 67   : 	xml_node MoveList = Document.child("movelist");

  000ba	8d b7 08 02 00
	00		 lea	 esi, DWORD PTR [edi+520]
$LL4@Load:

; 70   : 	{
; 71   : 		this->m_MoveCommandData[MapCount].Index			= Move.attribute("id").as_int();

  000c0	6a 00		 push	 0
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_02EGCJHIOB@id?$AA@
  000c7	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  000cd	50		 push	 eax
  000ce	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  000d4	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000d9	8b c8		 mov	 ecx, eax
  000db	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 72   : 		this->m_MoveCommandData[MapCount].NeedZen		= Move.attribute("money").as_int();

  000e0	6a 00		 push	 0
  000e2	89 86 fc fd ff
	ff		 mov	 DWORD PTR [esi-516], eax
  000e8	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  000ee	68 00 00 00 00	 push	 OFFSET ??_C@_05IKCNOJAA@money?$AA@
  000f3	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000ff	8b c8		 mov	 ecx, eax
  00101	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 73   : 		this->m_MoveCommandData[MapCount].NeedLevel		= Move.attribute("level").as_int();

  00106	6a 00		 push	 0
  00108	89 06		 mov	 DWORD PTR [esi], eax
  0010a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00110	68 00 00 00 00	 push	 OFFSET ??_C@_05KJNJLLGA@level?$AA@
  00115	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00121	8b c8		 mov	 ecx, eax
  00123	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 74   : 		this->m_MoveCommandData[MapCount].GateNumber	= Move.attribute("gate").as_int();

  00128	6a 00		 push	 0
  0012a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0012d	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00133	68 00 00 00 00	 push	 OFFSET ??_C@_04NKCHGMLH@gate?$AA@
  00138	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0013e	50		 push	 eax
  0013f	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00144	8b c8		 mov	 ecx, eax
  00146	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  0014b	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 75   : 		strcpy(this->m_MoveCommandData[MapCount].Name, Move.text().as_string());

  0014e	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00159	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  00165	8b c8		 mov	 ecx, eax
  00167	e8 00 00 00 00	 call	 ?as_string@xml_text@pugi@@QBEPBDPBD@Z ; pugi::xml_text::as_string
  0016c	8b c8		 mov	 ecx, eax
  0016e	8b d6		 mov	 edx, esi
  00170	2b d1		 sub	 edx, ecx
$LL7@Load:
  00172	8a 01		 mov	 al, BYTE PTR [ecx]
  00174	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00177	88 84 0a ff fd
	ff ff		 mov	 BYTE PTR [edx+ecx-513], al
  0017e	84 c0		 test	 al, al
  00180	75 f0		 jne	 SHORT $LL7@Load

; 76   : 		strcpy(this->m_MoveCommandData[MapCount].EngName, Move.text().as_string());

  00182	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00187	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0018d	50		 push	 eax
  0018e	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  00194	e8 00 00 00 00	 call	 ?text@xml_node@pugi@@QBE?AVxml_text@2@XZ ; pugi::xml_node::text
  00199	8b c8		 mov	 ecx, eax
  0019b	e8 00 00 00 00	 call	 ?as_string@xml_text@pugi@@QBEPBDPBD@Z ; pugi::xml_text::as_string
  001a0	8b d6		 mov	 edx, esi
  001a2	2b d0		 sub	 edx, eax
$LL8@Load:
  001a4	8a 08		 mov	 cl, BYTE PTR [eax]
  001a6	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  001a9	88 8c 02 fe fe
	ff ff		 mov	 BYTE PTR [edx+eax-258], cl
  001b0	84 c9		 test	 cl, cl
  001b2	75 f0		 jne	 SHORT $LL8@Load

; 77   : 		MapCount++;

  001b4	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  001ba	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  001c0	50		 push	 eax
  001c1	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  001c7	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  001cc	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _Move$9[ebp]
  001d2	8b 00		 mov	 eax, DWORD PTR [eax]
  001d4	89 85 24 ff ff
	ff		 mov	 DWORD PTR _Move$9[ebp], eax
  001da	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  001df	85 c0		 test	 eax, eax
  001e1	0f 85 d9 fe ff
	ff		 jne	 $LL4@Load
$LN3@Load:

; 78   : 	}
; 79   : 	// ----
; 80   : 	return 1;

  001e7	be 01 00 00 00	 mov	 esi, 1
$LN10@Load:
  001ec	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  001f2	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  001f7	8b c6		 mov	 eax, esi

; 81   : }

  001f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00203	59		 pop	 ecx
  00204	5f		 pop	 edi
  00205	5e		 pop	 esi
  00206	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00209	33 cd		 xor	 ecx, ebp
  0020b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CMoveCommand@@QAEHPAD@Z$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Load@CMoveCommand@@QAEHPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CMoveCommand@@QAEHPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CMoveCommand@@QAEHPAD@Z ENDP			; CMoveCommand::Load
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?Init@CMoveCommand@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?Init@CMoveCommand@@QAEXXZ PROC				; CMoveCommand::Init, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 39   : 	memset(this->m_MoveCommandData, 0, sizeof(this->m_MoveCommandData));

  0000a	68 20 67 00 00	 push	 26400			; 00006720H
  0000f	6a 00		 push	 0
  00011	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 _memset
  0001a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001d	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  00022	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL4@Init:

; 40   : 
; 41   : 	for (int i =0;i<MAX_MOVE_COMMAND;i++)
; 42   : 	{
; 43   : 		this->m_MoveCommandData[i].Index = -1;

  00030	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00036	8d b6 10 02 00
	00		 lea	 esi, DWORD PTR [esi+528]
  0003c	83 e8 01	 sub	 eax, 1
  0003f	75 ef		 jne	 SHORT $LL4@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00041	8b 87 24 67 00
	00		 mov	 eax, DWORD PTR [edi+26404]
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 46   : 	this->m_MoveLevel.clear();

  00047	8d b7 24 67 00
	00		 lea	 esi, DWORD PTR [edi+26404]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0004d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00058	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0005a	f7 e9		 imul	 ecx
  0005c	c1 fa 02	 sar	 edx, 2
  0005f	8b c2		 mov	 eax, edx
  00061	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00064	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 47   : 	if( this->m_MoveLevel.capacity() > 0 )

  00066	74 6e		 je	 SHORT $LN313@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  00068	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0006b	3b c6		 cmp	 eax, esi
  0006d	74 67		 je	 SHORT $LN313@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0006f	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 54   : 	_Right = _Move(_Tmp);

  00071	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00077	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 53   : 	_Left = _Move(_Right);

  0007e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 54   : 	_Right = _Move(_Tmp);

  00081	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00088	85 c9		 test	 ecx, ecx
  0008a	74 4a		 je	 SHORT $LN313@Init

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0008c	2b d1		 sub	 edx, ecx
  0008e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00093	f7 ea		 imul	 edx
  00095	c1 fa 02	 sar	 edx, 2
  00098	8b c2		 mov	 eax, edx
  0009a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0009d	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0009f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  000a4	77 36		 ja	 SHORT $LN423@Init

; 101  : 	const size_t _User_size = _Count * _Sz;

  000a6	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000a9	c1 e0 03	 shl	 eax, 3

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000ac	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b1	72 1a		 jb	 SHORT $LN381@Init

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000b3	f6 c1 1f	 test	 cl, 31			; 0000001fH
  000b6	75 29		 jne	 SHORT $LN425@Init

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  000b8	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000bb	3b c1		 cmp	 eax, ecx
  000bd	73 27		 jae	 SHORT $LN426@Init

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000bf	2b c8		 sub	 ecx, eax
  000c1	83 f9 04	 cmp	 ecx, 4
  000c4	72 25		 jb	 SHORT $LN427@Init

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000c6	83 f9 23	 cmp	 ecx, 35			; 00000023H
  000c9	77 25		 ja	 SHORT $LN428@Init

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000cb	8b c8		 mov	 ecx, eax
$LN381@Init:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d3	83 c4 04	 add	 esp, 4
$LN313@Init:
  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 52   : }

  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN423@Init:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000dc	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN429@Init:
$LN425@Init:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000e1	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN430@Init:
$LN426@Init:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000e6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN431@Init:
$LN427@Init:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000eb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN432@Init:
$LN428@Init:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000f0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN433@Init:
$LN422@Init:
  000f5	cc		 int	 3
?Init@CMoveCommand@@QAEXXZ ENDP				; CMoveCommand::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ??1CMoveCommand@@UAE@XZ
_TEXT	SEGMENT
??1CMoveCommand@@UAE@XZ PROC				; CMoveCommand::~CMoveCommand, COMDAT
; _this$ = ecx

; 32   : {

  00000	56		 push	 esi

; 34   : }

  00001	8d b1 24 67 00
	00		 lea	 esi, DWORD PTR [ecx+26404]
  00007	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCommand@@6B@
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  0000e	8b 3e		 mov	 edi, DWORD PTR [esi]
  00010	85 ff		 test	 edi, edi
  00012	74 33		 je	 SHORT $LN7@CMoveComma

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	2b cf		 sub	 ecx, edi
  0001e	f7 e9		 imul	 ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00020	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00022	c1 fa 02	 sar	 edx, 2
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UMOVE_MOVE_LEVEL@@@std@@QAEXPAUMOVE_MOVE_LEVEL@@I@Z ; std::allocator<MOVE_MOVE_LEVEL>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00033	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00040	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@CMoveComma:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 34   : }

  00049	c3		 ret	 0
??1CMoveCommand@@UAE@XZ ENDP				; CMoveCommand::~CMoveCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ??0CMoveCommand@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMoveCommand@@QAE@XZ PROC				; CMoveCommand::CMoveCommand, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CMoveCommand@@6B@

; 28   : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000f	c7 81 24 67 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+26404], 0

; 481  : 		_Mylast = pointer();

  00019	c7 81 28 67 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+26408], 0

; 482  : 		_Myend = pointer();

  00023	c7 81 2c 67 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+26412], 0
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp

; 28   : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CMoveCommand@@QAE@XZ ENDP				; CMoveCommand::CMoveCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?FindIndex@CMoveCommand@@AAEHH@Z
_TEXT	SEGMENT
_moveindex$ = 8						; size = 4
?FindIndex@CMoveCommand@@AAEHH@Z PROC			; CMoveCommand::FindIndex, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 349  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 75 08	 mov	 esi, DWORD PTR _moveindex$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	83 c1 04	 add	 ecx, 4
  0000c	0f 1f 40 00	 npad	 4
$LL4@FindIndex:

; 350  : 	{
; 351  : 		if ( this->m_MoveCommandData[i].Index == -1 )

  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	83 fa ff	 cmp	 edx, -1
  00015	74 10		 je	 SHORT $LN9@FindIndex

; 354  : 		}
; 355  : 
; 356  : 		if ( this->m_MoveCommandData[i].Index == moveindex )

  00017	3b d6		 cmp	 edx, esi
  00019	74 0f		 je	 SHORT $LN1@FindIndex

; 349  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  0001b	40		 inc	 eax
  0001c	81 c1 10 02 00
	00		 add	 ecx, 528		; 00000210H
  00022	83 f8 32	 cmp	 eax, 50			; 00000032H
  00025	7c e9		 jl	 SHORT $LL4@FindIndex
$LN9@FindIndex:

; 352  : 		{
; 353  : 			return -1;

  00027	83 c8 ff	 or	 eax, -1
$LN1@FindIndex:
  0002a	5e		 pop	 esi

; 357  : 		{
; 358  : 			return i;
; 359  : 		}
; 360  : 	}
; 361  : 
; 362  : 	return -1;
; 363  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?FindIndex@CMoveCommand@@AAEHH@Z ENDP			; CMoveCommand::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?FindIndex@CMoveCommand@@AAEHPAD@Z
_TEXT	SEGMENT
_mapname$ = 8						; size = 4
?FindIndex@CMoveCommand@@AAEHPAD@Z PROC			; CMoveCommand::FindIndex, COMDAT
; _this$ = ecx

; 330  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 331  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _mapname$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  0000e	66 90		 npad	 2
$LL4@FindIndex:

; 332  : 	{
; 333  : 		if ( this->m_MoveCommandData[i].Index == -1 )

  00010	83 7e fc ff	 cmp	 DWORD PTR [esi-4], -1
  00014	74 53		 je	 SHORT $LN10@FindIndex

; 336  : 		}
; 337  : 
; 338  : 		if ( strcmp(mapname, this->m_MoveCommandData[i].Name) == 0 || _strcmpi(mapname, this->m_MoveCommandData[i].EngName) == 0  )

  00016	8b c6		 mov	 eax, esi
  00018	8b cb		 mov	 ecx, ebx
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL15@FindIndex:
  00020	8a 11		 mov	 dl, BYTE PTR [ecx]
  00022	3a 10		 cmp	 dl, BYTE PTR [eax]
  00024	75 1a		 jne	 SHORT $LN16@FindIndex
  00026	84 d2		 test	 dl, dl
  00028	74 12		 je	 SHORT $LN17@FindIndex
  0002a	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  0002d	3a 50 01	 cmp	 dl, BYTE PTR [eax+1]
  00030	75 0e		 jne	 SHORT $LN16@FindIndex
  00032	83 c1 02	 add	 ecx, 2
  00035	83 c0 02	 add	 eax, 2
  00038	84 d2		 test	 dl, dl
  0003a	75 e4		 jne	 SHORT $LL15@FindIndex
$LN17@FindIndex:
  0003c	33 c0		 xor	 eax, eax
  0003e	eb 05		 jmp	 SHORT $LN18@FindIndex
$LN16@FindIndex:
  00040	1b c0		 sbb	 eax, eax
  00042	83 c8 01	 or	 eax, 1
$LN18@FindIndex:
  00045	85 c0		 test	 eax, eax
  00047	74 2a		 je	 SHORT $LN11@FindIndex
  00049	8d 86 ff 00 00
	00		 lea	 eax, DWORD PTR [esi+255]
  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 __strcmpi
  00056	83 c4 08	 add	 esp, 8
  00059	85 c0		 test	 eax, eax
  0005b	74 16		 je	 SHORT $LN11@FindIndex

; 331  : 	for ( int i=0;i<MAX_MOVE_COMMAND;i++)

  0005d	47		 inc	 edi
  0005e	81 c6 10 02 00
	00		 add	 esi, 528		; 00000210H
  00064	83 ff 32	 cmp	 edi, 50			; 00000032H
  00067	7c a7		 jl	 SHORT $LL4@FindIndex
$LN10@FindIndex:
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 334  : 		{
; 335  : 			return -1;

  0006b	83 c8 ff	 or	 eax, -1
  0006e	5b		 pop	 ebx

; 341  : 		}
; 342  : 	}
; 343  : 
; 344  : 	return -1;
; 345  : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN11@FindIndex:

; 339  : 		{
; 340  : 			return i;

  00073	8b c7		 mov	 eax, edi
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx

; 341  : 		}
; 342  : 	}
; 343  : 
; 344  : 	return -1;
; 345  : }

  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?FindIndex@CMoveCommand@@AAEHPAD@Z ENDP			; CMoveCommand::FindIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\movecommand.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 655  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
