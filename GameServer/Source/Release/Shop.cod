; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\Shop.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_sprintf
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??0CShop@@QAE@XZ				; CShop::CShop
PUBLIC	??1CShop@@UAE@XZ				; CShop::~CShop
PUBLIC	?Init@CShop@@QAEXXZ				; CShop::Init
PUBLIC	?LoadShopItem@CShop@@QAEHPAD@Z			; CShop::LoadShopItem
PUBLIC	?InsertItem@CShop@@QAEHHHHHHHHHHHHH@Z		; CShop::InsertItem
PUBLIC	?InentoryMapCheck@CShop@@QAEHHHHH@Z		; CShop::InentoryMapCheck
PUBLIC	??_GCShop@@UAEPAXI@Z				; CShop::`scalar deleting destructor'
PUBLIC	??0ShopManager@@QAE@XZ				; ShopManager::ShopManager
PUBLIC	??1ShopManager@@UAE@XZ				; ShopManager::~ShopManager
PUBLIC	?Init@ShopManager@@QAEXXZ			; ShopManager::Init
PUBLIC	?Reload@ShopManager@@QAEXXZ			; ShopManager::Reload
PUBLIC	?Read@ShopManager@@QAEXH@Z			; ShopManager::Read
PUBLIC	?Get@ShopManager@@QAEPAVCShop@@H@Z		; ShopManager::Get
PUBLIC	?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z ; std::allocator<CShop>::deallocate
PUBLIC	?allocate@?$allocator@VCShop@@@std@@QAEPAVCShop@@I@Z ; std::allocator<CShop>::allocate
PUBLIC	?push_back@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXABVCShop@@@Z ; std::vector<CShop,std::allocator<CShop> >::push_back
PUBLIC	?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ; std::vector<CShop,std::allocator<CShop> >::_Reallocate
PUBLIC	?_Reserve@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ; std::vector<CShop,std::allocator<CShop> >::_Reserve
PUBLIC	?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ ; std::vector<CShop,std::allocator<CShop> >::_Tidy
PUBLIC	??_GShopManager@@UAEPAXI@Z			; ShopManager::`scalar deleting destructor'
PUBLIC	??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop &>
PUBLIC	??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z ; std::allocator<CShop>::construct<CShop,CShop const &>
PUBLIC	??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>
PUBLIC	??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CShop@@6B@					; CShop::`vftable'
PUBLIC	??_7ShopManager@@6B@				; ShopManager::`vftable'
PUBLIC	?g_ShopManager@@3VShopManager@@A		; g_ShopManager
PUBLIC	??_C@_08LFHMEAP@Shop?4cpp?$AA@			; `string'
PUBLIC	??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CP@HHLOKJAE@Shop?5data?5load?5error?5?$CFs?6Error?5de@ ; `string'
PUBLIC	??_C@_04BFIJLIPK@shop?$AA@			; `string'
PUBLIC	??_C@_07JKABFLJI@credits?$AA@			; `string'
PUBLIC	??_C@_04NHONDGDE@item?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_03IHCLBPIC@num?$AA@			; `string'
PUBLIC	??_C@_03CFMMPBHI@dur?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
PUBLIC	??_C@_05ODMCMJAJ@skill?$AA@			; `string'
PUBLIC	??_C@_04PFGGAFBF@luck?$AA@			; `string'
PUBLIC	??_C@_06OGMGCFPO@option?$AA@			; `string'
PUBLIC	??_C@_03MGHBCGFO@exc?$AA@			; `string'
PUBLIC	??_C@_03FBLIGOML@anc?$AA@			; `string'
PUBLIC	??_C@_06HBELJPBO@socket?$AA@			; `string'
PUBLIC	??_C@_07HCLJNICE@element?$AA@			; `string'
PUBLIC	??_C@_05NCDILCCA@price?$AA@			; `string'
PUBLIC	??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0CB@CANJHFPB@?$FLShopManager?$FN?5File?5?$CFd?5not?5found?$CB@ ; `string'
PUBLIC	??_C@_0BA@HNJFAPHD@Shop?2Shop?$CFd?4xml?$AA@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R4CShop@@6B@					; CShop::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCShop@@@8				; CShop `RTTI Type Descriptor'
PUBLIC	??_R3CShop@@8					; CShop::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CShop@@8					; CShop::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CShop@@8				; CShop::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ShopManager@@6B@				; ShopManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVShopManager@@@8				; ShopManager `RTTI Type Descriptor'
PUBLIC	??_R3ShopManager@@8				; ShopManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ShopManager@@8				; ShopManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ShopManager@@8			; ShopManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__access:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Get@Message@@QAEPADH@Z:PROC			; Message::Get
EXTRN	??0CItem@@QAE@XZ:PROC				; CItem::CItem
EXTRN	?Convert@CItem@@QAEXHEEEEEEPAEEE@Z:PROC		; CItem::Convert
EXTRN	?Value@CItem@@QAEXXZ:PROC			; CItem::Value
EXTRN	?InitSocketItem@CItem@@QAEXE@Z:PROC		; CItem::InitSocketItem
EXTRN	?ItemByteConvert@@YAXPAEVCItem@@@Z:PROC		; ItemByteConvert
EXTRN	?ItemGetSize@@YAXHAAH0@Z:PROC			; ItemGetSize
EXTRN	?ItemGetDurability@@YAHHHHH@Z:PROC		; ItemGetDurability
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?IsSocketItem@CSocketItems@@QAE_NH@Z:PROC	; CSocketItems::IsSocketItem
EXTRN	??_ECShop@@UAEPAXI@Z:PROC			; CShop::`vector deleting destructor'
EXTRN	??_EShopManager@@UAEPAXI@Z:PROC			; ShopManager::`vector deleting destructor'
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	?IsElementalItem@CElementalSystem@@QAEHH@Z:PROC	; CElementalSystem::IsElementalItem
EXTRN	?IsPentagram@CElementalSystem@@QAEHH@Z:PROC	; CElementalSystem::IsPentagram
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	?as_bool@xml_attribute@pugi@@QBE_N_N@Z:PROC	; pugi::xml_attribute::as_bool
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	?description@xml_parse_result@pugi@@QBEPBDXZ:PROC ; pugi::xml_parse_result::description
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?lMsg@@3VMessage@@A:BYTE			; lMsg
EXTRN	?g_SocketItem@@3VCSocketItems@@A:BYTE		; g_SocketItem
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	?g_ElementalSystem@@3VCElementalSystem@@A:BYTE	; g_ElementalSystem
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_ShopManager@@3VShopManager@@A DB 010H DUP (?)	; g_ShopManager
_BSS	ENDS
CRT$XCU	SEGMENT
?g_ShopManager$initializer$@@3P6AXXZA DD FLAT:??__Eg_ShopManager@@YAXXZ ; g_ShopManager$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@ShopManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ShopManager@@8 DD FLAT:??_R0?AVShopManager@@@8 ; ShopManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ShopManager@@8
rdata$r	ENDS
;	COMDAT ??_R2ShopManager@@8
rdata$r	SEGMENT
??_R2ShopManager@@8 DD FLAT:??_R1A@?0A@EA@ShopManager@@8 ; ShopManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ShopManager@@8
rdata$r	SEGMENT
??_R3ShopManager@@8 DD 00H				; ShopManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ShopManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVShopManager@@@8
data$r	SEGMENT
??_R0?AVShopManager@@@8 DD FLAT:??_7type_info@@6B@	; ShopManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVShopManager@@', 00H
data$r	ENDS
;	COMDAT ??_R4ShopManager@@6B@
rdata$r	SEGMENT
??_R4ShopManager@@6B@ DD 00H				; ShopManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVShopManager@@@8
	DD	FLAT:??_R3ShopManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CShop@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CShop@@8 DD FLAT:??_R0?AVCShop@@@8	; CShop::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CShop@@8
rdata$r	ENDS
;	COMDAT ??_R2CShop@@8
rdata$r	SEGMENT
??_R2CShop@@8 DD FLAT:??_R1A@?0A@EA@CShop@@8		; CShop::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CShop@@8
rdata$r	SEGMENT
??_R3CShop@@8 DD 00H					; CShop::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CShop@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCShop@@@8
data$r	SEGMENT
??_R0?AVCShop@@@8 DD FLAT:??_7type_info@@6B@		; CShop `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCShop@@', 00H
data$r	ENDS
;	COMDAT ??_R4CShop@@6B@
rdata$r	SEGMENT
??_R4CShop@@6B@ DD 00H					; CShop::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCShop@@@8
	DD	FLAT:??_R3CShop@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HNJFAPHD@Shop?2Shop?$CFd?4xml?$AA@
CONST	SEGMENT
??_C@_0BA@HNJFAPHD@Shop?2Shop?$CFd?4xml?$AA@ DB 'Shop\Shop%d.xml', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CANJHFPB@?$FLShopManager?$FN?5File?5?$CFd?5not?5found?$CB@
CONST	SEGMENT
??_C@_0CB@CANJHFPB@?$FLShopManager?$FN?5File?5?$CFd?5not?5found?$CB@ DB '['
	DB	'ShopManager] File %d not found!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@ DB 'error-L3 :'
	DB	' %s %s %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCDILCCA@price?$AA@
CONST	SEGMENT
??_C@_05NCDILCCA@price?$AA@ DB 'price', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HCLJNICE@element?$AA@
CONST	SEGMENT
??_C@_07HCLJNICE@element?$AA@ DB 'element', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBELJPBO@socket?$AA@
CONST	SEGMENT
??_C@_06HBELJPBO@socket?$AA@ DB 'socket', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FBLIGOML@anc?$AA@
CONST	SEGMENT
??_C@_03FBLIGOML@anc?$AA@ DB 'anc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHBCGFO@exc?$AA@
CONST	SEGMENT
??_C@_03MGHBCGFO@exc?$AA@ DB 'exc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGMGCFPO@option?$AA@
CONST	SEGMENT
??_C@_06OGMGCFPO@option?$AA@ DB 'option', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFGGAFBF@luck?$AA@
CONST	SEGMENT
??_C@_04PFGGAFBF@luck?$AA@ DB 'luck', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODMCMJAJ@skill?$AA@
CONST	SEGMENT
??_C@_05ODMCMJAJ@skill?$AA@ DB 'skill', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFMMPBHI@dur?$AA@
CONST	SEGMENT
??_C@_03CFMMPBHI@dur?$AA@ DB 'dur', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IHCLBPIC@num?$AA@
CONST	SEGMENT
??_C@_03IHCLBPIC@num?$AA@ DB 'num', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NHONDGDE@item?$AA@
CONST	SEGMENT
??_C@_04NHONDGDE@item?$AA@ DB 'item', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKABFLJI@credits?$AA@
CONST	SEGMENT
??_C@_07JKABFLJI@credits?$AA@ DB 'credits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFIJLIPK@shop?$AA@
CONST	SEGMENT
??_C@_04BFIJLIPK@shop?$AA@ DB 'shop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HHLOKJAE@Shop?5data?5load?5error?5?$CFs?6Error?5de@
CONST	SEGMENT
??_C@_0CP@HHLOKJAE@Shop?5data?5load?5error?5?$CFs?6Error?5de@ DB 'Shop da'
	DB	'ta load error %s', 0aH, 'Error description: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@ DB 'error-L2 : %s %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFHMEAP@Shop?4cpp?$AA@
CONST	SEGMENT
??_C@_08LFHMEAP@Shop?4cpp?$AA@ DB 'Shop.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7ShopManager@@6B@
CONST	SEGMENT
??_7ShopManager@@6B@ DD FLAT:??_R4ShopManager@@6B@	; ShopManager::`vftable'
	DD	FLAT:??_EShopManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CShop@@6B@
CONST	SEGMENT
??_7CShop@@6B@ DD FLAT:??_R4CShop@@6B@			; CShop::`vftable'
	DD	FLAT:??_ECShop@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z$54 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z$54
__ehfuncinfo$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@ShopManager@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@ShopManager@@QAEXH@Z$0
__ehfuncinfo$?Read@ShopManager@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@ShopManager@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadShopItem@CShop@@QAEHPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadShopItem@CShop@@QAEHPAD@Z$0
__ehfuncinfo$?LoadShopItem@CShop@@QAEHPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadShopItem@CShop@@QAEHPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z PROC ; std::allocator<CShop>::construct<CShop,CShop>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 84 92 00 00
	00		 je	 $LN3@construct
  0000e	53		 push	 ebx
  0000f	8b 5d 0c	 mov	 ebx, DWORD PTR _<_Args_0>$[ebp]
  00012	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00017	56		 push	 esi
  00018	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CShop@@6B@
  0001e	57		 push	 edi
  0001f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00022	8d 7a 09	 lea	 edi, DWORD PTR [edx+9]
  00025	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00028	8d 73 09	 lea	 esi, DWORD PTR [ebx+9]
  0002b	0f b6 43 08	 movzx	 eax, BYTE PTR [ebx+8]
  0002f	88 42 08	 mov	 BYTE PTR [edx+8], al
  00032	f3 a5		 rep movsd
  00034	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [ebx+132]
  0003a	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
  00040	8d 83 88 00 00
	00		 lea	 eax, DWORD PTR [ebx+136]
  00046	68 60 63 00 00	 push	 25440			; 00006360H
  0004b	50		 push	 eax
  0004c	8d 82 88 00 00
	00		 lea	 eax, DWORD PTR [edx+136]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memcpy
  00058	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0005b	8d b3 e8 63 00
	00		 lea	 esi, DWORD PTR [ebx+25576]
  00061	b9 86 01 00 00	 mov	 ecx, 390		; 00000186H
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	8d ba e8 63 00
	00		 lea	 edi, DWORD PTR [edx+25576]
  0006f	f3 a5		 rep movsd
  00071	8b 83 00 6a 00
	00		 mov	 eax, DWORD PTR [ebx+27136]
  00077	8d b3 06 6a 00
	00		 lea	 esi, DWORD PTR [ebx+27142]
  0007d	89 82 00 6a 00
	00		 mov	 DWORD PTR [edx+27136], eax
  00083	8d ba 06 6a 00
	00		 lea	 edi, DWORD PTR [edx+27142]
  00089	0f b6 83 04 6a
	00 00		 movzx	 eax, BYTE PTR [ebx+27140]
  00090	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00095	88 82 04 6a 00
	00		 mov	 BYTE PTR [edx+27140], al
  0009b	f3 a5		 rep movsd
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
$LN3@construct:

; 656  : 		}

  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z ENDP ; std::allocator<CShop>::construct<CShop,CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@V1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@$$QAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCShop@@V1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@$$QAV3@@Z PROC ; std::allocator_traits<std::allocator<CShop> >::construct<CShop,CShop>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop>

; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@VCShop@@V1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@$$QAV3@@Z ENDP ; std::allocator_traits<std::allocator<CShop> >::construct<CShop,CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@VCShop@@@std@@YA$$QAVCShop@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VCShop@@@std@@YA$$QAVCShop@@AAV1@@Z PROC	; std::forward<CShop>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@VCShop@@@std@@YA$$QAVCShop@@AAV1@@Z ENDP	; std::forward<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@V1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@$$QAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCShop@@V1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@$$QAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::construct<CShop,CShop>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00003	5d		 pop	 ebp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00004	e9 00 00 00 00	 jmp	 ??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop>
??$construct@VCShop@@V1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@$$QAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::construct<CShop,CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VCShop@@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VCShop@@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@@Z PROC ; std::allocator<CShop>::destroy<CShop>, COMDAT
; _this$ = ecx

; 661  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 662  : 		_Ptr->~_Uty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 663  : 		}

  0000f	5d		 pop	 ebp

; 662  : 		_Ptr->~_Uty();

  00010	ff 20		 jmp	 DWORD PTR [eax]
??$destroy@VCShop@@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@@Z ENDP ; std::allocator<CShop>::destroy<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 25		 je	 SHORT $LN34@Uninit_mov
  0000f	57		 push	 edi
  00010	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	8b 4d 14	 mov	 ecx, DWORD PTR __Al$[ebp]
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 ??$construct@VCShop@@V1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@$$QAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0001d	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  00023	81 c7 f8 6a 00
	00		 add	 edi, 27384		; 00006af8H
  00029	3b f3		 cmp	 esi, ebx
  0002b	75 e6		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0002d	8b c7		 mov	 eax, edi
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 450  : 	}

  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
$LN34@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00034	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 450  : 	}

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAVCShop@@@std@@YAPAVCShop@@PAV1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAVCShop@@@std@@YAPAVCShop@@PAV1@@Z PROC	; std::_Val_type<CShop *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAVCShop@@@std@@YAPAVCShop@@PAV1@@Z ENDP	; std::_Val_type<CShop *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VCShop@@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VCShop@@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@@Z PROC ; std::allocator_traits<std::allocator<CShop> >::destroy<CShop>, COMDAT

; 779  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 662  : 		_Ptr->~_Uty();

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	6a 00		 push	 0
  00008	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000a	ff 10		 call	 DWORD PTR [eax]

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??$destroy@VCShop@@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@@Z ENDP ; std::allocator_traits<std::allocator<CShop> >::destroy<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@VCShop@@@std@@YAPAVCShop@@AAV1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@VCShop@@@std@@YAPAVCShop@@AAV1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CShop>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@VCShop@@@std@@YAPAVCShop@@AAV1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAVCShop@@PAV1@@std@@YAAAPAVCShop@@AAPAV1@PAV1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAVCShop@@PAV1@@std@@YAAAPAVCShop@@AAPAV1@PAV1@@Z PROC ; std::_Rechecked<CShop *,CShop *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAVCShop@@PAV1@@std@@YAAAPAVCShop@@AAPAV1@PAV1@@Z ENDP ; std::_Rechecked<CShop *,CShop *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAVCShop@@PAV1@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAVCShop@@PAV1@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z PROC ; std::_Uninit_move<CShop *,CShop *,std::_Wrap_alloc<std::allocator<CShop> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAVCShop@@PAV1@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z ENDP ; std::_Uninit_move<CShop *,CShop *,std::_Wrap_alloc<std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAVCShop@@@std@@YAPAVCShop@@PAV1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAVCShop@@@std@@YAPAVCShop@@PAV1@@Z PROC	; std::_Unchecked<CShop *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAVCShop@@@std@@YAPAVCShop@@PAV1@@Z ENDP	; std::_Unchecked<CShop *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@VCShop@@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@VCShop@@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::destroy<CShop>, COMDAT
; _this$ = ecx

; 924  : 		{	// destroy object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 662  : 		_Ptr->~_Uty();

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  0000f	5d		 pop	 ebp

; 662  : 		_Ptr->~_Uty();

  00010	ff 20		 jmp	 DWORD PTR [eax]
??$destroy@VCShop@@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::destroy<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@VCShop@@@std@@YAPAVCShop@@AAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@VCShop@@@std@@YAPAVCShop@@AAV1@@Z PROC	; std::addressof<CShop>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@VCShop@@@std@@YAPAVCShop@@AAV1@@Z ENDP	; std::addressof<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z PROC ; std::allocator<CShop>::construct<CShop,CShop const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 84 92 00 00
	00		 je	 $LN3@construct
  0000e	53		 push	 ebx
  0000f	8b 5d 0c	 mov	 ebx, DWORD PTR _<_Args_0>$[ebp]
  00012	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00017	56		 push	 esi
  00018	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CShop@@6B@
  0001e	57		 push	 edi
  0001f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00022	8d 7a 09	 lea	 edi, DWORD PTR [edx+9]
  00025	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00028	8d 73 09	 lea	 esi, DWORD PTR [ebx+9]
  0002b	0f b6 43 08	 movzx	 eax, BYTE PTR [ebx+8]
  0002f	88 42 08	 mov	 BYTE PTR [edx+8], al
  00032	f3 a5		 rep movsd
  00034	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [ebx+132]
  0003a	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
  00040	8d 83 88 00 00
	00		 lea	 eax, DWORD PTR [ebx+136]
  00046	68 60 63 00 00	 push	 25440			; 00006360H
  0004b	50		 push	 eax
  0004c	8d 82 88 00 00
	00		 lea	 eax, DWORD PTR [edx+136]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memcpy
  00058	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0005b	8d b3 e8 63 00
	00		 lea	 esi, DWORD PTR [ebx+25576]
  00061	b9 86 01 00 00	 mov	 ecx, 390		; 00000186H
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	8d ba e8 63 00
	00		 lea	 edi, DWORD PTR [edx+25576]
  0006f	f3 a5		 rep movsd
  00071	8b 83 00 6a 00
	00		 mov	 eax, DWORD PTR [ebx+27136]
  00077	8d b3 06 6a 00
	00		 lea	 esi, DWORD PTR [ebx+27142]
  0007d	89 82 00 6a 00
	00		 mov	 DWORD PTR [edx+27136], eax
  00083	8d ba 06 6a 00
	00		 lea	 edi, DWORD PTR [edx+27142]
  00089	0f b6 83 04 6a
	00 00		 movzx	 eax, BYTE PTR [ebx+27140]
  00090	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00095	88 82 04 6a 00
	00		 mov	 BYTE PTR [edx+27140], al
  0009b	f3 a5		 rep movsd
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
$LN3@construct:

; 656  : 		}

  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z ENDP ; std::allocator<CShop>::construct<CShop,CShop const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z PROC ; std::allocator<CShop>::construct<CShop,CShop &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	0f 84 92 00 00
	00		 je	 $LN3@construct
  0000e	53		 push	 ebx
  0000f	8b 5d 0c	 mov	 ebx, DWORD PTR _<_Args_0>$[ebp]
  00012	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00017	56		 push	 esi
  00018	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CShop@@6B@
  0001e	57		 push	 edi
  0001f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00022	8d 7a 09	 lea	 edi, DWORD PTR [edx+9]
  00025	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00028	8d 73 09	 lea	 esi, DWORD PTR [ebx+9]
  0002b	0f b6 43 08	 movzx	 eax, BYTE PTR [ebx+8]
  0002f	88 42 08	 mov	 BYTE PTR [edx+8], al
  00032	f3 a5		 rep movsd
  00034	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [ebx+132]
  0003a	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
  00040	8d 83 88 00 00
	00		 lea	 eax, DWORD PTR [ebx+136]
  00046	68 60 63 00 00	 push	 25440			; 00006360H
  0004b	50		 push	 eax
  0004c	8d 82 88 00 00
	00		 lea	 eax, DWORD PTR [edx+136]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 _memcpy
  00058	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0005b	8d b3 e8 63 00
	00		 lea	 esi, DWORD PTR [ebx+25576]
  00061	b9 86 01 00 00	 mov	 ecx, 390		; 00000186H
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	8d ba e8 63 00
	00		 lea	 edi, DWORD PTR [edx+25576]
  0006f	f3 a5		 rep movsd
  00071	8b 83 00 6a 00
	00		 mov	 eax, DWORD PTR [ebx+27136]
  00077	8d b3 06 6a 00
	00		 lea	 esi, DWORD PTR [ebx+27142]
  0007d	89 82 00 6a 00
	00		 mov	 DWORD PTR [edx+27136], eax
  00083	8d ba 06 6a 00
	00		 lea	 edi, DWORD PTR [edx+27142]
  00089	0f b6 83 04 6a
	00 00		 movzx	 eax, BYTE PTR [ebx+27140]
  00090	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00095	88 82 04 6a 00
	00		 mov	 BYTE PTR [edx+27140], al
  0009b	f3 a5		 rep movsd
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
$LN3@construct:

; 656  : 		}

  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z ENDP ; std::allocator<CShop>::construct<CShop,CShop &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$_Move@AAPAVCShop@@@std@@YA$$QAPAVCShop@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAPAVCShop@@@std@@YA$$QAPAVCShop@@AAPAV1@@Z PROC ; std::_Move<CShop * &>, COMDAT

; 1257 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1258 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1259 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Move@AAPAVCShop@@@std@@YA$$QAPAVCShop@@AAPAV1@@Z ENDP ; std::_Move<CShop * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVCShop@@PAV1@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVCShop@@PAV1@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z PROC ; std::_Uninitialized_move<CShop *,CShop *,std::_Wrap_alloc<std::allocator<CShop> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAVCShop@@PAV1@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<CShop *,CShop *,std::_Wrap_alloc<std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXPAVCShop@@0AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXPAVCShop@@0AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CShop> > >, COMDAT

; 170  : 	{	// destroy [_First, _Last), arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 171  : 	for (; _First != _Last; ++_First)

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 13		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:

; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	6a 00		 push	 0
  00016	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  00018	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 ee		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXPAVCShop@@0AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VCShop@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCShop@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VCShop@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCShop@@0@Z PROC ; std::_Ptr_cat<CShop,CShop>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@VCShop@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVCShop@@0@Z ENDP ; std::_Ptr_cat<CShop,CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@VCShop@@@std@@@std@@YAABV?$allocator@VCShop@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@VCShop@@@std@@@std@@YAABV?$allocator@VCShop@@@0@ABV10@@Z PROC ; std::forward<std::allocator<CShop> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@VCShop@@@std@@@std@@YAABV?$allocator@VCShop@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<CShop> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocs@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<CShop> > >, COMDAT

; 999  : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@ABV1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@ABV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCShop@@ABV1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@ABV3@@Z PROC ; std::allocator_traits<std::allocator<CShop> >::construct<CShop,CShop const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z ; std::allocator<CShop>::construct<CShop,CShop const &>

; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@VCShop@@ABV1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@ABV3@@Z ENDP ; std::allocator_traits<std::allocator<CShop> >::construct<CShop,CShop const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABVCShop@@@std@@YAABVCShop@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVCShop@@@std@@YAABVCShop@@ABV1@@Z PROC	; std::forward<CShop const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABVCShop@@@std@@YAABVCShop@@ABV1@@Z ENDP	; std::forward<CShop const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@AAV1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@AAV3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCShop@@AAV1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@AAV3@@Z PROC ; std::allocator_traits<std::allocator<CShop> >::construct<CShop,CShop &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00003	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000c	e8 00 00 00 00	 call	 ??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop &>

; 774  : 		}

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$construct@VCShop@@AAV1@@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAXAAV?$allocator@VCShop@@@1@PAVCShop@@AAV3@@Z ENDP ; std::allocator_traits<std::allocator<CShop> >::construct<CShop,CShop &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAVCShop@@@std@@YAAAVCShop@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVCShop@@@std@@YAAAVCShop@@AAV1@@Z PROC	; std::forward<CShop &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAVCShop@@@std@@YAAAVCShop@@AAV1@@Z ENDP	; std::forward<CShop &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBVCShop@@@std@@YAPBVCShop@@ABV1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBVCShop@@@std@@YAPBVCShop@@ABV1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<CShop const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBVCShop@@@std@@YAPBVCShop@@ABV1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<CShop const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAVCShop@@@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEPAVCShop@@PAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAVCShop@@@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEPAVCShop@@PAV2@00@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Umove<CShop *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAVCShop@@@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEPAVCShop@@PAV2@00@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Umove<CShop *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXPAVCShop@@0AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXPAVCShop@@0AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CShop> > >, COMDAT

; 185  : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi

; 171  : 	for (; _First != _Last; ++_First)

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 13		 je	 SHORT $LN7@Destroy_ra
  0000f	90		 npad	 1
$LL8@Destroy_ra:

; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	6a 00		 push	 0
  00016	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  00018	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 ee		 jne	 SHORT $LL8@Destroy_ra
$LN7@Destroy_ra:
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 187  : 	}

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXPAVCShop@@0AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@VCShop@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@VCShop@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@VCShop@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@VCShop@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1><std::allocator<CShop> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@VCShop@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@VCShop@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1><std::allocator<CShop> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocs@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocs@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0@Z PROC ; std::_Pocs<std::_Wrap_alloc<std::allocator<CShop> > >, COMDAT

; 1004 : 	typename _Alty::propagate_on_container_swap _Tag;
; 1005 : 	_Pocs(_Left, _Right, _Tag);
; 1006 : 	}

  00000	c3		 ret	 0
??$_Pocs@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0@Z ENDP ; std::_Pocs<std::_Wrap_alloc<std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@ABV1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@ABV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCShop@@ABV1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@ABV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::construct<CShop,CShop const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00003	5d		 pop	 ebp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00004	e9 00 00 00 00	 jmp	 ??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z ; std::allocator<CShop>::construct<CShop,CShop const &>
??$construct@VCShop@@ABV1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@ABV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::construct<CShop,CShop const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@VCShop@@AAV1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@AAV2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@VCShop@@AAV1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@AAV2@@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::construct<CShop,CShop &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00003	5d		 pop	 ebp

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00004	e9 00 00 00 00	 jmp	 ??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop &>
??$construct@VCShop@@AAV1@@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@AAV2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::construct<CShop,CShop &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBVCShop@@@std@@YAPBVCShop@@ABV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBVCShop@@@std@@YAPBVCShop@@ABV1@@Z PROC	; std::addressof<CShop const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBVCShop@@@std@@YAPBVCShop@@ABV1@@Z ENDP	; std::addressof<CShop const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@PAVCShop@@@std@@YAXAAPAVCShop@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@PAVCShop@@@std@@YAXAAPAVCShop@@0@Z PROC		; std::swap<CShop *>, COMDAT

; 51   : 	{	// exchange values stored at _Left and _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi
  0000a	8b 32		 mov	 esi, DWORD PTR [edx]
  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 55   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$swap@PAVCShop@@@std@@YAXAAPAVCShop@@0@Z ENDP		; std::swap<CShop *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$_Swap_adl@PAVCShop@@@std@@YAXAAPAVCShop@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Swap_adl@PAVCShop@@@std@@YAXAAPAVCShop@@0@Z PROC	; std::_Swap_adl<CShop *>, COMDAT

; 61   : 	{	// exchange values stored at _Left and _Right, using ADL

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 52   : 	_Ty _Tmp = _Move(_Left);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 53   : 	_Left = _Move(_Right);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	56		 push	 esi

; 52   : 	_Ty _Tmp = _Move(_Left);

  0000a	8b 32		 mov	 esi, DWORD PTR [edx]

; 53   : 	_Left = _Move(_Right);

  0000c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000e	89 02		 mov	 DWORD PTR [edx], eax

; 54   : 	_Right = _Move(_Tmp);

  00010	89 31		 mov	 DWORD PTR [ecx], esi
  00012	5e		 pop	 esi

; 62   : 	swap(_Left, _Right);
; 63   : 	}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$_Swap_adl@PAVCShop@@@std@@YAXAAPAVCShop@@0@Z ENDP	; std::_Swap_adl<CShop *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8VCShop@@V0@@std@@YA_NABV?$allocator@VCShop@@@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?8VCShop@@V0@@std@@YA_NABV?$allocator@VCShop@@@0@0@Z PROC ; std::operator==<CShop,CShop>, COMDAT

; 712  : 	return (true);

  00000	b0 01		 mov	 al, 1

; 713  : 	}

  00002	c3		 ret	 0
??$?8VCShop@@V0@@std@@YA_NABV?$allocator@VCShop@@@0@0@Z ENDP ; std::operator==<CShop,CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@VCShop@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8V?$allocator@VCShop@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0@Z PROC ; std::operator==<std::allocator<CShop>,std::allocator<CShop> >, COMDAT

; 939  : 	return (static_cast<const _Ty&>(_Left)

  00000	b0 01		 mov	 al, 1

; 940  : 		== static_cast<const _Other&>(_Right));
; 941  : 	}

  00002	c3		 ret	 0
??$?8V?$allocator@VCShop@@@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0@Z ENDP ; std::operator==<std::allocator<CShop>,std::allocator<CShop> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_ShopManager@@YAXXZ
text$yd	SEGMENT
??__Fg_ShopManager@@YAXXZ PROC				; `dynamic atexit destructor for 'g_ShopManager'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopManager@@3VShopManager@@A ; g_ShopManager
  00005	e9 00 00 00 00	 jmp	 ??1ShopManager@@UAE@XZ	; ShopManager::~ShopManager
??__Fg_ShopManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_ShopManager''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ??__Eg_ShopManager@@YAXXZ
text$di	SEGMENT
??__Eg_ShopManager@@YAXXZ PROC				; `dynamic initializer for 'g_ShopManager'', COMDAT

; 251  : ShopManager g_ShopManager;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ShopManager@@3VShopManager@@A ; g_ShopManager
  00005	e8 00 00 00 00	 call	 ??0ShopManager@@QAE@XZ	; ShopManager::ShopManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_ShopManager@@YAXXZ ; `dynamic atexit destructor for 'g_ShopManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_ShopManager@@YAXXZ ENDP				; `dynamic initializer for 'g_ShopManager''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GShopManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GShopManager@@UAEPAXI@Z PROC				; ShopManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1ShopManager@@UAE@XZ	; ShopManager::~ShopManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GShopManager@@UAEPAXI@Z ENDP				; ShopManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEXPAVCShop@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEXPAVCShop@@0@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEXPAVCShop@@0@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEXXZ PROC ; std::vector<CShop,std::allocator<CShop> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEXXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ PROC ; std::vector<CShop,std::allocator<CShop> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 1656 : 		if (this->_Myfirst() != pointer())

  00004	8b 33		 mov	 esi, DWORD PTR [ebx]
  00006	85 f6		 test	 esi, esi
  00008	74 52		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 171  : 	for (; _First != _Last; ++_First)

  0000e	3b f7		 cmp	 esi, edi
  00010	74 12		 je	 SHORT $LN45@Tidy
$LL46@Tidy:

; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	8b ce		 mov	 ecx, esi
  00016	6a 00		 push	 0
  00018	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  0001a	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  00020	3b f7		 cmp	 esi, edi
  00022	75 ee		 jne	 SHORT $LL46@Tidy
$LN45@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00024	8b 33		 mov	 esi, DWORD PTR [ebx]
  00026	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002e	2b ce		 sub	 ecx, esi
  00030	f7 e9		 imul	 ecx
  00032	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00034	8b cb		 mov	 ecx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00036	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00039	8b c2		 mov	 eax, edx
  0003b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003e	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00040	50		 push	 eax
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z ; std::allocator<CShop>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  00047	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 1663 : 			this->_Mylast() = pointer();

  0004d	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1664 : 			this->_Myend() = pointer();

  00054	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  0005b	5f		 pop	 edi
$LN2@Tidy:

; 1665 : 			}
; 1666 : 		}

  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	c3		 ret	 0
?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv186 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00010	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00013	2b f7		 sub	 esi, edi
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi

; 1646 : 		if (_Unused_capacity() < _Count)

  00019	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0001c	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00026	3b c6		 cmp	 eax, esi
  00028	73 66		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0002a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002c	2b f8		 sub	 edi, eax
  0002e	89 45 08	 mov	 DWORD PTR tv186[ebp], eax
  00031	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00036	f7 ef		 imul	 edi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00038	b8 aa 64 02 00	 mov	 eax, 156842		; 000264aaH

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003d	03 d7		 add	 edx, edi
  0003f	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00042	8b ca		 mov	 ecx, edx
  00044	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00047	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00049	2b c1		 sub	 eax, ecx
  0004b	3b c6		 cmp	 eax, esi
  0004d	72 48		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004f	8d 3c 31	 lea	 edi, DWORD PTR [ecx+esi]

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00052	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00057	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0005a	2b 4d 08	 sub	 ecx, DWORD PTR tv186[ebp]
  0005d	f7 e9		 imul	 ecx
  0005f	03 d1		 add	 edx, ecx
  00061	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00064	8b f2		 mov	 esi, edx
  00066	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00069	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0006b	ba aa 64 02 00	 mov	 edx, 156842		; 000264aaH
  00070	8b c6		 mov	 eax, esi
  00072	d1 e8		 shr	 eax, 1
  00074	2b d0		 sub	 edx, eax
  00076	3b d6		 cmp	 edx, esi
  00078	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  0007b	b8 00 00 00 00	 mov	 eax, 0
  00080	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00083	3b cf		 cmp	 ecx, edi
  00085	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00088	51		 push	 ecx
  00089	8b cb		 mov	 ecx, ebx
  0008b	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ; std::vector<CShop,std::allocator<CShop> >::_Reallocate
$LN2@Reserve:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0009c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  000a1	cc		 int	 3
?_Reserve@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -24						; size = 4
__Ptr$ = -24						; size = 4
__Last$1$ = -20						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@VCShop@@@std@@QAEPAVCShop@@I@Z ; std::allocator<CShop>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b d8		 mov	 ebx, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	57		 push	 edi
  00047	53		 push	 ebx
  00048	ff 77 04	 push	 DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 5d e8	 mov	 DWORD PTR __Ptr$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 37		 push	 DWORD PTR [edi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAVCShop@@PAV1@V?$allocator@VCShop@@@std@@V1@@std@@YAPAVCShop@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<CShop *,CShop *,std::allocator<CShop>,CShop>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00058	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005b	8b 37		 mov	 esi, DWORD PTR [edi]
  0005d	8b c8		 mov	 ecx, eax
  0005f	89 45 ec	 mov	 DWORD PTR __Last$1$[ebp], eax
  00062	2b ce		 sub	 ecx, esi
  00064	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00069	f7 e9		 imul	 ecx
  0006b	03 d1		 add	 edx, ecx
  0006d	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00070	8b c2		 mov	 eax, edx
  00072	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00075	03 c2		 add	 eax, edx
  00077	89 45 e8	 mov	 DWORD PTR __Size$1$[ebp], eax

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  0007a	85 f6		 test	 esi, esi
  0007c	74 3b		 je	 SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 171  : 	for (; _First != _Last; ++_First)

  0007e	3b 75 ec	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00081	74 13		 je	 SHORT $LN129@Reallocate
$LL130@Reallocate:

; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00083	8b 06		 mov	 eax, DWORD PTR [esi]
  00085	8b ce		 mov	 ecx, esi
  00087	6a 00		 push	 0
  00089	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  0008b	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  00091	3b 75 ec	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00094	75 ed		 jne	 SHORT $LL130@Reallocate
$LN129@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00096	8b 37		 mov	 esi, DWORD PTR [edi]
  00098	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  0009d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000a0	2b ce		 sub	 ecx, esi
  000a2	f7 e9		 imul	 ecx
  000a4	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000a6	8b cf		 mov	 ecx, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  000a8	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  000ab	8b c2		 mov	 eax, edx
  000ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b0	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000b2	50		 push	 eax
  000b3	56		 push	 esi
  000b4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z ; std::allocator<CShop>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  000b9	69 45 08 f8 6a
	00 00		 imul	 eax, DWORD PTR __Count$[ebp], 27384
  000c0	03 c3		 add	 eax, ebx
  000c2	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000c5	69 45 e8 f8 6a
	00 00		 imul	 eax, DWORD PTR __Size$1$[ebp], 27384
  000cc	03 c3		 add	 eax, ebx
  000ce	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000d1	89 1f		 mov	 DWORD PTR [edi], ebx

; 1642 : 		}

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	5f		 pop	 edi
  000df	5e		 pop	 esi
  000e0	5b		 pop	 ebx
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000e7	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000ea	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	ff 75 e8	 push	 DWORD PTR __Ptr$[ebp]
  000f0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z ; std::allocator<CShop>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000f5	6a 00		 push	 0
  000f7	6a 00		 push	 0
  000f9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN212@Reallocate:
$LN211@Reallocate:
  000fe	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBE_NPBVCShop@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBE_NPBVCShop@@@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBE_NPBVCShop@@@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEII@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  0000c	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000e	b9 aa 64 02 00	 mov	 ecx, 156842		; 000264aaH

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00013	f7 ee		 imul	 esi
  00015	57		 push	 edi
  00016	03 d6		 add	 edx, esi

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00018	33 ff		 xor	 edi, edi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0001a	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0001d	8b f2		 mov	 esi, edx
  0001f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00022	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00024	8b c6		 mov	 eax, esi
  00026	d1 e8		 shr	 eax, 1
  00028	2b c8		 sub	 ecx, eax
  0002a	3b ce		 cmp	 ecx, esi
  0002c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00032	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00035	5f		 pop	 edi
  00036	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0003a	8b c2		 mov	 eax, edx
  0003c	5e		 pop	 esi

; 1612 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?_Grow_to@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IBEII@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXPAVCShop@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXPAVCShop@@0@Z PROC ; std::vector<CShop,std::allocator<CShop> >::_Destroy, COMDAT
; _this$ = ecx

; 1599 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi

; 171  : 	for (; _First != _Last; ++_First)

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 13		 je	 SHORT $LN15@Destroy
  0000f	90		 npad	 1
$LL16@Destroy:

; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	6a 00		 push	 0
  00016	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  00018	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  0001e	3b f7		 cmp	 esi, edi
  00020	75 ee		 jne	 SHORT $LL16@Destroy
$LN15@Destroy:
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1601 : 		}

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?_Destroy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXPAVCShop@@0@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?swap@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXAAV12@@Z PROC ; std::vector<CShop,std::allocator<CShop> >::swap, COMDAT
; _this$ = ecx

; 1548 : 		{	// exchange contents with _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 1549 : 		if (this == &_Right)

  00005	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 20		 je	 SHORT $LN7@swap
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  0000e	8b 07		 mov	 eax, DWORD PTR [edi]
  00010	8b 16		 mov	 edx, DWORD PTR [esi]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 54   : 	_Right = _Move(_Tmp);

  00014	89 17		 mov	 DWORD PTR [edi], edx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 53   : 	_Left = _Move(_Right);

  00019	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 54   : 	_Right = _Move(_Tmp);

  0001f	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 52   : 	_Ty _Tmp = _Move(_Left);

  00022	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 53   : 	_Left = _Move(_Right);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 54   : 	_Right = _Move(_Tmp);

  0002b	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
$LN7@swap:
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1576 : 		}

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?swap@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXXZ PROC ; std::vector<CShop,std::allocator<CShop> >::clear, COMDAT
; _this$ = ecx

; 1539 : 		{	// erase all

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  00005	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 171  : 	for (; _First != _Last; ++_First)

  00008	8b 37		 mov	 esi, DWORD PTR [edi]
  0000a	3b f3		 cmp	 esi, ebx
  0000c	74 1d		 je	 SHORT $LN72@clear
  0000e	66 90		 npad	 2
$LL36@clear:

; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	6a 00		 push	 0
  00016	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  00018	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  0001e	3b f3		 cmp	 esi, ebx
  00020	75 ee		 jne	 SHORT $LL36@clear
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00022	8b 07		 mov	 eax, DWORD PTR [edi]
  00024	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 1543 : 		}

  0002a	c3		 ret	 0
$LN72@clear:

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0002b	8b c6		 mov	 eax, esi
  0002d	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx

; 1543 : 		}

  00033	c3		 ret	 0
?clear@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXABVCShop@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXABVCShop@@@Z PROC ; std::vector<CShop,std::allocator<CShop> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 49		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 43		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ; std::vector<CShop,std::allocator<CShop> >::_Reserve
$LN4@push_back:

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  0003a	69 c7 f8 6a 00
	00		 imul	 eax, edi, 27384
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00040	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00042	03 06		 add	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00044	50		 push	 eax
  00045	ff 76 04	 push	 DWORD PTR [esi+4]
  00048	e8 00 00 00 00	 call	 ??$construct@VCShop@@AAV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@AAV2@@Z ; std::allocator<CShop>::construct<CShop,CShop &>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0004d	81 46 04 f8 6a
	00 00		 add	 DWORD PTR [esi+4], 27384 ; 00006af8H
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  0005a	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0005d	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  0005f	6a 01		 push	 1
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXI@Z ; std::vector<CShop,std::allocator<CShop> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00068	57		 push	 edi
  00069	ff 76 04	 push	 DWORD PTR [esi+4]
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ??$construct@VCShop@@ABV1@@?$allocator@VCShop@@@std@@QAEXPAVCShop@@ABV2@@Z ; std::allocator<CShop>::construct<CShop,CShop const &>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00073	81 46 04 f8 6a
	00 00		 add	 DWORD PTR [esi+4], 27384 ; 00006af8H
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
?push_back@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXABVCShop@@@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEAAVCShop@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEAAVCShop@@I@Z PROC ; std::vector<CShop,std::allocator<CShop> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	69 45 08 f8 6a
	00 00		 imul	 eax, DWORD PTR __Pos$[ebp], 27384
  0000a	03 01		 add	 eax, DWORD PTR [ecx]

; 1241 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
??A?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEAAVCShop@@I@Z ENDP ; std::vector<CShop,std::allocator<CShop> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ PROC ; std::vector<CShop,std::allocator<CShop> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 aa 64 02 00	 mov	 eax, 156842		; 000264aaH

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ PROC ; std::vector<CShop,std::allocator<CShop> >::size, COMDAT
; _this$ = ecx

; 1178 : 		{	// return length of sequence

  00000	56		 push	 esi

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1180 : 		}

  0001a	c3		 ret	 0
?size@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ PROC ; std::vector<CShop,std::allocator<CShop> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1046 : 		{	// micro-optimization for capacity() - size()

  00000	56		 push	 esi

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 1048 : 		}

  0001b	c3		 ret	 0
?_Unused_capacity@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ PROC ; std::vector<CShop,std::allocator<CShop> >::capacity, COMDAT
; _this$ = ecx

; 1041 : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1043 : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QBEIXZ ENDP ; std::vector<CShop,std::allocator<CShop> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAE@XZ PROC ; std::vector<CShop,std::allocator<CShop> >::~vector<CShop,std::allocator<CShop> >, COMDAT
; _this$ = ecx

; 975  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ ; std::vector<CShop,std::allocator<CShop> >::_Tidy
??1?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAE@XZ ENDP ; std::vector<CShop,std::allocator<CShop> >::~vector<CShop,std::allocator<CShop> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAE@XZ PROC ; std::vector<CShop,std::allocator<CShop> >::vector<CShop,std::allocator<CShop> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAE@XZ ENDP ; std::vector<CShop,std::allocator<CShop> >::vector<CShop,std::allocator<CShop> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<CShop> >,std::_Vector_val<std::_Simple_types<CShop> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CShop> >::_Vector_val<std::_Simple_types<CShop> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CShop> >::_Vector_val<std::_Simple_types<CShop> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABQAVCShop@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAPAVCShop@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@VCShop@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Swap_all, COMDAT
; _this$ = ecx

; 617  : 		_Get_data()._Swap_all(_Right._Get_data());
; 618  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Swap_alloc, COMDAT
; _this$ = ecx

; 534  : 		_Pocs(_Getal(), _Right._Getal());
; 535  : 		}

  00000	c2 04 00	 ret	 4
?_Swap_alloc@?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Swap_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAE@ABV?$allocator@VCShop@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAE@ABV?$allocator@VCShop@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@VCShop@@V?$allocator@VCShop@@@std@@@std@@@std@@QAE@ABV?$allocator@VCShop@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >::_Vector_alloc<std::_Vec_base_types<CShop,std::allocator<CShop> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 aa 64 02 00	 mov	 eax, 156842		; 000264aaH

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z ; std::allocator<CShop>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEXPAVCShop@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEPAVCShop@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEPAVCShop@@I@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@VCShop@@@std@@QAEPAVCShop@@I@Z ; std::allocator<CShop>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAEPAVCShop@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAE@ABV?$allocator@VCShop@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAE@ABV?$allocator@VCShop@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<CShop> >::_Wrap_alloc<std::allocator<CShop> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@VCShop@@@std@@@std@@QAE@ABV?$allocator@VCShop@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<CShop> >::_Wrap_alloc<std::allocator<CShop> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAIABV?$allocator@VCShop@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAIABV?$allocator@VCShop@@@2@@Z PROC ; std::allocator_traits<std::allocator<CShop> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 aa 64 02 00	 mov	 eax, 156842		; 000264aaH

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@VCShop@@@std@@@std@@SAIABV?$allocator@VCShop@@@2@@Z ENDP ; std::allocator_traits<std::allocator<CShop> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VCShop@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@VCShop@@@std@@QBEIXZ PROC		; std::allocator<CShop>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 aa 64 02 00	 mov	 eax, 156842		; 000264aaH

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@VCShop@@@std@@QBEIXZ ENDP		; std::allocator<CShop>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VCShop@@@std@@QAEPAVCShop@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@VCShop@@@std@@QAEPAVCShop@@I@Z PROC ; std::allocator<CShop>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 04		 jne	 SHORT $LN4@allocate
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
$LN4@allocate:

; 58   : 		return (_Ptr);
; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	3d aa 64 02 00	 cmp	 eax, 156842		; 000264aaH
  00013	77 3f		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00015	69 c0 f8 6a 00
	00		 imul	 eax, eax, 27384

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00020	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00022	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  00025	3b c8		 cmp	 ecx, eax
  00027	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	8b c8		 mov	 ecx, eax
  00031	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00034	85 c9		 test	 ecx, ecx
  00036	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00038	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004b	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0004e	85 c0		 test	 eax, eax
  00050	75 b8		 jne	 SHORT $LN12@allocate
  00052	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  00054	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00059	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00068	cc		 int	 3
?allocate@?$allocator@VCShop@@@std@@QAEPAVCShop@@I@Z ENDP ; std::allocator<CShop>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z PROC ; std::allocator<CShop>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	3d aa 64 02 00	 cmp	 eax, 156842		; 000264aaH
  0000e	77 34		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00010	69 c0 f8 6a 00
	00		 imul	 eax, eax, 27384

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00016	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0001b	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0001d	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00020	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00022	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00025	3b c1		 cmp	 eax, ecx
  00027	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00029	2b c8		 sub	 ecx, eax
  0002b	83 f9 04	 cmp	 ecx, 4
  0002e	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00030	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00033	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00035	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00037	51		 push	 ecx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003d	83 c4 04	 add	 esp, 4

; 639  : 		}

  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00044	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00049	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00058	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  0005d	cc		 int	 3
?deallocate@?$allocator@VCShop@@@std@@QAEXPAVCShop@@I@Z ENDP ; std::allocator<CShop>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VCShop@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@VCShop@@@std@@QAE@ABV01@@Z PROC		; std::allocator<CShop>::allocator<CShop>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@VCShop@@@std@@QAE@ABV01@@Z ENDP		; std::allocator<CShop>::allocator<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VCShop@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@VCShop@@@std@@QAE@XZ PROC		; std::allocator<CShop>::allocator<CShop>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@VCShop@@@std@@QAE@XZ ENDP		; std::allocator<CShop>::allocator<CShop>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?Get@ShopManager@@QAEPAVCShop@@H@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_ShopNumber$ = 8					; size = 4
?Get@ShopManager@@QAEPAVCShop@@H@Z PROC			; ShopManager::Get, COMDAT
; _this$ = ecx

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00007	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  0000c	56		 push	 esi
  0000d	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 325  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0000e	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00010	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00013	2b 73 04	 sub	 esi, DWORD PTR [ebx+4]
  00016	f7 ee		 imul	 esi
  00018	03 d6		 add	 edx, esi
  0001a	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 325  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  00024	74 3b		 je	 SHORT $LN66@Get
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00026	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00029	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  0002c	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  0002f	90		 npad	 1
$LL4@Get:
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 328  : 			&& this->m_ShopList[i].m_Loaded == true )

  00030	8b 45 08	 mov	 eax, DWORD PTR _ShopNumber$[ebp]
  00033	39 46 fc	 cmp	 DWORD PTR [esi-4], eax
  00036	75 05		 jne	 SHORT $LN2@Get
  00038	80 3e 01	 cmp	 BYTE PTR [esi], 1
  0003b	74 2f		 je	 SHORT $LN62@Get
$LN2@Get:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00040	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00045	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 325  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  00048	47		 inc	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00049	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 325  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0004b	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00051	03 d1		 add	 edx, ecx
  00053	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00056	8b c2		 mov	 eax, edx
  00058	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005b	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 325  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0005d	3b f8		 cmp	 edi, eax
  0005f	72 cf		 jb	 SHORT $LL4@Get
$LN66@Get:
  00061	5f		 pop	 edi
  00062	5e		 pop	 esi

; 329  : 		{
; 330  : 			return &this->m_ShopList[i];
; 331  : 		}
; 332  : 	}
; 333  : 	return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	5b		 pop	 ebx

; 334  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
$LN62@Get:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0006c	69 c7 f8 6a 00
	00		 imul	 eax, edi, 27384
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	03 45 fc	 add	 eax, DWORD PTR $T1[ebp]
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 334  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?Get@ShopManager@@QAEPAVCShop@@H@Z ENDP			; ShopManager::Get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?Read@ShopManager@@QAEXH@Z
_TEXT	SEGMENT
_i$1$ = -27664						; size = 4
_lpShop$ = -27660					; size = 27384
_FilePath$ = -276					; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ShopNumber$ = 8					; size = 4
?Read@ShopManager@@QAEXH@Z PROC				; ShopManager::Read, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@ShopManager@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 08 6c 00 00	 mov	 eax, 27656		; 00006c08H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	53		 push	 ebx
  00026	56		 push	 esi
  00027	57		 push	 edi
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00032	8b d9		 mov	 ebx, ecx

; 274  : 	if( ShopNumber < 0 )

  00034	8b 7d 08	 mov	 edi, DWORD PTR _ShopNumber$[ebp]
  00037	85 ff		 test	 edi, edi
  00039	79 13		 jns	 SHORT $LN5@Read

; 275  : 	{
; 276  : 		MsgBox("[ShopManager] File %d not found!", ShopNumber);

  0003b	57		 push	 edi
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CANJHFPB@?$FLShopManager?$FN?5File?5?$CFd?5not?5found?$CB@
  00041	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00046	83 c4 08	 add	 esp, 8

; 277  : 		return;

  00049	e9 0d 01 00 00	 jmp	 $LN1@Read
$LN5@Read:

; 280  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0004e	33 c9		 xor	 ecx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00050	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 280  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  00055	89 8d f0 93 ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0005e	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
  00061	f7 e9		 imul	 ecx
  00063	03 d1		 add	 edx, ecx
  00065	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00068	8b c2		 mov	 eax, edx
  0006a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006d	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 280  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0006f	74 3b		 je	 SHORT $LN3@Read
  00071	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00074	83 c6 04	 add	 esi, 4
$LL4@Read:

; 281  : 	{
; 282  : 		if( this->m_ShopList[i].m_ShopNumber == ShopNumber )

  00077	39 3e		 cmp	 DWORD PTR [esi], edi
  00079	0f 84 dc 00 00
	00		 je	 $LN1@Read
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0007f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00082	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00087	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 280  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0008a	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  00090	ff 85 f0 93 ff
	ff		 inc	 DWORD PTR _i$1$[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00096	f7 e9		 imul	 ecx
  00098	03 d1		 add	 edx, ecx
  0009a	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0009d	8b c2		 mov	 eax, edx
  0009f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a2	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 280  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  000a4	39 85 f0 93 ff
	ff		 cmp	 DWORD PTR _i$1$[ebp], eax
  000aa	72 cb		 jb	 SHORT $LL4@Read
$LN3@Read:

; 283  : 		{
; 284  : 			return;
; 285  : 		}
; 286  : 	}
; 287  : 
; 288  : 	CShop lpShop;

  000ac	8d 8d f4 93 ff
	ff		 lea	 ecx, DWORD PTR _lpShop$[ebp]
  000b2	e8 00 00 00 00	 call	 ??0CShop@@QAE@XZ	; CShop::CShop

; 289  : 	lpShop.Init();

  000b7	8d 8d f4 93 ff
	ff		 lea	 ecx, DWORD PTR _lpShop$[ebp]
  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c4	e8 00 00 00 00	 call	 ?Init@CShop@@QAEXXZ	; CShop::Init
  000c9	68 04 01 00 00	 push	 260			; 00000104H
  000ce	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$[ebp]

; 290  : 	lpShop.m_ShopNumber = ShopNumber;

  000d4	89 bd f8 93 ff
	ff		 mov	 DWORD PTR _lpShop$[ebp+4], edi
  000da	6a 00		 push	 0
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _memset

; 291  : 
; 292  : 	char FilePath[MAX_PATH] = { 0 };
; 293  : 	sprintf(FilePath, "Shop\\Shop%d.xml", ShopNumber);

  000e2	57		 push	 edi
  000e3	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$[ebp]
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HNJFAPHD@Shop?2Shop?$CFd?4xml?$AA@
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 _sprintf
  000f4	83 c4 18	 add	 esp, 24			; 00000018H

; 294  : 	if( _access(gDirPath.GetNewPath(FilePath), 4) != -1 )

  000f7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$[ebp]
  000fd	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00102	6a 04		 push	 4
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 __access
  00110	83 c4 08	 add	 esp, 8
  00113	83 f8 ff	 cmp	 eax, -1
  00116	74 34		 je	 SHORT $LN8@Read

; 295  : 	{
; 296  : 		if( lpShop.LoadShopItem(gDirPath.GetNewPath(FilePath)) )

  00118	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$[ebp]
  0011e	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00129	50		 push	 eax
  0012a	8d 8d f4 93 ff
	ff		 lea	 ecx, DWORD PTR _lpShop$[ebp]
  00130	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem
  00135	0f b6 95 fc 93
	ff ff		 movzx	 edx, BYTE PTR _lpShop$[ebp+8]
  0013c	85 c0		 test	 eax, eax
  0013e	b9 01 00 00 00	 mov	 ecx, 1
  00143	0f 45 d1	 cmovne	 edx, ecx
  00146	88 95 fc 93 ff
	ff		 mov	 BYTE PTR _lpShop$[ebp+8], dl
$LN8@Read:

; 297  : 		{
; 298  : 			lpShop.m_Loaded = true;
; 299  : 		}
; 300  : 	}
; 301  : 
; 302  : 	this->m_ShopList.push_back(lpShop);

  0014c	8d 85 f4 93 ff
	ff		 lea	 eax, DWORD PTR _lpShop$[ebp]
  00152	50		 push	 eax
  00153	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  00156	e8 00 00 00 00	 call	 ?push_back@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@QAEXABVCShop@@@Z ; std::vector<CShop,std::allocator<CShop> >::push_back
$LN1@Read:

; 303  : }

  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	33 cd		 xor	 ecx, ebp
  0016e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@ShopManager@@QAEXH@Z$0:
  00000	8d 8d f4 93 ff
	ff		 lea	 ecx, DWORD PTR _lpShop$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CShop@@UAE@XZ	; CShop::~CShop
__ehhandler$?Read@ShopManager@@QAEXH@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e8 93 ff
	ff		 mov	 ecx, DWORD PTR [edx-27672]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@ShopManager@@QAEXH@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@ShopManager@@QAEXH@Z ENDP				; ShopManager::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?Reload@ShopManager@@QAEXXZ
_TEXT	SEGMENT
_i$1$ = -268						; size = 4
_FilePath$1 = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
?Reload@ShopManager@@QAEXXZ PROC			; ShopManager::Reload, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx

; 307  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  00016	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  00020	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00021	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00026	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00029	2b 73 04	 sub	 esi, DWORD PTR [ebx+4]
  0002c	f7 ee		 imul	 esi
  0002e	03 d6		 add	 edx, esi
  00030	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 307  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  0003a	0f 84 be 00 00
	00		 je	 $LN3@Reload
  00040	57		 push	 edi
  00041	33 ff		 xor	 edi, edi
  00043	33 f6		 xor	 esi, esi
$LL4@Reload:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00045	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00048	03 cf		 add	 ecx, edi
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 309  : 		this->m_ShopList[i].Init();

  0004a	e8 00 00 00 00	 call	 ?Init@CShop@@QAEXXZ	; CShop::Init

; 310  : 		this->m_ShopList[i].m_ShopNumber = i;

  0004f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00052	68 04 01 00 00	 push	 260			; 00000104H
  00057	6a 00		 push	 0
  00059	89 74 07 04	 mov	 DWORD PTR [edi+eax+4], esi
  0005d	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$1[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _memset

; 311  : 		char FilePath[MAX_PATH] = { 0 };
; 312  : 		sprintf(FilePath, "Shop\\Shop%d.xml", i);

  00069	56		 push	 esi
  0006a	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$1[ebp]
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HNJFAPHD@Shop?2Shop?$CFd?4xml?$AA@
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 _sprintf
  0007b	83 c4 18	 add	 esp, 24			; 00000018H

; 313  : 		if( _access(gDirPath.GetNewPath(FilePath), 4) != -1 )

  0007e	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$1[ebp]
  00084	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00089	6a 04		 push	 4
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 __access
  00097	83 c4 08	 add	 esp, 8
  0009a	83 f8 ff	 cmp	 eax, -1
  0009d	74 30		 je	 SHORT $LN2@Reload
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0009f	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 315  : 			if( this->m_ShopList[i].LoadShopItem(gDirPath.GetNewPath(FilePath)) )

  000a2	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _FilePath$1[ebp]
  000a8	50		 push	 eax
  000a9	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  000ae	03 f7		 add	 esi, edi
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 315  : 			if( this->m_ShopList[i].LoadShopItem(gDirPath.GetNewPath(FilePath)) )

  000b0	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  000b5	50		 push	 eax
  000b6	8b ce		 mov	 ecx, esi
  000b8	e8 00 00 00 00	 call	 ?LoadShopItem@CShop@@QAEHPAD@Z ; CShop::LoadShopItem
  000bd	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
  000c3	85 c0		 test	 eax, eax
  000c5	74 08		 je	 SHORT $LN2@Reload

; 316  : 			{
; 317  : 				this->m_ShopList[i].m_Loaded = true;

  000c7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000ca	c6 44 07 08 01	 mov	 BYTE PTR [edi+eax+8], 1
$LN2@Reload:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000cf	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  000d2	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  000d7	2b 4b 04	 sub	 ecx, DWORD PTR [ebx+4]
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 307  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  000da	46		 inc	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000db	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 307  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  000dd	81 c7 f8 6a 00
	00		 add	 edi, 27384		; 00006af8H
  000e3	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  000e9	03 d1		 add	 edx, ecx
  000eb	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  000ee	8b c2		 mov	 eax, edx
  000f0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f3	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 307  : 	for( int i = 0; i < this->m_ShopList.size(); i++ )

  000f5	3b f0		 cmp	 esi, eax
  000f7	0f 82 48 ff ff
	ff		 jb	 $LL4@Reload
  000fd	5f		 pop	 edi
$LN3@Reload:

; 318  : 			}
; 319  : 		}
; 320  : 	}
; 321  : }

  000fe	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00101	5e		 pop	 esi
  00102	33 cd		 xor	 ecx, ebp
  00104	5b		 pop	 ebx
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
?Reload@ShopManager@@QAEXXZ ENDP			; ShopManager::Reload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?Init@ShopManager@@QAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?Init@ShopManager@@QAEXXZ PROC				; ShopManager::Init, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  00007	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  0000a	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 171  : 	for (; _First != _Last; ++_First)

  0000b	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000e	57		 push	 edi
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 265  : 	this->m_ShopList.clear();

  0000f	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 171  : 	for (; _First != _Last; ++_First)

  00012	3b f3		 cmp	 esi, ebx
  00014	74 12		 je	 SHORT $LN40@Init
$LL41@Init:

; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}
; 174  : 
; 175  : template<class _Alloc> inline
; 176  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 177  : 		typename _Alloc::pointer _Last, _Alloc& _Al,
; 178  : 		_Scalar_ptr_iterator_tag)
; 179  : 	{	// destroy [_First, _Last), scalar type (do nothing)
; 180  : 	}
; 181  : 
; 182  : template<class _Alloc> inline
; 183  : 	void _Destroy_range(typename _Alloc::pointer _First,
; 184  : 		typename _Alloc::pointer _Last, _Alloc& _Al)
; 185  : 	{	// destroy [_First, _Last)
; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}
; 188  : 
; 189  : 		// TEMPLATE CLASS _Is_simple_alloc
; 190  : template<class _Alty>
; 191  : 	struct _Is_simple_alloc
; 192  : 		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
; 193  : 		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
; 194  : 		&& is_same<typename _Alty::pointer,
; 195  : 			typename _Alty::value_type *>::value
; 196  : 		&& is_same<typename _Alty::const_pointer,
; 197  : 			const typename _Alty::value_type *>::value
; 198  : 		&& is_same<typename _Alty::reference,
; 199  : 			typename _Alty::value_type&>::value
; 200  : 		&& is_same<typename _Alty::const_reference,
; 201  : 			const typename _Alty::value_type&>::value>
; 202  : 	{	// tests if allocator has simple addressing
; 203  : 	};
; 204  : 
; 205  : 		// TEMPLATE CLASS _Simple_types
; 206  : template<class _Value_type>
; 207  : 	struct _Simple_types
; 208  : 	{	// wraps types needed by iterators
; 209  : 	typedef _Value_type value_type;
; 210  : 	typedef size_t size_type;
; 211  : 	typedef ptrdiff_t difference_type;
; 212  : 	typedef value_type *pointer;
; 213  : 	typedef const value_type *const_pointer;
; 214  : 	typedef value_type& reference;
; 215  : 	typedef const value_type& const_reference;
; 216  : 	};
; 217  : 
; 218  : 		// TEMPLATE CLASS _Get_voidptr
; 219  : template<class _Alty,
; 220  : 	class _Pointer>
; 221  : 	struct _Get_voidptr
; 222  : 	{	// get void pointer for allocator
; 223  : 	typedef typename _Alty::template rebind<void>::other _Alvoid;
; 224  : 	typedef typename _Alvoid::pointer type;
; 225  : 	};
; 226  : 
; 227  : template<class _Alty,
; 228  : 	class _Ty>
; 229  : 	struct _Get_voidptr<_Alty, _Ty *>
; 230  : 	{	// get raw void pointer for allocator
; 231  : 	typedef void *type;
; 232  : 	};
; 233  : 
; 234  : 		// TEMPLATE STRUCT _Get_first_parameter
; 235  : template<class _Ty>
; 236  : 	struct _Get_first_parameter;
; 237  : 
; 238  : template<template<class, class...> class _Ty,
; 239  : 	class _First,
; 240  : 	class... _Rest>
; 241  : 	struct _Get_first_parameter<_Ty<_First, _Rest...> >
; 242  : 	{	// given _Ty<_First, _Rest...>, extract _First
; 243  : 	typedef _First type;
; 244  : 	};
; 245  : 
; 246  : 		// TEMPLATE STRUCT _Replace_first_parameter
; 247  : template<class _Newfirst,
; 248  : 	class _Ty>
; 249  : 	struct _Replace_first_parameter;
; 250  : 
; 251  : template<class _Newfirst,
; 252  : 	template<class, class...> class _Ty,
; 253  : 	class _First,
; 254  : 	class... _Rest>
; 255  : 	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
; 256  : 	{	// given _Ty<_First, _Rest...>, replace _First
; 257  : 	typedef _Ty<_Newfirst, _Rest...> type;
; 258  : 	};
; 259  : 
; 260  : 		// TEMPLATE STRUCT _Get_element_type
; 261  : template<class _Ty>
; 262  : 	struct _Get_element_type
; 263  : 	_GET_TYPE_OR_DEFAULT(element_type,
; 264  : 		typename _Get_first_parameter<_Uty>::type);
; 265  : 
; 266  : 		// TEMPLATE STRUCT _Get_ptr_difference_type
; 267  : template<class _Ty>
; 268  : 	struct _Get_ptr_difference_type
; 269  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 270  : 		ptrdiff_t);
; 271  : 
; 272  : 		// TEMPLATE STRUCT _Get_rebind_type
; 273  : template<class _Ty,
; 274  : 	class _Other>
; 275  : 	struct _Get_rebind_type
; 276  : 	_GET_TYPE_OR_DEFAULT(template rebind<_Other>::other,
; 277  : 		typename _Replace_first_parameter<_Other _COMMA _Uty>::type);
; 278  : 
; 279  : 		// TEMPLATE CLASS pointer_traits
; 280  : template<class _Ty>
; 281  : 	struct pointer_traits
; 282  : 	{	// defines traits for arbitrary pointers
; 283  : 	typedef typename _Get_element_type<_Ty>::type element_type;
; 284  : 	typedef _Ty pointer;
; 285  : 	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;
; 286  : 
; 287  : 	template<class _Other>
; 288  : 		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;
; 289  : 
; 290  : 	typedef typename _If<is_void<element_type>::value,
; 291  : 		char&,
; 292  : 		typename add_lvalue_reference<element_type>::type>::type _Reftype;
; 293  : 
; 294  : 	static pointer pointer_to(_Reftype _Val)
; 295  : 		{	// convert raw reference to pointer
; 296  : 		return (_Ty::pointer_to(_Val));
; 297  : 		}
; 298  : 	};
; 299  : 
; 300  : 		// TEMPLATE CLASS pointer_traits<_Ty *>
; 301  : template<class _Ty>
; 302  : 	struct pointer_traits<_Ty *>
; 303  : 	{	// defines traits for raw pointers
; 304  : 	typedef _Ty element_type;
; 305  : 	typedef _Ty *pointer;
; 306  : 	typedef ptrdiff_t difference_type;
; 307  : 
; 308  : 	template<class _Other>
; 309  : 		using rebind = _Other *;
; 310  : 
; 311  : 	typedef typename _If<is_void<_Ty>::value,
; 312  : 		char&,
; 313  : 		typename add_lvalue_reference<_Ty>::type>::type _Reftype;
; 314  : 
; 315  : 	static pointer pointer_to(_Reftype _Val)
; 316  : 		{	// convert raw reference to pointer
; 317  : 		return (_STD addressof(_Val));
; 318  : 		}
; 319  : 	};
; 320  : 
; 321  : 		// TEMPLATE STRUCT _Get_pointer_type
; 322  : template<class _Ty>
; 323  : 	struct _Get_pointer_type
; 324  : 	_GET_TYPE_OR_DEFAULT(pointer,
; 325  : 		typename _Ty::value_type *);
; 326  : 
; 327  : 		// TEMPLATE STRUCT _Get_const_pointer_type
; 328  : template<class _Ty>
; 329  : 	struct _Get_const_pointer_type
; 330  : 	_GET_TYPE_OR_DEFAULT(const_pointer,
; 331  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 332  : 			::template rebind<const typename _Ty::value_type>);
; 333  : 
; 334  : 		// TEMPLATE STRUCT _Get_void_pointer_type
; 335  : template<class _Ty>
; 336  : 	struct _Get_void_pointer_type
; 337  : 	_GET_TYPE_OR_DEFAULT(void_pointer,
; 338  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 339  : 			::template rebind<void>);
; 340  : 
; 341  : 		// TEMPLATE STRUCT _Get_const_void_pointer_type
; 342  : template<class _Ty>
; 343  : 	struct _Get_const_void_pointer_type
; 344  : 	_GET_TYPE_OR_DEFAULT(const_void_pointer,
; 345  : 		typename pointer_traits<typename _Get_pointer_type<_Ty>::type>
; 346  : 			::template rebind<const void>);
; 347  : 
; 348  : 		// TEMPLATE STRUCT _Get_difference_type
; 349  : template<class _Ty>
; 350  : 	struct _Get_difference_type
; 351  : 	_GET_TYPE_OR_DEFAULT(difference_type,
; 352  : 		typename _Get_ptr_difference_type<
; 353  : 			typename _Get_pointer_type<_Ty>::type>::type);
; 354  : 
; 355  : 		// TEMPLATE STRUCT _Get_size_type
; 356  : template<class _Ty>
; 357  : 	struct _Get_size_type
; 358  : 	_GET_TYPE_OR_DEFAULT(size_type,
; 359  : 		typename make_unsigned<
; 360  : 			typename _Get_difference_type<_Ty>::type>::type);
; 361  : 
; 362  : 		// TEMPLATE STRUCT _Get_propagate_on_container_copy
; 363  : template<class _Ty>
; 364  : 	struct _Get_propagate_on_container_copy
; 365  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_copy_assignment,
; 366  : 		false_type);
; 367  : 
; 368  : 		// TEMPLATE STRUCT _Get_propagate_on_container_move
; 369  : template<class _Ty>
; 370  : 	struct _Get_propagate_on_container_move
; 371  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_move_assignment,
; 372  : 		false_type);
; 373  : 
; 374  : 		// TEMPLATE STRUCT _Get_propagate_on_container_swap
; 375  : template<class _Ty>
; 376  : 	struct _Get_propagate_on_container_swap
; 377  : 	_GET_TYPE_OR_DEFAULT(propagate_on_container_swap,
; 378  : 		false_type);
; 379  : 
; 380  : 		// TEMPLATE STRUCT _Get_is_always_equal
; 381  : template<class _Ty>
; 382  : 	struct _Get_is_always_equal
; 383  : 	_GET_TYPE_OR_DEFAULT(is_always_equal,
; 384  : 		typename is_empty<_Ty>::type);
; 385  : 
; 386  : 		// STRUCT _Alloc_allocate
; 387  : struct _Alloc_allocate
; 388  : 	{	// determines allocator_traits<_Alloc>
; 389  : 		// ::allocate(size_type, const_void_pointer)
; 390  : 
; 391  : 	template<class _Alloc,
; 392  : 		class _Size_type,
; 393  : 		class _Const_void_pointer>
; 394  : 		static auto _Fn(int, _Alloc& _Al,
; 395  : 			_Size_type _Count,
; 396  : 			_Const_void_pointer _Hint)
; 397  : 			-> decltype(_Al.allocate(_Count, _Hint))
; 398  : 		{	// call allocator supplied version
; 399  : 		return (_Al.allocate(_Count, _Hint));
; 400  : 		}
; 401  : 
; 402  : 	template<class _Alloc,
; 403  : 		class _Size_type,
; 404  : 		class _Const_void_pointer>
; 405  : 		static auto _Fn(_Wrap_int, _Alloc& _Al,
; 406  : 			_Size_type _Count,
; 407  : 			_Const_void_pointer)
; 408  : 			-> decltype(_Al.allocate(_Count))
; 409  : 		{	// call default version
; 410  : 		return (_Al.allocate(_Count));
; 411  : 		}
; 412  : 	};
; 413  : 
; 414  : 		// STRUCT _Alloc_construct
; 415  : struct _Alloc_construct
; 416  : 	{	// determines allocator_traits<_Ty>
; 417  : 		// ::construct(_Ty&, _Objty *, _Types&&...)
; 418  : 
; 419  : 	template<class _Ty,
; 420  : 		class _Objty,
; 421  : 		class... _Types>
; 422  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
; 423  : 			_Types&&... _Args)
; 424  : 			-> void_t<decltype(
; 425  : 				_Al.construct(_Ptr, _STD forward<_Types>(_Args)...))>
; 426  : 		{	// call allocator supplied version
; 427  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 428  : 		}
; 429  : 
; 430  : 	template<class _Ty,
; 431  : 		class _Objty,
; 432  : 		class... _Types>
; 433  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
; 434  : 			_Types&&... _Args)
; 435  : 		{	// call default version
; 436  : 		::new (static_cast<void *>(_Ptr))
; 437  : 			_Objty(_STD forward<_Types>(_Args)...);
; 438  : 		}
; 439  : 
; 440  : 	};
; 441  : 
; 442  : 		// STRUCT _Alloc_destroy
; 443  : struct _Alloc_destroy
; 444  : 	{	// determines allocator_traits<_Ty>::destroy(_Ty&, _Objty *)
; 445  : 	template<class _Ty,
; 446  : 		class _Objty>
; 447  : 		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
; 448  : 			-> void_t<decltype(_Al.destroy(_Ptr))>
; 449  : 		{	// call allocator supplied version
; 450  : 		_Al.destroy(_Ptr);
; 451  : 		}
; 452  : 
; 453  : 	template<class _Ty,
; 454  : 		class _Objty>
; 455  : 		static void _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
; 456  : 		{	// call default version
; 457  : 		_Ptr->~_Objty();
; 458  : 		}
; 459  : 	};
; 460  : 
; 461  : 		// STRUCT _Alloc_max_size
; 462  : struct _Alloc_max_size
; 463  : 	{	// determines allocator_traits<_Ty>::max_size(const _Ty&)
; 464  : 	template<class _Ty>
; 465  : 		static auto _Fn(int, const _Ty& _Al) _NOEXCEPT
; 466  : 			-> decltype(_Al.max_size())
; 467  : 		{	// call allocator supplied version
; 468  : 		return (_Al.max_size());
; 469  : 		}
; 470  : 
; 471  : 	template<class _Ty>
; 472  : 		static auto _Fn(_Wrap_int, const _Ty&) _NOEXCEPT
; 473  : 			-> typename _Get_size_type<_Ty>::type
; 474  : 		{	// call default version
; 475  : 		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
; 476  : 		}
; 477  : 	};
; 478  : 
; 479  : 		// STRUCT _Alloc_select
; 480  : struct _Alloc_select
; 481  : 	{	// determines allocator_traits<_Ty>
; 482  : 		// ::select_on_container_copy_construction(const _Alloc&)
; 483  : 
; 484  : 	template<class _Ty>
; 485  : 		static auto _Fn(int, const _Ty& _Al)
; 486  : 			-> decltype((_Ty)_Al.select_on_container_copy_construction())
; 487  : 		{	// call allocator supplied version
; 488  : 		return (_Al.select_on_container_copy_construction());
; 489  : 		}
; 490  : 
; 491  : 	template<class _Ty>
; 492  : 		static auto _Fn(_Wrap_int, const _Ty& _Al)
; 493  : 			-> _Ty
; 494  : 		{	// call default version
; 495  : 		return (_Al);
; 496  : 		}
; 497  : 	};
; 498  : 
; 499  : 		// TEMPLATE CLASS allocator_traits
; 500  : template<class _Alloc>
; 501  : 	struct allocator_traits
; 502  : 	{	// defines traits for allocators
; 503  : 	typedef _Alloc allocator_type;
; 504  : 	typedef typename _Alloc::value_type value_type;
; 505  : 
; 506  : 	typedef typename _Get_pointer_type<_Alloc>::type
; 507  : 		pointer;
; 508  : 	typedef typename _Get_const_pointer_type<_Alloc>::type
; 509  : 		const_pointer;
; 510  : 	typedef typename _Get_void_pointer_type<_Alloc>::type
; 511  : 		void_pointer;
; 512  : 	typedef typename _Get_const_void_pointer_type<_Alloc>::type
; 513  : 		const_void_pointer;
; 514  : 
; 515  : 	typedef typename _Get_size_type<_Alloc>::type size_type;
; 516  : 	typedef typename _Get_difference_type<_Alloc>::type difference_type;
; 517  : 
; 518  : 	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
; 519  : 		propagate_on_container_copy_assignment;
; 520  : 	typedef typename _Get_propagate_on_container_move<_Alloc>::type
; 521  : 		propagate_on_container_move_assignment;
; 522  : 	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
; 523  : 		propagate_on_container_swap;
; 524  : 	typedef typename _Get_is_always_equal<_Alloc>::type
; 525  : 		is_always_equal;
; 526  : 
; 527  : 	template<class _Other>
; 528  : 		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;
; 529  : 
; 530  : 	template<class _Other>
; 531  : 		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;
; 532  : 
; 533  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count)
; 534  : 		{	// allocate array of _Count elements
; 535  : 		return (_Al.allocate(_Count));
; 536  : 		}
; 537  : 
; 538  : 	static _DECLSPEC_ALLOCATOR pointer allocate(_Alloc& _Al, size_type _Count,
; 539  : 		const_void_pointer _Hint)
; 540  : 		{	// allocate array of _Count elements, with hint
; 541  : 		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
; 542  : 		}
; 543  : 
; 544  : 	static void deallocate(_Alloc& _Al,
; 545  : 		pointer _Ptr, size_type _Count)
; 546  : 		{	// deallocate _Count elements at _Ptr
; 547  : 		_Al.deallocate(_Ptr, _Count);
; 548  : 		}
; 549  : 
; 550  : 	template<class _Ty,
; 551  : 		class... _Types>
; 552  : 		static void construct(_Alloc& _Al, _Ty *_Ptr,
; 553  : 			_Types&&... _Args)
; 554  : 		{	// construct _Ty(_Types...) at _Ptr
; 555  : 		_Alloc_construct::_Fn(0, _Al, _Ptr,
; 556  : 			_STD forward<_Types>(_Args)...);
; 557  : 		}
; 558  : 
; 559  : 
; 560  : 	template<class _Ty>
; 561  : 		static void destroy(_Alloc& _Al, _Ty *_Ptr)
; 562  : 		{	// destroy object at _Ptr
; 563  : 		_Alloc_destroy::_Fn(0, _Al, _Ptr);
; 564  : 		}
; 565  : 
; 566  : 	static size_type max_size(const _Alloc& _Al) _NOEXCEPT
; 567  : 		{	// get maximum size
; 568  : 		return (_Alloc_max_size::_Fn(0, _Al));
; 569  : 		}
; 570  : 
; 571  : 	static _Alloc select_on_container_copy_construction(
; 572  : 		const _Alloc& _Al)
; 573  : 		{	// get allocator to use
; 574  : 		return (_Alloc_select::_Fn(0, _Al));
; 575  : 		}
; 576  : 	};
; 577  : 
; 578  : 		// TEMPLATE CLASS allocator
; 579  : template<class _Ty>
; 580  : 	class allocator
; 581  : 	{	// generic allocator for objects of class _Ty
; 582  : public:
; 583  : 	static_assert(!is_const<_Ty>::value,
; 584  : 		"The C++ Standard forbids containers of const elements "
; 585  : 		"because allocator<const T> is ill-formed.");
; 586  : 
; 587  : 	typedef _Ty value_type;
; 588  : 
; 589  : 	typedef value_type *pointer;
; 590  : 	typedef const value_type *const_pointer;
; 591  : 
; 592  : 	typedef value_type& reference;
; 593  : 	typedef const value_type& const_reference;
; 594  : 
; 595  : 	typedef size_t size_type;
; 596  : 	typedef ptrdiff_t difference_type;
; 597  : 
; 598  : 	typedef true_type propagate_on_container_move_assignment;
; 599  : 	typedef true_type is_always_equal;
; 600  : 
; 601  : 	template<class _Other>
; 602  : 		struct rebind
; 603  : 		{	// convert this type to allocator<_Other>
; 604  : 		typedef allocator<_Other> other;
; 605  : 		};
; 606  : 
; 607  : 	pointer address(reference _Val) const _NOEXCEPT
; 608  : 		{	// return address of mutable _Val
; 609  : 		return (_STD addressof(_Val));
; 610  : 		}
; 611  : 
; 612  : 	const_pointer address(const_reference _Val) const _NOEXCEPT
; 613  : 		{	// return address of nonmutable _Val
; 614  : 		return (_STD addressof(_Val));
; 615  : 		}
; 616  : 
; 617  : 	allocator() _THROW0()
; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}
; 620  : 
; 621  : 	allocator(const allocator<_Ty>&) _THROW0()
; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}
; 624  : 
; 625  : 	template<class _Other>
; 626  : 		allocator(const allocator<_Other>&) _THROW0()
; 627  : 		{	// construct from a related allocator (do nothing)
; 628  : 		}
; 629  : 
; 630  : 	template<class _Other>
; 631  : 		allocator<_Ty>& operator=(const allocator<_Other>&)
; 632  : 		{	// assign from a related allocator (do nothing)
; 633  : 		return (*this);
; 634  : 		}
; 635  : 
; 636  : 	void deallocate(pointer _Ptr, size_type _Count)
; 637  : 		{	// deallocate object at _Ptr
; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 639  : 		}
; 640  : 
; 641  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count)
; 642  : 		{	// allocate array of _Count elements
; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}
; 645  : 
; 646  : 	_DECLSPEC_ALLOCATOR pointer allocate(size_type _Count, const void *)
; 647  : 		{	// allocate array of _Count elements, ignore hint
; 648  : 		return (allocate(_Count));
; 649  : 		}
; 650  : 
; 651  : 	template<class _Objty,
; 652  : 		class... _Types>
; 653  : 		void construct(_Objty *_Ptr, _Types&&... _Args)
; 654  : 		{	// construct _Objty(_Types...) at _Ptr
; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);
; 656  : 		}
; 657  : 
; 658  : 
; 659  : 	template<class _Uty>
; 660  : 		void destroy(_Uty *_Ptr)
; 661  : 		{	// destroy object at _Ptr
; 662  : 		_Ptr->~_Uty();

  00016	8b 06		 mov	 eax, DWORD PTR [esi]
  00018	8b ce		 mov	 ecx, esi
  0001a	6a 00		 push	 0
  0001c	ff 10		 call	 DWORD PTR [eax]

; 171  : 	for (; _First != _Last; ++_First)

  0001e	81 c6 f8 6a 00
	00		 add	 esi, 27384		; 00006af8H
  00024	3b f3		 cmp	 esi, ebx
  00026	75 ee		 jne	 SHORT $LL41@Init
$LN40@Init:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 976  : 		}
; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0002d	b8 f3 8d 2a 99	 mov	 eax, -1725264397	; 992a8df3H
  00032	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00035	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00037	f7 e9		 imul	 ecx
  00039	03 d1		 add	 edx, ecx
  0003b	c1 fa 0e	 sar	 edx, 14			; 0000000eH
  0003e	8b c2		 mov	 eax, edx
  00040	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00043	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 266  : 	if( this->m_ShopList.capacity() > 0 )

  00045	74 49		 je	 SHORT $LN336@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1549 : 		if (this == &_Right)

  00047	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]

; 480  : 		_Myfirst = pointer();

  0004a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 481  : 		_Mylast = pointer();

  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+4], 0

; 482  : 		_Myend = pointer();

  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0

; 1549 : 		if (this == &_Right)

  0005f	3b c7		 cmp	 eax, edi
  00061	74 25		 je	 SHORT $LN115@Init
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility

; 53   : 	_Left = _Move(_Right);

  00063	8b 07		 mov	 eax, DWORD PTR [edi]

; 54   : 	_Right = _Move(_Tmp);

  00065	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0006b	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 53   : 	_Left = _Move(_Right);

  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 54   : 	_Right = _Move(_Tmp);

  00071	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00078	89 45 f8	 mov	 DWORD PTR $T1[ebp+4], eax

; 53   : 	_Left = _Move(_Right);

  0007b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0007e	89 45 fc	 mov	 DWORD PTR $T1[ebp+8], eax

; 54   : 	_Right = _Move(_Tmp);

  00081	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN115@Init:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 975  : 		_Tidy();

  00088	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  0008b	e8 00 00 00 00	 call	 ?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ ; std::vector<CShop,std::allocator<CShop> >::_Tidy
$LN336@Init:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 270  : }

  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c3		 ret	 0
?Init@ShopManager@@QAEXXZ ENDP				; ShopManager::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ??1ShopManager@@UAE@XZ
_TEXT	SEGMENT
??1ShopManager@@UAE@XZ PROC				; ShopManager::~ShopManager, COMDAT
; _this$ = ecx

; 259  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ShopManager@@6B@

; 261  : }

  00006	83 c1 04	 add	 ecx, 4
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 975  : 		_Tidy();

  00009	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@VCShop@@V?$allocator@VCShop@@@std@@@std@@IAEXXZ ; std::vector<CShop,std::allocator<CShop> >::_Tidy
??1ShopManager@@UAE@XZ ENDP				; ShopManager::~ShopManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ??0ShopManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ShopManager@@QAE@XZ PROC				; ShopManager::ShopManager, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ShopManager@@6B@

; 256  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 481  : 		_Mylast = pointer();

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 256  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0ShopManager@@QAE@XZ ENDP				; ShopManager::ShopManager
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCShop@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCShop@@UAEPAXI@Z PROC				; CShop::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CShop@@UAE@XZ	; CShop::~CShop
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 f8 6a 00 00	 push	 27384			; 00006af8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCShop@@UAEPAXI@Z ENDP				; CShop::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0CShop@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___that$ = 8						; size = 4
??0CShop@@QAE@ABV0@@Z PROC				; CShop::CShop, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b d1		 mov	 edx, ecx
  00006	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  0000b	53		 push	 ebx
  0000c	8b 5d 08	 mov	 ebx, DWORD PTR ___that$[ebp]
  0000f	56		 push	 esi
  00010	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7CShop@@6B@
  00016	57		 push	 edi
  00017	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001a	8d 7a 09	 lea	 edi, DWORD PTR [edx+9]
  0001d	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00020	8d 73 09	 lea	 esi, DWORD PTR [ebx+9]
  00023	0f b6 43 08	 movzx	 eax, BYTE PTR [ebx+8]
  00027	88 42 08	 mov	 BYTE PTR [edx+8], al
  0002a	f3 a5		 rep movsd
  0002c	8b 83 84 00 00
	00		 mov	 eax, DWORD PTR [ebx+132]
  00032	89 82 84 00 00
	00		 mov	 DWORD PTR [edx+132], eax
  00038	8d 83 88 00 00
	00		 lea	 eax, DWORD PTR [ebx+136]
  0003e	68 60 63 00 00	 push	 25440			; 00006360H
  00043	50		 push	 eax
  00044	8d 82 88 00 00
	00		 lea	 eax, DWORD PTR [edx+136]
  0004a	89 55 fc	 mov	 DWORD PTR _this$1$[ebp], edx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _memcpy
  00053	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00056	8d b3 e8 63 00
	00		 lea	 esi, DWORD PTR [ebx+25576]
  0005c	b9 86 01 00 00	 mov	 ecx, 390		; 00000186H
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	8d ba e8 63 00
	00		 lea	 edi, DWORD PTR [edx+25576]
  0006a	f3 a5		 rep movsd
  0006c	8b 83 00 6a 00
	00		 mov	 eax, DWORD PTR [ebx+27136]
  00072	8d b3 06 6a 00
	00		 lea	 esi, DWORD PTR [ebx+27142]
  00078	89 82 00 6a 00
	00		 mov	 DWORD PTR [edx+27136], eax
  0007e	8d ba 06 6a 00
	00		 lea	 edi, DWORD PTR [edx+27142]
  00084	0f b6 83 04 6a
	00 00		 movzx	 eax, BYTE PTR [ebx+27140]
  0008b	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00090	88 82 04 6a 00
	00		 mov	 BYTE PTR [edx+27140], al
  00096	8b c2		 mov	 eax, edx
  00098	f3 a5		 rep movsd
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
??0CShop@@QAE@ABV0@@Z ENDP				; CShop::CShop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?InentoryMapCheck@CShop@@QAEHHHHH@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?InentoryMapCheck@CShop@@QAEHHHHH@Z PROC		; CShop::InentoryMapCheck, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 126  : 	int x;
; 127  : 	int y;
; 128  : 	int blank = 0;
; 129  : 
; 130  : 	if ( (sx+width) > 8 )

  00005	8b 75 10	 mov	 esi, DWORD PTR _width$[ebp]
  00008	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  0000e	57		 push	 edi
  0000f	33 ff		 xor	 edi, edi
  00011	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  00014	83 f8 08	 cmp	 eax, 8
  00017	7e 0b		 jle	 SHORT $LN14@InentoryMa

; 131  : 		return -1;

  00019	5f		 pop	 edi
  0001a	83 c8 ff	 or	 eax, -1
  0001d	5e		 pop	 esi

; 162  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 10 00	 ret	 16			; 00000010H
$LN14@InentoryMa:

; 132  : 
; 133  : 	if ( (sy+height) > 15 )

  00024	8b 55 14	 mov	 edx, DWORD PTR _height$[ebp]
  00027	53		 push	 ebx
  00028	8b 5d 0c	 mov	 ebx, DWORD PTR _sy$[ebp]
  0002b	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0002e	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00031	7f 37		 jg	 SHORT $LN40@InentoryMa

; 134  : 		return -1;
; 135  : 
; 136  : 	for(y=0;y<height;y++)

  00033	85 d2		 test	 edx, edx
  00035	0f 8e 7e 00 00
	00		 jle	 $LN9@InentoryMa
  0003b	8d 04 d9	 lea	 eax, DWORD PTR [ecx+ebx*8]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00041	83 c1 09	 add	 ecx, 9
  00044	8b da		 mov	 ebx, edx
  00046	03 c8		 add	 ecx, eax
$LL4@InentoryMa:

; 137  : 	{
; 138  : 		for(x=0;x<width;x++)

  00048	33 c0		 xor	 eax, eax
  0004a	85 f6		 test	 esi, esi
  0004c	7e 10		 jle	 SHORT $LN2@InentoryMa
  0004e	66 90		 npad	 2
$LL7@InentoryMa:

; 139  : 		{
; 140  : 			if ( this->ShopInventoryMap[( sy + y) * 8 + (sx + x)] )

  00050	80 3c 01 00	 cmp	 BYTE PTR [ecx+eax], 0
  00054	75 07		 jne	 SHORT $LN23@InentoryMa

; 137  : 	{
; 138  : 		for(x=0;x<width;x++)

  00056	40		 inc	 eax
  00057	3b c6		 cmp	 eax, esi
  00059	7c f5		 jl	 SHORT $LL7@InentoryMa

; 139  : 		{
; 140  : 			if ( this->ShopInventoryMap[( sy + y) * 8 + (sx + x)] )

  0005b	eb 01		 jmp	 SHORT $LN2@InentoryMa
$LN23@InentoryMa:

; 141  : 			{
; 142  : 				blank++;

  0005d	47		 inc	 edi
$LN2@InentoryMa:

; 134  : 		return -1;
; 135  : 
; 136  : 	for(y=0;y<height;y++)

  0005e	83 c1 08	 add	 ecx, 8
  00061	83 eb 01	 sub	 ebx, 1
  00064	75 e2		 jne	 SHORT $LL4@InentoryMa

; 143  : 				break;
; 144  : 			}
; 145  : 		}
; 146  : 	}
; 147  : 
; 148  : 	if ( blank == 0 )

  00066	85 ff		 test	 edi, edi
  00068	74 0c		 je	 SHORT $LN37@InentoryMa
$LN40@InentoryMa:
  0006a	5b		 pop	 ebx
  0006b	5f		 pop	 edi

; 159  : 	}
; 160  : 
; 161  : 	return -1;

  0006c	83 c8 ff	 or	 eax, -1
  0006f	5e		 pop	 esi

; 162  : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
$LN37@InentoryMa:
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _sx$[ebp]
  00079	8b 5d 0c	 mov	 ebx, DWORD PTR _sy$[ebp]

; 149  : 	{
; 150  : 		for(y=0;y<height;y++)

  0007c	85 d2		 test	 edx, edx
  0007e	7e 39		 jle	 SHORT $LN9@InentoryMa
  00080	8d 04 d9	 lea	 eax, DWORD PTR [ecx+ebx*8]
  00083	8b 5d fc	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00086	83 c3 09	 add	 ebx, 9
  00089	03 d8		 add	 ebx, eax
  0008b	0f 1f 44 00 00	 npad	 5
$LL10@InentoryMa:

; 151  : 		{
; 152  : 			for(x=0;x<width;x++)

  00090	85 f6		 test	 esi, esi
  00092	7e 1a		 jle	 SHORT $LN8@InentoryMa
  00094	8b ce		 mov	 ecx, esi
  00096	b8 01 01 01 01	 mov	 eax, 16843009		; 01010101H
  0009b	8b d1		 mov	 edx, ecx
  0009d	8b fb		 mov	 edi, ebx
  0009f	c1 e9 02	 shr	 ecx, 2
  000a2	f3 ab		 rep stosd
  000a4	8b ca		 mov	 ecx, edx
  000a6	8b 55 14	 mov	 edx, DWORD PTR _height$[ebp]
  000a9	83 e1 03	 and	 ecx, 3
  000ac	f3 aa		 rep stosb
$LN8@InentoryMa:

; 149  : 	{
; 150  : 		for(y=0;y<height;y++)

  000ae	83 c3 08	 add	 ebx, 8
  000b1	83 ea 01	 sub	 edx, 1
  000b4	89 55 14	 mov	 DWORD PTR _height$[ebp], edx
  000b7	75 d7		 jne	 SHORT $LL10@InentoryMa
$LN9@InentoryMa:

; 153  : 			{
; 154  : 				this->ShopInventoryMap[( sy + y) * 8 + (sx + x)] = 1;
; 155  : 			}
; 156  : 		}
; 157  : 
; 158  : 		return (sx + sy*8);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _sx$[ebp]
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _sy$[ebp]
  000bf	5b		 pop	 ebx
  000c0	5f		 pop	 edi
  000c1	5e		 pop	 esi
  000c2	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 162  : }

  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 10 00	 ret	 16			; 00000010H
?InentoryMapCheck@CShop@@QAEHHHHH@Z ENDP		; CShop::InentoryMapCheck
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?InsertItem@CShop@@QAEHHHHHHHHHHHHH@Z
_TEXT	SEGMENT
tv384 = -12						; size = 4
_height$ = -8						; size = 4
_this$1$ = -4						; size = 4
_itemp$1$ = 8						; size = 4
_type$ = 8						; size = 4
_width$ = 12						; size = 4
_index$ = 12						; size = 4
_level$ = 16						; size = 4
_dur$ = 20						; size = 4
_op1$ = 24						; size = 4
_op2$ = 28						; size = 4
_op3$ = 32						; size = 4
_exc$ = 36						; size = 4
tv388 = 40						; size = 4
_anc$ = 40						; size = 4
_socket$ = 44						; size = 4
_element$ = 48						; size = 4
_creditprice$ = 52					; size = 4
?InsertItem@CShop@@QAEHHHHHHHHHHHHH@Z PROC		; CShop::InsertItem, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 37   : 	int itemp;
; 38   : 	int width;
; 39   : 	int height;
; 40   : 	int x;
; 41   : 	int y;
; 42   : 	int blank;
; 43   : 
; 44   : 	blank = -1;
; 45   : 	itemp = type * MAX_SUBTYPE_ITEMS + index;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _index$[ebp]
  00009	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _type$[ebp]
  0000f	8b c1		 mov	 eax, ecx
  00011	53		 push	 ebx
  00012	c1 e0 09	 shl	 eax, 9
  00015	83 cb ff	 or	 ebx, -1
  00018	56		 push	 esi
  00019	03 c2		 add	 eax, edx
  0001b	57		 push	 edi
  0001c	89 45 08	 mov	 DWORD PTR _itemp$1$[ebp], eax

; 46   : 	
; 47   : 	if ( itemp < 0 )

  0001f	79 2c		 jns	 SHORT $LN11@InsertItem

; 48   : 	{
; 49   : 		MsgBox(lMsg.Get(MSGGET(2, 53)), __FILE__, __LINE__, type, index);

  00021	52		 push	 edx
  00022	51		 push	 ecx
  00023	6a 31		 push	 49			; 00000031H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  0002a	68 35 02 00 00	 push	 565			; 00000235H
  0002f	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00034	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 59   : 		return FALSE;

  00042	33 c0		 xor	 eax, eax

; 122  : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 30 00	 ret	 48			; 00000030H
$LN11@InsertItem:

; 50   : 		return false;
; 51   : 	}
; 52   : 	
; 53   : 	ItemGetSize(itemp, width, height);

  0004d	8d 4d f8	 lea	 ecx, DWORD PTR _height$[ebp]
  00050	51		 push	 ecx
  00051	8d 4d 0c	 lea	 ecx, DWORD PTR _width$[ebp]
  00054	51		 push	 ecx
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?ItemGetSize@@YAXHAAH0@Z ; ItemGetSize
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   : 
; 55   : 	if ( width < 0 || height < 0 )

  0005e	83 7d 0c 00	 cmp	 DWORD PTR _width$[ebp], 0
  00062	0f 8c bf 01 00
	00		 jl	 $LN13@InsertItem
  00068	8b 55 f8	 mov	 edx, DWORD PTR _height$[ebp]
  0006b	85 d2		 test	 edx, edx
  0006d	0f 88 b4 01 00
	00		 js	 $LN13@InsertItem

; 60   : 	}
; 61   : 
; 62   : 	for ( y=0;y<15;y++)

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00076	33 ff		 xor	 edi, edi
  00078	8d 48 09	 lea	 ecx, DWORD PTR [eax+9]
  0007b	89 4d f4	 mov	 DWORD PTR tv384[ebp], ecx
  0007e	66 90		 npad	 2
$LL4@InsertItem:

; 63   : 	{
; 64   : 		for ( x=0;x<8;x++)

  00080	33 f6		 xor	 esi, esi
$LL7@InsertItem:

; 65   : 		{
; 66   : 			if ( this->ShopInventoryMap[x + y*8] == 0 )

  00082	80 3c 31 00	 cmp	 BYTE PTR [ecx+esi], 0
  00086	75 1c		 jne	 SHORT $LN5@InsertItem

; 67   : 			{
; 68   : 				blank = this->InentoryMapCheck(x, y, width, height);

  00088	52		 push	 edx
  00089	ff 75 0c	 push	 DWORD PTR _width$[ebp]
  0008c	8b c8		 mov	 ecx, eax
  0008e	57		 push	 edi
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ?InentoryMapCheck@CShop@@QAEHHHHH@Z ; CShop::InentoryMapCheck
  00095	8b d8		 mov	 ebx, eax

; 69   : 
; 70   : 				if ( blank >= 0 )

  00097	85 db		 test	 ebx, ebx
  00099	79 3e		 jns	 SHORT $skiploop$39
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR tv384[ebp]
  000a1	8b 55 f8	 mov	 edx, DWORD PTR _height$[ebp]
$LN5@InsertItem:

; 63   : 	{
; 64   : 		for ( x=0;x<8;x++)

  000a4	46		 inc	 esi
  000a5	83 fe 08	 cmp	 esi, 8
  000a8	7c d8		 jl	 SHORT $LL7@InsertItem

; 60   : 	}
; 61   : 
; 62   : 	for ( y=0;y<15;y++)

  000aa	47		 inc	 edi
  000ab	83 c1 08	 add	 ecx, 8
  000ae	89 4d f4	 mov	 DWORD PTR tv384[ebp], ecx
  000b1	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  000b4	7c ca		 jl	 SHORT $LL4@InsertItem

; 71   : 				{
; 72   : 					goto skiploop;
; 73   : 				}
; 74   : 			}
; 75   : 		}
; 76   : 	}
; 77   : 
; 78   : 	if ( blank < 0 )

  000b6	85 db		 test	 ebx, ebx
  000b8	79 1f		 jns	 SHORT $skiploop$39

; 79   : 	{
; 80   : 		MsgBox("error-L2 : %s %d", __FILE__, __LINE__);

  000ba	6a 50		 push	 80			; 00000050H
  000bc	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FOBLMGCK@error?9L2?5?3?5?$CFs?5?$CFd?$AA@
  000c6	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  000cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ce	33 c0		 xor	 eax, eax

; 122  : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 30 00	 ret	 48			; 00000030H
$skiploop$39:

; 81   : 		return FALSE;
; 82   : 	}
; 83   : 
; 84   : skiploop:
; 85   : 	
; 86   : 	m_CreditPriceTable[blank] = creditprice;

  000d9	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000dc	66 8b 45 34	 mov	 ax, WORD PTR _creditprice$[ebp]

; 87   : 	this->m_item[blank].m_Level = level;

  000e0	8b 4d 10	 mov	 ecx, DWORD PTR _level$[ebp]

; 88   : 
; 89   : 	if ( dur == 0 )

  000e3	8b 55 28	 mov	 edx, DWORD PTR _anc$[ebp]
  000e6	69 fb d4 00 00
	00		 imul	 edi, ebx, 212
  000ec	66 89 84 5e 06
	6a 00 00	 mov	 WORD PTR [esi+ebx*2+27142], ax
  000f4	8b 45 14	 mov	 eax, DWORD PTR _dur$[ebp]
  000f7	66 89 8c 37 90
	00 00 00	 mov	 WORD PTR [edi+esi+144], cx
  000ff	85 c0		 test	 eax, eax
  00101	75 13		 jne	 SHORT $LN18@InsertItem

; 90   : 	{
; 91   : 		dur = ItemGetDurability(ITEMGET(type, index), level, exc, anc);

  00103	52		 push	 edx
  00104	ff 75 24	 push	 DWORD PTR _exc$[ebp]
  00107	51		 push	 ecx
  00108	ff 75 08	 push	 DWORD PTR _itemp$1$[ebp]
  0010b	e8 00 00 00 00	 call	 ?ItemGetDurability@@YAHHHHH@Z ; ItemGetDurability
  00110	8b 55 28	 mov	 edx, DWORD PTR _anc$[ebp]
  00113	83 c4 10	 add	 esp, 16			; 00000010H
$LN18@InsertItem:

; 92   : 	}
; 93   : 
; 94   : 	this->m_item[blank].m_Durability = (float)dur;
; 95   : 	this->m_item[blank].Convert(itemp, op1, op2, op3, exc, anc, 0,0,-1, CURRENT_DB_VERSION);

  00116	6a 03		 push	 3
  00118	68 ff 00 00 00	 push	 255			; 000000ffH
  0011d	6a 00		 push	 0
  0011f	6a 00		 push	 0
  00121	52		 push	 edx
  00122	ff 75 24	 push	 DWORD PTR _exc$[ebp]
  00125	66 0f 6e c0	 movd	 xmm0, eax
  00129	8d 86 88 00 00
	00		 lea	 eax, DWORD PTR [esi+136]
  0012f	ff 75 20	 push	 DWORD PTR _op3$[ebp]
  00132	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00135	03 c7		 add	 eax, edi
  00137	8b c8		 mov	 ecx, eax
  00139	89 45 28	 mov	 DWORD PTR tv388[ebp], eax
  0013c	ff 75 1c	 push	 DWORD PTR _op2$[ebp]
  0013f	f3 0f 11 84 37
	ac 00 00 00	 movss	 DWORD PTR [edi+esi+172], xmm0
  00148	ff 75 18	 push	 DWORD PTR _op1$[ebp]
  0014b	ff 75 08	 push	 DWORD PTR _itemp$1$[ebp]
  0014e	e8 00 00 00 00	 call	 ?Convert@CItem@@QAEXHEEEEEEPAEEE@Z ; CItem::Convert

; 96   : 	this->m_item[blank].Value();

  00153	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  00159	03 cf		 add	 ecx, edi
  0015b	e8 00 00 00 00	 call	 ?Value@CItem@@QAEXXZ	; CItem::Value

; 97   : 
; 98   : 	if( g_SocketItem.IsSocketItem(itemp) == TRUE && socket > 0 )

  00160	ff 75 08	 push	 DWORD PTR _itemp$1$[ebp]
  00163	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_SocketItem@@3VCSocketItems@@A ; g_SocketItem
  00168	e8 00 00 00 00	 call	 ?IsSocketItem@CSocketItems@@QAE_NH@Z ; CSocketItems::IsSocketItem
  0016d	3c 01		 cmp	 al, 1
  0016f	75 15		 jne	 SHORT $LN19@InsertItem
  00171	8b 45 2c	 mov	 eax, DWORD PTR _socket$[ebp]
  00174	85 c0		 test	 eax, eax
  00176	7e 0e		 jle	 SHORT $LN19@InsertItem

; 99   : 	{
; 100  : 		this->m_item[blank].InitSocketItem(socket);

  00178	8d 8e 88 00 00
	00		 lea	 ecx, DWORD PTR [esi+136]
  0017e	50		 push	 eax
  0017f	03 cf		 add	 ecx, edi
  00181	e8 00 00 00 00	 call	 ?InitSocketItem@CItem@@QAEXE@Z ; CItem::InitSocketItem
$LN19@InsertItem:

; 101  : 	}
; 102  : 
; 103  : 	if( g_ElementalSystem.IsElementalItem(itemp) && element != -1 )

  00186	ff 75 08	 push	 DWORD PTR _itemp$1$[ebp]
  00189	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  0018e	e8 00 00 00 00	 call	 ?IsElementalItem@CElementalSystem@@QAEHH@Z ; CElementalSystem::IsElementalItem
  00193	85 c0		 test	 eax, eax
  00195	74 34		 je	 SHORT $LN20@InsertItem
  00197	83 7d 30 ff	 cmp	 DWORD PTR _element$[ebp], -1
  0019b	74 2e		 je	 SHORT $LN20@InsertItem

; 104  : 	{
; 105  : 		if( g_ElementalSystem.IsPentagram(itemp) )

  0019d	ff 75 08	 push	 DWORD PTR _itemp$1$[ebp]
  001a0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ElementalSystem@@3VCElementalSystem@@A ; g_ElementalSystem
  001a5	e8 00 00 00 00	 call	 ?IsPentagram@CElementalSystem@@QAEHH@Z ; CElementalSystem::IsPentagram
  001aa	85 c0		 test	 eax, eax
  001ac	74 13		 je	 SHORT $LN10@InsertItem

; 106  : 		{
; 107  : 			for(int i = 0; i < 5; i++)
; 108  : 			{
; 109  : 				this->m_item[blank].m_SocketOption[i] = (BYTE)-2;

  001ae	c7 84 37 50 01
	00 00 fe fe fe
	fe		 mov	 DWORD PTR [edi+esi+336], -16843010 ; fefefefeH
  001b9	c6 84 37 54 01
	00 00 fe	 mov	 BYTE PTR [edi+esi+340], -2 ; fffffffeH
$LN10@InsertItem:

; 110  : 			}
; 111  : 		}
; 112  : 		this->m_item[blank].m_SocketBonus = element;

  001c1	8b 45 30	 mov	 eax, DWORD PTR _element$[ebp]
  001c4	88 84 37 4f 01
	00 00		 mov	 BYTE PTR [edi+esi+335], al
$LN20@InsertItem:

; 113  : 	}
; 114  : 
; 115  : 	this->SendItemData[this->SendItemDataLen] = blank;

  001cb	8b 86 00 6a 00
	00		 mov	 eax, DWORD PTR [esi+27136]

; 116  : 	this->SendItemDataLen++;
; 117  : 	ItemByteConvert((LPBYTE)&this->SendItemData[this->SendItemDataLen], this->m_item[blank]);

  001d1	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  001d7	8b fc		 mov	 edi, esp
  001d9	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  001de	88 9c 30 e8 63
	00 00		 mov	 BYTE PTR [eax+esi+25576], bl
  001e5	ff 86 00 6a 00
	00		 inc	 DWORD PTR [esi+27136]
  001eb	8b 86 00 6a 00
	00		 mov	 eax, DWORD PTR [esi+27136]
  001f1	8b 75 28	 mov	 esi, DWORD PTR tv388[ebp]
  001f4	05 e8 63 00 00	 add	 eax, 25576		; 000063e8H
  001f9	f3 a5		 rep movsd
  001fb	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  001fe	03 c6		 add	 eax, esi
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 ?ItemByteConvert@@YAXPAEVCItem@@@Z ; ItemByteConvert

; 118  : 	this->SendItemDataLen += MAX_ITEM_INFO;

  00206	83 86 00 6a 00
	00 0c		 add	 DWORD PTR [esi+27136], 12 ; 0000000cH
  0020d	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H

; 119  : 	this->ItemCount++;

  00213	ff 86 84 00 00
	00		 inc	 DWORD PTR [esi+132]

; 120  : 
; 121  : 	return TRUE;

  00219	b8 01 00 00 00	 mov	 eax, 1

; 122  : }

  0021e	5f		 pop	 edi
  0021f	5e		 pop	 esi
  00220	5b		 pop	 ebx
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c2 30 00	 ret	 48			; 00000030H
$LN13@InsertItem:

; 56   : 	{
; 57   : 		// Error in getting item size in shop %s %d
; 58   : 		MsgBox(lMsg.Get(MSGGET(2, 54)), __FILE__, __LINE__);

  00227	6a 3a		 push	 58			; 0000003aH
  00229	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  0022e	68 36 02 00 00	 push	 566			; 00000236H
  00233	b9 00 00 00 00	 mov	 ecx, OFFSET ?lMsg@@3VMessage@@A ; lMsg
  00238	e8 00 00 00 00	 call	 ?Get@Message@@QAEPADH@Z	; Message::Get
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00243	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : 		return FALSE;

  00246	33 c0		 xor	 eax, eax

; 122  : }

  00248	5f		 pop	 edi
  00249	5e		 pop	 esi
  0024a	5b		 pop	 ebx
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c2 30 00	 ret	 48			; 00000030H
?InsertItem@CShop@@QAEHHHHHHHHHHHHH@Z ENDP		; CShop::InsertItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?LoadShopItem@CShop@@QAEHPAD@Z
_TEXT	SEGMENT
_result$ = -328						; size = 12
$T2 = -316						; size = 4
$T3 = -312						; size = 4
$T4 = -308						; size = 4
$T5 = -304						; size = 4
$T6 = -300						; size = 4
$T7 = -296						; size = 4
$T8 = -292						; size = 4
$T9 = -288						; size = 4
$T10 = -284						; size = 4
$T11 = -280						; size = 4
$T12 = -276						; size = 4
$T13 = -272						; size = 4
$T14 = -268						; size = 4
_this$GSCopy$1$ = -264					; size = 4
_index$1$ = -260					; size = 4
_level$1$ = -256					; size = 4
_dur$1$ = -252						; size = 4
_op1$1$ = -248						; size = 4
_op2$1$ = -244						; size = 4
_op3$1$ = -240						; size = 4
_exc$1$ = -236						; size = 4
_anc$1$ = -232						; size = 4
_type$1$ = -228						; size = 4
$T15 = -228						; size = 4
_shop$ = -224						; size = 4
_item$16 = -220						; size = 4
_doc$ = -216						; size = 200
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?LoadShopItem@CShop@@QAEHPAD@Z PROC			; CShop::LoadShopItem, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadShopItem@CShop@@QAEHPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 3c 01 00
	00		 sub	 esp, 316		; 0000013cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b d9		 mov	 ebx, ecx
  00030	89 9d f8 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00036	8b 75 08	 mov	 esi, DWORD PTR _filename$[ebp]

; 166  : 	this->Init();

  00039	e8 00 00 00 00	 call	 ?Init@CShop@@QAEXXZ	; CShop::Init

; 167  : 	xml_document doc;

  0003e	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  00044	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 168  : 	xml_parse_result result = doc.load_file(filename);

  00049	6a 00		 push	 0
  0004b	6a 74		 push	 116			; 00000074H
  0004d	56		 push	 esi
  0004e	8d 85 b8 fe ff
	ff		 lea	 eax, DWORD PTR _result$[ebp]
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	50		 push	 eax
  0005c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  00062	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 169  : 
; 170  : 	if( result.status != status_ok )

  00067	83 bd b8 fe ff
	ff 00		 cmp	 DWORD PTR _result$[ebp], 0
  0006e	74 21		 je	 SHORT $LN5@LoadShopIt

; 171  : 	{
; 172  : 		MsgBox("Shop data load error %s\nError description: %s\n", filename,result.description());

  00070	8d 8d b8 fe ff
	ff		 lea	 ecx, DWORD PTR _result$[ebp]
  00076	e8 00 00 00 00	 call	 ?description@xml_parse_result@pugi@@QBEPBDXZ ; pugi::xml_parse_result::description
  0007b	50		 push	 eax
  0007c	56		 push	 esi
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HHLOKJAE@Shop?5data?5load?5error?5?$CFs?6Error?5de@
  00082	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00087	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008a	33 f6		 xor	 esi, esi
  0008c	e9 bb 02 00 00	 jmp	 $LN9@LoadShopIt
$LN5@LoadShopIt:

; 173  : 		return FALSE;
; 174  : 	}
; 175  : 
; 176  : 	xml_node shop = doc.child("shop");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_04BFIJLIPK@shop?$AA@
  00096	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _shop$[ebp]
  0009c	50		 push	 eax
  0009d	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  000a3	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 177  : 
; 178  : 	m_CreditPrice = shop.attribute("credits").as_bool(false);

  000a8	6a 00		 push	 0
  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_07JKABFLJI@credits?$AA@
  000af	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  000b5	50		 push	 eax
  000b6	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _shop$[ebp]
  000bc	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000c1	8b c8		 mov	 ecx, eax
  000c3	e8 00 00 00 00	 call	 ?as_bool@xml_attribute@pugi@@QBE_N_N@Z ; pugi::xml_attribute::as_bool
  000c8	88 83 04 6a 00
	00		 mov	 BYTE PTR [ebx+27140], al

; 179  : 	
; 180  : 	for (xml_node item = shop.child("item"); item; item = item.next_sibling())	{

  000ce	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _shop$[ebp]
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_04NHONDGDE@item?$AA@
  000d9	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _item$16[ebp]
  000df	50		 push	 eax
  000e0	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000e5	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  000eb	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000f0	85 c0		 test	 eax, eax
  000f2	0f 84 4f 02 00
	00		 je	 $LN3@LoadShopIt
  000f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@LoadShopIt:

; 181  : 		int type;
; 182  : 		int index;
; 183  : 		int dur;
; 184  : 		int level;
; 185  : 		int op1;
; 186  : 		int op2;
; 187  : 		int op3;
; 188  : 		int exc;
; 189  : 		int anc;
; 190  : 		int socket;
; 191  : 		int element;
; 192  : 
; 193  : 		type = item.attribute("id").as_int();

  00100	6a 00		 push	 0
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_02EGCJHIOB@id?$AA@
  00107	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0010d	50		 push	 eax
  0010e	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00114	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00119	8b c8		 mov	 ecx, eax
  0011b	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 194  : 		index = item.attribute("num").as_int();

  00120	6a 00		 push	 0
  00122	89 85 1c ff ff
	ff		 mov	 DWORD PTR _type$1$[ebp], eax
  00128	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_03IHCLBPIC@num?$AA@
  00133	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00139	50		 push	 eax
  0013a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0013f	8b c8		 mov	 ecx, eax
  00141	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 195  : 		dur = item.attribute("dur").as_int();

  00146	6a 00		 push	 0
  00148	89 85 fc fe ff
	ff		 mov	 DWORD PTR _index$1$[ebp], eax
  0014e	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_03CFMMPBHI@dur?$AA@
  00159	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0015f	50		 push	 eax
  00160	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00165	8b c8		 mov	 ecx, eax
  00167	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 196  : 		level = item.attribute("level").as_int();

  0016c	6a 00		 push	 0
  0016e	89 85 04 ff ff
	ff		 mov	 DWORD PTR _dur$1$[ebp], eax
  00174	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_05KJNJLLGA@level?$AA@
  0017f	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0018b	8b c8		 mov	 ecx, eax
  0018d	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 197  : 		op1 = item.attribute("skill").as_int();

  00192	6a 00		 push	 0
  00194	89 85 00 ff ff
	ff		 mov	 DWORD PTR _level$1$[ebp], eax
  0019a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  001a0	68 00 00 00 00	 push	 OFFSET ??_C@_05ODMCMJAJ@skill?$AA@
  001a5	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001b1	8b c8		 mov	 ecx, eax
  001b3	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 198  : 		op2 = item.attribute("luck").as_int();

  001b8	6a 00		 push	 0
  001ba	89 85 08 ff ff
	ff		 mov	 DWORD PTR _op1$1$[ebp], eax
  001c0	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_04PFGGAFBF@luck?$AA@
  001cb	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  001d1	50		 push	 eax
  001d2	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001d7	8b c8		 mov	 ecx, eax
  001d9	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 199  : 		op3 = item.attribute("option").as_int();

  001de	6a 00		 push	 0
  001e0	89 85 0c ff ff
	ff		 mov	 DWORD PTR _op2$1$[ebp], eax
  001e6	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  001ec	68 00 00 00 00	 push	 OFFSET ??_C@_06OGMGCFPO@option?$AA@
  001f1	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001fd	8b c8		 mov	 ecx, eax
  001ff	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 200  : 		exc = item.attribute("exc").as_int();

  00204	6a 00		 push	 0
  00206	89 85 10 ff ff
	ff		 mov	 DWORD PTR _op3$1$[ebp], eax
  0020c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00212	68 00 00 00 00	 push	 OFFSET ??_C@_03MGHBCGFO@exc?$AA@
  00217	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00223	8b c8		 mov	 ecx, eax
  00225	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 201  : 		anc = item.attribute("anc").as_int();

  0022a	6a 00		 push	 0
  0022c	89 85 14 ff ff
	ff		 mov	 DWORD PTR _exc$1$[ebp], eax
  00232	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_03FBLIGOML@anc?$AA@
  0023d	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  00243	50		 push	 eax
  00244	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00249	8b c8		 mov	 ecx, eax
  0024b	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  00250	89 85 18 ff ff
	ff		 mov	 DWORD PTR _anc$1$[ebp], eax

; 202  : 		socket = item.attribute("socket").as_int();

  00256	6a 00		 push	 0
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_06HBELJPBO@socket?$AA@
  0025d	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00263	50		 push	 eax
  00264	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  0026a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0026f	8b c8		 mov	 ecx, eax
  00271	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 203  : 		element = item.attribute("element").as_int(-1);

  00276	6a ff		 push	 -1
  00278	8b d8		 mov	 ebx, eax
  0027a	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00280	68 00 00 00 00	 push	 OFFSET ??_C@_07HCLJNICE@element?$AA@
  00285	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0028b	50		 push	 eax
  0028c	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00291	8b c8		 mov	 ecx, eax
  00293	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 204  : 		int creditprice = item.attribute("price").as_int(0);

  00298	6a 00		 push	 0
  0029a	8b f8		 mov	 edi, eax
  0029c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  002a2	68 00 00 00 00	 push	 OFFSET ??_C@_05NCDILCCA@price?$AA@
  002a7	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  002b3	8b c8		 mov	 ecx, eax
  002b5	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 205  : 
; 206  : 		if (this->InsertItem(type, index, level, dur, op1, op2, op3, exc, anc, socket, element, creditprice) == FALSE )

  002ba	50		 push	 eax
  002bb	57		 push	 edi
  002bc	53		 push	 ebx
  002bd	ff b5 18 ff ff
	ff		 push	 DWORD PTR _anc$1$[ebp]
  002c3	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002c9	ff b5 14 ff ff
	ff		 push	 DWORD PTR _exc$1$[ebp]
  002cf	ff b5 10 ff ff
	ff		 push	 DWORD PTR _op3$1$[ebp]
  002d5	ff b5 0c ff ff
	ff		 push	 DWORD PTR _op2$1$[ebp]
  002db	ff b5 08 ff ff
	ff		 push	 DWORD PTR _op1$1$[ebp]
  002e1	ff b5 04 ff ff
	ff		 push	 DWORD PTR _dur$1$[ebp]
  002e7	ff b5 00 ff ff
	ff		 push	 DWORD PTR _level$1$[ebp]
  002ed	ff b5 fc fe ff
	ff		 push	 DWORD PTR _index$1$[ebp]
  002f3	ff b5 1c ff ff
	ff		 push	 DWORD PTR _type$1$[ebp]
  002f9	e8 00 00 00 00	 call	 ?InsertItem@CShop@@QAEHHHHHHHHHHHHH@Z ; CShop::InsertItem
  002fe	85 c0		 test	 eax, eax
  00300	75 18		 jne	 SHORT $LN2@LoadShopIt

; 207  : 		{
; 208  : 			MsgBox("error-L3 : %s %s %d", filename, __FILE__, __LINE__);

  00302	68 d0 00 00 00	 push	 208			; 000000d0H
  00307	68 00 00 00 00	 push	 OFFSET ??_C@_08LFHMEAP@Shop?4cpp?$AA@
  0030c	56		 push	 esi
  0030d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@LCGMGNMN@error?9L3?5?3?5?$CFs?5?$CFs?5?$CFd?$AA@
  00312	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  00317	83 c4 10	 add	 esp, 16			; 00000010H
$LN2@LoadShopIt:

; 179  : 	
; 180  : 	for (xml_node item = shop.child("item"); item; item = item.next_sibling())	{

  0031a	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00320	50		 push	 eax
  00321	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00327	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  0032c	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _item$16[ebp]
  00332	8b 00		 mov	 eax, DWORD PTR [eax]
  00334	89 85 24 ff ff
	ff		 mov	 DWORD PTR _item$16[ebp], eax
  0033a	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  0033f	85 c0		 test	 eax, eax
  00341	0f 85 b9 fd ff
	ff		 jne	 $LL4@LoadShopIt
$LN3@LoadShopIt:

; 209  : 		}
; 210  :     }
; 211  : 
; 212  : 	return TRUE;

  00347	be 01 00 00 00	 mov	 esi, 1
$LN9@LoadShopIt:
  0034c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  00352	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  00357	8b c6		 mov	 eax, esi

; 213  : }

  00359	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00363	59		 pop	 ecx
  00364	5f		 pop	 edi
  00365	5e		 pop	 esi
  00366	5b		 pop	 ebx
  00367	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036a	33 cd		 xor	 ecx, ebp
  0036c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00371	8b e5		 mov	 esp, ebp
  00373	5d		 pop	 ebp
  00374	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadShopItem@CShop@@QAEHPAD@Z$0:
  00000	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _doc$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?LoadShopItem@CShop@@QAEHPAD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a b4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-332]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadShopItem@CShop@@QAEHPAD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadShopItem@CShop@@QAEHPAD@Z ENDP			; CShop::LoadShopItem
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?Init@CShop@@QAEXXZ
_TEXT	SEGMENT
?Init@CShop@@QAEXXZ PROC				; CShop::Init, COMDAT
; _this$ = ecx

; 28   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 29   : 	this->SendItemDataLen = 0;
; 30   : 	this->ItemCount = 0;
; 31   : 	memset(ShopInventoryMap, 0, sizeof(ShopInventoryMap));

  00003	6a 78		 push	 120			; 00000078H
  00005	6a 00		 push	 0
  00007	8d 46 09	 lea	 eax, DWORD PTR [esi+9]
  0000a	c7 86 00 6a 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+27136], 0
  00014	50		 push	 eax
  00015	c7 86 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+132], 0
  0001f	e8 00 00 00 00	 call	 _memset

; 32   : 	memset(m_CreditPriceTable, 0, sizeof(m_CreditPriceTable));

  00024	68 f0 00 00 00	 push	 240			; 000000f0H
  00029	8d 86 06 6a 00
	00		 lea	 eax, DWORD PTR [esi+27142]
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 18	 add	 esp, 24			; 00000018H
  0003a	5e		 pop	 esi

; 33   : }

  0003b	c3		 ret	 0
?Init@CShop@@QAEXXZ ENDP				; CShop::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ??1CShop@@UAE@XZ
_TEXT	SEGMENT
??1CShop@@UAE@XZ PROC					; CShop::~CShop, COMDAT
; _this$ = ecx

; 23   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CShop@@6B@

; 24   : 	return;
; 25   : }

  00006	c3		 ret	 0
??1CShop@@UAE@XZ ENDP					; CShop::~CShop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
; File c:\users\michel\desktop\source\gameserver\source\shop.h
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ??0CShop@@QAE@XZ
_TEXT	SEGMENT
??0CShop@@QAE@XZ PROC					; CShop::CShop, COMDAT
; _this$ = ecx

; 17   : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	be 78 00 00 00	 mov	 esi, 120		; 00000078H
  0000a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CShop@@6B@
; File c:\users\michel\desktop\source\gameserver\source\shop.h

; 31   : 	int ItemCount;	// 7C

  00010	8d bb 88 00 00
	00		 lea	 edi, DWORD PTR [ebx+136]
$LL4@CShop:
  00016	8b cf		 mov	 ecx, edi
  00018	e8 00 00 00 00	 call	 ??0CItem@@QAE@XZ	; CItem::CItem
  0001d	81 c7 d4 00 00
	00		 add	 edi, 212		; 000000d4H
  00023	83 ee 01	 sub	 esi, 1
  00026	75 ee		 jne	 SHORT $LL4@CShop
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp

; 19   : }

  0002a	8b c3		 mov	 eax, ebx
  0002c	5b		 pop	 ebx
  0002d	c3		 ret	 0
??0CShop@@QAE@XZ ENDP					; CShop::CShop
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 48   : 		}

  00000	c2 04 00	 ret	 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00024	83 c9 ff	 or	 ecx, -1
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002a	85 c0		 test	 eax, eax
  0002c	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 335  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\shop.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 335  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
