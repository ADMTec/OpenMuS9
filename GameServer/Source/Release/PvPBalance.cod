; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	C:\Users\Michel\Desktop\Source\GameServer\Source\PvPBalance.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0PvPBalance@@QAE@XZ				; PvPBalance::PvPBalance
PUBLIC	??1PvPBalance@@QAE@XZ				; PvPBalance::~PvPBalance
PUBLIC	?Load@PvPBalance@@QAEXXZ			; PvPBalance::Load
PUBLIC	?Init@PvPBalance@@QAEXXZ			; PvPBalance::Init
PUBLIC	?Read@PvPBalance@@QAEXPBD@Z			; PvPBalance::Read
PUBLIC	?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z	; PvPBalance::getInfo
PUBLIC	?modifyDamage@PvPBalance@@QAEXFFAAH@Z		; PvPBalance::modifyDamage
PUBLIC	?modifyAttackRate@PvPBalance@@QAEXFFAAM@Z	; PvPBalance::modifyAttackRate
PUBLIC	?modifyDefenseRate@PvPBalance@@QAEXFFAAM@Z	; PvPBalance::modifyDefenseRate
PUBLIC	?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
PUBLIC	?allocate@?$allocator@UPvPBalanceInfo@@@std@@QAEPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::allocate
PUBLIC	?push_back@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXABUPvPBalanceInfo@@@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::push_back
PUBLIC	?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reserve
PUBLIC	??1OBJECTSTRUCT@@QAE@XZ				; OBJECTSTRUCT::~OBJECTSTRUCT
PUBLIC	??_EOBJECTSTRUCT@@QAEPAXI@Z			; OBJECTSTRUCT::`vector deleting destructor'
PUBLIC	??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>
PUBLIC	?g_PvPBalance@@3VPvPBalance@@A			; g_PvPBalance
PUBLIC	??_C@_0BG@MJBDCBDO@Custom?2PvPBalance?4xml?$AA@	; `string'
PUBLIC	??_C@_0CA@EMPLKLM@?$FLPvPBalance?$FN?5File?5?$CFs?5not?5found?$CB?$AA@ ; `string'
PUBLIC	??_C@_0L@IMCHDBAK@pvpbalance?$AA@		; `string'
PUBLIC	??_C@_04LPGJEGEF@rule?$AA@			; `string'
PUBLIC	??_C@_06OEKOLKIL@source?$AA@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target?$AA@			; `string'
PUBLIC	??_C@_06GJOIPFFF@damage?$AA@			; `string'
PUBLIC	??_C@_08EMJGLFCF@increase?$AA@			; `string'
PUBLIC	??_C@_08OALDEOCE@decrease?$AA@			; `string'
PUBLIC	??_C@_0L@NIBJMFLD@attackrate?$AA@		; `string'
PUBLIC	??_C@_0M@EPNCHODA@defenserate?$AA@		; `string'
PUBLIC	??_C@_0BN@KHHKBPLP@?$FLPvPBalance?$FN?5Loaded?5?$CFd?5rules?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__real@42c80000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetNewPath@CDirPath@@QAEPADPAD@Z:PROC		; CDirPath::GetNewPath
EXTRN	??1CSkillDelay@@UAE@XZ:PROC			; CSkillDelay::~CSkillDelay
EXTRN	?MsgBox@@YAXPADZZ:PROC				; MsgBox
EXTRN	??1TMonsterAIAgro@@UAE@XZ:PROC			; TMonsterAIAgro::~TMonsterAIAgro
EXTRN	?as_int@xml_attribute@pugi@@QBEHH@Z:PROC	; pugi::xml_attribute::as_int
EXTRN	??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ:PROC	; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
EXTRN	?next_sibling@xml_node@pugi@@QBE?AV12@XZ:PROC	; pugi::xml_node::next_sibling
EXTRN	?child@xml_node@pugi@@QBE?AV12@PBD@Z:PROC	; pugi::xml_node::child
EXTRN	?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z:PROC ; pugi::xml_node::attribute
EXTRN	??0xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::xml_document
EXTRN	??1xml_document@pugi@@QAE@XZ:PROC		; pugi::xml_document::~xml_document
EXTRN	?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z:PROC ; pugi::xml_document::load_file
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?LogAddTD@@3P6AXPADZZA:DWORD			; LogAddTD
EXTRN	?gObj@@3PAUOBJECTSTRUCT@@A:DWORD		; gObj
EXTRN	?gDirPath@@3VCDirPath@@A:BYTE			; gDirPath
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_PvPBalance@@3VPvPBalance@@A DB 010H DUP (?)		; g_PvPBalance
_BSS	ENDS
CRT$XCU	SEGMENT
?g_PvPBalance$initializer$@@3P6AXXZA DD FLAT:??__Eg_PvPBalance@@YAXXZ ; g_PvPBalance$initializer$
CRT$XCU	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KHHKBPLP@?$FLPvPBalance?$FN?5Loaded?5?$CFd?5rules?$AA@
CONST	SEGMENT
??_C@_0BN@KHHKBPLP@?$FLPvPBalance?$FN?5Loaded?5?$CFd?5rules?$AA@ DB '[PvP'
	DB	'Balance] Loaded %d rules', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EPNCHODA@defenserate?$AA@
CONST	SEGMENT
??_C@_0M@EPNCHODA@defenserate?$AA@ DB 'defenserate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NIBJMFLD@attackrate?$AA@
CONST	SEGMENT
??_C@_0L@NIBJMFLD@attackrate?$AA@ DB 'attackrate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OALDEOCE@decrease?$AA@
CONST	SEGMENT
??_C@_08OALDEOCE@decrease?$AA@ DB 'decrease', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMJGLFCF@increase?$AA@
CONST	SEGMENT
??_C@_08EMJGLFCF@increase?$AA@ DB 'increase', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GJOIPFFF@damage?$AA@
CONST	SEGMENT
??_C@_06GJOIPFFF@damage?$AA@ DB 'damage', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target?$AA@
CONST	SEGMENT
??_C@_06JJLAMBGK@target?$AA@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEKOLKIL@source?$AA@
CONST	SEGMENT
??_C@_06OEKOLKIL@source?$AA@ DB 'source', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGJEGEF@rule?$AA@
CONST	SEGMENT
??_C@_04LPGJEGEF@rule?$AA@ DB 'rule', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IMCHDBAK@pvpbalance?$AA@
CONST	SEGMENT
??_C@_0L@IMCHDBAK@pvpbalance?$AA@ DB 'pvpbalance', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EMPLKLM@?$FLPvPBalance?$FN?5File?5?$CFs?5not?5found?$CB?$AA@
CONST	SEGMENT
??_C@_0CA@EMPLKLM@?$FLPvPBalance?$FN?5File?5?$CFs?5not?5found?$CB?$AA@ DB '['
	DB	'PvPBalance] File %s not found!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MJBDCBDO@Custom?2PvPBalance?4xml?$AA@
CONST	SEGMENT
??_C@_0BG@MJBDCBDO@Custom?2PvPBalance?4xml?$AA@ DB 'Custom\PvPBalance.xml'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z$0
__unwindtable$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z$50
__ehfuncinfo$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Read@PvPBalance@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Read@PvPBalance@@QAEXPBD@Z$0
__ehfuncinfo$?Read@PvPBalance@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Read@PvPBalance@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@U1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UPvPBalanceInfo@@U1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@$$QAU2@@Z PROC ; std::allocator<PvPBalanceInfo>::construct<PvPBalanceInfo,PvPBalanceInfo>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN3@construct:

; 656  : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$construct@UPvPBalanceInfo@@U1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@$$QAU2@@Z ENDP ; std::allocator<PvPBalanceInfo>::construct<PvPBalanceInfo,PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@U1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UPvPBalanceInfo@@U1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$construct@UPvPBalanceInfo@@U1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UPvPBalanceInfo@@@std@@YA$$QAUPvPBalanceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UPvPBalanceInfo@@@std@@YA$$QAUPvPBalanceInfo@@AAU1@@Z PROC ; std::forward<PvPBalanceInfo>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@UPvPBalanceInfo@@@std@@YA$$QAUPvPBalanceInfo@@AAU1@@Z ENDP ; std::forward<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@U1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UPvPBalanceInfo@@U1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$construct@UPvPBalanceInfo@@U1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UPvPBalanceInfo@@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UPvPBalanceInfo@@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@@Z PROC ; std::allocator<PvPBalanceInfo>::destroy<PvPBalanceInfo>, COMDAT
; _this$ = ecx

; 662  : 		_Ptr->~_Uty();
; 663  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UPvPBalanceInfo@@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@@Z ENDP ; std::allocator<PvPBalanceInfo>::destroy<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>, COMDAT

; 437  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	57		 push	 edi
  00007	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000a	3b cf		 cmp	 ecx, edi
  0000c	74 2e		 je	 SHORT $LN37@Uninit_mov
  0000e	56		 push	 esi
  0000f	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
$LL4@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00012	85 f6		 test	 esi, esi
  00014	74 16		 je	 SHORT $LN2@Uninit_mov
  00016	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  0001a	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0001e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00021	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00024	66 8b 51 0c	 mov	 dx, WORD PTR [ecx+12]
  00028	66 89 56 0c	 mov	 WORD PTR [esi+12], dx
$LN2@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 442  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0002c	83 c1 0e	 add	 ecx, 14			; 0000000eH
  0002f	83 c6 0e	 add	 esi, 14			; 0000000eH
  00032	3b cf		 cmp	 ecx, edi
  00034	75 dc		 jne	 SHORT $LL4@Uninit_mov

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  00036	8b c6		 mov	 eax, esi
  00038	5e		 pop	 esi
  00039	5f		 pop	 edi

; 450  : 	}

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN37@Uninit_mov:

; 443  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 444  : 	_CATCH_ALL
; 445  : 	for (; _Next != _Dest; ++_Next)
; 446  : 		_Al.destroy(_Next);
; 447  : 	_RERAISE;
; 448  : 	_CATCH_END
; 449  : 	return (_Dest);

  0003c	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003f	5f		 pop	 edi

; 450  : 	}

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Val_type@PAUPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@PAU1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@PAU1@@Z PROC ; std::_Val_type<PvPBalanceInfo *>, COMDAT

; 875  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 876  : 	}

  00002	c3		 ret	 0
??$_Val_type@PAUPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@PAU1@@Z ENDP ; std::_Val_type<PvPBalanceInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UPvPBalanceInfo@@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@UPvPBalanceInfo@@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@@Z PROC ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::destroy<PvPBalanceInfo>, COMDAT

; 780  : 		_Al.destroy(_Ptr);
; 781  : 		}

  00000	c3		 ret	 0
??$destroy@UPvPBalanceInfo@@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@@Z ENDP ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::destroy<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@UPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@UPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<PvPBalanceInfo>, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@UPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@AAU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PAUPvPBalanceInfo@@PAU1@@std@@YAAAPAUPvPBalanceInfo@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUPvPBalanceInfo@@PAU1@@std@@YAAAPAUPvPBalanceInfo@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<PvPBalanceInfo *,PvPBalanceInfo *>, COMDAT

; 446  : 	{	// reset checked from unchecked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 447  : 	_Dest = _Src;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Src$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 448  : 	return (_Dest);
; 449  : 	}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
??$_Rechecked@PAUPvPBalanceInfo@@PAU1@@std@@YAAAPAUPvPBalanceInfo@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<PvPBalanceInfo *,PvPBalanceInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__Cat$1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z PROC ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >, COMDAT

; 480  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00004	ff 75 fc	 push	 DWORD PTR __Cat$1[ebp]
  00007	6a 00		 push	 0
  00009	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00012	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00015	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 482  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));
; 483  : 	}

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z ENDP ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAUPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@PAU1@@Z PROC ; std::_Unchecked<PvPBalanceInfo *>, COMDAT

; 438  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 439  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 440  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAUPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@PAU1@@Z ENDP ; std::_Unchecked<PvPBalanceInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UPvPBalanceInfo@@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@UPvPBalanceInfo@@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::destroy<PvPBalanceInfo>, COMDAT
; _this$ = ecx

; 925  : 		_Mytraits::destroy(*this, _Ptr);
; 926  : 		}

  00000	c2 04 00	 ret	 4
??$destroy@UPvPBalanceInfo@@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::destroy<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@UPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@AAU1@@Z PROC ; std::addressof<PvPBalanceInfo>, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@UPvPBalanceInfo@@@std@@YAPAUPvPBalanceInfo@@AAU1@@Z ENDP ; std::addressof<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@ABU1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UPvPBalanceInfo@@ABU1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@ABU2@@Z PROC ; std::allocator<PvPBalanceInfo>::construct<PvPBalanceInfo,PvPBalanceInfo const &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN3@construct:

; 656  : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$construct@UPvPBalanceInfo@@ABU1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@ABU2@@Z ENDP ; std::allocator<PvPBalanceInfo>::construct<PvPBalanceInfo,PvPBalanceInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@AAU1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UPvPBalanceInfo@@AAU1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@AAU2@@Z PROC ; std::allocator<PvPBalanceInfo>::construct<PvPBalanceInfo,PvPBalanceInfo &>, COMDAT
; _this$ = ecx

; 654  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN3@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN3@construct:

; 656  : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$construct@UPvPBalanceInfo@@AAU1@@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@AAU2@@Z ENDP ; std::allocator<PvPBalanceInfo>::construct<PvPBalanceInfo,PvPBalanceInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUPvPBalanceInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUPvPBalanceInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z PROC ; std::_Uninitialized_move<PvPBalanceInfo *,PvPBalanceInfo *,std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >, COMDAT

; 490  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	ff 75 14	 push	 DWORD PTR __Al$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00011	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>
  00019	83 c4 18	 add	 esp, 24			; 00000018H

; 491  : 	return (_Rechecked(_Dest,
; 492  : 		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
; 493  : 			_Unchecked(_Dest), _Al)));
; 494  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move@PAUPvPBalanceInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<PvPBalanceInfo *,PvPBalanceInfo *,std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAXPAUPvPBalanceInfo@@0AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAXPAUPvPBalanceInfo@@0AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >, COMDAT

; 171  : 	for (; _First != _Last; ++_First)
; 172  : 		_Al.destroy(_STD addressof(*_First));
; 173  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAXPAUPvPBalanceInfo@@0AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@UPvPBalanceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPvPBalanceInfo@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UPvPBalanceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPvPBalanceInfo@@0@Z PROC ; std::_Ptr_cat<PvPBalanceInfo,PvPBalanceInfo>, COMDAT

; 640  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 641  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 642  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 643  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@UPvPBalanceInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPvPBalanceInfo@@0@Z ENDP ; std::_Ptr_cat<PvPBalanceInfo,PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@UPvPBalanceInfo@@@std@@@std@@YAABV?$allocator@UPvPBalanceInfo@@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$allocator@UPvPBalanceInfo@@@std@@@std@@YAABV?$allocator@UPvPBalanceInfo@@@0@ABV10@@Z PROC ; std::forward<std::allocator<PvPBalanceInfo> const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABV?$allocator@UPvPBalanceInfo@@@std@@@std@@YAABV?$allocator@UPvPBalanceInfo@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<PvPBalanceInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@ABU1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@ABU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UPvPBalanceInfo@@ABU1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@ABU3@@Z PROC ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo const &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$construct@UPvPBalanceInfo@@ABU1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@ABU3@@Z ENDP ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@ABUPvPBalanceInfo@@@std@@YAABUPvPBalanceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUPvPBalanceInfo@@@std@@YAABUPvPBalanceInfo@@ABU1@@Z PROC ; std::forward<PvPBalanceInfo const &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABUPvPBalanceInfo@@@std@@YAABUPvPBalanceInfo@@ABU1@@Z ENDP ; std::forward<PvPBalanceInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@AAU1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@AAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UPvPBalanceInfo@@AAU1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@AAU3@@Z PROC ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo &>, COMDAT

; 772  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN8@construct
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN8@construct:

; 773  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 774  : 		}

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$construct@UPvPBalanceInfo@@AAU1@@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAXAAV?$allocator@UPvPBalanceInfo@@@1@PAUPvPBalanceInfo@@AAU3@@Z ENDP ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AAUPvPBalanceInfo@@@std@@YAAAUPvPBalanceInfo@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUPvPBalanceInfo@@@std@@YAAAUPvPBalanceInfo@@AAU1@@Z PROC ; std::forward<PvPBalanceInfo &>, COMDAT

; 1233 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1234 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1235 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAUPvPBalanceInfo@@@std@@YAAAUPvPBalanceInfo@@AAU1@@Z ENDP ; std::forward<PvPBalanceInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Addressof@$$CBUPvPBalanceInfo@@@std@@YAPBUPvPBalanceInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Addressof@$$CBUPvPBalanceInfo@@@std@@YAPBUPvPBalanceInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Addressof<PvPBalanceInfo const >, COMDAT

; 688  : 	{	// return address of object _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 689  : 	return (reinterpret_cast<_Ty *>(

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 690  : 		&const_cast<char&>(
; 691  : 		reinterpret_cast<const volatile char&>(_Val))));
; 692  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Addressof@$$CBUPvPBalanceInfo@@@std@@YAPBUPvPBalanceInfo@@ABU1@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Addressof<PvPBalanceInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PAUPvPBalanceInfo@@@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEPAUPvPBalanceInfo@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$1 = 16						; size = 1
__Ptr$ = 16						; size = 4
??$_Umove@PAUPvPBalanceInfo@@@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEPAUPvPBalanceInfo@@PAU2@00@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Umove<PvPBalanceInfo *>, COMDAT
; _this$ = ecx

; 1677 : 		{	// move initializing [_First, _Last), using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00003	ff 75 10	 push	 DWORD PTR __Cat$1[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>
  00017	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1680 : 		}

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
??$_Umove@PAUPvPBalanceInfo@@@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEPAUPvPBalanceInfo@@PAU2@00@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Umove<PvPBalanceInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAXPAUPvPBalanceInfo@@0AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAXPAUPvPBalanceInfo@@0AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >, COMDAT

; 186  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 187  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@YAXPAUPvPBalanceInfo@@0AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0ABV?$allocator@UPvPBalanceInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UPvPBalanceInfo@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0ABV?$allocator@UPvPBalanceInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UPvPBalanceInfo@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1><std::allocator<PvPBalanceInfo> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 289  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@UPvPBalanceInfo@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@UPvPBalanceInfo@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1><std::allocator<PvPBalanceInfo> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@ABU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UPvPBalanceInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@ABU2@@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$construct@UPvPBalanceInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@ABU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UPvPBalanceInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@AAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@UPvPBalanceInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@AAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo &>, COMDAT
; _this$ = ecx

; 916  : 		{	// construct _Ty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	74 19		 je	 SHORT $LN13@construct
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0000d	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00011	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00015	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00018	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0001b	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  0001f	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
$LN13@construct:

; 917  : 		_Mytraits::construct(*this, _Ptr,
; 918  : 			_STD forward<_Types>(_Args)...);
; 919  : 		}

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
??$construct@UPvPBalanceInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@AAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::construct<PvPBalanceInfo,PvPBalanceInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUPvPBalanceInfo@@@std@@YAPBUPvPBalanceInfo@@ABU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBUPvPBalanceInfo@@@std@@YAPBUPvPBalanceInfo@@ABU1@@Z PROC ; std::addressof<PvPBalanceInfo const >, COMDAT

; 696  : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 697  : 	return (_Addressof(_Val, is_function<_Ty>()));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 698  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@$$CBUPvPBalanceInfo@@@std@@YAPBUPvPBalanceInfo@@ABU1@@Z ENDP ; std::addressof<PvPBalanceInfo const >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_PvPBalance@@YAXXZ
text$yd	SEGMENT
??__Fg_PvPBalance@@YAXXZ PROC				; `dynamic atexit destructor for 'g_PvPBalance'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PvPBalance@@3VPvPBalance@@A ; g_PvPBalance
  00005	e9 00 00 00 00	 jmp	 ??1PvPBalance@@QAE@XZ	; PvPBalance::~PvPBalance
??__Fg_PvPBalance@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_PvPBalance''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ??__Eg_PvPBalance@@YAXXZ
text$di	SEGMENT
??__Eg_PvPBalance@@YAXXZ PROC				; `dynamic initializer for 'g_PvPBalance'', COMDAT

; 6    : PvPBalance g_PvPBalance;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_PvPBalance@@3VPvPBalance@@A ; g_PvPBalance
  00005	e8 00 00 00 00	 call	 ??0PvPBalance@@QAE@XZ	; PvPBalance::PvPBalance
  0000a	68 00 00 00 00	 push	 OFFSET ??__Fg_PvPBalance@@YAXXZ ; `dynamic atexit destructor for 'g_PvPBalance''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__Eg_PvPBalance@@YAXXZ ENDP				; `dynamic initializer for 'g_PvPBalance''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_EOBJECTSTRUCT@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_EOBJECTSTRUCT@@QAEPAXI@Z PROC			; OBJECTSTRUCT::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR ___flags$[ebp]
  0002a	f6 c3 02	 test	 bl, 2
  0002d	74 44		 je	 SHORT $LN2@vector
  0002f	68 00 00 00 00	 push	 OFFSET ??1OBJECTSTRUCT@@QAE@XZ
  00034	ff 76 fc	 push	 DWORD PTR [esi-4]
  00037	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  0003a	68 40 27 00 00	 push	 10048			; 00002740H
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	f6 c3 01	 test	 bl, 1
  00048	74 13		 je	 SHORT $LN3@vector
  0004a	69 0f 40 27 00
	00		 imul	 ecx, DWORD PTR [edi], 10048
  00050	83 c1 04	 add	 ecx, 4
  00053	51		 push	 ecx
  00054	57		 push	 edi
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
$LN2@vector:
  00073	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00079	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0007e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00084	e8 00 00 00 00	 call	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
  00089	f6 c3 01	 test	 bl, 1
  0008c	74 0e		 je	 SHORT $LN4@vector
  0008e	68 40 27 00 00	 push	 10048			; 00002740H
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00099	83 c4 08	 add	 esp, 8
$LN4@vector:
  0009c	8b c6		 mov	 eax, esi
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a8	59		 pop	 ecx
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_EOBJECTSTRUCT@@QAEPAXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_EOBJECTSTRUCT@@QAEPAXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_EOBJECTSTRUCT@@QAEPAXI@Z ENDP			; OBJECTSTRUCT::`vector deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ??1OBJECTSTRUCT@@QAE@XZ
_TEXT	SEGMENT
??1OBJECTSTRUCT@@QAE@XZ PROC				; OBJECTSTRUCT::~OBJECTSTRUCT, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 8e ec 20 00
	00		 lea	 ecx, DWORD PTR [esi+8428]
  00009	e8 00 00 00 00	 call	 ??1TMonsterAIAgro@@UAE@XZ ; TMonsterAIAgro::~TMonsterAIAgro
  0000e	8d 8e 0c 16 00
	00		 lea	 ecx, DWORD PTR [esi+5644]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1CSkillDelay@@UAE@XZ	; CSkillDelay::~CSkillDelay
??1OBJECTSTRUCT@@QAE@XZ ENDP				; OBJECTSTRUCT::~OBJECTSTRUCT
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEXPAUPvPBalanceInfo@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEXPAUPvPBalanceInfo@@0@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1813 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEXPAUPvPBalanceInfo@@0@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEXXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Xlen, COMDAT
; _this$ = ecx

; 1784 : 		_Xlength_error("vector<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN4@Xlen:
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEXXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1655 : 		{	// free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 37		 je	 SHORT $LN2@Tidy

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  00009	56		 push	 esi
  0000a	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00012	2b f1		 sub	 esi, ecx
  00014	f7 ee		 imul	 esi
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 03	 sar	 edx, 3
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	8b cf		 mov	 ecx, edi
  00026	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  0002b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 1663 : 			this->_Mylast() = pointer();

  00031	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00038	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0003f	5e		 pop	 esi
$LN2@Tidy:
  00040	5f		 pop	 edi

; 1665 : 			}
; 1666 : 		}

  00041	c3		 ret	 0
?_Tidy@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
tv186 = 8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reserve, COMDAT
; _this$ = ecx

; 1645 : 		{	// ensure room for _Count new elements, grow exponentially

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  00006	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00010	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00013	2b f7		 sub	 esi, edi
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi

; 1646 : 		if (_Unused_capacity() < _Count)

  00019	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]

; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());

  0001c	c1 fa 03	 sar	 edx, 3
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx

; 1646 : 		if (_Unused_capacity() < _Count)

  00026	3b c6		 cmp	 eax, esi
  00028	73 66		 jae	 SHORT $LN2@Reserve

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0002a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0002c	2b f8		 sub	 edi, eax
  0002e	89 45 08	 mov	 DWORD PTR tv186[ebp], eax
  00031	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00036	f7 ef		 imul	 edi

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00038	b8 92 24 49 12	 mov	 eax, 306783378		; 12492492H

; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0003d	03 d7		 add	 edx, edi
  0003f	c1 fa 03	 sar	 edx, 3
  00042	8b ca		 mov	 ecx, edx
  00044	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00047	03 ca		 add	 ecx, edx

; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)

  00049	2b c1		 sub	 eax, ecx
  0004b	3b c6		 cmp	 eax, esi
  0004d	72 48		 jb	 SHORT $LN134@Reserve

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  0004f	8d 3c 31	 lea	 edi, DWORD PTR [ecx+esi]

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00052	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00057	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0005a	2b 4d 08	 sub	 ecx, DWORD PTR tv186[ebp]
  0005d	f7 e9		 imul	 ecx
  0005f	03 d1		 add	 edx, ecx
  00061	c1 fa 03	 sar	 edx, 3
  00064	8b f2		 mov	 esi, edx
  00066	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00069	03 f2		 add	 esi, edx

; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0006b	ba 92 24 49 12	 mov	 edx, 306783378		; 12492492H
  00070	8b c6		 mov	 eax, esi
  00072	d1 e8		 shr	 eax, 1
  00074	2b d0		 sub	 edx, eax
  00076	3b d6		 cmp	 edx, esi
  00078	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  0007b	b8 00 00 00 00	 mov	 eax, 0
  00080	0f 42 c8	 cmovb	 ecx, eax

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00083	3b cf		 cmp	 ecx, edi
  00085	0f 42 cf	 cmovb	 ecx, edi

; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));

  00088	51		 push	 ecx
  00089	8b cb		 mov	 ecx, ebx
  0008b	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reallocate
$LN2@Reserve:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx

; 1651 : 			}
; 1652 : 		}

  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
$LN134@Reserve:

; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())
; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1661 : 				this->_Myend() - this->_Myfirst());
; 1662 : 			this->_Myfirst() = pointer();
; 1663 : 			this->_Mylast() = pointer();
; 1664 : 			this->_Myend() = pointer();
; 1665 : 			}
; 1666 : 		}
; 1667 : 
; 1668 : 	template<class _Iter>
; 1669 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1670 : 		{	// copy initializing [_First, _Last), using allocator
; 1671 : 		return (_Uninitialized_copy(_First, _Last,
; 1672 : 			_Ptr, this->_Getal()));
; 1673 : 		}
; 1674 : 
; 1675 : 	template<class _Iter>
; 1676 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1677 : 		{	// move initializing [_First, _Last), using allocator
; 1678 : 		return (_Uninitialized_move(_First, _Last,
; 1679 : 			_Ptr, this->_Getal()));
; 1680 : 		}
; 1681 : 
; 1682 : 	iterator _Insert_n(const_iterator _Where,
; 1683 : 		size_type _Count, const value_type& _Val)
; 1684 : 		{	// insert _Count * _Val at _Where
; 1685 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1686 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1687 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1688 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1689 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1690 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1691 : 
; 1692 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1693 : 		if (_Count == 0)
; 1694 : 			;
; 1695 : 		else if (_Unused_capacity() < _Count)
; 1696 : 			{	// not enough room, reallocate
; 1697 : 			if (max_size() - size() < _Count)
; 1698 : 				_Xlen();	// result too long
; 1699 : 
; 1700 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1701 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1702 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst();
; 1703 : 			int _Ncopied = 0;
; 1704 : 
; 1705 : 			_TRY_BEGIN
; 1706 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1707 : 				_STD addressof(_Val));	// add new stuff
; 1708 : 			++_Ncopied;
; 1709 : 			_Umove(this->_Myfirst(), _VIPTR(_Where),
; 1710 : 				_Newvec);	// copy prefix
; 1711 : 			++_Ncopied;
; 1712 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1713 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1714 : 			_CATCH_ALL
; 1715 : 			if (1 < _Ncopied)
; 1716 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1717 : 			if (0 < _Ncopied)
; 1718 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1719 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1720 : 			_RERAISE;
; 1721 : 			_CATCH_END
; 1722 : 
; 1723 : 			_Count += size();
; 1724 : 			if (this->_Myfirst() != pointer())
; 1725 : 				{	// destroy and deallocate old array
; 1726 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1727 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1728 : 					this->_Myend() - this->_Myfirst());
; 1729 : 				}
; 1730 : 
; 1731 : 			this->_Orphan_all();
; 1732 : 			this->_Myend() = _Newvec + _Capacity;
; 1733 : 			this->_Mylast() = _Newvec + _Count;
; 1734 : 			this->_Myfirst() = _Newvec;
; 1735 : 			}
; 1736 : 		else if ((size_type)(this->_Mylast() - _VIPTR(_Where))
; 1737 : 			< _Count)
; 1738 : 			{	// new stuff spills off end
; 1739 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1740 : 
; 1741 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1742 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1743 : 
; 1744 : 			_TRY_BEGIN
; 1745 : 			_Ufill(this->_Mylast(),
; 1746 : 				_Count - (this->_Mylast() - _VIPTR(_Where)),
; 1747 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1748 : 			_CATCH_ALL
; 1749 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1750 : 				this->_Mylast() + _Count);
; 1751 : 			_RERAISE;
; 1752 : 			_CATCH_END
; 1753 : 
; 1754 : 			this->_Mylast() += _Count;
; 1755 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1756 : 			_STD fill(_VIPTR(_Where), this->_Mylast() - _Count,
; 1757 : 				_Tmp);	// insert up to old end
; 1758 : 			}
; 1759 : 		else
; 1760 : 			{	// new stuff can all be assigned
; 1761 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1762 : 
; 1763 : 			pointer _Oldend = this->_Mylast();
; 1764 : 			this->_Mylast() = _Umove(_Oldend - _Count, _Oldend,
; 1765 : 				this->_Mylast());	// copy suffix
; 1766 : 
; 1767 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1768 : 			_Move_backward(_VIPTR(_Where), _Oldend - _Count,
; 1769 : 				_Oldend);	// copy hole
; 1770 : 			_STD fill(_VIPTR(_Where),
; 1771 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1772 : 			}
; 1773 : 		return (begin() + _Off);
; 1774 : 		}
; 1775 : 
; 1776 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1777 : 		{	// copy initializing _Count * _Val, using allocator
; 1778 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Getal());
; 1779 : 		return (_Ptr + _Count);
; 1780 : 		}
; 1781 : 
; 1782 : 	[[noreturn]] void _Xlen() const
; 1783 : 		{	// report a length_error
; 1784 : 		_Xlength_error("vector<T> too long");

  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0009c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN136@Reserve:
$LN133@Reserve:
  000a1	cc		 int	 3
?_Reserve@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$2 = 8						; size = 1
__Count$ = 8						; size = 4
?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reallocate, COMDAT
; _this$ = ecx

; 1620 : 		{	// move to array of exactly _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 898  : 		return (_Mybase::allocate(_Count));

  00030	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  00033	e8 00 00 00 00	 call	 ?allocate@?$allocator@UPvPBalanceInfo@@@std@@QAEPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::allocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00038	ff 75 08	 push	 DWORD PTR __Cat$2[ebp]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0003b	8b f8		 mov	 edi, eax

; 1622 : 
; 1623 : 		_TRY_BEGIN

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  00044	6a 00		 push	 0
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	ff 76 04	 push	 DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  0004b	89 7d ec	 mov	 DWORD PTR __Ptr$[ebp], edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0004e	ff 36		 push	 DWORD PTR [esi]
  00050	e8 00 00 00 00	 call	 ??$_Uninit_move@PAUPvPBalanceInfo@@PAU1@V?$allocator@UPvPBalanceInfo@@@std@@U1@@std@@YAPAUPvPBalanceInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<PvPBalanceInfo *,PvPBalanceInfo *,std::allocator<PvPBalanceInfo>,PvPBalanceInfo>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00055	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00058	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0005d	2b 0e		 sub	 ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 481  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,

  0005f	83 c4 18	 add	 esp, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00062	f7 e9		 imul	 ecx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00064	8b 06		 mov	 eax, DWORD PTR [esi]

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00066	03 d1		 add	 edx, ecx
  00068	c1 fa 03	 sar	 edx, 3
  0006b	8b da		 mov	 ebx, edx
  0006d	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00070	03 da		 add	 ebx, edx

; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())

  00072	85 c0		 test	 eax, eax
  00074	74 22		 je	 SHORT $LN3@Reallocate

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00076	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00079	2b c8		 sub	 ecx, eax
  0007b	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00080	f7 e9		 imul	 ecx
  00082	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00084	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),

  00086	c1 fa 03	 sar	 edx, 3
  00089	8b c2		 mov	 eax, edx
  0008b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008e	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00090	50		 push	 eax
  00091	ff 36		 push	 DWORD PTR [esi]
  00093	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1639 : 		this->_Myend() = _Ptr + _Count;

  00098	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0009b	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000a2	2b c1		 sub	 eax, ecx
  000a4	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  000a7	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1640 : 		this->_Mylast() = _Ptr + _Size;

  000aa	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  000b1	2b c3		 sub	 eax, ebx
  000b3	8d 04 47	 lea	 eax, DWORD PTR [edi+eax*2]
  000b6	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1641 : 		this->_Myfirst() = _Ptr;

  000b9	89 3e		 mov	 DWORD PTR [esi], edi

; 1642 : 		}

  000bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c5	59		 pop	 ecx
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 04 00	 ret	 4
__catch$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z$0:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  000cf	ff 75 08	 push	 DWORD PTR __Count$[ebp]
  000d2	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  000d8	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1627 : 		_RERAISE;

  000dd	6a 00		 push	 0
  000df	6a 00		 push	 0
  000e1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN179@Reallocate:
$LN178@Reallocate:
  000e6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reallocate
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBE_NPBUPvPBalanceInfo@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBE_NPBUPvPBalanceInfo@@@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Inside, COMDAT
; _this$ = ecx

; 1615 : 		{	// test if _Ptr points inside vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00009	73 0a		 jae	 SHORT $LN3@Inside
  0000b	39 01		 cmp	 DWORD PTR [ecx], eax
  0000d	77 06		 ja	 SHORT $LN3@Inside
  0000f	b0 01		 mov	 al, 1

; 1617 : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@Inside:

; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00015	32 c0		 xor	 al, al

; 1617 : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?_Inside@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBE_NPBUPvPBalanceInfo@@@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEII@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Grow_to, COMDAT
; _this$ = ecx

; 1604 : 		{	// grow by 50% or at least to _Count

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00004	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00007	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0000c	2b 31		 sub	 esi, DWORD PTR [ecx]

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0000e	b9 92 24 49 12	 mov	 ecx, 306783378		; 12492492H

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00013	f7 ee		 imul	 esi
  00015	57		 push	 edi
  00016	03 d6		 add	 edx, esi

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00018	33 ff		 xor	 edi, edi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  0001a	c1 fa 03	 sar	 edx, 3
  0001d	8b f2		 mov	 esi, edx
  0001f	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00022	03 f2		 add	 esi, edx

; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00024	8b c6		 mov	 eax, esi
  00026	d1 e8		 shr	 eax, 1
  00028	2b c8		 sub	 ecx, eax
  0002a	3b ce		 cmp	 ecx, esi
  0002c	8d 14 30	 lea	 edx, DWORD PTR [eax+esi]
  0002f	0f 42 d7	 cmovb	 edx, edi

; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)

  00032	3b 55 08	 cmp	 edx, DWORD PTR __Count$[ebp]
  00035	5f		 pop	 edi
  00036	0f 42 55 08	 cmovb	 edx, DWORD PTR __Count$[ebp]

; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);

  0003a	8b c2		 mov	 eax, edx
  0003c	5e		 pop	 esi

; 1612 : 		}

  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?_Grow_to@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IBEII@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXPAUPvPBalanceInfo@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXPAUPvPBalanceInfo@@0@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Destroy, COMDAT
; _this$ = ecx

; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXPAUPvPBalanceInfo@@0@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::clear, COMDAT
; _this$ = ecx

; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1543 : 		}

  00005	c3		 ret	 0
?clear@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXABUPvPBalanceInfo@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXABUPvPBalanceInfo@@@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::push_back, COMDAT
; _this$ = ecx

; 1274 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Val$[ebp]
  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0000d	3b f9		 cmp	 edi, ecx
  0000f	73 5f		 jae	 SHORT $LN2@push_back
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	3b c7		 cmp	 eax, edi
  00015	77 59		 ja	 SHORT $LN2@push_back

; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();

  00017	2b f8		 sub	 edi, eax
  00019	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001e	f7 ef		 imul	 edi
  00020	03 d7		 add	 edx, edi
  00022	c1 fa 03	 sar	 edx, 3
  00025	8b fa		 mov	 edi, edx
  00027	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  0002a	03 fa		 add	 edi, edx

; 1278 : 			if (this->_Mylast() == this->_Myend())

  0002c	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  0002f	75 09		 jne	 SHORT $LN4@push_back

; 1279 : 				_Reserve(1);

  00031	6a 01		 push	 1
  00033	8b ce		 mov	 ecx, esi
  00035	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reserve
$LN4@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0003a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003d	85 d2		 test	 edx, edx
  0003f	74 5a		 je	 SHORT $LN205@push_back
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
  00043	8d 0c fd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*8]
  0004a	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0004c	f3 0f 7e 04 48	 movq	 xmm0, QWORD PTR [eax+ecx*2]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1281 : 			this->_Getal().construct(this->_Mylast(),

  00051	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00054	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00058	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0005b	89 42 08	 mov	 DWORD PTR [edx+8], eax
  0005e	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]
  00062	66 89 42 0c	 mov	 WORD PTR [edx+12], ax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  00066	83 46 04 0e	 add	 DWORD PTR [esi+4], 14	; 0000000eH
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
$LN2@push_back:

; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())

  00070	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  00073	75 09		 jne	 SHORT $LN5@push_back

; 1288 : 				_Reserve(1);

  00075	6a 01		 push	 1
  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@IAEXI@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Reserve
$LN5@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 655  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0007e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00081	85 c9		 test	 ecx, ecx
  00083	74 16		 je	 SHORT $LN205@push_back
  00085	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00089	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0008d	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00090	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00093	66 8b 47 0c	 mov	 ax, WORD PTR [edi+12]
  00097	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax
$LN205@push_back:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1292 : 			++this->_Mylast();

  0009b	83 46 04 0e	 add	 DWORD PTR [esi+4], 14	; 0000000eH
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi

; 1293 : 			}
; 1294 : 		}

  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
?push_back@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXABUPvPBalanceInfo@@@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEAAUPvPBalanceInfo@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEAAUPvPBalanceInfo@@I@Z PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::operator[], COMDAT
; _this$ = ecx

; 1228 : 		{	// subscript mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]
  0000d	2b d0		 sub	 edx, eax
  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8d 04 50	 lea	 eax, DWORD PTR [eax+edx*2]

; 1241 : 		}

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??A?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEAAUPvPBalanceInfo@@I@Z ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::max_size, COMDAT
; _this$ = ecx

; 1184 : 		return (this->_Getal().max_size());

  00000	b8 92 24 49 12	 mov	 eax, 306783378		; 12492492H

; 1185 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::size, COMDAT
; _this$ = ecx

; 1178 : 		{	// return length of sequence

  00000	56		 push	 esi

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 03	 sar	 edx, 3
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1180 : 		}

  0001a	c3		 ret	 0
?size@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?_Unused_capacity@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Unused_capacity, COMDAT
; _this$ = ecx

; 1046 : 		{	// micro-optimization for capacity() - size()

  00000	56		 push	 esi

; 1047 : 		return (this->_Myend() - this->_Mylast());

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 03	 sar	 edx, 3
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
  0001a	5e		 pop	 esi

; 1048 : 		}

  0001b	c3		 ret	 0
?_Unused_capacity@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::capacity, COMDAT
; _this$ = ecx

; 1041 : 		{	// return current length of allocated storage

  00000	56		 push	 esi

; 1042 : 		return (this->_Myend() - this->_Myfirst());

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00009	2b 31		 sub	 esi, DWORD PTR [ecx]
  0000b	f7 ee		 imul	 esi
  0000d	03 d6		 add	 edx, esi
  0000f	c1 fa 03	 sar	 edx, 3
  00012	8b c2		 mov	 eax, edx
  00014	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00017	03 c2		 add	 eax, edx
  00019	5e		 pop	 esi

; 1043 : 		}

  0001a	c3		 ret	 0
?capacity@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIXZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::~vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >, COMDAT
; _this$ = ecx

; 974  : 		{	// destroy the object

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 977  : 
; 978  : 	_Myt& operator=(const _Myt& _Right)
; 979  : 		{	// assign _Right
; 980  : 		if (this != &_Right)
; 981  : 			{	// different, assign it
; 982  : 			if (this->_Getal() != _Right._Getal()
; 983  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 984  : 				{	// change allocator before copying
; 985  : 				_Tidy();
; 986  : 				this->_Copy_alloc(_Right._Getal());
; 987  : 				}
; 988  : 
; 989  : 			this->_Orphan_all();
; 990  : 
; 991  : 			if (_Right.empty())
; 992  : 				clear();	// new sequence empty, erase existing sequence
; 993  : 			else if (_Right.size() <= size())
; 994  : 				{	// enough elements, copy new and destroy old
; 995  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst(),
; 996  : 					_Right._Mylast(), this->_Myfirst());	// copy new
; 997  : 				_Destroy(_Ptr, this->_Mylast());	// destroy old
; 998  : 				this->_Mylast() = this->_Myfirst() + _Right.size();
; 999  : 				}
; 1000 : 			else if (_Right.size() <= capacity())
; 1001 : 				{	// enough room, copy and construct new
; 1002 : 				pointer _Ptr = _Right._Myfirst() + size();
; 1003 : 				_Copy_impl(_Right._Myfirst(),
; 1004 : 					_Ptr, this->_Myfirst());
; 1005 : 				this->_Mylast() = _Ucopy(_Ptr, _Right._Mylast(),
; 1006 : 					this->_Mylast());
; 1007 : 				}
; 1008 : 			else
; 1009 : 				{	// not enough room, allocate new array and construct new
; 1010 : 				if (this->_Myfirst() != pointer())
; 1011 : 					{	// discard old array
; 1012 : 					_Destroy(this->_Myfirst(), this->_Mylast());
; 1013 : 					this->_Getal().deallocate(this->_Myfirst(),
; 1014 : 						this->_Myend() - this->_Myfirst());
; 1015 : 					}
; 1016 : 				if (_Buy(_Right.size()))
; 1017 : 					_TRY_BEGIN
; 1018 : 					this->_Mylast() =
; 1019 : 						_Ucopy(_Right._Myfirst(), _Right._Mylast(),
; 1020 : 						this->_Myfirst());
; 1021 : 					_CATCH_ALL
; 1022 : 					_Tidy();
; 1023 : 					_RERAISE;
; 1024 : 					_CATCH_END
; 1025 : 				}
; 1026 : 			}
; 1027 : 		return (*this);
; 1028 : 		}
; 1029 : 
; 1030 : 	void reserve(size_type _Count)
; 1031 : 		{	// determine new minimum length of allocated storage
; 1032 : 		if (capacity() < _Count)
; 1033 : 			{	// something to do, check and reallocate
; 1034 : 			if (max_size() < _Count)
; 1035 : 				_Xlen();
; 1036 : 			_Reallocate(_Count);
; 1037 : 			}
; 1038 : 		}
; 1039 : 
; 1040 : 	size_type capacity() const _NOEXCEPT
; 1041 : 		{	// return current length of allocated storage
; 1042 : 		return (this->_Myend() - this->_Myfirst());
; 1043 : 		}
; 1044 : 
; 1045 : 	size_type _Unused_capacity() const _NOEXCEPT
; 1046 : 		{	// micro-optimization for capacity() - size()
; 1047 : 		return (this->_Myend() - this->_Mylast());
; 1048 : 		}
; 1049 : 
; 1050 : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 1051 : 		{	// micro-optimization for capacity() != size()
; 1052 : 		return (this->_Myend() != this->_Mylast());
; 1053 : 		}
; 1054 : 
; 1055 : 	iterator begin() _NOEXCEPT
; 1056 : 		{	// return iterator for beginning of mutable sequence
; 1057 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));
; 1058 : 		}
; 1059 : 
; 1060 : 	const_iterator begin() const _NOEXCEPT
; 1061 : 		{	// return iterator for beginning of nonmutable sequence
; 1062 : 		return (const_iterator(this->_Myfirst(), &this->_Get_data()));
; 1063 : 		}
; 1064 : 
; 1065 : 	iterator end() _NOEXCEPT
; 1066 : 		{	// return iterator for end of mutable sequence
; 1067 : 		return (iterator(this->_Mylast(), &this->_Get_data()));
; 1068 : 		}
; 1069 : 
; 1070 : 	const_iterator end() const _NOEXCEPT
; 1071 : 		{	// return iterator for end of nonmutable sequence
; 1072 : 		return (const_iterator(this->_Mylast(), &this->_Get_data()));
; 1073 : 		}
; 1074 : 
; 1075 : 	iterator _Make_iter(const_iterator _Where) const
; 1076 : 		{	// make iterator from const_iterator
; 1077 : 		return (iterator(_Where._Ptr, &this->_Get_data()));
; 1078 : 		}
; 1079 : 
; 1080 : 	reverse_iterator rbegin() _NOEXCEPT
; 1081 : 		{	// return iterator for beginning of reversed mutable sequence
; 1082 : 		return (reverse_iterator(end()));
; 1083 : 		}
; 1084 : 
; 1085 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1086 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1087 : 		return (const_reverse_iterator(end()));
; 1088 : 		}
; 1089 : 
; 1090 : 	reverse_iterator rend() _NOEXCEPT
; 1091 : 		{	// return iterator for end of reversed mutable sequence
; 1092 : 		return (reverse_iterator(begin()));
; 1093 : 		}
; 1094 : 
; 1095 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1096 : 		{	// return iterator for end of reversed nonmutable sequence
; 1097 : 		return (const_reverse_iterator(begin()));
; 1098 : 		}
; 1099 : 
; 1100 : 	const_iterator cbegin() const _NOEXCEPT
; 1101 : 		{	// return iterator for beginning of nonmutable sequence
; 1102 : 		return (begin());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_iterator cend() const _NOEXCEPT
; 1106 : 		{	// return iterator for end of nonmutable sequence
; 1107 : 		return (end());
; 1108 : 		}
; 1109 : 
; 1110 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1111 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1112 : 		return (rbegin());
; 1113 : 		}
; 1114 : 
; 1115 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1116 : 		{	// return iterator for end of reversed nonmutable sequence
; 1117 : 		return (rend());
; 1118 : 		}
; 1119 : 
; 1120 : 	void shrink_to_fit()
; 1121 : 		{	// reduce capacity
; 1122 : 		if (_Has_unused_capacity())
; 1123 : 			{	// worth shrinking, do it
; 1124 : 			if (empty())
; 1125 : 				_Tidy();
; 1126 : 			else
; 1127 : 				_Reallocate(size());
; 1128 : 			}
; 1129 : 		}
; 1130 : 
; 1131 : 	void resize(size_type _Newsize)
; 1132 : 		{	// determine new length, padding as needed
; 1133 : 		if (_Newsize < size())
; 1134 : 			_Pop_back_n(size() - _Newsize);
; 1135 : 		else if (size() < _Newsize)
; 1136 : 			{	// pad as needed
; 1137 : 			_Reserve(_Newsize - size());
; 1138 : 			_TRY_BEGIN
; 1139 : 			_Uninitialized_default_fill_n(this->_Mylast(), _Newsize - size(),
; 1140 : 				this->_Getal());
; 1141 : 			_CATCH_ALL
; 1142 : 			_Tidy();
; 1143 : 			_RERAISE;
; 1144 : 			_CATCH_END
; 1145 : 			this->_Mylast() += _Newsize - size();
; 1146 : 			}
; 1147 : 		}
; 1148 : 
; 1149 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1150 : 		{	// determine new length, padding with _Val elements as needed
; 1151 : 		if (_Newsize < size())
; 1152 : 			_Pop_back_n(size() - _Newsize);
; 1153 : 		else if (size() < _Newsize)
; 1154 : 			{	// pad as needed
; 1155 : 			const value_type *_Ptr = _STD addressof(_Val);
; 1156 : 
; 1157 : 			if (_Inside(_Ptr))
; 1158 : 				{	// padding is inside vector, recompute _Ptr after reserve
; 1159 : 				const difference_type _Idx = _Ptr
; 1160 : 					- _STD addressof(*this->_Myfirst());
; 1161 : 				_Reserve(_Newsize - size());
; 1162 : 				_Ptr = _STD addressof(*this->_Myfirst()) + _Idx;
; 1163 : 				}
; 1164 : 			else
; 1165 : 				_Reserve(_Newsize - size());
; 1166 : 
; 1167 : 			_TRY_BEGIN
; 1168 : 			_Ufill(this->_Mylast(), _Newsize - size(), _Ptr);
; 1169 : 			_CATCH_ALL
; 1170 : 			_Tidy();
; 1171 : 			_RERAISE;
; 1172 : 			_CATCH_END
; 1173 : 			this->_Mylast() += _Newsize - size();
; 1174 : 			}
; 1175 : 		}
; 1176 : 
; 1177 : 	size_type size() const _NOEXCEPT
; 1178 : 		{	// return length of sequence
; 1179 : 		return (this->_Mylast() - this->_Myfirst());
; 1180 : 		}
; 1181 : 
; 1182 : 	size_type max_size() const _NOEXCEPT
; 1183 : 		{	// return maximum possible length of sequence
; 1184 : 		return (this->_Getal().max_size());
; 1185 : 		}
; 1186 : 
; 1187 : 	bool empty() const _NOEXCEPT
; 1188 : 		{	// test if sequence is empty
; 1189 : 		return (this->_Myfirst() == this->_Mylast());
; 1190 : 		}
; 1191 : 
; 1192 : 	_Alloc get_allocator() const _NOEXCEPT
; 1193 : 		{	// return allocator object for values
; 1194 : 		return (this->_Getal());
; 1195 : 		}
; 1196 : 
; 1197 : 	const_reference at(size_type _Pos) const
; 1198 : 		{	// subscript nonmutable sequence with checking
; 1199 : 		if (size() <= _Pos)
; 1200 : 			_Xran();
; 1201 : 		return (*(this->_Myfirst() + _Pos));
; 1202 : 		}
; 1203 : 
; 1204 : 	reference at(size_type _Pos)
; 1205 : 		{	// subscript mutable sequence with checking
; 1206 : 		if (size() <= _Pos)
; 1207 : 			_Xran();
; 1208 : 		return (*(this->_Myfirst() + _Pos));
; 1209 : 		}
; 1210 : 
; 1211 : 	const_reference operator[](size_type _Pos) const
; 1212 : 		{	// subscript nonmutable sequence
; 1213 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1214 : 		if (size() <= _Pos)
; 1215 : 			{	// report error
; 1216 : 			_DEBUG_ERROR("vector subscript out of range");
; 1217 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1218 : 			}
; 1219 : 
; 1220 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1221 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1222 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1223 : 
; 1224 : 		return (*(this->_Myfirst() + _Pos));
; 1225 : 		}
; 1226 : 
; 1227 : 	reference operator[](size_type _Pos)
; 1228 : 		{	// subscript mutable sequence
; 1229 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1230 : 		if (size() <= _Pos)
; 1231 : 			{	// report error
; 1232 : 			_DEBUG_ERROR("vector subscript out of range");
; 1233 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1234 : 			}
; 1235 : 
; 1236 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1237 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1238 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1239 : 
; 1240 : 		return (*(this->_Myfirst() + _Pos));
; 1241 : 		}
; 1242 : 
; 1243 : 	pointer data() _NOEXCEPT
; 1244 : 		{	// return address of first element
; 1245 : 		return (this->_Myfirst());
; 1246 : 		}
; 1247 : 
; 1248 : 	const_pointer data() const _NOEXCEPT
; 1249 : 		{	// return address of first element
; 1250 : 		return (this->_Myfirst());
; 1251 : 		}
; 1252 : 
; 1253 : 	reference front()
; 1254 : 		{	// return first element of mutable sequence
; 1255 : 		return (*begin());
; 1256 : 		}
; 1257 : 
; 1258 : 	const_reference front() const
; 1259 : 		{	// return first element of nonmutable sequence
; 1260 : 		return (*begin());
; 1261 : 		}
; 1262 : 
; 1263 : 	reference back()
; 1264 : 		{	// return last element of mutable sequence
; 1265 : 		return (*(end() - 1));
; 1266 : 		}
; 1267 : 
; 1268 : 	const_reference back() const
; 1269 : 		{	// return last element of nonmutable sequence
; 1270 : 		return (*(end() - 1));
; 1271 : 		}
; 1272 : 
; 1273 : 	void push_back(const value_type& _Val)
; 1274 : 		{	// insert element at end
; 1275 : 		if (_Inside(_STD addressof(_Val)))
; 1276 : 			{	// push back an element
; 1277 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst();
; 1278 : 			if (this->_Mylast() == this->_Myend())
; 1279 : 				_Reserve(1);
; 1280 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1281 : 			this->_Getal().construct(this->_Mylast(),
; 1282 : 				this->_Myfirst()[_Idx]);
; 1283 : 			++this->_Mylast();
; 1284 : 			}
; 1285 : 		else
; 1286 : 			{	// push back a non-element
; 1287 : 			if (this->_Mylast() == this->_Myend())
; 1288 : 				_Reserve(1);
; 1289 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1290 : 			this->_Getal().construct(this->_Mylast(),
; 1291 : 				_Val);
; 1292 : 			++this->_Mylast();
; 1293 : 			}
; 1294 : 		}
; 1295 : 
; 1296 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1297 : 	void pop_back()
; 1298 : 		{	// erase element at end
; 1299 : 		if (empty())
; 1300 : 			_DEBUG_ERROR("vector empty before pop");
; 1301 : 		else
; 1302 : 			{	// erase last element
; 1303 : 			_Orphan_range(this->_Mylast() - 1, this->_Mylast());
; 1304 : 			this->_Getal().destroy(this->_Mylast() - 1);
; 1305 : 			--this->_Mylast();
; 1306 : 			}
; 1307 : 		}
; 1308 : 
; 1309 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1310 : 	void pop_back()
; 1311 : 		{	// erase element at end
; 1312 : 		this->_Getal().destroy(this->_Mylast() - 1);
; 1313 : 		--this->_Mylast();
; 1314 : 		}
; 1315 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1316 : 
; 1317 : 	template<class _Iter>
; 1318 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1319 : 			void>::type
; 1320 : 		assign(_Iter _First, _Iter _Last)
; 1321 : 		{	// assign [_First, _Last)
; 1322 : 		clear();
; 1323 : 		_Assign(_First, _Last, _Iter_cat(_First));
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Iter>
; 1327 : 		void _Assign(_Iter _First, _Iter _Last,
; 1328 : 			input_iterator_tag)
; 1329 : 		{	// assign [_First, _Last), input iterators
; 1330 : 		for (; _First != _Last; ++_First)
; 1331 : 			emplace_back(*_First);
; 1332 : 		}
; 1333 : 
; 1334 : 	template<class _Iter>
; 1335 : 		void _Assign(_Iter _First, _Iter _Last,
; 1336 : 			forward_iterator_tag)
; 1337 : 		{	// assign [_First, _Last), forward iterators
; 1338 : 		size_type _Newsize = _STD distance(_First, _Last);
; 1339 : 
; 1340 : 		if (capacity() < _Newsize)
; 1341 : 			{	// need more room, try to get it
; 1342 : 			size_type _Newcapacity = _Grow_to(_Newsize);
; 1343 : 			_Tidy();
; 1344 : 			_Buy(_Newcapacity);
; 1345 : 			}
; 1346 : 
; 1347 : 		this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());
; 1348 : 		}
; 1349 : 
; 1350 : 	void assign(size_type _Count, const value_type& _Val)
; 1351 : 		{	// assign _Count * _Val
; 1352 : 		clear();
; 1353 : 		insert(begin(), _Count, _Val);
; 1354 : 		}
; 1355 : 
; 1356 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1357 : 		{	// insert _Val at _Where
; 1358 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1362 : 		const _Ty& _Val)
; 1363 : 		{	// insert _Count * _Val at _Where
; 1364 : 		return (_Insert_n(_Where, _Count, _Val));
; 1365 : 		}
; 1366 : 
; 1367 : 	template<class _Iter>
; 1368 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1369 : 			iterator>::type
; 1370 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1371 : 		{	// insert [_First, _Last) at _Where
; 1372 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1373 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1374 : 		return (begin() + _Off);
; 1375 : 		}
; 1376 : 
; 1377 : 	template<class _Iter>
; 1378 : 		void _Insert(const_iterator _Where,
; 1379 : 			_Iter _First, _Iter _Last,
; 1380 : 				input_iterator_tag)
; 1381 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1382 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst();
; 1383 : 
; 1384 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1385 : 		if (size() < _Off)
; 1386 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1387 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1388 : 
; 1389 : 		if (_First != _Last)
; 1390 : 			{	// worth doing, gather at end and rotate into place
; 1391 : 			size_type _Oldsize = size();
; 1392 : 
; 1393 : 			_TRY_BEGIN
; 1394 : 			for (; _First != _Last; ++_First)
; 1395 : 				push_back(*_First);	// append
; 1396 : 
; 1397 : 			_CATCH_ALL
; 1398 : 			erase(begin() + _Oldsize, end());
; 1399 : 			_RERAISE;
; 1400 : 			_CATCH_END
; 1401 : 
; 1402 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1403 : 			}
; 1404 : 		}
; 1405 : 
; 1406 : 	template<class _Iter>
; 1407 : 		void _Insert(const_iterator _Where,
; 1408 : 			_Iter _First, _Iter _Last,
; 1409 : 				forward_iterator_tag)
; 1410 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1411 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1412 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1413 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1414 : 			|| this->_Mylast() < _VIPTR(_Where))
; 1415 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1416 : 		_DEBUG_RANGE(_First, _Last);
; 1417 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1418 : 
; 1419 : 		size_type _Count = 0;
; 1420 : 		_Distance(_First, _Last, _Count);
; 1421 : 
; 1422 : 		if (_Count == 0)
; 1423 : 			;
; 1424 : 		else if (_Unused_capacity() < _Count)
; 1425 : 			{	// not enough room, reallocate
; 1426 : 			if (max_size() - size() < _Count)
; 1427 : 				_Xlen();	// result too long
; 1428 : 
; 1429 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1430 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1431 : 			pointer _Ptr = _Newvec;
; 1432 : 
; 1433 : 			_TRY_BEGIN
; 1434 : 			_Ptr = _Umove(this->_Myfirst(), _VIPTR(_Where),
; 1435 : 				_Newvec);	// copy prefix
; 1436 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1437 : 			_Umove(_VIPTR(_Where), this->_Mylast(),
; 1438 : 				_Ptr);	// copy suffix
; 1439 : 			_CATCH_ALL
; 1440 : 			_Destroy(_Newvec, _Ptr);
; 1441 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1442 : 			_RERAISE;
; 1443 : 			_CATCH_END
; 1444 : 
; 1445 : 			_Count += size();
; 1446 : 			if (this->_Myfirst() != pointer())
; 1447 : 				{	// destroy and deallocate old array
; 1448 : 				_Destroy(this->_Myfirst(), this->_Mylast());
; 1449 : 				this->_Getal().deallocate(this->_Myfirst(),
; 1450 : 					this->_Myend() - this->_Myfirst());
; 1451 : 				}
; 1452 : 
; 1453 : 			this->_Orphan_all();
; 1454 : 			this->_Myend() = _Newvec + _Capacity;
; 1455 : 			this->_Mylast() = _Newvec + _Count;
; 1456 : 			this->_Myfirst() = _Newvec;
; 1457 : 			}
; 1458 : 		else
; 1459 : 			{	// new stuff fits, append and rotate into place
; 1460 : 			_Ucopy(_First, _Last, this->_Mylast());
; 1461 : 			_STD rotate(_VIPTR(_Where), this->_Mylast(),
; 1462 : 				this->_Mylast() + _Count);
; 1463 : 			this->_Mylast() += _Count;
; 1464 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1465 : 			}
; 1466 : 		}
; 1467 : 
; 1468 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1469 : 	iterator erase(const_iterator _Where)
; 1470 : 		{	// erase element at where
; 1471 : 		if (_VICONT(_Where) != &this->_Get_data()
; 1472 : 			|| _VIPTR(_Where) < this->_Myfirst()
; 1473 : 			|| this->_Mylast() <= _VIPTR(_Where))
; 1474 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1475 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(), _VIPTR(_Where));
; 1476 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1477 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast());
; 1478 : 		--this->_Mylast();
; 1479 : 		return (_Make_iter(_Where));
; 1480 : 		}
; 1481 : 
; 1482 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1483 : 	iterator erase(const_iterator _Where)
; 1484 : 		{	// erase element at where
; 1485 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast(),
; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());
; 1488 : 		--this->_Mylast();
; 1489 : 		return (_Make_iter(_Where));
; 1490 : 		}
; 1491 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1492 : 
; 1493 : 	iterator erase(const_iterator _First_arg,
; 1494 : 		const_iterator _Last_arg)
; 1495 : 		{	// erase [_First, _Last)
; 1496 : 		if (_First_arg == begin() && _Last_arg == end())
; 1497 : 			clear();
; 1498 : 		else if (_First_arg != _Last_arg)
; 1499 : 			{	// clear partial
; 1500 : 			iterator _First = _Make_iter(_First_arg);
; 1501 : 			iterator _Last = _Make_iter(_Last_arg);
; 1502 : 
; 1503 : 			if (_First != _Last)
; 1504 : 				{	// worth doing, copy down over hole
; 1505 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1506 : 				if (_Last < _First || _VICONT(_First) != &this->_Get_data()
; 1507 : 					|| _VIPTR(_First) < this->_Myfirst()
; 1508 : 					|| this->_Mylast() < _VIPTR(_Last))
; 1509 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1510 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1511 : 					_VIPTR(_First));
; 1512 : 				_Orphan_range(_VIPTR(_First), this->_Mylast());
; 1513 : 
; 1514 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1515 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast(),
; 1516 : 					_VIPTR(_First));
; 1517 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1518 : 
; 1519 : 				_Destroy(_Ptr, this->_Mylast());
; 1520 : 				this->_Mylast() = _Ptr;
; 1521 : 				}
; 1522 : 			}
; 1523 : 		return (_Make_iter(_First_arg));
; 1524 : 		}
; 1525 : 
; 1526 : 	void _Pop_back_n(size_type _Count)
; 1527 : 		{	// erase _Count elements at end
; 1528 : 		pointer _Ptr = this->_Mylast() - _Count;
; 1529 : 
; 1530 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1531 : 		_Orphan_range(_Ptr, this->_Mylast());
; 1532 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1533 : 
; 1534 : 		_Destroy(_Ptr, this->_Mylast());
; 1535 : 		this->_Mylast() = _Ptr;
; 1536 : 		}
; 1537 : 
; 1538 : 	void clear() _NOEXCEPT
; 1539 : 		{	// erase all
; 1540 : 		this->_Orphan_all();
; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1542 : 		this->_Mylast() = this->_Myfirst();
; 1543 : 		}
; 1544 : 
; 1545 : 	void swap(_Myt& _Right)
; 1546 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1547 : 			|| _Alty::is_always_equal::value)
; 1548 : 		{	// exchange contents with _Right
; 1549 : 		if (this == &_Right)
; 1550 : 			;	// same object, do nothing
; 1551 : 		else if (this->_Getal() == _Right._Getal())
; 1552 : 			{	// same allocator, swap control information
; 1553 : 			this->_Swap_all(_Right);
; 1554 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1555 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1556 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1557 : 			}
; 1558 : 
; 1559 : 		else if (_Alty::propagate_on_container_swap::value)
; 1560 : 			{	// swap allocators and control information
; 1561 : 			this->_Swap_alloc(_Right);
; 1562 : 			_Swap_adl(this->_Myfirst(), _Right._Myfirst());
; 1563 : 			_Swap_adl(this->_Mylast(), _Right._Mylast());
; 1564 : 			_Swap_adl(this->_Myend(), _Right._Myend());
; 1565 : 			}
; 1566 : 
; 1567 : 		else
; 1568 : 			{	// containers are incompatible
; 1569 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1570 : 			_DEBUG_ERROR("vector containers incompatible for swap");
; 1571 : 
; 1572 :  #else /* ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 			_XSTD terminate();
; 1574 :  #endif /* ITERATOR_DEBUG_LEVEL == 2 */
; 1575 : 			}
; 1576 : 		}
; 1577 : 
; 1578 : protected:
; 1579 : 	bool _Buy(size_type _Capacity)
; 1580 : 		{	// allocate array with _Capacity elements
; 1581 : 		this->_Myfirst() = pointer();
; 1582 : 		this->_Mylast() = pointer();
; 1583 : 		this->_Myend() = pointer();
; 1584 : 
; 1585 : 		if (_Capacity == 0)
; 1586 : 			return (false);
; 1587 : 		else if (max_size() < _Capacity)
; 1588 : 			_Xlen();	// result too long
; 1589 : 		else
; 1590 : 			{	// nonempty array, allocate storage
; 1591 : 			this->_Myfirst() = this->_Getal().allocate(_Capacity);
; 1592 : 			this->_Mylast() = this->_Myfirst();
; 1593 : 			this->_Myend() = this->_Myfirst() + _Capacity;
; 1594 : 			}
; 1595 : 		return (true);
; 1596 : 		}
; 1597 : 
; 1598 : 	void _Destroy(pointer _First, pointer _Last)
; 1599 : 		{	// destroy [_First, _Last) using allocator
; 1600 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1601 : 		}
; 1602 : 
; 1603 : 	size_type _Grow_to(size_type _Count) const
; 1604 : 		{	// grow by 50% or at least to _Count
; 1605 : 		size_type _Capacity = capacity();
; 1606 : 
; 1607 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1608 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1609 : 		if (_Capacity < _Count)
; 1610 : 			_Capacity = _Count;
; 1611 : 		return (_Capacity);
; 1612 : 		}
; 1613 : 
; 1614 : 	bool _Inside(const value_type *_Ptr) const
; 1615 : 		{	// test if _Ptr points inside vector
; 1616 : 		return (_Ptr < this->_Mylast() && this->_Myfirst() <= _Ptr);
; 1617 : 		}
; 1618 : 
; 1619 : 	void _Reallocate(size_type _Count)
; 1620 : 		{	// move to array of exactly _Count elements
; 1621 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1622 : 
; 1623 : 		_TRY_BEGIN
; 1624 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1625 : 		_CATCH_ALL
; 1626 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1627 : 		_RERAISE;
; 1628 : 		_CATCH_END
; 1629 : 
; 1630 : 		size_type _Size = size();
; 1631 : 		if (this->_Myfirst() != pointer())
; 1632 : 			{	// destroy and deallocate old array
; 1633 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1634 : 			this->_Getal().deallocate(this->_Myfirst(),
; 1635 : 				this->_Myend() - this->_Myfirst());
; 1636 : 			}
; 1637 : 
; 1638 : 		this->_Orphan_all();
; 1639 : 		this->_Myend() = _Ptr + _Count;
; 1640 : 		this->_Mylast() = _Ptr + _Size;
; 1641 : 		this->_Myfirst() = _Ptr;
; 1642 : 		}
; 1643 : 
; 1644 : 	void _Reserve(size_type _Count)
; 1645 : 		{	// ensure room for _Count new elements, grow exponentially
; 1646 : 		if (_Unused_capacity() < _Count)
; 1647 : 			{	// need more room, try to get it
; 1648 : 			if (max_size() - size() < _Count)
; 1649 : 				_Xlen();
; 1650 : 			_Reallocate(_Grow_to(size() + _Count));
; 1651 : 			}
; 1652 : 		}
; 1653 : 
; 1654 : 	void _Tidy()
; 1655 : 		{	// free all storage
; 1656 : 		if (this->_Myfirst() != pointer())

  00003	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 37		 je	 SHORT $LN4@vector
  00009	56		 push	 esi

; 1657 : 			{	// something to free, destroy and deallocate it
; 1658 : 			this->_Orphan_all();
; 1659 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0000a	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00012	2b f1		 sub	 esi, ecx
  00014	f7 ee		 imul	 esi
  00016	03 d6		 add	 edx, esi
  00018	c1 fa 03	 sar	 edx, 3
  0001b	8b c2		 mov	 eax, edx
  0001d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00020	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	8b cf		 mov	 ecx, edi
  00026	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  0002b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 1663 : 			this->_Mylast() = pointer();

  00031	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00038	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0003f	5e		 pop	 esi
$LN4@vector:
  00040	5f		 pop	 edi

; 975  : 		_Tidy();
; 976  : 		}

  00041	c3		 ret	 0
??1?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::~vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@XZ PROC ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 707  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 707  : 		}

  00016	c3		 ret	 0
??0?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@XZ ENDP ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 319  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 320  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 314  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 315  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 299  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 300  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 294  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 295  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >,std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >::_Vector_val<std::_Simple_types<PvPBalanceInfo> >, COMDAT
; _this$ = ecx

; 479  : 		{	// initialize values
; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 481  : 		_Mylast = pointer();
; 482  : 		_Myend = pointer();
; 483  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<PvPBalanceInfo> >::_Vector_val<std::_Simple_types<PvPBalanceInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 667  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 668  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 662  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 663  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 657  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 658  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 652  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 653  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 647  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 648  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABQAUPvPBalanceInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 642  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 643  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAPAUPvPBalanceInfo@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 637  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 638  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 632  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 633  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 627  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 628  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 622  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 623  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 612  : 		_Get_data()._Orphan_all();
; 613  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UPvPBalanceInfo@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??0?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UPvPBalanceInfo@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >, COMDAT
; _this$ = ecx

; 480  : 		_Myfirst = pointer();

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 515  : 		}

  00006	8b c1		 mov	 eax, ecx

; 481  : 		_Mylast = pointer();

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 482  : 		_Myend = pointer();

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 515  : 		}

  00016	c2 04 00	 ret	 4
??0?$_Vector_alloc@U?$_Vec_base_types@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UPvPBalanceInfo@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >::_Vector_alloc<std::_Vec_base_types<PvPBalanceInfo,std::allocator<PvPBalanceInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::max_size, COMDAT
; _this$ = ecx

; 930  : 		return (_Mytraits::max_size(*this));

  00000	b8 92 24 49 12	 mov	 eax, 306783378		; 12492492H

; 931  : 		}

  00005	c2 04 00	 ret	 4
?max_size@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::deallocate, COMDAT
; _this$ = ecx

; 908  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 910  : 		}

  00003	5d		 pop	 ebp

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00004	e9 00 00 00 00	 jmp	 ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
?deallocate@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEPAUPvPBalanceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEPAUPvPBalanceInfo@@I@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::allocate, COMDAT
; _this$ = ecx

; 897  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 899  : 		}

  00003	5d		 pop	 ebp

; 898  : 		return (_Mybase::allocate(_Count));

  00004	e9 00 00 00 00	 jmp	 ?allocate@?$allocator@UPvPBalanceInfo@@@std@@QAEPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEPAUPvPBalanceInfo@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@ABV?$allocator@UPvPBalanceInfo@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@ABV?$allocator@UPvPBalanceInfo@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::_Wrap_alloc<std::allocator<PvPBalanceInfo> >, COMDAT
; _this$ = ecx

; 858  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$_Wrap_alloc@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAE@ABV?$allocator@UPvPBalanceInfo@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<PvPBalanceInfo> >::_Wrap_alloc<std::allocator<PvPBalanceInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAIABV?$allocator@UPvPBalanceInfo@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAIABV?$allocator@UPvPBalanceInfo@@@2@@Z PROC ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::max_size, COMDAT

; 785  : 		return (_Al.max_size());

  00000	b8 92 24 49 12	 mov	 eax, 306783378		; 12492492H

; 786  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UPvPBalanceInfo@@@std@@@std@@SAIABV?$allocator@UPvPBalanceInfo@@@2@@Z ENDP ; std::allocator_traits<std::allocator<PvPBalanceInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UPvPBalanceInfo@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UPvPBalanceInfo@@@std@@QBEIXZ PROC ; std::allocator<PvPBalanceInfo>::max_size, COMDAT
; _this$ = ecx

; 667  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	b8 92 24 49 12	 mov	 eax, 306783378		; 12492492H

; 668  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UPvPBalanceInfo@@@std@@QBEIXZ ENDP ; std::allocator<PvPBalanceInfo>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UPvPBalanceInfo@@@std@@QAEPAUPvPBalanceInfo@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UPvPBalanceInfo@@@std@@QAEPAUPvPBalanceInfo@@I@Z PROC ; std::allocator<PvPBalanceInfo>::allocate, COMDAT
; _this$ = ecx

; 642  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN4@allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax
$LN12@allocate:

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
$LN4@allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  00010	81 f9 92 24 49
	12		 cmp	 ecx, 306783378		; 12492492H
  00016	77 44		 ja	 SHORT $LN14@allocate

; 63   : 	const size_t _User_size = _Count * _Sz;

  00018	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0001f	2b c1		 sub	 eax, ecx
  00021	03 c0		 add	 eax, eax

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00023	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00028	72 23		 jb	 SHORT $LN6@allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0002a	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 72   : 		if (_Block_size <= _User_size)

  0002d	3b c8		 cmp	 ecx, eax
  0002f	76 30		 jbe	 SHORT $LN16@allocate

; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00037	8b c8		 mov	 ecx, eax
  00039	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0003c	85 c9		 test	 ecx, ecx
  0003e	74 26		 je	 SHORT $LN17@allocate

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00040	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00046	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 643  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 644  : 		}

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN6@allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00053	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00056	85 c0		 test	 eax, eax
  00058	75 b2		 jne	 SHORT $LN12@allocate
  0005a	eb 0f		 jmp	 SHORT $LN18@allocate
$LN14@allocate:

; 62   : 		_Xbad_alloc();	// report no memory

  0005c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN19@allocate:
$LN16@allocate:

; 73   : 			_Xbad_alloc();	// report no memory

  00061	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN20@allocate:
$LN17@allocate:

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00066	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@allocate:
$LN18@allocate:

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  0006b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@allocate:
$LN13@allocate:
  00070	cc		 int	 3
?allocate@?$allocator@UPvPBalanceInfo@@@std@@QAEPAUPvPBalanceInfo@@I@Z ENDP ; std::allocator<PvPBalanceInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z PROC ; std::allocator<PvPBalanceInfo>::deallocate, COMDAT
; _this$ = ecx

; 637  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]

; 638  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00009	81 fa 92 24 49
	12		 cmp	 edx, 306783378		; 12492492H
  0000f	77 39		 ja	 SHORT $LN13@deallocate

; 101  : 	const size_t _User_size = _Count * _Sz;

  00011	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  00018	2b c2		 sub	 eax, edx
  0001a	03 c0		 add	 eax, eax

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00021	72 1a		 jb	 SHORT $LN5@deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00023	f6 c1 1f	 test	 cl, 31			; 0000001fH
  00026	75 27		 jne	 SHORT $LN15@deallocate

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00028	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002b	3b c1		 cmp	 eax, ecx
  0002d	73 25		 jae	 SHORT $LN16@deallocate

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0002f	2b c8		 sub	 ecx, eax
  00031	83 f9 04	 cmp	 ecx, 4
  00034	72 23		 jb	 SHORT $LN17@deallocate

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00036	83 f9 23	 cmp	 ecx, 35			; 00000023H
  00039	77 23		 ja	 SHORT $LN18@deallocate

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003b	8b c8		 mov	 ecx, eax
$LN5@deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00043	83 c4 04	 add	 esp, 4

; 639  : 		}

  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
$LN13@deallocate:

; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN19@deallocate:
$LN15@deallocate:

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
$LN16@deallocate:

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN21@deallocate:
$LN17@deallocate:

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00059	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@deallocate:
$LN18@deallocate:

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0005e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN23@deallocate:
$LN12@deallocate:
  00063	cc		 int	 3
?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ENDP ; std::allocator<PvPBalanceInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UPvPBalanceInfo@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UPvPBalanceInfo@@@std@@QAE@ABV01@@Z PROC	; std::allocator<PvPBalanceInfo>::allocator<PvPBalanceInfo>, COMDAT
; _this$ = ecx

; 622  : 		{	// construct by copying (do nothing)
; 623  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??0?$allocator@UPvPBalanceInfo@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<PvPBalanceInfo>::allocator<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UPvPBalanceInfo@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UPvPBalanceInfo@@@std@@QAE@XZ PROC	; std::allocator<PvPBalanceInfo>::allocator<PvPBalanceInfo>, COMDAT
; _this$ = ecx

; 618  : 		{	// construct default allocator (do nothing)
; 619  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@UPvPBalanceInfo@@@std@@QAE@XZ ENDP	; std::allocator<PvPBalanceInfo>::allocator<PvPBalanceInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?modifyDefenseRate@PvPBalance@@QAEXFFAAM@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 2
_TargetIndex$ = 12					; size = 2
_Value$ = 16						; size = 4
?modifyDefenseRate@PvPBalance@@QAEXFFAAM@Z PROC		; PvPBalance::modifyDefenseRate, COMDAT
; _this$ = ecx

; 142  : void PvPBalance::modifyDefenseRate(short UserIndex, short TargetIndex, float& Value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	LPOBJ objSource = &gObj[UserIndex];
; 144  : 	LPOBJ objTarget = &gObj[TargetIndex];

  00003	0f bf 45 0c	 movsx	 eax, WORD PTR _TargetIndex$[ebp]

; 145  : 	PvPBalanceInfo* modifyInfo = getInfo(objSource->Class, objTarget->Class);

  00007	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000d	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00013	0f b6 84 10 90
	00 00 00	 movzx	 eax, BYTE PTR [eax+edx+144]
  0001b	50		 push	 eax
  0001c	0f bf 45 08	 movsx	 eax, WORD PTR _UserIndex$[ebp]
  00020	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00026	0f b6 84 10 90
	00 00 00	 movzx	 eax, BYTE PTR [eax+edx+144]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z ; PvPBalance::getInfo
  00034	8b d0		 mov	 edx, eax

; 146  : 
; 147  : 	if (modifyInfo == NULL) {

  00036	85 d2		 test	 edx, edx
  00038	74 62		 je	 SHORT $LN6@modifyDefe

; 148  : 		return;
; 149  : 	}
; 150  : 
; 151  : 	float tmpValue = 0;
; 152  : 	
; 153  : 	if (modifyInfo->IncreaseDefenseRatePercent > 0) {

  0003a	0f b7 42 0a	 movzx	 eax, WORD PTR [edx+10]
  0003e	0f 57 db	 xorps	 xmm3, xmm3
  00041	8b 4d 10	 mov	 ecx, DWORD PTR _Value$[ebp]
  00044	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  0004c	66 85 c0	 test	 ax, ax
  0004f	7e 21		 jle	 SHORT $LN4@modifyDefe

; 154  : 		tmpValue = (Value * modifyInfo->IncreaseDefenseRatePercent) / 100;

  00051	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00055	98		 cwde
  00056	66 0f 6e c0	 movd	 xmm0, eax
  0005a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0005d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00061	f3 0f 5e c2	 divss	 xmm0, xmm2

; 155  : 
; 156  : 		if (tmpValue > 0) {

  00065	0f 2f c3	 comiss	 xmm0, xmm3
  00068	76 08		 jbe	 SHORT $LN4@modifyDefe

; 157  : #if (PVPBALANCE_DEBUG == 1)
; 158  : 			LogAddC(2, "[PvPBalance] [DEBUG] defrate inc, source: %f, bonus: %f",
; 159  : 				Value, tmpValue);
; 160  : #endif
; 161  : 			Value += tmpValue;

  0006a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006e	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN4@modifyDefe:

; 162  : 		}
; 163  : 	} 
; 164  : 	
; 165  : 	if (modifyInfo->DecreaseDefenseRatePercent > 0) {

  00072	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00076	66 85 c0	 test	 ax, ax
  00079	7e 21		 jle	 SHORT $LN6@modifyDefe

; 166  : 		tmpValue = (Value * modifyInfo->DecreaseDefenseRatePercent) / 100;

  0007b	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0007f	98		 cwde
  00080	66 0f 6e c0	 movd	 xmm0, eax
  00084	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00087	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0008b	f3 0f 5e c2	 divss	 xmm0, xmm2

; 167  : 
; 168  : 		if (tmpValue > 0) {

  0008f	0f 2f c3	 comiss	 xmm0, xmm3
  00092	76 08		 jbe	 SHORT $LN6@modifyDefe

; 169  : #if (PVPBALANCE_DEBUG == 1)
; 170  : 			LogAddC(2, "[PvPBalance] [DEBUG] defrate dec, source: %f, minus: %f",
; 171  : 				Value, tmpValue);
; 172  : #endif
; 173  : 			Value -= tmpValue;

  00094	f3 0f 5c c8	 subss	 xmm1, xmm0
  00098	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN6@modifyDefe:

; 174  : 		}
; 175  : 	}
; 176  : }

  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
?modifyDefenseRate@PvPBalance@@QAEXFFAAM@Z ENDP		; PvPBalance::modifyDefenseRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?modifyAttackRate@PvPBalance@@QAEXFFAAM@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 2
_TargetIndex$ = 12					; size = 2
_Value$ = 16						; size = 4
?modifyAttackRate@PvPBalance@@QAEXFFAAM@Z PROC		; PvPBalance::modifyAttackRate, COMDAT
; _this$ = ecx

; 106  : void PvPBalance::modifyAttackRate(short UserIndex, short TargetIndex, float& Value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 107  : 	LPOBJ objSource = &gObj[UserIndex];
; 108  : 	LPOBJ objTarget = &gObj[TargetIndex];

  00003	0f bf 45 0c	 movsx	 eax, WORD PTR _TargetIndex$[ebp]

; 109  : 	PvPBalanceInfo* modifyInfo = getInfo(objSource->Class, objTarget->Class);

  00007	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000d	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00013	0f b6 84 10 90
	00 00 00	 movzx	 eax, BYTE PTR [eax+edx+144]
  0001b	50		 push	 eax
  0001c	0f bf 45 08	 movsx	 eax, WORD PTR _UserIndex$[ebp]
  00020	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00026	0f b6 84 10 90
	00 00 00	 movzx	 eax, BYTE PTR [eax+edx+144]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 ?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z ; PvPBalance::getInfo
  00034	8b d0		 mov	 edx, eax

; 110  : 
; 111  : 	if (modifyInfo == NULL) {

  00036	85 d2		 test	 edx, edx
  00038	74 62		 je	 SHORT $LN6@modifyAtta

; 112  : 		return;
; 113  : 	}
; 114  : 
; 115  : 	float tmpValue = 0;
; 116  : 	
; 117  : 	if (modifyInfo->IncreaseAttackRatePercent > 0) {

  0003a	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  0003e	0f 57 db	 xorps	 xmm3, xmm3
  00041	8b 4d 10	 mov	 ecx, DWORD PTR _Value$[ebp]
  00044	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@42c80000
  0004c	66 85 c0	 test	 ax, ax
  0004f	7e 21		 jle	 SHORT $LN4@modifyAtta

; 118  : 		tmpValue = (Value * modifyInfo->IncreaseAttackRatePercent) / 100;

  00051	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00055	98		 cwde
  00056	66 0f 6e c0	 movd	 xmm0, eax
  0005a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0005d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00061	f3 0f 5e c2	 divss	 xmm0, xmm2

; 119  : 
; 120  : 		if (tmpValue > 0) {

  00065	0f 2f c3	 comiss	 xmm0, xmm3
  00068	76 08		 jbe	 SHORT $LN4@modifyAtta

; 121  : #if (PVPBALANCE_DEBUG == 1)
; 122  : 			LogAddC(2, "[PvPBalance] [DEBUG] atkrate inc, source: %f, bonus: %f",
; 123  : 				Value, tmpValue);
; 124  : #endif
; 125  : 			Value += tmpValue;

  0006a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006e	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN4@modifyAtta:

; 126  : 		}
; 127  : 	} 
; 128  : 	
; 129  : 	if (modifyInfo->DecreaseAttackRatePercent > 0) {

  00072	0f b7 42 08	 movzx	 eax, WORD PTR [edx+8]
  00076	66 85 c0	 test	 ax, ax
  00079	7e 21		 jle	 SHORT $LN6@modifyAtta

; 130  : 		tmpValue = (Value * modifyInfo->DecreaseAttackRatePercent) / 100;

  0007b	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0007f	98		 cwde
  00080	66 0f 6e c0	 movd	 xmm0, eax
  00084	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00087	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0008b	f3 0f 5e c2	 divss	 xmm0, xmm2

; 131  : 
; 132  : 		if (tmpValue > 0) {

  0008f	0f 2f c3	 comiss	 xmm0, xmm3
  00092	76 08		 jbe	 SHORT $LN6@modifyAtta

; 133  : #if (PVPBALANCE_DEBUG == 1)
; 134  : 			LogAddC(2, "[PvPBalance] [DEBUG] atkrate dec, source: %f, minus: %f",
; 135  : 				Value, tmpValue);
; 136  : #endif
; 137  : 			Value -= tmpValue;

  00094	f3 0f 5c c8	 subss	 xmm1, xmm0
  00098	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN6@modifyAtta:

; 138  : 		}
; 139  : 	}
; 140  : }

  0009c	5d		 pop	 ebp
  0009d	c2 0c 00	 ret	 12			; 0000000cH
?modifyAttackRate@PvPBalance@@QAEXFFAAM@Z ENDP		; PvPBalance::modifyAttackRate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?modifyDamage@PvPBalance@@QAEXFFAAH@Z
_TEXT	SEGMENT
_UserIndex$ = 8						; size = 2
_TargetIndex$ = 12					; size = 2
_Value$ = 16						; size = 4
?modifyDamage@PvPBalance@@QAEXFFAAH@Z PROC		; PvPBalance::modifyDamage, COMDAT
; _this$ = ecx

; 70   : void PvPBalance::modifyDamage(short UserIndex, short TargetIndex, int& Value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 71   : 	LPOBJ objSource = &gObj[UserIndex];
; 72   : 	LPOBJ objTarget = &gObj[TargetIndex];

  00003	0f bf 45 0c	 movsx	 eax, WORD PTR _TargetIndex$[ebp]

; 73   : 	PvPBalanceInfo* modifyInfo = getInfo(objSource->Class, objTarget->Class);

  00007	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?gObj@@3PAUOBJECTSTRUCT@@A ; gObj
  0000d	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00013	56		 push	 esi
  00014	0f b6 84 10 90
	00 00 00	 movzx	 eax, BYTE PTR [eax+edx+144]
  0001c	50		 push	 eax
  0001d	0f bf 45 08	 movsx	 eax, WORD PTR _UserIndex$[ebp]
  00021	69 c0 40 27 00
	00		 imul	 eax, eax, 10048
  00027	0f b6 84 10 90
	00 00 00	 movzx	 eax, BYTE PTR [eax+edx+144]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z ; PvPBalance::getInfo
  00035	8b f0		 mov	 esi, eax

; 74   : 
; 75   : 	if (modifyInfo == NULL) {

  00037	85 f6		 test	 esi, esi
  00039	74 5b		 je	 SHORT $LN6@modifyDama

; 76   : 		return;
; 77   : 	}
; 78   : 
; 79   : 	int tmpValue = 0;
; 80   : 	
; 81   : 	if (modifyInfo->IncreaseDamagePercent > 0) {

  0003b	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  0003f	57		 push	 edi
  00040	8b 7d 10	 mov	 edi, DWORD PTR _Value$[ebp]
  00043	66 85 c0	 test	 ax, ax
  00046	7e 23		 jle	 SHORT $LN4@modifyDama

; 82   : 		tmpValue = (Value * modifyInfo->IncreaseDamagePercent) / 100;

  00048	0f bf c8	 movsx	 ecx, ax
  0004b	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00050	53		 push	 ebx
  00051	8b 1f		 mov	 ebx, DWORD PTR [edi]
  00053	0f af cb	 imul	 ecx, ebx
  00056	f7 e9		 imul	 ecx
  00058	c1 fa 05	 sar	 edx, 5
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx

; 83   : 
; 84   : 		if (tmpValue > 0) {

  00062	85 c0		 test	 eax, eax
  00064	7e 04		 jle	 SHORT $LN9@modifyDama

; 85   : #if (PVPBALANCE_DEBUG == 1)
; 86   : 			LogAddC(2, "[PvPBalance] [DEBUG] dmg inc, source: %d, bonus: %d",
; 87   : 				Value, tmpValue);
; 88   : #endif
; 89   : 			Value += tmpValue;

  00066	03 c3		 add	 eax, ebx
  00068	89 07		 mov	 DWORD PTR [edi], eax
$LN9@modifyDama:
  0006a	5b		 pop	 ebx
$LN4@modifyDama:

; 90   : 		}
; 91   : 	} 
; 92   : 	
; 93   : 	if (modifyInfo->DecreaseDamagePercent > 0) {

  0006b	0f b7 4e 04	 movzx	 ecx, WORD PTR [esi+4]
  0006f	66 85 c9	 test	 cx, cx
  00072	7e 21		 jle	 SHORT $LN8@modifyDama

; 94   : 		tmpValue = (Value * modifyInfo->DecreaseDamagePercent) / 100;

  00074	8b 37		 mov	 esi, DWORD PTR [edi]
  00076	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0007b	0f bf c9	 movsx	 ecx, cx
  0007e	0f af ce	 imul	 ecx, esi
  00081	f7 e9		 imul	 ecx
  00083	c1 fa 05	 sar	 edx, 5
  00086	8b c2		 mov	 eax, edx
  00088	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008b	03 c2		 add	 eax, edx

; 95   : 
; 96   : 		if (tmpValue > 0) {

  0008d	85 c0		 test	 eax, eax
  0008f	7e 04		 jle	 SHORT $LN8@modifyDama

; 97   : #if (PVPBALANCE_DEBUG == 1)
; 98   : 			LogAddC(2, "[PvPBalance] [DEBUG] dmg dec, source: %d, minus: %d",
; 99   : 				Value, tmpValue);
; 100  : #endif
; 101  : 			Value -= tmpValue;

  00091	2b f0		 sub	 esi, eax
  00093	89 37		 mov	 DWORD PTR [edi], esi
$LN8@modifyDama:
  00095	5f		 pop	 edi
$LN6@modifyDama:
  00096	5e		 pop	 esi

; 102  : 		}
; 103  : 	}
; 104  : }

  00097	5d		 pop	 ebp
  00098	c2 0c 00	 ret	 12			; 0000000cH
?modifyDamage@PvPBalance@@QAEXFFAAH@Z ENDP		; PvPBalance::modifyDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_SourceClassType$ = 8					; size = 1
_TargetClassType$ = 12					; size = 1
?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z PROC	; PvPBalance::getInfo, COMDAT
; _this$ = ecx

; 57   : PvPBalanceInfo* PvPBalance::getInfo(BYTE SourceClassType, BYTE TargetClassType) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 58   : 	if (!m_isLoaded) {

  00007	80 3f 00	 cmp	 BYTE PTR [edi], 0
  0000a	75 09		 jne	 SHORT $LN5@getInfo

; 59   : 		return NULL;

  0000c	33 c0		 xor	 eax, eax
  0000e	5f		 pop	 edi

; 68   : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c2 08 00	 ret	 8
$LN5@getInfo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00015	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00018	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0001d	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
  00020	f7 e9		 imul	 ecx
  00022	53		 push	 ebx
  00023	03 d1		 add	 edx, ecx
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 61   : 	for (int i = 0; i < m_ClassInfo.size(); i++) {

  00025	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00027	c1 fa 03	 sar	 edx, 3
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	56		 push	 esi
  00030	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 61   : 	for (int i = 0; i < m_ClassInfo.size(); i++) {

  00032	74 3c		 je	 SHORT $LN67@getInfo
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00034	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 314  : 		return (_Myval2);

  00037	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  00039	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  0003c	0f 1f 40 00	 npad	 4
$LL4@getInfo:
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 63   : 			&& m_ClassInfo[i].TargetClassType == TargetClassType) {

  00040	8a 45 08	 mov	 al, BYTE PTR _SourceClassType$[ebp]
  00043	38 06		 cmp	 BYTE PTR [esi], al
  00045	75 08		 jne	 SHORT $LN2@getInfo
  00047	8a 45 0c	 mov	 al, BYTE PTR _TargetClassType$[ebp]
  0004a	38 46 01	 cmp	 BYTE PTR [esi+1], al
  0004d	74 2c		 je	 SHORT $LN63@getInfo
$LN2@getInfo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0004f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00052	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00057	2b 4f 04	 sub	 ecx, DWORD PTR [edi+4]
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 61   : 	for (int i = 0; i < m_ClassInfo.size(); i++) {

  0005a	43		 inc	 ebx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0005b	f7 e9		 imul	 ecx
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 61   : 	for (int i = 0; i < m_ClassInfo.size(); i++) {

  0005d	83 c6 0e	 add	 esi, 14			; 0000000eH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  00060	03 d1		 add	 edx, ecx
  00062	c1 fa 03	 sar	 edx, 3
  00065	8b c2		 mov	 eax, edx
  00067	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006a	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 61   : 	for (int i = 0; i < m_ClassInfo.size(); i++) {

  0006c	3b d8		 cmp	 ebx, eax
  0006e	72 d0		 jb	 SHORT $LL4@getInfo
$LN67@getInfo:
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx

; 64   : 			return &m_ClassInfo[i];
; 65   : 		}
; 66   : 	}
; 67   : 	return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	5f		 pop	 edi

; 68   : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 08 00	 ret	 8
$LN63@getInfo:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1240 : 		return (*(this->_Myfirst() + _Pos));

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0007e	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]
  00085	2b c3		 sub	 eax, ebx
  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	5f		 pop	 edi
  0008a	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 68   : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?getInfo@PvPBalance@@QAEPAUPvPBalanceInfo@@EE@Z ENDP	; PvPBalance::getInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?Read@PvPBalance@@QAEXPBD@Z
_TEXT	SEGMENT
_Result$ = -312						; size = 12
$T2 = -300						; size = 4
$T3 = -296						; size = 4
$T4 = -292						; size = 4
$T5 = -288						; size = 4
$T6 = -284						; size = 4
$T7 = -280						; size = 4
$T8 = -276						; size = 4
$T9 = -272						; size = 4
$T10 = -268						; size = 4
$T11 = -264						; size = 4
$T12 = -260						; size = 4
$T13 = -256						; size = 4
$T14 = -252						; size = 4
$T15 = -248						; size = 4
$T16 = -244						; size = 4
_nodeStart$ = -240					; size = 4
_nodeIt$17 = -236					; size = 4
_Document$ = -232					; size = 200
_newInfo$18 = -32					; size = 14
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_File$ = 8						; size = 4
?Read@PvPBalance@@QAEXPBD@Z PROC			; PvPBalance::Read, COMDAT
; _this$ = ecx

; 21   : void PvPBalance::Read(const char* File) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Read@PvPBalance@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f1		 mov	 esi, ecx
  0002f	8b 7d 08	 mov	 edi, DWORD PTR _File$[ebp]

; 22   : 	using namespace pugi;
; 23   : 	xml_document Document;

  00032	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00038	e8 00 00 00 00	 call	 ??0xml_document@pugi@@QAE@XZ ; pugi::xml_document::xml_document

; 24   : 	xml_parse_result Result = Document.load_file(File);

  0003d	6a 00		 push	 0
  0003f	6a 74		 push	 116			; 00000074H
  00041	57		 push	 edi
  00042	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _Result$[ebp]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00056	e8 00 00 00 00	 call	 ?load_file@xml_document@pugi@@QAE?AUxml_parse_result@2@PBDIW4xml_encoding@2@@Z ; pugi::xml_document::load_file

; 25   : 
; 26   : 	if (Result.status != status_ok) {

  0005b	83 bd c8 fe ff
	ff 00		 cmp	 DWORD PTR _Result$[ebp], 0
  00062	74 10		 je	 SHORT $LN5@Read

; 27   : 		MsgBox("[PvPBalance] File %s not found!", File);

  00064	57		 push	 edi
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EMPLKLM@?$FLPvPBalance?$FN?5File?5?$CFs?5not?5found?$CB?$AA@
  0006a	e8 00 00 00 00	 call	 ?MsgBox@@YAXPADZZ	; MsgBox
  0006f	e9 50 02 00 00	 jmp	 $LN35@Read
$LN5@Read:

; 28   : 		return;
; 29   : 	}
; 30   : 
; 31   : 	xml_node nodeStart = Document.child("pvpbalance");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IMCHDBAK@pvpbalance?$AA@
  00079	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _nodeStart$[ebp]
  0007f	50		 push	 eax
  00080	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00086	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child

; 32   : 
; 33   : 	for (xml_node nodeIt = nodeStart.child("rule"); nodeIt; nodeIt = nodeIt.next_sibling()) {

  0008b	68 00 00 00 00	 push	 OFFSET ??_C@_04LPGJEGEF@rule?$AA@
  00090	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _nodeIt$17[ebp]
  00096	50		 push	 eax
  00097	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeStart$[ebp]
  0009d	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  000a2	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  000a8	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  000ad	85 c0		 test	 eax, eax
  000af	0f 84 e7 01 00
	00		 je	 $LN3@Read
  000b5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Read:

; 34   : 		PvPBalanceInfo newInfo = { 0 };
; 35   : 		newInfo.SourceClassType = (BYTE)nodeIt.attribute("source").as_int(-1);

  000c0	6a ff		 push	 -1
  000c2	68 00 00 00 00	 push	 OFFSET ??_C@_06OEKOLKIL@source?$AA@
  000c7	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  000cd	c7 45 e9 00 00
	00 00		 mov	 DWORD PTR _newInfo$18[ebp+9], 0
  000d4	0f 57 c0	 xorps	 xmm0, xmm0
  000d7	c6 45 ed 00	 mov	 BYTE PTR _newInfo$18[ebp+13], 0
  000db	50		 push	 eax
  000dc	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  000e2	66 0f d6 45 e1	 movq	 QWORD PTR _newInfo$18[ebp+1], xmm0
  000e7	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  000ec	8b c8		 mov	 ecx, eax
  000ee	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 36   : 		newInfo.TargetClassType = (BYTE)nodeIt.attribute("target").as_int(-1);

  000f3	6a ff		 push	 -1
  000f5	88 45 e0	 mov	 BYTE PTR _newInfo$18[ebp], al
  000f8	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_06JJLAMBGK@target?$AA@
  00103	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0010f	8b c8		 mov	 ecx, eax
  00111	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 37   : 		newInfo.IncreaseDamagePercent = nodeIt.child("damage").attribute("increase").as_int(0);

  00116	6a 00		 push	 0
  00118	88 45 e1	 mov	 BYTE PTR _newInfo$18[ebp+1], al
  0011b	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_08EMJGLFCF@increase?$AA@
  00126	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  0012c	50		 push	 eax
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_06GJOIPFFF@damage?$AA@
  00132	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  0013e	8b c8		 mov	 ecx, eax
  00140	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00145	8b c8		 mov	 ecx, eax
  00147	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 38   : 		newInfo.DecreaseDamagePercent = nodeIt.child("damage").attribute("decrease").as_int(0);

  0014c	6a 00		 push	 0
  0014e	66 89 45 e2	 mov	 WORD PTR _newInfo$18[ebp+2], ax
  00152	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_08OALDEOCE@decrease?$AA@
  0015d	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_06GJOIPFFF@damage?$AA@
  00169	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  00175	8b c8		 mov	 ecx, eax
  00177	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  0017c	8b c8		 mov	 ecx, eax
  0017e	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 39   : 		newInfo.IncreaseAttackRatePercent = nodeIt.child("attackrate").attribute("increase").as_int(0);

  00183	6a 00		 push	 0
  00185	66 89 45 e4	 mov	 WORD PTR _newInfo$18[ebp+4], ax
  00189	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  0018f	68 00 00 00 00	 push	 OFFSET ??_C@_08EMJGLFCF@increase?$AA@
  00194	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0019a	50		 push	 eax
  0019b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NIBJMFLD@attackrate?$AA@
  001a0	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  001ac	8b c8		 mov	 ecx, eax
  001ae	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001b3	8b c8		 mov	 ecx, eax
  001b5	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 40   : 		newInfo.DecreaseAttackRatePercent = nodeIt.child("attackrate").attribute("decrease").as_int(0);

  001ba	6a 00		 push	 0
  001bc	66 89 45 e6	 mov	 WORD PTR _newInfo$18[ebp+6], ax
  001c0	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  001c6	68 00 00 00 00	 push	 OFFSET ??_C@_08OALDEOCE@decrease?$AA@
  001cb	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  001d1	50		 push	 eax
  001d2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NIBJMFLD@attackrate?$AA@
  001d7	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  001e3	8b c8		 mov	 ecx, eax
  001e5	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  001ea	8b c8		 mov	 ecx, eax
  001ec	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 41   : 		newInfo.IncreaseDefenseRatePercent = nodeIt.child("defenserate").attribute("increase").as_int(0);

  001f1	6a 00		 push	 0
  001f3	66 89 45 e8	 mov	 WORD PTR _newInfo$18[ebp+8], ax
  001f7	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_08EMJGLFCF@increase?$AA@
  00202	50		 push	 eax
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EPNCHODA@defenserate?$AA@
  00208	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0020e	50		 push	 eax
  0020f	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  00215	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  0021a	8b c8		 mov	 ecx, eax
  0021c	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00221	8b c8		 mov	 ecx, eax
  00223	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int

; 42   : 		newInfo.DecreaseDefenseRatePercent = nodeIt.child("defenserate").attribute("decrease").as_int(0);

  00228	6a 00		 push	 0
  0022a	66 89 45 ea	 mov	 WORD PTR _newInfo$18[ebp+10], ax
  0022e	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_08OALDEOCE@decrease?$AA@
  00239	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0023f	50		 push	 eax
  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EPNCHODA@defenserate?$AA@
  00245	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ?child@xml_node@pugi@@QBE?AV12@PBD@Z ; pugi::xml_node::child
  00251	8b c8		 mov	 ecx, eax
  00253	e8 00 00 00 00	 call	 ?attribute@xml_node@pugi@@QBE?AVxml_attribute@2@PBD@Z ; pugi::xml_node::attribute
  00258	8b c8		 mov	 ecx, eax
  0025a	e8 00 00 00 00	 call	 ?as_int@xml_attribute@pugi@@QBEHH@Z ; pugi::xml_attribute::as_int
  0025f	66 89 45 ec	 mov	 WORD PTR _newInfo$18[ebp+12], ax

; 43   : #if (PVPBALANCE_DEBUG == 1)
; 44   : 		LogAddC(2, "[PvPBalance] [DEBUG] %d vs %d, dmg: %d / %d, atkrate: %d / %d, defrate: %d / %d",
; 45   : 			newInfo.SourceClassType, newInfo.TargetClassType, newInfo.IncreaseDamagePercent,
; 46   : 			newInfo.DecreaseDamagePercent, newInfo.IncreaseAttackRatePercent, 
; 47   : 			newInfo.DecreaseAttackRatePercent, newInfo.IncreaseDefenseRatePercent,
; 48   : 			newInfo.DecreaseDefenseRatePercent);
; 49   : #endif
; 50   : 		m_ClassInfo.push_back(newInfo);

  00263	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00266	8d 45 e0	 lea	 eax, DWORD PTR _newInfo$18[ebp]
  00269	50		 push	 eax
  0026a	e8 00 00 00 00	 call	 ?push_back@?$vector@UPvPBalanceInfo@@V?$allocator@UPvPBalanceInfo@@@std@@@std@@QAEXABUPvPBalanceInfo@@@Z ; std::vector<PvPBalanceInfo,std::allocator<PvPBalanceInfo> >::push_back
  0026f	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00275	50		 push	 eax
  00276	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  0027c	e8 00 00 00 00	 call	 ?next_sibling@xml_node@pugi@@QBE?AV12@XZ ; pugi::xml_node::next_sibling
  00281	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _nodeIt$17[ebp]
  00287	8b 00		 mov	 eax, DWORD PTR [eax]
  00289	89 85 14 ff ff
	ff		 mov	 DWORD PTR _nodeIt$17[ebp], eax
  0028f	e8 00 00 00 00	 call	 ??Bxml_node@pugi@@QBEP6AXPAPAPAV01@@ZXZ ; pugi::xml_node::operator void (__cdecl*)(pugi::xml_node * * *)
  00294	85 c0		 test	 eax, eax
  00296	0f 85 24 fe ff
	ff		 jne	 $LL4@Read
$LN3@Read:

; 51   : 	}
; 52   : 	m_isLoaded = true;

  0029c	c6 06 01	 mov	 BYTE PTR [esi], 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1179 : 		return (this->_Mylast() - this->_Myfirst());

  0029f	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  002a4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002a7	2b 4e 04	 sub	 ecx, DWORD PTR [esi+4]
  002aa	f7 e9		 imul	 ecx
  002ac	03 d1		 add	 edx, ecx
  002ae	c1 fa 03	 sar	 edx, 3
  002b1	8b c2		 mov	 eax, edx
  002b3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002b6	03 c2		 add	 eax, edx
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 53   : 	LogAddTD("[PvPBalance] Loaded %d rules",

  002b8	50		 push	 eax
  002b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KHHKBPLP@?$FLPvPBalance?$FN?5Loaded?5?$CFd?5rules?$AA@
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR ?LogAddTD@@3P6AXPADZZA ; LogAddTD
$LN35@Read:
  002c4	83 c4 08	 add	 esp, 8

; 54   : 		m_ClassInfo.size());
; 55   : }

  002c7	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  002cd	e8 00 00 00 00	 call	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
  002d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002dc	59		 pop	 ecx
  002dd	5f		 pop	 edi
  002de	5e		 pop	 esi
  002df	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e2	33 cd		 xor	 ecx, ebp
  002e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e9	8b e5		 mov	 esp, ebp
  002eb	5d		 pop	 ebp
  002ec	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Read@PvPBalance@@QAEXPBD@Z$0:
  00000	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _Document$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1xml_document@pugi@@QAE@XZ ; pugi::xml_document::~xml_document
__ehhandler$?Read@PvPBalance@@QAEXPBD@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Read@PvPBalance@@QAEXPBD@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Read@PvPBalance@@QAEXPBD@Z ENDP			; PvPBalance::Read
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?Init@PvPBalance@@QAEXXZ
_TEXT	SEGMENT
?Init@PvPBalance@@QAEXXZ PROC				; PvPBalance::Init, COMDAT
; _this$ = ecx

; 17   : 	m_isLoaded = false;

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1542 : 		this->_Mylast() = this->_Myfirst();

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	89 41 08	 mov	 DWORD PTR [ecx+8], eax
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 19   : }

  00009	c3		 ret	 0
?Init@PvPBalance@@QAEXXZ ENDP				; PvPBalance::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?Load@PvPBalance@@QAEXXZ
_TEXT	SEGMENT
?Load@PvPBalance@@QAEXXZ PROC				; PvPBalance::Load, COMDAT
; _this$ = ecx

; 11   : void PvPBalance::Load() {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 12   : 	Init();

  00003	e8 00 00 00 00	 call	 ?Init@PvPBalance@@QAEXXZ ; PvPBalance::Init

; 13   : 	Read(gDirPath.GetNewPath(FILE_CUSTOM_PVPBALANCE));

  00008	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MJBDCBDO@Custom?2PvPBalance?4xml?$AA@
  0000d	b9 00 00 00 00	 mov	 ecx, OFFSET ?gDirPath@@3VCDirPath@@A ; gDirPath
  00012	e8 00 00 00 00	 call	 ?GetNewPath@CDirPath@@QAEPADPAD@Z ; CDirPath::GetNewPath
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Read@PvPBalance@@QAEXPBD@Z ; PvPBalance::Read
  0001f	5e		 pop	 esi

; 14   : }

  00020	c3		 ret	 0
?Load@PvPBalance@@QAEXXZ ENDP				; PvPBalance::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ??1PvPBalance@@QAE@XZ
_TEXT	SEGMENT
??1PvPBalance@@QAE@XZ PROC				; PvPBalance::~PvPBalance, COMDAT
; _this$ = ecx

; 9    : PvPBalance::~PvPBalance() {}

  00000	56		 push	 esi
  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1656 : 		if (this->_Myfirst() != pointer())

  00005	8b 3e		 mov	 edi, DWORD PTR [esi]
  00007	85 ff		 test	 edi, edi
  00009	74 35		 je	 SHORT $LN7@PvPBalance

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0000b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00013	2b cf		 sub	 ecx, edi
  00015	f7 e9		 imul	 ecx
  00017	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00019	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1660 : 			this->_Getal().deallocate(this->_Myfirst(),

  0001b	c1 fa 03	 sar	 edx, 3
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 909  : 		_Mybase::deallocate(_Ptr, _Count);

  00025	50		 push	 eax
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UPvPBalanceInfo@@@std@@QAEXPAUPvPBalanceInfo@@I@Z ; std::allocator<PvPBalanceInfo>::deallocate
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1662 : 			this->_Myfirst() = pointer();

  0002c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1663 : 			this->_Mylast() = pointer();

  00032	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1664 : 			this->_Myend() = pointer();

  00039	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN7@PvPBalance:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 9    : PvPBalance::~PvPBalance() {}

  00042	c3		 ret	 0
??1PvPBalance@@QAE@XZ ENDP				; PvPBalance::~PvPBalance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ??0PvPBalance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PvPBalance@@QAE@XZ PROC				; PvPBalance::PvPBalance, COMDAT
; _this$ = ecx

; 8    : PvPBalance::PvPBalance() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 480  : 		_Myfirst = pointer();

  00009	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 481  : 		_Mylast = pointer();

  00010	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 482  : 		_Myend = pointer();

  00017	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp

; 8    : PvPBalance::PvPBalance() {}

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??0PvPBalance@@QAE@XZ ENDP				; PvPBalance::PvPBalance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 98   : 	{	// deallocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 99   :  #if defined(_M_IX86) || defined(_M_X64)
; 100  : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00003	83 c8 ff	 or	 eax, -1
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00009	33 d2		 xor	 edx, edx
  0000b	f7 75 10	 div	 DWORD PTR __Sz$[ebp]
  0000e	3b c8		 cmp	 ecx, eax
  00010	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn

; 101  : 	const size_t _User_size = _Count * _Sz;

  00016	0f af 4d 10	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 102  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 2b		 jb	 SHORT $LN9@Deallocate

; 103  : 		{	// deallocate large block
; 104  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 105  : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00025	a8 1f		 test	 al, 31			; 0000001fH
  00027	0f 85 00 00 00
	00		 jne	 __invalid_parameter_noinfo_noreturn

; 106  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 107  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 108  : 		const uintptr_t _Ptr_container =
; 109  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0002d	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]

; 110  : 
; 111  :  #ifdef _DEBUG
; 112  : 		// If the following asserts, it likely means that we are performing
; 113  : 		// an aligned delete on memory coming from an unaligned allocation.
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 115  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 116  : 				_BIG_ALLOCATION_SENTINEL);
; 117  :  #endif /* _DEBUG */
; 118  : 
; 119  : 		// Extra paranoia on aligned allocation/deallocation
; 120  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00030	3b c8		 cmp	 ecx, eax
  00032	0f 83 00 00 00
	00		 jae	 __invalid_parameter_noinfo_noreturn

; 121  : 
; 122  :  #ifdef _DEBUG
; 123  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 124  : 			<= _Ptr_user - _Ptr_container);
; 125  : 
; 126  :  #else /* _DEBUG */
; 127  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00038	2b c1		 sub	 eax, ecx
  0003a	83 f8 04	 cmp	 eax, 4
  0003d	0f 82 00 00 00
	00		 jb	 __invalid_parameter_noinfo_noreturn

; 128  : 			<= _Ptr_user - _Ptr_container);
; 129  :  #endif /* _DEBUG */
; 130  : 
; 131  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00043	83 f8 23	 cmp	 eax, 35			; 00000023H
  00046	76 08		 jbe	 SHORT $LN3@Deallocate
  00048	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 132  : 			<= _NON_USER_SIZE);
; 133  : 
; 134  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 135  : 		}
; 136  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 137  : 
; 138  : 	::operator delete(_Ptr);

  00050	51		 push	 ecx
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4

; 139  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 54   : 	{	// allocate storage for _Count elements of size _Sz

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 55   : 	void *_Ptr = 0;
; 56   : 
; 57   : 	if (_Count == 0)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 04		 jne	 SHORT $LN2@Allocate

; 58   : 		return (_Ptr);

  0000a	33 c0		 xor	 eax, eax

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
$LN2@Allocate:

; 59   : 
; 60   : 	// check overflow of multiply
; 61   : 	if ((size_t)(-1) / _Sz < _Count)

  0000e	83 c8 ff	 or	 eax, -1
  00011	33 d2		 xor	 edx, edx
  00013	f7 75 0c	 div	 DWORD PTR __Sz$[ebp]
  00016	3b c1		 cmp	 eax, ecx
  00018	0f 82 00 00 00
	00		 jb	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 62   : 		_Xbad_alloc();	// report no memory
; 63   : 	const size_t _User_size = _Count * _Sz;

  0001e	0f af 4d 0c	 imul	 ecx, DWORD PTR __Sz$[ebp]

; 64   : 
; 65   :  #if defined(_M_IX86) || defined(_M_X64)
; 66   : 	if (_Try_aligned_allocation
; 67   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00022	80 7d 10 00	 cmp	 BYTE PTR __Try_aligned_allocation$[ebp], 0
  00026	74 31		 je	 SHORT $LN4@Allocate
  00028	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002e	72 29		 jb	 SHORT $LN4@Allocate

; 68   : 		{	// allocate large block
; 69   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 70   : 			"Big allocations should at least match vector register size");
; 71   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 72   : 		if (_Block_size <= _User_size)

  00033	3b c1		 cmp	 eax, ecx
  00035	0f 86 00 00 00
	00		 jbe	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc

; 73   : 			_Xbad_alloc();	// report no memory
; 74   : 		const uintptr_t _Ptr_container =
; 75   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00041	8b c8		 mov	 ecx, eax
  00043	83 c4 04	 add	 esp, 4

; 76   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  00046	85 c9		 test	 ecx, ecx
  00048	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 77   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0004e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00051	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 78   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 79   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00054	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
$LN4@Allocate:

; 80   : 
; 81   :  #ifdef _DEBUG
; 82   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 83   :  #endif /* _DEBUG */
; 84   : 		}
; 85   : 	else
; 86   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 87   : 
; 88   : 		{	// allocate normal block
; 89   : 		_Ptr = ::operator new(_User_size);

  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0005f	83 c4 04	 add	 esp, 4

; 90   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  00062	85 c0		 test	 eax, eax
  00064	0f 84 00 00 00
	00		 je	 __invalid_parameter_noinfo_noreturn

; 91   : 		}
; 92   : 	return (_Ptr);
; 93   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 44   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 88   :         (void)_Size;
; 89   :         return _Where;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]

; 90   :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\michel\desktop\source\gameserver\source\pvpbalance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 177  : }

  00000	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
